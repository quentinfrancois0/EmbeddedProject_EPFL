
camera_controller.elf:     file format elf32-littlenios2
camera_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00011d48 memsz 0x00011d48 flags r-x
    LOAD off    0x00012d68 vaddr 0x10111d68 paddr 0x101138c4 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00015420 vaddr 0x10115420 paddr 0x10115420 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116b4  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000470  101118f8  101118f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10111d68  101138c4  00012d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10115420  10115420  00015420  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10115580  10115580  000148c4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000148c4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001060  00000000  00000000  000148e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00029b11  00000000  00000000  00015948  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a642  00000000  00000000  0003f459  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000cf42  00000000  00000000  00049a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002810  00000000  00000000  000569e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003edb  00000000  00000000  000591f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000185ed  00000000  00000000  0005d0cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000756b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019a0  00000000  00000000  00075718  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007a97a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007a97d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007a989  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007a98a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007a98b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007a996  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007a9a1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0007a9ac  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  0007a9b6  2**0
                  CONTENTS, READONLY
 26 .jdi          000049d7  00000000  00000000  0007a9fb  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002b16be  00000000  00000000  0007f3d2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
101118f8 l    d  .rodata	00000000 .rodata
10111d68 l    d  .rwdata	00000000 .rwdata
10115420 l    d  .bss	00000000 .bss
10115580 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Temp/EmbeddedProject_EPFL/Camera/lab_4_project_template/sw/nios/camera_controller_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008a4 l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000c8 write_frame_line_blank_reg
101005f4 l     F .text	000000cc write_line_line_blank_reg
101006c0 l     F .text	000000c8 write_line_frame_blank_reg
10100788 l     F .text	0000002c read_frame_width_reg
101007b4 l     F .text	00000030 read_frame_height_reg
101007e4 l     F .text	00000030 read_frame_frame_blank_reg
10100814 l     F .text	00000030 read_frame_line_blank_reg
10100844 l     F .text	00000030 read_line_line_blank_reg
10100874 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
1010109c l     F .text	00000034 i2c_usleep
101010d0 l     F .text	00000044 wait_end_of_transfer
10101114 l     F .text	00000070 set_data_control
10101184 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10101e08 l     F .text	00000008 __fp_unlock
10101e1c l     F .text	0000019c __sinit.part.1
10101fb8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10111d68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
10103a28 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10111aa6 l     O .rodata	00000010 zeroes.4404
10106054 l     F .text	000000bc __sbprintf
10111ab6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10106318 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
101125b4 l     O .rwdata	00000020 lc_ctype_charset
10112594 l     O .rwdata	00000020 lc_message_charset
101125d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10111ae4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10109d30 l     F .text	000000fc __sprint_r.part.0
10111c18 l     O .rodata	00000010 blanks.4348
10111c08 l     O .rodata	00000010 zeroes.4349
1010b2bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010ea9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010ebbc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010ebe8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010ece8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010eddc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010eec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010f0b0 l     F .text	00000050 alt_get_errno
1010f100 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010f324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1011386c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1010f5b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010f6fc l     F .text	00000038 alt_dev_reg
101127b4 l     O .rwdata	00001060 jtag_uart_0
10113814 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f9ec l     F .text	0000020c altera_avalon_jtag_uart_irq
1010fbf8 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10113870 l     O .rwdata	00000009 hcinfo.2538
1011387c l     O .rwdata	0000000a hcinfo.2551
10113888 l     O .rwdata	00000009 hcinfo.2560
10113894 l     O .rwdata	0000000a hcinfo.2573
101138a0 l     O .rwdata	0000000a hcinfo.2586
101138ac l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1011099c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10111130 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10115454 g     O .bss	00000004 alt_instruction_exception_handler
101094a4 g     F .text	00000074 _mprec_log10
10109590 g     F .text	0000008c __any_on
10108108 g     F .text	00000054 _isatty_r
10111af0 g     O .rodata	00000028 __mprec_tinytens
1010efec g     F .text	0000007c alt_main
10103954 g     F .text	000000c0 _puts_r
10115480 g     O .bss	00000100 alt_irq
10108238 g     F .text	00000060 _lseek_r
101138c4 g       *ABS*	00000000 __flash_rwdata_start
10107ba0 g     F .text	000000ac __sflags
1010d5c8 g     F .text	00000088 .hidden __eqdf2
10115580 g       *ABS*	00000000 __alt_heap_start
10103918 g     F .text	0000003c printf
1010b79c g     F .text	0000009c _wcrtomb_r
10103d44 g     F .text	0000005c __sseek
10102158 g     F .text	00000010 __sinit
1010b644 g     F .text	00000140 __swbuf_r
1010815c g     F .text	0000007c _setlocale_r
10101fc0 g     F .text	00000068 __sfmoreglue
1010f08c g     F .text	00000024 __malloc_unlock
10110238 g     F .text	0000011c alt_hostfs_open
101084c4 g     F .text	0000015c memmove
10102140 g     F .text	00000018 _cleanup
10108620 g     F .text	000000a8 _Balloc
1010d650 g     F .text	000000dc .hidden __gtdf2
10111414 g     F .text	00000024 altera_nios2_gen2_irq_init
101012f8 g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102bb4 g     F .text	0000005c _fstat_r
10115420 g     O .bss	00000004 errno
10103cc0 g     F .text	00000008 __seofread
10115440 g     O .bss	00000004 alt_argv
1011b83c g       *ABS*	00000000 _gp
1010f584 g     F .text	00000030 usleep
10112634 g     O .rwdata	00000180 alt_fd_list
10110470 g     F .text	00000068 alt_hostfs_seek
10110b50 g     F .text	00000090 alt_find_dev
1010837c g     F .text	00000148 memcpy
10101e10 g     F .text	0000000c _cleanup_r
1010e8b4 g     F .text	000000dc .hidden __floatsidf
1010156c g     F .text	00000194 i2c_write_array
10110cf4 g     F .text	00000084 alt_fs_reg
101111f4 g     F .text	0000007c alt_io_redirect
1010d72c g     F .text	000000f4 .hidden __ltdf2
101118f8 g       *ABS*	00000000 __DTOR_END__
10103a14 g     F .text	00000014 puts
101114c8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10109be0 g     F .text	00000074 __fpclassifyd
10109400 g     F .text	000000a4 __ratio
1010b2a0 g     F .text	0000001c __vfiprintf_internal
1010fdf8 g     F .text	0000021c altera_avalon_jtag_uart_read
101038e8 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009cc g     F .text	00000108 cmos_sensor_output_generator_configure
101019a0 g     F .text	00000064 .hidden __udivsi3
1010ed38 g     F .text	000000a4 isatty
10111b40 g     O .rodata	000000c8 __mprec_tens
101081d8 g     F .text	0000000c __locale_charset
10111438 g     F .text	00000090 alt_icache_flush
1011542c g     O .bss	00000004 __malloc_top_pad
1011384c g     O .rwdata	00000004 __mb_cur_max
10108208 g     F .text	0000000c _localeconv_r
10108a2c g     F .text	0000003c __i2b
10107c4c g     F .text	000004bc __sfvwrite_r
10103c18 g     F .text	00000054 _sbrk_r
10110398 g     F .text	0000006c alt_hostfs_read
1010961c g     F .text	00000060 _read_r
10113864 g     O .rwdata	00000004 alt_max_fd
10101a5c g     F .text	000000f0 _fclose_r
10101dd8 g     F .text	00000030 fflush
10115428 g     O .bss	00000004 __malloc_max_sbrked_mem
1010c434 g     F .text	000008ac .hidden __adddf3
101091a8 g     F .text	0000010c __b2d
1010befc g     F .text	00000538 .hidden __umoddi3
1010ef18 g     F .text	000000d4 lseek
1011383c g     O .rwdata	00000004 _global_impure_ptr
1010967c g     F .text	00000564 _realloc_r
10115580 g       *ABS*	00000000 __bss_end
10111040 g     F .text	000000f0 alt_iic_isr_register
1011130c g     F .text	00000108 alt_tick
1010b984 g     F .text	00000578 .hidden __udivdi3
1010b5a0 g     F .text	00000024 _fputwc_r
10111b18 g     O .rodata	00000028 __mprec_bigtens
10108810 g     F .text	00000104 __s2b
1010e990 g     F .text	000000a8 .hidden __floatunsidf
10108ee8 g     F .text	00000060 __mcmp
10102178 g     F .text	00000018 __fp_lock_all
10110ff4 g     F .text	0000004c alt_ic_irq_enabled
10111270 g     F .text	0000009c alt_alarm_stop
10100b0c g     F .text	00000038 cmos_sensor_output_generator_stop
10115448 g     O .bss	00000004 alt_irq_active
10102754 g     F .text	00000444 _fseeko_r
10110354 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
1011260c g     O .rwdata	00000028 alt_dev_null
10110954 g     F .text	00000048 alt_dcache_flush_all
10108914 g     F .text	00000068 __hi0bits
1010e834 g     F .text	00000080 .hidden __fixdfsi
10100ad4 g     F .text	00000038 cmos_sensor_output_generator_start
101138c4 g       *ABS*	00000000 __ram_rwdata_end
1011385c g     O .rwdata	00000008 alt_dev_list
1010f604 g     F .text	000000f8 write
10111d68 g       *ABS*	00000000 __ram_rodata_end
1010ec38 g     F .text	000000b0 fstat
101022dc g     F .text	00000024 fprintf
101011e8 g     F .text	0000002c i2c_inst
1010d72c g     F .text	000000f4 .hidden __ledf2
10108c60 g     F .text	00000140 __pow5mult
10109e44 g     F .text	0000145c ___vfiprintf_internal_r
10115438 g     O .bss	00000004 __nlocale_changed
10101a04 g     F .text	00000058 .hidden __umodsi3
10115580 g       *ABS*	00000000 end
10102b98 g     F .text	0000001c fseeko
10102738 g     F .text	0000001c fseek
1010f924 g     F .text	000000c8 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
101118f8 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010ea38 g     F .text	00000064 .hidden __clzsi2
10110014 g     F .text	00000224 altera_avalon_jtag_uart_write
10102168 g     F .text	00000004 __sfp_lock_acquire
10108298 g     F .text	000000e4 memchr
10103e40 g     F .text	000021f8 ___vfprintf_internal_r
10102424 g     F .text	00000310 _free_r
101008d8 g     F .text	00000078 cmos_sensor_output_generator_inst
101081e4 g     F .text	00000010 __locale_mb_cur_max
10111744 g     F .text	00000180 __call_exitprocs
10115434 g     O .bss	00000004 __mlocale_changed
10113844 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
1011544c g     O .bss	00000004 _alt_tick_rate
10108da0 g     F .text	00000148 __lshift
10115450 g     O .bss	00000004 _alt_nticks
1010f374 g     F .text	000000fc read
1010f76c g     F .text	00000054 alt_sys_init
10103888 g     F .text	00000060 _open_r
10101278 g     F .text	00000080 i2c_configure
1011162c g     F .text	00000118 __register_exitproc
10108a68 g     F .text	000001f8 __multiply
1010fca0 g     F .text	00000068 altera_avalon_jtag_uart_close
10111d68 g       *ABS*	00000000 __ram_rwdata_start
101118f8 g       *ABS*	00000000 __ram_rodata_start
10115458 g     O .bss	00000028 __malloc_current_mallinfo
101092b4 g     F .text	0000014c __d2b
1010f7c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10110d78 g     F .text	000000b4 alt_get_fd
101107fc g     F .text	00000158 alt_busy_sleep
101062c4 g     F .text	00000054 _close_r
101115b0 g     F .text	0000007c memcmp
1010f880 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10115580 g       *ABS*	00000000 __alt_stack_base
1010f8d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10106170 g     F .text	00000154 __swsetup_r
1010cce0 g     F .text	000008e8 .hidden __divdf3
10102028 g     F .text	00000118 __sfp
10109518 g     F .text	00000078 __copybits
1011218c g     O .rwdata	00000408 __malloc_av_
10102174 g     F .text	00000004 __sinit_lock_release
1010d820 g     F .text	00000718 .hidden __muldf3
10103c6c g     F .text	00000054 __sread
10110be0 g     F .text	00000114 alt_find_file
101109ec g     F .text	000000a4 alt_dev_llist_insert
1010f068 g     F .text	00000024 __malloc_lock
101022b4 g     F .text	00000028 _fprintf_r
1010f4d4 g     F .text	000000b0 sbrk
10101d7c g     F .text	0000005c _fflush_r
1010b378 g     F .text	000000c4 _calloc_r
1010229c g     F .text	00000018 fopen
10115420 g       *ABS*	00000000 __bss_start
10103760 g     F .text	00000128 memset
10100b44 g     F .text	00000558 main
10115444 g     O .bss	00000004 alt_envp
10115424 g     O .bss	00000004 __malloc_max_total_mem
1010f820 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10101424 g     F .text	00000148 i2c_read
1010b784 g     F .text	00000018 __swbuf
10103da0 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10101b4c g     F .text	00000014 fclose
10106518 g     F .text	00001688 _dtoa_r
10102f54 g     F .text	0000080c _malloc_r
1010b8f8 g     F .text	00000030 __ascii_wctomb
10113868 g     O .rwdata	00000004 alt_errno
10102c10 g     F .text	000000c4 _fwalk
101018a8 g     F .text	00000084 .hidden __divsi3
10102300 g     F .text	00000124 _malloc_trim_r
101118f8 g       *ABS*	00000000 __CTOR_END__
10109c54 g     F .text	000000dc strcmp
101118f8 g       *ABS*	00000000 __flash_rodata_start
101118f8 g       *ABS*	00000000 __DTOR_LIST__
1010d5c8 g     F .text	00000088 .hidden __nedf2
1010f734 g     F .text	00000038 alt_irq_init
1010f470 g     F .text	00000064 alt_release_fd
10111c28 g     O .rodata	00000100 .hidden __clz_tab
10115430 g     O .bss	00000004 _PathLocale
10111564 g     F .text	00000014 atexit
10106110 g     F .text	00000060 _write_r
10108214 g     F .text	00000018 setlocale
10113840 g     O .rwdata	00000004 _impure_ptr
1011543c g     O .bss	00000004 alt_argc
10101b60 g     F .text	0000021c __sflush_r
10110af0 g     F .text	00000060 _do_dtors
10108200 g     F .text	00000008 __locale_cjk_lang
10102734 g     F .text	00000004 _fseek_r
10101214 g     F .text	00000064 i2c_init
10103a44 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10109144 g     F .text	00000064 __ulp
10102190 g     F .text	00000018 __fp_unlock_all
10113854 g     O .rwdata	00000008 alt_fs_list
10110404 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
1010822c g     F .text	0000000c localeconv
10110e60 g     F .text	00000050 alt_ic_isr_register
101138c4 g       *ABS*	00000000 _edata
10115580 g       *ABS*	00000000 _end
1010b43c g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100950 g     F .text	0000007c cmos_sensor_output_generator_init
1010fd08 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10110f50 g     F .text	000000a4 alt_ic_irq_disable
10103cc8 g     F .text	0000007c __swrite
10113848 g     O .rwdata	00000004 __malloc_trim_threshold
101081f4 g     F .text	0000000c __locale_msgcharset
10111578 g     F .text	00000038 exit
10102cd4 g     F .text	000000c4 _fwalk_reent
10108f48 g     F .text	000001fc __mdiff
1010192c g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
1010216c g     F .text	00000004 __sfp_lock_release
101021a8 g     F .text	000000f4 _fopen_r
101118c4 g     F .text	00000034 _exit
101106bc g     F .text	00000140 alt_alarm_start
10102d98 g     F .text	000001bc __smakebuf_r
10101700 g     F .text	000001a8 i2c_read_array
10103da8 g     F .text	00000098 strlen
1010f1cc g     F .text	00000158 open
1010d650 g     F .text	000000dc .hidden __gedf2
10113850 g     O .rwdata	00000004 __wctomb
10109e2c g     F .text	00000018 __sprint_r
10110e2c g     F .text	00000034 alt_icache_flush_all
101138b8 g     O .rwdata	00000004 alt_priority_mask
10110eb0 g     F .text	000000a0 alt_ic_irq_enable
10106038 g     F .text	0000001c __vfprintf_internal
1010b928 g     F .text	0000005c _wctomb_r
1010df38 g     F .text	000008fc .hidden __subdf3
1010897c g     F .text	000000b0 __lo0bits
101138bc g     O .rwdata	00000008 alt_alarm_list
10110a90 g     F .text	00000060 _do_ctors
1010b838 g     F .text	000000c0 wcrtomb
1010eaec g     F .text	000000d0 close
1010ee44 g     F .text	00000084 alt_load
1010b5c4 g     F .text	00000080 fputwc
10102170 g     F .text	00000004 __sinit_lock_acquire
101086f0 g     F .text	00000120 __multadd
101086c8 g     F .text	00000028 _Bfree
101104d8 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10952004 	addi	r2,r2,21632
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10952004 	addi	r2,r2,21632
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6ae0f14 	ori	gp,gp,47164
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10950814 	ori	r2,r2,21536

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d56014 	ori	r3,r3,21888

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010ee440 	call	1010ee44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010efec0 	call	1010efec <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	1004c03a 	cmpne	r2,r2,zero
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008a40 	call	101008a4 <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	1004c03a 	cmpne	r2,r2,zero
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008a40 	call	101008a4 <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	1004c03a 	cmpne	r2,r2,zero
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008a40 	call	101008a4 <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	00800044 	movi	r2,1
10100568:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
1010056c:	e0bfff17 	ldw	r2,-4(fp)
10100570:	e0fffc17 	ldw	r3,-16(fp)
10100574:	1885403a 	cmpgeu	r2,r3,r2
10100578:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010057c:	e0bffd03 	ldbu	r2,-12(fp)
10100580:	10000826 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
10100584:	e0bffd43 	ldbu	r2,-11(fp)
10100588:	10000626 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010058c:	e13ffe17 	ldw	r4,-8(fp)
10100590:	01008a40 	call	101008a4 <is_idle>
10100594:	10803fcc 	andi	r2,r2,255
10100598:	10000226 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010059c:	00800044 	movi	r2,1
101005a0:	00000106 	br	101005a8 <write_frame_line_blank_reg+0x7c>
101005a4:	0005883a 	mov	r2,zero
101005a8:	e0bffd85 	stb	r2,-10(fp)
101005ac:	e0bffd83 	ldbu	r2,-10(fp)
101005b0:	1080004c 	andi	r2,r2,1
101005b4:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005b8:	e0bffd83 	ldbu	r2,-10(fp)
101005bc:	10000726 	beq	r2,zero,101005dc <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c0:	e0bffe17 	ldw	r2,-8(fp)
101005c4:	10800017 	ldw	r2,0(r2)
101005c8:	10800304 	addi	r2,r2,12
101005cc:	e0ffff17 	ldw	r3,-4(fp)
101005d0:	10c00035 	stwio	r3,0(r2)
        return true;
101005d4:	00800044 	movi	r2,1
101005d8:	00000106 	br	101005e0 <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
101005dc:	0005883a 	mov	r2,zero
    }
}
101005e0:	e037883a 	mov	sp,fp
101005e4:	dfc00117 	ldw	ra,4(sp)
101005e8:	df000017 	ldw	fp,0(sp)
101005ec:	dec00204 	addi	sp,sp,8
101005f0:	f800283a 	ret

101005f4 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f4:	defffa04 	addi	sp,sp,-24
101005f8:	dfc00515 	stw	ra,20(sp)
101005fc:	df000415 	stw	fp,16(sp)
10100600:	df000404 	addi	fp,sp,16
10100604:	e13ffe15 	stw	r4,-8(fp)
10100608:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
1010060c:	e0bffe17 	ldw	r2,-8(fp)
10100610:	10c00217 	ldw	r3,8(r2)
10100614:	e0bffe17 	ldw	r2,-8(fp)
10100618:	10800317 	ldw	r2,12(r2)
1010061c:	100b883a 	mov	r5,r2
10100620:	1809883a 	mov	r4,r3
10100624:	01002900 	call	10100290 <max>
10100628:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
1010062c:	e0bfff17 	ldw	r2,-4(fp)
10100630:	1004c03a 	cmpne	r2,r2,zero
10100634:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
10100638:	e0bfff17 	ldw	r2,-4(fp)
1010063c:	e0fffc17 	ldw	r3,-16(fp)
10100640:	1885403a 	cmpgeu	r2,r3,r2
10100644:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100648:	e0bffd03 	ldbu	r2,-12(fp)
1010064c:	10000826 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100650:	e0bffd43 	ldbu	r2,-11(fp)
10100654:	10000626 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100658:	e13ffe17 	ldw	r4,-8(fp)
1010065c:	01008a40 	call	101008a4 <is_idle>
10100660:	10803fcc 	andi	r2,r2,255
10100664:	10000226 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100668:	00800044 	movi	r2,1
1010066c:	00000106 	br	10100674 <write_line_line_blank_reg+0x80>
10100670:	0005883a 	mov	r2,zero
10100674:	e0bffd85 	stb	r2,-10(fp)
10100678:	e0bffd83 	ldbu	r2,-10(fp)
1010067c:	1080004c 	andi	r2,r2,1
10100680:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100684:	e0bffd83 	ldbu	r2,-10(fp)
10100688:	10000726 	beq	r2,zero,101006a8 <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
1010068c:	e0bffe17 	ldw	r2,-8(fp)
10100690:	10800017 	ldw	r2,0(r2)
10100694:	10800404 	addi	r2,r2,16
10100698:	e0ffff17 	ldw	r3,-4(fp)
1010069c:	10c00035 	stwio	r3,0(r2)
        return true;
101006a0:	00800044 	movi	r2,1
101006a4:	00000106 	br	101006ac <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006a8:	0005883a 	mov	r2,zero
    }
}
101006ac:	e037883a 	mov	sp,fp
101006b0:	dfc00117 	ldw	ra,4(sp)
101006b4:	df000017 	ldw	fp,0(sp)
101006b8:	dec00204 	addi	sp,sp,8
101006bc:	f800283a 	ret

101006c0 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c0:	defffa04 	addi	sp,sp,-24
101006c4:	dfc00515 	stw	ra,20(sp)
101006c8:	df000415 	stw	fp,16(sp)
101006cc:	df000404 	addi	fp,sp,16
101006d0:	e13ffe15 	stw	r4,-8(fp)
101006d4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006d8:	e0bffe17 	ldw	r2,-8(fp)
101006dc:	10c00217 	ldw	r3,8(r2)
101006e0:	e0bffe17 	ldw	r2,-8(fp)
101006e4:	10800317 	ldw	r2,12(r2)
101006e8:	100b883a 	mov	r5,r2
101006ec:	1809883a 	mov	r4,r3
101006f0:	01002900 	call	10100290 <max>
101006f4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006f8:	00800044 	movi	r2,1
101006fc:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100700:	e0bfff17 	ldw	r2,-4(fp)
10100704:	e0fffc17 	ldw	r3,-16(fp)
10100708:	1885403a 	cmpgeu	r2,r3,r2
1010070c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100710:	e0bffd03 	ldbu	r2,-12(fp)
10100714:	10000826 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100718:	e0bffd43 	ldbu	r2,-11(fp)
1010071c:	10000626 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100720:	e13ffe17 	ldw	r4,-8(fp)
10100724:	01008a40 	call	101008a4 <is_idle>
10100728:	10803fcc 	andi	r2,r2,255
1010072c:	10000226 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100730:	00800044 	movi	r2,1
10100734:	00000106 	br	1010073c <write_line_frame_blank_reg+0x7c>
10100738:	0005883a 	mov	r2,zero
1010073c:	e0bffd85 	stb	r2,-10(fp)
10100740:	e0bffd83 	ldbu	r2,-10(fp)
10100744:	1080004c 	andi	r2,r2,1
10100748:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010074c:	e0bffd83 	ldbu	r2,-10(fp)
10100750:	10000726 	beq	r2,zero,10100770 <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
10100754:	e0bffe17 	ldw	r2,-8(fp)
10100758:	10800017 	ldw	r2,0(r2)
1010075c:	10800504 	addi	r2,r2,20
10100760:	e0ffff17 	ldw	r3,-4(fp)
10100764:	10c00035 	stwio	r3,0(r2)
        return true;
10100768:	00800044 	movi	r2,1
1010076c:	00000106 	br	10100774 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
10100770:	0005883a 	mov	r2,zero
    }
}
10100774:	e037883a 	mov	sp,fp
10100778:	dfc00117 	ldw	ra,4(sp)
1010077c:	df000017 	ldw	fp,0(sp)
10100780:	dec00204 	addi	sp,sp,8
10100784:	f800283a 	ret

10100788 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100788:	defffe04 	addi	sp,sp,-8
1010078c:	df000115 	stw	fp,4(sp)
10100790:	df000104 	addi	fp,sp,4
10100794:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
10100798:	e0bfff17 	ldw	r2,-4(fp)
1010079c:	10800017 	ldw	r2,0(r2)
101007a0:	10800037 	ldwio	r2,0(r2)
}
101007a4:	e037883a 	mov	sp,fp
101007a8:	df000017 	ldw	fp,0(sp)
101007ac:	dec00104 	addi	sp,sp,4
101007b0:	f800283a 	ret

101007b4 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007b4:	defffe04 	addi	sp,sp,-8
101007b8:	df000115 	stw	fp,4(sp)
101007bc:	df000104 	addi	fp,sp,4
101007c0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007c4:	e0bfff17 	ldw	r2,-4(fp)
101007c8:	10800017 	ldw	r2,0(r2)
101007cc:	10800104 	addi	r2,r2,4
101007d0:	10800037 	ldwio	r2,0(r2)
}
101007d4:	e037883a 	mov	sp,fp
101007d8:	df000017 	ldw	fp,0(sp)
101007dc:	dec00104 	addi	sp,sp,4
101007e0:	f800283a 	ret

101007e4 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007e4:	defffe04 	addi	sp,sp,-8
101007e8:	df000115 	stw	fp,4(sp)
101007ec:	df000104 	addi	fp,sp,4
101007f0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007f4:	e0bfff17 	ldw	r2,-4(fp)
101007f8:	10800017 	ldw	r2,0(r2)
101007fc:	10800204 	addi	r2,r2,8
10100800:	10800037 	ldwio	r2,0(r2)
}
10100804:	e037883a 	mov	sp,fp
10100808:	df000017 	ldw	fp,0(sp)
1010080c:	dec00104 	addi	sp,sp,4
10100810:	f800283a 	ret

10100814 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100814:	defffe04 	addi	sp,sp,-8
10100818:	df000115 	stw	fp,4(sp)
1010081c:	df000104 	addi	fp,sp,4
10100820:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
10100824:	e0bfff17 	ldw	r2,-4(fp)
10100828:	10800017 	ldw	r2,0(r2)
1010082c:	10800304 	addi	r2,r2,12
10100830:	10800037 	ldwio	r2,0(r2)
}
10100834:	e037883a 	mov	sp,fp
10100838:	df000017 	ldw	fp,0(sp)
1010083c:	dec00104 	addi	sp,sp,4
10100840:	f800283a 	ret

10100844 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100844:	defffe04 	addi	sp,sp,-8
10100848:	df000115 	stw	fp,4(sp)
1010084c:	df000104 	addi	fp,sp,4
10100850:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	10800017 	ldw	r2,0(r2)
1010085c:	10800404 	addi	r2,r2,16
10100860:	10800037 	ldwio	r2,0(r2)
}
10100864:	e037883a 	mov	sp,fp
10100868:	df000017 	ldw	fp,0(sp)
1010086c:	dec00104 	addi	sp,sp,4
10100870:	f800283a 	ret

10100874 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100874:	defffe04 	addi	sp,sp,-8
10100878:	df000115 	stw	fp,4(sp)
1010087c:	df000104 	addi	fp,sp,4
10100880:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
10100884:	e0bfff17 	ldw	r2,-4(fp)
10100888:	10800017 	ldw	r2,0(r2)
1010088c:	10800504 	addi	r2,r2,20
10100890:	10800037 	ldwio	r2,0(r2)
}
10100894:	e037883a 	mov	sp,fp
10100898:	df000017 	ldw	fp,0(sp)
1010089c:	dec00104 	addi	sp,sp,4
101008a0:	f800283a 	ret

101008a4 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008a4:	defffe04 	addi	sp,sp,-8
101008a8:	df000115 	stw	fp,4(sp)
101008ac:	df000104 	addi	fp,sp,4
101008b0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008b4:	e0bfff17 	ldw	r2,-4(fp)
101008b8:	10800017 	ldw	r2,0(r2)
101008bc:	10800704 	addi	r2,r2,28
101008c0:	10800037 	ldwio	r2,0(r2)
101008c4:	10800060 	cmpeqi	r2,r2,1
}
101008c8:	e037883a 	mov	sp,fp
101008cc:	df000017 	ldw	fp,0(sp)
101008d0:	dec00104 	addi	sp,sp,4
101008d4:	f800283a 	ret

101008d8 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008d8:	defff704 	addi	sp,sp,-36
101008dc:	df000815 	stw	fp,32(sp)
101008e0:	df000804 	addi	fp,sp,32
101008e4:	e13ffc15 	stw	r4,-16(fp)
101008e8:	e17ffd15 	stw	r5,-12(fp)
101008ec:	3005883a 	mov	r2,r6
101008f0:	e1ffff15 	stw	r7,-4(fp)
101008f4:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
101008f8:	e0bffd17 	ldw	r2,-12(fp)
101008fc:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100900:	e0bffe03 	ldbu	r2,-8(fp)
10100904:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100908:	e0bfff17 	ldw	r2,-4(fp)
1010090c:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100910:	e0800117 	ldw	r2,4(fp)
10100914:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100918:	e0bffc17 	ldw	r2,-16(fp)
1010091c:	e0fff817 	ldw	r3,-32(fp)
10100920:	10c00015 	stw	r3,0(r2)
10100924:	e0fff917 	ldw	r3,-28(fp)
10100928:	10c00115 	stw	r3,4(r2)
1010092c:	e0fffa17 	ldw	r3,-24(fp)
10100930:	10c00215 	stw	r3,8(r2)
10100934:	e0fffb17 	ldw	r3,-20(fp)
10100938:	10c00315 	stw	r3,12(r2)
}
1010093c:	e0bffc17 	ldw	r2,-16(fp)
10100940:	e037883a 	mov	sp,fp
10100944:	df000017 	ldw	fp,0(sp)
10100948:	dec00104 	addi	sp,sp,4
1010094c:	f800283a 	ret

10100950 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100950:	defffd04 	addi	sp,sp,-12
10100954:	dfc00215 	stw	ra,8(sp)
10100958:	df000115 	stw	fp,4(sp)
1010095c:	df000104 	addi	fp,sp,4
10100960:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
10100964:	e13fff17 	ldw	r4,-4(fp)
10100968:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
1010096c:	01400044 	movi	r5,1
10100970:	e13fff17 	ldw	r4,-4(fp)
10100974:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100978:	01400044 	movi	r5,1
1010097c:	e13fff17 	ldw	r4,-4(fp)
10100980:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
10100984:	01400044 	movi	r5,1
10100988:	e13fff17 	ldw	r4,-4(fp)
1010098c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100990:	000b883a 	mov	r5,zero
10100994:	e13fff17 	ldw	r4,-4(fp)
10100998:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
1010099c:	01400044 	movi	r5,1
101009a0:	e13fff17 	ldw	r4,-4(fp)
101009a4:	01005f40 	call	101005f4 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009a8:	000b883a 	mov	r5,zero
101009ac:	e13fff17 	ldw	r4,-4(fp)
101009b0:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
}
101009b4:	0001883a 	nop
101009b8:	e037883a 	mov	sp,fp
101009bc:	dfc00117 	ldw	ra,4(sp)
101009c0:	df000017 	ldw	fp,0(sp)
101009c4:	dec00204 	addi	sp,sp,8
101009c8:	f800283a 	ret

101009cc <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009cc:	defff904 	addi	sp,sp,-28
101009d0:	dfc00615 	stw	ra,24(sp)
101009d4:	df000515 	stw	fp,20(sp)
101009d8:	df000504 	addi	fp,sp,20
101009dc:	e13ffc15 	stw	r4,-16(fp)
101009e0:	e17ffd15 	stw	r5,-12(fp)
101009e4:	e1bffe15 	stw	r6,-8(fp)
101009e8:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009ec:	00800044 	movi	r2,1
101009f0:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009f4:	e13ffc17 	ldw	r4,-16(fp)
101009f8:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
101009fc:	e17ffd17 	ldw	r5,-12(fp)
10100a00:	e13ffc17 	ldw	r4,-16(fp)
10100a04:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a08:	e0fffb03 	ldbu	r3,-20(fp)
10100a0c:	10803fcc 	andi	r2,r2,255
10100a10:	1884703a 	and	r2,r3,r2
10100a14:	1004c03a 	cmpne	r2,r2,zero
10100a18:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a1c:	e17ffe17 	ldw	r5,-8(fp)
10100a20:	e13ffc17 	ldw	r4,-16(fp)
10100a24:	01003940 	call	10100394 <write_frame_height_reg>
10100a28:	e0fffb03 	ldbu	r3,-20(fp)
10100a2c:	10803fcc 	andi	r2,r2,255
10100a30:	1884703a 	and	r2,r3,r2
10100a34:	1004c03a 	cmpne	r2,r2,zero
10100a38:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a3c:	e17fff17 	ldw	r5,-4(fp)
10100a40:	e13ffc17 	ldw	r4,-16(fp)
10100a44:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a48:	e0fffb03 	ldbu	r3,-20(fp)
10100a4c:	10803fcc 	andi	r2,r2,255
10100a50:	1884703a 	and	r2,r3,r2
10100a54:	1004c03a 	cmpne	r2,r2,zero
10100a58:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a5c:	e1400217 	ldw	r5,8(fp)
10100a60:	e13ffc17 	ldw	r4,-16(fp)
10100a64:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a68:	e0fffb03 	ldbu	r3,-20(fp)
10100a6c:	10803fcc 	andi	r2,r2,255
10100a70:	1884703a 	and	r2,r3,r2
10100a74:	1004c03a 	cmpne	r2,r2,zero
10100a78:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a7c:	e1400317 	ldw	r5,12(fp)
10100a80:	e13ffc17 	ldw	r4,-16(fp)
10100a84:	01005f40 	call	101005f4 <write_line_line_blank_reg>
10100a88:	e0fffb03 	ldbu	r3,-20(fp)
10100a8c:	10803fcc 	andi	r2,r2,255
10100a90:	1884703a 	and	r2,r3,r2
10100a94:	1004c03a 	cmpne	r2,r2,zero
10100a98:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100a9c:	e1400417 	ldw	r5,16(fp)
10100aa0:	e13ffc17 	ldw	r4,-16(fp)
10100aa4:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
10100aa8:	e0fffb03 	ldbu	r3,-20(fp)
10100aac:	10803fcc 	andi	r2,r2,255
10100ab0:	1884703a 	and	r2,r3,r2
10100ab4:	1004c03a 	cmpne	r2,r2,zero
10100ab8:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100abc:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac0:	e037883a 	mov	sp,fp
10100ac4:	dfc00117 	ldw	ra,4(sp)
10100ac8:	df000017 	ldw	fp,0(sp)
10100acc:	dec00204 	addi	sp,sp,8
10100ad0:	f800283a 	ret

10100ad4 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100ad4:	defffe04 	addi	sp,sp,-8
10100ad8:	df000115 	stw	fp,4(sp)
10100adc:	df000104 	addi	fp,sp,4
10100ae0:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100ae4:	e0bfff17 	ldw	r2,-4(fp)
10100ae8:	10800017 	ldw	r2,0(r2)
10100aec:	10800604 	addi	r2,r2,24
10100af0:	00c00044 	movi	r3,1
10100af4:	10c00035 	stwio	r3,0(r2)
}
10100af8:	0001883a 	nop
10100afc:	e037883a 	mov	sp,fp
10100b00:	df000017 	ldw	fp,0(sp)
10100b04:	dec00104 	addi	sp,sp,4
10100b08:	f800283a 	ret

10100b0c <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b0c:	defffe04 	addi	sp,sp,-8
10100b10:	df000115 	stw	fp,4(sp)
10100b14:	df000104 	addi	fp,sp,4
10100b18:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b1c:	e0bfff17 	ldw	r2,-4(fp)
10100b20:	10800017 	ldw	r2,0(r2)
10100b24:	10800604 	addi	r2,r2,24
10100b28:	0007883a 	mov	r3,zero
10100b2c:	10c00035 	stwio	r3,0(r2)
}
10100b30:	0001883a 	nop
10100b34:	e037883a 	mov	sp,fp
10100b38:	df000017 	ldw	fp,0(sp)
10100b3c:	dec00104 	addi	sp,sp,4
10100b40:	f800283a 	ret

10100b44 <main>:

#define ONE_KB (1024)
#define ONE_FRAME (320*240*2)

int main()
{
10100b44:	deffee04 	addi	sp,sp,-72
10100b48:	dfc01115 	stw	ra,68(sp)
10100b4c:	df001015 	stw	fp,64(sp)
10100b50:	df001004 	addi	fp,sp,64
	//FILE* test;
	//test = fopen("/mnt/host/test.txt","w");

	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100b54:	e03ff315 	stw	zero,-52(fp)
10100b58:	00000606 	br	10100b74 <main+0x30>
	{
		// Write through address span expander
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, i, i);
10100b5c:	e0bff317 	ldw	r2,-52(fp)
10100b60:	e0fff317 	ldw	r3,-52(fp)
10100b64:	10c0002d 	sthio	r3,0(r2)
int main()
{
	//FILE* test;
	//test = fopen("/mnt/host/test.txt","w");

	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100b68:	e0bff317 	ldw	r2,-52(fp)
10100b6c:	10800084 	addi	r2,r2,2
10100b70:	e0bff315 	stw	r2,-52(fp)
10100b74:	e0fff317 	ldw	r3,-52(fp)
10100b78:	008000b4 	movhi	r2,2
10100b7c:	1095ffc4 	addi	r2,r2,22527
10100b80:	10fff62e 	bgeu	r2,r3,10100b5c <__alt_data_end+0xfffe0b5c>
	}

	//fclose(test);

	//CAMERA INITIALISATION
	cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100b84:	e0fffc04 	addi	r3,fp,-16
10100b88:	00810e04 	movi	r2,1080
10100b8c:	d8800015 	stw	r2,0(sp)
10100b90:	01c1e004 	movi	r7,1920
10100b94:	01800304 	movi	r6,12
10100b98:	01440034 	movhi	r5,4096
10100b9c:	29420804 	addi	r5,r5,2080
10100ba0:	1809883a 	mov	r4,r3
10100ba4:	01008d80 	call	101008d8 <cmos_sensor_output_generator_inst>
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
	cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100ba8:	e0bffc04 	addi	r2,fp,-16
10100bac:	1009883a 	mov	r4,r2
10100bb0:	01009500 	call	10100950 <cmos_sensor_output_generator_init>
	cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100bb4:	e0bffc04 	addi	r2,fp,-16
10100bb8:	1009883a 	mov	r4,r2
10100bbc:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>
	int config_success = cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100bc0:	e0fffc04 	addi	r3,fp,-16
10100bc4:	d8000215 	stw	zero,8(sp)
10100bc8:	00800044 	movi	r2,1
10100bcc:	d8800115 	stw	r2,4(sp)
10100bd0:	d8000015 	stw	zero,0(sp)
10100bd4:	01c00044 	movi	r7,1
10100bd8:	01807804 	movi	r6,480
10100bdc:	0140a004 	movi	r5,640
10100be0:	1809883a 	mov	r4,r3
10100be4:	01009cc0 	call	101009cc <cmos_sensor_output_generator_configure>
10100be8:	10803fcc 	andi	r2,r2,255
10100bec:	e0bff715 	stw	r2,-36(fp)
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

	printf("CMOS Config = %d \n", config_success);
10100bf0:	e17ff717 	ldw	r5,-36(fp)
10100bf4:	01040474 	movhi	r4,4113
10100bf8:	21063e04 	addi	r4,r4,6392
10100bfc:	01039180 	call	10103918 <printf>

	//CAMERA CONTROLLER INITIALISATION
	//Stop the camera controller
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x00);
10100c00:	0007883a 	mov	r3,zero
10100c04:	00840034 	movhi	r2,4096
10100c08:	10820404 	addi	r2,r2,2064
10100c0c:	10c00025 	stbio	r3,0(r2)
	//Reset the status register
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9, 0x00);
10100c10:	0007883a 	mov	r3,zero
10100c14:	00840034 	movhi	r2,4096
10100c18:	10820644 	addi	r2,r2,2073
10100c1c:	10c00025 	stbio	r3,0(r2)
	//Start Address = 0x00000000
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1, 0x00);
10100c20:	0007883a 	mov	r3,zero
10100c24:	00840034 	movhi	r2,4096
10100c28:	10820444 	addi	r2,r2,2065
10100c2c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x2, 0x00);
10100c30:	0007883a 	mov	r3,zero
10100c34:	00840034 	movhi	r2,4096
10100c38:	10820484 	addi	r2,r2,2066
10100c3c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x3, 0x00);
10100c40:	0007883a 	mov	r3,zero
10100c44:	00840034 	movhi	r2,4096
10100c48:	108204c4 	addi	r2,r2,2067
10100c4c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x4, 0x00);
10100c50:	0007883a 	mov	r3,zero
10100c54:	00840034 	movhi	r2,4096
10100c58:	10820504 	addi	r2,r2,2068
10100c5c:	10c00025 	stbio	r3,0(r2)
	//Length = 320*240*2 = 0x00025800
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x5, 0x00);
10100c60:	0007883a 	mov	r3,zero
10100c64:	00840034 	movhi	r2,4096
10100c68:	10820544 	addi	r2,r2,2069
10100c6c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x6, 0x58);
10100c70:	00c01604 	movi	r3,88
10100c74:	00840034 	movhi	r2,4096
10100c78:	10820584 	addi	r2,r2,2070
10100c7c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x7, 0x02);
10100c80:	00c00084 	movi	r3,2
10100c84:	00840034 	movhi	r2,4096
10100c88:	108205c4 	addi	r2,r2,2071
10100c8c:	10c00025 	stbio	r3,0(r2)
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x8, 0x00);
10100c90:	0007883a 	mov	r3,zero
10100c94:	00840034 	movhi	r2,4096
10100c98:	10820604 	addi	r2,r2,2072
10100c9c:	10c00025 	stbio	r3,0(r2)

	//READ THE REGISTERS
	printf("Start = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0));
10100ca0:	00840034 	movhi	r2,4096
10100ca4:	10820404 	addi	r2,r2,2064
10100ca8:	10800023 	ldbuio	r2,0(r2)
10100cac:	10803fcc 	andi	r2,r2,255
10100cb0:	100b883a 	mov	r5,r2
10100cb4:	01040474 	movhi	r4,4113
10100cb8:	21064304 	addi	r4,r4,6412
10100cbc:	01039180 	call	10103918 <printf>
	printf("StartAddress_1 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1));
10100cc0:	00840034 	movhi	r2,4096
10100cc4:	10820444 	addi	r2,r2,2065
10100cc8:	10800023 	ldbuio	r2,0(r2)
10100ccc:	10803fcc 	andi	r2,r2,255
10100cd0:	100b883a 	mov	r5,r2
10100cd4:	01040474 	movhi	r4,4113
10100cd8:	21064604 	addi	r4,r4,6424
10100cdc:	01039180 	call	10103918 <printf>
	printf("StartAddress_2 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x2));
10100ce0:	00840034 	movhi	r2,4096
10100ce4:	10820484 	addi	r2,r2,2066
10100ce8:	10800023 	ldbuio	r2,0(r2)
10100cec:	10803fcc 	andi	r2,r2,255
10100cf0:	100b883a 	mov	r5,r2
10100cf4:	01040474 	movhi	r4,4113
10100cf8:	21064c04 	addi	r4,r4,6448
10100cfc:	01039180 	call	10103918 <printf>
	printf("StartAddress_3 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x3));
10100d00:	00840034 	movhi	r2,4096
10100d04:	108204c4 	addi	r2,r2,2067
10100d08:	10800023 	ldbuio	r2,0(r2)
10100d0c:	10803fcc 	andi	r2,r2,255
10100d10:	100b883a 	mov	r5,r2
10100d14:	01040474 	movhi	r4,4113
10100d18:	21065204 	addi	r4,r4,6472
10100d1c:	01039180 	call	10103918 <printf>
	printf("StartAddress_4 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x4));
10100d20:	00840034 	movhi	r2,4096
10100d24:	10820504 	addi	r2,r2,2068
10100d28:	10800023 	ldbuio	r2,0(r2)
10100d2c:	10803fcc 	andi	r2,r2,255
10100d30:	100b883a 	mov	r5,r2
10100d34:	01040474 	movhi	r4,4113
10100d38:	21065804 	addi	r4,r4,6496
10100d3c:	01039180 	call	10103918 <printf>
	printf("Length_1 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x5));
10100d40:	00840034 	movhi	r2,4096
10100d44:	10820544 	addi	r2,r2,2069
10100d48:	10800023 	ldbuio	r2,0(r2)
10100d4c:	10803fcc 	andi	r2,r2,255
10100d50:	100b883a 	mov	r5,r2
10100d54:	01040474 	movhi	r4,4113
10100d58:	21065e04 	addi	r4,r4,6520
10100d5c:	01039180 	call	10103918 <printf>
	printf("Length_2 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x6));
10100d60:	00840034 	movhi	r2,4096
10100d64:	10820584 	addi	r2,r2,2070
10100d68:	10800023 	ldbuio	r2,0(r2)
10100d6c:	10803fcc 	andi	r2,r2,255
10100d70:	100b883a 	mov	r5,r2
10100d74:	01040474 	movhi	r4,4113
10100d78:	21066204 	addi	r4,r4,6536
10100d7c:	01039180 	call	10103918 <printf>
	printf("Length_3 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x7));
10100d80:	00840034 	movhi	r2,4096
10100d84:	108205c4 	addi	r2,r2,2071
10100d88:	10800023 	ldbuio	r2,0(r2)
10100d8c:	10803fcc 	andi	r2,r2,255
10100d90:	100b883a 	mov	r5,r2
10100d94:	01040474 	movhi	r4,4113
10100d98:	21066604 	addi	r4,r4,6552
10100d9c:	01039180 	call	10103918 <printf>
	printf("Length_4 = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x8));
10100da0:	00840034 	movhi	r2,4096
10100da4:	10820604 	addi	r2,r2,2072
10100da8:	10800023 	ldbuio	r2,0(r2)
10100dac:	10803fcc 	andi	r2,r2,255
10100db0:	100b883a 	mov	r5,r2
10100db4:	01040474 	movhi	r4,4113
10100db8:	21066a04 	addi	r4,r4,6568
10100dbc:	01039180 	call	10103918 <printf>
	printf("Status = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9));
10100dc0:	00840034 	movhi	r2,4096
10100dc4:	10820644 	addi	r2,r2,2073
10100dc8:	10800023 	ldbuio	r2,0(r2)
10100dcc:	10803fcc 	andi	r2,r2,255
10100dd0:	100b883a 	mov	r5,r2
10100dd4:	01040474 	movhi	r4,4113
10100dd8:	21066e04 	addi	r4,r4,6584
10100ddc:	01039180 	call	10103918 <printf>

	//START EVERYTHING
	cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100de0:	e0bffc04 	addi	r2,fp,-16
10100de4:	1009883a 	mov	r4,r2
10100de8:	0100ad40 	call	10100ad4 <cmos_sensor_output_generator_start>
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x01);
10100dec:	00c00044 	movi	r3,1
10100df0:	00840034 	movhi	r2,4096
10100df4:	10820404 	addi	r2,r2,2064
10100df8:	10c00025 	stbio	r3,0(r2)

	//WAIT FOR THE ACQUISITION
	printf("Status = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9));
10100dfc:	00840034 	movhi	r2,4096
10100e00:	10820644 	addi	r2,r2,2073
10100e04:	10800023 	ldbuio	r2,0(r2)
10100e08:	10803fcc 	andi	r2,r2,255
10100e0c:	100b883a 	mov	r5,r2
10100e10:	01040474 	movhi	r4,4113
10100e14:	21066e04 	addi	r4,r4,6584
10100e18:	01039180 	call	10103918 <printf>

	while(IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9) != 0x00000001) {}
10100e1c:	0001883a 	nop
10100e20:	00840034 	movhi	r2,4096
10100e24:	10820644 	addi	r2,r2,2073
10100e28:	10800023 	ldbuio	r2,0(r2)
10100e2c:	10803fcc 	andi	r2,r2,255
10100e30:	10800058 	cmpnei	r2,r2,1
10100e34:	103ffa1e 	bne	r2,zero,10100e20 <__alt_data_end+0xfffe0e20>

	printf("Status = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9));
10100e38:	00840034 	movhi	r2,4096
10100e3c:	10820644 	addi	r2,r2,2073
10100e40:	10800023 	ldbuio	r2,0(r2)
10100e44:	10803fcc 	andi	r2,r2,255
10100e48:	100b883a 	mov	r5,r2
10100e4c:	01040474 	movhi	r4,4113
10100e50:	21066e04 	addi	r4,r4,6584
10100e54:	01039180 	call	10103918 <printf>

	while(IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9) != 0x00000003) {}
10100e58:	0001883a 	nop
10100e5c:	00840034 	movhi	r2,4096
10100e60:	10820644 	addi	r2,r2,2073
10100e64:	10800023 	ldbuio	r2,0(r2)
10100e68:	10803fcc 	andi	r2,r2,255
10100e6c:	108000d8 	cmpnei	r2,r2,3
10100e70:	103ffa1e 	bne	r2,zero,10100e5c <__alt_data_end+0xfffe0e5c>

	printf("Status = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9));
10100e74:	00840034 	movhi	r2,4096
10100e78:	10820644 	addi	r2,r2,2073
10100e7c:	10800023 	ldbuio	r2,0(r2)
10100e80:	10803fcc 	andi	r2,r2,255
10100e84:	100b883a 	mov	r5,r2
10100e88:	01040474 	movhi	r4,4113
10100e8c:	21066e04 	addi	r4,r4,6584
10100e90:	01039180 	call	10103918 <printf>

	while(IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9) != 0x00000007) {}
10100e94:	0001883a 	nop
10100e98:	00840034 	movhi	r2,4096
10100e9c:	10820644 	addi	r2,r2,2073
10100ea0:	10800023 	ldbuio	r2,0(r2)
10100ea4:	10803fcc 	andi	r2,r2,255
10100ea8:	108001d8 	cmpnei	r2,r2,7
10100eac:	103ffa1e 	bne	r2,zero,10100e98 <__alt_data_end+0xfffe0e98>

	printf("Status = %" PRIu8 "\n", IORD_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x9));
10100eb0:	00840034 	movhi	r2,4096
10100eb4:	10820644 	addi	r2,r2,2073
10100eb8:	10800023 	ldbuio	r2,0(r2)
10100ebc:	10803fcc 	andi	r2,r2,255
10100ec0:	100b883a 	mov	r5,r2
10100ec4:	01040474 	movhi	r4,4113
10100ec8:	21066e04 	addi	r4,r4,6584
10100ecc:	01039180 	call	10103918 <printf>

	//STOP EVERYTHING
	IOWR_8DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x00);
10100ed0:	0007883a 	mov	r3,zero
10100ed4:	00840034 	movhi	r2,4096
10100ed8:	10820404 	addi	r2,r2,2064
10100edc:	10c00025 	stbio	r3,0(r2)
	cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100ee0:	e0bffc04 	addi	r2,fp,-16
10100ee4:	1009883a 	mov	r4,r2
10100ee8:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

	//READ THE FRAMES IN THE MEMORY
	FILE* data;
	data = fopen("/mnt/host/data.txt","w");
10100eec:	01440474 	movhi	r5,4113
10100ef0:	29467204 	addi	r5,r5,6600
10100ef4:	01040474 	movhi	r4,4113
10100ef8:	21067304 	addi	r4,r4,6604
10100efc:	010229c0 	call	1010229c <fopen>
10100f00:	e0bff815 	stw	r2,-32(fp)

	uint16_t readdata = 0;
10100f04:	e03ff90d 	sth	zero,-28(fp)
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100f08:	e03ff415 	stw	zero,-48(fp)
10100f0c:	00000d06 	br	10100f44 <main+0x400>
	{
		// Read through address span expander
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE, i);
10100f10:	e0bff417 	ldw	r2,-48(fp)
10100f14:	1080002b 	ldhuio	r2,0(r2)
10100f18:	10bfffcc 	andi	r2,r2,65535
10100f1c:	e0bff90d 	sth	r2,-28(fp)
		fprintf(data, "%" PRIu16 "\n", readdata);
10100f20:	e0bff90b 	ldhu	r2,-28(fp)
10100f24:	100d883a 	mov	r6,r2
10100f28:	01440474 	movhi	r5,4113
10100f2c:	29467804 	addi	r5,r5,6624
10100f30:	e13ff817 	ldw	r4,-32(fp)
10100f34:	01022dc0 	call	101022dc <fprintf>
	//READ THE FRAMES IN THE MEMORY
	FILE* data;
	data = fopen("/mnt/host/data.txt","w");

	uint16_t readdata = 0;
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100f38:	e0bff417 	ldw	r2,-48(fp)
10100f3c:	10800084 	addi	r2,r2,2
10100f40:	e0bff415 	stw	r2,-48(fp)
10100f44:	e0fff417 	ldw	r3,-48(fp)
10100f48:	008000b4 	movhi	r2,2
10100f4c:	1095ffc4 	addi	r2,r2,22527
10100f50:	10ffef2e 	bgeu	r2,r3,10100f10 <__alt_data_end+0xfffe0f10>
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE, i);
		fprintf(data, "%" PRIu16 "\n", readdata);
		//fprintf(data, "%" PRIu32 " : %" PRIu16 "\n", i, readdata);
	}

	fclose(data);
10100f54:	e13ff817 	ldw	r4,-32(fp)
10100f58:	0101b4c0 	call	10101b4c <fclose>
	printf("FRAME 1 FINISHED \n");
10100f5c:	01040474 	movhi	r4,4113
10100f60:	21067904 	addi	r4,r4,6628
10100f64:	0103a140 	call	10103a14 <puts>

	FILE* data2;
	data2 = fopen("/mnt/host/data2.txt","w");
10100f68:	01440474 	movhi	r5,4113
10100f6c:	29467204 	addi	r5,r5,6600
10100f70:	01040474 	movhi	r4,4113
10100f74:	21067e04 	addi	r4,r4,6648
10100f78:	010229c0 	call	1010229c <fopen>
10100f7c:	e0bffa15 	stw	r2,-24(fp)

	readdata = 0;
10100f80:	e03ff90d 	sth	zero,-28(fp)
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100f84:	e03ff515 	stw	zero,-44(fp)
10100f88:	00001006 	br	10100fcc <main+0x488>
	{
		// Read through address span expander
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE + 0x00025800, i);
10100f8c:	e0fff517 	ldw	r3,-44(fp)
10100f90:	008000b4 	movhi	r2,2
10100f94:	10960004 	addi	r2,r2,22528
10100f98:	1885883a 	add	r2,r3,r2
10100f9c:	1080002b 	ldhuio	r2,0(r2)
10100fa0:	10bfffcc 	andi	r2,r2,65535
10100fa4:	e0bff90d 	sth	r2,-28(fp)
		fprintf(data2, "%" PRIu16 "\n", readdata);
10100fa8:	e0bff90b 	ldhu	r2,-28(fp)
10100fac:	100d883a 	mov	r6,r2
10100fb0:	01440474 	movhi	r5,4113
10100fb4:	29467804 	addi	r5,r5,6624
10100fb8:	e13ffa17 	ldw	r4,-24(fp)
10100fbc:	01022dc0 	call	101022dc <fprintf>

	FILE* data2;
	data2 = fopen("/mnt/host/data2.txt","w");

	readdata = 0;
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100fc0:	e0bff517 	ldw	r2,-44(fp)
10100fc4:	10800084 	addi	r2,r2,2
10100fc8:	e0bff515 	stw	r2,-44(fp)
10100fcc:	e0fff517 	ldw	r3,-44(fp)
10100fd0:	008000b4 	movhi	r2,2
10100fd4:	1095ffc4 	addi	r2,r2,22527
10100fd8:	10ffec2e 	bgeu	r2,r3,10100f8c <__alt_data_end+0xfffe0f8c>
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE + 0x00025800, i);
		fprintf(data2, "%" PRIu16 "\n", readdata);
		//fprintf(data, "%" PRIu32 " : %" PRIu16 "\n", i, readdata);
	}

	fclose(data2);
10100fdc:	e13ffa17 	ldw	r4,-24(fp)
10100fe0:	0101b4c0 	call	10101b4c <fclose>
	printf("FRAME 2 FINISHED \n");
10100fe4:	01040474 	movhi	r4,4113
10100fe8:	21068304 	addi	r4,r4,6668
10100fec:	0103a140 	call	10103a14 <puts>

	FILE* data3;
	data3 = fopen("/mnt/host/data3.txt","w");
10100ff0:	01440474 	movhi	r5,4113
10100ff4:	29467204 	addi	r5,r5,6600
10100ff8:	01040474 	movhi	r4,4113
10100ffc:	21068804 	addi	r4,r4,6688
10101000:	010229c0 	call	1010229c <fopen>
10101004:	e0bffb15 	stw	r2,-20(fp)

	readdata = 0;
10101008:	e03ff90d 	sth	zero,-28(fp)
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
1010100c:	e03ff615 	stw	zero,-40(fp)
10101010:	00001006 	br	10101054 <main+0x510>
	{
		// Read through address span expander
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE + 0x0004B000, i);
10101014:	e0fff617 	ldw	r3,-40(fp)
10101018:	00800174 	movhi	r2,5
1010101c:	10ac0004 	addi	r2,r2,-20480
10101020:	1885883a 	add	r2,r3,r2
10101024:	1080002b 	ldhuio	r2,0(r2)
10101028:	10bfffcc 	andi	r2,r2,65535
1010102c:	e0bff90d 	sth	r2,-28(fp)
		fprintf(data3, "%" PRIu16 "\n", readdata);
10101030:	e0bff90b 	ldhu	r2,-28(fp)
10101034:	100d883a 	mov	r6,r2
10101038:	01440474 	movhi	r5,4113
1010103c:	29467804 	addi	r5,r5,6624
10101040:	e13ffb17 	ldw	r4,-20(fp)
10101044:	01022dc0 	call	101022dc <fprintf>

	FILE* data3;
	data3 = fopen("/mnt/host/data3.txt","w");

	readdata = 0;
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10101048:	e0bff617 	ldw	r2,-40(fp)
1010104c:	10800084 	addi	r2,r2,2
10101050:	e0bff615 	stw	r2,-40(fp)
10101054:	e0fff617 	ldw	r3,-40(fp)
10101058:	008000b4 	movhi	r2,2
1010105c:	1095ffc4 	addi	r2,r2,22527
10101060:	10ffec2e 	bgeu	r2,r3,10101014 <__alt_data_end+0xfffe1014>
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE + 0x0004B000, i);
		fprintf(data3, "%" PRIu16 "\n", readdata);
		//fprintf(data, "%" PRIu32 " : %" PRIu16 "\n", i, readdata);
	}

	fclose(data3);
10101064:	e13ffb17 	ldw	r4,-20(fp)
10101068:	0101b4c0 	call	10101b4c <fclose>
	printf("FRAME 3 FINISHED \n");
1010106c:	01040474 	movhi	r4,4113
10101070:	21068d04 	addi	r4,r4,6708
10101074:	0103a140 	call	10103a14 <puts>

	printf("FRAMES COMPUTED !!!");
10101078:	01040474 	movhi	r4,4113
1010107c:	21069204 	addi	r4,r4,6728
10101080:	01039180 	call	10103918 <printf>
	return EXIT_SUCCESS;
10101084:	0005883a 	mov	r2,zero
}
10101088:	e037883a 	mov	sp,fp
1010108c:	dfc00117 	ldw	ra,4(sp)
10101090:	df000017 	ldw	fp,0(sp)
10101094:	dec00204 	addi	sp,sp,8
10101098:	f800283a 	ret

1010109c <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
1010109c:	defffd04 	addi	sp,sp,-12
101010a0:	dfc00215 	stw	ra,8(sp)
101010a4:	df000115 	stw	fp,4(sp)
101010a8:	df000104 	addi	fp,sp,4
101010ac:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
101010b0:	e13fff17 	ldw	r4,-4(fp)
101010b4:	010f5840 	call	1010f584 <usleep>
#endif
}
101010b8:	0001883a 	nop
101010bc:	e037883a 	mov	sp,fp
101010c0:	dfc00117 	ldw	ra,4(sp)
101010c4:	df000017 	ldw	fp,0(sp)
101010c8:	dec00204 	addi	sp,sp,8
101010cc:	f800283a 	ret

101010d0 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
101010d0:	defffe04 	addi	sp,sp,-8
101010d4:	df000115 	stw	fp,4(sp)
101010d8:	df000104 	addi	fp,sp,4
101010dc:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
101010e0:	0001883a 	nop
101010e4:	e0bfff17 	ldw	r2,-4(fp)
101010e8:	10800017 	ldw	r2,0(r2)
101010ec:	10800084 	addi	r2,r2,2
101010f0:	10800023 	ldbuio	r2,0(r2)
101010f4:	10803fcc 	andi	r2,r2,255
101010f8:	1080020c 	andi	r2,r2,8
101010fc:	103ff91e 	bne	r2,zero,101010e4 <__alt_data_end+0xfffe10e4>
}
10101100:	0001883a 	nop
10101104:	e037883a 	mov	sp,fp
10101108:	df000017 	ldw	fp,0(sp)
1010110c:	dec00104 	addi	sp,sp,4
10101110:	f800283a 	ret

10101114 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
10101114:	defffb04 	addi	sp,sp,-20
10101118:	dfc00415 	stw	ra,16(sp)
1010111c:	df000315 	stw	fp,12(sp)
10101120:	df000304 	addi	fp,sp,12
10101124:	e13ffd15 	stw	r4,-12(fp)
10101128:	2807883a 	mov	r3,r5
1010112c:	3005883a 	mov	r2,r6
10101130:	e0fffe05 	stb	r3,-8(fp)
10101134:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10101138:	e13ffd17 	ldw	r4,-12(fp)
1010113c:	01010d00 	call	101010d0 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
10101140:	e0bffd17 	ldw	r2,-12(fp)
10101144:	10800017 	ldw	r2,0(r2)
10101148:	e0fffe03 	ldbu	r3,-8(fp)
1010114c:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10101150:	e0bffd17 	ldw	r2,-12(fp)
10101154:	10800017 	ldw	r2,0(r2)
10101158:	10800044 	addi	r2,r2,1
1010115c:	e0ffff03 	ldbu	r3,-4(fp)
10101160:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10101164:	e13ffd17 	ldw	r4,-12(fp)
10101168:	01010d00 	call	101010d0 <wait_end_of_transfer>
}
1010116c:	0001883a 	nop
10101170:	e037883a 	mov	sp,fp
10101174:	dfc00117 	ldw	ra,4(sp)
10101178:	df000017 	ldw	fp,0(sp)
1010117c:	dec00204 	addi	sp,sp,8
10101180:	f800283a 	ret

10101184 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10101184:	defffc04 	addi	sp,sp,-16
10101188:	dfc00315 	stw	ra,12(sp)
1010118c:	df000215 	stw	fp,8(sp)
10101190:	df000204 	addi	fp,sp,8
10101194:	e13ffe15 	stw	r4,-8(fp)
10101198:	2805883a 	mov	r2,r5
1010119c:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
101011a0:	e13ffe17 	ldw	r4,-8(fp)
101011a4:	01010d00 	call	101010d0 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
101011a8:	e0bffe17 	ldw	r2,-8(fp)
101011ac:	10800017 	ldw	r2,0(r2)
101011b0:	10800044 	addi	r2,r2,1
101011b4:	e0ffff03 	ldbu	r3,-4(fp)
101011b8:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
101011bc:	e13ffe17 	ldw	r4,-8(fp)
101011c0:	01010d00 	call	101010d0 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
101011c4:	e0bffe17 	ldw	r2,-8(fp)
101011c8:	10800017 	ldw	r2,0(r2)
101011cc:	10800023 	ldbuio	r2,0(r2)
101011d0:	10803fcc 	andi	r2,r2,255
}
101011d4:	e037883a 	mov	sp,fp
101011d8:	dfc00117 	ldw	ra,4(sp)
101011dc:	df000017 	ldw	fp,0(sp)
101011e0:	dec00204 	addi	sp,sp,8
101011e4:	f800283a 	ret

101011e8 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
101011e8:	defffd04 	addi	sp,sp,-12
101011ec:	df000215 	stw	fp,8(sp)
101011f0:	df000204 	addi	fp,sp,8
101011f4:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
101011f8:	e0bfff17 	ldw	r2,-4(fp)
101011fc:	e0bffe15 	stw	r2,-8(fp)

    return dev;
10101200:	e0bffe17 	ldw	r2,-8(fp)
}
10101204:	e037883a 	mov	sp,fp
10101208:	df000017 	ldw	fp,0(sp)
1010120c:	dec00104 	addi	sp,sp,4
10101210:	f800283a 	ret

10101214 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
10101214:	defffb04 	addi	sp,sp,-20
10101218:	dfc00415 	stw	ra,16(sp)
1010121c:	df000315 	stw	fp,12(sp)
10101220:	dc000215 	stw	r16,8(sp)
10101224:	df000304 	addi	fp,sp,12
10101228:	e13ffd15 	stw	r4,-12(fp)
1010122c:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10101230:	e0bffd17 	ldw	r2,-12(fp)
10101234:	10800017 	ldw	r2,0(r2)
10101238:	140000c4 	addi	r16,r2,3
1010123c:	e0bffe17 	ldw	r2,-8(fp)
10101240:	014001b4 	movhi	r5,6
10101244:	2946a004 	addi	r5,r5,6784
10101248:	1009883a 	mov	r4,r2
1010124c:	01019a00 	call	101019a0 <__udivsi3>
10101250:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10101254:	0104e204 	movi	r4,5000
10101258:	010109c0 	call	1010109c <i2c_usleep>
}
1010125c:	0001883a 	nop
10101260:	e6ffff04 	addi	sp,fp,-4
10101264:	dfc00217 	ldw	ra,8(sp)
10101268:	df000117 	ldw	fp,4(sp)
1010126c:	dc000017 	ldw	r16,0(sp)
10101270:	dec00304 	addi	sp,sp,12
10101274:	f800283a 	ret

10101278 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
10101278:	defffc04 	addi	sp,sp,-16
1010127c:	df000315 	stw	fp,12(sp)
10101280:	df000304 	addi	fp,sp,12
10101284:	e13ffe15 	stw	r4,-8(fp)
10101288:	2805883a 	mov	r2,r5
1010128c:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10101290:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10101294:	e0bfff03 	ldbu	r2,-4(fp)
10101298:	10000426 	beq	r2,zero,101012ac <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
1010129c:	e0bffd17 	ldw	r2,-12(fp)
101012a0:	10800814 	ori	r2,r2,32
101012a4:	e0bffd15 	stw	r2,-12(fp)
101012a8:	00000406 	br	101012bc <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
101012ac:	e0fffd17 	ldw	r3,-12(fp)
101012b0:	00bff7c4 	movi	r2,-33
101012b4:	1884703a 	and	r2,r3,r2
101012b8:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101012bc:	e0bffe17 	ldw	r2,-8(fp)
101012c0:	10800017 	ldw	r2,0(r2)
101012c4:	10800044 	addi	r2,r2,1
101012c8:	00c00084 	movi	r3,2
101012cc:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
101012d0:	e0bffe17 	ldw	r2,-8(fp)
101012d4:	10800017 	ldw	r2,0(r2)
101012d8:	10800044 	addi	r2,r2,1
101012dc:	e0fffd17 	ldw	r3,-12(fp)
101012e0:	10c00025 	stbio	r3,0(r2)
}
101012e4:	0001883a 	nop
101012e8:	e037883a 	mov	sp,fp
101012ec:	df000017 	ldw	fp,0(sp)
101012f0:	dec00104 	addi	sp,sp,4
101012f4:	f800283a 	ret

101012f8 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
101012f8:	defffa04 	addi	sp,sp,-24
101012fc:	dfc00515 	stw	ra,20(sp)
10101300:	df000415 	stw	fp,16(sp)
10101304:	df000404 	addi	fp,sp,16
10101308:	e13ffc15 	stw	r4,-16(fp)
1010130c:	2809883a 	mov	r4,r5
10101310:	3007883a 	mov	r3,r6
10101314:	3805883a 	mov	r2,r7
10101318:	e13ffd05 	stb	r4,-12(fp)
1010131c:	e0fffe05 	stb	r3,-8(fp)
10101320:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101324:	e0bffd03 	ldbu	r2,-12(fp)
10101328:	10803f8c 	andi	r2,r2,254
1010132c:	01800504 	movi	r6,20
10101330:	100b883a 	mov	r5,r2
10101334:	e13ffc17 	ldw	r4,-16(fp)
10101338:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010133c:	e0bffc17 	ldw	r2,-16(fp)
10101340:	10800017 	ldw	r2,0(r2)
10101344:	10800084 	addi	r2,r2,2
10101348:	10800023 	ldbuio	r2,0(r2)
1010134c:	10803fcc 	andi	r2,r2,255
10101350:	1080004c 	andi	r2,r2,1
10101354:	10000726 	beq	r2,zero,10101374 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101358:	e0bffc17 	ldw	r2,-16(fp)
1010135c:	10800017 	ldw	r2,0(r2)
10101360:	10800044 	addi	r2,r2,1
10101364:	00c00084 	movi	r3,2
10101368:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
1010136c:	00800044 	movi	r2,1
10101370:	00002706 	br	10101410 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101374:	e0bffe03 	ldbu	r2,-8(fp)
10101378:	01800404 	movi	r6,16
1010137c:	100b883a 	mov	r5,r2
10101380:	e13ffc17 	ldw	r4,-16(fp)
10101384:	01011140 	call	10101114 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101388:	e0bffc17 	ldw	r2,-16(fp)
1010138c:	10800017 	ldw	r2,0(r2)
10101390:	10800084 	addi	r2,r2,2
10101394:	10800023 	ldbuio	r2,0(r2)
10101398:	10803fcc 	andi	r2,r2,255
1010139c:	1080004c 	andi	r2,r2,1
101013a0:	10000726 	beq	r2,zero,101013c0 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101013a4:	e0bffc17 	ldw	r2,-16(fp)
101013a8:	10800017 	ldw	r2,0(r2)
101013ac:	10800044 	addi	r2,r2,1
101013b0:	00c00084 	movi	r3,2
101013b4:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101013b8:	00800084 	movi	r2,2
101013bc:	00001406 	br	10101410 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101013c0:	e0bfff03 	ldbu	r2,-4(fp)
101013c4:	01800484 	movi	r6,18
101013c8:	100b883a 	mov	r5,r2
101013cc:	e13ffc17 	ldw	r4,-16(fp)
101013d0:	01011140 	call	10101114 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101013d4:	e0bffc17 	ldw	r2,-16(fp)
101013d8:	10800017 	ldw	r2,0(r2)
101013dc:	10800084 	addi	r2,r2,2
101013e0:	10800023 	ldbuio	r2,0(r2)
101013e4:	10803fcc 	andi	r2,r2,255
101013e8:	1080004c 	andi	r2,r2,1
101013ec:	10000726 	beq	r2,zero,1010140c <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101013f0:	e0bffc17 	ldw	r2,-16(fp)
101013f4:	10800017 	ldw	r2,0(r2)
101013f8:	10800044 	addi	r2,r2,1
101013fc:	00c00084 	movi	r3,2
10101400:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101404:	00800084 	movi	r2,2
10101408:	00000106 	br	10101410 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
1010140c:	0005883a 	mov	r2,zero
}
10101410:	e037883a 	mov	sp,fp
10101414:	dfc00117 	ldw	ra,4(sp)
10101418:	df000017 	ldw	fp,0(sp)
1010141c:	dec00204 	addi	sp,sp,8
10101420:	f800283a 	ret

10101424 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
10101424:	defffa04 	addi	sp,sp,-24
10101428:	dfc00515 	stw	ra,20(sp)
1010142c:	df000415 	stw	fp,16(sp)
10101430:	df000404 	addi	fp,sp,16
10101434:	e13ffc15 	stw	r4,-16(fp)
10101438:	2807883a 	mov	r3,r5
1010143c:	3005883a 	mov	r2,r6
10101440:	e1ffff15 	stw	r7,-4(fp)
10101444:	e0fffd05 	stb	r3,-12(fp)
10101448:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
1010144c:	e0bffd03 	ldbu	r2,-12(fp)
10101450:	10803f8c 	andi	r2,r2,254
10101454:	01800504 	movi	r6,20
10101458:	100b883a 	mov	r5,r2
1010145c:	e13ffc17 	ldw	r4,-16(fp)
10101460:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101464:	e0bffc17 	ldw	r2,-16(fp)
10101468:	10800017 	ldw	r2,0(r2)
1010146c:	10800084 	addi	r2,r2,2
10101470:	10800023 	ldbuio	r2,0(r2)
10101474:	10803fcc 	andi	r2,r2,255
10101478:	1080004c 	andi	r2,r2,1
1010147c:	10000726 	beq	r2,zero,1010149c <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101480:	e0bffc17 	ldw	r2,-16(fp)
10101484:	10800017 	ldw	r2,0(r2)
10101488:	10800044 	addi	r2,r2,1
1010148c:	00c00084 	movi	r3,2
10101490:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101494:	00800044 	movi	r2,1
10101498:	00002f06 	br	10101558 <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
1010149c:	e0bffe03 	ldbu	r2,-8(fp)
101014a0:	01800404 	movi	r6,16
101014a4:	100b883a 	mov	r5,r2
101014a8:	e13ffc17 	ldw	r4,-16(fp)
101014ac:	01011140 	call	10101114 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101014b0:	e0bffc17 	ldw	r2,-16(fp)
101014b4:	10800017 	ldw	r2,0(r2)
101014b8:	10800084 	addi	r2,r2,2
101014bc:	10800023 	ldbuio	r2,0(r2)
101014c0:	10803fcc 	andi	r2,r2,255
101014c4:	1080004c 	andi	r2,r2,1
101014c8:	10000726 	beq	r2,zero,101014e8 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101014cc:	e0bffc17 	ldw	r2,-16(fp)
101014d0:	10800017 	ldw	r2,0(r2)
101014d4:	10800044 	addi	r2,r2,1
101014d8:	00c00084 	movi	r3,2
101014dc:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101014e0:	00800084 	movi	r2,2
101014e4:	00001c06 	br	10101558 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101014e8:	e0bffd03 	ldbu	r2,-12(fp)
101014ec:	10800054 	ori	r2,r2,1
101014f0:	10803fcc 	andi	r2,r2,255
101014f4:	01800504 	movi	r6,20
101014f8:	100b883a 	mov	r5,r2
101014fc:	e13ffc17 	ldw	r4,-16(fp)
10101500:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101504:	e0bffc17 	ldw	r2,-16(fp)
10101508:	10800017 	ldw	r2,0(r2)
1010150c:	10800084 	addi	r2,r2,2
10101510:	10800023 	ldbuio	r2,0(r2)
10101514:	10803fcc 	andi	r2,r2,255
10101518:	1080004c 	andi	r2,r2,1
1010151c:	10000726 	beq	r2,zero,1010153c <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101520:	e0bffc17 	ldw	r2,-16(fp)
10101524:	10800017 	ldw	r2,0(r2)
10101528:	10800044 	addi	r2,r2,1
1010152c:	00c00084 	movi	r3,2
10101530:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101534:	00800044 	movi	r2,1
10101538:	00000706 	br	10101558 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
1010153c:	014002c4 	movi	r5,11
10101540:	e13ffc17 	ldw	r4,-16(fp)
10101544:	01011840 	call	10101184 <get_data_set_control>
10101548:	1007883a 	mov	r3,r2
1010154c:	e0bfff17 	ldw	r2,-4(fp)
10101550:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10101554:	0005883a 	mov	r2,zero
}
10101558:	e037883a 	mov	sp,fp
1010155c:	dfc00117 	ldw	ra,4(sp)
10101560:	df000017 	ldw	fp,0(sp)
10101564:	dec00204 	addi	sp,sp,8
10101568:	f800283a 	ret

1010156c <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
1010156c:	defff904 	addi	sp,sp,-28
10101570:	dfc00615 	stw	ra,24(sp)
10101574:	df000515 	stw	fp,20(sp)
10101578:	df000504 	addi	fp,sp,20
1010157c:	e13ffc15 	stw	r4,-16(fp)
10101580:	2807883a 	mov	r3,r5
10101584:	3005883a 	mov	r2,r6
10101588:	e1ffff15 	stw	r7,-4(fp)
1010158c:	e0fffd05 	stb	r3,-12(fp)
10101590:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101594:	e0bffd03 	ldbu	r2,-12(fp)
10101598:	10803f8c 	andi	r2,r2,254
1010159c:	01800504 	movi	r6,20
101015a0:	100b883a 	mov	r5,r2
101015a4:	e13ffc17 	ldw	r4,-16(fp)
101015a8:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101015ac:	e0bffc17 	ldw	r2,-16(fp)
101015b0:	10800017 	ldw	r2,0(r2)
101015b4:	10800084 	addi	r2,r2,2
101015b8:	10800023 	ldbuio	r2,0(r2)
101015bc:	10803fcc 	andi	r2,r2,255
101015c0:	1080004c 	andi	r2,r2,1
101015c4:	10000726 	beq	r2,zero,101015e4 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101015c8:	e0bffc17 	ldw	r2,-16(fp)
101015cc:	10800017 	ldw	r2,0(r2)
101015d0:	10800044 	addi	r2,r2,1
101015d4:	00c00084 	movi	r3,2
101015d8:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101015dc:	00800044 	movi	r2,1
101015e0:	00004206 	br	101016ec <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
101015e4:	e0bffe03 	ldbu	r2,-8(fp)
101015e8:	01800404 	movi	r6,16
101015ec:	100b883a 	mov	r5,r2
101015f0:	e13ffc17 	ldw	r4,-16(fp)
101015f4:	01011140 	call	10101114 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101015f8:	e0bffc17 	ldw	r2,-16(fp)
101015fc:	10800017 	ldw	r2,0(r2)
10101600:	10800084 	addi	r2,r2,2
10101604:	10800023 	ldbuio	r2,0(r2)
10101608:	10803fcc 	andi	r2,r2,255
1010160c:	1080004c 	andi	r2,r2,1
10101610:	10000726 	beq	r2,zero,10101630 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101614:	e0bffc17 	ldw	r2,-16(fp)
10101618:	10800017 	ldw	r2,0(r2)
1010161c:	10800044 	addi	r2,r2,1
10101620:	00c00084 	movi	r3,2
10101624:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101628:	00800084 	movi	r2,2
1010162c:	00002f06 	br	101016ec <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10101630:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10101634:	e03ffb15 	stw	zero,-20(fp)
10101638:	00002806 	br	101016dc <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
1010163c:	e0800217 	ldw	r2,8(fp)
10101640:	10bfffc4 	addi	r2,r2,-1
10101644:	e0fffb17 	ldw	r3,-20(fp)
10101648:	18800a2e 	bgeu	r3,r2,10101674 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
1010164c:	e0ffff17 	ldw	r3,-4(fp)
10101650:	e0bffb17 	ldw	r2,-20(fp)
10101654:	1885883a 	add	r2,r3,r2
10101658:	10800003 	ldbu	r2,0(r2)
1010165c:	10803fcc 	andi	r2,r2,255
10101660:	01800404 	movi	r6,16
10101664:	100b883a 	mov	r5,r2
10101668:	e13ffc17 	ldw	r4,-16(fp)
1010166c:	01011140 	call	10101114 <set_data_control>
10101670:	00000906 	br	10101698 <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101674:	e0ffff17 	ldw	r3,-4(fp)
10101678:	e0bffb17 	ldw	r2,-20(fp)
1010167c:	1885883a 	add	r2,r3,r2
10101680:	10800003 	ldbu	r2,0(r2)
10101684:	10803fcc 	andi	r2,r2,255
10101688:	01800484 	movi	r6,18
1010168c:	100b883a 	mov	r5,r2
10101690:	e13ffc17 	ldw	r4,-16(fp)
10101694:	01011140 	call	10101114 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101698:	e0bffc17 	ldw	r2,-16(fp)
1010169c:	10800017 	ldw	r2,0(r2)
101016a0:	10800084 	addi	r2,r2,2
101016a4:	10800023 	ldbuio	r2,0(r2)
101016a8:	10803fcc 	andi	r2,r2,255
101016ac:	1080004c 	andi	r2,r2,1
101016b0:	10000726 	beq	r2,zero,101016d0 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101016b4:	e0bffc17 	ldw	r2,-16(fp)
101016b8:	10800017 	ldw	r2,0(r2)
101016bc:	10800044 	addi	r2,r2,1
101016c0:	00c00084 	movi	r3,2
101016c4:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
101016c8:	00800084 	movi	r2,2
101016cc:	00000706 	br	101016ec <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
101016d0:	e0bffb17 	ldw	r2,-20(fp)
101016d4:	10800044 	addi	r2,r2,1
101016d8:	e0bffb15 	stw	r2,-20(fp)
101016dc:	e0fffb17 	ldw	r3,-20(fp)
101016e0:	e0800217 	ldw	r2,8(fp)
101016e4:	18bfd536 	bltu	r3,r2,1010163c <__alt_data_end+0xfffe163c>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
101016e8:	0005883a 	mov	r2,zero
}
101016ec:	e037883a 	mov	sp,fp
101016f0:	dfc00117 	ldw	ra,4(sp)
101016f4:	df000017 	ldw	fp,0(sp)
101016f8:	dec00204 	addi	sp,sp,8
101016fc:	f800283a 	ret

10101700 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10101700:	defff804 	addi	sp,sp,-32
10101704:	dfc00715 	stw	ra,28(sp)
10101708:	df000615 	stw	fp,24(sp)
1010170c:	dc000515 	stw	r16,20(sp)
10101710:	df000604 	addi	fp,sp,24
10101714:	e13ffb15 	stw	r4,-20(fp)
10101718:	2807883a 	mov	r3,r5
1010171c:	3005883a 	mov	r2,r6
10101720:	e1fffe15 	stw	r7,-8(fp)
10101724:	e0fffc05 	stb	r3,-16(fp)
10101728:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
1010172c:	e0bffc03 	ldbu	r2,-16(fp)
10101730:	10803f8c 	andi	r2,r2,254
10101734:	01800504 	movi	r6,20
10101738:	100b883a 	mov	r5,r2
1010173c:	e13ffb17 	ldw	r4,-20(fp)
10101740:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101744:	e0bffb17 	ldw	r2,-20(fp)
10101748:	10800017 	ldw	r2,0(r2)
1010174c:	10800084 	addi	r2,r2,2
10101750:	10800023 	ldbuio	r2,0(r2)
10101754:	10803fcc 	andi	r2,r2,255
10101758:	1080004c 	andi	r2,r2,1
1010175c:	10000726 	beq	r2,zero,1010177c <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101760:	e0bffb17 	ldw	r2,-20(fp)
10101764:	10800017 	ldw	r2,0(r2)
10101768:	10800044 	addi	r2,r2,1
1010176c:	00c00084 	movi	r3,2
10101770:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101774:	00800044 	movi	r2,1
10101778:	00004506 	br	10101890 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
1010177c:	e0bffd03 	ldbu	r2,-12(fp)
10101780:	01800404 	movi	r6,16
10101784:	100b883a 	mov	r5,r2
10101788:	e13ffb17 	ldw	r4,-20(fp)
1010178c:	01011140 	call	10101114 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101790:	e0bffb17 	ldw	r2,-20(fp)
10101794:	10800017 	ldw	r2,0(r2)
10101798:	10800084 	addi	r2,r2,2
1010179c:	10800023 	ldbuio	r2,0(r2)
101017a0:	10803fcc 	andi	r2,r2,255
101017a4:	1080004c 	andi	r2,r2,1
101017a8:	10000726 	beq	r2,zero,101017c8 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101017ac:	e0bffb17 	ldw	r2,-20(fp)
101017b0:	10800017 	ldw	r2,0(r2)
101017b4:	10800044 	addi	r2,r2,1
101017b8:	00c00084 	movi	r3,2
101017bc:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101017c0:	00800084 	movi	r2,2
101017c4:	00003206 	br	10101890 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101017c8:	e0bffc03 	ldbu	r2,-16(fp)
101017cc:	10800054 	ori	r2,r2,1
101017d0:	10803fcc 	andi	r2,r2,255
101017d4:	01800504 	movi	r6,20
101017d8:	100b883a 	mov	r5,r2
101017dc:	e13ffb17 	ldw	r4,-20(fp)
101017e0:	01011140 	call	10101114 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101017e4:	e0bffb17 	ldw	r2,-20(fp)
101017e8:	10800017 	ldw	r2,0(r2)
101017ec:	10800084 	addi	r2,r2,2
101017f0:	10800023 	ldbuio	r2,0(r2)
101017f4:	10803fcc 	andi	r2,r2,255
101017f8:	1080004c 	andi	r2,r2,1
101017fc:	10000726 	beq	r2,zero,1010181c <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101800:	e0bffb17 	ldw	r2,-20(fp)
10101804:	10800017 	ldw	r2,0(r2)
10101808:	10800044 	addi	r2,r2,1
1010180c:	00c00084 	movi	r3,2
10101810:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101814:	00800044 	movi	r2,1
10101818:	00001d06 	br	10101890 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
1010181c:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10101820:	e03ffa15 	stw	zero,-24(fp)
10101824:	00001606 	br	10101880 <i2c_read_array+0x180>
        if (i < size - 1) {
10101828:	e0800217 	ldw	r2,8(fp)
1010182c:	10bfffc4 	addi	r2,r2,-1
10101830:	e0fffa17 	ldw	r3,-24(fp)
10101834:	1880082e 	bgeu	r3,r2,10101858 <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
10101838:	e0fffe17 	ldw	r3,-8(fp)
1010183c:	e0bffa17 	ldw	r2,-24(fp)
10101840:	18a1883a 	add	r16,r3,r2
10101844:	01400204 	movi	r5,8
10101848:	e13ffb17 	ldw	r4,-20(fp)
1010184c:	01011840 	call	10101184 <get_data_set_control>
10101850:	80800005 	stb	r2,0(r16)
10101854:	00000706 	br	10101874 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101858:	e0fffe17 	ldw	r3,-8(fp)
1010185c:	e0bffa17 	ldw	r2,-24(fp)
10101860:	18a1883a 	add	r16,r3,r2
10101864:	014002c4 	movi	r5,11
10101868:	e13ffb17 	ldw	r4,-20(fp)
1010186c:	01011840 	call	10101184 <get_data_set_control>
10101870:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101874:	e0bffa17 	ldw	r2,-24(fp)
10101878:	10800044 	addi	r2,r2,1
1010187c:	e0bffa15 	stw	r2,-24(fp)
10101880:	e0fffa17 	ldw	r3,-24(fp)
10101884:	e0800217 	ldw	r2,8(fp)
10101888:	18bfe736 	bltu	r3,r2,10101828 <__alt_data_end+0xfffe1828>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
1010188c:	0005883a 	mov	r2,zero
}
10101890:	e6ffff04 	addi	sp,fp,-4
10101894:	dfc00217 	ldw	ra,8(sp)
10101898:	df000117 	ldw	fp,4(sp)
1010189c:	dc000017 	ldw	r16,0(sp)
101018a0:	dec00304 	addi	sp,sp,12
101018a4:	f800283a 	ret

101018a8 <__divsi3>:
101018a8:	20001b16 	blt	r4,zero,10101918 <__divsi3+0x70>
101018ac:	000f883a 	mov	r7,zero
101018b0:	28001616 	blt	r5,zero,1010190c <__divsi3+0x64>
101018b4:	200d883a 	mov	r6,r4
101018b8:	29001a2e 	bgeu	r5,r4,10101924 <__divsi3+0x7c>
101018bc:	00800804 	movi	r2,32
101018c0:	00c00044 	movi	r3,1
101018c4:	00000106 	br	101018cc <__divsi3+0x24>
101018c8:	10000d26 	beq	r2,zero,10101900 <__divsi3+0x58>
101018cc:	294b883a 	add	r5,r5,r5
101018d0:	10bfffc4 	addi	r2,r2,-1
101018d4:	18c7883a 	add	r3,r3,r3
101018d8:	293ffb36 	bltu	r5,r4,101018c8 <__alt_data_end+0xfffe18c8>
101018dc:	0005883a 	mov	r2,zero
101018e0:	18000726 	beq	r3,zero,10101900 <__divsi3+0x58>
101018e4:	0005883a 	mov	r2,zero
101018e8:	31400236 	bltu	r6,r5,101018f4 <__divsi3+0x4c>
101018ec:	314dc83a 	sub	r6,r6,r5
101018f0:	10c4b03a 	or	r2,r2,r3
101018f4:	1806d07a 	srli	r3,r3,1
101018f8:	280ad07a 	srli	r5,r5,1
101018fc:	183ffa1e 	bne	r3,zero,101018e8 <__alt_data_end+0xfffe18e8>
10101900:	38000126 	beq	r7,zero,10101908 <__divsi3+0x60>
10101904:	0085c83a 	sub	r2,zero,r2
10101908:	f800283a 	ret
1010190c:	014bc83a 	sub	r5,zero,r5
10101910:	39c0005c 	xori	r7,r7,1
10101914:	003fe706 	br	101018b4 <__alt_data_end+0xfffe18b4>
10101918:	0109c83a 	sub	r4,zero,r4
1010191c:	01c00044 	movi	r7,1
10101920:	003fe306 	br	101018b0 <__alt_data_end+0xfffe18b0>
10101924:	00c00044 	movi	r3,1
10101928:	003fee06 	br	101018e4 <__alt_data_end+0xfffe18e4>

1010192c <__modsi3>:
1010192c:	20001716 	blt	r4,zero,1010198c <__modsi3+0x60>
10101930:	000f883a 	mov	r7,zero
10101934:	2005883a 	mov	r2,r4
10101938:	28001216 	blt	r5,zero,10101984 <__modsi3+0x58>
1010193c:	2900162e 	bgeu	r5,r4,10101998 <__modsi3+0x6c>
10101940:	01800804 	movi	r6,32
10101944:	00c00044 	movi	r3,1
10101948:	00000106 	br	10101950 <__modsi3+0x24>
1010194c:	30000a26 	beq	r6,zero,10101978 <__modsi3+0x4c>
10101950:	294b883a 	add	r5,r5,r5
10101954:	31bfffc4 	addi	r6,r6,-1
10101958:	18c7883a 	add	r3,r3,r3
1010195c:	293ffb36 	bltu	r5,r4,1010194c <__alt_data_end+0xfffe194c>
10101960:	18000526 	beq	r3,zero,10101978 <__modsi3+0x4c>
10101964:	1806d07a 	srli	r3,r3,1
10101968:	11400136 	bltu	r2,r5,10101970 <__modsi3+0x44>
1010196c:	1145c83a 	sub	r2,r2,r5
10101970:	280ad07a 	srli	r5,r5,1
10101974:	183ffb1e 	bne	r3,zero,10101964 <__alt_data_end+0xfffe1964>
10101978:	38000126 	beq	r7,zero,10101980 <__modsi3+0x54>
1010197c:	0085c83a 	sub	r2,zero,r2
10101980:	f800283a 	ret
10101984:	014bc83a 	sub	r5,zero,r5
10101988:	003fec06 	br	1010193c <__alt_data_end+0xfffe193c>
1010198c:	0109c83a 	sub	r4,zero,r4
10101990:	01c00044 	movi	r7,1
10101994:	003fe706 	br	10101934 <__alt_data_end+0xfffe1934>
10101998:	00c00044 	movi	r3,1
1010199c:	003ff106 	br	10101964 <__alt_data_end+0xfffe1964>

101019a0 <__udivsi3>:
101019a0:	200d883a 	mov	r6,r4
101019a4:	2900152e 	bgeu	r5,r4,101019fc <__udivsi3+0x5c>
101019a8:	28001416 	blt	r5,zero,101019fc <__udivsi3+0x5c>
101019ac:	00800804 	movi	r2,32
101019b0:	00c00044 	movi	r3,1
101019b4:	00000206 	br	101019c0 <__udivsi3+0x20>
101019b8:	10000e26 	beq	r2,zero,101019f4 <__udivsi3+0x54>
101019bc:	28000516 	blt	r5,zero,101019d4 <__udivsi3+0x34>
101019c0:	294b883a 	add	r5,r5,r5
101019c4:	10bfffc4 	addi	r2,r2,-1
101019c8:	18c7883a 	add	r3,r3,r3
101019cc:	293ffa36 	bltu	r5,r4,101019b8 <__alt_data_end+0xfffe19b8>
101019d0:	18000826 	beq	r3,zero,101019f4 <__udivsi3+0x54>
101019d4:	0005883a 	mov	r2,zero
101019d8:	31400236 	bltu	r6,r5,101019e4 <__udivsi3+0x44>
101019dc:	314dc83a 	sub	r6,r6,r5
101019e0:	10c4b03a 	or	r2,r2,r3
101019e4:	1806d07a 	srli	r3,r3,1
101019e8:	280ad07a 	srli	r5,r5,1
101019ec:	183ffa1e 	bne	r3,zero,101019d8 <__alt_data_end+0xfffe19d8>
101019f0:	f800283a 	ret
101019f4:	0005883a 	mov	r2,zero
101019f8:	f800283a 	ret
101019fc:	00c00044 	movi	r3,1
10101a00:	003ff406 	br	101019d4 <__alt_data_end+0xfffe19d4>

10101a04 <__umodsi3>:
10101a04:	2005883a 	mov	r2,r4
10101a08:	2900122e 	bgeu	r5,r4,10101a54 <__umodsi3+0x50>
10101a0c:	28001116 	blt	r5,zero,10101a54 <__umodsi3+0x50>
10101a10:	01800804 	movi	r6,32
10101a14:	00c00044 	movi	r3,1
10101a18:	00000206 	br	10101a24 <__umodsi3+0x20>
10101a1c:	30000c26 	beq	r6,zero,10101a50 <__umodsi3+0x4c>
10101a20:	28000516 	blt	r5,zero,10101a38 <__umodsi3+0x34>
10101a24:	294b883a 	add	r5,r5,r5
10101a28:	31bfffc4 	addi	r6,r6,-1
10101a2c:	18c7883a 	add	r3,r3,r3
10101a30:	293ffa36 	bltu	r5,r4,10101a1c <__alt_data_end+0xfffe1a1c>
10101a34:	18000626 	beq	r3,zero,10101a50 <__umodsi3+0x4c>
10101a38:	1806d07a 	srli	r3,r3,1
10101a3c:	11400136 	bltu	r2,r5,10101a44 <__umodsi3+0x40>
10101a40:	1145c83a 	sub	r2,r2,r5
10101a44:	280ad07a 	srli	r5,r5,1
10101a48:	183ffb1e 	bne	r3,zero,10101a38 <__alt_data_end+0xfffe1a38>
10101a4c:	f800283a 	ret
10101a50:	f800283a 	ret
10101a54:	00c00044 	movi	r3,1
10101a58:	003ff706 	br	10101a38 <__alt_data_end+0xfffe1a38>

10101a5c <_fclose_r>:
10101a5c:	28003926 	beq	r5,zero,10101b44 <_fclose_r+0xe8>
10101a60:	defffc04 	addi	sp,sp,-16
10101a64:	dc400115 	stw	r17,4(sp)
10101a68:	dc000015 	stw	r16,0(sp)
10101a6c:	dfc00315 	stw	ra,12(sp)
10101a70:	dc800215 	stw	r18,8(sp)
10101a74:	2023883a 	mov	r17,r4
10101a78:	2821883a 	mov	r16,r5
10101a7c:	20000226 	beq	r4,zero,10101a88 <_fclose_r+0x2c>
10101a80:	20800e17 	ldw	r2,56(r4)
10101a84:	10002726 	beq	r2,zero,10101b24 <_fclose_r+0xc8>
10101a88:	8080030f 	ldh	r2,12(r16)
10101a8c:	1000071e 	bne	r2,zero,10101aac <_fclose_r+0x50>
10101a90:	0005883a 	mov	r2,zero
10101a94:	dfc00317 	ldw	ra,12(sp)
10101a98:	dc800217 	ldw	r18,8(sp)
10101a9c:	dc400117 	ldw	r17,4(sp)
10101aa0:	dc000017 	ldw	r16,0(sp)
10101aa4:	dec00404 	addi	sp,sp,16
10101aa8:	f800283a 	ret
10101aac:	800b883a 	mov	r5,r16
10101ab0:	8809883a 	mov	r4,r17
10101ab4:	0101b600 	call	10101b60 <__sflush_r>
10101ab8:	1025883a 	mov	r18,r2
10101abc:	80800b17 	ldw	r2,44(r16)
10101ac0:	10000426 	beq	r2,zero,10101ad4 <_fclose_r+0x78>
10101ac4:	81400717 	ldw	r5,28(r16)
10101ac8:	8809883a 	mov	r4,r17
10101acc:	103ee83a 	callr	r2
10101ad0:	10001616 	blt	r2,zero,10101b2c <_fclose_r+0xd0>
10101ad4:	8080030b 	ldhu	r2,12(r16)
10101ad8:	1080200c 	andi	r2,r2,128
10101adc:	1000151e 	bne	r2,zero,10101b34 <_fclose_r+0xd8>
10101ae0:	81400c17 	ldw	r5,48(r16)
10101ae4:	28000526 	beq	r5,zero,10101afc <_fclose_r+0xa0>
10101ae8:	80801004 	addi	r2,r16,64
10101aec:	28800226 	beq	r5,r2,10101af8 <_fclose_r+0x9c>
10101af0:	8809883a 	mov	r4,r17
10101af4:	01024240 	call	10102424 <_free_r>
10101af8:	80000c15 	stw	zero,48(r16)
10101afc:	81401117 	ldw	r5,68(r16)
10101b00:	28000326 	beq	r5,zero,10101b10 <_fclose_r+0xb4>
10101b04:	8809883a 	mov	r4,r17
10101b08:	01024240 	call	10102424 <_free_r>
10101b0c:	80001115 	stw	zero,68(r16)
10101b10:	01021680 	call	10102168 <__sfp_lock_acquire>
10101b14:	8000030d 	sth	zero,12(r16)
10101b18:	010216c0 	call	1010216c <__sfp_lock_release>
10101b1c:	9005883a 	mov	r2,r18
10101b20:	003fdc06 	br	10101a94 <__alt_data_end+0xfffe1a94>
10101b24:	01021580 	call	10102158 <__sinit>
10101b28:	003fd706 	br	10101a88 <__alt_data_end+0xfffe1a88>
10101b2c:	04bfffc4 	movi	r18,-1
10101b30:	003fe806 	br	10101ad4 <__alt_data_end+0xfffe1ad4>
10101b34:	81400417 	ldw	r5,16(r16)
10101b38:	8809883a 	mov	r4,r17
10101b3c:	01024240 	call	10102424 <_free_r>
10101b40:	003fe706 	br	10101ae0 <__alt_data_end+0xfffe1ae0>
10101b44:	0005883a 	mov	r2,zero
10101b48:	f800283a 	ret

10101b4c <fclose>:
10101b4c:	00840474 	movhi	r2,4113
10101b50:	108e1004 	addi	r2,r2,14400
10101b54:	200b883a 	mov	r5,r4
10101b58:	11000017 	ldw	r4,0(r2)
10101b5c:	0101a5c1 	jmpi	10101a5c <_fclose_r>

10101b60 <__sflush_r>:
10101b60:	2880030b 	ldhu	r2,12(r5)
10101b64:	defffb04 	addi	sp,sp,-20
10101b68:	dcc00315 	stw	r19,12(sp)
10101b6c:	dc400115 	stw	r17,4(sp)
10101b70:	dfc00415 	stw	ra,16(sp)
10101b74:	dc800215 	stw	r18,8(sp)
10101b78:	dc000015 	stw	r16,0(sp)
10101b7c:	10c0020c 	andi	r3,r2,8
10101b80:	2823883a 	mov	r17,r5
10101b84:	2027883a 	mov	r19,r4
10101b88:	1800311e 	bne	r3,zero,10101c50 <__sflush_r+0xf0>
10101b8c:	28c00117 	ldw	r3,4(r5)
10101b90:	10820014 	ori	r2,r2,2048
10101b94:	2880030d 	sth	r2,12(r5)
10101b98:	00c04b0e 	bge	zero,r3,10101cc8 <__sflush_r+0x168>
10101b9c:	8a000a17 	ldw	r8,40(r17)
10101ba0:	40002326 	beq	r8,zero,10101c30 <__sflush_r+0xd0>
10101ba4:	9c000017 	ldw	r16,0(r19)
10101ba8:	10c4000c 	andi	r3,r2,4096
10101bac:	98000015 	stw	zero,0(r19)
10101bb0:	18004826 	beq	r3,zero,10101cd4 <__sflush_r+0x174>
10101bb4:	89801417 	ldw	r6,80(r17)
10101bb8:	10c0010c 	andi	r3,r2,4
10101bbc:	18000626 	beq	r3,zero,10101bd8 <__sflush_r+0x78>
10101bc0:	88c00117 	ldw	r3,4(r17)
10101bc4:	88800c17 	ldw	r2,48(r17)
10101bc8:	30cdc83a 	sub	r6,r6,r3
10101bcc:	10000226 	beq	r2,zero,10101bd8 <__sflush_r+0x78>
10101bd0:	88800f17 	ldw	r2,60(r17)
10101bd4:	308dc83a 	sub	r6,r6,r2
10101bd8:	89400717 	ldw	r5,28(r17)
10101bdc:	000f883a 	mov	r7,zero
10101be0:	9809883a 	mov	r4,r19
10101be4:	403ee83a 	callr	r8
10101be8:	00ffffc4 	movi	r3,-1
10101bec:	10c04426 	beq	r2,r3,10101d00 <__sflush_r+0x1a0>
10101bf0:	88c0030b 	ldhu	r3,12(r17)
10101bf4:	89000417 	ldw	r4,16(r17)
10101bf8:	88000115 	stw	zero,4(r17)
10101bfc:	197dffcc 	andi	r5,r3,63487
10101c00:	8940030d 	sth	r5,12(r17)
10101c04:	89000015 	stw	r4,0(r17)
10101c08:	18c4000c 	andi	r3,r3,4096
10101c0c:	18002c1e 	bne	r3,zero,10101cc0 <__sflush_r+0x160>
10101c10:	89400c17 	ldw	r5,48(r17)
10101c14:	9c000015 	stw	r16,0(r19)
10101c18:	28000526 	beq	r5,zero,10101c30 <__sflush_r+0xd0>
10101c1c:	88801004 	addi	r2,r17,64
10101c20:	28800226 	beq	r5,r2,10101c2c <__sflush_r+0xcc>
10101c24:	9809883a 	mov	r4,r19
10101c28:	01024240 	call	10102424 <_free_r>
10101c2c:	88000c15 	stw	zero,48(r17)
10101c30:	0005883a 	mov	r2,zero
10101c34:	dfc00417 	ldw	ra,16(sp)
10101c38:	dcc00317 	ldw	r19,12(sp)
10101c3c:	dc800217 	ldw	r18,8(sp)
10101c40:	dc400117 	ldw	r17,4(sp)
10101c44:	dc000017 	ldw	r16,0(sp)
10101c48:	dec00504 	addi	sp,sp,20
10101c4c:	f800283a 	ret
10101c50:	2c800417 	ldw	r18,16(r5)
10101c54:	903ff626 	beq	r18,zero,10101c30 <__alt_data_end+0xfffe1c30>
10101c58:	2c000017 	ldw	r16,0(r5)
10101c5c:	108000cc 	andi	r2,r2,3
10101c60:	2c800015 	stw	r18,0(r5)
10101c64:	84a1c83a 	sub	r16,r16,r18
10101c68:	1000131e 	bne	r2,zero,10101cb8 <__sflush_r+0x158>
10101c6c:	28800517 	ldw	r2,20(r5)
10101c70:	88800215 	stw	r2,8(r17)
10101c74:	04000316 	blt	zero,r16,10101c84 <__sflush_r+0x124>
10101c78:	003fed06 	br	10101c30 <__alt_data_end+0xfffe1c30>
10101c7c:	90a5883a 	add	r18,r18,r2
10101c80:	043feb0e 	bge	zero,r16,10101c30 <__alt_data_end+0xfffe1c30>
10101c84:	88800917 	ldw	r2,36(r17)
10101c88:	89400717 	ldw	r5,28(r17)
10101c8c:	800f883a 	mov	r7,r16
10101c90:	900d883a 	mov	r6,r18
10101c94:	9809883a 	mov	r4,r19
10101c98:	103ee83a 	callr	r2
10101c9c:	80a1c83a 	sub	r16,r16,r2
10101ca0:	00bff616 	blt	zero,r2,10101c7c <__alt_data_end+0xfffe1c7c>
10101ca4:	88c0030b 	ldhu	r3,12(r17)
10101ca8:	00bfffc4 	movi	r2,-1
10101cac:	18c01014 	ori	r3,r3,64
10101cb0:	88c0030d 	sth	r3,12(r17)
10101cb4:	003fdf06 	br	10101c34 <__alt_data_end+0xfffe1c34>
10101cb8:	0005883a 	mov	r2,zero
10101cbc:	003fec06 	br	10101c70 <__alt_data_end+0xfffe1c70>
10101cc0:	88801415 	stw	r2,80(r17)
10101cc4:	003fd206 	br	10101c10 <__alt_data_end+0xfffe1c10>
10101cc8:	28c00f17 	ldw	r3,60(r5)
10101ccc:	00ffb316 	blt	zero,r3,10101b9c <__alt_data_end+0xfffe1b9c>
10101cd0:	003fd706 	br	10101c30 <__alt_data_end+0xfffe1c30>
10101cd4:	89400717 	ldw	r5,28(r17)
10101cd8:	000d883a 	mov	r6,zero
10101cdc:	01c00044 	movi	r7,1
10101ce0:	9809883a 	mov	r4,r19
10101ce4:	403ee83a 	callr	r8
10101ce8:	100d883a 	mov	r6,r2
10101cec:	00bfffc4 	movi	r2,-1
10101cf0:	30801426 	beq	r6,r2,10101d44 <__sflush_r+0x1e4>
10101cf4:	8880030b 	ldhu	r2,12(r17)
10101cf8:	8a000a17 	ldw	r8,40(r17)
10101cfc:	003fae06 	br	10101bb8 <__alt_data_end+0xfffe1bb8>
10101d00:	98c00017 	ldw	r3,0(r19)
10101d04:	183fba26 	beq	r3,zero,10101bf0 <__alt_data_end+0xfffe1bf0>
10101d08:	01000744 	movi	r4,29
10101d0c:	19000626 	beq	r3,r4,10101d28 <__sflush_r+0x1c8>
10101d10:	01000584 	movi	r4,22
10101d14:	19000426 	beq	r3,r4,10101d28 <__sflush_r+0x1c8>
10101d18:	88c0030b 	ldhu	r3,12(r17)
10101d1c:	18c01014 	ori	r3,r3,64
10101d20:	88c0030d 	sth	r3,12(r17)
10101d24:	003fc306 	br	10101c34 <__alt_data_end+0xfffe1c34>
10101d28:	8880030b 	ldhu	r2,12(r17)
10101d2c:	88c00417 	ldw	r3,16(r17)
10101d30:	88000115 	stw	zero,4(r17)
10101d34:	10bdffcc 	andi	r2,r2,63487
10101d38:	8880030d 	sth	r2,12(r17)
10101d3c:	88c00015 	stw	r3,0(r17)
10101d40:	003fb306 	br	10101c10 <__alt_data_end+0xfffe1c10>
10101d44:	98800017 	ldw	r2,0(r19)
10101d48:	103fea26 	beq	r2,zero,10101cf4 <__alt_data_end+0xfffe1cf4>
10101d4c:	00c00744 	movi	r3,29
10101d50:	10c00226 	beq	r2,r3,10101d5c <__sflush_r+0x1fc>
10101d54:	00c00584 	movi	r3,22
10101d58:	10c0031e 	bne	r2,r3,10101d68 <__sflush_r+0x208>
10101d5c:	9c000015 	stw	r16,0(r19)
10101d60:	0005883a 	mov	r2,zero
10101d64:	003fb306 	br	10101c34 <__alt_data_end+0xfffe1c34>
10101d68:	88c0030b 	ldhu	r3,12(r17)
10101d6c:	3005883a 	mov	r2,r6
10101d70:	18c01014 	ori	r3,r3,64
10101d74:	88c0030d 	sth	r3,12(r17)
10101d78:	003fae06 	br	10101c34 <__alt_data_end+0xfffe1c34>

10101d7c <_fflush_r>:
10101d7c:	defffd04 	addi	sp,sp,-12
10101d80:	dc000115 	stw	r16,4(sp)
10101d84:	dfc00215 	stw	ra,8(sp)
10101d88:	2021883a 	mov	r16,r4
10101d8c:	20000226 	beq	r4,zero,10101d98 <_fflush_r+0x1c>
10101d90:	20800e17 	ldw	r2,56(r4)
10101d94:	10000c26 	beq	r2,zero,10101dc8 <_fflush_r+0x4c>
10101d98:	2880030f 	ldh	r2,12(r5)
10101d9c:	1000051e 	bne	r2,zero,10101db4 <_fflush_r+0x38>
10101da0:	0005883a 	mov	r2,zero
10101da4:	dfc00217 	ldw	ra,8(sp)
10101da8:	dc000117 	ldw	r16,4(sp)
10101dac:	dec00304 	addi	sp,sp,12
10101db0:	f800283a 	ret
10101db4:	8009883a 	mov	r4,r16
10101db8:	dfc00217 	ldw	ra,8(sp)
10101dbc:	dc000117 	ldw	r16,4(sp)
10101dc0:	dec00304 	addi	sp,sp,12
10101dc4:	0101b601 	jmpi	10101b60 <__sflush_r>
10101dc8:	d9400015 	stw	r5,0(sp)
10101dcc:	01021580 	call	10102158 <__sinit>
10101dd0:	d9400017 	ldw	r5,0(sp)
10101dd4:	003ff006 	br	10101d98 <__alt_data_end+0xfffe1d98>

10101dd8 <fflush>:
10101dd8:	20000526 	beq	r4,zero,10101df0 <fflush+0x18>
10101ddc:	00840474 	movhi	r2,4113
10101de0:	108e1004 	addi	r2,r2,14400
10101de4:	200b883a 	mov	r5,r4
10101de8:	11000017 	ldw	r4,0(r2)
10101dec:	0101d7c1 	jmpi	10101d7c <_fflush_r>
10101df0:	00840474 	movhi	r2,4113
10101df4:	108e0f04 	addi	r2,r2,14396
10101df8:	11000017 	ldw	r4,0(r2)
10101dfc:	01440434 	movhi	r5,4112
10101e00:	29475f04 	addi	r5,r5,7548
10101e04:	0102cd41 	jmpi	10102cd4 <_fwalk_reent>

10101e08 <__fp_unlock>:
10101e08:	0005883a 	mov	r2,zero
10101e0c:	f800283a 	ret

10101e10 <_cleanup_r>:
10101e10:	01440434 	movhi	r5,4112
10101e14:	29469704 	addi	r5,r5,6748
10101e18:	0102cd41 	jmpi	10102cd4 <_fwalk_reent>

10101e1c <__sinit.part.1>:
10101e1c:	defff704 	addi	sp,sp,-36
10101e20:	00c40434 	movhi	r3,4112
10101e24:	dfc00815 	stw	ra,32(sp)
10101e28:	ddc00715 	stw	r23,28(sp)
10101e2c:	dd800615 	stw	r22,24(sp)
10101e30:	dd400515 	stw	r21,20(sp)
10101e34:	dd000415 	stw	r20,16(sp)
10101e38:	dcc00315 	stw	r19,12(sp)
10101e3c:	dc800215 	stw	r18,8(sp)
10101e40:	dc400115 	stw	r17,4(sp)
10101e44:	dc000015 	stw	r16,0(sp)
10101e48:	18c78404 	addi	r3,r3,7696
10101e4c:	24000117 	ldw	r16,4(r4)
10101e50:	20c00f15 	stw	r3,60(r4)
10101e54:	2080bb04 	addi	r2,r4,748
10101e58:	00c000c4 	movi	r3,3
10101e5c:	20c0b915 	stw	r3,740(r4)
10101e60:	2080ba15 	stw	r2,744(r4)
10101e64:	2000b815 	stw	zero,736(r4)
10101e68:	05c00204 	movi	r23,8
10101e6c:	00800104 	movi	r2,4
10101e70:	2025883a 	mov	r18,r4
10101e74:	b80d883a 	mov	r6,r23
10101e78:	81001704 	addi	r4,r16,92
10101e7c:	000b883a 	mov	r5,zero
10101e80:	80000015 	stw	zero,0(r16)
10101e84:	80000115 	stw	zero,4(r16)
10101e88:	80000215 	stw	zero,8(r16)
10101e8c:	8080030d 	sth	r2,12(r16)
10101e90:	80001915 	stw	zero,100(r16)
10101e94:	8000038d 	sth	zero,14(r16)
10101e98:	80000415 	stw	zero,16(r16)
10101e9c:	80000515 	stw	zero,20(r16)
10101ea0:	80000615 	stw	zero,24(r16)
10101ea4:	01037600 	call	10103760 <memset>
10101ea8:	05840434 	movhi	r22,4112
10101eac:	94400217 	ldw	r17,8(r18)
10101eb0:	05440434 	movhi	r21,4112
10101eb4:	05040434 	movhi	r20,4112
10101eb8:	04c40434 	movhi	r19,4112
10101ebc:	b58f1b04 	addi	r22,r22,15468
10101ec0:	ad4f3204 	addi	r21,r21,15560
10101ec4:	a50f5104 	addi	r20,r20,15684
10101ec8:	9ccf6804 	addi	r19,r19,15776
10101ecc:	85800815 	stw	r22,32(r16)
10101ed0:	85400915 	stw	r21,36(r16)
10101ed4:	85000a15 	stw	r20,40(r16)
10101ed8:	84c00b15 	stw	r19,44(r16)
10101edc:	84000715 	stw	r16,28(r16)
10101ee0:	00800284 	movi	r2,10
10101ee4:	8880030d 	sth	r2,12(r17)
10101ee8:	00800044 	movi	r2,1
10101eec:	b80d883a 	mov	r6,r23
10101ef0:	89001704 	addi	r4,r17,92
10101ef4:	000b883a 	mov	r5,zero
10101ef8:	88000015 	stw	zero,0(r17)
10101efc:	88000115 	stw	zero,4(r17)
10101f00:	88000215 	stw	zero,8(r17)
10101f04:	88001915 	stw	zero,100(r17)
10101f08:	8880038d 	sth	r2,14(r17)
10101f0c:	88000415 	stw	zero,16(r17)
10101f10:	88000515 	stw	zero,20(r17)
10101f14:	88000615 	stw	zero,24(r17)
10101f18:	01037600 	call	10103760 <memset>
10101f1c:	94000317 	ldw	r16,12(r18)
10101f20:	00800484 	movi	r2,18
10101f24:	8c400715 	stw	r17,28(r17)
10101f28:	8d800815 	stw	r22,32(r17)
10101f2c:	8d400915 	stw	r21,36(r17)
10101f30:	8d000a15 	stw	r20,40(r17)
10101f34:	8cc00b15 	stw	r19,44(r17)
10101f38:	8080030d 	sth	r2,12(r16)
10101f3c:	00800084 	movi	r2,2
10101f40:	80000015 	stw	zero,0(r16)
10101f44:	80000115 	stw	zero,4(r16)
10101f48:	80000215 	stw	zero,8(r16)
10101f4c:	80001915 	stw	zero,100(r16)
10101f50:	8080038d 	sth	r2,14(r16)
10101f54:	80000415 	stw	zero,16(r16)
10101f58:	80000515 	stw	zero,20(r16)
10101f5c:	80000615 	stw	zero,24(r16)
10101f60:	b80d883a 	mov	r6,r23
10101f64:	000b883a 	mov	r5,zero
10101f68:	81001704 	addi	r4,r16,92
10101f6c:	01037600 	call	10103760 <memset>
10101f70:	00800044 	movi	r2,1
10101f74:	84000715 	stw	r16,28(r16)
10101f78:	85800815 	stw	r22,32(r16)
10101f7c:	85400915 	stw	r21,36(r16)
10101f80:	85000a15 	stw	r20,40(r16)
10101f84:	84c00b15 	stw	r19,44(r16)
10101f88:	90800e15 	stw	r2,56(r18)
10101f8c:	dfc00817 	ldw	ra,32(sp)
10101f90:	ddc00717 	ldw	r23,28(sp)
10101f94:	dd800617 	ldw	r22,24(sp)
10101f98:	dd400517 	ldw	r21,20(sp)
10101f9c:	dd000417 	ldw	r20,16(sp)
10101fa0:	dcc00317 	ldw	r19,12(sp)
10101fa4:	dc800217 	ldw	r18,8(sp)
10101fa8:	dc400117 	ldw	r17,4(sp)
10101fac:	dc000017 	ldw	r16,0(sp)
10101fb0:	dec00904 	addi	sp,sp,36
10101fb4:	f800283a 	ret

10101fb8 <__fp_lock>:
10101fb8:	0005883a 	mov	r2,zero
10101fbc:	f800283a 	ret

10101fc0 <__sfmoreglue>:
10101fc0:	defffc04 	addi	sp,sp,-16
10101fc4:	dc400115 	stw	r17,4(sp)
10101fc8:	2c7fffc4 	addi	r17,r5,-1
10101fcc:	8c401a24 	muli	r17,r17,104
10101fd0:	dc800215 	stw	r18,8(sp)
10101fd4:	2825883a 	mov	r18,r5
10101fd8:	89401d04 	addi	r5,r17,116
10101fdc:	dc000015 	stw	r16,0(sp)
10101fe0:	dfc00315 	stw	ra,12(sp)
10101fe4:	0102f540 	call	10102f54 <_malloc_r>
10101fe8:	1021883a 	mov	r16,r2
10101fec:	10000726 	beq	r2,zero,1010200c <__sfmoreglue+0x4c>
10101ff0:	11000304 	addi	r4,r2,12
10101ff4:	10000015 	stw	zero,0(r2)
10101ff8:	14800115 	stw	r18,4(r2)
10101ffc:	11000215 	stw	r4,8(r2)
10102000:	89801a04 	addi	r6,r17,104
10102004:	000b883a 	mov	r5,zero
10102008:	01037600 	call	10103760 <memset>
1010200c:	8005883a 	mov	r2,r16
10102010:	dfc00317 	ldw	ra,12(sp)
10102014:	dc800217 	ldw	r18,8(sp)
10102018:	dc400117 	ldw	r17,4(sp)
1010201c:	dc000017 	ldw	r16,0(sp)
10102020:	dec00404 	addi	sp,sp,16
10102024:	f800283a 	ret

10102028 <__sfp>:
10102028:	defffb04 	addi	sp,sp,-20
1010202c:	dc000015 	stw	r16,0(sp)
10102030:	04040474 	movhi	r16,4113
10102034:	840e0f04 	addi	r16,r16,14396
10102038:	dcc00315 	stw	r19,12(sp)
1010203c:	2027883a 	mov	r19,r4
10102040:	81000017 	ldw	r4,0(r16)
10102044:	dfc00415 	stw	ra,16(sp)
10102048:	dc800215 	stw	r18,8(sp)
1010204c:	20800e17 	ldw	r2,56(r4)
10102050:	dc400115 	stw	r17,4(sp)
10102054:	1000021e 	bne	r2,zero,10102060 <__sfp+0x38>
10102058:	0101e1c0 	call	10101e1c <__sinit.part.1>
1010205c:	81000017 	ldw	r4,0(r16)
10102060:	2480b804 	addi	r18,r4,736
10102064:	047fffc4 	movi	r17,-1
10102068:	91000117 	ldw	r4,4(r18)
1010206c:	94000217 	ldw	r16,8(r18)
10102070:	213fffc4 	addi	r4,r4,-1
10102074:	20000a16 	blt	r4,zero,101020a0 <__sfp+0x78>
10102078:	8080030f 	ldh	r2,12(r16)
1010207c:	10000c26 	beq	r2,zero,101020b0 <__sfp+0x88>
10102080:	80c01d04 	addi	r3,r16,116
10102084:	00000206 	br	10102090 <__sfp+0x68>
10102088:	18bfe60f 	ldh	r2,-104(r3)
1010208c:	10000826 	beq	r2,zero,101020b0 <__sfp+0x88>
10102090:	213fffc4 	addi	r4,r4,-1
10102094:	1c3ffd04 	addi	r16,r3,-12
10102098:	18c01a04 	addi	r3,r3,104
1010209c:	247ffa1e 	bne	r4,r17,10102088 <__alt_data_end+0xfffe2088>
101020a0:	90800017 	ldw	r2,0(r18)
101020a4:	10001d26 	beq	r2,zero,1010211c <__sfp+0xf4>
101020a8:	1025883a 	mov	r18,r2
101020ac:	003fee06 	br	10102068 <__alt_data_end+0xfffe2068>
101020b0:	00bfffc4 	movi	r2,-1
101020b4:	8080038d 	sth	r2,14(r16)
101020b8:	00800044 	movi	r2,1
101020bc:	8080030d 	sth	r2,12(r16)
101020c0:	80001915 	stw	zero,100(r16)
101020c4:	80000015 	stw	zero,0(r16)
101020c8:	80000215 	stw	zero,8(r16)
101020cc:	80000115 	stw	zero,4(r16)
101020d0:	80000415 	stw	zero,16(r16)
101020d4:	80000515 	stw	zero,20(r16)
101020d8:	80000615 	stw	zero,24(r16)
101020dc:	01800204 	movi	r6,8
101020e0:	000b883a 	mov	r5,zero
101020e4:	81001704 	addi	r4,r16,92
101020e8:	01037600 	call	10103760 <memset>
101020ec:	8005883a 	mov	r2,r16
101020f0:	80000c15 	stw	zero,48(r16)
101020f4:	80000d15 	stw	zero,52(r16)
101020f8:	80001115 	stw	zero,68(r16)
101020fc:	80001215 	stw	zero,72(r16)
10102100:	dfc00417 	ldw	ra,16(sp)
10102104:	dcc00317 	ldw	r19,12(sp)
10102108:	dc800217 	ldw	r18,8(sp)
1010210c:	dc400117 	ldw	r17,4(sp)
10102110:	dc000017 	ldw	r16,0(sp)
10102114:	dec00504 	addi	sp,sp,20
10102118:	f800283a 	ret
1010211c:	01400104 	movi	r5,4
10102120:	9809883a 	mov	r4,r19
10102124:	0101fc00 	call	10101fc0 <__sfmoreglue>
10102128:	90800015 	stw	r2,0(r18)
1010212c:	103fde1e 	bne	r2,zero,101020a8 <__alt_data_end+0xfffe20a8>
10102130:	00800304 	movi	r2,12
10102134:	98800015 	stw	r2,0(r19)
10102138:	0005883a 	mov	r2,zero
1010213c:	003ff006 	br	10102100 <__alt_data_end+0xfffe2100>

10102140 <_cleanup>:
10102140:	00840474 	movhi	r2,4113
10102144:	108e0f04 	addi	r2,r2,14396
10102148:	11000017 	ldw	r4,0(r2)
1010214c:	01440434 	movhi	r5,4112
10102150:	29469704 	addi	r5,r5,6748
10102154:	0102cd41 	jmpi	10102cd4 <_fwalk_reent>

10102158 <__sinit>:
10102158:	20800e17 	ldw	r2,56(r4)
1010215c:	10000126 	beq	r2,zero,10102164 <__sinit+0xc>
10102160:	f800283a 	ret
10102164:	0101e1c1 	jmpi	10101e1c <__sinit.part.1>

10102168 <__sfp_lock_acquire>:
10102168:	f800283a 	ret

1010216c <__sfp_lock_release>:
1010216c:	f800283a 	ret

10102170 <__sinit_lock_acquire>:
10102170:	f800283a 	ret

10102174 <__sinit_lock_release>:
10102174:	f800283a 	ret

10102178 <__fp_lock_all>:
10102178:	00840474 	movhi	r2,4113
1010217c:	108e1004 	addi	r2,r2,14400
10102180:	11000017 	ldw	r4,0(r2)
10102184:	01440434 	movhi	r5,4112
10102188:	2947ee04 	addi	r5,r5,8120
1010218c:	0102c101 	jmpi	10102c10 <_fwalk>

10102190 <__fp_unlock_all>:
10102190:	00840474 	movhi	r2,4113
10102194:	108e1004 	addi	r2,r2,14400
10102198:	11000017 	ldw	r4,0(r2)
1010219c:	01440434 	movhi	r5,4112
101021a0:	29478204 	addi	r5,r5,7688
101021a4:	0102c101 	jmpi	10102c10 <_fwalk>

101021a8 <_fopen_r>:
101021a8:	defffa04 	addi	sp,sp,-24
101021ac:	3005883a 	mov	r2,r6
101021b0:	dcc00415 	stw	r19,16(sp)
101021b4:	d80d883a 	mov	r6,sp
101021b8:	2827883a 	mov	r19,r5
101021bc:	100b883a 	mov	r5,r2
101021c0:	dc800315 	stw	r18,12(sp)
101021c4:	dfc00515 	stw	ra,20(sp)
101021c8:	dc400215 	stw	r17,8(sp)
101021cc:	dc000115 	stw	r16,4(sp)
101021d0:	2025883a 	mov	r18,r4
101021d4:	0107ba00 	call	10107ba0 <__sflags>
101021d8:	10002726 	beq	r2,zero,10102278 <_fopen_r+0xd0>
101021dc:	9009883a 	mov	r4,r18
101021e0:	1023883a 	mov	r17,r2
101021e4:	01020280 	call	10102028 <__sfp>
101021e8:	1021883a 	mov	r16,r2
101021ec:	10002226 	beq	r2,zero,10102278 <_fopen_r+0xd0>
101021f0:	d9800017 	ldw	r6,0(sp)
101021f4:	01c06d84 	movi	r7,438
101021f8:	980b883a 	mov	r5,r19
101021fc:	9009883a 	mov	r4,r18
10102200:	01038880 	call	10103888 <_open_r>
10102204:	10001916 	blt	r2,zero,1010226c <_fopen_r+0xc4>
10102208:	8080038d 	sth	r2,14(r16)
1010220c:	00840434 	movhi	r2,4112
10102210:	108f1b04 	addi	r2,r2,15468
10102214:	80800815 	stw	r2,32(r16)
10102218:	00840434 	movhi	r2,4112
1010221c:	108f3204 	addi	r2,r2,15560
10102220:	80800915 	stw	r2,36(r16)
10102224:	00840434 	movhi	r2,4112
10102228:	108f5104 	addi	r2,r2,15684
1010222c:	80800a15 	stw	r2,40(r16)
10102230:	00840434 	movhi	r2,4112
10102234:	108f6804 	addi	r2,r2,15776
10102238:	8440030d 	sth	r17,12(r16)
1010223c:	84000715 	stw	r16,28(r16)
10102240:	80800b15 	stw	r2,44(r16)
10102244:	8c40400c 	andi	r17,r17,256
10102248:	88000d1e 	bne	r17,zero,10102280 <_fopen_r+0xd8>
1010224c:	8005883a 	mov	r2,r16
10102250:	dfc00517 	ldw	ra,20(sp)
10102254:	dcc00417 	ldw	r19,16(sp)
10102258:	dc800317 	ldw	r18,12(sp)
1010225c:	dc400217 	ldw	r17,8(sp)
10102260:	dc000117 	ldw	r16,4(sp)
10102264:	dec00604 	addi	sp,sp,24
10102268:	f800283a 	ret
1010226c:	01021680 	call	10102168 <__sfp_lock_acquire>
10102270:	8000030d 	sth	zero,12(r16)
10102274:	010216c0 	call	1010216c <__sfp_lock_release>
10102278:	0005883a 	mov	r2,zero
1010227c:	003ff406 	br	10102250 <__alt_data_end+0xfffe2250>
10102280:	01c00084 	movi	r7,2
10102284:	000d883a 	mov	r6,zero
10102288:	800b883a 	mov	r5,r16
1010228c:	9009883a 	mov	r4,r18
10102290:	01027340 	call	10102734 <_fseek_r>
10102294:	8005883a 	mov	r2,r16
10102298:	003fed06 	br	10102250 <__alt_data_end+0xfffe2250>

1010229c <fopen>:
1010229c:	00840474 	movhi	r2,4113
101022a0:	108e1004 	addi	r2,r2,14400
101022a4:	280d883a 	mov	r6,r5
101022a8:	200b883a 	mov	r5,r4
101022ac:	11000017 	ldw	r4,0(r2)
101022b0:	01021a81 	jmpi	101021a8 <_fopen_r>

101022b4 <_fprintf_r>:
101022b4:	defffe04 	addi	sp,sp,-8
101022b8:	2809883a 	mov	r4,r5
101022bc:	300b883a 	mov	r5,r6
101022c0:	dfc00015 	stw	ra,0(sp)
101022c4:	d9c00115 	stw	r7,4(sp)
101022c8:	d9800104 	addi	r6,sp,4
101022cc:	01060380 	call	10106038 <__vfprintf_internal>
101022d0:	dfc00017 	ldw	ra,0(sp)
101022d4:	dec00204 	addi	sp,sp,8
101022d8:	f800283a 	ret

101022dc <fprintf>:
101022dc:	defffd04 	addi	sp,sp,-12
101022e0:	dfc00015 	stw	ra,0(sp)
101022e4:	d9800115 	stw	r6,4(sp)
101022e8:	d9c00215 	stw	r7,8(sp)
101022ec:	d9800104 	addi	r6,sp,4
101022f0:	01060380 	call	10106038 <__vfprintf_internal>
101022f4:	dfc00017 	ldw	ra,0(sp)
101022f8:	dec00304 	addi	sp,sp,12
101022fc:	f800283a 	ret

10102300 <_malloc_trim_r>:
10102300:	defffb04 	addi	sp,sp,-20
10102304:	dcc00315 	stw	r19,12(sp)
10102308:	04c40474 	movhi	r19,4113
1010230c:	dc800215 	stw	r18,8(sp)
10102310:	dc400115 	stw	r17,4(sp)
10102314:	dc000015 	stw	r16,0(sp)
10102318:	dfc00415 	stw	ra,16(sp)
1010231c:	2821883a 	mov	r16,r5
10102320:	9cc86304 	addi	r19,r19,8588
10102324:	2025883a 	mov	r18,r4
10102328:	010f0680 	call	1010f068 <__malloc_lock>
1010232c:	98800217 	ldw	r2,8(r19)
10102330:	14400117 	ldw	r17,4(r2)
10102334:	00bfff04 	movi	r2,-4
10102338:	88a2703a 	and	r17,r17,r2
1010233c:	8c21c83a 	sub	r16,r17,r16
10102340:	8403fbc4 	addi	r16,r16,4079
10102344:	8020d33a 	srli	r16,r16,12
10102348:	0083ffc4 	movi	r2,4095
1010234c:	843fffc4 	addi	r16,r16,-1
10102350:	8020933a 	slli	r16,r16,12
10102354:	1400060e 	bge	r2,r16,10102370 <_malloc_trim_r+0x70>
10102358:	000b883a 	mov	r5,zero
1010235c:	9009883a 	mov	r4,r18
10102360:	0103c180 	call	10103c18 <_sbrk_r>
10102364:	98c00217 	ldw	r3,8(r19)
10102368:	1c47883a 	add	r3,r3,r17
1010236c:	10c00a26 	beq	r2,r3,10102398 <_malloc_trim_r+0x98>
10102370:	9009883a 	mov	r4,r18
10102374:	010f08c0 	call	1010f08c <__malloc_unlock>
10102378:	0005883a 	mov	r2,zero
1010237c:	dfc00417 	ldw	ra,16(sp)
10102380:	dcc00317 	ldw	r19,12(sp)
10102384:	dc800217 	ldw	r18,8(sp)
10102388:	dc400117 	ldw	r17,4(sp)
1010238c:	dc000017 	ldw	r16,0(sp)
10102390:	dec00504 	addi	sp,sp,20
10102394:	f800283a 	ret
10102398:	040bc83a 	sub	r5,zero,r16
1010239c:	9009883a 	mov	r4,r18
101023a0:	0103c180 	call	10103c18 <_sbrk_r>
101023a4:	00ffffc4 	movi	r3,-1
101023a8:	10c00d26 	beq	r2,r3,101023e0 <_malloc_trim_r+0xe0>
101023ac:	00c40474 	movhi	r3,4113
101023b0:	18d51604 	addi	r3,r3,21592
101023b4:	18800017 	ldw	r2,0(r3)
101023b8:	99000217 	ldw	r4,8(r19)
101023bc:	8c23c83a 	sub	r17,r17,r16
101023c0:	8c400054 	ori	r17,r17,1
101023c4:	1421c83a 	sub	r16,r2,r16
101023c8:	24400115 	stw	r17,4(r4)
101023cc:	9009883a 	mov	r4,r18
101023d0:	1c000015 	stw	r16,0(r3)
101023d4:	010f08c0 	call	1010f08c <__malloc_unlock>
101023d8:	00800044 	movi	r2,1
101023dc:	003fe706 	br	1010237c <__alt_data_end+0xfffe237c>
101023e0:	000b883a 	mov	r5,zero
101023e4:	9009883a 	mov	r4,r18
101023e8:	0103c180 	call	10103c18 <_sbrk_r>
101023ec:	99000217 	ldw	r4,8(r19)
101023f0:	014003c4 	movi	r5,15
101023f4:	1107c83a 	sub	r3,r2,r4
101023f8:	28ffdd0e 	bge	r5,r3,10102370 <__alt_data_end+0xfffe2370>
101023fc:	01440474 	movhi	r5,4113
10102400:	294e1104 	addi	r5,r5,14404
10102404:	29400017 	ldw	r5,0(r5)
10102408:	18c00054 	ori	r3,r3,1
1010240c:	20c00115 	stw	r3,4(r4)
10102410:	00c40474 	movhi	r3,4113
10102414:	1145c83a 	sub	r2,r2,r5
10102418:	18d51604 	addi	r3,r3,21592
1010241c:	18800015 	stw	r2,0(r3)
10102420:	003fd306 	br	10102370 <__alt_data_end+0xfffe2370>

10102424 <_free_r>:
10102424:	28004126 	beq	r5,zero,1010252c <_free_r+0x108>
10102428:	defffd04 	addi	sp,sp,-12
1010242c:	dc400115 	stw	r17,4(sp)
10102430:	dc000015 	stw	r16,0(sp)
10102434:	2023883a 	mov	r17,r4
10102438:	2821883a 	mov	r16,r5
1010243c:	dfc00215 	stw	ra,8(sp)
10102440:	010f0680 	call	1010f068 <__malloc_lock>
10102444:	81ffff17 	ldw	r7,-4(r16)
10102448:	00bfff84 	movi	r2,-2
1010244c:	01040474 	movhi	r4,4113
10102450:	81bffe04 	addi	r6,r16,-8
10102454:	3884703a 	and	r2,r7,r2
10102458:	21086304 	addi	r4,r4,8588
1010245c:	308b883a 	add	r5,r6,r2
10102460:	2a400117 	ldw	r9,4(r5)
10102464:	22000217 	ldw	r8,8(r4)
10102468:	00ffff04 	movi	r3,-4
1010246c:	48c6703a 	and	r3,r9,r3
10102470:	2a005726 	beq	r5,r8,101025d0 <_free_r+0x1ac>
10102474:	28c00115 	stw	r3,4(r5)
10102478:	39c0004c 	andi	r7,r7,1
1010247c:	3800091e 	bne	r7,zero,101024a4 <_free_r+0x80>
10102480:	823ffe17 	ldw	r8,-8(r16)
10102484:	22400204 	addi	r9,r4,8
10102488:	320dc83a 	sub	r6,r6,r8
1010248c:	31c00217 	ldw	r7,8(r6)
10102490:	1205883a 	add	r2,r2,r8
10102494:	3a406526 	beq	r7,r9,1010262c <_free_r+0x208>
10102498:	32000317 	ldw	r8,12(r6)
1010249c:	3a000315 	stw	r8,12(r7)
101024a0:	41c00215 	stw	r7,8(r8)
101024a4:	28cf883a 	add	r7,r5,r3
101024a8:	39c00117 	ldw	r7,4(r7)
101024ac:	39c0004c 	andi	r7,r7,1
101024b0:	38003a26 	beq	r7,zero,1010259c <_free_r+0x178>
101024b4:	10c00054 	ori	r3,r2,1
101024b8:	30c00115 	stw	r3,4(r6)
101024bc:	3087883a 	add	r3,r6,r2
101024c0:	18800015 	stw	r2,0(r3)
101024c4:	00c07fc4 	movi	r3,511
101024c8:	18801936 	bltu	r3,r2,10102530 <_free_r+0x10c>
101024cc:	1004d0fa 	srli	r2,r2,3
101024d0:	01c00044 	movi	r7,1
101024d4:	21400117 	ldw	r5,4(r4)
101024d8:	10c00044 	addi	r3,r2,1
101024dc:	18c7883a 	add	r3,r3,r3
101024e0:	1005d0ba 	srai	r2,r2,2
101024e4:	18c7883a 	add	r3,r3,r3
101024e8:	18c7883a 	add	r3,r3,r3
101024ec:	1907883a 	add	r3,r3,r4
101024f0:	3884983a 	sll	r2,r7,r2
101024f4:	19c00017 	ldw	r7,0(r3)
101024f8:	1a3ffe04 	addi	r8,r3,-8
101024fc:	1144b03a 	or	r2,r2,r5
10102500:	32000315 	stw	r8,12(r6)
10102504:	31c00215 	stw	r7,8(r6)
10102508:	20800115 	stw	r2,4(r4)
1010250c:	19800015 	stw	r6,0(r3)
10102510:	39800315 	stw	r6,12(r7)
10102514:	8809883a 	mov	r4,r17
10102518:	dfc00217 	ldw	ra,8(sp)
1010251c:	dc400117 	ldw	r17,4(sp)
10102520:	dc000017 	ldw	r16,0(sp)
10102524:	dec00304 	addi	sp,sp,12
10102528:	010f08c1 	jmpi	1010f08c <__malloc_unlock>
1010252c:	f800283a 	ret
10102530:	100ad27a 	srli	r5,r2,9
10102534:	00c00104 	movi	r3,4
10102538:	19404a36 	bltu	r3,r5,10102664 <_free_r+0x240>
1010253c:	100ad1ba 	srli	r5,r2,6
10102540:	28c00e44 	addi	r3,r5,57
10102544:	18c7883a 	add	r3,r3,r3
10102548:	29400e04 	addi	r5,r5,56
1010254c:	18c7883a 	add	r3,r3,r3
10102550:	18c7883a 	add	r3,r3,r3
10102554:	1909883a 	add	r4,r3,r4
10102558:	20c00017 	ldw	r3,0(r4)
1010255c:	01c40474 	movhi	r7,4113
10102560:	213ffe04 	addi	r4,r4,-8
10102564:	39c86304 	addi	r7,r7,8588
10102568:	20c04426 	beq	r4,r3,1010267c <_free_r+0x258>
1010256c:	01ffff04 	movi	r7,-4
10102570:	19400117 	ldw	r5,4(r3)
10102574:	29ca703a 	and	r5,r5,r7
10102578:	1140022e 	bgeu	r2,r5,10102584 <_free_r+0x160>
1010257c:	18c00217 	ldw	r3,8(r3)
10102580:	20fffb1e 	bne	r4,r3,10102570 <__alt_data_end+0xfffe2570>
10102584:	19000317 	ldw	r4,12(r3)
10102588:	31000315 	stw	r4,12(r6)
1010258c:	30c00215 	stw	r3,8(r6)
10102590:	21800215 	stw	r6,8(r4)
10102594:	19800315 	stw	r6,12(r3)
10102598:	003fde06 	br	10102514 <__alt_data_end+0xfffe2514>
1010259c:	29c00217 	ldw	r7,8(r5)
101025a0:	10c5883a 	add	r2,r2,r3
101025a4:	00c40474 	movhi	r3,4113
101025a8:	18c86504 	addi	r3,r3,8596
101025ac:	38c03b26 	beq	r7,r3,1010269c <_free_r+0x278>
101025b0:	2a000317 	ldw	r8,12(r5)
101025b4:	11400054 	ori	r5,r2,1
101025b8:	3087883a 	add	r3,r6,r2
101025bc:	3a000315 	stw	r8,12(r7)
101025c0:	41c00215 	stw	r7,8(r8)
101025c4:	31400115 	stw	r5,4(r6)
101025c8:	18800015 	stw	r2,0(r3)
101025cc:	003fbd06 	br	101024c4 <__alt_data_end+0xfffe24c4>
101025d0:	39c0004c 	andi	r7,r7,1
101025d4:	10c5883a 	add	r2,r2,r3
101025d8:	3800071e 	bne	r7,zero,101025f8 <_free_r+0x1d4>
101025dc:	81fffe17 	ldw	r7,-8(r16)
101025e0:	31cdc83a 	sub	r6,r6,r7
101025e4:	30c00317 	ldw	r3,12(r6)
101025e8:	31400217 	ldw	r5,8(r6)
101025ec:	11c5883a 	add	r2,r2,r7
101025f0:	28c00315 	stw	r3,12(r5)
101025f4:	19400215 	stw	r5,8(r3)
101025f8:	10c00054 	ori	r3,r2,1
101025fc:	30c00115 	stw	r3,4(r6)
10102600:	00c40474 	movhi	r3,4113
10102604:	18ce1204 	addi	r3,r3,14408
10102608:	18c00017 	ldw	r3,0(r3)
1010260c:	21800215 	stw	r6,8(r4)
10102610:	10ffc036 	bltu	r2,r3,10102514 <__alt_data_end+0xfffe2514>
10102614:	00840474 	movhi	r2,4113
10102618:	10950b04 	addi	r2,r2,21548
1010261c:	11400017 	ldw	r5,0(r2)
10102620:	8809883a 	mov	r4,r17
10102624:	01023000 	call	10102300 <_malloc_trim_r>
10102628:	003fba06 	br	10102514 <__alt_data_end+0xfffe2514>
1010262c:	28c9883a 	add	r4,r5,r3
10102630:	21000117 	ldw	r4,4(r4)
10102634:	2100004c 	andi	r4,r4,1
10102638:	2000391e 	bne	r4,zero,10102720 <_free_r+0x2fc>
1010263c:	29c00217 	ldw	r7,8(r5)
10102640:	29000317 	ldw	r4,12(r5)
10102644:	1885883a 	add	r2,r3,r2
10102648:	10c00054 	ori	r3,r2,1
1010264c:	39000315 	stw	r4,12(r7)
10102650:	21c00215 	stw	r7,8(r4)
10102654:	30c00115 	stw	r3,4(r6)
10102658:	308d883a 	add	r6,r6,r2
1010265c:	30800015 	stw	r2,0(r6)
10102660:	003fac06 	br	10102514 <__alt_data_end+0xfffe2514>
10102664:	00c00504 	movi	r3,20
10102668:	19401536 	bltu	r3,r5,101026c0 <_free_r+0x29c>
1010266c:	28c01704 	addi	r3,r5,92
10102670:	18c7883a 	add	r3,r3,r3
10102674:	294016c4 	addi	r5,r5,91
10102678:	003fb406 	br	1010254c <__alt_data_end+0xfffe254c>
1010267c:	280bd0ba 	srai	r5,r5,2
10102680:	00c00044 	movi	r3,1
10102684:	38800117 	ldw	r2,4(r7)
10102688:	194a983a 	sll	r5,r3,r5
1010268c:	2007883a 	mov	r3,r4
10102690:	2884b03a 	or	r2,r5,r2
10102694:	38800115 	stw	r2,4(r7)
10102698:	003fbb06 	br	10102588 <__alt_data_end+0xfffe2588>
1010269c:	21800515 	stw	r6,20(r4)
101026a0:	21800415 	stw	r6,16(r4)
101026a4:	10c00054 	ori	r3,r2,1
101026a8:	31c00315 	stw	r7,12(r6)
101026ac:	31c00215 	stw	r7,8(r6)
101026b0:	30c00115 	stw	r3,4(r6)
101026b4:	308d883a 	add	r6,r6,r2
101026b8:	30800015 	stw	r2,0(r6)
101026bc:	003f9506 	br	10102514 <__alt_data_end+0xfffe2514>
101026c0:	00c01504 	movi	r3,84
101026c4:	19400536 	bltu	r3,r5,101026dc <_free_r+0x2b8>
101026c8:	100ad33a 	srli	r5,r2,12
101026cc:	28c01bc4 	addi	r3,r5,111
101026d0:	18c7883a 	add	r3,r3,r3
101026d4:	29401b84 	addi	r5,r5,110
101026d8:	003f9c06 	br	1010254c <__alt_data_end+0xfffe254c>
101026dc:	00c05504 	movi	r3,340
101026e0:	19400536 	bltu	r3,r5,101026f8 <_free_r+0x2d4>
101026e4:	100ad3fa 	srli	r5,r2,15
101026e8:	28c01e04 	addi	r3,r5,120
101026ec:	18c7883a 	add	r3,r3,r3
101026f0:	29401dc4 	addi	r5,r5,119
101026f4:	003f9506 	br	1010254c <__alt_data_end+0xfffe254c>
101026f8:	00c15504 	movi	r3,1364
101026fc:	19400536 	bltu	r3,r5,10102714 <_free_r+0x2f0>
10102700:	100ad4ba 	srli	r5,r2,18
10102704:	28c01f44 	addi	r3,r5,125
10102708:	18c7883a 	add	r3,r3,r3
1010270c:	29401f04 	addi	r5,r5,124
10102710:	003f8e06 	br	1010254c <__alt_data_end+0xfffe254c>
10102714:	00c03f84 	movi	r3,254
10102718:	01401f84 	movi	r5,126
1010271c:	003f8b06 	br	1010254c <__alt_data_end+0xfffe254c>
10102720:	10c00054 	ori	r3,r2,1
10102724:	30c00115 	stw	r3,4(r6)
10102728:	308d883a 	add	r6,r6,r2
1010272c:	30800015 	stw	r2,0(r6)
10102730:	003f7806 	br	10102514 <__alt_data_end+0xfffe2514>

10102734 <_fseek_r>:
10102734:	01027541 	jmpi	10102754 <_fseeko_r>

10102738 <fseek>:
10102738:	00840474 	movhi	r2,4113
1010273c:	108e1004 	addi	r2,r2,14400
10102740:	300f883a 	mov	r7,r6
10102744:	280d883a 	mov	r6,r5
10102748:	200b883a 	mov	r5,r4
1010274c:	11000017 	ldw	r4,0(r2)
10102750:	01027541 	jmpi	10102754 <_fseeko_r>

10102754 <_fseeko_r>:
10102754:	deffe804 	addi	sp,sp,-96
10102758:	dd401415 	stw	r21,80(sp)
1010275c:	dc801115 	stw	r18,68(sp)
10102760:	dc401015 	stw	r17,64(sp)
10102764:	dc000f15 	stw	r16,60(sp)
10102768:	dfc01715 	stw	ra,92(sp)
1010276c:	ddc01615 	stw	r23,88(sp)
10102770:	dd801515 	stw	r22,84(sp)
10102774:	dd001315 	stw	r20,76(sp)
10102778:	dcc01215 	stw	r19,72(sp)
1010277c:	2023883a 	mov	r17,r4
10102780:	2821883a 	mov	r16,r5
10102784:	302b883a 	mov	r21,r6
10102788:	3825883a 	mov	r18,r7
1010278c:	20000226 	beq	r4,zero,10102798 <_fseeko_r+0x44>
10102790:	20800e17 	ldw	r2,56(r4)
10102794:	10005a26 	beq	r2,zero,10102900 <_fseeko_r+0x1ac>
10102798:	8080030b 	ldhu	r2,12(r16)
1010279c:	00c04204 	movi	r3,264
101027a0:	1080420c 	andi	r2,r2,264
101027a4:	10c05b26 	beq	r2,r3,10102914 <_fseeko_r+0x1c0>
101027a8:	85000a17 	ldw	r20,40(r16)
101027ac:	a000f626 	beq	r20,zero,10102b88 <_fseeko_r+0x434>
101027b0:	00800044 	movi	r2,1
101027b4:	90803e26 	beq	r18,r2,101028b0 <_fseeko_r+0x15c>
101027b8:	00800084 	movi	r2,2
101027bc:	90801026 	beq	r18,r2,10102800 <_fseeko_r+0xac>
101027c0:	90000f26 	beq	r18,zero,10102800 <_fseeko_r+0xac>
101027c4:	00800584 	movi	r2,22
101027c8:	88800015 	stw	r2,0(r17)
101027cc:	04ffffc4 	movi	r19,-1
101027d0:	9805883a 	mov	r2,r19
101027d4:	dfc01717 	ldw	ra,92(sp)
101027d8:	ddc01617 	ldw	r23,88(sp)
101027dc:	dd801517 	ldw	r22,84(sp)
101027e0:	dd401417 	ldw	r21,80(sp)
101027e4:	dd001317 	ldw	r20,76(sp)
101027e8:	dcc01217 	ldw	r19,72(sp)
101027ec:	dc801117 	ldw	r18,68(sp)
101027f0:	dc401017 	ldw	r17,64(sp)
101027f4:	dc000f17 	ldw	r16,60(sp)
101027f8:	dec01804 	addi	sp,sp,96
101027fc:	f800283a 	ret
10102800:	80800417 	ldw	r2,16(r16)
10102804:	002f883a 	mov	r23,zero
10102808:	0027883a 	mov	r19,zero
1010280c:	1000cb26 	beq	r2,zero,10102b3c <_fseeko_r+0x3e8>
10102810:	8080030b 	ldhu	r2,12(r16)
10102814:	10c2068c 	andi	r3,r2,2074
10102818:	1800071e 	bne	r3,zero,10102838 <_fseeko_r+0xe4>
1010281c:	10c1000c 	andi	r3,r2,1024
10102820:	1800451e 	bne	r3,zero,10102938 <_fseeko_r+0x1e4>
10102824:	00c40434 	movhi	r3,4112
10102828:	18cf5104 	addi	r3,r3,15684
1010282c:	a0c0b726 	beq	r20,r3,10102b0c <_fseeko_r+0x3b8>
10102830:	10820014 	ori	r2,r2,2048
10102834:	8080030d 	sth	r2,12(r16)
10102838:	800b883a 	mov	r5,r16
1010283c:	8809883a 	mov	r4,r17
10102840:	0101d7c0 	call	10101d7c <_fflush_r>
10102844:	1027883a 	mov	r19,r2
10102848:	103fe01e 	bne	r2,zero,101027cc <__alt_data_end+0xfffe27cc>
1010284c:	81400717 	ldw	r5,28(r16)
10102850:	900f883a 	mov	r7,r18
10102854:	a80d883a 	mov	r6,r21
10102858:	8809883a 	mov	r4,r17
1010285c:	a03ee83a 	callr	r20
10102860:	00ffffc4 	movi	r3,-1
10102864:	10ffd926 	beq	r2,r3,101027cc <__alt_data_end+0xfffe27cc>
10102868:	81400c17 	ldw	r5,48(r16)
1010286c:	28000526 	beq	r5,zero,10102884 <_fseeko_r+0x130>
10102870:	80801004 	addi	r2,r16,64
10102874:	28800226 	beq	r5,r2,10102880 <_fseeko_r+0x12c>
10102878:	8809883a 	mov	r4,r17
1010287c:	01024240 	call	10102424 <_free_r>
10102880:	80000c15 	stw	zero,48(r16)
10102884:	8080030b 	ldhu	r2,12(r16)
10102888:	80c00417 	ldw	r3,16(r16)
1010288c:	80000115 	stw	zero,4(r16)
10102890:	10bdf7cc 	andi	r2,r2,63455
10102894:	80c00015 	stw	r3,0(r16)
10102898:	8080030d 	sth	r2,12(r16)
1010289c:	01800204 	movi	r6,8
101028a0:	000b883a 	mov	r5,zero
101028a4:	81001704 	addi	r4,r16,92
101028a8:	01037600 	call	10103760 <memset>
101028ac:	003fc806 	br	101027d0 <__alt_data_end+0xfffe27d0>
101028b0:	800b883a 	mov	r5,r16
101028b4:	8809883a 	mov	r4,r17
101028b8:	0101d7c0 	call	10101d7c <_fflush_r>
101028bc:	8080030b 	ldhu	r2,12(r16)
101028c0:	10c4000c 	andi	r3,r2,4096
101028c4:	18008726 	beq	r3,zero,10102ae4 <_fseeko_r+0x390>
101028c8:	84c01417 	ldw	r19,80(r16)
101028cc:	10c0010c 	andi	r3,r2,4
101028d0:	1800431e 	bne	r3,zero,101029e0 <_fseeko_r+0x28c>
101028d4:	1080020c 	andi	r2,r2,8
101028d8:	10008026 	beq	r2,zero,10102adc <_fseeko_r+0x388>
101028dc:	80c00017 	ldw	r3,0(r16)
101028e0:	80800417 	ldw	r2,16(r16)
101028e4:	18000226 	beq	r3,zero,101028f0 <_fseeko_r+0x19c>
101028e8:	1887c83a 	sub	r3,r3,r2
101028ec:	98e7883a 	add	r19,r19,r3
101028f0:	aceb883a 	add	r21,r21,r19
101028f4:	05c00044 	movi	r23,1
101028f8:	0025883a 	mov	r18,zero
101028fc:	003fc306 	br	1010280c <__alt_data_end+0xfffe280c>
10102900:	01021580 	call	10102158 <__sinit>
10102904:	8080030b 	ldhu	r2,12(r16)
10102908:	00c04204 	movi	r3,264
1010290c:	1080420c 	andi	r2,r2,264
10102910:	10ffa51e 	bne	r2,r3,101027a8 <__alt_data_end+0xfffe27a8>
10102914:	800b883a 	mov	r5,r16
10102918:	8809883a 	mov	r4,r17
1010291c:	0101d7c0 	call	10101d7c <_fflush_r>
10102920:	003fa106 	br	101027a8 <__alt_data_end+0xfffe27a8>
10102924:	8080030b 	ldhu	r2,12(r16)
10102928:	00c10004 	movi	r3,1024
1010292c:	80c01315 	stw	r3,76(r16)
10102930:	10c4b03a 	or	r2,r2,r3
10102934:	8080030d 	sth	r2,12(r16)
10102938:	9000311e 	bne	r18,zero,10102a00 <_fseeko_r+0x2ac>
1010293c:	a82d883a 	mov	r22,r21
10102940:	b800371e 	bne	r23,zero,10102a20 <_fseeko_r+0x2cc>
10102944:	8080030b 	ldhu	r2,12(r16)
10102948:	1084000c 	andi	r2,r2,4096
1010294c:	10007f26 	beq	r2,zero,10102b4c <_fseeko_r+0x3f8>
10102950:	80801417 	ldw	r2,80(r16)
10102954:	81800117 	ldw	r6,4(r16)
10102958:	81400c17 	ldw	r5,48(r16)
1010295c:	11a7c83a 	sub	r19,r2,r6
10102960:	28008226 	beq	r5,zero,10102b6c <_fseeko_r+0x418>
10102964:	81c00f17 	ldw	r7,60(r16)
10102968:	99e7c83a 	sub	r19,r19,r7
1010296c:	81000e17 	ldw	r4,56(r16)
10102970:	80800417 	ldw	r2,16(r16)
10102974:	99a7883a 	add	r19,r19,r6
10102978:	2087c83a 	sub	r3,r4,r2
1010297c:	98e7c83a 	sub	r19,r19,r3
10102980:	38c7883a 	add	r3,r7,r3
10102984:	b4c02b16 	blt	r22,r19,10102a34 <_fseeko_r+0x2e0>
10102988:	98c9883a 	add	r4,r19,r3
1010298c:	b100292e 	bgeu	r22,r4,10102a34 <_fseeko_r+0x2e0>
10102990:	b4e7c83a 	sub	r19,r22,r19
10102994:	14c5883a 	add	r2,r2,r19
10102998:	1ce7c83a 	sub	r19,r3,r19
1010299c:	80800015 	stw	r2,0(r16)
101029a0:	84c00115 	stw	r19,4(r16)
101029a4:	28000526 	beq	r5,zero,101029bc <_fseeko_r+0x268>
101029a8:	80801004 	addi	r2,r16,64
101029ac:	28800226 	beq	r5,r2,101029b8 <_fseeko_r+0x264>
101029b0:	8809883a 	mov	r4,r17
101029b4:	01024240 	call	10102424 <_free_r>
101029b8:	80000c15 	stw	zero,48(r16)
101029bc:	8080030b 	ldhu	r2,12(r16)
101029c0:	01800204 	movi	r6,8
101029c4:	000b883a 	mov	r5,zero
101029c8:	10bff7cc 	andi	r2,r2,65503
101029cc:	8080030d 	sth	r2,12(r16)
101029d0:	81001704 	addi	r4,r16,92
101029d4:	01037600 	call	10103760 <memset>
101029d8:	0027883a 	mov	r19,zero
101029dc:	003f7c06 	br	101027d0 <__alt_data_end+0xfffe27d0>
101029e0:	80c00117 	ldw	r3,4(r16)
101029e4:	80800c17 	ldw	r2,48(r16)
101029e8:	98e7c83a 	sub	r19,r19,r3
101029ec:	10003b26 	beq	r2,zero,10102adc <_fseeko_r+0x388>
101029f0:	80c00f17 	ldw	r3,60(r16)
101029f4:	80800417 	ldw	r2,16(r16)
101029f8:	98e7c83a 	sub	r19,r19,r3
101029fc:	003fbc06 	br	101028f0 <__alt_data_end+0xfffe28f0>
10102a00:	8140038f 	ldh	r5,14(r16)
10102a04:	d80d883a 	mov	r6,sp
10102a08:	8809883a 	mov	r4,r17
10102a0c:	0102bb40 	call	10102bb4 <_fstat_r>
10102a10:	103f891e 	bne	r2,zero,10102838 <__alt_data_end+0xfffe2838>
10102a14:	dd800417 	ldw	r22,16(sp)
10102a18:	adad883a 	add	r22,r21,r22
10102a1c:	b83fc926 	beq	r23,zero,10102944 <__alt_data_end+0xfffe2944>
10102a20:	81400c17 	ldw	r5,48(r16)
10102a24:	81800117 	ldw	r6,4(r16)
10102a28:	28005026 	beq	r5,zero,10102b6c <_fseeko_r+0x418>
10102a2c:	81c00f17 	ldw	r7,60(r16)
10102a30:	003fce06 	br	1010296c <__alt_data_end+0xfffe296c>
10102a34:	84c01317 	ldw	r19,76(r16)
10102a38:	81400717 	ldw	r5,28(r16)
10102a3c:	000f883a 	mov	r7,zero
10102a40:	04e7c83a 	sub	r19,zero,r19
10102a44:	9da6703a 	and	r19,r19,r22
10102a48:	980d883a 	mov	r6,r19
10102a4c:	8809883a 	mov	r4,r17
10102a50:	a03ee83a 	callr	r20
10102a54:	00ffffc4 	movi	r3,-1
10102a58:	10ff7726 	beq	r2,r3,10102838 <__alt_data_end+0xfffe2838>
10102a5c:	80800417 	ldw	r2,16(r16)
10102a60:	81400c17 	ldw	r5,48(r16)
10102a64:	80000115 	stw	zero,4(r16)
10102a68:	80800015 	stw	r2,0(r16)
10102a6c:	28000526 	beq	r5,zero,10102a84 <_fseeko_r+0x330>
10102a70:	80801004 	addi	r2,r16,64
10102a74:	28800226 	beq	r5,r2,10102a80 <_fseeko_r+0x32c>
10102a78:	8809883a 	mov	r4,r17
10102a7c:	01024240 	call	10102424 <_free_r>
10102a80:	80000c15 	stw	zero,48(r16)
10102a84:	8080030b 	ldhu	r2,12(r16)
10102a88:	b4e7c83a 	sub	r19,r22,r19
10102a8c:	10bff7cc 	andi	r2,r2,65503
10102a90:	8080030d 	sth	r2,12(r16)
10102a94:	98000b26 	beq	r19,zero,10102ac4 <_fseeko_r+0x370>
10102a98:	800b883a 	mov	r5,r16
10102a9c:	8809883a 	mov	r4,r17
10102aa0:	0103a440 	call	10103a44 <__srefill_r>
10102aa4:	103f641e 	bne	r2,zero,10102838 <__alt_data_end+0xfffe2838>
10102aa8:	80800117 	ldw	r2,4(r16)
10102aac:	14ff6236 	bltu	r2,r19,10102838 <__alt_data_end+0xfffe2838>
10102ab0:	80c00017 	ldw	r3,0(r16)
10102ab4:	14c5c83a 	sub	r2,r2,r19
10102ab8:	80800115 	stw	r2,4(r16)
10102abc:	1ce7883a 	add	r19,r3,r19
10102ac0:	84c00015 	stw	r19,0(r16)
10102ac4:	01800204 	movi	r6,8
10102ac8:	000b883a 	mov	r5,zero
10102acc:	81001704 	addi	r4,r16,92
10102ad0:	01037600 	call	10103760 <memset>
10102ad4:	0027883a 	mov	r19,zero
10102ad8:	003f3d06 	br	101027d0 <__alt_data_end+0xfffe27d0>
10102adc:	80800417 	ldw	r2,16(r16)
10102ae0:	003f8306 	br	101028f0 <__alt_data_end+0xfffe28f0>
10102ae4:	81400717 	ldw	r5,28(r16)
10102ae8:	900f883a 	mov	r7,r18
10102aec:	000d883a 	mov	r6,zero
10102af0:	8809883a 	mov	r4,r17
10102af4:	a03ee83a 	callr	r20
10102af8:	1027883a 	mov	r19,r2
10102afc:	00bfffc4 	movi	r2,-1
10102b00:	98bf3226 	beq	r19,r2,101027cc <__alt_data_end+0xfffe27cc>
10102b04:	8080030b 	ldhu	r2,12(r16)
10102b08:	003f7006 	br	101028cc <__alt_data_end+0xfffe28cc>
10102b0c:	8140038f 	ldh	r5,14(r16)
10102b10:	283f4716 	blt	r5,zero,10102830 <__alt_data_end+0xfffe2830>
10102b14:	d80d883a 	mov	r6,sp
10102b18:	8809883a 	mov	r4,r17
10102b1c:	0102bb40 	call	10102bb4 <_fstat_r>
10102b20:	1000041e 	bne	r2,zero,10102b34 <_fseeko_r+0x3e0>
10102b24:	d8800117 	ldw	r2,4(sp)
10102b28:	00e00014 	movui	r3,32768
10102b2c:	10bc000c 	andi	r2,r2,61440
10102b30:	10ff7c26 	beq	r2,r3,10102924 <__alt_data_end+0xfffe2924>
10102b34:	8080030b 	ldhu	r2,12(r16)
10102b38:	003f3d06 	br	10102830 <__alt_data_end+0xfffe2830>
10102b3c:	800b883a 	mov	r5,r16
10102b40:	8809883a 	mov	r4,r17
10102b44:	0102d980 	call	10102d98 <__smakebuf_r>
10102b48:	003f3106 	br	10102810 <__alt_data_end+0xfffe2810>
10102b4c:	81400717 	ldw	r5,28(r16)
10102b50:	01c00044 	movi	r7,1
10102b54:	000d883a 	mov	r6,zero
10102b58:	8809883a 	mov	r4,r17
10102b5c:	a03ee83a 	callr	r20
10102b60:	00ffffc4 	movi	r3,-1
10102b64:	10ff7b1e 	bne	r2,r3,10102954 <__alt_data_end+0xfffe2954>
10102b68:	003f3306 	br	10102838 <__alt_data_end+0xfffe2838>
10102b6c:	80c00017 	ldw	r3,0(r16)
10102b70:	80800417 	ldw	r2,16(r16)
10102b74:	000b883a 	mov	r5,zero
10102b78:	1887c83a 	sub	r3,r3,r2
10102b7c:	98e7c83a 	sub	r19,r19,r3
10102b80:	30c7883a 	add	r3,r6,r3
10102b84:	003f7f06 	br	10102984 <__alt_data_end+0xfffe2984>
10102b88:	00800744 	movi	r2,29
10102b8c:	88800015 	stw	r2,0(r17)
10102b90:	04ffffc4 	movi	r19,-1
10102b94:	003f0e06 	br	101027d0 <__alt_data_end+0xfffe27d0>

10102b98 <fseeko>:
10102b98:	00840474 	movhi	r2,4113
10102b9c:	108e1004 	addi	r2,r2,14400
10102ba0:	300f883a 	mov	r7,r6
10102ba4:	280d883a 	mov	r6,r5
10102ba8:	200b883a 	mov	r5,r4
10102bac:	11000017 	ldw	r4,0(r2)
10102bb0:	01027541 	jmpi	10102754 <_fseeko_r>

10102bb4 <_fstat_r>:
10102bb4:	defffd04 	addi	sp,sp,-12
10102bb8:	2805883a 	mov	r2,r5
10102bbc:	dc000015 	stw	r16,0(sp)
10102bc0:	04040474 	movhi	r16,4113
10102bc4:	dc400115 	stw	r17,4(sp)
10102bc8:	84150804 	addi	r16,r16,21536
10102bcc:	2023883a 	mov	r17,r4
10102bd0:	300b883a 	mov	r5,r6
10102bd4:	1009883a 	mov	r4,r2
10102bd8:	dfc00215 	stw	ra,8(sp)
10102bdc:	80000015 	stw	zero,0(r16)
10102be0:	010ec380 	call	1010ec38 <fstat>
10102be4:	00ffffc4 	movi	r3,-1
10102be8:	10c00526 	beq	r2,r3,10102c00 <_fstat_r+0x4c>
10102bec:	dfc00217 	ldw	ra,8(sp)
10102bf0:	dc400117 	ldw	r17,4(sp)
10102bf4:	dc000017 	ldw	r16,0(sp)
10102bf8:	dec00304 	addi	sp,sp,12
10102bfc:	f800283a 	ret
10102c00:	80c00017 	ldw	r3,0(r16)
10102c04:	183ff926 	beq	r3,zero,10102bec <__alt_data_end+0xfffe2bec>
10102c08:	88c00015 	stw	r3,0(r17)
10102c0c:	003ff706 	br	10102bec <__alt_data_end+0xfffe2bec>

10102c10 <_fwalk>:
10102c10:	defff704 	addi	sp,sp,-36
10102c14:	dd000415 	stw	r20,16(sp)
10102c18:	dfc00815 	stw	ra,32(sp)
10102c1c:	ddc00715 	stw	r23,28(sp)
10102c20:	dd800615 	stw	r22,24(sp)
10102c24:	dd400515 	stw	r21,20(sp)
10102c28:	dcc00315 	stw	r19,12(sp)
10102c2c:	dc800215 	stw	r18,8(sp)
10102c30:	dc400115 	stw	r17,4(sp)
10102c34:	dc000015 	stw	r16,0(sp)
10102c38:	2500b804 	addi	r20,r4,736
10102c3c:	a0002326 	beq	r20,zero,10102ccc <_fwalk+0xbc>
10102c40:	282b883a 	mov	r21,r5
10102c44:	002f883a 	mov	r23,zero
10102c48:	05800044 	movi	r22,1
10102c4c:	04ffffc4 	movi	r19,-1
10102c50:	a4400117 	ldw	r17,4(r20)
10102c54:	a4800217 	ldw	r18,8(r20)
10102c58:	8c7fffc4 	addi	r17,r17,-1
10102c5c:	88000d16 	blt	r17,zero,10102c94 <_fwalk+0x84>
10102c60:	94000304 	addi	r16,r18,12
10102c64:	94800384 	addi	r18,r18,14
10102c68:	8080000b 	ldhu	r2,0(r16)
10102c6c:	8c7fffc4 	addi	r17,r17,-1
10102c70:	813ffd04 	addi	r4,r16,-12
10102c74:	b080042e 	bgeu	r22,r2,10102c88 <_fwalk+0x78>
10102c78:	9080000f 	ldh	r2,0(r18)
10102c7c:	14c00226 	beq	r2,r19,10102c88 <_fwalk+0x78>
10102c80:	a83ee83a 	callr	r21
10102c84:	b8aeb03a 	or	r23,r23,r2
10102c88:	84001a04 	addi	r16,r16,104
10102c8c:	94801a04 	addi	r18,r18,104
10102c90:	8cfff51e 	bne	r17,r19,10102c68 <__alt_data_end+0xfffe2c68>
10102c94:	a5000017 	ldw	r20,0(r20)
10102c98:	a03fed1e 	bne	r20,zero,10102c50 <__alt_data_end+0xfffe2c50>
10102c9c:	b805883a 	mov	r2,r23
10102ca0:	dfc00817 	ldw	ra,32(sp)
10102ca4:	ddc00717 	ldw	r23,28(sp)
10102ca8:	dd800617 	ldw	r22,24(sp)
10102cac:	dd400517 	ldw	r21,20(sp)
10102cb0:	dd000417 	ldw	r20,16(sp)
10102cb4:	dcc00317 	ldw	r19,12(sp)
10102cb8:	dc800217 	ldw	r18,8(sp)
10102cbc:	dc400117 	ldw	r17,4(sp)
10102cc0:	dc000017 	ldw	r16,0(sp)
10102cc4:	dec00904 	addi	sp,sp,36
10102cc8:	f800283a 	ret
10102ccc:	002f883a 	mov	r23,zero
10102cd0:	003ff206 	br	10102c9c <__alt_data_end+0xfffe2c9c>

10102cd4 <_fwalk_reent>:
10102cd4:	defff704 	addi	sp,sp,-36
10102cd8:	dd000415 	stw	r20,16(sp)
10102cdc:	dfc00815 	stw	ra,32(sp)
10102ce0:	ddc00715 	stw	r23,28(sp)
10102ce4:	dd800615 	stw	r22,24(sp)
10102ce8:	dd400515 	stw	r21,20(sp)
10102cec:	dcc00315 	stw	r19,12(sp)
10102cf0:	dc800215 	stw	r18,8(sp)
10102cf4:	dc400115 	stw	r17,4(sp)
10102cf8:	dc000015 	stw	r16,0(sp)
10102cfc:	2500b804 	addi	r20,r4,736
10102d00:	a0002326 	beq	r20,zero,10102d90 <_fwalk_reent+0xbc>
10102d04:	282b883a 	mov	r21,r5
10102d08:	2027883a 	mov	r19,r4
10102d0c:	002f883a 	mov	r23,zero
10102d10:	05800044 	movi	r22,1
10102d14:	04bfffc4 	movi	r18,-1
10102d18:	a4400117 	ldw	r17,4(r20)
10102d1c:	a4000217 	ldw	r16,8(r20)
10102d20:	8c7fffc4 	addi	r17,r17,-1
10102d24:	88000c16 	blt	r17,zero,10102d58 <_fwalk_reent+0x84>
10102d28:	84000304 	addi	r16,r16,12
10102d2c:	8080000b 	ldhu	r2,0(r16)
10102d30:	8c7fffc4 	addi	r17,r17,-1
10102d34:	817ffd04 	addi	r5,r16,-12
10102d38:	b080052e 	bgeu	r22,r2,10102d50 <_fwalk_reent+0x7c>
10102d3c:	8080008f 	ldh	r2,2(r16)
10102d40:	9809883a 	mov	r4,r19
10102d44:	14800226 	beq	r2,r18,10102d50 <_fwalk_reent+0x7c>
10102d48:	a83ee83a 	callr	r21
10102d4c:	b8aeb03a 	or	r23,r23,r2
10102d50:	84001a04 	addi	r16,r16,104
10102d54:	8cbff51e 	bne	r17,r18,10102d2c <__alt_data_end+0xfffe2d2c>
10102d58:	a5000017 	ldw	r20,0(r20)
10102d5c:	a03fee1e 	bne	r20,zero,10102d18 <__alt_data_end+0xfffe2d18>
10102d60:	b805883a 	mov	r2,r23
10102d64:	dfc00817 	ldw	ra,32(sp)
10102d68:	ddc00717 	ldw	r23,28(sp)
10102d6c:	dd800617 	ldw	r22,24(sp)
10102d70:	dd400517 	ldw	r21,20(sp)
10102d74:	dd000417 	ldw	r20,16(sp)
10102d78:	dcc00317 	ldw	r19,12(sp)
10102d7c:	dc800217 	ldw	r18,8(sp)
10102d80:	dc400117 	ldw	r17,4(sp)
10102d84:	dc000017 	ldw	r16,0(sp)
10102d88:	dec00904 	addi	sp,sp,36
10102d8c:	f800283a 	ret
10102d90:	002f883a 	mov	r23,zero
10102d94:	003ff206 	br	10102d60 <__alt_data_end+0xfffe2d60>

10102d98 <__smakebuf_r>:
10102d98:	2880030b 	ldhu	r2,12(r5)
10102d9c:	10c0008c 	andi	r3,r2,2
10102da0:	1800411e 	bne	r3,zero,10102ea8 <__smakebuf_r+0x110>
10102da4:	deffec04 	addi	sp,sp,-80
10102da8:	dc000f15 	stw	r16,60(sp)
10102dac:	2821883a 	mov	r16,r5
10102db0:	2940038f 	ldh	r5,14(r5)
10102db4:	dc401015 	stw	r17,64(sp)
10102db8:	dfc01315 	stw	ra,76(sp)
10102dbc:	dcc01215 	stw	r19,72(sp)
10102dc0:	dc801115 	stw	r18,68(sp)
10102dc4:	2023883a 	mov	r17,r4
10102dc8:	28001c16 	blt	r5,zero,10102e3c <__smakebuf_r+0xa4>
10102dcc:	d80d883a 	mov	r6,sp
10102dd0:	0102bb40 	call	10102bb4 <_fstat_r>
10102dd4:	10001816 	blt	r2,zero,10102e38 <__smakebuf_r+0xa0>
10102dd8:	d8800117 	ldw	r2,4(sp)
10102ddc:	00e00014 	movui	r3,32768
10102de0:	10bc000c 	andi	r2,r2,61440
10102de4:	14c80020 	cmpeqi	r19,r2,8192
10102de8:	10c03726 	beq	r2,r3,10102ec8 <__smakebuf_r+0x130>
10102dec:	80c0030b 	ldhu	r3,12(r16)
10102df0:	18c20014 	ori	r3,r3,2048
10102df4:	80c0030d 	sth	r3,12(r16)
10102df8:	00c80004 	movi	r3,8192
10102dfc:	10c0521e 	bne	r2,r3,10102f48 <__smakebuf_r+0x1b0>
10102e00:	8140038f 	ldh	r5,14(r16)
10102e04:	8809883a 	mov	r4,r17
10102e08:	01081080 	call	10108108 <_isatty_r>
10102e0c:	10004c26 	beq	r2,zero,10102f40 <__smakebuf_r+0x1a8>
10102e10:	8080030b 	ldhu	r2,12(r16)
10102e14:	80c010c4 	addi	r3,r16,67
10102e18:	80c00015 	stw	r3,0(r16)
10102e1c:	10800054 	ori	r2,r2,1
10102e20:	8080030d 	sth	r2,12(r16)
10102e24:	00800044 	movi	r2,1
10102e28:	80c00415 	stw	r3,16(r16)
10102e2c:	80800515 	stw	r2,20(r16)
10102e30:	04810004 	movi	r18,1024
10102e34:	00000706 	br	10102e54 <__smakebuf_r+0xbc>
10102e38:	8080030b 	ldhu	r2,12(r16)
10102e3c:	10c0200c 	andi	r3,r2,128
10102e40:	18001f1e 	bne	r3,zero,10102ec0 <__smakebuf_r+0x128>
10102e44:	04810004 	movi	r18,1024
10102e48:	10820014 	ori	r2,r2,2048
10102e4c:	8080030d 	sth	r2,12(r16)
10102e50:	0027883a 	mov	r19,zero
10102e54:	900b883a 	mov	r5,r18
10102e58:	8809883a 	mov	r4,r17
10102e5c:	0102f540 	call	10102f54 <_malloc_r>
10102e60:	10002c26 	beq	r2,zero,10102f14 <__smakebuf_r+0x17c>
10102e64:	80c0030b 	ldhu	r3,12(r16)
10102e68:	01040434 	movhi	r4,4112
10102e6c:	21078404 	addi	r4,r4,7696
10102e70:	89000f15 	stw	r4,60(r17)
10102e74:	18c02014 	ori	r3,r3,128
10102e78:	80c0030d 	sth	r3,12(r16)
10102e7c:	80800015 	stw	r2,0(r16)
10102e80:	80800415 	stw	r2,16(r16)
10102e84:	84800515 	stw	r18,20(r16)
10102e88:	98001a1e 	bne	r19,zero,10102ef4 <__smakebuf_r+0x15c>
10102e8c:	dfc01317 	ldw	ra,76(sp)
10102e90:	dcc01217 	ldw	r19,72(sp)
10102e94:	dc801117 	ldw	r18,68(sp)
10102e98:	dc401017 	ldw	r17,64(sp)
10102e9c:	dc000f17 	ldw	r16,60(sp)
10102ea0:	dec01404 	addi	sp,sp,80
10102ea4:	f800283a 	ret
10102ea8:	288010c4 	addi	r2,r5,67
10102eac:	28800015 	stw	r2,0(r5)
10102eb0:	28800415 	stw	r2,16(r5)
10102eb4:	00800044 	movi	r2,1
10102eb8:	28800515 	stw	r2,20(r5)
10102ebc:	f800283a 	ret
10102ec0:	04801004 	movi	r18,64
10102ec4:	003fe006 	br	10102e48 <__alt_data_end+0xfffe2e48>
10102ec8:	81000a17 	ldw	r4,40(r16)
10102ecc:	00c40434 	movhi	r3,4112
10102ed0:	18cf5104 	addi	r3,r3,15684
10102ed4:	20ffc51e 	bne	r4,r3,10102dec <__alt_data_end+0xfffe2dec>
10102ed8:	8080030b 	ldhu	r2,12(r16)
10102edc:	04810004 	movi	r18,1024
10102ee0:	84801315 	stw	r18,76(r16)
10102ee4:	1484b03a 	or	r2,r2,r18
10102ee8:	8080030d 	sth	r2,12(r16)
10102eec:	0027883a 	mov	r19,zero
10102ef0:	003fd806 	br	10102e54 <__alt_data_end+0xfffe2e54>
10102ef4:	8140038f 	ldh	r5,14(r16)
10102ef8:	8809883a 	mov	r4,r17
10102efc:	01081080 	call	10108108 <_isatty_r>
10102f00:	103fe226 	beq	r2,zero,10102e8c <__alt_data_end+0xfffe2e8c>
10102f04:	8080030b 	ldhu	r2,12(r16)
10102f08:	10800054 	ori	r2,r2,1
10102f0c:	8080030d 	sth	r2,12(r16)
10102f10:	003fde06 	br	10102e8c <__alt_data_end+0xfffe2e8c>
10102f14:	8080030b 	ldhu	r2,12(r16)
10102f18:	10c0800c 	andi	r3,r2,512
10102f1c:	183fdb1e 	bne	r3,zero,10102e8c <__alt_data_end+0xfffe2e8c>
10102f20:	10800094 	ori	r2,r2,2
10102f24:	80c010c4 	addi	r3,r16,67
10102f28:	8080030d 	sth	r2,12(r16)
10102f2c:	00800044 	movi	r2,1
10102f30:	80c00015 	stw	r3,0(r16)
10102f34:	80c00415 	stw	r3,16(r16)
10102f38:	80800515 	stw	r2,20(r16)
10102f3c:	003fd306 	br	10102e8c <__alt_data_end+0xfffe2e8c>
10102f40:	04810004 	movi	r18,1024
10102f44:	003fc306 	br	10102e54 <__alt_data_end+0xfffe2e54>
10102f48:	0027883a 	mov	r19,zero
10102f4c:	04810004 	movi	r18,1024
10102f50:	003fc006 	br	10102e54 <__alt_data_end+0xfffe2e54>

10102f54 <_malloc_r>:
10102f54:	defff504 	addi	sp,sp,-44
10102f58:	dc800315 	stw	r18,12(sp)
10102f5c:	dfc00a15 	stw	ra,40(sp)
10102f60:	df000915 	stw	fp,36(sp)
10102f64:	ddc00815 	stw	r23,32(sp)
10102f68:	dd800715 	stw	r22,28(sp)
10102f6c:	dd400615 	stw	r21,24(sp)
10102f70:	dd000515 	stw	r20,20(sp)
10102f74:	dcc00415 	stw	r19,16(sp)
10102f78:	dc400215 	stw	r17,8(sp)
10102f7c:	dc000115 	stw	r16,4(sp)
10102f80:	288002c4 	addi	r2,r5,11
10102f84:	00c00584 	movi	r3,22
10102f88:	2025883a 	mov	r18,r4
10102f8c:	18807f2e 	bgeu	r3,r2,1010318c <_malloc_r+0x238>
10102f90:	047ffe04 	movi	r17,-8
10102f94:	1462703a 	and	r17,r2,r17
10102f98:	8800a316 	blt	r17,zero,10103228 <_malloc_r+0x2d4>
10102f9c:	8940a236 	bltu	r17,r5,10103228 <_malloc_r+0x2d4>
10102fa0:	010f0680 	call	1010f068 <__malloc_lock>
10102fa4:	00807dc4 	movi	r2,503
10102fa8:	1441e92e 	bgeu	r2,r17,10103750 <_malloc_r+0x7fc>
10102fac:	8804d27a 	srli	r2,r17,9
10102fb0:	1000a126 	beq	r2,zero,10103238 <_malloc_r+0x2e4>
10102fb4:	00c00104 	movi	r3,4
10102fb8:	18811e36 	bltu	r3,r2,10103434 <_malloc_r+0x4e0>
10102fbc:	8804d1ba 	srli	r2,r17,6
10102fc0:	12000e44 	addi	r8,r2,57
10102fc4:	11c00e04 	addi	r7,r2,56
10102fc8:	4209883a 	add	r4,r8,r8
10102fcc:	04c40474 	movhi	r19,4113
10102fd0:	2109883a 	add	r4,r4,r4
10102fd4:	9cc86304 	addi	r19,r19,8588
10102fd8:	2109883a 	add	r4,r4,r4
10102fdc:	9909883a 	add	r4,r19,r4
10102fe0:	24000117 	ldw	r16,4(r4)
10102fe4:	213ffe04 	addi	r4,r4,-8
10102fe8:	24009726 	beq	r4,r16,10103248 <_malloc_r+0x2f4>
10102fec:	80800117 	ldw	r2,4(r16)
10102ff0:	01bfff04 	movi	r6,-4
10102ff4:	014003c4 	movi	r5,15
10102ff8:	1184703a 	and	r2,r2,r6
10102ffc:	1447c83a 	sub	r3,r2,r17
10103000:	28c00716 	blt	r5,r3,10103020 <_malloc_r+0xcc>
10103004:	1800920e 	bge	r3,zero,10103250 <_malloc_r+0x2fc>
10103008:	84000317 	ldw	r16,12(r16)
1010300c:	24008e26 	beq	r4,r16,10103248 <_malloc_r+0x2f4>
10103010:	80800117 	ldw	r2,4(r16)
10103014:	1184703a 	and	r2,r2,r6
10103018:	1447c83a 	sub	r3,r2,r17
1010301c:	28fff90e 	bge	r5,r3,10103004 <__alt_data_end+0xfffe3004>
10103020:	3809883a 	mov	r4,r7
10103024:	01840474 	movhi	r6,4113
10103028:	9c000417 	ldw	r16,16(r19)
1010302c:	31886304 	addi	r6,r6,8588
10103030:	32000204 	addi	r8,r6,8
10103034:	82013426 	beq	r16,r8,10103508 <_malloc_r+0x5b4>
10103038:	80c00117 	ldw	r3,4(r16)
1010303c:	00bfff04 	movi	r2,-4
10103040:	188e703a 	and	r7,r3,r2
10103044:	3c45c83a 	sub	r2,r7,r17
10103048:	00c003c4 	movi	r3,15
1010304c:	18811f16 	blt	r3,r2,101034cc <_malloc_r+0x578>
10103050:	32000515 	stw	r8,20(r6)
10103054:	32000415 	stw	r8,16(r6)
10103058:	10007f0e 	bge	r2,zero,10103258 <_malloc_r+0x304>
1010305c:	00807fc4 	movi	r2,511
10103060:	11c0fd36 	bltu	r2,r7,10103458 <_malloc_r+0x504>
10103064:	3806d0fa 	srli	r3,r7,3
10103068:	01c00044 	movi	r7,1
1010306c:	30800117 	ldw	r2,4(r6)
10103070:	19400044 	addi	r5,r3,1
10103074:	294b883a 	add	r5,r5,r5
10103078:	1807d0ba 	srai	r3,r3,2
1010307c:	294b883a 	add	r5,r5,r5
10103080:	294b883a 	add	r5,r5,r5
10103084:	298b883a 	add	r5,r5,r6
10103088:	38c6983a 	sll	r3,r7,r3
1010308c:	29c00017 	ldw	r7,0(r5)
10103090:	2a7ffe04 	addi	r9,r5,-8
10103094:	1886b03a 	or	r3,r3,r2
10103098:	82400315 	stw	r9,12(r16)
1010309c:	81c00215 	stw	r7,8(r16)
101030a0:	30c00115 	stw	r3,4(r6)
101030a4:	2c000015 	stw	r16,0(r5)
101030a8:	3c000315 	stw	r16,12(r7)
101030ac:	2005d0ba 	srai	r2,r4,2
101030b0:	01400044 	movi	r5,1
101030b4:	288a983a 	sll	r5,r5,r2
101030b8:	19406f36 	bltu	r3,r5,10103278 <_malloc_r+0x324>
101030bc:	28c4703a 	and	r2,r5,r3
101030c0:	10000a1e 	bne	r2,zero,101030ec <_malloc_r+0x198>
101030c4:	00bfff04 	movi	r2,-4
101030c8:	294b883a 	add	r5,r5,r5
101030cc:	2088703a 	and	r4,r4,r2
101030d0:	28c4703a 	and	r2,r5,r3
101030d4:	21000104 	addi	r4,r4,4
101030d8:	1000041e 	bne	r2,zero,101030ec <_malloc_r+0x198>
101030dc:	294b883a 	add	r5,r5,r5
101030e0:	28c4703a 	and	r2,r5,r3
101030e4:	21000104 	addi	r4,r4,4
101030e8:	103ffc26 	beq	r2,zero,101030dc <__alt_data_end+0xfffe30dc>
101030ec:	02bfff04 	movi	r10,-4
101030f0:	024003c4 	movi	r9,15
101030f4:	21800044 	addi	r6,r4,1
101030f8:	318d883a 	add	r6,r6,r6
101030fc:	318d883a 	add	r6,r6,r6
10103100:	318d883a 	add	r6,r6,r6
10103104:	998d883a 	add	r6,r19,r6
10103108:	333ffe04 	addi	r12,r6,-8
1010310c:	2017883a 	mov	r11,r4
10103110:	31800104 	addi	r6,r6,4
10103114:	34000017 	ldw	r16,0(r6)
10103118:	31fffd04 	addi	r7,r6,-12
1010311c:	81c0041e 	bne	r16,r7,10103130 <_malloc_r+0x1dc>
10103120:	0000fb06 	br	10103510 <_malloc_r+0x5bc>
10103124:	1801030e 	bge	r3,zero,10103534 <_malloc_r+0x5e0>
10103128:	84000317 	ldw	r16,12(r16)
1010312c:	81c0f826 	beq	r16,r7,10103510 <_malloc_r+0x5bc>
10103130:	80800117 	ldw	r2,4(r16)
10103134:	1284703a 	and	r2,r2,r10
10103138:	1447c83a 	sub	r3,r2,r17
1010313c:	48fff90e 	bge	r9,r3,10103124 <__alt_data_end+0xfffe3124>
10103140:	80800317 	ldw	r2,12(r16)
10103144:	81000217 	ldw	r4,8(r16)
10103148:	89400054 	ori	r5,r17,1
1010314c:	81400115 	stw	r5,4(r16)
10103150:	20800315 	stw	r2,12(r4)
10103154:	11000215 	stw	r4,8(r2)
10103158:	8463883a 	add	r17,r16,r17
1010315c:	9c400515 	stw	r17,20(r19)
10103160:	9c400415 	stw	r17,16(r19)
10103164:	18800054 	ori	r2,r3,1
10103168:	88800115 	stw	r2,4(r17)
1010316c:	8a000315 	stw	r8,12(r17)
10103170:	8a000215 	stw	r8,8(r17)
10103174:	88e3883a 	add	r17,r17,r3
10103178:	88c00015 	stw	r3,0(r17)
1010317c:	9009883a 	mov	r4,r18
10103180:	010f08c0 	call	1010f08c <__malloc_unlock>
10103184:	80800204 	addi	r2,r16,8
10103188:	00001b06 	br	101031f8 <_malloc_r+0x2a4>
1010318c:	04400404 	movi	r17,16
10103190:	89402536 	bltu	r17,r5,10103228 <_malloc_r+0x2d4>
10103194:	010f0680 	call	1010f068 <__malloc_lock>
10103198:	00800184 	movi	r2,6
1010319c:	01000084 	movi	r4,2
101031a0:	04c40474 	movhi	r19,4113
101031a4:	1085883a 	add	r2,r2,r2
101031a8:	9cc86304 	addi	r19,r19,8588
101031ac:	1085883a 	add	r2,r2,r2
101031b0:	9885883a 	add	r2,r19,r2
101031b4:	14000117 	ldw	r16,4(r2)
101031b8:	10fffe04 	addi	r3,r2,-8
101031bc:	80c0d926 	beq	r16,r3,10103524 <_malloc_r+0x5d0>
101031c0:	80c00117 	ldw	r3,4(r16)
101031c4:	81000317 	ldw	r4,12(r16)
101031c8:	00bfff04 	movi	r2,-4
101031cc:	1884703a 	and	r2,r3,r2
101031d0:	81400217 	ldw	r5,8(r16)
101031d4:	8085883a 	add	r2,r16,r2
101031d8:	10c00117 	ldw	r3,4(r2)
101031dc:	29000315 	stw	r4,12(r5)
101031e0:	21400215 	stw	r5,8(r4)
101031e4:	18c00054 	ori	r3,r3,1
101031e8:	10c00115 	stw	r3,4(r2)
101031ec:	9009883a 	mov	r4,r18
101031f0:	010f08c0 	call	1010f08c <__malloc_unlock>
101031f4:	80800204 	addi	r2,r16,8
101031f8:	dfc00a17 	ldw	ra,40(sp)
101031fc:	df000917 	ldw	fp,36(sp)
10103200:	ddc00817 	ldw	r23,32(sp)
10103204:	dd800717 	ldw	r22,28(sp)
10103208:	dd400617 	ldw	r21,24(sp)
1010320c:	dd000517 	ldw	r20,20(sp)
10103210:	dcc00417 	ldw	r19,16(sp)
10103214:	dc800317 	ldw	r18,12(sp)
10103218:	dc400217 	ldw	r17,8(sp)
1010321c:	dc000117 	ldw	r16,4(sp)
10103220:	dec00b04 	addi	sp,sp,44
10103224:	f800283a 	ret
10103228:	00800304 	movi	r2,12
1010322c:	90800015 	stw	r2,0(r18)
10103230:	0005883a 	mov	r2,zero
10103234:	003ff006 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103238:	01002004 	movi	r4,128
1010323c:	02001004 	movi	r8,64
10103240:	01c00fc4 	movi	r7,63
10103244:	003f6106 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103248:	4009883a 	mov	r4,r8
1010324c:	003f7506 	br	10103024 <__alt_data_end+0xfffe3024>
10103250:	81000317 	ldw	r4,12(r16)
10103254:	003fde06 	br	101031d0 <__alt_data_end+0xfffe31d0>
10103258:	81c5883a 	add	r2,r16,r7
1010325c:	11400117 	ldw	r5,4(r2)
10103260:	9009883a 	mov	r4,r18
10103264:	29400054 	ori	r5,r5,1
10103268:	11400115 	stw	r5,4(r2)
1010326c:	010f08c0 	call	1010f08c <__malloc_unlock>
10103270:	80800204 	addi	r2,r16,8
10103274:	003fe006 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103278:	9c000217 	ldw	r16,8(r19)
1010327c:	00bfff04 	movi	r2,-4
10103280:	85800117 	ldw	r22,4(r16)
10103284:	b0ac703a 	and	r22,r22,r2
10103288:	b4400336 	bltu	r22,r17,10103298 <_malloc_r+0x344>
1010328c:	b445c83a 	sub	r2,r22,r17
10103290:	00c003c4 	movi	r3,15
10103294:	18805d16 	blt	r3,r2,1010340c <_malloc_r+0x4b8>
10103298:	05c40474 	movhi	r23,4113
1010329c:	00840474 	movhi	r2,4113
101032a0:	10950b04 	addi	r2,r2,21548
101032a4:	bdce1104 	addi	r23,r23,14404
101032a8:	15400017 	ldw	r21,0(r2)
101032ac:	b8c00017 	ldw	r3,0(r23)
101032b0:	00bfffc4 	movi	r2,-1
101032b4:	858d883a 	add	r6,r16,r22
101032b8:	8d6b883a 	add	r21,r17,r21
101032bc:	1880ea26 	beq	r3,r2,10103668 <_malloc_r+0x714>
101032c0:	ad4403c4 	addi	r21,r21,4111
101032c4:	00bc0004 	movi	r2,-4096
101032c8:	a8aa703a 	and	r21,r21,r2
101032cc:	a80b883a 	mov	r5,r21
101032d0:	9009883a 	mov	r4,r18
101032d4:	d9800015 	stw	r6,0(sp)
101032d8:	0103c180 	call	10103c18 <_sbrk_r>
101032dc:	1029883a 	mov	r20,r2
101032e0:	00bfffc4 	movi	r2,-1
101032e4:	d9800017 	ldw	r6,0(sp)
101032e8:	a080e826 	beq	r20,r2,1010368c <_malloc_r+0x738>
101032ec:	a180a636 	bltu	r20,r6,10103588 <_malloc_r+0x634>
101032f0:	07040474 	movhi	fp,4113
101032f4:	e7151604 	addi	fp,fp,21592
101032f8:	e0800017 	ldw	r2,0(fp)
101032fc:	a887883a 	add	r3,r21,r2
10103300:	e0c00015 	stw	r3,0(fp)
10103304:	3500e626 	beq	r6,r20,101036a0 <_malloc_r+0x74c>
10103308:	b9000017 	ldw	r4,0(r23)
1010330c:	00bfffc4 	movi	r2,-1
10103310:	2080ee26 	beq	r4,r2,101036cc <_malloc_r+0x778>
10103314:	a185c83a 	sub	r2,r20,r6
10103318:	10c5883a 	add	r2,r2,r3
1010331c:	e0800015 	stw	r2,0(fp)
10103320:	a0c001cc 	andi	r3,r20,7
10103324:	1800bc26 	beq	r3,zero,10103618 <_malloc_r+0x6c4>
10103328:	a0e9c83a 	sub	r20,r20,r3
1010332c:	00840204 	movi	r2,4104
10103330:	a5000204 	addi	r20,r20,8
10103334:	10c7c83a 	sub	r3,r2,r3
10103338:	a545883a 	add	r2,r20,r21
1010333c:	1083ffcc 	andi	r2,r2,4095
10103340:	18abc83a 	sub	r21,r3,r2
10103344:	a80b883a 	mov	r5,r21
10103348:	9009883a 	mov	r4,r18
1010334c:	0103c180 	call	10103c18 <_sbrk_r>
10103350:	00ffffc4 	movi	r3,-1
10103354:	10c0e126 	beq	r2,r3,101036dc <_malloc_r+0x788>
10103358:	1505c83a 	sub	r2,r2,r20
1010335c:	1545883a 	add	r2,r2,r21
10103360:	10800054 	ori	r2,r2,1
10103364:	e0c00017 	ldw	r3,0(fp)
10103368:	9d000215 	stw	r20,8(r19)
1010336c:	a0800115 	stw	r2,4(r20)
10103370:	a8c7883a 	add	r3,r21,r3
10103374:	e0c00015 	stw	r3,0(fp)
10103378:	84c00e26 	beq	r16,r19,101033b4 <_malloc_r+0x460>
1010337c:	018003c4 	movi	r6,15
10103380:	3580a72e 	bgeu	r6,r22,10103620 <_malloc_r+0x6cc>
10103384:	81400117 	ldw	r5,4(r16)
10103388:	013ffe04 	movi	r4,-8
1010338c:	b0bffd04 	addi	r2,r22,-12
10103390:	1104703a 	and	r2,r2,r4
10103394:	2900004c 	andi	r4,r5,1
10103398:	2088b03a 	or	r4,r4,r2
1010339c:	81000115 	stw	r4,4(r16)
101033a0:	01400144 	movi	r5,5
101033a4:	8089883a 	add	r4,r16,r2
101033a8:	21400115 	stw	r5,4(r4)
101033ac:	21400215 	stw	r5,8(r4)
101033b0:	3080cd36 	bltu	r6,r2,101036e8 <_malloc_r+0x794>
101033b4:	00840474 	movhi	r2,4113
101033b8:	10950a04 	addi	r2,r2,21544
101033bc:	11000017 	ldw	r4,0(r2)
101033c0:	20c0012e 	bgeu	r4,r3,101033c8 <_malloc_r+0x474>
101033c4:	10c00015 	stw	r3,0(r2)
101033c8:	00840474 	movhi	r2,4113
101033cc:	10950904 	addi	r2,r2,21540
101033d0:	11000017 	ldw	r4,0(r2)
101033d4:	9c000217 	ldw	r16,8(r19)
101033d8:	20c0012e 	bgeu	r4,r3,101033e0 <_malloc_r+0x48c>
101033dc:	10c00015 	stw	r3,0(r2)
101033e0:	80c00117 	ldw	r3,4(r16)
101033e4:	00bfff04 	movi	r2,-4
101033e8:	1886703a 	and	r3,r3,r2
101033ec:	1c45c83a 	sub	r2,r3,r17
101033f0:	1c400236 	bltu	r3,r17,101033fc <_malloc_r+0x4a8>
101033f4:	00c003c4 	movi	r3,15
101033f8:	18800416 	blt	r3,r2,1010340c <_malloc_r+0x4b8>
101033fc:	9009883a 	mov	r4,r18
10103400:	010f08c0 	call	1010f08c <__malloc_unlock>
10103404:	0005883a 	mov	r2,zero
10103408:	003f7b06 	br	101031f8 <__alt_data_end+0xfffe31f8>
1010340c:	88c00054 	ori	r3,r17,1
10103410:	80c00115 	stw	r3,4(r16)
10103414:	8463883a 	add	r17,r16,r17
10103418:	10800054 	ori	r2,r2,1
1010341c:	9c400215 	stw	r17,8(r19)
10103420:	88800115 	stw	r2,4(r17)
10103424:	9009883a 	mov	r4,r18
10103428:	010f08c0 	call	1010f08c <__malloc_unlock>
1010342c:	80800204 	addi	r2,r16,8
10103430:	003f7106 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103434:	00c00504 	movi	r3,20
10103438:	18804a2e 	bgeu	r3,r2,10103564 <_malloc_r+0x610>
1010343c:	00c01504 	movi	r3,84
10103440:	18806e36 	bltu	r3,r2,101035fc <_malloc_r+0x6a8>
10103444:	8804d33a 	srli	r2,r17,12
10103448:	12001bc4 	addi	r8,r2,111
1010344c:	11c01b84 	addi	r7,r2,110
10103450:	4209883a 	add	r4,r8,r8
10103454:	003edd06 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103458:	3804d27a 	srli	r2,r7,9
1010345c:	00c00104 	movi	r3,4
10103460:	1880442e 	bgeu	r3,r2,10103574 <_malloc_r+0x620>
10103464:	00c00504 	movi	r3,20
10103468:	18808136 	bltu	r3,r2,10103670 <_malloc_r+0x71c>
1010346c:	11401704 	addi	r5,r2,92
10103470:	10c016c4 	addi	r3,r2,91
10103474:	294b883a 	add	r5,r5,r5
10103478:	294b883a 	add	r5,r5,r5
1010347c:	294b883a 	add	r5,r5,r5
10103480:	994b883a 	add	r5,r19,r5
10103484:	28800017 	ldw	r2,0(r5)
10103488:	01840474 	movhi	r6,4113
1010348c:	297ffe04 	addi	r5,r5,-8
10103490:	31886304 	addi	r6,r6,8588
10103494:	28806526 	beq	r5,r2,1010362c <_malloc_r+0x6d8>
10103498:	01bfff04 	movi	r6,-4
1010349c:	10c00117 	ldw	r3,4(r2)
101034a0:	1986703a 	and	r3,r3,r6
101034a4:	38c0022e 	bgeu	r7,r3,101034b0 <_malloc_r+0x55c>
101034a8:	10800217 	ldw	r2,8(r2)
101034ac:	28bffb1e 	bne	r5,r2,1010349c <__alt_data_end+0xfffe349c>
101034b0:	11400317 	ldw	r5,12(r2)
101034b4:	98c00117 	ldw	r3,4(r19)
101034b8:	81400315 	stw	r5,12(r16)
101034bc:	80800215 	stw	r2,8(r16)
101034c0:	2c000215 	stw	r16,8(r5)
101034c4:	14000315 	stw	r16,12(r2)
101034c8:	003ef806 	br	101030ac <__alt_data_end+0xfffe30ac>
101034cc:	88c00054 	ori	r3,r17,1
101034d0:	80c00115 	stw	r3,4(r16)
101034d4:	8463883a 	add	r17,r16,r17
101034d8:	34400515 	stw	r17,20(r6)
101034dc:	34400415 	stw	r17,16(r6)
101034e0:	10c00054 	ori	r3,r2,1
101034e4:	8a000315 	stw	r8,12(r17)
101034e8:	8a000215 	stw	r8,8(r17)
101034ec:	88c00115 	stw	r3,4(r17)
101034f0:	88a3883a 	add	r17,r17,r2
101034f4:	88800015 	stw	r2,0(r17)
101034f8:	9009883a 	mov	r4,r18
101034fc:	010f08c0 	call	1010f08c <__malloc_unlock>
10103500:	80800204 	addi	r2,r16,8
10103504:	003f3c06 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103508:	30c00117 	ldw	r3,4(r6)
1010350c:	003ee706 	br	101030ac <__alt_data_end+0xfffe30ac>
10103510:	5ac00044 	addi	r11,r11,1
10103514:	588000cc 	andi	r2,r11,3
10103518:	31800204 	addi	r6,r6,8
1010351c:	103efd1e 	bne	r2,zero,10103114 <__alt_data_end+0xfffe3114>
10103520:	00002406 	br	101035b4 <_malloc_r+0x660>
10103524:	14000317 	ldw	r16,12(r2)
10103528:	143f251e 	bne	r2,r16,101031c0 <__alt_data_end+0xfffe31c0>
1010352c:	21000084 	addi	r4,r4,2
10103530:	003ebc06 	br	10103024 <__alt_data_end+0xfffe3024>
10103534:	8085883a 	add	r2,r16,r2
10103538:	10c00117 	ldw	r3,4(r2)
1010353c:	81000317 	ldw	r4,12(r16)
10103540:	81400217 	ldw	r5,8(r16)
10103544:	18c00054 	ori	r3,r3,1
10103548:	10c00115 	stw	r3,4(r2)
1010354c:	29000315 	stw	r4,12(r5)
10103550:	21400215 	stw	r5,8(r4)
10103554:	9009883a 	mov	r4,r18
10103558:	010f08c0 	call	1010f08c <__malloc_unlock>
1010355c:	80800204 	addi	r2,r16,8
10103560:	003f2506 	br	101031f8 <__alt_data_end+0xfffe31f8>
10103564:	12001704 	addi	r8,r2,92
10103568:	11c016c4 	addi	r7,r2,91
1010356c:	4209883a 	add	r4,r8,r8
10103570:	003e9606 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103574:	3804d1ba 	srli	r2,r7,6
10103578:	11400e44 	addi	r5,r2,57
1010357c:	10c00e04 	addi	r3,r2,56
10103580:	294b883a 	add	r5,r5,r5
10103584:	003fbc06 	br	10103478 <__alt_data_end+0xfffe3478>
10103588:	84ff5926 	beq	r16,r19,101032f0 <__alt_data_end+0xfffe32f0>
1010358c:	00840474 	movhi	r2,4113
10103590:	10886304 	addi	r2,r2,8588
10103594:	14000217 	ldw	r16,8(r2)
10103598:	00bfff04 	movi	r2,-4
1010359c:	80c00117 	ldw	r3,4(r16)
101035a0:	1886703a 	and	r3,r3,r2
101035a4:	003f9106 	br	101033ec <__alt_data_end+0xfffe33ec>
101035a8:	60800217 	ldw	r2,8(r12)
101035ac:	213fffc4 	addi	r4,r4,-1
101035b0:	1300651e 	bne	r2,r12,10103748 <_malloc_r+0x7f4>
101035b4:	208000cc 	andi	r2,r4,3
101035b8:	633ffe04 	addi	r12,r12,-8
101035bc:	103ffa1e 	bne	r2,zero,101035a8 <__alt_data_end+0xfffe35a8>
101035c0:	98800117 	ldw	r2,4(r19)
101035c4:	0146303a 	nor	r3,zero,r5
101035c8:	1884703a 	and	r2,r3,r2
101035cc:	98800115 	stw	r2,4(r19)
101035d0:	294b883a 	add	r5,r5,r5
101035d4:	117f2836 	bltu	r2,r5,10103278 <__alt_data_end+0xfffe3278>
101035d8:	283f2726 	beq	r5,zero,10103278 <__alt_data_end+0xfffe3278>
101035dc:	2886703a 	and	r3,r5,r2
101035e0:	5809883a 	mov	r4,r11
101035e4:	183ec31e 	bne	r3,zero,101030f4 <__alt_data_end+0xfffe30f4>
101035e8:	294b883a 	add	r5,r5,r5
101035ec:	2886703a 	and	r3,r5,r2
101035f0:	21000104 	addi	r4,r4,4
101035f4:	183ffc26 	beq	r3,zero,101035e8 <__alt_data_end+0xfffe35e8>
101035f8:	003ebe06 	br	101030f4 <__alt_data_end+0xfffe30f4>
101035fc:	00c05504 	movi	r3,340
10103600:	18801236 	bltu	r3,r2,1010364c <_malloc_r+0x6f8>
10103604:	8804d3fa 	srli	r2,r17,15
10103608:	12001e04 	addi	r8,r2,120
1010360c:	11c01dc4 	addi	r7,r2,119
10103610:	4209883a 	add	r4,r8,r8
10103614:	003e6d06 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103618:	00c40004 	movi	r3,4096
1010361c:	003f4606 	br	10103338 <__alt_data_end+0xfffe3338>
10103620:	00800044 	movi	r2,1
10103624:	a0800115 	stw	r2,4(r20)
10103628:	003f7406 	br	101033fc <__alt_data_end+0xfffe33fc>
1010362c:	1805d0ba 	srai	r2,r3,2
10103630:	01c00044 	movi	r7,1
10103634:	30c00117 	ldw	r3,4(r6)
10103638:	388e983a 	sll	r7,r7,r2
1010363c:	2805883a 	mov	r2,r5
10103640:	38c6b03a 	or	r3,r7,r3
10103644:	30c00115 	stw	r3,4(r6)
10103648:	003f9b06 	br	101034b8 <__alt_data_end+0xfffe34b8>
1010364c:	00c15504 	movi	r3,1364
10103650:	18801a36 	bltu	r3,r2,101036bc <_malloc_r+0x768>
10103654:	8804d4ba 	srli	r2,r17,18
10103658:	12001f44 	addi	r8,r2,125
1010365c:	11c01f04 	addi	r7,r2,124
10103660:	4209883a 	add	r4,r8,r8
10103664:	003e5906 	br	10102fcc <__alt_data_end+0xfffe2fcc>
10103668:	ad400404 	addi	r21,r21,16
1010366c:	003f1706 	br	101032cc <__alt_data_end+0xfffe32cc>
10103670:	00c01504 	movi	r3,84
10103674:	18802336 	bltu	r3,r2,10103704 <_malloc_r+0x7b0>
10103678:	3804d33a 	srli	r2,r7,12
1010367c:	11401bc4 	addi	r5,r2,111
10103680:	10c01b84 	addi	r3,r2,110
10103684:	294b883a 	add	r5,r5,r5
10103688:	003f7b06 	br	10103478 <__alt_data_end+0xfffe3478>
1010368c:	9c000217 	ldw	r16,8(r19)
10103690:	00bfff04 	movi	r2,-4
10103694:	80c00117 	ldw	r3,4(r16)
10103698:	1886703a 	and	r3,r3,r2
1010369c:	003f5306 	br	101033ec <__alt_data_end+0xfffe33ec>
101036a0:	3083ffcc 	andi	r2,r6,4095
101036a4:	103f181e 	bne	r2,zero,10103308 <__alt_data_end+0xfffe3308>
101036a8:	99000217 	ldw	r4,8(r19)
101036ac:	b545883a 	add	r2,r22,r21
101036b0:	10800054 	ori	r2,r2,1
101036b4:	20800115 	stw	r2,4(r4)
101036b8:	003f3e06 	br	101033b4 <__alt_data_end+0xfffe33b4>
101036bc:	01003f84 	movi	r4,254
101036c0:	02001fc4 	movi	r8,127
101036c4:	01c01f84 	movi	r7,126
101036c8:	003e4006 	br	10102fcc <__alt_data_end+0xfffe2fcc>
101036cc:	00840474 	movhi	r2,4113
101036d0:	108e1104 	addi	r2,r2,14404
101036d4:	15000015 	stw	r20,0(r2)
101036d8:	003f1106 	br	10103320 <__alt_data_end+0xfffe3320>
101036dc:	00800044 	movi	r2,1
101036e0:	002b883a 	mov	r21,zero
101036e4:	003f1f06 	br	10103364 <__alt_data_end+0xfffe3364>
101036e8:	81400204 	addi	r5,r16,8
101036ec:	9009883a 	mov	r4,r18
101036f0:	01024240 	call	10102424 <_free_r>
101036f4:	00840474 	movhi	r2,4113
101036f8:	10951604 	addi	r2,r2,21592
101036fc:	10c00017 	ldw	r3,0(r2)
10103700:	003f2c06 	br	101033b4 <__alt_data_end+0xfffe33b4>
10103704:	00c05504 	movi	r3,340
10103708:	18800536 	bltu	r3,r2,10103720 <_malloc_r+0x7cc>
1010370c:	3804d3fa 	srli	r2,r7,15
10103710:	11401e04 	addi	r5,r2,120
10103714:	10c01dc4 	addi	r3,r2,119
10103718:	294b883a 	add	r5,r5,r5
1010371c:	003f5606 	br	10103478 <__alt_data_end+0xfffe3478>
10103720:	00c15504 	movi	r3,1364
10103724:	18800536 	bltu	r3,r2,1010373c <_malloc_r+0x7e8>
10103728:	3804d4ba 	srli	r2,r7,18
1010372c:	11401f44 	addi	r5,r2,125
10103730:	10c01f04 	addi	r3,r2,124
10103734:	294b883a 	add	r5,r5,r5
10103738:	003f4f06 	br	10103478 <__alt_data_end+0xfffe3478>
1010373c:	01403f84 	movi	r5,254
10103740:	00c01f84 	movi	r3,126
10103744:	003f4c06 	br	10103478 <__alt_data_end+0xfffe3478>
10103748:	98800117 	ldw	r2,4(r19)
1010374c:	003fa006 	br	101035d0 <__alt_data_end+0xfffe35d0>
10103750:	8808d0fa 	srli	r4,r17,3
10103754:	20800044 	addi	r2,r4,1
10103758:	1085883a 	add	r2,r2,r2
1010375c:	003e9006 	br	101031a0 <__alt_data_end+0xfffe31a0>

10103760 <memset>:
10103760:	20c000cc 	andi	r3,r4,3
10103764:	2005883a 	mov	r2,r4
10103768:	18004426 	beq	r3,zero,1010387c <memset+0x11c>
1010376c:	31ffffc4 	addi	r7,r6,-1
10103770:	30004026 	beq	r6,zero,10103874 <memset+0x114>
10103774:	2813883a 	mov	r9,r5
10103778:	200d883a 	mov	r6,r4
1010377c:	2007883a 	mov	r3,r4
10103780:	00000406 	br	10103794 <memset+0x34>
10103784:	3a3fffc4 	addi	r8,r7,-1
10103788:	31800044 	addi	r6,r6,1
1010378c:	38003926 	beq	r7,zero,10103874 <memset+0x114>
10103790:	400f883a 	mov	r7,r8
10103794:	18c00044 	addi	r3,r3,1
10103798:	32400005 	stb	r9,0(r6)
1010379c:	1a0000cc 	andi	r8,r3,3
101037a0:	403ff81e 	bne	r8,zero,10103784 <__alt_data_end+0xfffe3784>
101037a4:	010000c4 	movi	r4,3
101037a8:	21c02d2e 	bgeu	r4,r7,10103860 <memset+0x100>
101037ac:	29003fcc 	andi	r4,r5,255
101037b0:	200c923a 	slli	r6,r4,8
101037b4:	3108b03a 	or	r4,r6,r4
101037b8:	200c943a 	slli	r6,r4,16
101037bc:	218cb03a 	or	r6,r4,r6
101037c0:	010003c4 	movi	r4,15
101037c4:	21c0182e 	bgeu	r4,r7,10103828 <memset+0xc8>
101037c8:	3b3ffc04 	addi	r12,r7,-16
101037cc:	6018d13a 	srli	r12,r12,4
101037d0:	1a000104 	addi	r8,r3,4
101037d4:	1ac00204 	addi	r11,r3,8
101037d8:	6008913a 	slli	r4,r12,4
101037dc:	1a800304 	addi	r10,r3,12
101037e0:	1813883a 	mov	r9,r3
101037e4:	21000504 	addi	r4,r4,20
101037e8:	1909883a 	add	r4,r3,r4
101037ec:	49800015 	stw	r6,0(r9)
101037f0:	41800015 	stw	r6,0(r8)
101037f4:	59800015 	stw	r6,0(r11)
101037f8:	51800015 	stw	r6,0(r10)
101037fc:	42000404 	addi	r8,r8,16
10103800:	4a400404 	addi	r9,r9,16
10103804:	5ac00404 	addi	r11,r11,16
10103808:	52800404 	addi	r10,r10,16
1010380c:	413ff71e 	bne	r8,r4,101037ec <__alt_data_end+0xfffe37ec>
10103810:	63000044 	addi	r12,r12,1
10103814:	6018913a 	slli	r12,r12,4
10103818:	39c003cc 	andi	r7,r7,15
1010381c:	010000c4 	movi	r4,3
10103820:	1b07883a 	add	r3,r3,r12
10103824:	21c00e2e 	bgeu	r4,r7,10103860 <memset+0x100>
10103828:	1813883a 	mov	r9,r3
1010382c:	3811883a 	mov	r8,r7
10103830:	010000c4 	movi	r4,3
10103834:	49800015 	stw	r6,0(r9)
10103838:	423fff04 	addi	r8,r8,-4
1010383c:	4a400104 	addi	r9,r9,4
10103840:	223ffc36 	bltu	r4,r8,10103834 <__alt_data_end+0xfffe3834>
10103844:	393fff04 	addi	r4,r7,-4
10103848:	2008d0ba 	srli	r4,r4,2
1010384c:	39c000cc 	andi	r7,r7,3
10103850:	21000044 	addi	r4,r4,1
10103854:	2109883a 	add	r4,r4,r4
10103858:	2109883a 	add	r4,r4,r4
1010385c:	1907883a 	add	r3,r3,r4
10103860:	38000526 	beq	r7,zero,10103878 <memset+0x118>
10103864:	19cf883a 	add	r7,r3,r7
10103868:	19400005 	stb	r5,0(r3)
1010386c:	18c00044 	addi	r3,r3,1
10103870:	38fffd1e 	bne	r7,r3,10103868 <__alt_data_end+0xfffe3868>
10103874:	f800283a 	ret
10103878:	f800283a 	ret
1010387c:	2007883a 	mov	r3,r4
10103880:	300f883a 	mov	r7,r6
10103884:	003fc706 	br	101037a4 <__alt_data_end+0xfffe37a4>

10103888 <_open_r>:
10103888:	defffd04 	addi	sp,sp,-12
1010388c:	2805883a 	mov	r2,r5
10103890:	dc000015 	stw	r16,0(sp)
10103894:	04040474 	movhi	r16,4113
10103898:	dc400115 	stw	r17,4(sp)
1010389c:	300b883a 	mov	r5,r6
101038a0:	84150804 	addi	r16,r16,21536
101038a4:	2023883a 	mov	r17,r4
101038a8:	380d883a 	mov	r6,r7
101038ac:	1009883a 	mov	r4,r2
101038b0:	dfc00215 	stw	ra,8(sp)
101038b4:	80000015 	stw	zero,0(r16)
101038b8:	010f1cc0 	call	1010f1cc <open>
101038bc:	00ffffc4 	movi	r3,-1
101038c0:	10c00526 	beq	r2,r3,101038d8 <_open_r+0x50>
101038c4:	dfc00217 	ldw	ra,8(sp)
101038c8:	dc400117 	ldw	r17,4(sp)
101038cc:	dc000017 	ldw	r16,0(sp)
101038d0:	dec00304 	addi	sp,sp,12
101038d4:	f800283a 	ret
101038d8:	80c00017 	ldw	r3,0(r16)
101038dc:	183ff926 	beq	r3,zero,101038c4 <__alt_data_end+0xfffe38c4>
101038e0:	88c00015 	stw	r3,0(r17)
101038e4:	003ff706 	br	101038c4 <__alt_data_end+0xfffe38c4>

101038e8 <_printf_r>:
101038e8:	defffd04 	addi	sp,sp,-12
101038ec:	2805883a 	mov	r2,r5
101038f0:	dfc00015 	stw	ra,0(sp)
101038f4:	d9800115 	stw	r6,4(sp)
101038f8:	d9c00215 	stw	r7,8(sp)
101038fc:	21400217 	ldw	r5,8(r4)
10103900:	d9c00104 	addi	r7,sp,4
10103904:	100d883a 	mov	r6,r2
10103908:	0103e400 	call	10103e40 <___vfprintf_internal_r>
1010390c:	dfc00017 	ldw	ra,0(sp)
10103910:	dec00304 	addi	sp,sp,12
10103914:	f800283a 	ret

10103918 <printf>:
10103918:	defffc04 	addi	sp,sp,-16
1010391c:	dfc00015 	stw	ra,0(sp)
10103920:	d9400115 	stw	r5,4(sp)
10103924:	d9800215 	stw	r6,8(sp)
10103928:	d9c00315 	stw	r7,12(sp)
1010392c:	00840474 	movhi	r2,4113
10103930:	108e1004 	addi	r2,r2,14400
10103934:	10800017 	ldw	r2,0(r2)
10103938:	200b883a 	mov	r5,r4
1010393c:	d9800104 	addi	r6,sp,4
10103940:	11000217 	ldw	r4,8(r2)
10103944:	01060380 	call	10106038 <__vfprintf_internal>
10103948:	dfc00017 	ldw	ra,0(sp)
1010394c:	dec00404 	addi	sp,sp,16
10103950:	f800283a 	ret

10103954 <_puts_r>:
10103954:	defff604 	addi	sp,sp,-40
10103958:	dc000715 	stw	r16,28(sp)
1010395c:	2021883a 	mov	r16,r4
10103960:	2809883a 	mov	r4,r5
10103964:	dc400815 	stw	r17,32(sp)
10103968:	dfc00915 	stw	ra,36(sp)
1010396c:	2823883a 	mov	r17,r5
10103970:	0103da80 	call	10103da8 <strlen>
10103974:	10c00044 	addi	r3,r2,1
10103978:	d8800115 	stw	r2,4(sp)
1010397c:	00840474 	movhi	r2,4113
10103980:	10869804 	addi	r2,r2,6752
10103984:	d8800215 	stw	r2,8(sp)
10103988:	00800044 	movi	r2,1
1010398c:	d8800315 	stw	r2,12(sp)
10103990:	00800084 	movi	r2,2
10103994:	dc400015 	stw	r17,0(sp)
10103998:	d8c00615 	stw	r3,24(sp)
1010399c:	dec00415 	stw	sp,16(sp)
101039a0:	d8800515 	stw	r2,20(sp)
101039a4:	80000226 	beq	r16,zero,101039b0 <_puts_r+0x5c>
101039a8:	80800e17 	ldw	r2,56(r16)
101039ac:	10001426 	beq	r2,zero,10103a00 <_puts_r+0xac>
101039b0:	81400217 	ldw	r5,8(r16)
101039b4:	2880030b 	ldhu	r2,12(r5)
101039b8:	10c8000c 	andi	r3,r2,8192
101039bc:	1800061e 	bne	r3,zero,101039d8 <_puts_r+0x84>
101039c0:	29001917 	ldw	r4,100(r5)
101039c4:	00f7ffc4 	movi	r3,-8193
101039c8:	10880014 	ori	r2,r2,8192
101039cc:	20c6703a 	and	r3,r4,r3
101039d0:	2880030d 	sth	r2,12(r5)
101039d4:	28c01915 	stw	r3,100(r5)
101039d8:	d9800404 	addi	r6,sp,16
101039dc:	8009883a 	mov	r4,r16
101039e0:	0107c4c0 	call	10107c4c <__sfvwrite_r>
101039e4:	1000091e 	bne	r2,zero,10103a0c <_puts_r+0xb8>
101039e8:	00800284 	movi	r2,10
101039ec:	dfc00917 	ldw	ra,36(sp)
101039f0:	dc400817 	ldw	r17,32(sp)
101039f4:	dc000717 	ldw	r16,28(sp)
101039f8:	dec00a04 	addi	sp,sp,40
101039fc:	f800283a 	ret
10103a00:	8009883a 	mov	r4,r16
10103a04:	01021580 	call	10102158 <__sinit>
10103a08:	003fe906 	br	101039b0 <__alt_data_end+0xfffe39b0>
10103a0c:	00bfffc4 	movi	r2,-1
10103a10:	003ff606 	br	101039ec <__alt_data_end+0xfffe39ec>

10103a14 <puts>:
10103a14:	00840474 	movhi	r2,4113
10103a18:	108e1004 	addi	r2,r2,14400
10103a1c:	200b883a 	mov	r5,r4
10103a20:	11000017 	ldw	r4,0(r2)
10103a24:	01039541 	jmpi	10103954 <_puts_r>

10103a28 <lflush>:
10103a28:	2080030b 	ldhu	r2,12(r4)
10103a2c:	00c00244 	movi	r3,9
10103a30:	1080024c 	andi	r2,r2,9
10103a34:	10c00226 	beq	r2,r3,10103a40 <lflush+0x18>
10103a38:	0005883a 	mov	r2,zero
10103a3c:	f800283a 	ret
10103a40:	0101dd81 	jmpi	10101dd8 <fflush>

10103a44 <__srefill_r>:
10103a44:	defffc04 	addi	sp,sp,-16
10103a48:	dc400115 	stw	r17,4(sp)
10103a4c:	dc000015 	stw	r16,0(sp)
10103a50:	dfc00315 	stw	ra,12(sp)
10103a54:	dc800215 	stw	r18,8(sp)
10103a58:	2023883a 	mov	r17,r4
10103a5c:	2821883a 	mov	r16,r5
10103a60:	20000226 	beq	r4,zero,10103a6c <__srefill_r+0x28>
10103a64:	20800e17 	ldw	r2,56(r4)
10103a68:	10003c26 	beq	r2,zero,10103b5c <__srefill_r+0x118>
10103a6c:	80c0030b 	ldhu	r3,12(r16)
10103a70:	1908000c 	andi	r4,r3,8192
10103a74:	1805883a 	mov	r2,r3
10103a78:	2000071e 	bne	r4,zero,10103a98 <__srefill_r+0x54>
10103a7c:	81001917 	ldw	r4,100(r16)
10103a80:	18880014 	ori	r2,r3,8192
10103a84:	00f7ffc4 	movi	r3,-8193
10103a88:	20c8703a 	and	r4,r4,r3
10103a8c:	8080030d 	sth	r2,12(r16)
10103a90:	1007883a 	mov	r3,r2
10103a94:	81001915 	stw	r4,100(r16)
10103a98:	80000115 	stw	zero,4(r16)
10103a9c:	1100080c 	andi	r4,r2,32
10103aa0:	2000571e 	bne	r4,zero,10103c00 <__srefill_r+0x1bc>
10103aa4:	1100010c 	andi	r4,r2,4
10103aa8:	20001f26 	beq	r4,zero,10103b28 <__srefill_r+0xe4>
10103aac:	81400c17 	ldw	r5,48(r16)
10103ab0:	28000826 	beq	r5,zero,10103ad4 <__srefill_r+0x90>
10103ab4:	80801004 	addi	r2,r16,64
10103ab8:	28800226 	beq	r5,r2,10103ac4 <__srefill_r+0x80>
10103abc:	8809883a 	mov	r4,r17
10103ac0:	01024240 	call	10102424 <_free_r>
10103ac4:	80800f17 	ldw	r2,60(r16)
10103ac8:	80000c15 	stw	zero,48(r16)
10103acc:	80800115 	stw	r2,4(r16)
10103ad0:	1000391e 	bne	r2,zero,10103bb8 <__srefill_r+0x174>
10103ad4:	80800417 	ldw	r2,16(r16)
10103ad8:	10004b26 	beq	r2,zero,10103c08 <__srefill_r+0x1c4>
10103adc:	8480030b 	ldhu	r18,12(r16)
10103ae0:	908000cc 	andi	r2,r18,3
10103ae4:	10001f1e 	bne	r2,zero,10103b64 <__srefill_r+0x120>
10103ae8:	81800417 	ldw	r6,16(r16)
10103aec:	80800817 	ldw	r2,32(r16)
10103af0:	81c00517 	ldw	r7,20(r16)
10103af4:	81400717 	ldw	r5,28(r16)
10103af8:	81800015 	stw	r6,0(r16)
10103afc:	8809883a 	mov	r4,r17
10103b00:	103ee83a 	callr	r2
10103b04:	80800115 	stw	r2,4(r16)
10103b08:	00800e0e 	bge	zero,r2,10103b44 <__srefill_r+0x100>
10103b0c:	0005883a 	mov	r2,zero
10103b10:	dfc00317 	ldw	ra,12(sp)
10103b14:	dc800217 	ldw	r18,8(sp)
10103b18:	dc400117 	ldw	r17,4(sp)
10103b1c:	dc000017 	ldw	r16,0(sp)
10103b20:	dec00404 	addi	sp,sp,16
10103b24:	f800283a 	ret
10103b28:	1100040c 	andi	r4,r2,16
10103b2c:	20003026 	beq	r4,zero,10103bf0 <__srefill_r+0x1ac>
10103b30:	1080020c 	andi	r2,r2,8
10103b34:	1000241e 	bne	r2,zero,10103bc8 <__srefill_r+0x184>
10103b38:	18c00114 	ori	r3,r3,4
10103b3c:	80c0030d 	sth	r3,12(r16)
10103b40:	003fe406 	br	10103ad4 <__alt_data_end+0xfffe3ad4>
10103b44:	80c0030b 	ldhu	r3,12(r16)
10103b48:	1000161e 	bne	r2,zero,10103ba4 <__srefill_r+0x160>
10103b4c:	18c00814 	ori	r3,r3,32
10103b50:	00bfffc4 	movi	r2,-1
10103b54:	80c0030d 	sth	r3,12(r16)
10103b58:	003fed06 	br	10103b10 <__alt_data_end+0xfffe3b10>
10103b5c:	01021580 	call	10102158 <__sinit>
10103b60:	003fc206 	br	10103a6c <__alt_data_end+0xfffe3a6c>
10103b64:	00840474 	movhi	r2,4113
10103b68:	108e0f04 	addi	r2,r2,14396
10103b6c:	11000017 	ldw	r4,0(r2)
10103b70:	01440434 	movhi	r5,4112
10103b74:	00800044 	movi	r2,1
10103b78:	294e8a04 	addi	r5,r5,14888
10103b7c:	8080030d 	sth	r2,12(r16)
10103b80:	0102c100 	call	10102c10 <_fwalk>
10103b84:	00800244 	movi	r2,9
10103b88:	8480030d 	sth	r18,12(r16)
10103b8c:	9480024c 	andi	r18,r18,9
10103b90:	90bfd51e 	bne	r18,r2,10103ae8 <__alt_data_end+0xfffe3ae8>
10103b94:	800b883a 	mov	r5,r16
10103b98:	8809883a 	mov	r4,r17
10103b9c:	0101b600 	call	10101b60 <__sflush_r>
10103ba0:	003fd106 	br	10103ae8 <__alt_data_end+0xfffe3ae8>
10103ba4:	18c01014 	ori	r3,r3,64
10103ba8:	80000115 	stw	zero,4(r16)
10103bac:	00bfffc4 	movi	r2,-1
10103bb0:	80c0030d 	sth	r3,12(r16)
10103bb4:	003fd606 	br	10103b10 <__alt_data_end+0xfffe3b10>
10103bb8:	80c00e17 	ldw	r3,56(r16)
10103bbc:	0005883a 	mov	r2,zero
10103bc0:	80c00015 	stw	r3,0(r16)
10103bc4:	003fd206 	br	10103b10 <__alt_data_end+0xfffe3b10>
10103bc8:	800b883a 	mov	r5,r16
10103bcc:	8809883a 	mov	r4,r17
10103bd0:	0101d7c0 	call	10101d7c <_fflush_r>
10103bd4:	10000a1e 	bne	r2,zero,10103c00 <__srefill_r+0x1bc>
10103bd8:	8080030b 	ldhu	r2,12(r16)
10103bdc:	00fffdc4 	movi	r3,-9
10103be0:	80000215 	stw	zero,8(r16)
10103be4:	1886703a 	and	r3,r3,r2
10103be8:	80000615 	stw	zero,24(r16)
10103bec:	003fd206 	br	10103b38 <__alt_data_end+0xfffe3b38>
10103bf0:	00800244 	movi	r2,9
10103bf4:	88800015 	stw	r2,0(r17)
10103bf8:	18c01014 	ori	r3,r3,64
10103bfc:	80c0030d 	sth	r3,12(r16)
10103c00:	00bfffc4 	movi	r2,-1
10103c04:	003fc206 	br	10103b10 <__alt_data_end+0xfffe3b10>
10103c08:	800b883a 	mov	r5,r16
10103c0c:	8809883a 	mov	r4,r17
10103c10:	0102d980 	call	10102d98 <__smakebuf_r>
10103c14:	003fb106 	br	10103adc <__alt_data_end+0xfffe3adc>

10103c18 <_sbrk_r>:
10103c18:	defffd04 	addi	sp,sp,-12
10103c1c:	dc000015 	stw	r16,0(sp)
10103c20:	04040474 	movhi	r16,4113
10103c24:	dc400115 	stw	r17,4(sp)
10103c28:	84150804 	addi	r16,r16,21536
10103c2c:	2023883a 	mov	r17,r4
10103c30:	2809883a 	mov	r4,r5
10103c34:	dfc00215 	stw	ra,8(sp)
10103c38:	80000015 	stw	zero,0(r16)
10103c3c:	010f4d40 	call	1010f4d4 <sbrk>
10103c40:	00ffffc4 	movi	r3,-1
10103c44:	10c00526 	beq	r2,r3,10103c5c <_sbrk_r+0x44>
10103c48:	dfc00217 	ldw	ra,8(sp)
10103c4c:	dc400117 	ldw	r17,4(sp)
10103c50:	dc000017 	ldw	r16,0(sp)
10103c54:	dec00304 	addi	sp,sp,12
10103c58:	f800283a 	ret
10103c5c:	80c00017 	ldw	r3,0(r16)
10103c60:	183ff926 	beq	r3,zero,10103c48 <__alt_data_end+0xfffe3c48>
10103c64:	88c00015 	stw	r3,0(r17)
10103c68:	003ff706 	br	10103c48 <__alt_data_end+0xfffe3c48>

10103c6c <__sread>:
10103c6c:	defffe04 	addi	sp,sp,-8
10103c70:	dc000015 	stw	r16,0(sp)
10103c74:	2821883a 	mov	r16,r5
10103c78:	2940038f 	ldh	r5,14(r5)
10103c7c:	dfc00115 	stw	ra,4(sp)
10103c80:	010961c0 	call	1010961c <_read_r>
10103c84:	10000716 	blt	r2,zero,10103ca4 <__sread+0x38>
10103c88:	80c01417 	ldw	r3,80(r16)
10103c8c:	1887883a 	add	r3,r3,r2
10103c90:	80c01415 	stw	r3,80(r16)
10103c94:	dfc00117 	ldw	ra,4(sp)
10103c98:	dc000017 	ldw	r16,0(sp)
10103c9c:	dec00204 	addi	sp,sp,8
10103ca0:	f800283a 	ret
10103ca4:	80c0030b 	ldhu	r3,12(r16)
10103ca8:	18fbffcc 	andi	r3,r3,61439
10103cac:	80c0030d 	sth	r3,12(r16)
10103cb0:	dfc00117 	ldw	ra,4(sp)
10103cb4:	dc000017 	ldw	r16,0(sp)
10103cb8:	dec00204 	addi	sp,sp,8
10103cbc:	f800283a 	ret

10103cc0 <__seofread>:
10103cc0:	0005883a 	mov	r2,zero
10103cc4:	f800283a 	ret

10103cc8 <__swrite>:
10103cc8:	2880030b 	ldhu	r2,12(r5)
10103ccc:	defffb04 	addi	sp,sp,-20
10103cd0:	dcc00315 	stw	r19,12(sp)
10103cd4:	dc800215 	stw	r18,8(sp)
10103cd8:	dc400115 	stw	r17,4(sp)
10103cdc:	dc000015 	stw	r16,0(sp)
10103ce0:	dfc00415 	stw	ra,16(sp)
10103ce4:	10c0400c 	andi	r3,r2,256
10103ce8:	2821883a 	mov	r16,r5
10103cec:	2023883a 	mov	r17,r4
10103cf0:	3025883a 	mov	r18,r6
10103cf4:	3827883a 	mov	r19,r7
10103cf8:	18000526 	beq	r3,zero,10103d10 <__swrite+0x48>
10103cfc:	2940038f 	ldh	r5,14(r5)
10103d00:	01c00084 	movi	r7,2
10103d04:	000d883a 	mov	r6,zero
10103d08:	01082380 	call	10108238 <_lseek_r>
10103d0c:	8080030b 	ldhu	r2,12(r16)
10103d10:	8140038f 	ldh	r5,14(r16)
10103d14:	10bbffcc 	andi	r2,r2,61439
10103d18:	980f883a 	mov	r7,r19
10103d1c:	900d883a 	mov	r6,r18
10103d20:	8809883a 	mov	r4,r17
10103d24:	8080030d 	sth	r2,12(r16)
10103d28:	dfc00417 	ldw	ra,16(sp)
10103d2c:	dcc00317 	ldw	r19,12(sp)
10103d30:	dc800217 	ldw	r18,8(sp)
10103d34:	dc400117 	ldw	r17,4(sp)
10103d38:	dc000017 	ldw	r16,0(sp)
10103d3c:	dec00504 	addi	sp,sp,20
10103d40:	01061101 	jmpi	10106110 <_write_r>

10103d44 <__sseek>:
10103d44:	defffe04 	addi	sp,sp,-8
10103d48:	dc000015 	stw	r16,0(sp)
10103d4c:	2821883a 	mov	r16,r5
10103d50:	2940038f 	ldh	r5,14(r5)
10103d54:	dfc00115 	stw	ra,4(sp)
10103d58:	01082380 	call	10108238 <_lseek_r>
10103d5c:	00ffffc4 	movi	r3,-1
10103d60:	10c00826 	beq	r2,r3,10103d84 <__sseek+0x40>
10103d64:	80c0030b 	ldhu	r3,12(r16)
10103d68:	80801415 	stw	r2,80(r16)
10103d6c:	18c40014 	ori	r3,r3,4096
10103d70:	80c0030d 	sth	r3,12(r16)
10103d74:	dfc00117 	ldw	ra,4(sp)
10103d78:	dc000017 	ldw	r16,0(sp)
10103d7c:	dec00204 	addi	sp,sp,8
10103d80:	f800283a 	ret
10103d84:	80c0030b 	ldhu	r3,12(r16)
10103d88:	18fbffcc 	andi	r3,r3,61439
10103d8c:	80c0030d 	sth	r3,12(r16)
10103d90:	dfc00117 	ldw	ra,4(sp)
10103d94:	dc000017 	ldw	r16,0(sp)
10103d98:	dec00204 	addi	sp,sp,8
10103d9c:	f800283a 	ret

10103da0 <__sclose>:
10103da0:	2940038f 	ldh	r5,14(r5)
10103da4:	01062c41 	jmpi	101062c4 <_close_r>

10103da8 <strlen>:
10103da8:	208000cc 	andi	r2,r4,3
10103dac:	10002026 	beq	r2,zero,10103e30 <strlen+0x88>
10103db0:	20800007 	ldb	r2,0(r4)
10103db4:	10002026 	beq	r2,zero,10103e38 <strlen+0x90>
10103db8:	2005883a 	mov	r2,r4
10103dbc:	00000206 	br	10103dc8 <strlen+0x20>
10103dc0:	10c00007 	ldb	r3,0(r2)
10103dc4:	18001826 	beq	r3,zero,10103e28 <strlen+0x80>
10103dc8:	10800044 	addi	r2,r2,1
10103dcc:	10c000cc 	andi	r3,r2,3
10103dd0:	183ffb1e 	bne	r3,zero,10103dc0 <__alt_data_end+0xfffe3dc0>
10103dd4:	10c00017 	ldw	r3,0(r2)
10103dd8:	01ffbff4 	movhi	r7,65279
10103ddc:	39ffbfc4 	addi	r7,r7,-257
10103de0:	00ca303a 	nor	r5,zero,r3
10103de4:	01a02074 	movhi	r6,32897
10103de8:	19c7883a 	add	r3,r3,r7
10103dec:	31a02004 	addi	r6,r6,-32640
10103df0:	1946703a 	and	r3,r3,r5
10103df4:	1986703a 	and	r3,r3,r6
10103df8:	1800091e 	bne	r3,zero,10103e20 <strlen+0x78>
10103dfc:	10800104 	addi	r2,r2,4
10103e00:	10c00017 	ldw	r3,0(r2)
10103e04:	19cb883a 	add	r5,r3,r7
10103e08:	00c6303a 	nor	r3,zero,r3
10103e0c:	28c6703a 	and	r3,r5,r3
10103e10:	1986703a 	and	r3,r3,r6
10103e14:	183ff926 	beq	r3,zero,10103dfc <__alt_data_end+0xfffe3dfc>
10103e18:	00000106 	br	10103e20 <strlen+0x78>
10103e1c:	10800044 	addi	r2,r2,1
10103e20:	10c00007 	ldb	r3,0(r2)
10103e24:	183ffd1e 	bne	r3,zero,10103e1c <__alt_data_end+0xfffe3e1c>
10103e28:	1105c83a 	sub	r2,r2,r4
10103e2c:	f800283a 	ret
10103e30:	2005883a 	mov	r2,r4
10103e34:	003fe706 	br	10103dd4 <__alt_data_end+0xfffe3dd4>
10103e38:	0005883a 	mov	r2,zero
10103e3c:	f800283a 	ret

10103e40 <___vfprintf_internal_r>:
10103e40:	deffb804 	addi	sp,sp,-288
10103e44:	dfc04715 	stw	ra,284(sp)
10103e48:	ddc04515 	stw	r23,276(sp)
10103e4c:	dd404315 	stw	r21,268(sp)
10103e50:	d9002c15 	stw	r4,176(sp)
10103e54:	282f883a 	mov	r23,r5
10103e58:	302b883a 	mov	r21,r6
10103e5c:	d9c02d15 	stw	r7,180(sp)
10103e60:	df004615 	stw	fp,280(sp)
10103e64:	dd804415 	stw	r22,272(sp)
10103e68:	dd004215 	stw	r20,264(sp)
10103e6c:	dcc04115 	stw	r19,260(sp)
10103e70:	dc804015 	stw	r18,256(sp)
10103e74:	dc403f15 	stw	r17,252(sp)
10103e78:	dc003e15 	stw	r16,248(sp)
10103e7c:	01082080 	call	10108208 <_localeconv_r>
10103e80:	10800017 	ldw	r2,0(r2)
10103e84:	1009883a 	mov	r4,r2
10103e88:	d8803415 	stw	r2,208(sp)
10103e8c:	0103da80 	call	10103da8 <strlen>
10103e90:	d8803715 	stw	r2,220(sp)
10103e94:	d8802c17 	ldw	r2,176(sp)
10103e98:	10000226 	beq	r2,zero,10103ea4 <___vfprintf_internal_r+0x64>
10103e9c:	10800e17 	ldw	r2,56(r2)
10103ea0:	1000f926 	beq	r2,zero,10104288 <___vfprintf_internal_r+0x448>
10103ea4:	b880030b 	ldhu	r2,12(r23)
10103ea8:	10c8000c 	andi	r3,r2,8192
10103eac:	1800061e 	bne	r3,zero,10103ec8 <___vfprintf_internal_r+0x88>
10103eb0:	b9001917 	ldw	r4,100(r23)
10103eb4:	00f7ffc4 	movi	r3,-8193
10103eb8:	10880014 	ori	r2,r2,8192
10103ebc:	20c6703a 	and	r3,r4,r3
10103ec0:	b880030d 	sth	r2,12(r23)
10103ec4:	b8c01915 	stw	r3,100(r23)
10103ec8:	10c0020c 	andi	r3,r2,8
10103ecc:	1800c126 	beq	r3,zero,101041d4 <___vfprintf_internal_r+0x394>
10103ed0:	b8c00417 	ldw	r3,16(r23)
10103ed4:	1800bf26 	beq	r3,zero,101041d4 <___vfprintf_internal_r+0x394>
10103ed8:	1080068c 	andi	r2,r2,26
10103edc:	00c00284 	movi	r3,10
10103ee0:	10c0c426 	beq	r2,r3,101041f4 <___vfprintf_internal_r+0x3b4>
10103ee4:	d8c00404 	addi	r3,sp,16
10103ee8:	05040474 	movhi	r20,4113
10103eec:	d9001e04 	addi	r4,sp,120
10103ef0:	a506a984 	addi	r20,r20,6822
10103ef4:	d8c01e15 	stw	r3,120(sp)
10103ef8:	d8002015 	stw	zero,128(sp)
10103efc:	d8001f15 	stw	zero,124(sp)
10103f00:	d8003315 	stw	zero,204(sp)
10103f04:	d8003615 	stw	zero,216(sp)
10103f08:	d8003815 	stw	zero,224(sp)
10103f0c:	1811883a 	mov	r8,r3
10103f10:	d8003915 	stw	zero,228(sp)
10103f14:	d8003a15 	stw	zero,232(sp)
10103f18:	d8002f15 	stw	zero,188(sp)
10103f1c:	d9002815 	stw	r4,160(sp)
10103f20:	a8800007 	ldb	r2,0(r21)
10103f24:	10027b26 	beq	r2,zero,10104914 <___vfprintf_internal_r+0xad4>
10103f28:	00c00944 	movi	r3,37
10103f2c:	a821883a 	mov	r16,r21
10103f30:	10c0021e 	bne	r2,r3,10103f3c <___vfprintf_internal_r+0xfc>
10103f34:	00001406 	br	10103f88 <___vfprintf_internal_r+0x148>
10103f38:	10c00326 	beq	r2,r3,10103f48 <___vfprintf_internal_r+0x108>
10103f3c:	84000044 	addi	r16,r16,1
10103f40:	80800007 	ldb	r2,0(r16)
10103f44:	103ffc1e 	bne	r2,zero,10103f38 <__alt_data_end+0xfffe3f38>
10103f48:	8563c83a 	sub	r17,r16,r21
10103f4c:	88000e26 	beq	r17,zero,10103f88 <___vfprintf_internal_r+0x148>
10103f50:	d8c02017 	ldw	r3,128(sp)
10103f54:	d8801f17 	ldw	r2,124(sp)
10103f58:	45400015 	stw	r21,0(r8)
10103f5c:	1c47883a 	add	r3,r3,r17
10103f60:	10800044 	addi	r2,r2,1
10103f64:	d8c02015 	stw	r3,128(sp)
10103f68:	44400115 	stw	r17,4(r8)
10103f6c:	d8801f15 	stw	r2,124(sp)
10103f70:	00c001c4 	movi	r3,7
10103f74:	1880a716 	blt	r3,r2,10104214 <___vfprintf_internal_r+0x3d4>
10103f78:	42000204 	addi	r8,r8,8
10103f7c:	d9402f17 	ldw	r5,188(sp)
10103f80:	2c4b883a 	add	r5,r5,r17
10103f84:	d9402f15 	stw	r5,188(sp)
10103f88:	80800007 	ldb	r2,0(r16)
10103f8c:	1000a826 	beq	r2,zero,10104230 <___vfprintf_internal_r+0x3f0>
10103f90:	84400047 	ldb	r17,1(r16)
10103f94:	00bfffc4 	movi	r2,-1
10103f98:	85400044 	addi	r21,r16,1
10103f9c:	d8002785 	stb	zero,158(sp)
10103fa0:	0007883a 	mov	r3,zero
10103fa4:	000f883a 	mov	r7,zero
10103fa8:	d8802915 	stw	r2,164(sp)
10103fac:	d8003115 	stw	zero,196(sp)
10103fb0:	0025883a 	mov	r18,zero
10103fb4:	01401604 	movi	r5,88
10103fb8:	01800244 	movi	r6,9
10103fbc:	02800a84 	movi	r10,42
10103fc0:	02401b04 	movi	r9,108
10103fc4:	ad400044 	addi	r21,r21,1
10103fc8:	88bff804 	addi	r2,r17,-32
10103fcc:	28830436 	bltu	r5,r2,10104be0 <___vfprintf_internal_r+0xda0>
10103fd0:	100490ba 	slli	r2,r2,2
10103fd4:	01040434 	movhi	r4,4112
10103fd8:	210ffa04 	addi	r4,r4,16360
10103fdc:	1105883a 	add	r2,r2,r4
10103fe0:	10800017 	ldw	r2,0(r2)
10103fe4:	1000683a 	jmp	r2
10103fe8:	10104b00 	call	110104b0 <__alt_data_end+0xef04b0>
10103fec:	10104be0 	cmpeqi	zero,r2,16687
10103ff0:	10104be0 	cmpeqi	zero,r2,16687
10103ff4:	10104b20 	cmpeqi	zero,r2,16684
10103ff8:	10104be0 	cmpeqi	zero,r2,16687
10103ffc:	10104be0 	cmpeqi	zero,r2,16687
10104000:	10104be0 	cmpeqi	zero,r2,16687
10104004:	10104be0 	cmpeqi	zero,r2,16687
10104008:	10104be0 	cmpeqi	zero,r2,16687
1010400c:	10104be0 	cmpeqi	zero,r2,16687
10104010:	10104294 	ori	zero,r2,16650
10104014:	10104a3c 	xorhi	zero,r2,16680
10104018:	10104be0 	cmpeqi	zero,r2,16687
1010401c:	1010415c 	xori	zero,r2,16645
10104020:	101042bc 	xorhi	zero,r2,16650
10104024:	10104be0 	cmpeqi	zero,r2,16687
10104028:	101042fc 	xorhi	zero,r2,16651
1010402c:	10104308 	cmpgei	zero,r2,16652
10104030:	10104308 	cmpgei	zero,r2,16652
10104034:	10104308 	cmpgei	zero,r2,16652
10104038:	10104308 	cmpgei	zero,r2,16652
1010403c:	10104308 	cmpgei	zero,r2,16652
10104040:	10104308 	cmpgei	zero,r2,16652
10104044:	10104308 	cmpgei	zero,r2,16652
10104048:	10104308 	cmpgei	zero,r2,16652
1010404c:	10104308 	cmpgei	zero,r2,16652
10104050:	10104be0 	cmpeqi	zero,r2,16687
10104054:	10104be0 	cmpeqi	zero,r2,16687
10104058:	10104be0 	cmpeqi	zero,r2,16687
1010405c:	10104be0 	cmpeqi	zero,r2,16687
10104060:	10104be0 	cmpeqi	zero,r2,16687
10104064:	10104be0 	cmpeqi	zero,r2,16687
10104068:	10104be0 	cmpeqi	zero,r2,16687
1010406c:	10104be0 	cmpeqi	zero,r2,16687
10104070:	10104be0 	cmpeqi	zero,r2,16687
10104074:	10104be0 	cmpeqi	zero,r2,16687
10104078:	1010433c 	xorhi	zero,r2,16652
1010407c:	101043f8 	rdprs	zero,r2,16655
10104080:	10104be0 	cmpeqi	zero,r2,16687
10104084:	101043f8 	rdprs	zero,r2,16655
10104088:	10104be0 	cmpeqi	zero,r2,16687
1010408c:	10104be0 	cmpeqi	zero,r2,16687
10104090:	10104be0 	cmpeqi	zero,r2,16687
10104094:	10104be0 	cmpeqi	zero,r2,16687
10104098:	10104498 	cmpnei	zero,r2,16658
1010409c:	10104be0 	cmpeqi	zero,r2,16687
101040a0:	10104be0 	cmpeqi	zero,r2,16687
101040a4:	101044a4 	muli	zero,r2,16658
101040a8:	10104be0 	cmpeqi	zero,r2,16687
101040ac:	10104be0 	cmpeqi	zero,r2,16687
101040b0:	10104be0 	cmpeqi	zero,r2,16687
101040b4:	10104be0 	cmpeqi	zero,r2,16687
101040b8:	10104be0 	cmpeqi	zero,r2,16687
101040bc:	1010491c 	xori	zero,r2,16676
101040c0:	10104be0 	cmpeqi	zero,r2,16687
101040c4:	10104be0 	cmpeqi	zero,r2,16687
101040c8:	1010497c 	xorhi	zero,r2,16677
101040cc:	10104be0 	cmpeqi	zero,r2,16687
101040d0:	10104be0 	cmpeqi	zero,r2,16687
101040d4:	10104be0 	cmpeqi	zero,r2,16687
101040d8:	10104be0 	cmpeqi	zero,r2,16687
101040dc:	10104be0 	cmpeqi	zero,r2,16687
101040e0:	10104be0 	cmpeqi	zero,r2,16687
101040e4:	10104be0 	cmpeqi	zero,r2,16687
101040e8:	10104be0 	cmpeqi	zero,r2,16687
101040ec:	10104be0 	cmpeqi	zero,r2,16687
101040f0:	10104be0 	cmpeqi	zero,r2,16687
101040f4:	10104b8c 	andi	zero,r2,16686
101040f8:	10104b2c 	andhi	zero,r2,16684
101040fc:	101043f8 	rdprs	zero,r2,16655
10104100:	101043f8 	rdprs	zero,r2,16655
10104104:	101043f8 	rdprs	zero,r2,16655
10104108:	10104b3c 	xorhi	zero,r2,16684
1010410c:	10104b2c 	andhi	zero,r2,16684
10104110:	10104be0 	cmpeqi	zero,r2,16687
10104114:	10104be0 	cmpeqi	zero,r2,16687
10104118:	10104b48 	cmpgei	zero,r2,16685
1010411c:	10104be0 	cmpeqi	zero,r2,16687
10104120:	10104b58 	cmpnei	zero,r2,16685
10104124:	10104a2c 	andhi	zero,r2,16680
10104128:	10104168 	cmpgeui	zero,r2,16645
1010412c:	10104a4c 	andi	zero,r2,16681
10104130:	10104be0 	cmpeqi	zero,r2,16687
10104134:	10104a58 	cmpnei	zero,r2,16681
10104138:	10104be0 	cmpeqi	zero,r2,16687
1010413c:	10104ab4 	orhi	zero,r2,16682
10104140:	10104be0 	cmpeqi	zero,r2,16687
10104144:	10104be0 	cmpeqi	zero,r2,16687
10104148:	10104ac4 	addi	zero,r2,16683
1010414c:	d9003117 	ldw	r4,196(sp)
10104150:	d8802d15 	stw	r2,180(sp)
10104154:	0109c83a 	sub	r4,zero,r4
10104158:	d9003115 	stw	r4,196(sp)
1010415c:	94800114 	ori	r18,r18,4
10104160:	ac400007 	ldb	r17,0(r21)
10104164:	003f9706 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104168:	00800c04 	movi	r2,48
1010416c:	d9002d17 	ldw	r4,180(sp)
10104170:	d9402917 	ldw	r5,164(sp)
10104174:	d8802705 	stb	r2,156(sp)
10104178:	00801e04 	movi	r2,120
1010417c:	d8802745 	stb	r2,157(sp)
10104180:	d8002785 	stb	zero,158(sp)
10104184:	20c00104 	addi	r3,r4,4
10104188:	24c00017 	ldw	r19,0(r4)
1010418c:	002d883a 	mov	r22,zero
10104190:	90800094 	ori	r2,r18,2
10104194:	28029a16 	blt	r5,zero,10104c00 <___vfprintf_internal_r+0xdc0>
10104198:	00bfdfc4 	movi	r2,-129
1010419c:	90a4703a 	and	r18,r18,r2
101041a0:	d8c02d15 	stw	r3,180(sp)
101041a4:	94800094 	ori	r18,r18,2
101041a8:	9802871e 	bne	r19,zero,10104bc8 <___vfprintf_internal_r+0xd88>
101041ac:	00840474 	movhi	r2,4113
101041b0:	1086a204 	addi	r2,r2,6792
101041b4:	d8803915 	stw	r2,228(sp)
101041b8:	04401e04 	movi	r17,120
101041bc:	d8802917 	ldw	r2,164(sp)
101041c0:	0039883a 	mov	fp,zero
101041c4:	1001e926 	beq	r2,zero,1010496c <___vfprintf_internal_r+0xb2c>
101041c8:	0027883a 	mov	r19,zero
101041cc:	002d883a 	mov	r22,zero
101041d0:	00020506 	br	101049e8 <___vfprintf_internal_r+0xba8>
101041d4:	d9002c17 	ldw	r4,176(sp)
101041d8:	b80b883a 	mov	r5,r23
101041dc:	01061700 	call	10106170 <__swsetup_r>
101041e0:	1005ac1e 	bne	r2,zero,10105894 <___vfprintf_internal_r+0x1a54>
101041e4:	b880030b 	ldhu	r2,12(r23)
101041e8:	00c00284 	movi	r3,10
101041ec:	1080068c 	andi	r2,r2,26
101041f0:	10ff3c1e 	bne	r2,r3,10103ee4 <__alt_data_end+0xfffe3ee4>
101041f4:	b880038f 	ldh	r2,14(r23)
101041f8:	103f3a16 	blt	r2,zero,10103ee4 <__alt_data_end+0xfffe3ee4>
101041fc:	d9c02d17 	ldw	r7,180(sp)
10104200:	d9002c17 	ldw	r4,176(sp)
10104204:	a80d883a 	mov	r6,r21
10104208:	b80b883a 	mov	r5,r23
1010420c:	01060540 	call	10106054 <__sbprintf>
10104210:	00001106 	br	10104258 <___vfprintf_internal_r+0x418>
10104214:	d9002c17 	ldw	r4,176(sp)
10104218:	d9801e04 	addi	r6,sp,120
1010421c:	b80b883a 	mov	r5,r23
10104220:	0109e2c0 	call	10109e2c <__sprint_r>
10104224:	1000081e 	bne	r2,zero,10104248 <___vfprintf_internal_r+0x408>
10104228:	da000404 	addi	r8,sp,16
1010422c:	003f5306 	br	10103f7c <__alt_data_end+0xfffe3f7c>
10104230:	d8802017 	ldw	r2,128(sp)
10104234:	10000426 	beq	r2,zero,10104248 <___vfprintf_internal_r+0x408>
10104238:	d9002c17 	ldw	r4,176(sp)
1010423c:	d9801e04 	addi	r6,sp,120
10104240:	b80b883a 	mov	r5,r23
10104244:	0109e2c0 	call	10109e2c <__sprint_r>
10104248:	b880030b 	ldhu	r2,12(r23)
1010424c:	1080100c 	andi	r2,r2,64
10104250:	1005901e 	bne	r2,zero,10105894 <___vfprintf_internal_r+0x1a54>
10104254:	d8802f17 	ldw	r2,188(sp)
10104258:	dfc04717 	ldw	ra,284(sp)
1010425c:	df004617 	ldw	fp,280(sp)
10104260:	ddc04517 	ldw	r23,276(sp)
10104264:	dd804417 	ldw	r22,272(sp)
10104268:	dd404317 	ldw	r21,268(sp)
1010426c:	dd004217 	ldw	r20,264(sp)
10104270:	dcc04117 	ldw	r19,260(sp)
10104274:	dc804017 	ldw	r18,256(sp)
10104278:	dc403f17 	ldw	r17,252(sp)
1010427c:	dc003e17 	ldw	r16,248(sp)
10104280:	dec04804 	addi	sp,sp,288
10104284:	f800283a 	ret
10104288:	d9002c17 	ldw	r4,176(sp)
1010428c:	01021580 	call	10102158 <__sinit>
10104290:	003f0406 	br	10103ea4 <__alt_data_end+0xfffe3ea4>
10104294:	d8802d17 	ldw	r2,180(sp)
10104298:	d9002d17 	ldw	r4,180(sp)
1010429c:	10800017 	ldw	r2,0(r2)
101042a0:	d8803115 	stw	r2,196(sp)
101042a4:	20800104 	addi	r2,r4,4
101042a8:	d9003117 	ldw	r4,196(sp)
101042ac:	203fa716 	blt	r4,zero,1010414c <__alt_data_end+0xfffe414c>
101042b0:	d8802d15 	stw	r2,180(sp)
101042b4:	ac400007 	ldb	r17,0(r21)
101042b8:	003f4206 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
101042bc:	ac400007 	ldb	r17,0(r21)
101042c0:	aac00044 	addi	r11,r21,1
101042c4:	8a872826 	beq	r17,r10,10105f68 <___vfprintf_internal_r+0x2128>
101042c8:	88bff404 	addi	r2,r17,-48
101042cc:	0009883a 	mov	r4,zero
101042d0:	30867d36 	bltu	r6,r2,10105cc8 <___vfprintf_internal_r+0x1e88>
101042d4:	5c400007 	ldb	r17,0(r11)
101042d8:	210002a4 	muli	r4,r4,10
101042dc:	5d400044 	addi	r21,r11,1
101042e0:	a817883a 	mov	r11,r21
101042e4:	2089883a 	add	r4,r4,r2
101042e8:	88bff404 	addi	r2,r17,-48
101042ec:	30bff92e 	bgeu	r6,r2,101042d4 <__alt_data_end+0xfffe42d4>
101042f0:	2005c916 	blt	r4,zero,10105a18 <___vfprintf_internal_r+0x1bd8>
101042f4:	d9002915 	stw	r4,164(sp)
101042f8:	003f3306 	br	10103fc8 <__alt_data_end+0xfffe3fc8>
101042fc:	94802014 	ori	r18,r18,128
10104300:	ac400007 	ldb	r17,0(r21)
10104304:	003f2f06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104308:	a809883a 	mov	r4,r21
1010430c:	d8003115 	stw	zero,196(sp)
10104310:	88bff404 	addi	r2,r17,-48
10104314:	0017883a 	mov	r11,zero
10104318:	24400007 	ldb	r17,0(r4)
1010431c:	5ac002a4 	muli	r11,r11,10
10104320:	ad400044 	addi	r21,r21,1
10104324:	a809883a 	mov	r4,r21
10104328:	12d7883a 	add	r11,r2,r11
1010432c:	88bff404 	addi	r2,r17,-48
10104330:	30bff92e 	bgeu	r6,r2,10104318 <__alt_data_end+0xfffe4318>
10104334:	dac03115 	stw	r11,196(sp)
10104338:	003f2306 	br	10103fc8 <__alt_data_end+0xfffe3fc8>
1010433c:	18c03fcc 	andi	r3,r3,255
10104340:	18072b1e 	bne	r3,zero,10105ff0 <___vfprintf_internal_r+0x21b0>
10104344:	94800414 	ori	r18,r18,16
10104348:	9080080c 	andi	r2,r18,32
1010434c:	10037b26 	beq	r2,zero,1010513c <___vfprintf_internal_r+0x12fc>
10104350:	d9402d17 	ldw	r5,180(sp)
10104354:	28800117 	ldw	r2,4(r5)
10104358:	2cc00017 	ldw	r19,0(r5)
1010435c:	29400204 	addi	r5,r5,8
10104360:	d9402d15 	stw	r5,180(sp)
10104364:	102d883a 	mov	r22,r2
10104368:	10044b16 	blt	r2,zero,10105498 <___vfprintf_internal_r+0x1658>
1010436c:	d9402917 	ldw	r5,164(sp)
10104370:	df002783 	ldbu	fp,158(sp)
10104374:	2803bc16 	blt	r5,zero,10105268 <___vfprintf_internal_r+0x1428>
10104378:	00ffdfc4 	movi	r3,-129
1010437c:	9d84b03a 	or	r2,r19,r22
10104380:	90e4703a 	and	r18,r18,r3
10104384:	10017726 	beq	r2,zero,10104964 <___vfprintf_internal_r+0xb24>
10104388:	b0038326 	beq	r22,zero,10105198 <___vfprintf_internal_r+0x1358>
1010438c:	dc402a15 	stw	r17,168(sp)
10104390:	dc001e04 	addi	r16,sp,120
10104394:	b023883a 	mov	r17,r22
10104398:	402d883a 	mov	r22,r8
1010439c:	9809883a 	mov	r4,r19
101043a0:	880b883a 	mov	r5,r17
101043a4:	01800284 	movi	r6,10
101043a8:	000f883a 	mov	r7,zero
101043ac:	010befc0 	call	1010befc <__umoddi3>
101043b0:	10800c04 	addi	r2,r2,48
101043b4:	843fffc4 	addi	r16,r16,-1
101043b8:	9809883a 	mov	r4,r19
101043bc:	880b883a 	mov	r5,r17
101043c0:	80800005 	stb	r2,0(r16)
101043c4:	01800284 	movi	r6,10
101043c8:	000f883a 	mov	r7,zero
101043cc:	010b9840 	call	1010b984 <__udivdi3>
101043d0:	1027883a 	mov	r19,r2
101043d4:	10c4b03a 	or	r2,r2,r3
101043d8:	1823883a 	mov	r17,r3
101043dc:	103fef1e 	bne	r2,zero,1010439c <__alt_data_end+0xfffe439c>
101043e0:	d8c02817 	ldw	r3,160(sp)
101043e4:	dc402a17 	ldw	r17,168(sp)
101043e8:	b011883a 	mov	r8,r22
101043ec:	1c07c83a 	sub	r3,r3,r16
101043f0:	d8c02e15 	stw	r3,184(sp)
101043f4:	00005906 	br	1010455c <___vfprintf_internal_r+0x71c>
101043f8:	18c03fcc 	andi	r3,r3,255
101043fc:	1806fa1e 	bne	r3,zero,10105fe8 <___vfprintf_internal_r+0x21a8>
10104400:	9080020c 	andi	r2,r18,8
10104404:	10048a26 	beq	r2,zero,10105630 <___vfprintf_internal_r+0x17f0>
10104408:	d8c02d17 	ldw	r3,180(sp)
1010440c:	d9002d17 	ldw	r4,180(sp)
10104410:	d9402d17 	ldw	r5,180(sp)
10104414:	18c00017 	ldw	r3,0(r3)
10104418:	21000117 	ldw	r4,4(r4)
1010441c:	29400204 	addi	r5,r5,8
10104420:	d8c03615 	stw	r3,216(sp)
10104424:	d9003815 	stw	r4,224(sp)
10104428:	d9402d15 	stw	r5,180(sp)
1010442c:	d9003617 	ldw	r4,216(sp)
10104430:	d9403817 	ldw	r5,224(sp)
10104434:	da003d15 	stw	r8,244(sp)
10104438:	04000044 	movi	r16,1
1010443c:	0109be00 	call	10109be0 <__fpclassifyd>
10104440:	da003d17 	ldw	r8,244(sp)
10104444:	14041f1e 	bne	r2,r16,101054c4 <___vfprintf_internal_r+0x1684>
10104448:	d9003617 	ldw	r4,216(sp)
1010444c:	d9403817 	ldw	r5,224(sp)
10104450:	000d883a 	mov	r6,zero
10104454:	000f883a 	mov	r7,zero
10104458:	010d72c0 	call	1010d72c <__ledf2>
1010445c:	da003d17 	ldw	r8,244(sp)
10104460:	1005be16 	blt	r2,zero,10105b5c <___vfprintf_internal_r+0x1d1c>
10104464:	df002783 	ldbu	fp,158(sp)
10104468:	008011c4 	movi	r2,71
1010446c:	1445330e 	bge	r2,r17,1010593c <___vfprintf_internal_r+0x1afc>
10104470:	04040474 	movhi	r16,4113
10104474:	84069a04 	addi	r16,r16,6760
10104478:	00c000c4 	movi	r3,3
1010447c:	00bfdfc4 	movi	r2,-129
10104480:	d8c02a15 	stw	r3,168(sp)
10104484:	90a4703a 	and	r18,r18,r2
10104488:	d8c02e15 	stw	r3,184(sp)
1010448c:	d8002915 	stw	zero,164(sp)
10104490:	d8003215 	stw	zero,200(sp)
10104494:	00003706 	br	10104574 <___vfprintf_internal_r+0x734>
10104498:	94800214 	ori	r18,r18,8
1010449c:	ac400007 	ldb	r17,0(r21)
101044a0:	003ec806 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
101044a4:	18c03fcc 	andi	r3,r3,255
101044a8:	1806db1e 	bne	r3,zero,10106018 <___vfprintf_internal_r+0x21d8>
101044ac:	94800414 	ori	r18,r18,16
101044b0:	9080080c 	andi	r2,r18,32
101044b4:	1002d826 	beq	r2,zero,10105018 <___vfprintf_internal_r+0x11d8>
101044b8:	d9402d17 	ldw	r5,180(sp)
101044bc:	d8c02917 	ldw	r3,164(sp)
101044c0:	d8002785 	stb	zero,158(sp)
101044c4:	28800204 	addi	r2,r5,8
101044c8:	2cc00017 	ldw	r19,0(r5)
101044cc:	2d800117 	ldw	r22,4(r5)
101044d0:	18048f16 	blt	r3,zero,10105710 <___vfprintf_internal_r+0x18d0>
101044d4:	013fdfc4 	movi	r4,-129
101044d8:	9d86b03a 	or	r3,r19,r22
101044dc:	d8802d15 	stw	r2,180(sp)
101044e0:	9124703a 	and	r18,r18,r4
101044e4:	1802d91e 	bne	r3,zero,1010504c <___vfprintf_internal_r+0x120c>
101044e8:	d8c02917 	ldw	r3,164(sp)
101044ec:	0039883a 	mov	fp,zero
101044f0:	1805c326 	beq	r3,zero,10105c00 <___vfprintf_internal_r+0x1dc0>
101044f4:	0027883a 	mov	r19,zero
101044f8:	002d883a 	mov	r22,zero
101044fc:	dc001e04 	addi	r16,sp,120
10104500:	9806d0fa 	srli	r3,r19,3
10104504:	b008977a 	slli	r4,r22,29
10104508:	b02cd0fa 	srli	r22,r22,3
1010450c:	9cc001cc 	andi	r19,r19,7
10104510:	98800c04 	addi	r2,r19,48
10104514:	843fffc4 	addi	r16,r16,-1
10104518:	20e6b03a 	or	r19,r4,r3
1010451c:	80800005 	stb	r2,0(r16)
10104520:	9d86b03a 	or	r3,r19,r22
10104524:	183ff61e 	bne	r3,zero,10104500 <__alt_data_end+0xfffe4500>
10104528:	90c0004c 	andi	r3,r18,1
1010452c:	18013b26 	beq	r3,zero,10104a1c <___vfprintf_internal_r+0xbdc>
10104530:	10803fcc 	andi	r2,r2,255
10104534:	1080201c 	xori	r2,r2,128
10104538:	10bfe004 	addi	r2,r2,-128
1010453c:	00c00c04 	movi	r3,48
10104540:	10c13626 	beq	r2,r3,10104a1c <___vfprintf_internal_r+0xbdc>
10104544:	80ffffc5 	stb	r3,-1(r16)
10104548:	d8c02817 	ldw	r3,160(sp)
1010454c:	80bfffc4 	addi	r2,r16,-1
10104550:	1021883a 	mov	r16,r2
10104554:	1887c83a 	sub	r3,r3,r2
10104558:	d8c02e15 	stw	r3,184(sp)
1010455c:	d8802e17 	ldw	r2,184(sp)
10104560:	d9002917 	ldw	r4,164(sp)
10104564:	1100010e 	bge	r2,r4,1010456c <___vfprintf_internal_r+0x72c>
10104568:	2005883a 	mov	r2,r4
1010456c:	d8802a15 	stw	r2,168(sp)
10104570:	d8003215 	stw	zero,200(sp)
10104574:	e7003fcc 	andi	fp,fp,255
10104578:	e700201c 	xori	fp,fp,128
1010457c:	e73fe004 	addi	fp,fp,-128
10104580:	e0000326 	beq	fp,zero,10104590 <___vfprintf_internal_r+0x750>
10104584:	d8c02a17 	ldw	r3,168(sp)
10104588:	18c00044 	addi	r3,r3,1
1010458c:	d8c02a15 	stw	r3,168(sp)
10104590:	90c0008c 	andi	r3,r18,2
10104594:	d8c02b15 	stw	r3,172(sp)
10104598:	18000326 	beq	r3,zero,101045a8 <___vfprintf_internal_r+0x768>
1010459c:	d8c02a17 	ldw	r3,168(sp)
101045a0:	18c00084 	addi	r3,r3,2
101045a4:	d8c02a15 	stw	r3,168(sp)
101045a8:	90c0210c 	andi	r3,r18,132
101045ac:	d8c03015 	stw	r3,192(sp)
101045b0:	1801a31e 	bne	r3,zero,10104c40 <___vfprintf_internal_r+0xe00>
101045b4:	d9003117 	ldw	r4,196(sp)
101045b8:	d8c02a17 	ldw	r3,168(sp)
101045bc:	20e7c83a 	sub	r19,r4,r3
101045c0:	04c19f0e 	bge	zero,r19,10104c40 <___vfprintf_internal_r+0xe00>
101045c4:	02400404 	movi	r9,16
101045c8:	d8c02017 	ldw	r3,128(sp)
101045cc:	d8801f17 	ldw	r2,124(sp)
101045d0:	4cc50d0e 	bge	r9,r19,10105a08 <___vfprintf_internal_r+0x1bc8>
101045d4:	01440474 	movhi	r5,4113
101045d8:	2946ad84 	addi	r5,r5,6838
101045dc:	dc403b15 	stw	r17,236(sp)
101045e0:	d9403515 	stw	r5,212(sp)
101045e4:	9823883a 	mov	r17,r19
101045e8:	482d883a 	mov	r22,r9
101045ec:	9027883a 	mov	r19,r18
101045f0:	070001c4 	movi	fp,7
101045f4:	8025883a 	mov	r18,r16
101045f8:	dc002c17 	ldw	r16,176(sp)
101045fc:	00000306 	br	1010460c <___vfprintf_internal_r+0x7cc>
10104600:	8c7ffc04 	addi	r17,r17,-16
10104604:	42000204 	addi	r8,r8,8
10104608:	b440130e 	bge	r22,r17,10104658 <___vfprintf_internal_r+0x818>
1010460c:	01040474 	movhi	r4,4113
10104610:	18c00404 	addi	r3,r3,16
10104614:	10800044 	addi	r2,r2,1
10104618:	2106ad84 	addi	r4,r4,6838
1010461c:	41000015 	stw	r4,0(r8)
10104620:	45800115 	stw	r22,4(r8)
10104624:	d8c02015 	stw	r3,128(sp)
10104628:	d8801f15 	stw	r2,124(sp)
1010462c:	e0bff40e 	bge	fp,r2,10104600 <__alt_data_end+0xfffe4600>
10104630:	d9801e04 	addi	r6,sp,120
10104634:	b80b883a 	mov	r5,r23
10104638:	8009883a 	mov	r4,r16
1010463c:	0109e2c0 	call	10109e2c <__sprint_r>
10104640:	103f011e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104644:	8c7ffc04 	addi	r17,r17,-16
10104648:	d8c02017 	ldw	r3,128(sp)
1010464c:	d8801f17 	ldw	r2,124(sp)
10104650:	da000404 	addi	r8,sp,16
10104654:	b47fed16 	blt	r22,r17,1010460c <__alt_data_end+0xfffe460c>
10104658:	9021883a 	mov	r16,r18
1010465c:	9825883a 	mov	r18,r19
10104660:	8827883a 	mov	r19,r17
10104664:	dc403b17 	ldw	r17,236(sp)
10104668:	d9403517 	ldw	r5,212(sp)
1010466c:	98c7883a 	add	r3,r19,r3
10104670:	10800044 	addi	r2,r2,1
10104674:	41400015 	stw	r5,0(r8)
10104678:	44c00115 	stw	r19,4(r8)
1010467c:	d8c02015 	stw	r3,128(sp)
10104680:	d8801f15 	stw	r2,124(sp)
10104684:	010001c4 	movi	r4,7
10104688:	2082a316 	blt	r4,r2,10105118 <___vfprintf_internal_r+0x12d8>
1010468c:	df002787 	ldb	fp,158(sp)
10104690:	42000204 	addi	r8,r8,8
10104694:	e0000c26 	beq	fp,zero,101046c8 <___vfprintf_internal_r+0x888>
10104698:	d8801f17 	ldw	r2,124(sp)
1010469c:	d9002784 	addi	r4,sp,158
101046a0:	18c00044 	addi	r3,r3,1
101046a4:	10800044 	addi	r2,r2,1
101046a8:	41000015 	stw	r4,0(r8)
101046ac:	01000044 	movi	r4,1
101046b0:	41000115 	stw	r4,4(r8)
101046b4:	d8c02015 	stw	r3,128(sp)
101046b8:	d8801f15 	stw	r2,124(sp)
101046bc:	010001c4 	movi	r4,7
101046c0:	20823c16 	blt	r4,r2,10104fb4 <___vfprintf_internal_r+0x1174>
101046c4:	42000204 	addi	r8,r8,8
101046c8:	d8802b17 	ldw	r2,172(sp)
101046cc:	10000c26 	beq	r2,zero,10104700 <___vfprintf_internal_r+0x8c0>
101046d0:	d8801f17 	ldw	r2,124(sp)
101046d4:	d9002704 	addi	r4,sp,156
101046d8:	18c00084 	addi	r3,r3,2
101046dc:	10800044 	addi	r2,r2,1
101046e0:	41000015 	stw	r4,0(r8)
101046e4:	01000084 	movi	r4,2
101046e8:	41000115 	stw	r4,4(r8)
101046ec:	d8c02015 	stw	r3,128(sp)
101046f0:	d8801f15 	stw	r2,124(sp)
101046f4:	010001c4 	movi	r4,7
101046f8:	20823616 	blt	r4,r2,10104fd4 <___vfprintf_internal_r+0x1194>
101046fc:	42000204 	addi	r8,r8,8
10104700:	d9003017 	ldw	r4,192(sp)
10104704:	00802004 	movi	r2,128
10104708:	20819926 	beq	r4,r2,10104d70 <___vfprintf_internal_r+0xf30>
1010470c:	d9402917 	ldw	r5,164(sp)
10104710:	d8802e17 	ldw	r2,184(sp)
10104714:	28adc83a 	sub	r22,r5,r2
10104718:	0580310e 	bge	zero,r22,101047e0 <___vfprintf_internal_r+0x9a0>
1010471c:	07000404 	movi	fp,16
10104720:	d8801f17 	ldw	r2,124(sp)
10104724:	e584140e 	bge	fp,r22,10105778 <___vfprintf_internal_r+0x1938>
10104728:	01440474 	movhi	r5,4113
1010472c:	2946a984 	addi	r5,r5,6822
10104730:	dc402915 	stw	r17,164(sp)
10104734:	d9402b15 	stw	r5,172(sp)
10104738:	b023883a 	mov	r17,r22
1010473c:	04c001c4 	movi	r19,7
10104740:	a82d883a 	mov	r22,r21
10104744:	902b883a 	mov	r21,r18
10104748:	8025883a 	mov	r18,r16
1010474c:	dc002c17 	ldw	r16,176(sp)
10104750:	00000306 	br	10104760 <___vfprintf_internal_r+0x920>
10104754:	8c7ffc04 	addi	r17,r17,-16
10104758:	42000204 	addi	r8,r8,8
1010475c:	e440110e 	bge	fp,r17,101047a4 <___vfprintf_internal_r+0x964>
10104760:	18c00404 	addi	r3,r3,16
10104764:	10800044 	addi	r2,r2,1
10104768:	45000015 	stw	r20,0(r8)
1010476c:	47000115 	stw	fp,4(r8)
10104770:	d8c02015 	stw	r3,128(sp)
10104774:	d8801f15 	stw	r2,124(sp)
10104778:	98bff60e 	bge	r19,r2,10104754 <__alt_data_end+0xfffe4754>
1010477c:	d9801e04 	addi	r6,sp,120
10104780:	b80b883a 	mov	r5,r23
10104784:	8009883a 	mov	r4,r16
10104788:	0109e2c0 	call	10109e2c <__sprint_r>
1010478c:	103eae1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104790:	8c7ffc04 	addi	r17,r17,-16
10104794:	d8c02017 	ldw	r3,128(sp)
10104798:	d8801f17 	ldw	r2,124(sp)
1010479c:	da000404 	addi	r8,sp,16
101047a0:	e47fef16 	blt	fp,r17,10104760 <__alt_data_end+0xfffe4760>
101047a4:	9021883a 	mov	r16,r18
101047a8:	a825883a 	mov	r18,r21
101047ac:	b02b883a 	mov	r21,r22
101047b0:	882d883a 	mov	r22,r17
101047b4:	dc402917 	ldw	r17,164(sp)
101047b8:	d9002b17 	ldw	r4,172(sp)
101047bc:	1d87883a 	add	r3,r3,r22
101047c0:	10800044 	addi	r2,r2,1
101047c4:	41000015 	stw	r4,0(r8)
101047c8:	45800115 	stw	r22,4(r8)
101047cc:	d8c02015 	stw	r3,128(sp)
101047d0:	d8801f15 	stw	r2,124(sp)
101047d4:	010001c4 	movi	r4,7
101047d8:	2081ee16 	blt	r4,r2,10104f94 <___vfprintf_internal_r+0x1154>
101047dc:	42000204 	addi	r8,r8,8
101047e0:	9080400c 	andi	r2,r18,256
101047e4:	1001181e 	bne	r2,zero,10104c48 <___vfprintf_internal_r+0xe08>
101047e8:	d9402e17 	ldw	r5,184(sp)
101047ec:	d8801f17 	ldw	r2,124(sp)
101047f0:	44000015 	stw	r16,0(r8)
101047f4:	1947883a 	add	r3,r3,r5
101047f8:	10800044 	addi	r2,r2,1
101047fc:	41400115 	stw	r5,4(r8)
10104800:	d8c02015 	stw	r3,128(sp)
10104804:	d8801f15 	stw	r2,124(sp)
10104808:	010001c4 	movi	r4,7
1010480c:	2081d316 	blt	r4,r2,10104f5c <___vfprintf_internal_r+0x111c>
10104810:	42000204 	addi	r8,r8,8
10104814:	9480010c 	andi	r18,r18,4
10104818:	90003226 	beq	r18,zero,101048e4 <___vfprintf_internal_r+0xaa4>
1010481c:	d9403117 	ldw	r5,196(sp)
10104820:	d8802a17 	ldw	r2,168(sp)
10104824:	28a1c83a 	sub	r16,r5,r2
10104828:	04002e0e 	bge	zero,r16,101048e4 <___vfprintf_internal_r+0xaa4>
1010482c:	04400404 	movi	r17,16
10104830:	d8801f17 	ldw	r2,124(sp)
10104834:	8c04a20e 	bge	r17,r16,10105ac0 <___vfprintf_internal_r+0x1c80>
10104838:	01440474 	movhi	r5,4113
1010483c:	2946ad84 	addi	r5,r5,6838
10104840:	d9403515 	stw	r5,212(sp)
10104844:	048001c4 	movi	r18,7
10104848:	dcc02c17 	ldw	r19,176(sp)
1010484c:	00000306 	br	1010485c <___vfprintf_internal_r+0xa1c>
10104850:	843ffc04 	addi	r16,r16,-16
10104854:	42000204 	addi	r8,r8,8
10104858:	8c00130e 	bge	r17,r16,101048a8 <___vfprintf_internal_r+0xa68>
1010485c:	01040474 	movhi	r4,4113
10104860:	18c00404 	addi	r3,r3,16
10104864:	10800044 	addi	r2,r2,1
10104868:	2106ad84 	addi	r4,r4,6838
1010486c:	41000015 	stw	r4,0(r8)
10104870:	44400115 	stw	r17,4(r8)
10104874:	d8c02015 	stw	r3,128(sp)
10104878:	d8801f15 	stw	r2,124(sp)
1010487c:	90bff40e 	bge	r18,r2,10104850 <__alt_data_end+0xfffe4850>
10104880:	d9801e04 	addi	r6,sp,120
10104884:	b80b883a 	mov	r5,r23
10104888:	9809883a 	mov	r4,r19
1010488c:	0109e2c0 	call	10109e2c <__sprint_r>
10104890:	103e6d1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104894:	843ffc04 	addi	r16,r16,-16
10104898:	d8c02017 	ldw	r3,128(sp)
1010489c:	d8801f17 	ldw	r2,124(sp)
101048a0:	da000404 	addi	r8,sp,16
101048a4:	8c3fed16 	blt	r17,r16,1010485c <__alt_data_end+0xfffe485c>
101048a8:	d9403517 	ldw	r5,212(sp)
101048ac:	1c07883a 	add	r3,r3,r16
101048b0:	10800044 	addi	r2,r2,1
101048b4:	41400015 	stw	r5,0(r8)
101048b8:	44000115 	stw	r16,4(r8)
101048bc:	d8c02015 	stw	r3,128(sp)
101048c0:	d8801f15 	stw	r2,124(sp)
101048c4:	010001c4 	movi	r4,7
101048c8:	2080060e 	bge	r4,r2,101048e4 <___vfprintf_internal_r+0xaa4>
101048cc:	d9002c17 	ldw	r4,176(sp)
101048d0:	d9801e04 	addi	r6,sp,120
101048d4:	b80b883a 	mov	r5,r23
101048d8:	0109e2c0 	call	10109e2c <__sprint_r>
101048dc:	103e5a1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
101048e0:	d8c02017 	ldw	r3,128(sp)
101048e4:	d8803117 	ldw	r2,196(sp)
101048e8:	d9002a17 	ldw	r4,168(sp)
101048ec:	1100010e 	bge	r2,r4,101048f4 <___vfprintf_internal_r+0xab4>
101048f0:	2005883a 	mov	r2,r4
101048f4:	d9402f17 	ldw	r5,188(sp)
101048f8:	288b883a 	add	r5,r5,r2
101048fc:	d9402f15 	stw	r5,188(sp)
10104900:	18019e1e 	bne	r3,zero,10104f7c <___vfprintf_internal_r+0x113c>
10104904:	a8800007 	ldb	r2,0(r21)
10104908:	d8001f15 	stw	zero,124(sp)
1010490c:	da000404 	addi	r8,sp,16
10104910:	103d851e 	bne	r2,zero,10103f28 <__alt_data_end+0xfffe3f28>
10104914:	a821883a 	mov	r16,r21
10104918:	003d9b06 	br	10103f88 <__alt_data_end+0xfffe3f88>
1010491c:	18c03fcc 	andi	r3,r3,255
10104920:	1805c11e 	bne	r3,zero,10106028 <___vfprintf_internal_r+0x21e8>
10104924:	94800414 	ori	r18,r18,16
10104928:	9080080c 	andi	r2,r18,32
1010492c:	10020c26 	beq	r2,zero,10105160 <___vfprintf_internal_r+0x1320>
10104930:	d8802d17 	ldw	r2,180(sp)
10104934:	d9002917 	ldw	r4,164(sp)
10104938:	d8002785 	stb	zero,158(sp)
1010493c:	10c00204 	addi	r3,r2,8
10104940:	14c00017 	ldw	r19,0(r2)
10104944:	15800117 	ldw	r22,4(r2)
10104948:	20040f16 	blt	r4,zero,10105988 <___vfprintf_internal_r+0x1b48>
1010494c:	013fdfc4 	movi	r4,-129
10104950:	9d84b03a 	or	r2,r19,r22
10104954:	d8c02d15 	stw	r3,180(sp)
10104958:	9124703a 	and	r18,r18,r4
1010495c:	0039883a 	mov	fp,zero
10104960:	103e891e 	bne	r2,zero,10104388 <__alt_data_end+0xfffe4388>
10104964:	d9002917 	ldw	r4,164(sp)
10104968:	2002c11e 	bne	r4,zero,10105470 <___vfprintf_internal_r+0x1630>
1010496c:	d8002915 	stw	zero,164(sp)
10104970:	d8002e15 	stw	zero,184(sp)
10104974:	dc001e04 	addi	r16,sp,120
10104978:	003ef806 	br	1010455c <__alt_data_end+0xfffe455c>
1010497c:	18c03fcc 	andi	r3,r3,255
10104980:	18059d1e 	bne	r3,zero,10105ff8 <___vfprintf_internal_r+0x21b8>
10104984:	01440474 	movhi	r5,4113
10104988:	29469d04 	addi	r5,r5,6772
1010498c:	d9403915 	stw	r5,228(sp)
10104990:	9080080c 	andi	r2,r18,32
10104994:	10005226 	beq	r2,zero,10104ae0 <___vfprintf_internal_r+0xca0>
10104998:	d8802d17 	ldw	r2,180(sp)
1010499c:	14c00017 	ldw	r19,0(r2)
101049a0:	15800117 	ldw	r22,4(r2)
101049a4:	10800204 	addi	r2,r2,8
101049a8:	d8802d15 	stw	r2,180(sp)
101049ac:	9080004c 	andi	r2,r18,1
101049b0:	10019026 	beq	r2,zero,10104ff4 <___vfprintf_internal_r+0x11b4>
101049b4:	9d84b03a 	or	r2,r19,r22
101049b8:	10036926 	beq	r2,zero,10105760 <___vfprintf_internal_r+0x1920>
101049bc:	d8c02917 	ldw	r3,164(sp)
101049c0:	00800c04 	movi	r2,48
101049c4:	d8802705 	stb	r2,156(sp)
101049c8:	dc402745 	stb	r17,157(sp)
101049cc:	d8002785 	stb	zero,158(sp)
101049d0:	90800094 	ori	r2,r18,2
101049d4:	18045d16 	blt	r3,zero,10105b4c <___vfprintf_internal_r+0x1d0c>
101049d8:	00bfdfc4 	movi	r2,-129
101049dc:	90a4703a 	and	r18,r18,r2
101049e0:	94800094 	ori	r18,r18,2
101049e4:	0039883a 	mov	fp,zero
101049e8:	d9003917 	ldw	r4,228(sp)
101049ec:	dc001e04 	addi	r16,sp,120
101049f0:	988003cc 	andi	r2,r19,15
101049f4:	b006973a 	slli	r3,r22,28
101049f8:	2085883a 	add	r2,r4,r2
101049fc:	9826d13a 	srli	r19,r19,4
10104a00:	10800003 	ldbu	r2,0(r2)
10104a04:	b02cd13a 	srli	r22,r22,4
10104a08:	843fffc4 	addi	r16,r16,-1
10104a0c:	1ce6b03a 	or	r19,r3,r19
10104a10:	80800005 	stb	r2,0(r16)
10104a14:	9d84b03a 	or	r2,r19,r22
10104a18:	103ff51e 	bne	r2,zero,101049f0 <__alt_data_end+0xfffe49f0>
10104a1c:	d8c02817 	ldw	r3,160(sp)
10104a20:	1c07c83a 	sub	r3,r3,r16
10104a24:	d8c02e15 	stw	r3,184(sp)
10104a28:	003ecc06 	br	1010455c <__alt_data_end+0xfffe455c>
10104a2c:	18c03fcc 	andi	r3,r3,255
10104a30:	183e9f26 	beq	r3,zero,101044b0 <__alt_data_end+0xfffe44b0>
10104a34:	d9c02785 	stb	r7,158(sp)
10104a38:	003e9d06 	br	101044b0 <__alt_data_end+0xfffe44b0>
10104a3c:	00c00044 	movi	r3,1
10104a40:	01c00ac4 	movi	r7,43
10104a44:	ac400007 	ldb	r17,0(r21)
10104a48:	003d5e06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104a4c:	94800814 	ori	r18,r18,32
10104a50:	ac400007 	ldb	r17,0(r21)
10104a54:	003d5b06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104a58:	d8c02d17 	ldw	r3,180(sp)
10104a5c:	d8002785 	stb	zero,158(sp)
10104a60:	1c000017 	ldw	r16,0(r3)
10104a64:	1cc00104 	addi	r19,r3,4
10104a68:	80041926 	beq	r16,zero,10105ad0 <___vfprintf_internal_r+0x1c90>
10104a6c:	d9002917 	ldw	r4,164(sp)
10104a70:	2003d016 	blt	r4,zero,101059b4 <___vfprintf_internal_r+0x1b74>
10104a74:	200d883a 	mov	r6,r4
10104a78:	000b883a 	mov	r5,zero
10104a7c:	8009883a 	mov	r4,r16
10104a80:	da003d15 	stw	r8,244(sp)
10104a84:	01082980 	call	10108298 <memchr>
10104a88:	da003d17 	ldw	r8,244(sp)
10104a8c:	10045426 	beq	r2,zero,10105be0 <___vfprintf_internal_r+0x1da0>
10104a90:	1405c83a 	sub	r2,r2,r16
10104a94:	d8802e15 	stw	r2,184(sp)
10104a98:	1003cc16 	blt	r2,zero,101059cc <___vfprintf_internal_r+0x1b8c>
10104a9c:	df002783 	ldbu	fp,158(sp)
10104aa0:	d8802a15 	stw	r2,168(sp)
10104aa4:	dcc02d15 	stw	r19,180(sp)
10104aa8:	d8002915 	stw	zero,164(sp)
10104aac:	d8003215 	stw	zero,200(sp)
10104ab0:	003eb006 	br	10104574 <__alt_data_end+0xfffe4574>
10104ab4:	18c03fcc 	andi	r3,r3,255
10104ab8:	183f9b26 	beq	r3,zero,10104928 <__alt_data_end+0xfffe4928>
10104abc:	d9c02785 	stb	r7,158(sp)
10104ac0:	003f9906 	br	10104928 <__alt_data_end+0xfffe4928>
10104ac4:	18c03fcc 	andi	r3,r3,255
10104ac8:	1805551e 	bne	r3,zero,10106020 <___vfprintf_internal_r+0x21e0>
10104acc:	01440474 	movhi	r5,4113
10104ad0:	2946a204 	addi	r5,r5,6792
10104ad4:	d9403915 	stw	r5,228(sp)
10104ad8:	9080080c 	andi	r2,r18,32
10104adc:	103fae1e 	bne	r2,zero,10104998 <__alt_data_end+0xfffe4998>
10104ae0:	9080040c 	andi	r2,r18,16
10104ae4:	1002de26 	beq	r2,zero,10105660 <___vfprintf_internal_r+0x1820>
10104ae8:	d8c02d17 	ldw	r3,180(sp)
10104aec:	002d883a 	mov	r22,zero
10104af0:	1cc00017 	ldw	r19,0(r3)
10104af4:	18c00104 	addi	r3,r3,4
10104af8:	d8c02d15 	stw	r3,180(sp)
10104afc:	003fab06 	br	101049ac <__alt_data_end+0xfffe49ac>
10104b00:	38803fcc 	andi	r2,r7,255
10104b04:	1080201c 	xori	r2,r2,128
10104b08:	10bfe004 	addi	r2,r2,-128
10104b0c:	1002d21e 	bne	r2,zero,10105658 <___vfprintf_internal_r+0x1818>
10104b10:	00c00044 	movi	r3,1
10104b14:	01c00804 	movi	r7,32
10104b18:	ac400007 	ldb	r17,0(r21)
10104b1c:	003d2906 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104b20:	94800054 	ori	r18,r18,1
10104b24:	ac400007 	ldb	r17,0(r21)
10104b28:	003d2606 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104b2c:	18c03fcc 	andi	r3,r3,255
10104b30:	183e0526 	beq	r3,zero,10104348 <__alt_data_end+0xfffe4348>
10104b34:	d9c02785 	stb	r7,158(sp)
10104b38:	003e0306 	br	10104348 <__alt_data_end+0xfffe4348>
10104b3c:	94801014 	ori	r18,r18,64
10104b40:	ac400007 	ldb	r17,0(r21)
10104b44:	003d1f06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104b48:	ac400007 	ldb	r17,0(r21)
10104b4c:	8a438726 	beq	r17,r9,1010596c <___vfprintf_internal_r+0x1b2c>
10104b50:	94800414 	ori	r18,r18,16
10104b54:	003d1b06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10104b58:	18c03fcc 	andi	r3,r3,255
10104b5c:	1805341e 	bne	r3,zero,10106030 <___vfprintf_internal_r+0x21f0>
10104b60:	9080080c 	andi	r2,r18,32
10104b64:	1002cd26 	beq	r2,zero,1010569c <___vfprintf_internal_r+0x185c>
10104b68:	d9402d17 	ldw	r5,180(sp)
10104b6c:	d9002f17 	ldw	r4,188(sp)
10104b70:	28800017 	ldw	r2,0(r5)
10104b74:	2007d7fa 	srai	r3,r4,31
10104b78:	29400104 	addi	r5,r5,4
10104b7c:	d9402d15 	stw	r5,180(sp)
10104b80:	11000015 	stw	r4,0(r2)
10104b84:	10c00115 	stw	r3,4(r2)
10104b88:	003ce506 	br	10103f20 <__alt_data_end+0xfffe3f20>
10104b8c:	d8c02d17 	ldw	r3,180(sp)
10104b90:	d9002d17 	ldw	r4,180(sp)
10104b94:	d8002785 	stb	zero,158(sp)
10104b98:	18800017 	ldw	r2,0(r3)
10104b9c:	21000104 	addi	r4,r4,4
10104ba0:	00c00044 	movi	r3,1
10104ba4:	d8c02a15 	stw	r3,168(sp)
10104ba8:	d8801405 	stb	r2,80(sp)
10104bac:	d9002d15 	stw	r4,180(sp)
10104bb0:	d8c02e15 	stw	r3,184(sp)
10104bb4:	d8002915 	stw	zero,164(sp)
10104bb8:	d8003215 	stw	zero,200(sp)
10104bbc:	dc001404 	addi	r16,sp,80
10104bc0:	0039883a 	mov	fp,zero
10104bc4:	003e7206 	br	10104590 <__alt_data_end+0xfffe4590>
10104bc8:	01040474 	movhi	r4,4113
10104bcc:	2106a204 	addi	r4,r4,6792
10104bd0:	0039883a 	mov	fp,zero
10104bd4:	d9003915 	stw	r4,228(sp)
10104bd8:	04401e04 	movi	r17,120
10104bdc:	003f8206 	br	101049e8 <__alt_data_end+0xfffe49e8>
10104be0:	18c03fcc 	andi	r3,r3,255
10104be4:	1805061e 	bne	r3,zero,10106000 <___vfprintf_internal_r+0x21c0>
10104be8:	883d9126 	beq	r17,zero,10104230 <__alt_data_end+0xfffe4230>
10104bec:	00c00044 	movi	r3,1
10104bf0:	d8c02a15 	stw	r3,168(sp)
10104bf4:	dc401405 	stb	r17,80(sp)
10104bf8:	d8002785 	stb	zero,158(sp)
10104bfc:	003fec06 	br	10104bb0 <__alt_data_end+0xfffe4bb0>
10104c00:	01440474 	movhi	r5,4113
10104c04:	2946a204 	addi	r5,r5,6792
10104c08:	d9403915 	stw	r5,228(sp)
10104c0c:	d8c02d15 	stw	r3,180(sp)
10104c10:	1025883a 	mov	r18,r2
10104c14:	04401e04 	movi	r17,120
10104c18:	9d84b03a 	or	r2,r19,r22
10104c1c:	1000fc1e 	bne	r2,zero,10105010 <___vfprintf_internal_r+0x11d0>
10104c20:	0039883a 	mov	fp,zero
10104c24:	00800084 	movi	r2,2
10104c28:	10803fcc 	andi	r2,r2,255
10104c2c:	00c00044 	movi	r3,1
10104c30:	10c20f26 	beq	r2,r3,10105470 <___vfprintf_internal_r+0x1630>
10104c34:	00c00084 	movi	r3,2
10104c38:	10fd6326 	beq	r2,r3,101041c8 <__alt_data_end+0xfffe41c8>
10104c3c:	003e2d06 	br	101044f4 <__alt_data_end+0xfffe44f4>
10104c40:	d8c02017 	ldw	r3,128(sp)
10104c44:	003e9306 	br	10104694 <__alt_data_end+0xfffe4694>
10104c48:	00801944 	movi	r2,101
10104c4c:	14407e0e 	bge	r2,r17,10104e48 <___vfprintf_internal_r+0x1008>
10104c50:	d9003617 	ldw	r4,216(sp)
10104c54:	d9403817 	ldw	r5,224(sp)
10104c58:	000d883a 	mov	r6,zero
10104c5c:	000f883a 	mov	r7,zero
10104c60:	d8c03c15 	stw	r3,240(sp)
10104c64:	da003d15 	stw	r8,244(sp)
10104c68:	010d5c80 	call	1010d5c8 <__eqdf2>
10104c6c:	d8c03c17 	ldw	r3,240(sp)
10104c70:	da003d17 	ldw	r8,244(sp)
10104c74:	1000f71e 	bne	r2,zero,10105054 <___vfprintf_internal_r+0x1214>
10104c78:	d8801f17 	ldw	r2,124(sp)
10104c7c:	01040474 	movhi	r4,4113
10104c80:	2106a904 	addi	r4,r4,6820
10104c84:	18c00044 	addi	r3,r3,1
10104c88:	10800044 	addi	r2,r2,1
10104c8c:	41000015 	stw	r4,0(r8)
10104c90:	01000044 	movi	r4,1
10104c94:	41000115 	stw	r4,4(r8)
10104c98:	d8c02015 	stw	r3,128(sp)
10104c9c:	d8801f15 	stw	r2,124(sp)
10104ca0:	010001c4 	movi	r4,7
10104ca4:	2082b816 	blt	r4,r2,10105788 <___vfprintf_internal_r+0x1948>
10104ca8:	42000204 	addi	r8,r8,8
10104cac:	d8802617 	ldw	r2,152(sp)
10104cb0:	d9403317 	ldw	r5,204(sp)
10104cb4:	11400216 	blt	r2,r5,10104cc0 <___vfprintf_internal_r+0xe80>
10104cb8:	9080004c 	andi	r2,r18,1
10104cbc:	103ed526 	beq	r2,zero,10104814 <__alt_data_end+0xfffe4814>
10104cc0:	d8803717 	ldw	r2,220(sp)
10104cc4:	d9003417 	ldw	r4,208(sp)
10104cc8:	d9403717 	ldw	r5,220(sp)
10104ccc:	1887883a 	add	r3,r3,r2
10104cd0:	d8801f17 	ldw	r2,124(sp)
10104cd4:	41000015 	stw	r4,0(r8)
10104cd8:	41400115 	stw	r5,4(r8)
10104cdc:	10800044 	addi	r2,r2,1
10104ce0:	d8c02015 	stw	r3,128(sp)
10104ce4:	d8801f15 	stw	r2,124(sp)
10104ce8:	010001c4 	movi	r4,7
10104cec:	20832916 	blt	r4,r2,10105994 <___vfprintf_internal_r+0x1b54>
10104cf0:	42000204 	addi	r8,r8,8
10104cf4:	d8803317 	ldw	r2,204(sp)
10104cf8:	143fffc4 	addi	r16,r2,-1
10104cfc:	043ec50e 	bge	zero,r16,10104814 <__alt_data_end+0xfffe4814>
10104d00:	04400404 	movi	r17,16
10104d04:	d8801f17 	ldw	r2,124(sp)
10104d08:	8c00880e 	bge	r17,r16,10104f2c <___vfprintf_internal_r+0x10ec>
10104d0c:	01440474 	movhi	r5,4113
10104d10:	2946a984 	addi	r5,r5,6822
10104d14:	d9402b15 	stw	r5,172(sp)
10104d18:	058001c4 	movi	r22,7
10104d1c:	dcc02c17 	ldw	r19,176(sp)
10104d20:	00000306 	br	10104d30 <___vfprintf_internal_r+0xef0>
10104d24:	42000204 	addi	r8,r8,8
10104d28:	843ffc04 	addi	r16,r16,-16
10104d2c:	8c00820e 	bge	r17,r16,10104f38 <___vfprintf_internal_r+0x10f8>
10104d30:	18c00404 	addi	r3,r3,16
10104d34:	10800044 	addi	r2,r2,1
10104d38:	45000015 	stw	r20,0(r8)
10104d3c:	44400115 	stw	r17,4(r8)
10104d40:	d8c02015 	stw	r3,128(sp)
10104d44:	d8801f15 	stw	r2,124(sp)
10104d48:	b0bff60e 	bge	r22,r2,10104d24 <__alt_data_end+0xfffe4d24>
10104d4c:	d9801e04 	addi	r6,sp,120
10104d50:	b80b883a 	mov	r5,r23
10104d54:	9809883a 	mov	r4,r19
10104d58:	0109e2c0 	call	10109e2c <__sprint_r>
10104d5c:	103d3a1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104d60:	d8c02017 	ldw	r3,128(sp)
10104d64:	d8801f17 	ldw	r2,124(sp)
10104d68:	da000404 	addi	r8,sp,16
10104d6c:	003fee06 	br	10104d28 <__alt_data_end+0xfffe4d28>
10104d70:	d9403117 	ldw	r5,196(sp)
10104d74:	d8802a17 	ldw	r2,168(sp)
10104d78:	28adc83a 	sub	r22,r5,r2
10104d7c:	05be630e 	bge	zero,r22,1010470c <__alt_data_end+0xfffe470c>
10104d80:	07000404 	movi	fp,16
10104d84:	d8801f17 	ldw	r2,124(sp)
10104d88:	e5838f0e 	bge	fp,r22,10105bc8 <___vfprintf_internal_r+0x1d88>
10104d8c:	01440474 	movhi	r5,4113
10104d90:	2946a984 	addi	r5,r5,6822
10104d94:	dc403015 	stw	r17,192(sp)
10104d98:	d9402b15 	stw	r5,172(sp)
10104d9c:	b023883a 	mov	r17,r22
10104da0:	04c001c4 	movi	r19,7
10104da4:	a82d883a 	mov	r22,r21
10104da8:	902b883a 	mov	r21,r18
10104dac:	8025883a 	mov	r18,r16
10104db0:	dc002c17 	ldw	r16,176(sp)
10104db4:	00000306 	br	10104dc4 <___vfprintf_internal_r+0xf84>
10104db8:	8c7ffc04 	addi	r17,r17,-16
10104dbc:	42000204 	addi	r8,r8,8
10104dc0:	e440110e 	bge	fp,r17,10104e08 <___vfprintf_internal_r+0xfc8>
10104dc4:	18c00404 	addi	r3,r3,16
10104dc8:	10800044 	addi	r2,r2,1
10104dcc:	45000015 	stw	r20,0(r8)
10104dd0:	47000115 	stw	fp,4(r8)
10104dd4:	d8c02015 	stw	r3,128(sp)
10104dd8:	d8801f15 	stw	r2,124(sp)
10104ddc:	98bff60e 	bge	r19,r2,10104db8 <__alt_data_end+0xfffe4db8>
10104de0:	d9801e04 	addi	r6,sp,120
10104de4:	b80b883a 	mov	r5,r23
10104de8:	8009883a 	mov	r4,r16
10104dec:	0109e2c0 	call	10109e2c <__sprint_r>
10104df0:	103d151e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104df4:	8c7ffc04 	addi	r17,r17,-16
10104df8:	d8c02017 	ldw	r3,128(sp)
10104dfc:	d8801f17 	ldw	r2,124(sp)
10104e00:	da000404 	addi	r8,sp,16
10104e04:	e47fef16 	blt	fp,r17,10104dc4 <__alt_data_end+0xfffe4dc4>
10104e08:	9021883a 	mov	r16,r18
10104e0c:	a825883a 	mov	r18,r21
10104e10:	b02b883a 	mov	r21,r22
10104e14:	882d883a 	mov	r22,r17
10104e18:	dc403017 	ldw	r17,192(sp)
10104e1c:	d9002b17 	ldw	r4,172(sp)
10104e20:	1d87883a 	add	r3,r3,r22
10104e24:	10800044 	addi	r2,r2,1
10104e28:	41000015 	stw	r4,0(r8)
10104e2c:	45800115 	stw	r22,4(r8)
10104e30:	d8c02015 	stw	r3,128(sp)
10104e34:	d8801f15 	stw	r2,124(sp)
10104e38:	010001c4 	movi	r4,7
10104e3c:	20818e16 	blt	r4,r2,10105478 <___vfprintf_internal_r+0x1638>
10104e40:	42000204 	addi	r8,r8,8
10104e44:	003e3106 	br	1010470c <__alt_data_end+0xfffe470c>
10104e48:	d9403317 	ldw	r5,204(sp)
10104e4c:	00800044 	movi	r2,1
10104e50:	18c00044 	addi	r3,r3,1
10104e54:	1141530e 	bge	r2,r5,101053a4 <___vfprintf_internal_r+0x1564>
10104e58:	dc401f17 	ldw	r17,124(sp)
10104e5c:	00800044 	movi	r2,1
10104e60:	40800115 	stw	r2,4(r8)
10104e64:	8c400044 	addi	r17,r17,1
10104e68:	44000015 	stw	r16,0(r8)
10104e6c:	d8c02015 	stw	r3,128(sp)
10104e70:	dc401f15 	stw	r17,124(sp)
10104e74:	008001c4 	movi	r2,7
10104e78:	14416b16 	blt	r2,r17,10105428 <___vfprintf_internal_r+0x15e8>
10104e7c:	42000204 	addi	r8,r8,8
10104e80:	d8803717 	ldw	r2,220(sp)
10104e84:	d9003417 	ldw	r4,208(sp)
10104e88:	8c400044 	addi	r17,r17,1
10104e8c:	10c7883a 	add	r3,r2,r3
10104e90:	40800115 	stw	r2,4(r8)
10104e94:	41000015 	stw	r4,0(r8)
10104e98:	d8c02015 	stw	r3,128(sp)
10104e9c:	dc401f15 	stw	r17,124(sp)
10104ea0:	008001c4 	movi	r2,7
10104ea4:	14416916 	blt	r2,r17,1010544c <___vfprintf_internal_r+0x160c>
10104ea8:	45800204 	addi	r22,r8,8
10104eac:	d9003617 	ldw	r4,216(sp)
10104eb0:	d9403817 	ldw	r5,224(sp)
10104eb4:	000d883a 	mov	r6,zero
10104eb8:	000f883a 	mov	r7,zero
10104ebc:	d8c03c15 	stw	r3,240(sp)
10104ec0:	010d5c80 	call	1010d5c8 <__eqdf2>
10104ec4:	d8c03c17 	ldw	r3,240(sp)
10104ec8:	1000bc26 	beq	r2,zero,101051bc <___vfprintf_internal_r+0x137c>
10104ecc:	d9403317 	ldw	r5,204(sp)
10104ed0:	84000044 	addi	r16,r16,1
10104ed4:	8c400044 	addi	r17,r17,1
10104ed8:	28bfffc4 	addi	r2,r5,-1
10104edc:	1887883a 	add	r3,r3,r2
10104ee0:	b0800115 	stw	r2,4(r22)
10104ee4:	b4000015 	stw	r16,0(r22)
10104ee8:	d8c02015 	stw	r3,128(sp)
10104eec:	dc401f15 	stw	r17,124(sp)
10104ef0:	008001c4 	movi	r2,7
10104ef4:	14414316 	blt	r2,r17,10105404 <___vfprintf_internal_r+0x15c4>
10104ef8:	b5800204 	addi	r22,r22,8
10104efc:	d9003a17 	ldw	r4,232(sp)
10104f00:	df0022c4 	addi	fp,sp,139
10104f04:	8c400044 	addi	r17,r17,1
10104f08:	20c7883a 	add	r3,r4,r3
10104f0c:	b7000015 	stw	fp,0(r22)
10104f10:	b1000115 	stw	r4,4(r22)
10104f14:	d8c02015 	stw	r3,128(sp)
10104f18:	dc401f15 	stw	r17,124(sp)
10104f1c:	008001c4 	movi	r2,7
10104f20:	14400e16 	blt	r2,r17,10104f5c <___vfprintf_internal_r+0x111c>
10104f24:	b2000204 	addi	r8,r22,8
10104f28:	003e3a06 	br	10104814 <__alt_data_end+0xfffe4814>
10104f2c:	01040474 	movhi	r4,4113
10104f30:	2106a984 	addi	r4,r4,6822
10104f34:	d9002b15 	stw	r4,172(sp)
10104f38:	d9002b17 	ldw	r4,172(sp)
10104f3c:	1c07883a 	add	r3,r3,r16
10104f40:	44000115 	stw	r16,4(r8)
10104f44:	41000015 	stw	r4,0(r8)
10104f48:	10800044 	addi	r2,r2,1
10104f4c:	d8c02015 	stw	r3,128(sp)
10104f50:	d8801f15 	stw	r2,124(sp)
10104f54:	010001c4 	movi	r4,7
10104f58:	20be2d0e 	bge	r4,r2,10104810 <__alt_data_end+0xfffe4810>
10104f5c:	d9002c17 	ldw	r4,176(sp)
10104f60:	d9801e04 	addi	r6,sp,120
10104f64:	b80b883a 	mov	r5,r23
10104f68:	0109e2c0 	call	10109e2c <__sprint_r>
10104f6c:	103cb61e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104f70:	d8c02017 	ldw	r3,128(sp)
10104f74:	da000404 	addi	r8,sp,16
10104f78:	003e2606 	br	10104814 <__alt_data_end+0xfffe4814>
10104f7c:	d9002c17 	ldw	r4,176(sp)
10104f80:	d9801e04 	addi	r6,sp,120
10104f84:	b80b883a 	mov	r5,r23
10104f88:	0109e2c0 	call	10109e2c <__sprint_r>
10104f8c:	103e5d26 	beq	r2,zero,10104904 <__alt_data_end+0xfffe4904>
10104f90:	003cad06 	br	10104248 <__alt_data_end+0xfffe4248>
10104f94:	d9002c17 	ldw	r4,176(sp)
10104f98:	d9801e04 	addi	r6,sp,120
10104f9c:	b80b883a 	mov	r5,r23
10104fa0:	0109e2c0 	call	10109e2c <__sprint_r>
10104fa4:	103ca81e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104fa8:	d8c02017 	ldw	r3,128(sp)
10104fac:	da000404 	addi	r8,sp,16
10104fb0:	003e0b06 	br	101047e0 <__alt_data_end+0xfffe47e0>
10104fb4:	d9002c17 	ldw	r4,176(sp)
10104fb8:	d9801e04 	addi	r6,sp,120
10104fbc:	b80b883a 	mov	r5,r23
10104fc0:	0109e2c0 	call	10109e2c <__sprint_r>
10104fc4:	103ca01e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104fc8:	d8c02017 	ldw	r3,128(sp)
10104fcc:	da000404 	addi	r8,sp,16
10104fd0:	003dbd06 	br	101046c8 <__alt_data_end+0xfffe46c8>
10104fd4:	d9002c17 	ldw	r4,176(sp)
10104fd8:	d9801e04 	addi	r6,sp,120
10104fdc:	b80b883a 	mov	r5,r23
10104fe0:	0109e2c0 	call	10109e2c <__sprint_r>
10104fe4:	103c981e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10104fe8:	d8c02017 	ldw	r3,128(sp)
10104fec:	da000404 	addi	r8,sp,16
10104ff0:	003dc306 	br	10104700 <__alt_data_end+0xfffe4700>
10104ff4:	d8802917 	ldw	r2,164(sp)
10104ff8:	d8002785 	stb	zero,158(sp)
10104ffc:	103f0616 	blt	r2,zero,10104c18 <__alt_data_end+0xfffe4c18>
10105000:	00ffdfc4 	movi	r3,-129
10105004:	9d84b03a 	or	r2,r19,r22
10105008:	90e4703a 	and	r18,r18,r3
1010500c:	103c6b26 	beq	r2,zero,101041bc <__alt_data_end+0xfffe41bc>
10105010:	0039883a 	mov	fp,zero
10105014:	003e7406 	br	101049e8 <__alt_data_end+0xfffe49e8>
10105018:	9080040c 	andi	r2,r18,16
1010501c:	1001b326 	beq	r2,zero,101056ec <___vfprintf_internal_r+0x18ac>
10105020:	d9002d17 	ldw	r4,180(sp)
10105024:	d9402917 	ldw	r5,164(sp)
10105028:	d8002785 	stb	zero,158(sp)
1010502c:	20800104 	addi	r2,r4,4
10105030:	24c00017 	ldw	r19,0(r4)
10105034:	002d883a 	mov	r22,zero
10105038:	2801b516 	blt	r5,zero,10105710 <___vfprintf_internal_r+0x18d0>
1010503c:	00ffdfc4 	movi	r3,-129
10105040:	d8802d15 	stw	r2,180(sp)
10105044:	90e4703a 	and	r18,r18,r3
10105048:	983d2726 	beq	r19,zero,101044e8 <__alt_data_end+0xfffe44e8>
1010504c:	0039883a 	mov	fp,zero
10105050:	003d2a06 	br	101044fc <__alt_data_end+0xfffe44fc>
10105054:	dc402617 	ldw	r17,152(sp)
10105058:	0441d30e 	bge	zero,r17,101057a8 <___vfprintf_internal_r+0x1968>
1010505c:	dc403217 	ldw	r17,200(sp)
10105060:	d8803317 	ldw	r2,204(sp)
10105064:	1440010e 	bge	r2,r17,1010506c <___vfprintf_internal_r+0x122c>
10105068:	1023883a 	mov	r17,r2
1010506c:	04400a0e 	bge	zero,r17,10105098 <___vfprintf_internal_r+0x1258>
10105070:	d8801f17 	ldw	r2,124(sp)
10105074:	1c47883a 	add	r3,r3,r17
10105078:	44000015 	stw	r16,0(r8)
1010507c:	10800044 	addi	r2,r2,1
10105080:	44400115 	stw	r17,4(r8)
10105084:	d8c02015 	stw	r3,128(sp)
10105088:	d8801f15 	stw	r2,124(sp)
1010508c:	010001c4 	movi	r4,7
10105090:	20826516 	blt	r4,r2,10105a28 <___vfprintf_internal_r+0x1be8>
10105094:	42000204 	addi	r8,r8,8
10105098:	88026116 	blt	r17,zero,10105a20 <___vfprintf_internal_r+0x1be0>
1010509c:	d9003217 	ldw	r4,200(sp)
101050a0:	2463c83a 	sub	r17,r4,r17
101050a4:	04407b0e 	bge	zero,r17,10105294 <___vfprintf_internal_r+0x1454>
101050a8:	05800404 	movi	r22,16
101050ac:	d8801f17 	ldw	r2,124(sp)
101050b0:	b4419d0e 	bge	r22,r17,10105728 <___vfprintf_internal_r+0x18e8>
101050b4:	01040474 	movhi	r4,4113
101050b8:	2106a984 	addi	r4,r4,6822
101050bc:	d9002b15 	stw	r4,172(sp)
101050c0:	070001c4 	movi	fp,7
101050c4:	dcc02c17 	ldw	r19,176(sp)
101050c8:	00000306 	br	101050d8 <___vfprintf_internal_r+0x1298>
101050cc:	42000204 	addi	r8,r8,8
101050d0:	8c7ffc04 	addi	r17,r17,-16
101050d4:	b441970e 	bge	r22,r17,10105734 <___vfprintf_internal_r+0x18f4>
101050d8:	18c00404 	addi	r3,r3,16
101050dc:	10800044 	addi	r2,r2,1
101050e0:	45000015 	stw	r20,0(r8)
101050e4:	45800115 	stw	r22,4(r8)
101050e8:	d8c02015 	stw	r3,128(sp)
101050ec:	d8801f15 	stw	r2,124(sp)
101050f0:	e0bff60e 	bge	fp,r2,101050cc <__alt_data_end+0xfffe50cc>
101050f4:	d9801e04 	addi	r6,sp,120
101050f8:	b80b883a 	mov	r5,r23
101050fc:	9809883a 	mov	r4,r19
10105100:	0109e2c0 	call	10109e2c <__sprint_r>
10105104:	103c501e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105108:	d8c02017 	ldw	r3,128(sp)
1010510c:	d8801f17 	ldw	r2,124(sp)
10105110:	da000404 	addi	r8,sp,16
10105114:	003fee06 	br	101050d0 <__alt_data_end+0xfffe50d0>
10105118:	d9002c17 	ldw	r4,176(sp)
1010511c:	d9801e04 	addi	r6,sp,120
10105120:	b80b883a 	mov	r5,r23
10105124:	0109e2c0 	call	10109e2c <__sprint_r>
10105128:	103c471e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010512c:	d8c02017 	ldw	r3,128(sp)
10105130:	df002787 	ldb	fp,158(sp)
10105134:	da000404 	addi	r8,sp,16
10105138:	003d5606 	br	10104694 <__alt_data_end+0xfffe4694>
1010513c:	9080040c 	andi	r2,r18,16
10105140:	10016126 	beq	r2,zero,101056c8 <___vfprintf_internal_r+0x1888>
10105144:	d8802d17 	ldw	r2,180(sp)
10105148:	14c00017 	ldw	r19,0(r2)
1010514c:	10800104 	addi	r2,r2,4
10105150:	d8802d15 	stw	r2,180(sp)
10105154:	982dd7fa 	srai	r22,r19,31
10105158:	b005883a 	mov	r2,r22
1010515c:	003c8206 	br	10104368 <__alt_data_end+0xfffe4368>
10105160:	9080040c 	andi	r2,r18,16
10105164:	10003526 	beq	r2,zero,1010523c <___vfprintf_internal_r+0x13fc>
10105168:	d9402d17 	ldw	r5,180(sp)
1010516c:	d8c02917 	ldw	r3,164(sp)
10105170:	d8002785 	stb	zero,158(sp)
10105174:	28800104 	addi	r2,r5,4
10105178:	2cc00017 	ldw	r19,0(r5)
1010517c:	002d883a 	mov	r22,zero
10105180:	18003716 	blt	r3,zero,10105260 <___vfprintf_internal_r+0x1420>
10105184:	00ffdfc4 	movi	r3,-129
10105188:	d8802d15 	stw	r2,180(sp)
1010518c:	90e4703a 	and	r18,r18,r3
10105190:	0039883a 	mov	fp,zero
10105194:	983df326 	beq	r19,zero,10104964 <__alt_data_end+0xfffe4964>
10105198:	00800244 	movi	r2,9
1010519c:	14fc7b36 	bltu	r2,r19,1010438c <__alt_data_end+0xfffe438c>
101051a0:	d8c02817 	ldw	r3,160(sp)
101051a4:	dc001dc4 	addi	r16,sp,119
101051a8:	9cc00c04 	addi	r19,r19,48
101051ac:	1c07c83a 	sub	r3,r3,r16
101051b0:	dcc01dc5 	stb	r19,119(sp)
101051b4:	d8c02e15 	stw	r3,184(sp)
101051b8:	003ce806 	br	1010455c <__alt_data_end+0xfffe455c>
101051bc:	d8803317 	ldw	r2,204(sp)
101051c0:	143fffc4 	addi	r16,r2,-1
101051c4:	043f4d0e 	bge	zero,r16,10104efc <__alt_data_end+0xfffe4efc>
101051c8:	07000404 	movi	fp,16
101051cc:	e400810e 	bge	fp,r16,101053d4 <___vfprintf_internal_r+0x1594>
101051d0:	01440474 	movhi	r5,4113
101051d4:	2946a984 	addi	r5,r5,6822
101051d8:	d9402b15 	stw	r5,172(sp)
101051dc:	01c001c4 	movi	r7,7
101051e0:	dcc02c17 	ldw	r19,176(sp)
101051e4:	00000306 	br	101051f4 <___vfprintf_internal_r+0x13b4>
101051e8:	b5800204 	addi	r22,r22,8
101051ec:	843ffc04 	addi	r16,r16,-16
101051f0:	e4007b0e 	bge	fp,r16,101053e0 <___vfprintf_internal_r+0x15a0>
101051f4:	18c00404 	addi	r3,r3,16
101051f8:	8c400044 	addi	r17,r17,1
101051fc:	b5000015 	stw	r20,0(r22)
10105200:	b7000115 	stw	fp,4(r22)
10105204:	d8c02015 	stw	r3,128(sp)
10105208:	dc401f15 	stw	r17,124(sp)
1010520c:	3c7ff60e 	bge	r7,r17,101051e8 <__alt_data_end+0xfffe51e8>
10105210:	d9801e04 	addi	r6,sp,120
10105214:	b80b883a 	mov	r5,r23
10105218:	9809883a 	mov	r4,r19
1010521c:	d9c03c15 	stw	r7,240(sp)
10105220:	0109e2c0 	call	10109e2c <__sprint_r>
10105224:	d9c03c17 	ldw	r7,240(sp)
10105228:	103c071e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010522c:	d8c02017 	ldw	r3,128(sp)
10105230:	dc401f17 	ldw	r17,124(sp)
10105234:	dd800404 	addi	r22,sp,16
10105238:	003fec06 	br	101051ec <__alt_data_end+0xfffe51ec>
1010523c:	9080100c 	andi	r2,r18,64
10105240:	d8002785 	stb	zero,158(sp)
10105244:	10010e26 	beq	r2,zero,10105680 <___vfprintf_internal_r+0x1840>
10105248:	d9002d17 	ldw	r4,180(sp)
1010524c:	d9402917 	ldw	r5,164(sp)
10105250:	002d883a 	mov	r22,zero
10105254:	20800104 	addi	r2,r4,4
10105258:	24c0000b 	ldhu	r19,0(r4)
1010525c:	283fc90e 	bge	r5,zero,10105184 <__alt_data_end+0xfffe5184>
10105260:	d8802d15 	stw	r2,180(sp)
10105264:	0039883a 	mov	fp,zero
10105268:	9d84b03a 	or	r2,r19,r22
1010526c:	103c461e 	bne	r2,zero,10104388 <__alt_data_end+0xfffe4388>
10105270:	00800044 	movi	r2,1
10105274:	003e6c06 	br	10104c28 <__alt_data_end+0xfffe4c28>
10105278:	d9002c17 	ldw	r4,176(sp)
1010527c:	d9801e04 	addi	r6,sp,120
10105280:	b80b883a 	mov	r5,r23
10105284:	0109e2c0 	call	10109e2c <__sprint_r>
10105288:	103bef1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010528c:	d8c02017 	ldw	r3,128(sp)
10105290:	da000404 	addi	r8,sp,16
10105294:	d9003217 	ldw	r4,200(sp)
10105298:	d8802617 	ldw	r2,152(sp)
1010529c:	d9403317 	ldw	r5,204(sp)
101052a0:	8123883a 	add	r17,r16,r4
101052a4:	11400216 	blt	r2,r5,101052b0 <___vfprintf_internal_r+0x1470>
101052a8:	9100004c 	andi	r4,r18,1
101052ac:	20000d26 	beq	r4,zero,101052e4 <___vfprintf_internal_r+0x14a4>
101052b0:	d9003717 	ldw	r4,220(sp)
101052b4:	d9403417 	ldw	r5,208(sp)
101052b8:	1907883a 	add	r3,r3,r4
101052bc:	d9001f17 	ldw	r4,124(sp)
101052c0:	41400015 	stw	r5,0(r8)
101052c4:	d9403717 	ldw	r5,220(sp)
101052c8:	21000044 	addi	r4,r4,1
101052cc:	d8c02015 	stw	r3,128(sp)
101052d0:	41400115 	stw	r5,4(r8)
101052d4:	d9001f15 	stw	r4,124(sp)
101052d8:	014001c4 	movi	r5,7
101052dc:	2901e816 	blt	r5,r4,10105a80 <___vfprintf_internal_r+0x1c40>
101052e0:	42000204 	addi	r8,r8,8
101052e4:	d9003317 	ldw	r4,204(sp)
101052e8:	8121883a 	add	r16,r16,r4
101052ec:	2085c83a 	sub	r2,r4,r2
101052f0:	8461c83a 	sub	r16,r16,r17
101052f4:	1400010e 	bge	r2,r16,101052fc <___vfprintf_internal_r+0x14bc>
101052f8:	1021883a 	mov	r16,r2
101052fc:	04000a0e 	bge	zero,r16,10105328 <___vfprintf_internal_r+0x14e8>
10105300:	d9001f17 	ldw	r4,124(sp)
10105304:	1c07883a 	add	r3,r3,r16
10105308:	44400015 	stw	r17,0(r8)
1010530c:	21000044 	addi	r4,r4,1
10105310:	44000115 	stw	r16,4(r8)
10105314:	d8c02015 	stw	r3,128(sp)
10105318:	d9001f15 	stw	r4,124(sp)
1010531c:	014001c4 	movi	r5,7
10105320:	2901fb16 	blt	r5,r4,10105b10 <___vfprintf_internal_r+0x1cd0>
10105324:	42000204 	addi	r8,r8,8
10105328:	8001f716 	blt	r16,zero,10105b08 <___vfprintf_internal_r+0x1cc8>
1010532c:	1421c83a 	sub	r16,r2,r16
10105330:	043d380e 	bge	zero,r16,10104814 <__alt_data_end+0xfffe4814>
10105334:	04400404 	movi	r17,16
10105338:	d8801f17 	ldw	r2,124(sp)
1010533c:	8c3efb0e 	bge	r17,r16,10104f2c <__alt_data_end+0xfffe4f2c>
10105340:	01440474 	movhi	r5,4113
10105344:	2946a984 	addi	r5,r5,6822
10105348:	d9402b15 	stw	r5,172(sp)
1010534c:	058001c4 	movi	r22,7
10105350:	dcc02c17 	ldw	r19,176(sp)
10105354:	00000306 	br	10105364 <___vfprintf_internal_r+0x1524>
10105358:	42000204 	addi	r8,r8,8
1010535c:	843ffc04 	addi	r16,r16,-16
10105360:	8c3ef50e 	bge	r17,r16,10104f38 <__alt_data_end+0xfffe4f38>
10105364:	18c00404 	addi	r3,r3,16
10105368:	10800044 	addi	r2,r2,1
1010536c:	45000015 	stw	r20,0(r8)
10105370:	44400115 	stw	r17,4(r8)
10105374:	d8c02015 	stw	r3,128(sp)
10105378:	d8801f15 	stw	r2,124(sp)
1010537c:	b0bff60e 	bge	r22,r2,10105358 <__alt_data_end+0xfffe5358>
10105380:	d9801e04 	addi	r6,sp,120
10105384:	b80b883a 	mov	r5,r23
10105388:	9809883a 	mov	r4,r19
1010538c:	0109e2c0 	call	10109e2c <__sprint_r>
10105390:	103bad1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105394:	d8c02017 	ldw	r3,128(sp)
10105398:	d8801f17 	ldw	r2,124(sp)
1010539c:	da000404 	addi	r8,sp,16
101053a0:	003fee06 	br	1010535c <__alt_data_end+0xfffe535c>
101053a4:	9088703a 	and	r4,r18,r2
101053a8:	203eab1e 	bne	r4,zero,10104e58 <__alt_data_end+0xfffe4e58>
101053ac:	dc401f17 	ldw	r17,124(sp)
101053b0:	40800115 	stw	r2,4(r8)
101053b4:	44000015 	stw	r16,0(r8)
101053b8:	8c400044 	addi	r17,r17,1
101053bc:	d8c02015 	stw	r3,128(sp)
101053c0:	dc401f15 	stw	r17,124(sp)
101053c4:	008001c4 	movi	r2,7
101053c8:	14400e16 	blt	r2,r17,10105404 <___vfprintf_internal_r+0x15c4>
101053cc:	45800204 	addi	r22,r8,8
101053d0:	003eca06 	br	10104efc <__alt_data_end+0xfffe4efc>
101053d4:	01040474 	movhi	r4,4113
101053d8:	2106a984 	addi	r4,r4,6822
101053dc:	d9002b15 	stw	r4,172(sp)
101053e0:	d8802b17 	ldw	r2,172(sp)
101053e4:	1c07883a 	add	r3,r3,r16
101053e8:	8c400044 	addi	r17,r17,1
101053ec:	b0800015 	stw	r2,0(r22)
101053f0:	b4000115 	stw	r16,4(r22)
101053f4:	d8c02015 	stw	r3,128(sp)
101053f8:	dc401f15 	stw	r17,124(sp)
101053fc:	008001c4 	movi	r2,7
10105400:	147ebd0e 	bge	r2,r17,10104ef8 <__alt_data_end+0xfffe4ef8>
10105404:	d9002c17 	ldw	r4,176(sp)
10105408:	d9801e04 	addi	r6,sp,120
1010540c:	b80b883a 	mov	r5,r23
10105410:	0109e2c0 	call	10109e2c <__sprint_r>
10105414:	103b8c1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105418:	d8c02017 	ldw	r3,128(sp)
1010541c:	dc401f17 	ldw	r17,124(sp)
10105420:	dd800404 	addi	r22,sp,16
10105424:	003eb506 	br	10104efc <__alt_data_end+0xfffe4efc>
10105428:	d9002c17 	ldw	r4,176(sp)
1010542c:	d9801e04 	addi	r6,sp,120
10105430:	b80b883a 	mov	r5,r23
10105434:	0109e2c0 	call	10109e2c <__sprint_r>
10105438:	103b831e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010543c:	d8c02017 	ldw	r3,128(sp)
10105440:	dc401f17 	ldw	r17,124(sp)
10105444:	da000404 	addi	r8,sp,16
10105448:	003e8d06 	br	10104e80 <__alt_data_end+0xfffe4e80>
1010544c:	d9002c17 	ldw	r4,176(sp)
10105450:	d9801e04 	addi	r6,sp,120
10105454:	b80b883a 	mov	r5,r23
10105458:	0109e2c0 	call	10109e2c <__sprint_r>
1010545c:	103b7a1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105460:	d8c02017 	ldw	r3,128(sp)
10105464:	dc401f17 	ldw	r17,124(sp)
10105468:	dd800404 	addi	r22,sp,16
1010546c:	003e8f06 	br	10104eac <__alt_data_end+0xfffe4eac>
10105470:	0027883a 	mov	r19,zero
10105474:	003f4a06 	br	101051a0 <__alt_data_end+0xfffe51a0>
10105478:	d9002c17 	ldw	r4,176(sp)
1010547c:	d9801e04 	addi	r6,sp,120
10105480:	b80b883a 	mov	r5,r23
10105484:	0109e2c0 	call	10109e2c <__sprint_r>
10105488:	103b6f1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010548c:	d8c02017 	ldw	r3,128(sp)
10105490:	da000404 	addi	r8,sp,16
10105494:	003c9d06 	br	1010470c <__alt_data_end+0xfffe470c>
10105498:	04e7c83a 	sub	r19,zero,r19
1010549c:	9804c03a 	cmpne	r2,r19,zero
101054a0:	05adc83a 	sub	r22,zero,r22
101054a4:	b0adc83a 	sub	r22,r22,r2
101054a8:	d8802917 	ldw	r2,164(sp)
101054ac:	07000b44 	movi	fp,45
101054b0:	df002785 	stb	fp,158(sp)
101054b4:	10017b16 	blt	r2,zero,10105aa4 <___vfprintf_internal_r+0x1c64>
101054b8:	00bfdfc4 	movi	r2,-129
101054bc:	90a4703a 	and	r18,r18,r2
101054c0:	003bb106 	br	10104388 <__alt_data_end+0xfffe4388>
101054c4:	d9003617 	ldw	r4,216(sp)
101054c8:	d9403817 	ldw	r5,224(sp)
101054cc:	da003d15 	stw	r8,244(sp)
101054d0:	0109be00 	call	10109be0 <__fpclassifyd>
101054d4:	da003d17 	ldw	r8,244(sp)
101054d8:	1000f026 	beq	r2,zero,1010589c <___vfprintf_internal_r+0x1a5c>
101054dc:	d9002917 	ldw	r4,164(sp)
101054e0:	05bff7c4 	movi	r22,-33
101054e4:	00bfffc4 	movi	r2,-1
101054e8:	8dac703a 	and	r22,r17,r22
101054ec:	20820026 	beq	r4,r2,10105cf0 <___vfprintf_internal_r+0x1eb0>
101054f0:	008011c4 	movi	r2,71
101054f4:	b081f726 	beq	r22,r2,10105cd4 <___vfprintf_internal_r+0x1e94>
101054f8:	d9003817 	ldw	r4,224(sp)
101054fc:	90c04014 	ori	r3,r18,256
10105500:	d8c02b15 	stw	r3,172(sp)
10105504:	20021516 	blt	r4,zero,10105d5c <___vfprintf_internal_r+0x1f1c>
10105508:	dcc03817 	ldw	r19,224(sp)
1010550c:	d8002a05 	stb	zero,168(sp)
10105510:	00801984 	movi	r2,102
10105514:	8881f926 	beq	r17,r2,10105cfc <___vfprintf_internal_r+0x1ebc>
10105518:	00801184 	movi	r2,70
1010551c:	88821c26 	beq	r17,r2,10105d90 <___vfprintf_internal_r+0x1f50>
10105520:	00801144 	movi	r2,69
10105524:	b081ef26 	beq	r22,r2,10105ce4 <___vfprintf_internal_r+0x1ea4>
10105528:	d8c02917 	ldw	r3,164(sp)
1010552c:	d8802104 	addi	r2,sp,132
10105530:	d8800315 	stw	r2,12(sp)
10105534:	d9403617 	ldw	r5,216(sp)
10105538:	d8802504 	addi	r2,sp,148
1010553c:	d9002c17 	ldw	r4,176(sp)
10105540:	d8800215 	stw	r2,8(sp)
10105544:	d8802604 	addi	r2,sp,152
10105548:	d8c00015 	stw	r3,0(sp)
1010554c:	d8800115 	stw	r2,4(sp)
10105550:	01c00084 	movi	r7,2
10105554:	980d883a 	mov	r6,r19
10105558:	d8c03c15 	stw	r3,240(sp)
1010555c:	da003d15 	stw	r8,244(sp)
10105560:	01065180 	call	10106518 <_dtoa_r>
10105564:	1021883a 	mov	r16,r2
10105568:	008019c4 	movi	r2,103
1010556c:	d8c03c17 	ldw	r3,240(sp)
10105570:	da003d17 	ldw	r8,244(sp)
10105574:	88817126 	beq	r17,r2,10105b3c <___vfprintf_internal_r+0x1cfc>
10105578:	008011c4 	movi	r2,71
1010557c:	88829226 	beq	r17,r2,10105fc8 <___vfprintf_internal_r+0x2188>
10105580:	80f9883a 	add	fp,r16,r3
10105584:	d9003617 	ldw	r4,216(sp)
10105588:	000d883a 	mov	r6,zero
1010558c:	000f883a 	mov	r7,zero
10105590:	980b883a 	mov	r5,r19
10105594:	da003d15 	stw	r8,244(sp)
10105598:	010d5c80 	call	1010d5c8 <__eqdf2>
1010559c:	da003d17 	ldw	r8,244(sp)
101055a0:	10018d26 	beq	r2,zero,10105bd8 <___vfprintf_internal_r+0x1d98>
101055a4:	d8802117 	ldw	r2,132(sp)
101055a8:	1700062e 	bgeu	r2,fp,101055c4 <___vfprintf_internal_r+0x1784>
101055ac:	01000c04 	movi	r4,48
101055b0:	10c00044 	addi	r3,r2,1
101055b4:	d8c02115 	stw	r3,132(sp)
101055b8:	11000005 	stb	r4,0(r2)
101055bc:	d8802117 	ldw	r2,132(sp)
101055c0:	173ffb36 	bltu	r2,fp,101055b0 <__alt_data_end+0xfffe55b0>
101055c4:	1405c83a 	sub	r2,r2,r16
101055c8:	d8803315 	stw	r2,204(sp)
101055cc:	008011c4 	movi	r2,71
101055d0:	b0817626 	beq	r22,r2,10105bac <___vfprintf_internal_r+0x1d6c>
101055d4:	00801944 	movi	r2,101
101055d8:	1442810e 	bge	r2,r17,10105fe0 <___vfprintf_internal_r+0x21a0>
101055dc:	d8c02617 	ldw	r3,152(sp)
101055e0:	00801984 	movi	r2,102
101055e4:	d8c03215 	stw	r3,200(sp)
101055e8:	8881fe26 	beq	r17,r2,10105de4 <___vfprintf_internal_r+0x1fa4>
101055ec:	d8c03217 	ldw	r3,200(sp)
101055f0:	d9003317 	ldw	r4,204(sp)
101055f4:	1901dd16 	blt	r3,r4,10105d6c <___vfprintf_internal_r+0x1f2c>
101055f8:	9480004c 	andi	r18,r18,1
101055fc:	90022b1e 	bne	r18,zero,10105eac <___vfprintf_internal_r+0x206c>
10105600:	1805883a 	mov	r2,r3
10105604:	18028016 	blt	r3,zero,10106008 <___vfprintf_internal_r+0x21c8>
10105608:	d8c03217 	ldw	r3,200(sp)
1010560c:	044019c4 	movi	r17,103
10105610:	d8c02e15 	stw	r3,184(sp)
10105614:	df002a07 	ldb	fp,168(sp)
10105618:	e001531e 	bne	fp,zero,10105b68 <___vfprintf_internal_r+0x1d28>
1010561c:	df002783 	ldbu	fp,158(sp)
10105620:	d8802a15 	stw	r2,168(sp)
10105624:	dc802b17 	ldw	r18,172(sp)
10105628:	d8002915 	stw	zero,164(sp)
1010562c:	003bd106 	br	10104574 <__alt_data_end+0xfffe4574>
10105630:	d8802d17 	ldw	r2,180(sp)
10105634:	d8c02d17 	ldw	r3,180(sp)
10105638:	d9002d17 	ldw	r4,180(sp)
1010563c:	10800017 	ldw	r2,0(r2)
10105640:	18c00117 	ldw	r3,4(r3)
10105644:	21000204 	addi	r4,r4,8
10105648:	d8803615 	stw	r2,216(sp)
1010564c:	d8c03815 	stw	r3,224(sp)
10105650:	d9002d15 	stw	r4,180(sp)
10105654:	003b7506 	br	1010442c <__alt_data_end+0xfffe442c>
10105658:	ac400007 	ldb	r17,0(r21)
1010565c:	003a5906 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10105660:	9080100c 	andi	r2,r18,64
10105664:	1000a826 	beq	r2,zero,10105908 <___vfprintf_internal_r+0x1ac8>
10105668:	d9002d17 	ldw	r4,180(sp)
1010566c:	002d883a 	mov	r22,zero
10105670:	24c0000b 	ldhu	r19,0(r4)
10105674:	21000104 	addi	r4,r4,4
10105678:	d9002d15 	stw	r4,180(sp)
1010567c:	003ccb06 	br	101049ac <__alt_data_end+0xfffe49ac>
10105680:	d8c02d17 	ldw	r3,180(sp)
10105684:	d9002917 	ldw	r4,164(sp)
10105688:	002d883a 	mov	r22,zero
1010568c:	18800104 	addi	r2,r3,4
10105690:	1cc00017 	ldw	r19,0(r3)
10105694:	203ebb0e 	bge	r4,zero,10105184 <__alt_data_end+0xfffe5184>
10105698:	003ef106 	br	10105260 <__alt_data_end+0xfffe5260>
1010569c:	9080040c 	andi	r2,r18,16
101056a0:	1000921e 	bne	r2,zero,101058ec <___vfprintf_internal_r+0x1aac>
101056a4:	9480100c 	andi	r18,r18,64
101056a8:	90013926 	beq	r18,zero,10105b90 <___vfprintf_internal_r+0x1d50>
101056ac:	d9002d17 	ldw	r4,180(sp)
101056b0:	d9402f17 	ldw	r5,188(sp)
101056b4:	20800017 	ldw	r2,0(r4)
101056b8:	21000104 	addi	r4,r4,4
101056bc:	d9002d15 	stw	r4,180(sp)
101056c0:	1140000d 	sth	r5,0(r2)
101056c4:	003a1606 	br	10103f20 <__alt_data_end+0xfffe3f20>
101056c8:	9080100c 	andi	r2,r18,64
101056cc:	10008026 	beq	r2,zero,101058d0 <___vfprintf_internal_r+0x1a90>
101056d0:	d8c02d17 	ldw	r3,180(sp)
101056d4:	1cc0000f 	ldh	r19,0(r3)
101056d8:	18c00104 	addi	r3,r3,4
101056dc:	d8c02d15 	stw	r3,180(sp)
101056e0:	982dd7fa 	srai	r22,r19,31
101056e4:	b005883a 	mov	r2,r22
101056e8:	003b1f06 	br	10104368 <__alt_data_end+0xfffe4368>
101056ec:	9080100c 	andi	r2,r18,64
101056f0:	d8002785 	stb	zero,158(sp)
101056f4:	10008a1e 	bne	r2,zero,10105920 <___vfprintf_internal_r+0x1ae0>
101056f8:	d9402d17 	ldw	r5,180(sp)
101056fc:	d8c02917 	ldw	r3,164(sp)
10105700:	002d883a 	mov	r22,zero
10105704:	28800104 	addi	r2,r5,4
10105708:	2cc00017 	ldw	r19,0(r5)
1010570c:	183e4b0e 	bge	r3,zero,1010503c <__alt_data_end+0xfffe503c>
10105710:	9d86b03a 	or	r3,r19,r22
10105714:	d8802d15 	stw	r2,180(sp)
10105718:	183e4c1e 	bne	r3,zero,1010504c <__alt_data_end+0xfffe504c>
1010571c:	0039883a 	mov	fp,zero
10105720:	0005883a 	mov	r2,zero
10105724:	003d4006 	br	10104c28 <__alt_data_end+0xfffe4c28>
10105728:	01440474 	movhi	r5,4113
1010572c:	2946a984 	addi	r5,r5,6822
10105730:	d9402b15 	stw	r5,172(sp)
10105734:	d9402b17 	ldw	r5,172(sp)
10105738:	1c47883a 	add	r3,r3,r17
1010573c:	10800044 	addi	r2,r2,1
10105740:	41400015 	stw	r5,0(r8)
10105744:	44400115 	stw	r17,4(r8)
10105748:	d8c02015 	stw	r3,128(sp)
1010574c:	d8801f15 	stw	r2,124(sp)
10105750:	010001c4 	movi	r4,7
10105754:	20bec816 	blt	r4,r2,10105278 <__alt_data_end+0xfffe5278>
10105758:	42000204 	addi	r8,r8,8
1010575c:	003ecd06 	br	10105294 <__alt_data_end+0xfffe5294>
10105760:	d9002917 	ldw	r4,164(sp)
10105764:	d8002785 	stb	zero,158(sp)
10105768:	203d2d16 	blt	r4,zero,10104c20 <__alt_data_end+0xfffe4c20>
1010576c:	00bfdfc4 	movi	r2,-129
10105770:	90a4703a 	and	r18,r18,r2
10105774:	003a9106 	br	101041bc <__alt_data_end+0xfffe41bc>
10105778:	01040474 	movhi	r4,4113
1010577c:	2106a984 	addi	r4,r4,6822
10105780:	d9002b15 	stw	r4,172(sp)
10105784:	003c0c06 	br	101047b8 <__alt_data_end+0xfffe47b8>
10105788:	d9002c17 	ldw	r4,176(sp)
1010578c:	d9801e04 	addi	r6,sp,120
10105790:	b80b883a 	mov	r5,r23
10105794:	0109e2c0 	call	10109e2c <__sprint_r>
10105798:	103aab1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010579c:	d8c02017 	ldw	r3,128(sp)
101057a0:	da000404 	addi	r8,sp,16
101057a4:	003d4106 	br	10104cac <__alt_data_end+0xfffe4cac>
101057a8:	d8801f17 	ldw	r2,124(sp)
101057ac:	01440474 	movhi	r5,4113
101057b0:	01000044 	movi	r4,1
101057b4:	18c00044 	addi	r3,r3,1
101057b8:	10800044 	addi	r2,r2,1
101057bc:	2946a904 	addi	r5,r5,6820
101057c0:	41000115 	stw	r4,4(r8)
101057c4:	41400015 	stw	r5,0(r8)
101057c8:	d8c02015 	stw	r3,128(sp)
101057cc:	d8801f15 	stw	r2,124(sp)
101057d0:	010001c4 	movi	r4,7
101057d4:	20805c16 	blt	r4,r2,10105948 <___vfprintf_internal_r+0x1b08>
101057d8:	42000204 	addi	r8,r8,8
101057dc:	8800041e 	bne	r17,zero,101057f0 <___vfprintf_internal_r+0x19b0>
101057e0:	d8803317 	ldw	r2,204(sp)
101057e4:	1000021e 	bne	r2,zero,101057f0 <___vfprintf_internal_r+0x19b0>
101057e8:	9080004c 	andi	r2,r18,1
101057ec:	103c0926 	beq	r2,zero,10104814 <__alt_data_end+0xfffe4814>
101057f0:	d9003717 	ldw	r4,220(sp)
101057f4:	d8801f17 	ldw	r2,124(sp)
101057f8:	d9403417 	ldw	r5,208(sp)
101057fc:	20c7883a 	add	r3,r4,r3
10105800:	10800044 	addi	r2,r2,1
10105804:	41000115 	stw	r4,4(r8)
10105808:	41400015 	stw	r5,0(r8)
1010580c:	d8c02015 	stw	r3,128(sp)
10105810:	d8801f15 	stw	r2,124(sp)
10105814:	010001c4 	movi	r4,7
10105818:	20812116 	blt	r4,r2,10105ca0 <___vfprintf_internal_r+0x1e60>
1010581c:	42000204 	addi	r8,r8,8
10105820:	0463c83a 	sub	r17,zero,r17
10105824:	0440730e 	bge	zero,r17,101059f4 <___vfprintf_internal_r+0x1bb4>
10105828:	05800404 	movi	r22,16
1010582c:	b440860e 	bge	r22,r17,10105a48 <___vfprintf_internal_r+0x1c08>
10105830:	01440474 	movhi	r5,4113
10105834:	2946a984 	addi	r5,r5,6822
10105838:	d9402b15 	stw	r5,172(sp)
1010583c:	070001c4 	movi	fp,7
10105840:	dcc02c17 	ldw	r19,176(sp)
10105844:	00000306 	br	10105854 <___vfprintf_internal_r+0x1a14>
10105848:	42000204 	addi	r8,r8,8
1010584c:	8c7ffc04 	addi	r17,r17,-16
10105850:	b440800e 	bge	r22,r17,10105a54 <___vfprintf_internal_r+0x1c14>
10105854:	18c00404 	addi	r3,r3,16
10105858:	10800044 	addi	r2,r2,1
1010585c:	45000015 	stw	r20,0(r8)
10105860:	45800115 	stw	r22,4(r8)
10105864:	d8c02015 	stw	r3,128(sp)
10105868:	d8801f15 	stw	r2,124(sp)
1010586c:	e0bff60e 	bge	fp,r2,10105848 <__alt_data_end+0xfffe5848>
10105870:	d9801e04 	addi	r6,sp,120
10105874:	b80b883a 	mov	r5,r23
10105878:	9809883a 	mov	r4,r19
1010587c:	0109e2c0 	call	10109e2c <__sprint_r>
10105880:	103a711e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105884:	d8c02017 	ldw	r3,128(sp)
10105888:	d8801f17 	ldw	r2,124(sp)
1010588c:	da000404 	addi	r8,sp,16
10105890:	003fee06 	br	1010584c <__alt_data_end+0xfffe584c>
10105894:	00bfffc4 	movi	r2,-1
10105898:	003a6f06 	br	10104258 <__alt_data_end+0xfffe4258>
1010589c:	008011c4 	movi	r2,71
101058a0:	1440b816 	blt	r2,r17,10105b84 <___vfprintf_internal_r+0x1d44>
101058a4:	04040474 	movhi	r16,4113
101058a8:	84069b04 	addi	r16,r16,6764
101058ac:	00c000c4 	movi	r3,3
101058b0:	00bfdfc4 	movi	r2,-129
101058b4:	d8c02a15 	stw	r3,168(sp)
101058b8:	90a4703a 	and	r18,r18,r2
101058bc:	df002783 	ldbu	fp,158(sp)
101058c0:	d8c02e15 	stw	r3,184(sp)
101058c4:	d8002915 	stw	zero,164(sp)
101058c8:	d8003215 	stw	zero,200(sp)
101058cc:	003b2906 	br	10104574 <__alt_data_end+0xfffe4574>
101058d0:	d9002d17 	ldw	r4,180(sp)
101058d4:	24c00017 	ldw	r19,0(r4)
101058d8:	21000104 	addi	r4,r4,4
101058dc:	d9002d15 	stw	r4,180(sp)
101058e0:	982dd7fa 	srai	r22,r19,31
101058e4:	b005883a 	mov	r2,r22
101058e8:	003a9f06 	br	10104368 <__alt_data_end+0xfffe4368>
101058ec:	d9402d17 	ldw	r5,180(sp)
101058f0:	d8c02f17 	ldw	r3,188(sp)
101058f4:	28800017 	ldw	r2,0(r5)
101058f8:	29400104 	addi	r5,r5,4
101058fc:	d9402d15 	stw	r5,180(sp)
10105900:	10c00015 	stw	r3,0(r2)
10105904:	00398606 	br	10103f20 <__alt_data_end+0xfffe3f20>
10105908:	d9402d17 	ldw	r5,180(sp)
1010590c:	002d883a 	mov	r22,zero
10105910:	2cc00017 	ldw	r19,0(r5)
10105914:	29400104 	addi	r5,r5,4
10105918:	d9402d15 	stw	r5,180(sp)
1010591c:	003c2306 	br	101049ac <__alt_data_end+0xfffe49ac>
10105920:	d8c02d17 	ldw	r3,180(sp)
10105924:	d9002917 	ldw	r4,164(sp)
10105928:	002d883a 	mov	r22,zero
1010592c:	18800104 	addi	r2,r3,4
10105930:	1cc0000b 	ldhu	r19,0(r3)
10105934:	203dc10e 	bge	r4,zero,1010503c <__alt_data_end+0xfffe503c>
10105938:	003f7506 	br	10105710 <__alt_data_end+0xfffe5710>
1010593c:	04040474 	movhi	r16,4113
10105940:	84069904 	addi	r16,r16,6756
10105944:	003acc06 	br	10104478 <__alt_data_end+0xfffe4478>
10105948:	d9002c17 	ldw	r4,176(sp)
1010594c:	d9801e04 	addi	r6,sp,120
10105950:	b80b883a 	mov	r5,r23
10105954:	0109e2c0 	call	10109e2c <__sprint_r>
10105958:	103a3b1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
1010595c:	dc402617 	ldw	r17,152(sp)
10105960:	d8c02017 	ldw	r3,128(sp)
10105964:	da000404 	addi	r8,sp,16
10105968:	003f9c06 	br	101057dc <__alt_data_end+0xfffe57dc>
1010596c:	ac400043 	ldbu	r17,1(r21)
10105970:	94800814 	ori	r18,r18,32
10105974:	ad400044 	addi	r21,r21,1
10105978:	8c403fcc 	andi	r17,r17,255
1010597c:	8c40201c 	xori	r17,r17,128
10105980:	8c7fe004 	addi	r17,r17,-128
10105984:	00398f06 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10105988:	d8c02d15 	stw	r3,180(sp)
1010598c:	0039883a 	mov	fp,zero
10105990:	003e3506 	br	10105268 <__alt_data_end+0xfffe5268>
10105994:	d9002c17 	ldw	r4,176(sp)
10105998:	d9801e04 	addi	r6,sp,120
1010599c:	b80b883a 	mov	r5,r23
101059a0:	0109e2c0 	call	10109e2c <__sprint_r>
101059a4:	103a281e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
101059a8:	d8c02017 	ldw	r3,128(sp)
101059ac:	da000404 	addi	r8,sp,16
101059b0:	003cd006 	br	10104cf4 <__alt_data_end+0xfffe4cf4>
101059b4:	8009883a 	mov	r4,r16
101059b8:	da003d15 	stw	r8,244(sp)
101059bc:	0103da80 	call	10103da8 <strlen>
101059c0:	d8802e15 	stw	r2,184(sp)
101059c4:	da003d17 	ldw	r8,244(sp)
101059c8:	103c340e 	bge	r2,zero,10104a9c <__alt_data_end+0xfffe4a9c>
101059cc:	0005883a 	mov	r2,zero
101059d0:	003c3206 	br	10104a9c <__alt_data_end+0xfffe4a9c>
101059d4:	d9002c17 	ldw	r4,176(sp)
101059d8:	d9801e04 	addi	r6,sp,120
101059dc:	b80b883a 	mov	r5,r23
101059e0:	0109e2c0 	call	10109e2c <__sprint_r>
101059e4:	103a181e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
101059e8:	d8c02017 	ldw	r3,128(sp)
101059ec:	d8801f17 	ldw	r2,124(sp)
101059f0:	da000404 	addi	r8,sp,16
101059f4:	d9403317 	ldw	r5,204(sp)
101059f8:	10800044 	addi	r2,r2,1
101059fc:	44000015 	stw	r16,0(r8)
10105a00:	28c7883a 	add	r3,r5,r3
10105a04:	003b7d06 	br	101047fc <__alt_data_end+0xfffe47fc>
10105a08:	01040474 	movhi	r4,4113
10105a0c:	2106ad84 	addi	r4,r4,6838
10105a10:	d9003515 	stw	r4,212(sp)
10105a14:	003b1406 	br	10104668 <__alt_data_end+0xfffe4668>
10105a18:	013fffc4 	movi	r4,-1
10105a1c:	003a3506 	br	101042f4 <__alt_data_end+0xfffe42f4>
10105a20:	0023883a 	mov	r17,zero
10105a24:	003d9d06 	br	1010509c <__alt_data_end+0xfffe509c>
10105a28:	d9002c17 	ldw	r4,176(sp)
10105a2c:	d9801e04 	addi	r6,sp,120
10105a30:	b80b883a 	mov	r5,r23
10105a34:	0109e2c0 	call	10109e2c <__sprint_r>
10105a38:	103a031e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105a3c:	d8c02017 	ldw	r3,128(sp)
10105a40:	da000404 	addi	r8,sp,16
10105a44:	003d9406 	br	10105098 <__alt_data_end+0xfffe5098>
10105a48:	01040474 	movhi	r4,4113
10105a4c:	2106a984 	addi	r4,r4,6822
10105a50:	d9002b15 	stw	r4,172(sp)
10105a54:	d9002b17 	ldw	r4,172(sp)
10105a58:	1c47883a 	add	r3,r3,r17
10105a5c:	10800044 	addi	r2,r2,1
10105a60:	41000015 	stw	r4,0(r8)
10105a64:	44400115 	stw	r17,4(r8)
10105a68:	d8c02015 	stw	r3,128(sp)
10105a6c:	d8801f15 	stw	r2,124(sp)
10105a70:	010001c4 	movi	r4,7
10105a74:	20bfd716 	blt	r4,r2,101059d4 <__alt_data_end+0xfffe59d4>
10105a78:	42000204 	addi	r8,r8,8
10105a7c:	003fdd06 	br	101059f4 <__alt_data_end+0xfffe59f4>
10105a80:	d9002c17 	ldw	r4,176(sp)
10105a84:	d9801e04 	addi	r6,sp,120
10105a88:	b80b883a 	mov	r5,r23
10105a8c:	0109e2c0 	call	10109e2c <__sprint_r>
10105a90:	1039ed1e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105a94:	d8802617 	ldw	r2,152(sp)
10105a98:	d8c02017 	ldw	r3,128(sp)
10105a9c:	da000404 	addi	r8,sp,16
10105aa0:	003e1006 	br	101052e4 <__alt_data_end+0xfffe52e4>
10105aa4:	00800044 	movi	r2,1
10105aa8:	10803fcc 	andi	r2,r2,255
10105aac:	00c00044 	movi	r3,1
10105ab0:	10fa3526 	beq	r2,r3,10104388 <__alt_data_end+0xfffe4388>
10105ab4:	00c00084 	movi	r3,2
10105ab8:	10fbcb26 	beq	r2,r3,101049e8 <__alt_data_end+0xfffe49e8>
10105abc:	003a8f06 	br	101044fc <__alt_data_end+0xfffe44fc>
10105ac0:	01040474 	movhi	r4,4113
10105ac4:	2106ad84 	addi	r4,r4,6838
10105ac8:	d9003515 	stw	r4,212(sp)
10105acc:	003b7606 	br	101048a8 <__alt_data_end+0xfffe48a8>
10105ad0:	d8802917 	ldw	r2,164(sp)
10105ad4:	00c00184 	movi	r3,6
10105ad8:	1880012e 	bgeu	r3,r2,10105ae0 <___vfprintf_internal_r+0x1ca0>
10105adc:	1805883a 	mov	r2,r3
10105ae0:	d8802e15 	stw	r2,184(sp)
10105ae4:	1000ef16 	blt	r2,zero,10105ea4 <___vfprintf_internal_r+0x2064>
10105ae8:	04040474 	movhi	r16,4113
10105aec:	d8802a15 	stw	r2,168(sp)
10105af0:	dcc02d15 	stw	r19,180(sp)
10105af4:	d8002915 	stw	zero,164(sp)
10105af8:	d8003215 	stw	zero,200(sp)
10105afc:	8406a704 	addi	r16,r16,6812
10105b00:	0039883a 	mov	fp,zero
10105b04:	003aa206 	br	10104590 <__alt_data_end+0xfffe4590>
10105b08:	0021883a 	mov	r16,zero
10105b0c:	003e0706 	br	1010532c <__alt_data_end+0xfffe532c>
10105b10:	d9002c17 	ldw	r4,176(sp)
10105b14:	d9801e04 	addi	r6,sp,120
10105b18:	b80b883a 	mov	r5,r23
10105b1c:	0109e2c0 	call	10109e2c <__sprint_r>
10105b20:	1039c91e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105b24:	d8802617 	ldw	r2,152(sp)
10105b28:	d9403317 	ldw	r5,204(sp)
10105b2c:	d8c02017 	ldw	r3,128(sp)
10105b30:	da000404 	addi	r8,sp,16
10105b34:	2885c83a 	sub	r2,r5,r2
10105b38:	003dfb06 	br	10105328 <__alt_data_end+0xfffe5328>
10105b3c:	9080004c 	andi	r2,r18,1
10105b40:	103e8f1e 	bne	r2,zero,10105580 <__alt_data_end+0xfffe5580>
10105b44:	d8802117 	ldw	r2,132(sp)
10105b48:	003e9e06 	br	101055c4 <__alt_data_end+0xfffe55c4>
10105b4c:	1025883a 	mov	r18,r2
10105b50:	0039883a 	mov	fp,zero
10105b54:	00800084 	movi	r2,2
10105b58:	003fd306 	br	10105aa8 <__alt_data_end+0xfffe5aa8>
10105b5c:	07000b44 	movi	fp,45
10105b60:	df002785 	stb	fp,158(sp)
10105b64:	003a4006 	br	10104468 <__alt_data_end+0xfffe4468>
10105b68:	00c00b44 	movi	r3,45
10105b6c:	d8c02785 	stb	r3,158(sp)
10105b70:	d8802a15 	stw	r2,168(sp)
10105b74:	dc802b17 	ldw	r18,172(sp)
10105b78:	d8002915 	stw	zero,164(sp)
10105b7c:	07000b44 	movi	fp,45
10105b80:	003a8006 	br	10104584 <__alt_data_end+0xfffe4584>
10105b84:	04040474 	movhi	r16,4113
10105b88:	84069c04 	addi	r16,r16,6768
10105b8c:	003f4706 	br	101058ac <__alt_data_end+0xfffe58ac>
10105b90:	d8c02d17 	ldw	r3,180(sp)
10105b94:	d9002f17 	ldw	r4,188(sp)
10105b98:	18800017 	ldw	r2,0(r3)
10105b9c:	18c00104 	addi	r3,r3,4
10105ba0:	d8c02d15 	stw	r3,180(sp)
10105ba4:	11000015 	stw	r4,0(r2)
10105ba8:	0038dd06 	br	10103f20 <__alt_data_end+0xfffe3f20>
10105bac:	dd802617 	ldw	r22,152(sp)
10105bb0:	00bfff44 	movi	r2,-3
10105bb4:	b0801c16 	blt	r22,r2,10105c28 <___vfprintf_internal_r+0x1de8>
10105bb8:	d9402917 	ldw	r5,164(sp)
10105bbc:	2d801a16 	blt	r5,r22,10105c28 <___vfprintf_internal_r+0x1de8>
10105bc0:	dd803215 	stw	r22,200(sp)
10105bc4:	003e8906 	br	101055ec <__alt_data_end+0xfffe55ec>
10105bc8:	01040474 	movhi	r4,4113
10105bcc:	2106a984 	addi	r4,r4,6822
10105bd0:	d9002b15 	stw	r4,172(sp)
10105bd4:	003c9106 	br	10104e1c <__alt_data_end+0xfffe4e1c>
10105bd8:	e005883a 	mov	r2,fp
10105bdc:	003e7906 	br	101055c4 <__alt_data_end+0xfffe55c4>
10105be0:	d9402917 	ldw	r5,164(sp)
10105be4:	df002783 	ldbu	fp,158(sp)
10105be8:	dcc02d15 	stw	r19,180(sp)
10105bec:	d9402a15 	stw	r5,168(sp)
10105bf0:	d9402e15 	stw	r5,184(sp)
10105bf4:	d8002915 	stw	zero,164(sp)
10105bf8:	d8003215 	stw	zero,200(sp)
10105bfc:	003a5d06 	br	10104574 <__alt_data_end+0xfffe4574>
10105c00:	9080004c 	andi	r2,r18,1
10105c04:	0039883a 	mov	fp,zero
10105c08:	10000426 	beq	r2,zero,10105c1c <___vfprintf_internal_r+0x1ddc>
10105c0c:	00800c04 	movi	r2,48
10105c10:	dc001dc4 	addi	r16,sp,119
10105c14:	d8801dc5 	stb	r2,119(sp)
10105c18:	003b8006 	br	10104a1c <__alt_data_end+0xfffe4a1c>
10105c1c:	d8002e15 	stw	zero,184(sp)
10105c20:	dc001e04 	addi	r16,sp,120
10105c24:	003a4d06 	br	1010455c <__alt_data_end+0xfffe455c>
10105c28:	8c7fff84 	addi	r17,r17,-2
10105c2c:	b5bfffc4 	addi	r22,r22,-1
10105c30:	dd802615 	stw	r22,152(sp)
10105c34:	dc4022c5 	stb	r17,139(sp)
10105c38:	b000bf16 	blt	r22,zero,10105f38 <___vfprintf_internal_r+0x20f8>
10105c3c:	00800ac4 	movi	r2,43
10105c40:	d8802305 	stb	r2,140(sp)
10105c44:	00800244 	movi	r2,9
10105c48:	15807016 	blt	r2,r22,10105e0c <___vfprintf_internal_r+0x1fcc>
10105c4c:	00800c04 	movi	r2,48
10105c50:	b5800c04 	addi	r22,r22,48
10105c54:	d8802345 	stb	r2,141(sp)
10105c58:	dd802385 	stb	r22,142(sp)
10105c5c:	d88023c4 	addi	r2,sp,143
10105c60:	df0022c4 	addi	fp,sp,139
10105c64:	d8c03317 	ldw	r3,204(sp)
10105c68:	1739c83a 	sub	fp,r2,fp
10105c6c:	d9003317 	ldw	r4,204(sp)
10105c70:	e0c7883a 	add	r3,fp,r3
10105c74:	df003a15 	stw	fp,232(sp)
10105c78:	d8c02e15 	stw	r3,184(sp)
10105c7c:	00800044 	movi	r2,1
10105c80:	1100b30e 	bge	r2,r4,10105f50 <___vfprintf_internal_r+0x2110>
10105c84:	d8c02e17 	ldw	r3,184(sp)
10105c88:	18c00044 	addi	r3,r3,1
10105c8c:	d8c02e15 	stw	r3,184(sp)
10105c90:	1805883a 	mov	r2,r3
10105c94:	1800ac16 	blt	r3,zero,10105f48 <___vfprintf_internal_r+0x2108>
10105c98:	d8003215 	stw	zero,200(sp)
10105c9c:	003e5d06 	br	10105614 <__alt_data_end+0xfffe5614>
10105ca0:	d9002c17 	ldw	r4,176(sp)
10105ca4:	d9801e04 	addi	r6,sp,120
10105ca8:	b80b883a 	mov	r5,r23
10105cac:	0109e2c0 	call	10109e2c <__sprint_r>
10105cb0:	1039651e 	bne	r2,zero,10104248 <__alt_data_end+0xfffe4248>
10105cb4:	dc402617 	ldw	r17,152(sp)
10105cb8:	d8c02017 	ldw	r3,128(sp)
10105cbc:	d8801f17 	ldw	r2,124(sp)
10105cc0:	da000404 	addi	r8,sp,16
10105cc4:	003ed606 	br	10105820 <__alt_data_end+0xfffe5820>
10105cc8:	582b883a 	mov	r21,r11
10105ccc:	d8002915 	stw	zero,164(sp)
10105cd0:	0038bd06 	br	10103fc8 <__alt_data_end+0xfffe3fc8>
10105cd4:	d8802917 	ldw	r2,164(sp)
10105cd8:	103e071e 	bne	r2,zero,101054f8 <__alt_data_end+0xfffe54f8>
10105cdc:	dc002915 	stw	r16,164(sp)
10105ce0:	003e0506 	br	101054f8 <__alt_data_end+0xfffe54f8>
10105ce4:	d9002917 	ldw	r4,164(sp)
10105ce8:	20c00044 	addi	r3,r4,1
10105cec:	003e0f06 	br	1010552c <__alt_data_end+0xfffe552c>
10105cf0:	01400184 	movi	r5,6
10105cf4:	d9402915 	stw	r5,164(sp)
10105cf8:	003dff06 	br	101054f8 <__alt_data_end+0xfffe54f8>
10105cfc:	d8802104 	addi	r2,sp,132
10105d00:	d8800315 	stw	r2,12(sp)
10105d04:	d8802504 	addi	r2,sp,148
10105d08:	d8800215 	stw	r2,8(sp)
10105d0c:	d8802604 	addi	r2,sp,152
10105d10:	d8800115 	stw	r2,4(sp)
10105d14:	d8802917 	ldw	r2,164(sp)
10105d18:	d9403617 	ldw	r5,216(sp)
10105d1c:	d9002c17 	ldw	r4,176(sp)
10105d20:	d8800015 	stw	r2,0(sp)
10105d24:	01c000c4 	movi	r7,3
10105d28:	980d883a 	mov	r6,r19
10105d2c:	da003d15 	stw	r8,244(sp)
10105d30:	01065180 	call	10106518 <_dtoa_r>
10105d34:	d8c02917 	ldw	r3,164(sp)
10105d38:	da003d17 	ldw	r8,244(sp)
10105d3c:	1021883a 	mov	r16,r2
10105d40:	10f9883a 	add	fp,r2,r3
10105d44:	81000007 	ldb	r4,0(r16)
10105d48:	00800c04 	movi	r2,48
10105d4c:	20805e26 	beq	r4,r2,10105ec8 <___vfprintf_internal_r+0x2088>
10105d50:	d8c02617 	ldw	r3,152(sp)
10105d54:	e0f9883a 	add	fp,fp,r3
10105d58:	003e0a06 	br	10105584 <__alt_data_end+0xfffe5584>
10105d5c:	00c00b44 	movi	r3,45
10105d60:	24e0003c 	xorhi	r19,r4,32768
10105d64:	d8c02a05 	stb	r3,168(sp)
10105d68:	003de906 	br	10105510 <__alt_data_end+0xfffe5510>
10105d6c:	d8c03217 	ldw	r3,200(sp)
10105d70:	00c07a0e 	bge	zero,r3,10105f5c <___vfprintf_internal_r+0x211c>
10105d74:	00800044 	movi	r2,1
10105d78:	d9003317 	ldw	r4,204(sp)
10105d7c:	1105883a 	add	r2,r2,r4
10105d80:	d8802e15 	stw	r2,184(sp)
10105d84:	10004e16 	blt	r2,zero,10105ec0 <___vfprintf_internal_r+0x2080>
10105d88:	044019c4 	movi	r17,103
10105d8c:	003e2106 	br	10105614 <__alt_data_end+0xfffe5614>
10105d90:	d9002917 	ldw	r4,164(sp)
10105d94:	d8802104 	addi	r2,sp,132
10105d98:	d8800315 	stw	r2,12(sp)
10105d9c:	d9000015 	stw	r4,0(sp)
10105da0:	d8802504 	addi	r2,sp,148
10105da4:	d9403617 	ldw	r5,216(sp)
10105da8:	d9002c17 	ldw	r4,176(sp)
10105dac:	d8800215 	stw	r2,8(sp)
10105db0:	d8802604 	addi	r2,sp,152
10105db4:	d8800115 	stw	r2,4(sp)
10105db8:	01c000c4 	movi	r7,3
10105dbc:	980d883a 	mov	r6,r19
10105dc0:	da003d15 	stw	r8,244(sp)
10105dc4:	01065180 	call	10106518 <_dtoa_r>
10105dc8:	d8c02917 	ldw	r3,164(sp)
10105dcc:	da003d17 	ldw	r8,244(sp)
10105dd0:	1021883a 	mov	r16,r2
10105dd4:	00801184 	movi	r2,70
10105dd8:	80f9883a 	add	fp,r16,r3
10105ddc:	88bfd926 	beq	r17,r2,10105d44 <__alt_data_end+0xfffe5d44>
10105de0:	003de806 	br	10105584 <__alt_data_end+0xfffe5584>
10105de4:	d9002917 	ldw	r4,164(sp)
10105de8:	00c04d0e 	bge	zero,r3,10105f20 <___vfprintf_internal_r+0x20e0>
10105dec:	2000441e 	bne	r4,zero,10105f00 <___vfprintf_internal_r+0x20c0>
10105df0:	9480004c 	andi	r18,r18,1
10105df4:	9000421e 	bne	r18,zero,10105f00 <___vfprintf_internal_r+0x20c0>
10105df8:	1805883a 	mov	r2,r3
10105dfc:	18007016 	blt	r3,zero,10105fc0 <___vfprintf_internal_r+0x2180>
10105e00:	d8c03217 	ldw	r3,200(sp)
10105e04:	d8c02e15 	stw	r3,184(sp)
10105e08:	003e0206 	br	10105614 <__alt_data_end+0xfffe5614>
10105e0c:	df0022c4 	addi	fp,sp,139
10105e10:	dc002915 	stw	r16,164(sp)
10105e14:	4027883a 	mov	r19,r8
10105e18:	e021883a 	mov	r16,fp
10105e1c:	b009883a 	mov	r4,r22
10105e20:	01400284 	movi	r5,10
10105e24:	010192c0 	call	1010192c <__modsi3>
10105e28:	10800c04 	addi	r2,r2,48
10105e2c:	843fffc4 	addi	r16,r16,-1
10105e30:	b009883a 	mov	r4,r22
10105e34:	01400284 	movi	r5,10
10105e38:	80800005 	stb	r2,0(r16)
10105e3c:	01018a80 	call	101018a8 <__divsi3>
10105e40:	102d883a 	mov	r22,r2
10105e44:	00800244 	movi	r2,9
10105e48:	15bff416 	blt	r2,r22,10105e1c <__alt_data_end+0xfffe5e1c>
10105e4c:	9811883a 	mov	r8,r19
10105e50:	b0800c04 	addi	r2,r22,48
10105e54:	8027883a 	mov	r19,r16
10105e58:	997fffc4 	addi	r5,r19,-1
10105e5c:	98bfffc5 	stb	r2,-1(r19)
10105e60:	dc002917 	ldw	r16,164(sp)
10105e64:	2f006a2e 	bgeu	r5,fp,10106010 <___vfprintf_internal_r+0x21d0>
10105e68:	d9c02384 	addi	r7,sp,142
10105e6c:	3ccfc83a 	sub	r7,r7,r19
10105e70:	d9002344 	addi	r4,sp,141
10105e74:	e1cf883a 	add	r7,fp,r7
10105e78:	00000106 	br	10105e80 <___vfprintf_internal_r+0x2040>
10105e7c:	28800003 	ldbu	r2,0(r5)
10105e80:	20800005 	stb	r2,0(r4)
10105e84:	21000044 	addi	r4,r4,1
10105e88:	29400044 	addi	r5,r5,1
10105e8c:	393ffb1e 	bne	r7,r4,10105e7c <__alt_data_end+0xfffe5e7c>
10105e90:	d8802304 	addi	r2,sp,140
10105e94:	14c5c83a 	sub	r2,r2,r19
10105e98:	d8c02344 	addi	r3,sp,141
10105e9c:	1885883a 	add	r2,r3,r2
10105ea0:	003f7006 	br	10105c64 <__alt_data_end+0xfffe5c64>
10105ea4:	0005883a 	mov	r2,zero
10105ea8:	003f0f06 	br	10105ae8 <__alt_data_end+0xfffe5ae8>
10105eac:	d8c03217 	ldw	r3,200(sp)
10105eb0:	18c00044 	addi	r3,r3,1
10105eb4:	d8c02e15 	stw	r3,184(sp)
10105eb8:	1805883a 	mov	r2,r3
10105ebc:	183fb20e 	bge	r3,zero,10105d88 <__alt_data_end+0xfffe5d88>
10105ec0:	0005883a 	mov	r2,zero
10105ec4:	003fb006 	br	10105d88 <__alt_data_end+0xfffe5d88>
10105ec8:	d9003617 	ldw	r4,216(sp)
10105ecc:	000d883a 	mov	r6,zero
10105ed0:	000f883a 	mov	r7,zero
10105ed4:	980b883a 	mov	r5,r19
10105ed8:	d8c03c15 	stw	r3,240(sp)
10105edc:	da003d15 	stw	r8,244(sp)
10105ee0:	010d5c80 	call	1010d5c8 <__eqdf2>
10105ee4:	d8c03c17 	ldw	r3,240(sp)
10105ee8:	da003d17 	ldw	r8,244(sp)
10105eec:	103f9826 	beq	r2,zero,10105d50 <__alt_data_end+0xfffe5d50>
10105ef0:	00800044 	movi	r2,1
10105ef4:	10c7c83a 	sub	r3,r2,r3
10105ef8:	d8c02615 	stw	r3,152(sp)
10105efc:	003f9506 	br	10105d54 <__alt_data_end+0xfffe5d54>
10105f00:	d9002917 	ldw	r4,164(sp)
10105f04:	d8c03217 	ldw	r3,200(sp)
10105f08:	20800044 	addi	r2,r4,1
10105f0c:	1885883a 	add	r2,r3,r2
10105f10:	d8802e15 	stw	r2,184(sp)
10105f14:	103dbf0e 	bge	r2,zero,10105614 <__alt_data_end+0xfffe5614>
10105f18:	0005883a 	mov	r2,zero
10105f1c:	003dbd06 	br	10105614 <__alt_data_end+0xfffe5614>
10105f20:	2000211e 	bne	r4,zero,10105fa8 <___vfprintf_internal_r+0x2168>
10105f24:	9480004c 	andi	r18,r18,1
10105f28:	90001f1e 	bne	r18,zero,10105fa8 <___vfprintf_internal_r+0x2168>
10105f2c:	00800044 	movi	r2,1
10105f30:	d8802e15 	stw	r2,184(sp)
10105f34:	003db706 	br	10105614 <__alt_data_end+0xfffe5614>
10105f38:	00800b44 	movi	r2,45
10105f3c:	05adc83a 	sub	r22,zero,r22
10105f40:	d8802305 	stb	r2,140(sp)
10105f44:	003f3f06 	br	10105c44 <__alt_data_end+0xfffe5c44>
10105f48:	0005883a 	mov	r2,zero
10105f4c:	003f5206 	br	10105c98 <__alt_data_end+0xfffe5c98>
10105f50:	90a4703a 	and	r18,r18,r2
10105f54:	903f4e26 	beq	r18,zero,10105c90 <__alt_data_end+0xfffe5c90>
10105f58:	003f4a06 	br	10105c84 <__alt_data_end+0xfffe5c84>
10105f5c:	00800084 	movi	r2,2
10105f60:	10c5c83a 	sub	r2,r2,r3
10105f64:	003f8406 	br	10105d78 <__alt_data_end+0xfffe5d78>
10105f68:	d8802d17 	ldw	r2,180(sp)
10105f6c:	d9002d17 	ldw	r4,180(sp)
10105f70:	ac400043 	ldbu	r17,1(r21)
10105f74:	10800017 	ldw	r2,0(r2)
10105f78:	582b883a 	mov	r21,r11
10105f7c:	d8802915 	stw	r2,164(sp)
10105f80:	20800104 	addi	r2,r4,4
10105f84:	d9002917 	ldw	r4,164(sp)
10105f88:	d8802d15 	stw	r2,180(sp)
10105f8c:	203e7a0e 	bge	r4,zero,10105978 <__alt_data_end+0xfffe5978>
10105f90:	8c403fcc 	andi	r17,r17,255
10105f94:	00bfffc4 	movi	r2,-1
10105f98:	8c40201c 	xori	r17,r17,128
10105f9c:	d8802915 	stw	r2,164(sp)
10105fa0:	8c7fe004 	addi	r17,r17,-128
10105fa4:	00380706 	br	10103fc4 <__alt_data_end+0xfffe3fc4>
10105fa8:	d8c02917 	ldw	r3,164(sp)
10105fac:	18c00084 	addi	r3,r3,2
10105fb0:	d8c02e15 	stw	r3,184(sp)
10105fb4:	1805883a 	mov	r2,r3
10105fb8:	183d960e 	bge	r3,zero,10105614 <__alt_data_end+0xfffe5614>
10105fbc:	003fd606 	br	10105f18 <__alt_data_end+0xfffe5f18>
10105fc0:	0005883a 	mov	r2,zero
10105fc4:	003f8e06 	br	10105e00 <__alt_data_end+0xfffe5e00>
10105fc8:	9080004c 	andi	r2,r18,1
10105fcc:	103f811e 	bne	r2,zero,10105dd4 <__alt_data_end+0xfffe5dd4>
10105fd0:	d8802117 	ldw	r2,132(sp)
10105fd4:	1405c83a 	sub	r2,r2,r16
10105fd8:	d8803315 	stw	r2,204(sp)
10105fdc:	b47ef326 	beq	r22,r17,10105bac <__alt_data_end+0xfffe5bac>
10105fe0:	dd802617 	ldw	r22,152(sp)
10105fe4:	003f1106 	br	10105c2c <__alt_data_end+0xfffe5c2c>
10105fe8:	d9c02785 	stb	r7,158(sp)
10105fec:	00390406 	br	10104400 <__alt_data_end+0xfffe4400>
10105ff0:	d9c02785 	stb	r7,158(sp)
10105ff4:	0038d306 	br	10104344 <__alt_data_end+0xfffe4344>
10105ff8:	d9c02785 	stb	r7,158(sp)
10105ffc:	003a6106 	br	10104984 <__alt_data_end+0xfffe4984>
10106000:	d9c02785 	stb	r7,158(sp)
10106004:	003af806 	br	10104be8 <__alt_data_end+0xfffe4be8>
10106008:	0005883a 	mov	r2,zero
1010600c:	003d7e06 	br	10105608 <__alt_data_end+0xfffe5608>
10106010:	d8802344 	addi	r2,sp,141
10106014:	003f1306 	br	10105c64 <__alt_data_end+0xfffe5c64>
10106018:	d9c02785 	stb	r7,158(sp)
1010601c:	00392306 	br	101044ac <__alt_data_end+0xfffe44ac>
10106020:	d9c02785 	stb	r7,158(sp)
10106024:	003aa906 	br	10104acc <__alt_data_end+0xfffe4acc>
10106028:	d9c02785 	stb	r7,158(sp)
1010602c:	003a3d06 	br	10104924 <__alt_data_end+0xfffe4924>
10106030:	d9c02785 	stb	r7,158(sp)
10106034:	003aca06 	br	10104b60 <__alt_data_end+0xfffe4b60>

10106038 <__vfprintf_internal>:
10106038:	00840474 	movhi	r2,4113
1010603c:	108e1004 	addi	r2,r2,14400
10106040:	300f883a 	mov	r7,r6
10106044:	280d883a 	mov	r6,r5
10106048:	200b883a 	mov	r5,r4
1010604c:	11000017 	ldw	r4,0(r2)
10106050:	0103e401 	jmpi	10103e40 <___vfprintf_internal_r>

10106054 <__sbprintf>:
10106054:	2880030b 	ldhu	r2,12(r5)
10106058:	2ac01917 	ldw	r11,100(r5)
1010605c:	2a80038b 	ldhu	r10,14(r5)
10106060:	2a400717 	ldw	r9,28(r5)
10106064:	2a000917 	ldw	r8,36(r5)
10106068:	defee204 	addi	sp,sp,-1144
1010606c:	00c10004 	movi	r3,1024
10106070:	dc011a15 	stw	r16,1128(sp)
10106074:	10bfff4c 	andi	r2,r2,65533
10106078:	2821883a 	mov	r16,r5
1010607c:	d8cb883a 	add	r5,sp,r3
10106080:	dc811c15 	stw	r18,1136(sp)
10106084:	dc411b15 	stw	r17,1132(sp)
10106088:	dfc11d15 	stw	ra,1140(sp)
1010608c:	2025883a 	mov	r18,r4
10106090:	d881030d 	sth	r2,1036(sp)
10106094:	dac11915 	stw	r11,1124(sp)
10106098:	da81038d 	sth	r10,1038(sp)
1010609c:	da410715 	stw	r9,1052(sp)
101060a0:	da010915 	stw	r8,1060(sp)
101060a4:	dec10015 	stw	sp,1024(sp)
101060a8:	dec10415 	stw	sp,1040(sp)
101060ac:	d8c10215 	stw	r3,1032(sp)
101060b0:	d8c10515 	stw	r3,1044(sp)
101060b4:	d8010615 	stw	zero,1048(sp)
101060b8:	0103e400 	call	10103e40 <___vfprintf_internal_r>
101060bc:	1023883a 	mov	r17,r2
101060c0:	10000416 	blt	r2,zero,101060d4 <__sbprintf+0x80>
101060c4:	d9410004 	addi	r5,sp,1024
101060c8:	9009883a 	mov	r4,r18
101060cc:	0101d7c0 	call	10101d7c <_fflush_r>
101060d0:	10000d1e 	bne	r2,zero,10106108 <__sbprintf+0xb4>
101060d4:	d881030b 	ldhu	r2,1036(sp)
101060d8:	1080100c 	andi	r2,r2,64
101060dc:	10000326 	beq	r2,zero,101060ec <__sbprintf+0x98>
101060e0:	8080030b 	ldhu	r2,12(r16)
101060e4:	10801014 	ori	r2,r2,64
101060e8:	8080030d 	sth	r2,12(r16)
101060ec:	8805883a 	mov	r2,r17
101060f0:	dfc11d17 	ldw	ra,1140(sp)
101060f4:	dc811c17 	ldw	r18,1136(sp)
101060f8:	dc411b17 	ldw	r17,1132(sp)
101060fc:	dc011a17 	ldw	r16,1128(sp)
10106100:	dec11e04 	addi	sp,sp,1144
10106104:	f800283a 	ret
10106108:	047fffc4 	movi	r17,-1
1010610c:	003ff106 	br	101060d4 <__alt_data_end+0xfffe60d4>

10106110 <_write_r>:
10106110:	defffd04 	addi	sp,sp,-12
10106114:	2805883a 	mov	r2,r5
10106118:	dc000015 	stw	r16,0(sp)
1010611c:	04040474 	movhi	r16,4113
10106120:	dc400115 	stw	r17,4(sp)
10106124:	300b883a 	mov	r5,r6
10106128:	84150804 	addi	r16,r16,21536
1010612c:	2023883a 	mov	r17,r4
10106130:	380d883a 	mov	r6,r7
10106134:	1009883a 	mov	r4,r2
10106138:	dfc00215 	stw	ra,8(sp)
1010613c:	80000015 	stw	zero,0(r16)
10106140:	010f6040 	call	1010f604 <write>
10106144:	00ffffc4 	movi	r3,-1
10106148:	10c00526 	beq	r2,r3,10106160 <_write_r+0x50>
1010614c:	dfc00217 	ldw	ra,8(sp)
10106150:	dc400117 	ldw	r17,4(sp)
10106154:	dc000017 	ldw	r16,0(sp)
10106158:	dec00304 	addi	sp,sp,12
1010615c:	f800283a 	ret
10106160:	80c00017 	ldw	r3,0(r16)
10106164:	183ff926 	beq	r3,zero,1010614c <__alt_data_end+0xfffe614c>
10106168:	88c00015 	stw	r3,0(r17)
1010616c:	003ff706 	br	1010614c <__alt_data_end+0xfffe614c>

10106170 <__swsetup_r>:
10106170:	00840474 	movhi	r2,4113
10106174:	defffd04 	addi	sp,sp,-12
10106178:	108e1004 	addi	r2,r2,14400
1010617c:	dc400115 	stw	r17,4(sp)
10106180:	2023883a 	mov	r17,r4
10106184:	11000017 	ldw	r4,0(r2)
10106188:	dc000015 	stw	r16,0(sp)
1010618c:	dfc00215 	stw	ra,8(sp)
10106190:	2821883a 	mov	r16,r5
10106194:	20000226 	beq	r4,zero,101061a0 <__swsetup_r+0x30>
10106198:	20800e17 	ldw	r2,56(r4)
1010619c:	10003126 	beq	r2,zero,10106264 <__swsetup_r+0xf4>
101061a0:	8080030b 	ldhu	r2,12(r16)
101061a4:	10c0020c 	andi	r3,r2,8
101061a8:	1009883a 	mov	r4,r2
101061ac:	18000f26 	beq	r3,zero,101061ec <__swsetup_r+0x7c>
101061b0:	80c00417 	ldw	r3,16(r16)
101061b4:	18001526 	beq	r3,zero,1010620c <__swsetup_r+0x9c>
101061b8:	1100004c 	andi	r4,r2,1
101061bc:	20001c1e 	bne	r4,zero,10106230 <__swsetup_r+0xc0>
101061c0:	1080008c 	andi	r2,r2,2
101061c4:	1000291e 	bne	r2,zero,1010626c <__swsetup_r+0xfc>
101061c8:	80800517 	ldw	r2,20(r16)
101061cc:	80800215 	stw	r2,8(r16)
101061d0:	18001c26 	beq	r3,zero,10106244 <__swsetup_r+0xd4>
101061d4:	0005883a 	mov	r2,zero
101061d8:	dfc00217 	ldw	ra,8(sp)
101061dc:	dc400117 	ldw	r17,4(sp)
101061e0:	dc000017 	ldw	r16,0(sp)
101061e4:	dec00304 	addi	sp,sp,12
101061e8:	f800283a 	ret
101061ec:	2080040c 	andi	r2,r4,16
101061f0:	10002e26 	beq	r2,zero,101062ac <__swsetup_r+0x13c>
101061f4:	2080010c 	andi	r2,r4,4
101061f8:	10001e1e 	bne	r2,zero,10106274 <__swsetup_r+0x104>
101061fc:	80c00417 	ldw	r3,16(r16)
10106200:	20800214 	ori	r2,r4,8
10106204:	8080030d 	sth	r2,12(r16)
10106208:	183feb1e 	bne	r3,zero,101061b8 <__alt_data_end+0xfffe61b8>
1010620c:	1100a00c 	andi	r4,r2,640
10106210:	01408004 	movi	r5,512
10106214:	217fe826 	beq	r4,r5,101061b8 <__alt_data_end+0xfffe61b8>
10106218:	800b883a 	mov	r5,r16
1010621c:	8809883a 	mov	r4,r17
10106220:	0102d980 	call	10102d98 <__smakebuf_r>
10106224:	8080030b 	ldhu	r2,12(r16)
10106228:	80c00417 	ldw	r3,16(r16)
1010622c:	003fe206 	br	101061b8 <__alt_data_end+0xfffe61b8>
10106230:	80800517 	ldw	r2,20(r16)
10106234:	80000215 	stw	zero,8(r16)
10106238:	0085c83a 	sub	r2,zero,r2
1010623c:	80800615 	stw	r2,24(r16)
10106240:	183fe41e 	bne	r3,zero,101061d4 <__alt_data_end+0xfffe61d4>
10106244:	80c0030b 	ldhu	r3,12(r16)
10106248:	0005883a 	mov	r2,zero
1010624c:	1900200c 	andi	r4,r3,128
10106250:	203fe126 	beq	r4,zero,101061d8 <__alt_data_end+0xfffe61d8>
10106254:	18c01014 	ori	r3,r3,64
10106258:	80c0030d 	sth	r3,12(r16)
1010625c:	00bfffc4 	movi	r2,-1
10106260:	003fdd06 	br	101061d8 <__alt_data_end+0xfffe61d8>
10106264:	01021580 	call	10102158 <__sinit>
10106268:	003fcd06 	br	101061a0 <__alt_data_end+0xfffe61a0>
1010626c:	0005883a 	mov	r2,zero
10106270:	003fd606 	br	101061cc <__alt_data_end+0xfffe61cc>
10106274:	81400c17 	ldw	r5,48(r16)
10106278:	28000626 	beq	r5,zero,10106294 <__swsetup_r+0x124>
1010627c:	80801004 	addi	r2,r16,64
10106280:	28800326 	beq	r5,r2,10106290 <__swsetup_r+0x120>
10106284:	8809883a 	mov	r4,r17
10106288:	01024240 	call	10102424 <_free_r>
1010628c:	8100030b 	ldhu	r4,12(r16)
10106290:	80000c15 	stw	zero,48(r16)
10106294:	80c00417 	ldw	r3,16(r16)
10106298:	00bff6c4 	movi	r2,-37
1010629c:	1108703a 	and	r4,r2,r4
101062a0:	80000115 	stw	zero,4(r16)
101062a4:	80c00015 	stw	r3,0(r16)
101062a8:	003fd506 	br	10106200 <__alt_data_end+0xfffe6200>
101062ac:	00800244 	movi	r2,9
101062b0:	88800015 	stw	r2,0(r17)
101062b4:	20801014 	ori	r2,r4,64
101062b8:	8080030d 	sth	r2,12(r16)
101062bc:	00bfffc4 	movi	r2,-1
101062c0:	003fc506 	br	101061d8 <__alt_data_end+0xfffe61d8>

101062c4 <_close_r>:
101062c4:	defffd04 	addi	sp,sp,-12
101062c8:	dc000015 	stw	r16,0(sp)
101062cc:	04040474 	movhi	r16,4113
101062d0:	dc400115 	stw	r17,4(sp)
101062d4:	84150804 	addi	r16,r16,21536
101062d8:	2023883a 	mov	r17,r4
101062dc:	2809883a 	mov	r4,r5
101062e0:	dfc00215 	stw	ra,8(sp)
101062e4:	80000015 	stw	zero,0(r16)
101062e8:	010eaec0 	call	1010eaec <close>
101062ec:	00ffffc4 	movi	r3,-1
101062f0:	10c00526 	beq	r2,r3,10106308 <_close_r+0x44>
101062f4:	dfc00217 	ldw	ra,8(sp)
101062f8:	dc400117 	ldw	r17,4(sp)
101062fc:	dc000017 	ldw	r16,0(sp)
10106300:	dec00304 	addi	sp,sp,12
10106304:	f800283a 	ret
10106308:	80c00017 	ldw	r3,0(r16)
1010630c:	183ff926 	beq	r3,zero,101062f4 <__alt_data_end+0xfffe62f4>
10106310:	88c00015 	stw	r3,0(r17)
10106314:	003ff706 	br	101062f4 <__alt_data_end+0xfffe62f4>

10106318 <quorem>:
10106318:	defff704 	addi	sp,sp,-36
1010631c:	dc800215 	stw	r18,8(sp)
10106320:	20800417 	ldw	r2,16(r4)
10106324:	2c800417 	ldw	r18,16(r5)
10106328:	dfc00815 	stw	ra,32(sp)
1010632c:	ddc00715 	stw	r23,28(sp)
10106330:	dd800615 	stw	r22,24(sp)
10106334:	dd400515 	stw	r21,20(sp)
10106338:	dd000415 	stw	r20,16(sp)
1010633c:	dcc00315 	stw	r19,12(sp)
10106340:	dc400115 	stw	r17,4(sp)
10106344:	dc000015 	stw	r16,0(sp)
10106348:	14807116 	blt	r2,r18,10106510 <quorem+0x1f8>
1010634c:	94bfffc4 	addi	r18,r18,-1
10106350:	94ad883a 	add	r22,r18,r18
10106354:	b5ad883a 	add	r22,r22,r22
10106358:	2c400504 	addi	r17,r5,20
1010635c:	8da9883a 	add	r20,r17,r22
10106360:	25400504 	addi	r21,r4,20
10106364:	282f883a 	mov	r23,r5
10106368:	adad883a 	add	r22,r21,r22
1010636c:	a1400017 	ldw	r5,0(r20)
10106370:	2021883a 	mov	r16,r4
10106374:	b1000017 	ldw	r4,0(r22)
10106378:	29400044 	addi	r5,r5,1
1010637c:	01019a00 	call	101019a0 <__udivsi3>
10106380:	1027883a 	mov	r19,r2
10106384:	10002c26 	beq	r2,zero,10106438 <quorem+0x120>
10106388:	a813883a 	mov	r9,r21
1010638c:	880b883a 	mov	r5,r17
10106390:	0009883a 	mov	r4,zero
10106394:	000d883a 	mov	r6,zero
10106398:	2a000017 	ldw	r8,0(r5)
1010639c:	49c00017 	ldw	r7,0(r9)
101063a0:	29400104 	addi	r5,r5,4
101063a4:	40bfffcc 	andi	r2,r8,65535
101063a8:	14c5383a 	mul	r2,r2,r19
101063ac:	4010d43a 	srli	r8,r8,16
101063b0:	38ffffcc 	andi	r3,r7,65535
101063b4:	1105883a 	add	r2,r2,r4
101063b8:	1008d43a 	srli	r4,r2,16
101063bc:	44d1383a 	mul	r8,r8,r19
101063c0:	198d883a 	add	r6,r3,r6
101063c4:	10ffffcc 	andi	r3,r2,65535
101063c8:	30c7c83a 	sub	r3,r6,r3
101063cc:	380ed43a 	srli	r7,r7,16
101063d0:	4105883a 	add	r2,r8,r4
101063d4:	180dd43a 	srai	r6,r3,16
101063d8:	113fffcc 	andi	r4,r2,65535
101063dc:	390fc83a 	sub	r7,r7,r4
101063e0:	398d883a 	add	r6,r7,r6
101063e4:	300e943a 	slli	r7,r6,16
101063e8:	18ffffcc 	andi	r3,r3,65535
101063ec:	1008d43a 	srli	r4,r2,16
101063f0:	38ceb03a 	or	r7,r7,r3
101063f4:	49c00015 	stw	r7,0(r9)
101063f8:	300dd43a 	srai	r6,r6,16
101063fc:	4a400104 	addi	r9,r9,4
10106400:	a17fe52e 	bgeu	r20,r5,10106398 <__alt_data_end+0xfffe6398>
10106404:	b0800017 	ldw	r2,0(r22)
10106408:	10000b1e 	bne	r2,zero,10106438 <quorem+0x120>
1010640c:	b0bfff04 	addi	r2,r22,-4
10106410:	a880082e 	bgeu	r21,r2,10106434 <quorem+0x11c>
10106414:	b0ffff17 	ldw	r3,-4(r22)
10106418:	18000326 	beq	r3,zero,10106428 <quorem+0x110>
1010641c:	00000506 	br	10106434 <quorem+0x11c>
10106420:	10c00017 	ldw	r3,0(r2)
10106424:	1800031e 	bne	r3,zero,10106434 <quorem+0x11c>
10106428:	10bfff04 	addi	r2,r2,-4
1010642c:	94bfffc4 	addi	r18,r18,-1
10106430:	a8bffb36 	bltu	r21,r2,10106420 <__alt_data_end+0xfffe6420>
10106434:	84800415 	stw	r18,16(r16)
10106438:	b80b883a 	mov	r5,r23
1010643c:	8009883a 	mov	r4,r16
10106440:	0108ee80 	call	10108ee8 <__mcmp>
10106444:	10002616 	blt	r2,zero,101064e0 <quorem+0x1c8>
10106448:	9cc00044 	addi	r19,r19,1
1010644c:	a805883a 	mov	r2,r21
10106450:	000b883a 	mov	r5,zero
10106454:	11000017 	ldw	r4,0(r2)
10106458:	89800017 	ldw	r6,0(r17)
1010645c:	10800104 	addi	r2,r2,4
10106460:	20ffffcc 	andi	r3,r4,65535
10106464:	194b883a 	add	r5,r3,r5
10106468:	30ffffcc 	andi	r3,r6,65535
1010646c:	28c7c83a 	sub	r3,r5,r3
10106470:	300cd43a 	srli	r6,r6,16
10106474:	2008d43a 	srli	r4,r4,16
10106478:	180bd43a 	srai	r5,r3,16
1010647c:	18ffffcc 	andi	r3,r3,65535
10106480:	2189c83a 	sub	r4,r4,r6
10106484:	2149883a 	add	r4,r4,r5
10106488:	200c943a 	slli	r6,r4,16
1010648c:	8c400104 	addi	r17,r17,4
10106490:	200bd43a 	srai	r5,r4,16
10106494:	30c6b03a 	or	r3,r6,r3
10106498:	10ffff15 	stw	r3,-4(r2)
1010649c:	a47fed2e 	bgeu	r20,r17,10106454 <__alt_data_end+0xfffe6454>
101064a0:	9485883a 	add	r2,r18,r18
101064a4:	1085883a 	add	r2,r2,r2
101064a8:	a887883a 	add	r3,r21,r2
101064ac:	18800017 	ldw	r2,0(r3)
101064b0:	10000b1e 	bne	r2,zero,101064e0 <quorem+0x1c8>
101064b4:	18bfff04 	addi	r2,r3,-4
101064b8:	a880082e 	bgeu	r21,r2,101064dc <quorem+0x1c4>
101064bc:	18ffff17 	ldw	r3,-4(r3)
101064c0:	18000326 	beq	r3,zero,101064d0 <quorem+0x1b8>
101064c4:	00000506 	br	101064dc <quorem+0x1c4>
101064c8:	10c00017 	ldw	r3,0(r2)
101064cc:	1800031e 	bne	r3,zero,101064dc <quorem+0x1c4>
101064d0:	10bfff04 	addi	r2,r2,-4
101064d4:	94bfffc4 	addi	r18,r18,-1
101064d8:	a8bffb36 	bltu	r21,r2,101064c8 <__alt_data_end+0xfffe64c8>
101064dc:	84800415 	stw	r18,16(r16)
101064e0:	9805883a 	mov	r2,r19
101064e4:	dfc00817 	ldw	ra,32(sp)
101064e8:	ddc00717 	ldw	r23,28(sp)
101064ec:	dd800617 	ldw	r22,24(sp)
101064f0:	dd400517 	ldw	r21,20(sp)
101064f4:	dd000417 	ldw	r20,16(sp)
101064f8:	dcc00317 	ldw	r19,12(sp)
101064fc:	dc800217 	ldw	r18,8(sp)
10106500:	dc400117 	ldw	r17,4(sp)
10106504:	dc000017 	ldw	r16,0(sp)
10106508:	dec00904 	addi	sp,sp,36
1010650c:	f800283a 	ret
10106510:	0005883a 	mov	r2,zero
10106514:	003ff306 	br	101064e4 <__alt_data_end+0xfffe64e4>

10106518 <_dtoa_r>:
10106518:	20801017 	ldw	r2,64(r4)
1010651c:	deffde04 	addi	sp,sp,-136
10106520:	df002015 	stw	fp,128(sp)
10106524:	dcc01b15 	stw	r19,108(sp)
10106528:	dc801a15 	stw	r18,104(sp)
1010652c:	dc401915 	stw	r17,100(sp)
10106530:	dc001815 	stw	r16,96(sp)
10106534:	dfc02115 	stw	ra,132(sp)
10106538:	ddc01f15 	stw	r23,124(sp)
1010653c:	dd801e15 	stw	r22,120(sp)
10106540:	dd401d15 	stw	r21,116(sp)
10106544:	dd001c15 	stw	r20,112(sp)
10106548:	d9c00315 	stw	r7,12(sp)
1010654c:	2039883a 	mov	fp,r4
10106550:	3023883a 	mov	r17,r6
10106554:	2825883a 	mov	r18,r5
10106558:	dc002417 	ldw	r16,144(sp)
1010655c:	3027883a 	mov	r19,r6
10106560:	10000826 	beq	r2,zero,10106584 <_dtoa_r+0x6c>
10106564:	21801117 	ldw	r6,68(r4)
10106568:	00c00044 	movi	r3,1
1010656c:	100b883a 	mov	r5,r2
10106570:	1986983a 	sll	r3,r3,r6
10106574:	11800115 	stw	r6,4(r2)
10106578:	10c00215 	stw	r3,8(r2)
1010657c:	01086c80 	call	101086c8 <_Bfree>
10106580:	e0001015 	stw	zero,64(fp)
10106584:	88002e16 	blt	r17,zero,10106640 <_dtoa_r+0x128>
10106588:	80000015 	stw	zero,0(r16)
1010658c:	889ffc2c 	andhi	r2,r17,32752
10106590:	00dffc34 	movhi	r3,32752
10106594:	10c01c26 	beq	r2,r3,10106608 <_dtoa_r+0xf0>
10106598:	000d883a 	mov	r6,zero
1010659c:	000f883a 	mov	r7,zero
101065a0:	9009883a 	mov	r4,r18
101065a4:	980b883a 	mov	r5,r19
101065a8:	010d5c80 	call	1010d5c8 <__eqdf2>
101065ac:	10002b1e 	bne	r2,zero,1010665c <_dtoa_r+0x144>
101065b0:	d9c02317 	ldw	r7,140(sp)
101065b4:	00800044 	movi	r2,1
101065b8:	38800015 	stw	r2,0(r7)
101065bc:	d8802517 	ldw	r2,148(sp)
101065c0:	10019e26 	beq	r2,zero,10106c3c <_dtoa_r+0x724>
101065c4:	d8c02517 	ldw	r3,148(sp)
101065c8:	00840474 	movhi	r2,4113
101065cc:	1086a944 	addi	r2,r2,6821
101065d0:	18800015 	stw	r2,0(r3)
101065d4:	10bfffc4 	addi	r2,r2,-1
101065d8:	dfc02117 	ldw	ra,132(sp)
101065dc:	df002017 	ldw	fp,128(sp)
101065e0:	ddc01f17 	ldw	r23,124(sp)
101065e4:	dd801e17 	ldw	r22,120(sp)
101065e8:	dd401d17 	ldw	r21,116(sp)
101065ec:	dd001c17 	ldw	r20,112(sp)
101065f0:	dcc01b17 	ldw	r19,108(sp)
101065f4:	dc801a17 	ldw	r18,104(sp)
101065f8:	dc401917 	ldw	r17,100(sp)
101065fc:	dc001817 	ldw	r16,96(sp)
10106600:	dec02204 	addi	sp,sp,136
10106604:	f800283a 	ret
10106608:	d8c02317 	ldw	r3,140(sp)
1010660c:	0089c3c4 	movi	r2,9999
10106610:	18800015 	stw	r2,0(r3)
10106614:	90017726 	beq	r18,zero,10106bf4 <_dtoa_r+0x6dc>
10106618:	00840474 	movhi	r2,4113
1010661c:	1086b504 	addi	r2,r2,6868
10106620:	d9002517 	ldw	r4,148(sp)
10106624:	203fec26 	beq	r4,zero,101065d8 <__alt_data_end+0xfffe65d8>
10106628:	10c000c7 	ldb	r3,3(r2)
1010662c:	1801781e 	bne	r3,zero,10106c10 <_dtoa_r+0x6f8>
10106630:	10c000c4 	addi	r3,r2,3
10106634:	d9802517 	ldw	r6,148(sp)
10106638:	30c00015 	stw	r3,0(r6)
1010663c:	003fe606 	br	101065d8 <__alt_data_end+0xfffe65d8>
10106640:	04e00034 	movhi	r19,32768
10106644:	9cffffc4 	addi	r19,r19,-1
10106648:	00800044 	movi	r2,1
1010664c:	8ce6703a 	and	r19,r17,r19
10106650:	80800015 	stw	r2,0(r16)
10106654:	9823883a 	mov	r17,r19
10106658:	003fcc06 	br	1010658c <__alt_data_end+0xfffe658c>
1010665c:	d8800204 	addi	r2,sp,8
10106660:	d8800015 	stw	r2,0(sp)
10106664:	d9c00104 	addi	r7,sp,4
10106668:	900b883a 	mov	r5,r18
1010666c:	980d883a 	mov	r6,r19
10106670:	e009883a 	mov	r4,fp
10106674:	8820d53a 	srli	r16,r17,20
10106678:	01092b40 	call	101092b4 <__d2b>
1010667c:	d8800915 	stw	r2,36(sp)
10106680:	8001651e 	bne	r16,zero,10106c18 <_dtoa_r+0x700>
10106684:	dd800217 	ldw	r22,8(sp)
10106688:	dc000117 	ldw	r16,4(sp)
1010668c:	00800804 	movi	r2,32
10106690:	b421883a 	add	r16,r22,r16
10106694:	80c10c84 	addi	r3,r16,1074
10106698:	10c2d10e 	bge	r2,r3,101071e0 <_dtoa_r+0xcc8>
1010669c:	00801004 	movi	r2,64
101066a0:	81010484 	addi	r4,r16,1042
101066a4:	10c7c83a 	sub	r3,r2,r3
101066a8:	9108d83a 	srl	r4,r18,r4
101066ac:	88e2983a 	sll	r17,r17,r3
101066b0:	2448b03a 	or	r4,r4,r17
101066b4:	010e9900 	call	1010e990 <__floatunsidf>
101066b8:	017f8434 	movhi	r5,65040
101066bc:	01800044 	movi	r6,1
101066c0:	1009883a 	mov	r4,r2
101066c4:	194b883a 	add	r5,r3,r5
101066c8:	843fffc4 	addi	r16,r16,-1
101066cc:	d9801115 	stw	r6,68(sp)
101066d0:	000d883a 	mov	r6,zero
101066d4:	01cffe34 	movhi	r7,16376
101066d8:	010df380 	call	1010df38 <__subdf3>
101066dc:	0198dbf4 	movhi	r6,25455
101066e0:	01cff4f4 	movhi	r7,16339
101066e4:	3190d844 	addi	r6,r6,17249
101066e8:	39e1e9c4 	addi	r7,r7,-30809
101066ec:	1009883a 	mov	r4,r2
101066f0:	180b883a 	mov	r5,r3
101066f4:	010d8200 	call	1010d820 <__muldf3>
101066f8:	01a2d874 	movhi	r6,35681
101066fc:	01cff1f4 	movhi	r7,16327
10106700:	31b22cc4 	addi	r6,r6,-14157
10106704:	39e28a04 	addi	r7,r7,-30168
10106708:	180b883a 	mov	r5,r3
1010670c:	1009883a 	mov	r4,r2
10106710:	010c4340 	call	1010c434 <__adddf3>
10106714:	8009883a 	mov	r4,r16
10106718:	1029883a 	mov	r20,r2
1010671c:	1823883a 	mov	r17,r3
10106720:	010e8b40 	call	1010e8b4 <__floatsidf>
10106724:	019427f4 	movhi	r6,20639
10106728:	01cff4f4 	movhi	r7,16339
1010672c:	319e7ec4 	addi	r6,r6,31227
10106730:	39d104c4 	addi	r7,r7,17427
10106734:	1009883a 	mov	r4,r2
10106738:	180b883a 	mov	r5,r3
1010673c:	010d8200 	call	1010d820 <__muldf3>
10106740:	100d883a 	mov	r6,r2
10106744:	180f883a 	mov	r7,r3
10106748:	a009883a 	mov	r4,r20
1010674c:	880b883a 	mov	r5,r17
10106750:	010c4340 	call	1010c434 <__adddf3>
10106754:	1009883a 	mov	r4,r2
10106758:	180b883a 	mov	r5,r3
1010675c:	1029883a 	mov	r20,r2
10106760:	1823883a 	mov	r17,r3
10106764:	010e8340 	call	1010e834 <__fixdfsi>
10106768:	000d883a 	mov	r6,zero
1010676c:	000f883a 	mov	r7,zero
10106770:	a009883a 	mov	r4,r20
10106774:	880b883a 	mov	r5,r17
10106778:	d8800515 	stw	r2,20(sp)
1010677c:	010d72c0 	call	1010d72c <__ledf2>
10106780:	10028716 	blt	r2,zero,101071a0 <_dtoa_r+0xc88>
10106784:	d8c00517 	ldw	r3,20(sp)
10106788:	00800584 	movi	r2,22
1010678c:	10c27536 	bltu	r2,r3,10107164 <_dtoa_r+0xc4c>
10106790:	180490fa 	slli	r2,r3,3
10106794:	00c40474 	movhi	r3,4113
10106798:	18c6d004 	addi	r3,r3,6976
1010679c:	1885883a 	add	r2,r3,r2
101067a0:	11000017 	ldw	r4,0(r2)
101067a4:	11400117 	ldw	r5,4(r2)
101067a8:	900d883a 	mov	r6,r18
101067ac:	980f883a 	mov	r7,r19
101067b0:	010d6500 	call	1010d650 <__gedf2>
101067b4:	00828d0e 	bge	zero,r2,101071ec <_dtoa_r+0xcd4>
101067b8:	d9000517 	ldw	r4,20(sp)
101067bc:	d8000e15 	stw	zero,56(sp)
101067c0:	213fffc4 	addi	r4,r4,-1
101067c4:	d9000515 	stw	r4,20(sp)
101067c8:	b42dc83a 	sub	r22,r22,r16
101067cc:	b5bfffc4 	addi	r22,r22,-1
101067d0:	b0026f16 	blt	r22,zero,10107190 <_dtoa_r+0xc78>
101067d4:	d8000815 	stw	zero,32(sp)
101067d8:	d9c00517 	ldw	r7,20(sp)
101067dc:	38026416 	blt	r7,zero,10107170 <_dtoa_r+0xc58>
101067e0:	b1ed883a 	add	r22,r22,r7
101067e4:	d9c00d15 	stw	r7,52(sp)
101067e8:	d8000a15 	stw	zero,40(sp)
101067ec:	d9800317 	ldw	r6,12(sp)
101067f0:	00800244 	movi	r2,9
101067f4:	11811436 	bltu	r2,r6,10106c48 <_dtoa_r+0x730>
101067f8:	00800144 	movi	r2,5
101067fc:	1184e10e 	bge	r2,r6,10107b84 <_dtoa_r+0x166c>
10106800:	31bfff04 	addi	r6,r6,-4
10106804:	d9800315 	stw	r6,12(sp)
10106808:	0023883a 	mov	r17,zero
1010680c:	d9800317 	ldw	r6,12(sp)
10106810:	008000c4 	movi	r2,3
10106814:	30836726 	beq	r6,r2,101075b4 <_dtoa_r+0x109c>
10106818:	1183410e 	bge	r2,r6,10107520 <_dtoa_r+0x1008>
1010681c:	d9c00317 	ldw	r7,12(sp)
10106820:	00800104 	movi	r2,4
10106824:	38827c26 	beq	r7,r2,10107218 <_dtoa_r+0xd00>
10106828:	00800144 	movi	r2,5
1010682c:	3884c41e 	bne	r7,r2,10107b40 <_dtoa_r+0x1628>
10106830:	00800044 	movi	r2,1
10106834:	d8800b15 	stw	r2,44(sp)
10106838:	d8c00517 	ldw	r3,20(sp)
1010683c:	d9002217 	ldw	r4,136(sp)
10106840:	1907883a 	add	r3,r3,r4
10106844:	19800044 	addi	r6,r3,1
10106848:	d8c00c15 	stw	r3,48(sp)
1010684c:	d9800615 	stw	r6,24(sp)
10106850:	0183a40e 	bge	zero,r6,101076e4 <_dtoa_r+0x11cc>
10106854:	d9800617 	ldw	r6,24(sp)
10106858:	3021883a 	mov	r16,r6
1010685c:	e0001115 	stw	zero,68(fp)
10106860:	008005c4 	movi	r2,23
10106864:	1184c92e 	bgeu	r2,r6,10107b8c <_dtoa_r+0x1674>
10106868:	00c00044 	movi	r3,1
1010686c:	00800104 	movi	r2,4
10106870:	1085883a 	add	r2,r2,r2
10106874:	11000504 	addi	r4,r2,20
10106878:	180b883a 	mov	r5,r3
1010687c:	18c00044 	addi	r3,r3,1
10106880:	313ffb2e 	bgeu	r6,r4,10106870 <__alt_data_end+0xfffe6870>
10106884:	e1401115 	stw	r5,68(fp)
10106888:	e009883a 	mov	r4,fp
1010688c:	01086200 	call	10108620 <_Balloc>
10106890:	d8800715 	stw	r2,28(sp)
10106894:	e0801015 	stw	r2,64(fp)
10106898:	00800384 	movi	r2,14
1010689c:	1400f736 	bltu	r2,r16,10106c7c <_dtoa_r+0x764>
101068a0:	8800f626 	beq	r17,zero,10106c7c <_dtoa_r+0x764>
101068a4:	d9c00517 	ldw	r7,20(sp)
101068a8:	01c39a0e 	bge	zero,r7,10107714 <_dtoa_r+0x11fc>
101068ac:	388003cc 	andi	r2,r7,15
101068b0:	100490fa 	slli	r2,r2,3
101068b4:	382bd13a 	srai	r21,r7,4
101068b8:	00c40474 	movhi	r3,4113
101068bc:	18c6d004 	addi	r3,r3,6976
101068c0:	1885883a 	add	r2,r3,r2
101068c4:	a8c0040c 	andi	r3,r21,16
101068c8:	12400017 	ldw	r9,0(r2)
101068cc:	12000117 	ldw	r8,4(r2)
101068d0:	18037926 	beq	r3,zero,101076b8 <_dtoa_r+0x11a0>
101068d4:	00840474 	movhi	r2,4113
101068d8:	1086c604 	addi	r2,r2,6936
101068dc:	11800817 	ldw	r6,32(r2)
101068e0:	11c00917 	ldw	r7,36(r2)
101068e4:	9009883a 	mov	r4,r18
101068e8:	980b883a 	mov	r5,r19
101068ec:	da001715 	stw	r8,92(sp)
101068f0:	da401615 	stw	r9,88(sp)
101068f4:	010cce00 	call	1010cce0 <__divdf3>
101068f8:	da001717 	ldw	r8,92(sp)
101068fc:	da401617 	ldw	r9,88(sp)
10106900:	ad4003cc 	andi	r21,r21,15
10106904:	040000c4 	movi	r16,3
10106908:	1023883a 	mov	r17,r2
1010690c:	1829883a 	mov	r20,r3
10106910:	a8001126 	beq	r21,zero,10106958 <_dtoa_r+0x440>
10106914:	05c40474 	movhi	r23,4113
10106918:	bdc6c604 	addi	r23,r23,6936
1010691c:	4805883a 	mov	r2,r9
10106920:	4007883a 	mov	r3,r8
10106924:	a980004c 	andi	r6,r21,1
10106928:	1009883a 	mov	r4,r2
1010692c:	a82bd07a 	srai	r21,r21,1
10106930:	180b883a 	mov	r5,r3
10106934:	30000426 	beq	r6,zero,10106948 <_dtoa_r+0x430>
10106938:	b9800017 	ldw	r6,0(r23)
1010693c:	b9c00117 	ldw	r7,4(r23)
10106940:	84000044 	addi	r16,r16,1
10106944:	010d8200 	call	1010d820 <__muldf3>
10106948:	bdc00204 	addi	r23,r23,8
1010694c:	a83ff51e 	bne	r21,zero,10106924 <__alt_data_end+0xfffe6924>
10106950:	1013883a 	mov	r9,r2
10106954:	1811883a 	mov	r8,r3
10106958:	480d883a 	mov	r6,r9
1010695c:	400f883a 	mov	r7,r8
10106960:	8809883a 	mov	r4,r17
10106964:	a00b883a 	mov	r5,r20
10106968:	010cce00 	call	1010cce0 <__divdf3>
1010696c:	d8800f15 	stw	r2,60(sp)
10106970:	d8c01015 	stw	r3,64(sp)
10106974:	d8c00e17 	ldw	r3,56(sp)
10106978:	18000626 	beq	r3,zero,10106994 <_dtoa_r+0x47c>
1010697c:	d9000f17 	ldw	r4,60(sp)
10106980:	d9401017 	ldw	r5,64(sp)
10106984:	000d883a 	mov	r6,zero
10106988:	01cffc34 	movhi	r7,16368
1010698c:	010d72c0 	call	1010d72c <__ledf2>
10106990:	10040b16 	blt	r2,zero,101079c0 <_dtoa_r+0x14a8>
10106994:	8009883a 	mov	r4,r16
10106998:	010e8b40 	call	1010e8b4 <__floatsidf>
1010699c:	d9800f17 	ldw	r6,60(sp)
101069a0:	d9c01017 	ldw	r7,64(sp)
101069a4:	1009883a 	mov	r4,r2
101069a8:	180b883a 	mov	r5,r3
101069ac:	010d8200 	call	1010d820 <__muldf3>
101069b0:	000d883a 	mov	r6,zero
101069b4:	01d00734 	movhi	r7,16412
101069b8:	1009883a 	mov	r4,r2
101069bc:	180b883a 	mov	r5,r3
101069c0:	010c4340 	call	1010c434 <__adddf3>
101069c4:	1021883a 	mov	r16,r2
101069c8:	d8800617 	ldw	r2,24(sp)
101069cc:	047f3034 	movhi	r17,64704
101069d0:	1c63883a 	add	r17,r3,r17
101069d4:	10031826 	beq	r2,zero,10107638 <_dtoa_r+0x1120>
101069d8:	d8c00517 	ldw	r3,20(sp)
101069dc:	db000617 	ldw	r12,24(sp)
101069e0:	d8c01315 	stw	r3,76(sp)
101069e4:	d9000b17 	ldw	r4,44(sp)
101069e8:	20038f26 	beq	r4,zero,10107828 <_dtoa_r+0x1310>
101069ec:	60bfffc4 	addi	r2,r12,-1
101069f0:	100490fa 	slli	r2,r2,3
101069f4:	00c40474 	movhi	r3,4113
101069f8:	18c6d004 	addi	r3,r3,6976
101069fc:	1885883a 	add	r2,r3,r2
10106a00:	11800017 	ldw	r6,0(r2)
10106a04:	11c00117 	ldw	r7,4(r2)
10106a08:	d8800717 	ldw	r2,28(sp)
10106a0c:	0009883a 	mov	r4,zero
10106a10:	014ff834 	movhi	r5,16352
10106a14:	db001615 	stw	r12,88(sp)
10106a18:	15c00044 	addi	r23,r2,1
10106a1c:	010cce00 	call	1010cce0 <__divdf3>
10106a20:	800d883a 	mov	r6,r16
10106a24:	880f883a 	mov	r7,r17
10106a28:	1009883a 	mov	r4,r2
10106a2c:	180b883a 	mov	r5,r3
10106a30:	010df380 	call	1010df38 <__subdf3>
10106a34:	d9401017 	ldw	r5,64(sp)
10106a38:	d9000f17 	ldw	r4,60(sp)
10106a3c:	102b883a 	mov	r21,r2
10106a40:	d8c01215 	stw	r3,72(sp)
10106a44:	010e8340 	call	1010e834 <__fixdfsi>
10106a48:	1009883a 	mov	r4,r2
10106a4c:	1029883a 	mov	r20,r2
10106a50:	010e8b40 	call	1010e8b4 <__floatsidf>
10106a54:	d9000f17 	ldw	r4,60(sp)
10106a58:	d9401017 	ldw	r5,64(sp)
10106a5c:	100d883a 	mov	r6,r2
10106a60:	180f883a 	mov	r7,r3
10106a64:	010df380 	call	1010df38 <__subdf3>
10106a68:	1823883a 	mov	r17,r3
10106a6c:	d8c00717 	ldw	r3,28(sp)
10106a70:	d9401217 	ldw	r5,72(sp)
10106a74:	a2000c04 	addi	r8,r20,48
10106a78:	1021883a 	mov	r16,r2
10106a7c:	1a000005 	stb	r8,0(r3)
10106a80:	800d883a 	mov	r6,r16
10106a84:	880f883a 	mov	r7,r17
10106a88:	a809883a 	mov	r4,r21
10106a8c:	4029883a 	mov	r20,r8
10106a90:	010d6500 	call	1010d650 <__gedf2>
10106a94:	00841d16 	blt	zero,r2,10107b0c <_dtoa_r+0x15f4>
10106a98:	800d883a 	mov	r6,r16
10106a9c:	880f883a 	mov	r7,r17
10106aa0:	0009883a 	mov	r4,zero
10106aa4:	014ffc34 	movhi	r5,16368
10106aa8:	010df380 	call	1010df38 <__subdf3>
10106aac:	d9401217 	ldw	r5,72(sp)
10106ab0:	100d883a 	mov	r6,r2
10106ab4:	180f883a 	mov	r7,r3
10106ab8:	a809883a 	mov	r4,r21
10106abc:	010d6500 	call	1010d650 <__gedf2>
10106ac0:	db001617 	ldw	r12,88(sp)
10106ac4:	00840e16 	blt	zero,r2,10107b00 <_dtoa_r+0x15e8>
10106ac8:	00800044 	movi	r2,1
10106acc:	13006b0e 	bge	r2,r12,10106c7c <_dtoa_r+0x764>
10106ad0:	d9000717 	ldw	r4,28(sp)
10106ad4:	dd800f15 	stw	r22,60(sp)
10106ad8:	dcc01015 	stw	r19,64(sp)
10106adc:	2319883a 	add	r12,r4,r12
10106ae0:	dcc01217 	ldw	r19,72(sp)
10106ae4:	602d883a 	mov	r22,r12
10106ae8:	dc801215 	stw	r18,72(sp)
10106aec:	b825883a 	mov	r18,r23
10106af0:	00000906 	br	10106b18 <_dtoa_r+0x600>
10106af4:	010df380 	call	1010df38 <__subdf3>
10106af8:	a80d883a 	mov	r6,r21
10106afc:	980f883a 	mov	r7,r19
10106b00:	1009883a 	mov	r4,r2
10106b04:	180b883a 	mov	r5,r3
10106b08:	010d72c0 	call	1010d72c <__ledf2>
10106b0c:	1003e816 	blt	r2,zero,10107ab0 <_dtoa_r+0x1598>
10106b10:	b825883a 	mov	r18,r23
10106b14:	bd83e926 	beq	r23,r22,10107abc <_dtoa_r+0x15a4>
10106b18:	a809883a 	mov	r4,r21
10106b1c:	980b883a 	mov	r5,r19
10106b20:	000d883a 	mov	r6,zero
10106b24:	01d00934 	movhi	r7,16420
10106b28:	010d8200 	call	1010d820 <__muldf3>
10106b2c:	000d883a 	mov	r6,zero
10106b30:	01d00934 	movhi	r7,16420
10106b34:	8009883a 	mov	r4,r16
10106b38:	880b883a 	mov	r5,r17
10106b3c:	102b883a 	mov	r21,r2
10106b40:	1827883a 	mov	r19,r3
10106b44:	010d8200 	call	1010d820 <__muldf3>
10106b48:	180b883a 	mov	r5,r3
10106b4c:	1009883a 	mov	r4,r2
10106b50:	1821883a 	mov	r16,r3
10106b54:	1023883a 	mov	r17,r2
10106b58:	010e8340 	call	1010e834 <__fixdfsi>
10106b5c:	1009883a 	mov	r4,r2
10106b60:	1029883a 	mov	r20,r2
10106b64:	010e8b40 	call	1010e8b4 <__floatsidf>
10106b68:	8809883a 	mov	r4,r17
10106b6c:	800b883a 	mov	r5,r16
10106b70:	100d883a 	mov	r6,r2
10106b74:	180f883a 	mov	r7,r3
10106b78:	010df380 	call	1010df38 <__subdf3>
10106b7c:	a5000c04 	addi	r20,r20,48
10106b80:	a80d883a 	mov	r6,r21
10106b84:	980f883a 	mov	r7,r19
10106b88:	1009883a 	mov	r4,r2
10106b8c:	180b883a 	mov	r5,r3
10106b90:	95000005 	stb	r20,0(r18)
10106b94:	1021883a 	mov	r16,r2
10106b98:	1823883a 	mov	r17,r3
10106b9c:	010d72c0 	call	1010d72c <__ledf2>
10106ba0:	bdc00044 	addi	r23,r23,1
10106ba4:	800d883a 	mov	r6,r16
10106ba8:	880f883a 	mov	r7,r17
10106bac:	0009883a 	mov	r4,zero
10106bb0:	014ffc34 	movhi	r5,16368
10106bb4:	103fcf0e 	bge	r2,zero,10106af4 <__alt_data_end+0xfffe6af4>
10106bb8:	d8c01317 	ldw	r3,76(sp)
10106bbc:	d8c00515 	stw	r3,20(sp)
10106bc0:	d9400917 	ldw	r5,36(sp)
10106bc4:	e009883a 	mov	r4,fp
10106bc8:	01086c80 	call	101086c8 <_Bfree>
10106bcc:	d9000517 	ldw	r4,20(sp)
10106bd0:	d9802317 	ldw	r6,140(sp)
10106bd4:	d9c02517 	ldw	r7,148(sp)
10106bd8:	b8000005 	stb	zero,0(r23)
10106bdc:	20800044 	addi	r2,r4,1
10106be0:	30800015 	stw	r2,0(r6)
10106be4:	3802aa26 	beq	r7,zero,10107690 <_dtoa_r+0x1178>
10106be8:	3dc00015 	stw	r23,0(r7)
10106bec:	d8800717 	ldw	r2,28(sp)
10106bf0:	003e7906 	br	101065d8 <__alt_data_end+0xfffe65d8>
10106bf4:	00800434 	movhi	r2,16
10106bf8:	10bfffc4 	addi	r2,r2,-1
10106bfc:	88a2703a 	and	r17,r17,r2
10106c00:	883e851e 	bne	r17,zero,10106618 <__alt_data_end+0xfffe6618>
10106c04:	00840474 	movhi	r2,4113
10106c08:	1086b204 	addi	r2,r2,6856
10106c0c:	003e8406 	br	10106620 <__alt_data_end+0xfffe6620>
10106c10:	10c00204 	addi	r3,r2,8
10106c14:	003e8706 	br	10106634 <__alt_data_end+0xfffe6634>
10106c18:	01400434 	movhi	r5,16
10106c1c:	297fffc4 	addi	r5,r5,-1
10106c20:	994a703a 	and	r5,r19,r5
10106c24:	9009883a 	mov	r4,r18
10106c28:	843f0044 	addi	r16,r16,-1023
10106c2c:	294ffc34 	orhi	r5,r5,16368
10106c30:	dd800217 	ldw	r22,8(sp)
10106c34:	d8001115 	stw	zero,68(sp)
10106c38:	003ea506 	br	101066d0 <__alt_data_end+0xfffe66d0>
10106c3c:	00840474 	movhi	r2,4113
10106c40:	1086a904 	addi	r2,r2,6820
10106c44:	003e6406 	br	101065d8 <__alt_data_end+0xfffe65d8>
10106c48:	e0001115 	stw	zero,68(fp)
10106c4c:	000b883a 	mov	r5,zero
10106c50:	e009883a 	mov	r4,fp
10106c54:	01086200 	call	10108620 <_Balloc>
10106c58:	01bfffc4 	movi	r6,-1
10106c5c:	01c00044 	movi	r7,1
10106c60:	d8800715 	stw	r2,28(sp)
10106c64:	d9800c15 	stw	r6,48(sp)
10106c68:	e0801015 	stw	r2,64(fp)
10106c6c:	d8000315 	stw	zero,12(sp)
10106c70:	d9c00b15 	stw	r7,44(sp)
10106c74:	d9800615 	stw	r6,24(sp)
10106c78:	d8002215 	stw	zero,136(sp)
10106c7c:	d8800117 	ldw	r2,4(sp)
10106c80:	10008916 	blt	r2,zero,10106ea8 <_dtoa_r+0x990>
10106c84:	d9000517 	ldw	r4,20(sp)
10106c88:	00c00384 	movi	r3,14
10106c8c:	19008616 	blt	r3,r4,10106ea8 <_dtoa_r+0x990>
10106c90:	200490fa 	slli	r2,r4,3
10106c94:	00c40474 	movhi	r3,4113
10106c98:	d9802217 	ldw	r6,136(sp)
10106c9c:	18c6d004 	addi	r3,r3,6976
10106ca0:	1885883a 	add	r2,r3,r2
10106ca4:	14000017 	ldw	r16,0(r2)
10106ca8:	14400117 	ldw	r17,4(r2)
10106cac:	30016316 	blt	r6,zero,1010723c <_dtoa_r+0xd24>
10106cb0:	800d883a 	mov	r6,r16
10106cb4:	880f883a 	mov	r7,r17
10106cb8:	9009883a 	mov	r4,r18
10106cbc:	980b883a 	mov	r5,r19
10106cc0:	010cce00 	call	1010cce0 <__divdf3>
10106cc4:	180b883a 	mov	r5,r3
10106cc8:	1009883a 	mov	r4,r2
10106ccc:	010e8340 	call	1010e834 <__fixdfsi>
10106cd0:	1009883a 	mov	r4,r2
10106cd4:	102b883a 	mov	r21,r2
10106cd8:	010e8b40 	call	1010e8b4 <__floatsidf>
10106cdc:	800d883a 	mov	r6,r16
10106ce0:	880f883a 	mov	r7,r17
10106ce4:	1009883a 	mov	r4,r2
10106ce8:	180b883a 	mov	r5,r3
10106cec:	010d8200 	call	1010d820 <__muldf3>
10106cf0:	100d883a 	mov	r6,r2
10106cf4:	180f883a 	mov	r7,r3
10106cf8:	9009883a 	mov	r4,r18
10106cfc:	980b883a 	mov	r5,r19
10106d00:	010df380 	call	1010df38 <__subdf3>
10106d04:	d9c00717 	ldw	r7,28(sp)
10106d08:	1009883a 	mov	r4,r2
10106d0c:	a8800c04 	addi	r2,r21,48
10106d10:	38800005 	stb	r2,0(r7)
10106d14:	3dc00044 	addi	r23,r7,1
10106d18:	d9c00617 	ldw	r7,24(sp)
10106d1c:	01800044 	movi	r6,1
10106d20:	180b883a 	mov	r5,r3
10106d24:	2005883a 	mov	r2,r4
10106d28:	39803826 	beq	r7,r6,10106e0c <_dtoa_r+0x8f4>
10106d2c:	000d883a 	mov	r6,zero
10106d30:	01d00934 	movhi	r7,16420
10106d34:	010d8200 	call	1010d820 <__muldf3>
10106d38:	000d883a 	mov	r6,zero
10106d3c:	000f883a 	mov	r7,zero
10106d40:	1009883a 	mov	r4,r2
10106d44:	180b883a 	mov	r5,r3
10106d48:	1025883a 	mov	r18,r2
10106d4c:	1827883a 	mov	r19,r3
10106d50:	010d5c80 	call	1010d5c8 <__eqdf2>
10106d54:	103f9a26 	beq	r2,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
10106d58:	d9c00617 	ldw	r7,24(sp)
10106d5c:	d8c00717 	ldw	r3,28(sp)
10106d60:	b829883a 	mov	r20,r23
10106d64:	38bfffc4 	addi	r2,r7,-1
10106d68:	18ad883a 	add	r22,r3,r2
10106d6c:	00000a06 	br	10106d98 <_dtoa_r+0x880>
10106d70:	010d8200 	call	1010d820 <__muldf3>
10106d74:	000d883a 	mov	r6,zero
10106d78:	000f883a 	mov	r7,zero
10106d7c:	1009883a 	mov	r4,r2
10106d80:	180b883a 	mov	r5,r3
10106d84:	1025883a 	mov	r18,r2
10106d88:	1827883a 	mov	r19,r3
10106d8c:	b829883a 	mov	r20,r23
10106d90:	010d5c80 	call	1010d5c8 <__eqdf2>
10106d94:	103f8a26 	beq	r2,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
10106d98:	800d883a 	mov	r6,r16
10106d9c:	880f883a 	mov	r7,r17
10106da0:	9009883a 	mov	r4,r18
10106da4:	980b883a 	mov	r5,r19
10106da8:	010cce00 	call	1010cce0 <__divdf3>
10106dac:	180b883a 	mov	r5,r3
10106db0:	1009883a 	mov	r4,r2
10106db4:	010e8340 	call	1010e834 <__fixdfsi>
10106db8:	1009883a 	mov	r4,r2
10106dbc:	102b883a 	mov	r21,r2
10106dc0:	010e8b40 	call	1010e8b4 <__floatsidf>
10106dc4:	800d883a 	mov	r6,r16
10106dc8:	880f883a 	mov	r7,r17
10106dcc:	1009883a 	mov	r4,r2
10106dd0:	180b883a 	mov	r5,r3
10106dd4:	010d8200 	call	1010d820 <__muldf3>
10106dd8:	100d883a 	mov	r6,r2
10106ddc:	180f883a 	mov	r7,r3
10106de0:	9009883a 	mov	r4,r18
10106de4:	980b883a 	mov	r5,r19
10106de8:	010df380 	call	1010df38 <__subdf3>
10106dec:	aa000c04 	addi	r8,r21,48
10106df0:	a2000005 	stb	r8,0(r20)
10106df4:	000d883a 	mov	r6,zero
10106df8:	01d00934 	movhi	r7,16420
10106dfc:	1009883a 	mov	r4,r2
10106e00:	180b883a 	mov	r5,r3
10106e04:	a5c00044 	addi	r23,r20,1
10106e08:	b53fd91e 	bne	r22,r20,10106d70 <__alt_data_end+0xfffe6d70>
10106e0c:	100d883a 	mov	r6,r2
10106e10:	180f883a 	mov	r7,r3
10106e14:	1009883a 	mov	r4,r2
10106e18:	180b883a 	mov	r5,r3
10106e1c:	010c4340 	call	1010c434 <__adddf3>
10106e20:	100d883a 	mov	r6,r2
10106e24:	180f883a 	mov	r7,r3
10106e28:	8009883a 	mov	r4,r16
10106e2c:	880b883a 	mov	r5,r17
10106e30:	1027883a 	mov	r19,r2
10106e34:	1825883a 	mov	r18,r3
10106e38:	010d72c0 	call	1010d72c <__ledf2>
10106e3c:	10000816 	blt	r2,zero,10106e60 <_dtoa_r+0x948>
10106e40:	980d883a 	mov	r6,r19
10106e44:	900f883a 	mov	r7,r18
10106e48:	8009883a 	mov	r4,r16
10106e4c:	880b883a 	mov	r5,r17
10106e50:	010d5c80 	call	1010d5c8 <__eqdf2>
10106e54:	103f5a1e 	bne	r2,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
10106e58:	ad40004c 	andi	r21,r21,1
10106e5c:	a83f5826 	beq	r21,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
10106e60:	bd3fffc3 	ldbu	r20,-1(r23)
10106e64:	b8bfffc4 	addi	r2,r23,-1
10106e68:	1007883a 	mov	r3,r2
10106e6c:	01400e44 	movi	r5,57
10106e70:	d9800717 	ldw	r6,28(sp)
10106e74:	00000506 	br	10106e8c <_dtoa_r+0x974>
10106e78:	18ffffc4 	addi	r3,r3,-1
10106e7c:	11824726 	beq	r2,r6,1010779c <_dtoa_r+0x1284>
10106e80:	1d000003 	ldbu	r20,0(r3)
10106e84:	102f883a 	mov	r23,r2
10106e88:	10bfffc4 	addi	r2,r2,-1
10106e8c:	a1003fcc 	andi	r4,r20,255
10106e90:	2100201c 	xori	r4,r4,128
10106e94:	213fe004 	addi	r4,r4,-128
10106e98:	217ff726 	beq	r4,r5,10106e78 <__alt_data_end+0xfffe6e78>
10106e9c:	a2000044 	addi	r8,r20,1
10106ea0:	12000005 	stb	r8,0(r2)
10106ea4:	003f4606 	br	10106bc0 <__alt_data_end+0xfffe6bc0>
10106ea8:	d9000b17 	ldw	r4,44(sp)
10106eac:	2000c826 	beq	r4,zero,101071d0 <_dtoa_r+0xcb8>
10106eb0:	d9800317 	ldw	r6,12(sp)
10106eb4:	00c00044 	movi	r3,1
10106eb8:	1980f90e 	bge	r3,r6,101072a0 <_dtoa_r+0xd88>
10106ebc:	d8800617 	ldw	r2,24(sp)
10106ec0:	d8c00a17 	ldw	r3,40(sp)
10106ec4:	157fffc4 	addi	r21,r2,-1
10106ec8:	1d41f316 	blt	r3,r21,10107698 <_dtoa_r+0x1180>
10106ecc:	1d6bc83a 	sub	r21,r3,r21
10106ed0:	d9c00617 	ldw	r7,24(sp)
10106ed4:	3802aa16 	blt	r7,zero,10107980 <_dtoa_r+0x1468>
10106ed8:	dd000817 	ldw	r20,32(sp)
10106edc:	d8800617 	ldw	r2,24(sp)
10106ee0:	d8c00817 	ldw	r3,32(sp)
10106ee4:	01400044 	movi	r5,1
10106ee8:	e009883a 	mov	r4,fp
10106eec:	1887883a 	add	r3,r3,r2
10106ef0:	d8c00815 	stw	r3,32(sp)
10106ef4:	b0ad883a 	add	r22,r22,r2
10106ef8:	0108a2c0 	call	10108a2c <__i2b>
10106efc:	1023883a 	mov	r17,r2
10106f00:	a0000826 	beq	r20,zero,10106f24 <_dtoa_r+0xa0c>
10106f04:	0580070e 	bge	zero,r22,10106f24 <_dtoa_r+0xa0c>
10106f08:	a005883a 	mov	r2,r20
10106f0c:	b500b916 	blt	r22,r20,101071f4 <_dtoa_r+0xcdc>
10106f10:	d9000817 	ldw	r4,32(sp)
10106f14:	a0a9c83a 	sub	r20,r20,r2
10106f18:	b0adc83a 	sub	r22,r22,r2
10106f1c:	2089c83a 	sub	r4,r4,r2
10106f20:	d9000815 	stw	r4,32(sp)
10106f24:	d9800a17 	ldw	r6,40(sp)
10106f28:	0181810e 	bge	zero,r6,10107530 <_dtoa_r+0x1018>
10106f2c:	d9c00b17 	ldw	r7,44(sp)
10106f30:	3800b326 	beq	r7,zero,10107200 <_dtoa_r+0xce8>
10106f34:	a800b226 	beq	r21,zero,10107200 <_dtoa_r+0xce8>
10106f38:	880b883a 	mov	r5,r17
10106f3c:	a80d883a 	mov	r6,r21
10106f40:	e009883a 	mov	r4,fp
10106f44:	0108c600 	call	10108c60 <__pow5mult>
10106f48:	d9800917 	ldw	r6,36(sp)
10106f4c:	100b883a 	mov	r5,r2
10106f50:	e009883a 	mov	r4,fp
10106f54:	1023883a 	mov	r17,r2
10106f58:	0108a680 	call	10108a68 <__multiply>
10106f5c:	1021883a 	mov	r16,r2
10106f60:	d8800a17 	ldw	r2,40(sp)
10106f64:	d9400917 	ldw	r5,36(sp)
10106f68:	e009883a 	mov	r4,fp
10106f6c:	1545c83a 	sub	r2,r2,r21
10106f70:	d8800a15 	stw	r2,40(sp)
10106f74:	01086c80 	call	101086c8 <_Bfree>
10106f78:	d8c00a17 	ldw	r3,40(sp)
10106f7c:	18009f1e 	bne	r3,zero,101071fc <_dtoa_r+0xce4>
10106f80:	05c00044 	movi	r23,1
10106f84:	e009883a 	mov	r4,fp
10106f88:	b80b883a 	mov	r5,r23
10106f8c:	0108a2c0 	call	10108a2c <__i2b>
10106f90:	d9000d17 	ldw	r4,52(sp)
10106f94:	102b883a 	mov	r21,r2
10106f98:	2000ce26 	beq	r4,zero,101072d4 <_dtoa_r+0xdbc>
10106f9c:	200d883a 	mov	r6,r4
10106fa0:	100b883a 	mov	r5,r2
10106fa4:	e009883a 	mov	r4,fp
10106fa8:	0108c600 	call	10108c60 <__pow5mult>
10106fac:	d9800317 	ldw	r6,12(sp)
10106fb0:	102b883a 	mov	r21,r2
10106fb4:	b981810e 	bge	r23,r6,101075bc <_dtoa_r+0x10a4>
10106fb8:	0027883a 	mov	r19,zero
10106fbc:	a8800417 	ldw	r2,16(r21)
10106fc0:	05c00804 	movi	r23,32
10106fc4:	10800104 	addi	r2,r2,4
10106fc8:	1085883a 	add	r2,r2,r2
10106fcc:	1085883a 	add	r2,r2,r2
10106fd0:	a885883a 	add	r2,r21,r2
10106fd4:	11000017 	ldw	r4,0(r2)
10106fd8:	01089140 	call	10108914 <__hi0bits>
10106fdc:	b885c83a 	sub	r2,r23,r2
10106fe0:	1585883a 	add	r2,r2,r22
10106fe4:	108007cc 	andi	r2,r2,31
10106fe8:	1000b326 	beq	r2,zero,101072b8 <_dtoa_r+0xda0>
10106fec:	00c00804 	movi	r3,32
10106ff0:	1887c83a 	sub	r3,r3,r2
10106ff4:	01000104 	movi	r4,4
10106ff8:	20c2cd0e 	bge	r4,r3,10107b30 <_dtoa_r+0x1618>
10106ffc:	00c00704 	movi	r3,28
10107000:	1885c83a 	sub	r2,r3,r2
10107004:	d8c00817 	ldw	r3,32(sp)
10107008:	a0a9883a 	add	r20,r20,r2
1010700c:	b0ad883a 	add	r22,r22,r2
10107010:	1887883a 	add	r3,r3,r2
10107014:	d8c00815 	stw	r3,32(sp)
10107018:	d9800817 	ldw	r6,32(sp)
1010701c:	0180040e 	bge	zero,r6,10107030 <_dtoa_r+0xb18>
10107020:	800b883a 	mov	r5,r16
10107024:	e009883a 	mov	r4,fp
10107028:	0108da00 	call	10108da0 <__lshift>
1010702c:	1021883a 	mov	r16,r2
10107030:	0580050e 	bge	zero,r22,10107048 <_dtoa_r+0xb30>
10107034:	a80b883a 	mov	r5,r21
10107038:	b00d883a 	mov	r6,r22
1010703c:	e009883a 	mov	r4,fp
10107040:	0108da00 	call	10108da0 <__lshift>
10107044:	102b883a 	mov	r21,r2
10107048:	d9c00e17 	ldw	r7,56(sp)
1010704c:	3801211e 	bne	r7,zero,101074d4 <_dtoa_r+0xfbc>
10107050:	d9800617 	ldw	r6,24(sp)
10107054:	0181380e 	bge	zero,r6,10107538 <_dtoa_r+0x1020>
10107058:	d8c00b17 	ldw	r3,44(sp)
1010705c:	1800ab1e 	bne	r3,zero,1010730c <_dtoa_r+0xdf4>
10107060:	dc800717 	ldw	r18,28(sp)
10107064:	dcc00617 	ldw	r19,24(sp)
10107068:	9029883a 	mov	r20,r18
1010706c:	00000206 	br	10107078 <_dtoa_r+0xb60>
10107070:	01086f00 	call	101086f0 <__multadd>
10107074:	1021883a 	mov	r16,r2
10107078:	a80b883a 	mov	r5,r21
1010707c:	8009883a 	mov	r4,r16
10107080:	01063180 	call	10106318 <quorem>
10107084:	10800c04 	addi	r2,r2,48
10107088:	90800005 	stb	r2,0(r18)
1010708c:	94800044 	addi	r18,r18,1
10107090:	9507c83a 	sub	r3,r18,r20
10107094:	000f883a 	mov	r7,zero
10107098:	01800284 	movi	r6,10
1010709c:	800b883a 	mov	r5,r16
101070a0:	e009883a 	mov	r4,fp
101070a4:	1cfff216 	blt	r3,r19,10107070 <__alt_data_end+0xfffe7070>
101070a8:	1011883a 	mov	r8,r2
101070ac:	d8800617 	ldw	r2,24(sp)
101070b0:	0082370e 	bge	zero,r2,10107990 <_dtoa_r+0x1478>
101070b4:	d9000717 	ldw	r4,28(sp)
101070b8:	0025883a 	mov	r18,zero
101070bc:	20af883a 	add	r23,r4,r2
101070c0:	01800044 	movi	r6,1
101070c4:	800b883a 	mov	r5,r16
101070c8:	e009883a 	mov	r4,fp
101070cc:	da001715 	stw	r8,92(sp)
101070d0:	0108da00 	call	10108da0 <__lshift>
101070d4:	a80b883a 	mov	r5,r21
101070d8:	1009883a 	mov	r4,r2
101070dc:	d8800915 	stw	r2,36(sp)
101070e0:	0108ee80 	call	10108ee8 <__mcmp>
101070e4:	da001717 	ldw	r8,92(sp)
101070e8:	0081800e 	bge	zero,r2,101076ec <_dtoa_r+0x11d4>
101070ec:	b93fffc3 	ldbu	r4,-1(r23)
101070f0:	b8bfffc4 	addi	r2,r23,-1
101070f4:	1007883a 	mov	r3,r2
101070f8:	01800e44 	movi	r6,57
101070fc:	d9c00717 	ldw	r7,28(sp)
10107100:	00000506 	br	10107118 <_dtoa_r+0xc00>
10107104:	18ffffc4 	addi	r3,r3,-1
10107108:	11c12326 	beq	r2,r7,10107598 <_dtoa_r+0x1080>
1010710c:	19000003 	ldbu	r4,0(r3)
10107110:	102f883a 	mov	r23,r2
10107114:	10bfffc4 	addi	r2,r2,-1
10107118:	21403fcc 	andi	r5,r4,255
1010711c:	2940201c 	xori	r5,r5,128
10107120:	297fe004 	addi	r5,r5,-128
10107124:	29bff726 	beq	r5,r6,10107104 <__alt_data_end+0xfffe7104>
10107128:	21000044 	addi	r4,r4,1
1010712c:	11000005 	stb	r4,0(r2)
10107130:	a80b883a 	mov	r5,r21
10107134:	e009883a 	mov	r4,fp
10107138:	01086c80 	call	101086c8 <_Bfree>
1010713c:	883ea026 	beq	r17,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
10107140:	90000426 	beq	r18,zero,10107154 <_dtoa_r+0xc3c>
10107144:	94400326 	beq	r18,r17,10107154 <_dtoa_r+0xc3c>
10107148:	900b883a 	mov	r5,r18
1010714c:	e009883a 	mov	r4,fp
10107150:	01086c80 	call	101086c8 <_Bfree>
10107154:	880b883a 	mov	r5,r17
10107158:	e009883a 	mov	r4,fp
1010715c:	01086c80 	call	101086c8 <_Bfree>
10107160:	003e9706 	br	10106bc0 <__alt_data_end+0xfffe6bc0>
10107164:	01800044 	movi	r6,1
10107168:	d9800e15 	stw	r6,56(sp)
1010716c:	003d9606 	br	101067c8 <__alt_data_end+0xfffe67c8>
10107170:	d8800817 	ldw	r2,32(sp)
10107174:	d8c00517 	ldw	r3,20(sp)
10107178:	d8000d15 	stw	zero,52(sp)
1010717c:	10c5c83a 	sub	r2,r2,r3
10107180:	00c9c83a 	sub	r4,zero,r3
10107184:	d8800815 	stw	r2,32(sp)
10107188:	d9000a15 	stw	r4,40(sp)
1010718c:	003d9706 	br	101067ec <__alt_data_end+0xfffe67ec>
10107190:	05adc83a 	sub	r22,zero,r22
10107194:	dd800815 	stw	r22,32(sp)
10107198:	002d883a 	mov	r22,zero
1010719c:	003d8e06 	br	101067d8 <__alt_data_end+0xfffe67d8>
101071a0:	d9000517 	ldw	r4,20(sp)
101071a4:	010e8b40 	call	1010e8b4 <__floatsidf>
101071a8:	100d883a 	mov	r6,r2
101071ac:	180f883a 	mov	r7,r3
101071b0:	a009883a 	mov	r4,r20
101071b4:	880b883a 	mov	r5,r17
101071b8:	010d5c80 	call	1010d5c8 <__eqdf2>
101071bc:	103d7126 	beq	r2,zero,10106784 <__alt_data_end+0xfffe6784>
101071c0:	d9c00517 	ldw	r7,20(sp)
101071c4:	39ffffc4 	addi	r7,r7,-1
101071c8:	d9c00515 	stw	r7,20(sp)
101071cc:	003d6d06 	br	10106784 <__alt_data_end+0xfffe6784>
101071d0:	dd400a17 	ldw	r21,40(sp)
101071d4:	dd000817 	ldw	r20,32(sp)
101071d8:	0023883a 	mov	r17,zero
101071dc:	003f4806 	br	10106f00 <__alt_data_end+0xfffe6f00>
101071e0:	10e3c83a 	sub	r17,r2,r3
101071e4:	9448983a 	sll	r4,r18,r17
101071e8:	003d3206 	br	101066b4 <__alt_data_end+0xfffe66b4>
101071ec:	d8000e15 	stw	zero,56(sp)
101071f0:	003d7506 	br	101067c8 <__alt_data_end+0xfffe67c8>
101071f4:	b005883a 	mov	r2,r22
101071f8:	003f4506 	br	10106f10 <__alt_data_end+0xfffe6f10>
101071fc:	dc000915 	stw	r16,36(sp)
10107200:	d9800a17 	ldw	r6,40(sp)
10107204:	d9400917 	ldw	r5,36(sp)
10107208:	e009883a 	mov	r4,fp
1010720c:	0108c600 	call	10108c60 <__pow5mult>
10107210:	1021883a 	mov	r16,r2
10107214:	003f5a06 	br	10106f80 <__alt_data_end+0xfffe6f80>
10107218:	01c00044 	movi	r7,1
1010721c:	d9c00b15 	stw	r7,44(sp)
10107220:	d8802217 	ldw	r2,136(sp)
10107224:	0081280e 	bge	zero,r2,101076c8 <_dtoa_r+0x11b0>
10107228:	100d883a 	mov	r6,r2
1010722c:	1021883a 	mov	r16,r2
10107230:	d8800c15 	stw	r2,48(sp)
10107234:	d8800615 	stw	r2,24(sp)
10107238:	003d8806 	br	1010685c <__alt_data_end+0xfffe685c>
1010723c:	d8800617 	ldw	r2,24(sp)
10107240:	00be9b16 	blt	zero,r2,10106cb0 <__alt_data_end+0xfffe6cb0>
10107244:	10010f1e 	bne	r2,zero,10107684 <_dtoa_r+0x116c>
10107248:	880b883a 	mov	r5,r17
1010724c:	000d883a 	mov	r6,zero
10107250:	01d00534 	movhi	r7,16404
10107254:	8009883a 	mov	r4,r16
10107258:	010d8200 	call	1010d820 <__muldf3>
1010725c:	900d883a 	mov	r6,r18
10107260:	980f883a 	mov	r7,r19
10107264:	1009883a 	mov	r4,r2
10107268:	180b883a 	mov	r5,r3
1010726c:	010d6500 	call	1010d650 <__gedf2>
10107270:	002b883a 	mov	r21,zero
10107274:	0023883a 	mov	r17,zero
10107278:	1000bf16 	blt	r2,zero,10107578 <_dtoa_r+0x1060>
1010727c:	d9802217 	ldw	r6,136(sp)
10107280:	ddc00717 	ldw	r23,28(sp)
10107284:	018c303a 	nor	r6,zero,r6
10107288:	d9800515 	stw	r6,20(sp)
1010728c:	a80b883a 	mov	r5,r21
10107290:	e009883a 	mov	r4,fp
10107294:	01086c80 	call	101086c8 <_Bfree>
10107298:	883e4926 	beq	r17,zero,10106bc0 <__alt_data_end+0xfffe6bc0>
1010729c:	003fad06 	br	10107154 <__alt_data_end+0xfffe7154>
101072a0:	d9c01117 	ldw	r7,68(sp)
101072a4:	3801bc26 	beq	r7,zero,10107998 <_dtoa_r+0x1480>
101072a8:	10810cc4 	addi	r2,r2,1075
101072ac:	dd400a17 	ldw	r21,40(sp)
101072b0:	dd000817 	ldw	r20,32(sp)
101072b4:	003f0a06 	br	10106ee0 <__alt_data_end+0xfffe6ee0>
101072b8:	00800704 	movi	r2,28
101072bc:	d9000817 	ldw	r4,32(sp)
101072c0:	a0a9883a 	add	r20,r20,r2
101072c4:	b0ad883a 	add	r22,r22,r2
101072c8:	2089883a 	add	r4,r4,r2
101072cc:	d9000815 	stw	r4,32(sp)
101072d0:	003f5106 	br	10107018 <__alt_data_end+0xfffe7018>
101072d4:	d8c00317 	ldw	r3,12(sp)
101072d8:	b8c1fc0e 	bge	r23,r3,10107acc <_dtoa_r+0x15b4>
101072dc:	0027883a 	mov	r19,zero
101072e0:	b805883a 	mov	r2,r23
101072e4:	003f3e06 	br	10106fe0 <__alt_data_end+0xfffe6fe0>
101072e8:	880b883a 	mov	r5,r17
101072ec:	e009883a 	mov	r4,fp
101072f0:	000f883a 	mov	r7,zero
101072f4:	01800284 	movi	r6,10
101072f8:	01086f00 	call	101086f0 <__multadd>
101072fc:	d9000c17 	ldw	r4,48(sp)
10107300:	1023883a 	mov	r17,r2
10107304:	0102040e 	bge	zero,r4,10107b18 <_dtoa_r+0x1600>
10107308:	d9000615 	stw	r4,24(sp)
1010730c:	0500050e 	bge	zero,r20,10107324 <_dtoa_r+0xe0c>
10107310:	880b883a 	mov	r5,r17
10107314:	a00d883a 	mov	r6,r20
10107318:	e009883a 	mov	r4,fp
1010731c:	0108da00 	call	10108da0 <__lshift>
10107320:	1023883a 	mov	r17,r2
10107324:	9801241e 	bne	r19,zero,101077b8 <_dtoa_r+0x12a0>
10107328:	8829883a 	mov	r20,r17
1010732c:	d9000617 	ldw	r4,24(sp)
10107330:	dcc00717 	ldw	r19,28(sp)
10107334:	9480004c 	andi	r18,r18,1
10107338:	20bfffc4 	addi	r2,r4,-1
1010733c:	9885883a 	add	r2,r19,r2
10107340:	d8800415 	stw	r2,16(sp)
10107344:	dc800615 	stw	r18,24(sp)
10107348:	a80b883a 	mov	r5,r21
1010734c:	8009883a 	mov	r4,r16
10107350:	01063180 	call	10106318 <quorem>
10107354:	880b883a 	mov	r5,r17
10107358:	8009883a 	mov	r4,r16
1010735c:	102f883a 	mov	r23,r2
10107360:	0108ee80 	call	10108ee8 <__mcmp>
10107364:	a80b883a 	mov	r5,r21
10107368:	a00d883a 	mov	r6,r20
1010736c:	e009883a 	mov	r4,fp
10107370:	102d883a 	mov	r22,r2
10107374:	0108f480 	call	10108f48 <__mdiff>
10107378:	1007883a 	mov	r3,r2
1010737c:	10800317 	ldw	r2,12(r2)
10107380:	bc800c04 	addi	r18,r23,48
10107384:	180b883a 	mov	r5,r3
10107388:	10004e1e 	bne	r2,zero,101074c4 <_dtoa_r+0xfac>
1010738c:	8009883a 	mov	r4,r16
10107390:	d8c01615 	stw	r3,88(sp)
10107394:	0108ee80 	call	10108ee8 <__mcmp>
10107398:	d8c01617 	ldw	r3,88(sp)
1010739c:	e009883a 	mov	r4,fp
101073a0:	d8801615 	stw	r2,88(sp)
101073a4:	180b883a 	mov	r5,r3
101073a8:	01086c80 	call	101086c8 <_Bfree>
101073ac:	d8801617 	ldw	r2,88(sp)
101073b0:	1000041e 	bne	r2,zero,101073c4 <_dtoa_r+0xeac>
101073b4:	d9800317 	ldw	r6,12(sp)
101073b8:	3000021e 	bne	r6,zero,101073c4 <_dtoa_r+0xeac>
101073bc:	d8c00617 	ldw	r3,24(sp)
101073c0:	18003726 	beq	r3,zero,101074a0 <_dtoa_r+0xf88>
101073c4:	b0002016 	blt	r22,zero,10107448 <_dtoa_r+0xf30>
101073c8:	b000041e 	bne	r22,zero,101073dc <_dtoa_r+0xec4>
101073cc:	d9000317 	ldw	r4,12(sp)
101073d0:	2000021e 	bne	r4,zero,101073dc <_dtoa_r+0xec4>
101073d4:	d8c00617 	ldw	r3,24(sp)
101073d8:	18001b26 	beq	r3,zero,10107448 <_dtoa_r+0xf30>
101073dc:	00810716 	blt	zero,r2,101077fc <_dtoa_r+0x12e4>
101073e0:	d8c00417 	ldw	r3,16(sp)
101073e4:	9d800044 	addi	r22,r19,1
101073e8:	9c800005 	stb	r18,0(r19)
101073ec:	b02f883a 	mov	r23,r22
101073f0:	98c10626 	beq	r19,r3,1010780c <_dtoa_r+0x12f4>
101073f4:	800b883a 	mov	r5,r16
101073f8:	000f883a 	mov	r7,zero
101073fc:	01800284 	movi	r6,10
10107400:	e009883a 	mov	r4,fp
10107404:	01086f00 	call	101086f0 <__multadd>
10107408:	1021883a 	mov	r16,r2
1010740c:	000f883a 	mov	r7,zero
10107410:	01800284 	movi	r6,10
10107414:	880b883a 	mov	r5,r17
10107418:	e009883a 	mov	r4,fp
1010741c:	8d002526 	beq	r17,r20,101074b4 <_dtoa_r+0xf9c>
10107420:	01086f00 	call	101086f0 <__multadd>
10107424:	a00b883a 	mov	r5,r20
10107428:	000f883a 	mov	r7,zero
1010742c:	01800284 	movi	r6,10
10107430:	e009883a 	mov	r4,fp
10107434:	1023883a 	mov	r17,r2
10107438:	01086f00 	call	101086f0 <__multadd>
1010743c:	1029883a 	mov	r20,r2
10107440:	b027883a 	mov	r19,r22
10107444:	003fc006 	br	10107348 <__alt_data_end+0xfffe7348>
10107448:	9011883a 	mov	r8,r18
1010744c:	00800e0e 	bge	zero,r2,10107488 <_dtoa_r+0xf70>
10107450:	800b883a 	mov	r5,r16
10107454:	01800044 	movi	r6,1
10107458:	e009883a 	mov	r4,fp
1010745c:	da001715 	stw	r8,92(sp)
10107460:	0108da00 	call	10108da0 <__lshift>
10107464:	a80b883a 	mov	r5,r21
10107468:	1009883a 	mov	r4,r2
1010746c:	1021883a 	mov	r16,r2
10107470:	0108ee80 	call	10108ee8 <__mcmp>
10107474:	da001717 	ldw	r8,92(sp)
10107478:	0081960e 	bge	zero,r2,10107ad4 <_dtoa_r+0x15bc>
1010747c:	00800e44 	movi	r2,57
10107480:	40817026 	beq	r8,r2,10107a44 <_dtoa_r+0x152c>
10107484:	ba000c44 	addi	r8,r23,49
10107488:	8825883a 	mov	r18,r17
1010748c:	9dc00044 	addi	r23,r19,1
10107490:	9a000005 	stb	r8,0(r19)
10107494:	a023883a 	mov	r17,r20
10107498:	dc000915 	stw	r16,36(sp)
1010749c:	003f2406 	br	10107130 <__alt_data_end+0xfffe7130>
101074a0:	00800e44 	movi	r2,57
101074a4:	9011883a 	mov	r8,r18
101074a8:	90816626 	beq	r18,r2,10107a44 <_dtoa_r+0x152c>
101074ac:	05bff516 	blt	zero,r22,10107484 <__alt_data_end+0xfffe7484>
101074b0:	003ff506 	br	10107488 <__alt_data_end+0xfffe7488>
101074b4:	01086f00 	call	101086f0 <__multadd>
101074b8:	1023883a 	mov	r17,r2
101074bc:	1029883a 	mov	r20,r2
101074c0:	003fdf06 	br	10107440 <__alt_data_end+0xfffe7440>
101074c4:	e009883a 	mov	r4,fp
101074c8:	01086c80 	call	101086c8 <_Bfree>
101074cc:	00800044 	movi	r2,1
101074d0:	003fbc06 	br	101073c4 <__alt_data_end+0xfffe73c4>
101074d4:	a80b883a 	mov	r5,r21
101074d8:	8009883a 	mov	r4,r16
101074dc:	0108ee80 	call	10108ee8 <__mcmp>
101074e0:	103edb0e 	bge	r2,zero,10107050 <__alt_data_end+0xfffe7050>
101074e4:	800b883a 	mov	r5,r16
101074e8:	000f883a 	mov	r7,zero
101074ec:	01800284 	movi	r6,10
101074f0:	e009883a 	mov	r4,fp
101074f4:	01086f00 	call	101086f0 <__multadd>
101074f8:	1021883a 	mov	r16,r2
101074fc:	d8800517 	ldw	r2,20(sp)
10107500:	d8c00b17 	ldw	r3,44(sp)
10107504:	10bfffc4 	addi	r2,r2,-1
10107508:	d8800515 	stw	r2,20(sp)
1010750c:	183f761e 	bne	r3,zero,101072e8 <__alt_data_end+0xfffe72e8>
10107510:	d9000c17 	ldw	r4,48(sp)
10107514:	0101730e 	bge	zero,r4,10107ae4 <_dtoa_r+0x15cc>
10107518:	d9000615 	stw	r4,24(sp)
1010751c:	003ed006 	br	10107060 <__alt_data_end+0xfffe7060>
10107520:	00800084 	movi	r2,2
10107524:	3081861e 	bne	r6,r2,10107b40 <_dtoa_r+0x1628>
10107528:	d8000b15 	stw	zero,44(sp)
1010752c:	003f3c06 	br	10107220 <__alt_data_end+0xfffe7220>
10107530:	dc000917 	ldw	r16,36(sp)
10107534:	003e9206 	br	10106f80 <__alt_data_end+0xfffe6f80>
10107538:	d9c00317 	ldw	r7,12(sp)
1010753c:	00800084 	movi	r2,2
10107540:	11fec50e 	bge	r2,r7,10107058 <__alt_data_end+0xfffe7058>
10107544:	d9000617 	ldw	r4,24(sp)
10107548:	20013c1e 	bne	r4,zero,10107a3c <_dtoa_r+0x1524>
1010754c:	a80b883a 	mov	r5,r21
10107550:	000f883a 	mov	r7,zero
10107554:	01800144 	movi	r6,5
10107558:	e009883a 	mov	r4,fp
1010755c:	01086f00 	call	101086f0 <__multadd>
10107560:	100b883a 	mov	r5,r2
10107564:	8009883a 	mov	r4,r16
10107568:	102b883a 	mov	r21,r2
1010756c:	0108ee80 	call	10108ee8 <__mcmp>
10107570:	dc000915 	stw	r16,36(sp)
10107574:	00bf410e 	bge	zero,r2,1010727c <__alt_data_end+0xfffe727c>
10107578:	d9c00717 	ldw	r7,28(sp)
1010757c:	00800c44 	movi	r2,49
10107580:	38800005 	stb	r2,0(r7)
10107584:	d8800517 	ldw	r2,20(sp)
10107588:	3dc00044 	addi	r23,r7,1
1010758c:	10800044 	addi	r2,r2,1
10107590:	d8800515 	stw	r2,20(sp)
10107594:	003f3d06 	br	1010728c <__alt_data_end+0xfffe728c>
10107598:	d9800517 	ldw	r6,20(sp)
1010759c:	d9c00717 	ldw	r7,28(sp)
101075a0:	00800c44 	movi	r2,49
101075a4:	31800044 	addi	r6,r6,1
101075a8:	d9800515 	stw	r6,20(sp)
101075ac:	38800005 	stb	r2,0(r7)
101075b0:	003edf06 	br	10107130 <__alt_data_end+0xfffe7130>
101075b4:	d8000b15 	stw	zero,44(sp)
101075b8:	003c9f06 	br	10106838 <__alt_data_end+0xfffe6838>
101075bc:	903e7e1e 	bne	r18,zero,10106fb8 <__alt_data_end+0xfffe6fb8>
101075c0:	00800434 	movhi	r2,16
101075c4:	10bfffc4 	addi	r2,r2,-1
101075c8:	9884703a 	and	r2,r19,r2
101075cc:	1000ea1e 	bne	r2,zero,10107978 <_dtoa_r+0x1460>
101075d0:	9cdffc2c 	andhi	r19,r19,32752
101075d4:	9800e826 	beq	r19,zero,10107978 <_dtoa_r+0x1460>
101075d8:	d9c00817 	ldw	r7,32(sp)
101075dc:	b5800044 	addi	r22,r22,1
101075e0:	04c00044 	movi	r19,1
101075e4:	39c00044 	addi	r7,r7,1
101075e8:	d9c00815 	stw	r7,32(sp)
101075ec:	d8800d17 	ldw	r2,52(sp)
101075f0:	103e721e 	bne	r2,zero,10106fbc <__alt_data_end+0xfffe6fbc>
101075f4:	00800044 	movi	r2,1
101075f8:	003e7906 	br	10106fe0 <__alt_data_end+0xfffe6fe0>
101075fc:	8009883a 	mov	r4,r16
10107600:	010e8b40 	call	1010e8b4 <__floatsidf>
10107604:	d9800f17 	ldw	r6,60(sp)
10107608:	d9c01017 	ldw	r7,64(sp)
1010760c:	1009883a 	mov	r4,r2
10107610:	180b883a 	mov	r5,r3
10107614:	010d8200 	call	1010d820 <__muldf3>
10107618:	000d883a 	mov	r6,zero
1010761c:	01d00734 	movhi	r7,16412
10107620:	1009883a 	mov	r4,r2
10107624:	180b883a 	mov	r5,r3
10107628:	010c4340 	call	1010c434 <__adddf3>
1010762c:	047f3034 	movhi	r17,64704
10107630:	1021883a 	mov	r16,r2
10107634:	1c63883a 	add	r17,r3,r17
10107638:	d9000f17 	ldw	r4,60(sp)
1010763c:	d9401017 	ldw	r5,64(sp)
10107640:	000d883a 	mov	r6,zero
10107644:	01d00534 	movhi	r7,16404
10107648:	010df380 	call	1010df38 <__subdf3>
1010764c:	800d883a 	mov	r6,r16
10107650:	880f883a 	mov	r7,r17
10107654:	1009883a 	mov	r4,r2
10107658:	180b883a 	mov	r5,r3
1010765c:	102b883a 	mov	r21,r2
10107660:	1829883a 	mov	r20,r3
10107664:	010d6500 	call	1010d650 <__gedf2>
10107668:	00806c16 	blt	zero,r2,1010781c <_dtoa_r+0x1304>
1010766c:	89e0003c 	xorhi	r7,r17,32768
10107670:	800d883a 	mov	r6,r16
10107674:	a809883a 	mov	r4,r21
10107678:	a00b883a 	mov	r5,r20
1010767c:	010d72c0 	call	1010d72c <__ledf2>
10107680:	103d7e0e 	bge	r2,zero,10106c7c <__alt_data_end+0xfffe6c7c>
10107684:	002b883a 	mov	r21,zero
10107688:	0023883a 	mov	r17,zero
1010768c:	003efb06 	br	1010727c <__alt_data_end+0xfffe727c>
10107690:	d8800717 	ldw	r2,28(sp)
10107694:	003bd006 	br	101065d8 <__alt_data_end+0xfffe65d8>
10107698:	d9000a17 	ldw	r4,40(sp)
1010769c:	d9800d17 	ldw	r6,52(sp)
101076a0:	dd400a15 	stw	r21,40(sp)
101076a4:	a905c83a 	sub	r2,r21,r4
101076a8:	308d883a 	add	r6,r6,r2
101076ac:	d9800d15 	stw	r6,52(sp)
101076b0:	002b883a 	mov	r21,zero
101076b4:	003e0606 	br	10106ed0 <__alt_data_end+0xfffe6ed0>
101076b8:	9023883a 	mov	r17,r18
101076bc:	9829883a 	mov	r20,r19
101076c0:	04000084 	movi	r16,2
101076c4:	003c9206 	br	10106910 <__alt_data_end+0xfffe6910>
101076c8:	04000044 	movi	r16,1
101076cc:	dc000c15 	stw	r16,48(sp)
101076d0:	dc000615 	stw	r16,24(sp)
101076d4:	dc002215 	stw	r16,136(sp)
101076d8:	e0001115 	stw	zero,68(fp)
101076dc:	000b883a 	mov	r5,zero
101076e0:	003c6906 	br	10106888 <__alt_data_end+0xfffe6888>
101076e4:	3021883a 	mov	r16,r6
101076e8:	003ffb06 	br	101076d8 <__alt_data_end+0xfffe76d8>
101076ec:	1000021e 	bne	r2,zero,101076f8 <_dtoa_r+0x11e0>
101076f0:	4200004c 	andi	r8,r8,1
101076f4:	403e7d1e 	bne	r8,zero,101070ec <__alt_data_end+0xfffe70ec>
101076f8:	01000c04 	movi	r4,48
101076fc:	00000106 	br	10107704 <_dtoa_r+0x11ec>
10107700:	102f883a 	mov	r23,r2
10107704:	b8bfffc4 	addi	r2,r23,-1
10107708:	10c00007 	ldb	r3,0(r2)
1010770c:	193ffc26 	beq	r3,r4,10107700 <__alt_data_end+0xfffe7700>
10107710:	003e8706 	br	10107130 <__alt_data_end+0xfffe7130>
10107714:	d8800517 	ldw	r2,20(sp)
10107718:	00a3c83a 	sub	r17,zero,r2
1010771c:	8800a426 	beq	r17,zero,101079b0 <_dtoa_r+0x1498>
10107720:	888003cc 	andi	r2,r17,15
10107724:	100490fa 	slli	r2,r2,3
10107728:	00c40474 	movhi	r3,4113
1010772c:	18c6d004 	addi	r3,r3,6976
10107730:	1885883a 	add	r2,r3,r2
10107734:	11800017 	ldw	r6,0(r2)
10107738:	11c00117 	ldw	r7,4(r2)
1010773c:	9009883a 	mov	r4,r18
10107740:	980b883a 	mov	r5,r19
10107744:	8823d13a 	srai	r17,r17,4
10107748:	010d8200 	call	1010d820 <__muldf3>
1010774c:	d8800f15 	stw	r2,60(sp)
10107750:	d8c01015 	stw	r3,64(sp)
10107754:	8800e826 	beq	r17,zero,10107af8 <_dtoa_r+0x15e0>
10107758:	05040474 	movhi	r20,4113
1010775c:	a506c604 	addi	r20,r20,6936
10107760:	04000084 	movi	r16,2
10107764:	8980004c 	andi	r6,r17,1
10107768:	1009883a 	mov	r4,r2
1010776c:	8823d07a 	srai	r17,r17,1
10107770:	180b883a 	mov	r5,r3
10107774:	30000426 	beq	r6,zero,10107788 <_dtoa_r+0x1270>
10107778:	a1800017 	ldw	r6,0(r20)
1010777c:	a1c00117 	ldw	r7,4(r20)
10107780:	84000044 	addi	r16,r16,1
10107784:	010d8200 	call	1010d820 <__muldf3>
10107788:	a5000204 	addi	r20,r20,8
1010778c:	883ff51e 	bne	r17,zero,10107764 <__alt_data_end+0xfffe7764>
10107790:	d8800f15 	stw	r2,60(sp)
10107794:	d8c01015 	stw	r3,64(sp)
10107798:	003c7606 	br	10106974 <__alt_data_end+0xfffe6974>
1010779c:	00c00c04 	movi	r3,48
101077a0:	10c00005 	stb	r3,0(r2)
101077a4:	d8c00517 	ldw	r3,20(sp)
101077a8:	bd3fffc3 	ldbu	r20,-1(r23)
101077ac:	18c00044 	addi	r3,r3,1
101077b0:	d8c00515 	stw	r3,20(sp)
101077b4:	003db906 	br	10106e9c <__alt_data_end+0xfffe6e9c>
101077b8:	89400117 	ldw	r5,4(r17)
101077bc:	e009883a 	mov	r4,fp
101077c0:	01086200 	call	10108620 <_Balloc>
101077c4:	89800417 	ldw	r6,16(r17)
101077c8:	89400304 	addi	r5,r17,12
101077cc:	11000304 	addi	r4,r2,12
101077d0:	31800084 	addi	r6,r6,2
101077d4:	318d883a 	add	r6,r6,r6
101077d8:	318d883a 	add	r6,r6,r6
101077dc:	1027883a 	mov	r19,r2
101077e0:	010837c0 	call	1010837c <memcpy>
101077e4:	01800044 	movi	r6,1
101077e8:	980b883a 	mov	r5,r19
101077ec:	e009883a 	mov	r4,fp
101077f0:	0108da00 	call	10108da0 <__lshift>
101077f4:	1029883a 	mov	r20,r2
101077f8:	003ecc06 	br	1010732c <__alt_data_end+0xfffe732c>
101077fc:	00800e44 	movi	r2,57
10107800:	90809026 	beq	r18,r2,10107a44 <_dtoa_r+0x152c>
10107804:	92000044 	addi	r8,r18,1
10107808:	003f1f06 	br	10107488 <__alt_data_end+0xfffe7488>
1010780c:	9011883a 	mov	r8,r18
10107810:	8825883a 	mov	r18,r17
10107814:	a023883a 	mov	r17,r20
10107818:	003e2906 	br	101070c0 <__alt_data_end+0xfffe70c0>
1010781c:	002b883a 	mov	r21,zero
10107820:	0023883a 	mov	r17,zero
10107824:	003f5406 	br	10107578 <__alt_data_end+0xfffe7578>
10107828:	61bfffc4 	addi	r6,r12,-1
1010782c:	300490fa 	slli	r2,r6,3
10107830:	00c40474 	movhi	r3,4113
10107834:	18c6d004 	addi	r3,r3,6976
10107838:	1885883a 	add	r2,r3,r2
1010783c:	11000017 	ldw	r4,0(r2)
10107840:	11400117 	ldw	r5,4(r2)
10107844:	d8800717 	ldw	r2,28(sp)
10107848:	880f883a 	mov	r7,r17
1010784c:	d9801215 	stw	r6,72(sp)
10107850:	800d883a 	mov	r6,r16
10107854:	db001615 	stw	r12,88(sp)
10107858:	15c00044 	addi	r23,r2,1
1010785c:	010d8200 	call	1010d820 <__muldf3>
10107860:	d9401017 	ldw	r5,64(sp)
10107864:	d9000f17 	ldw	r4,60(sp)
10107868:	d8c01515 	stw	r3,84(sp)
1010786c:	d8801415 	stw	r2,80(sp)
10107870:	010e8340 	call	1010e834 <__fixdfsi>
10107874:	1009883a 	mov	r4,r2
10107878:	1021883a 	mov	r16,r2
1010787c:	010e8b40 	call	1010e8b4 <__floatsidf>
10107880:	d9000f17 	ldw	r4,60(sp)
10107884:	d9401017 	ldw	r5,64(sp)
10107888:	100d883a 	mov	r6,r2
1010788c:	180f883a 	mov	r7,r3
10107890:	010df380 	call	1010df38 <__subdf3>
10107894:	1829883a 	mov	r20,r3
10107898:	d8c00717 	ldw	r3,28(sp)
1010789c:	84000c04 	addi	r16,r16,48
101078a0:	1023883a 	mov	r17,r2
101078a4:	1c000005 	stb	r16,0(r3)
101078a8:	db001617 	ldw	r12,88(sp)
101078ac:	00800044 	movi	r2,1
101078b0:	60802226 	beq	r12,r2,1010793c <_dtoa_r+0x1424>
101078b4:	d9c00717 	ldw	r7,28(sp)
101078b8:	8805883a 	mov	r2,r17
101078bc:	b82b883a 	mov	r21,r23
101078c0:	3b19883a 	add	r12,r7,r12
101078c4:	6023883a 	mov	r17,r12
101078c8:	a007883a 	mov	r3,r20
101078cc:	dc800f15 	stw	r18,60(sp)
101078d0:	000d883a 	mov	r6,zero
101078d4:	01d00934 	movhi	r7,16420
101078d8:	1009883a 	mov	r4,r2
101078dc:	180b883a 	mov	r5,r3
101078e0:	010d8200 	call	1010d820 <__muldf3>
101078e4:	180b883a 	mov	r5,r3
101078e8:	1009883a 	mov	r4,r2
101078ec:	1829883a 	mov	r20,r3
101078f0:	1025883a 	mov	r18,r2
101078f4:	010e8340 	call	1010e834 <__fixdfsi>
101078f8:	1009883a 	mov	r4,r2
101078fc:	1021883a 	mov	r16,r2
10107900:	010e8b40 	call	1010e8b4 <__floatsidf>
10107904:	100d883a 	mov	r6,r2
10107908:	180f883a 	mov	r7,r3
1010790c:	9009883a 	mov	r4,r18
10107910:	a00b883a 	mov	r5,r20
10107914:	84000c04 	addi	r16,r16,48
10107918:	010df380 	call	1010df38 <__subdf3>
1010791c:	ad400044 	addi	r21,r21,1
10107920:	ac3fffc5 	stb	r16,-1(r21)
10107924:	ac7fea1e 	bne	r21,r17,101078d0 <__alt_data_end+0xfffe78d0>
10107928:	1023883a 	mov	r17,r2
1010792c:	d8801217 	ldw	r2,72(sp)
10107930:	dc800f17 	ldw	r18,60(sp)
10107934:	1829883a 	mov	r20,r3
10107938:	b8af883a 	add	r23,r23,r2
1010793c:	d9001417 	ldw	r4,80(sp)
10107940:	d9401517 	ldw	r5,84(sp)
10107944:	000d883a 	mov	r6,zero
10107948:	01cff834 	movhi	r7,16352
1010794c:	010c4340 	call	1010c434 <__adddf3>
10107950:	880d883a 	mov	r6,r17
10107954:	a00f883a 	mov	r7,r20
10107958:	1009883a 	mov	r4,r2
1010795c:	180b883a 	mov	r5,r3
10107960:	010d72c0 	call	1010d72c <__ledf2>
10107964:	10003e0e 	bge	r2,zero,10107a60 <_dtoa_r+0x1548>
10107968:	d9001317 	ldw	r4,76(sp)
1010796c:	bd3fffc3 	ldbu	r20,-1(r23)
10107970:	d9000515 	stw	r4,20(sp)
10107974:	003d3b06 	br	10106e64 <__alt_data_end+0xfffe6e64>
10107978:	0027883a 	mov	r19,zero
1010797c:	003f1b06 	br	101075ec <__alt_data_end+0xfffe75ec>
10107980:	d8800817 	ldw	r2,32(sp)
10107984:	11e9c83a 	sub	r20,r2,r7
10107988:	0005883a 	mov	r2,zero
1010798c:	003d5406 	br	10106ee0 <__alt_data_end+0xfffe6ee0>
10107990:	00800044 	movi	r2,1
10107994:	003dc706 	br	101070b4 <__alt_data_end+0xfffe70b4>
10107998:	d8c00217 	ldw	r3,8(sp)
1010799c:	00800d84 	movi	r2,54
101079a0:	dd400a17 	ldw	r21,40(sp)
101079a4:	10c5c83a 	sub	r2,r2,r3
101079a8:	dd000817 	ldw	r20,32(sp)
101079ac:	003d4c06 	br	10106ee0 <__alt_data_end+0xfffe6ee0>
101079b0:	dc800f15 	stw	r18,60(sp)
101079b4:	dcc01015 	stw	r19,64(sp)
101079b8:	04000084 	movi	r16,2
101079bc:	003bed06 	br	10106974 <__alt_data_end+0xfffe6974>
101079c0:	d9000617 	ldw	r4,24(sp)
101079c4:	203f0d26 	beq	r4,zero,101075fc <__alt_data_end+0xfffe75fc>
101079c8:	d9800c17 	ldw	r6,48(sp)
101079cc:	01bcab0e 	bge	zero,r6,10106c7c <__alt_data_end+0xfffe6c7c>
101079d0:	d9401017 	ldw	r5,64(sp)
101079d4:	d9000f17 	ldw	r4,60(sp)
101079d8:	000d883a 	mov	r6,zero
101079dc:	01d00934 	movhi	r7,16420
101079e0:	010d8200 	call	1010d820 <__muldf3>
101079e4:	81000044 	addi	r4,r16,1
101079e8:	d8800f15 	stw	r2,60(sp)
101079ec:	d8c01015 	stw	r3,64(sp)
101079f0:	010e8b40 	call	1010e8b4 <__floatsidf>
101079f4:	d9800f17 	ldw	r6,60(sp)
101079f8:	d9c01017 	ldw	r7,64(sp)
101079fc:	1009883a 	mov	r4,r2
10107a00:	180b883a 	mov	r5,r3
10107a04:	010d8200 	call	1010d820 <__muldf3>
10107a08:	01d00734 	movhi	r7,16412
10107a0c:	000d883a 	mov	r6,zero
10107a10:	1009883a 	mov	r4,r2
10107a14:	180b883a 	mov	r5,r3
10107a18:	010c4340 	call	1010c434 <__adddf3>
10107a1c:	d9c00517 	ldw	r7,20(sp)
10107a20:	047f3034 	movhi	r17,64704
10107a24:	1021883a 	mov	r16,r2
10107a28:	39ffffc4 	addi	r7,r7,-1
10107a2c:	d9c01315 	stw	r7,76(sp)
10107a30:	1c63883a 	add	r17,r3,r17
10107a34:	db000c17 	ldw	r12,48(sp)
10107a38:	003bea06 	br	101069e4 <__alt_data_end+0xfffe69e4>
10107a3c:	dc000915 	stw	r16,36(sp)
10107a40:	003e0e06 	br	1010727c <__alt_data_end+0xfffe727c>
10107a44:	01000e44 	movi	r4,57
10107a48:	8825883a 	mov	r18,r17
10107a4c:	9dc00044 	addi	r23,r19,1
10107a50:	99000005 	stb	r4,0(r19)
10107a54:	a023883a 	mov	r17,r20
10107a58:	dc000915 	stw	r16,36(sp)
10107a5c:	003da406 	br	101070f0 <__alt_data_end+0xfffe70f0>
10107a60:	d9801417 	ldw	r6,80(sp)
10107a64:	d9c01517 	ldw	r7,84(sp)
10107a68:	0009883a 	mov	r4,zero
10107a6c:	014ff834 	movhi	r5,16352
10107a70:	010df380 	call	1010df38 <__subdf3>
10107a74:	880d883a 	mov	r6,r17
10107a78:	a00f883a 	mov	r7,r20
10107a7c:	1009883a 	mov	r4,r2
10107a80:	180b883a 	mov	r5,r3
10107a84:	010d6500 	call	1010d650 <__gedf2>
10107a88:	00bc7c0e 	bge	zero,r2,10106c7c <__alt_data_end+0xfffe6c7c>
10107a8c:	01000c04 	movi	r4,48
10107a90:	00000106 	br	10107a98 <_dtoa_r+0x1580>
10107a94:	102f883a 	mov	r23,r2
10107a98:	b8bfffc4 	addi	r2,r23,-1
10107a9c:	10c00007 	ldb	r3,0(r2)
10107aa0:	193ffc26 	beq	r3,r4,10107a94 <__alt_data_end+0xfffe7a94>
10107aa4:	d9801317 	ldw	r6,76(sp)
10107aa8:	d9800515 	stw	r6,20(sp)
10107aac:	003c4406 	br	10106bc0 <__alt_data_end+0xfffe6bc0>
10107ab0:	d9801317 	ldw	r6,76(sp)
10107ab4:	d9800515 	stw	r6,20(sp)
10107ab8:	003cea06 	br	10106e64 <__alt_data_end+0xfffe6e64>
10107abc:	dd800f17 	ldw	r22,60(sp)
10107ac0:	dcc01017 	ldw	r19,64(sp)
10107ac4:	dc801217 	ldw	r18,72(sp)
10107ac8:	003c6c06 	br	10106c7c <__alt_data_end+0xfffe6c7c>
10107acc:	903e031e 	bne	r18,zero,101072dc <__alt_data_end+0xfffe72dc>
10107ad0:	003ebb06 	br	101075c0 <__alt_data_end+0xfffe75c0>
10107ad4:	103e6c1e 	bne	r2,zero,10107488 <__alt_data_end+0xfffe7488>
10107ad8:	4080004c 	andi	r2,r8,1
10107adc:	103e6a26 	beq	r2,zero,10107488 <__alt_data_end+0xfffe7488>
10107ae0:	003e6606 	br	1010747c <__alt_data_end+0xfffe747c>
10107ae4:	d8c00317 	ldw	r3,12(sp)
10107ae8:	00800084 	movi	r2,2
10107aec:	10c02916 	blt	r2,r3,10107b94 <_dtoa_r+0x167c>
10107af0:	d9000c17 	ldw	r4,48(sp)
10107af4:	003e8806 	br	10107518 <__alt_data_end+0xfffe7518>
10107af8:	04000084 	movi	r16,2
10107afc:	003b9d06 	br	10106974 <__alt_data_end+0xfffe6974>
10107b00:	d9001317 	ldw	r4,76(sp)
10107b04:	d9000515 	stw	r4,20(sp)
10107b08:	003cd606 	br	10106e64 <__alt_data_end+0xfffe6e64>
10107b0c:	d8801317 	ldw	r2,76(sp)
10107b10:	d8800515 	stw	r2,20(sp)
10107b14:	003c2a06 	br	10106bc0 <__alt_data_end+0xfffe6bc0>
10107b18:	d9800317 	ldw	r6,12(sp)
10107b1c:	00800084 	movi	r2,2
10107b20:	11801516 	blt	r2,r6,10107b78 <_dtoa_r+0x1660>
10107b24:	d9c00c17 	ldw	r7,48(sp)
10107b28:	d9c00615 	stw	r7,24(sp)
10107b2c:	003df706 	br	1010730c <__alt_data_end+0xfffe730c>
10107b30:	193d3926 	beq	r3,r4,10107018 <__alt_data_end+0xfffe7018>
10107b34:	00c00f04 	movi	r3,60
10107b38:	1885c83a 	sub	r2,r3,r2
10107b3c:	003ddf06 	br	101072bc <__alt_data_end+0xfffe72bc>
10107b40:	e009883a 	mov	r4,fp
10107b44:	e0001115 	stw	zero,68(fp)
10107b48:	000b883a 	mov	r5,zero
10107b4c:	01086200 	call	10108620 <_Balloc>
10107b50:	d8800715 	stw	r2,28(sp)
10107b54:	d8c00717 	ldw	r3,28(sp)
10107b58:	00bfffc4 	movi	r2,-1
10107b5c:	01000044 	movi	r4,1
10107b60:	d8800c15 	stw	r2,48(sp)
10107b64:	e0c01015 	stw	r3,64(fp)
10107b68:	d9000b15 	stw	r4,44(sp)
10107b6c:	d8800615 	stw	r2,24(sp)
10107b70:	d8002215 	stw	zero,136(sp)
10107b74:	003c4106 	br	10106c7c <__alt_data_end+0xfffe6c7c>
10107b78:	d8c00c17 	ldw	r3,48(sp)
10107b7c:	d8c00615 	stw	r3,24(sp)
10107b80:	003e7006 	br	10107544 <__alt_data_end+0xfffe7544>
10107b84:	04400044 	movi	r17,1
10107b88:	003b2006 	br	1010680c <__alt_data_end+0xfffe680c>
10107b8c:	000b883a 	mov	r5,zero
10107b90:	003b3d06 	br	10106888 <__alt_data_end+0xfffe6888>
10107b94:	d8800c17 	ldw	r2,48(sp)
10107b98:	d8800615 	stw	r2,24(sp)
10107b9c:	003e6906 	br	10107544 <__alt_data_end+0xfffe7544>

10107ba0 <__sflags>:
10107ba0:	28800007 	ldb	r2,0(r5)
10107ba4:	00c01c84 	movi	r3,114
10107ba8:	10c02426 	beq	r2,r3,10107c3c <__sflags+0x9c>
10107bac:	00c01dc4 	movi	r3,119
10107bb0:	10c01e26 	beq	r2,r3,10107c2c <__sflags+0x8c>
10107bb4:	00c01844 	movi	r3,97
10107bb8:	10c00426 	beq	r2,r3,10107bcc <__sflags+0x2c>
10107bbc:	00800584 	movi	r2,22
10107bc0:	20800015 	stw	r2,0(r4)
10107bc4:	0005883a 	mov	r2,zero
10107bc8:	f800283a 	ret
10107bcc:	02c08204 	movi	r11,520
10107bd0:	01000044 	movi	r4,1
10107bd4:	00804204 	movi	r2,264
10107bd8:	01c00ac4 	movi	r7,43
10107bdc:	02bff8c4 	movi	r10,-29
10107be0:	027fff04 	movi	r9,-4
10107be4:	02001e04 	movi	r8,120
10107be8:	29400044 	addi	r5,r5,1
10107bec:	28c00007 	ldb	r3,0(r5)
10107bf0:	18000626 	beq	r3,zero,10107c0c <__sflags+0x6c>
10107bf4:	19c00826 	beq	r3,r7,10107c18 <__sflags+0x78>
10107bf8:	1a3ffb1e 	bne	r3,r8,10107be8 <__alt_data_end+0xfffe7be8>
10107bfc:	29400044 	addi	r5,r5,1
10107c00:	28c00007 	ldb	r3,0(r5)
10107c04:	21020014 	ori	r4,r4,2048
10107c08:	183ffa1e 	bne	r3,zero,10107bf4 <__alt_data_end+0xfffe7bf4>
10107c0c:	22c8b03a 	or	r4,r4,r11
10107c10:	31000015 	stw	r4,0(r6)
10107c14:	f800283a 	ret
10107c18:	1284703a 	and	r2,r2,r10
10107c1c:	2248703a 	and	r4,r4,r9
10107c20:	10800414 	ori	r2,r2,16
10107c24:	21000094 	ori	r4,r4,2
10107c28:	003fef06 	br	10107be8 <__alt_data_end+0xfffe7be8>
10107c2c:	02c18004 	movi	r11,1536
10107c30:	01000044 	movi	r4,1
10107c34:	00800204 	movi	r2,8
10107c38:	003fe706 	br	10107bd8 <__alt_data_end+0xfffe7bd8>
10107c3c:	0017883a 	mov	r11,zero
10107c40:	0009883a 	mov	r4,zero
10107c44:	00800104 	movi	r2,4
10107c48:	003fe306 	br	10107bd8 <__alt_data_end+0xfffe7bd8>

10107c4c <__sfvwrite_r>:
10107c4c:	30800217 	ldw	r2,8(r6)
10107c50:	10006726 	beq	r2,zero,10107df0 <__sfvwrite_r+0x1a4>
10107c54:	28c0030b 	ldhu	r3,12(r5)
10107c58:	defff404 	addi	sp,sp,-48
10107c5c:	dd400715 	stw	r21,28(sp)
10107c60:	dd000615 	stw	r20,24(sp)
10107c64:	dc000215 	stw	r16,8(sp)
10107c68:	dfc00b15 	stw	ra,44(sp)
10107c6c:	df000a15 	stw	fp,40(sp)
10107c70:	ddc00915 	stw	r23,36(sp)
10107c74:	dd800815 	stw	r22,32(sp)
10107c78:	dcc00515 	stw	r19,20(sp)
10107c7c:	dc800415 	stw	r18,16(sp)
10107c80:	dc400315 	stw	r17,12(sp)
10107c84:	1880020c 	andi	r2,r3,8
10107c88:	2821883a 	mov	r16,r5
10107c8c:	202b883a 	mov	r21,r4
10107c90:	3029883a 	mov	r20,r6
10107c94:	10002726 	beq	r2,zero,10107d34 <__sfvwrite_r+0xe8>
10107c98:	28800417 	ldw	r2,16(r5)
10107c9c:	10002526 	beq	r2,zero,10107d34 <__sfvwrite_r+0xe8>
10107ca0:	1880008c 	andi	r2,r3,2
10107ca4:	a4400017 	ldw	r17,0(r20)
10107ca8:	10002a26 	beq	r2,zero,10107d54 <__sfvwrite_r+0x108>
10107cac:	05a00034 	movhi	r22,32768
10107cb0:	0027883a 	mov	r19,zero
10107cb4:	0025883a 	mov	r18,zero
10107cb8:	b5bf0004 	addi	r22,r22,-1024
10107cbc:	980d883a 	mov	r6,r19
10107cc0:	a809883a 	mov	r4,r21
10107cc4:	90004626 	beq	r18,zero,10107de0 <__sfvwrite_r+0x194>
10107cc8:	900f883a 	mov	r7,r18
10107ccc:	b480022e 	bgeu	r22,r18,10107cd8 <__sfvwrite_r+0x8c>
10107cd0:	01e00034 	movhi	r7,32768
10107cd4:	39ff0004 	addi	r7,r7,-1024
10107cd8:	80800917 	ldw	r2,36(r16)
10107cdc:	81400717 	ldw	r5,28(r16)
10107ce0:	103ee83a 	callr	r2
10107ce4:	0080570e 	bge	zero,r2,10107e44 <__sfvwrite_r+0x1f8>
10107ce8:	a0c00217 	ldw	r3,8(r20)
10107cec:	98a7883a 	add	r19,r19,r2
10107cf0:	90a5c83a 	sub	r18,r18,r2
10107cf4:	1885c83a 	sub	r2,r3,r2
10107cf8:	a0800215 	stw	r2,8(r20)
10107cfc:	103fef1e 	bne	r2,zero,10107cbc <__alt_data_end+0xfffe7cbc>
10107d00:	0005883a 	mov	r2,zero
10107d04:	dfc00b17 	ldw	ra,44(sp)
10107d08:	df000a17 	ldw	fp,40(sp)
10107d0c:	ddc00917 	ldw	r23,36(sp)
10107d10:	dd800817 	ldw	r22,32(sp)
10107d14:	dd400717 	ldw	r21,28(sp)
10107d18:	dd000617 	ldw	r20,24(sp)
10107d1c:	dcc00517 	ldw	r19,20(sp)
10107d20:	dc800417 	ldw	r18,16(sp)
10107d24:	dc400317 	ldw	r17,12(sp)
10107d28:	dc000217 	ldw	r16,8(sp)
10107d2c:	dec00c04 	addi	sp,sp,48
10107d30:	f800283a 	ret
10107d34:	800b883a 	mov	r5,r16
10107d38:	a809883a 	mov	r4,r21
10107d3c:	01061700 	call	10106170 <__swsetup_r>
10107d40:	1000eb1e 	bne	r2,zero,101080f0 <__sfvwrite_r+0x4a4>
10107d44:	80c0030b 	ldhu	r3,12(r16)
10107d48:	a4400017 	ldw	r17,0(r20)
10107d4c:	1880008c 	andi	r2,r3,2
10107d50:	103fd61e 	bne	r2,zero,10107cac <__alt_data_end+0xfffe7cac>
10107d54:	1880004c 	andi	r2,r3,1
10107d58:	10003f1e 	bne	r2,zero,10107e58 <__sfvwrite_r+0x20c>
10107d5c:	0039883a 	mov	fp,zero
10107d60:	0025883a 	mov	r18,zero
10107d64:	90001a26 	beq	r18,zero,10107dd0 <__sfvwrite_r+0x184>
10107d68:	1880800c 	andi	r2,r3,512
10107d6c:	84c00217 	ldw	r19,8(r16)
10107d70:	10002126 	beq	r2,zero,10107df8 <__sfvwrite_r+0x1ac>
10107d74:	982f883a 	mov	r23,r19
10107d78:	94c09336 	bltu	r18,r19,10107fc8 <__sfvwrite_r+0x37c>
10107d7c:	1881200c 	andi	r2,r3,1152
10107d80:	10009e1e 	bne	r2,zero,10107ffc <__sfvwrite_r+0x3b0>
10107d84:	81000017 	ldw	r4,0(r16)
10107d88:	b80d883a 	mov	r6,r23
10107d8c:	e00b883a 	mov	r5,fp
10107d90:	01084c40 	call	101084c4 <memmove>
10107d94:	80c00217 	ldw	r3,8(r16)
10107d98:	81000017 	ldw	r4,0(r16)
10107d9c:	9005883a 	mov	r2,r18
10107da0:	1ce7c83a 	sub	r19,r3,r19
10107da4:	25cf883a 	add	r7,r4,r23
10107da8:	84c00215 	stw	r19,8(r16)
10107dac:	81c00015 	stw	r7,0(r16)
10107db0:	a0c00217 	ldw	r3,8(r20)
10107db4:	e0b9883a 	add	fp,fp,r2
10107db8:	90a5c83a 	sub	r18,r18,r2
10107dbc:	18a7c83a 	sub	r19,r3,r2
10107dc0:	a4c00215 	stw	r19,8(r20)
10107dc4:	983fce26 	beq	r19,zero,10107d00 <__alt_data_end+0xfffe7d00>
10107dc8:	80c0030b 	ldhu	r3,12(r16)
10107dcc:	903fe61e 	bne	r18,zero,10107d68 <__alt_data_end+0xfffe7d68>
10107dd0:	8f000017 	ldw	fp,0(r17)
10107dd4:	8c800117 	ldw	r18,4(r17)
10107dd8:	8c400204 	addi	r17,r17,8
10107ddc:	003fe106 	br	10107d64 <__alt_data_end+0xfffe7d64>
10107de0:	8cc00017 	ldw	r19,0(r17)
10107de4:	8c800117 	ldw	r18,4(r17)
10107de8:	8c400204 	addi	r17,r17,8
10107dec:	003fb306 	br	10107cbc <__alt_data_end+0xfffe7cbc>
10107df0:	0005883a 	mov	r2,zero
10107df4:	f800283a 	ret
10107df8:	81000017 	ldw	r4,0(r16)
10107dfc:	80800417 	ldw	r2,16(r16)
10107e00:	11005736 	bltu	r2,r4,10107f60 <__sfvwrite_r+0x314>
10107e04:	85c00517 	ldw	r23,20(r16)
10107e08:	95c05536 	bltu	r18,r23,10107f60 <__sfvwrite_r+0x314>
10107e0c:	00a00034 	movhi	r2,32768
10107e10:	10bfffc4 	addi	r2,r2,-1
10107e14:	9009883a 	mov	r4,r18
10107e18:	1480012e 	bgeu	r2,r18,10107e20 <__sfvwrite_r+0x1d4>
10107e1c:	1009883a 	mov	r4,r2
10107e20:	b80b883a 	mov	r5,r23
10107e24:	01018a80 	call	101018a8 <__divsi3>
10107e28:	15cf383a 	mul	r7,r2,r23
10107e2c:	81400717 	ldw	r5,28(r16)
10107e30:	80800917 	ldw	r2,36(r16)
10107e34:	e00d883a 	mov	r6,fp
10107e38:	a809883a 	mov	r4,r21
10107e3c:	103ee83a 	callr	r2
10107e40:	00bfdb16 	blt	zero,r2,10107db0 <__alt_data_end+0xfffe7db0>
10107e44:	8080030b 	ldhu	r2,12(r16)
10107e48:	10801014 	ori	r2,r2,64
10107e4c:	8080030d 	sth	r2,12(r16)
10107e50:	00bfffc4 	movi	r2,-1
10107e54:	003fab06 	br	10107d04 <__alt_data_end+0xfffe7d04>
10107e58:	0027883a 	mov	r19,zero
10107e5c:	0011883a 	mov	r8,zero
10107e60:	0039883a 	mov	fp,zero
10107e64:	0025883a 	mov	r18,zero
10107e68:	90001f26 	beq	r18,zero,10107ee8 <__sfvwrite_r+0x29c>
10107e6c:	40005a26 	beq	r8,zero,10107fd8 <__sfvwrite_r+0x38c>
10107e70:	982d883a 	mov	r22,r19
10107e74:	94c0012e 	bgeu	r18,r19,10107e7c <__sfvwrite_r+0x230>
10107e78:	902d883a 	mov	r22,r18
10107e7c:	81000017 	ldw	r4,0(r16)
10107e80:	80800417 	ldw	r2,16(r16)
10107e84:	b02f883a 	mov	r23,r22
10107e88:	81c00517 	ldw	r7,20(r16)
10107e8c:	1100032e 	bgeu	r2,r4,10107e9c <__sfvwrite_r+0x250>
10107e90:	80c00217 	ldw	r3,8(r16)
10107e94:	38c7883a 	add	r3,r7,r3
10107e98:	1d801816 	blt	r3,r22,10107efc <__sfvwrite_r+0x2b0>
10107e9c:	b1c03e16 	blt	r22,r7,10107f98 <__sfvwrite_r+0x34c>
10107ea0:	80800917 	ldw	r2,36(r16)
10107ea4:	81400717 	ldw	r5,28(r16)
10107ea8:	e00d883a 	mov	r6,fp
10107eac:	da000115 	stw	r8,4(sp)
10107eb0:	a809883a 	mov	r4,r21
10107eb4:	103ee83a 	callr	r2
10107eb8:	102f883a 	mov	r23,r2
10107ebc:	da000117 	ldw	r8,4(sp)
10107ec0:	00bfe00e 	bge	zero,r2,10107e44 <__alt_data_end+0xfffe7e44>
10107ec4:	9de7c83a 	sub	r19,r19,r23
10107ec8:	98001f26 	beq	r19,zero,10107f48 <__sfvwrite_r+0x2fc>
10107ecc:	a0800217 	ldw	r2,8(r20)
10107ed0:	e5f9883a 	add	fp,fp,r23
10107ed4:	95e5c83a 	sub	r18,r18,r23
10107ed8:	15efc83a 	sub	r23,r2,r23
10107edc:	a5c00215 	stw	r23,8(r20)
10107ee0:	b83f8726 	beq	r23,zero,10107d00 <__alt_data_end+0xfffe7d00>
10107ee4:	903fe11e 	bne	r18,zero,10107e6c <__alt_data_end+0xfffe7e6c>
10107ee8:	8f000017 	ldw	fp,0(r17)
10107eec:	8c800117 	ldw	r18,4(r17)
10107ef0:	0011883a 	mov	r8,zero
10107ef4:	8c400204 	addi	r17,r17,8
10107ef8:	003fdb06 	br	10107e68 <__alt_data_end+0xfffe7e68>
10107efc:	180d883a 	mov	r6,r3
10107f00:	e00b883a 	mov	r5,fp
10107f04:	da000115 	stw	r8,4(sp)
10107f08:	d8c00015 	stw	r3,0(sp)
10107f0c:	01084c40 	call	101084c4 <memmove>
10107f10:	d8c00017 	ldw	r3,0(sp)
10107f14:	80800017 	ldw	r2,0(r16)
10107f18:	800b883a 	mov	r5,r16
10107f1c:	a809883a 	mov	r4,r21
10107f20:	10c5883a 	add	r2,r2,r3
10107f24:	80800015 	stw	r2,0(r16)
10107f28:	d8c00015 	stw	r3,0(sp)
10107f2c:	0101d7c0 	call	10101d7c <_fflush_r>
10107f30:	d8c00017 	ldw	r3,0(sp)
10107f34:	da000117 	ldw	r8,4(sp)
10107f38:	103fc21e 	bne	r2,zero,10107e44 <__alt_data_end+0xfffe7e44>
10107f3c:	182f883a 	mov	r23,r3
10107f40:	9de7c83a 	sub	r19,r19,r23
10107f44:	983fe11e 	bne	r19,zero,10107ecc <__alt_data_end+0xfffe7ecc>
10107f48:	800b883a 	mov	r5,r16
10107f4c:	a809883a 	mov	r4,r21
10107f50:	0101d7c0 	call	10101d7c <_fflush_r>
10107f54:	103fbb1e 	bne	r2,zero,10107e44 <__alt_data_end+0xfffe7e44>
10107f58:	0011883a 	mov	r8,zero
10107f5c:	003fdb06 	br	10107ecc <__alt_data_end+0xfffe7ecc>
10107f60:	94c0012e 	bgeu	r18,r19,10107f68 <__sfvwrite_r+0x31c>
10107f64:	9027883a 	mov	r19,r18
10107f68:	980d883a 	mov	r6,r19
10107f6c:	e00b883a 	mov	r5,fp
10107f70:	01084c40 	call	101084c4 <memmove>
10107f74:	80800217 	ldw	r2,8(r16)
10107f78:	80c00017 	ldw	r3,0(r16)
10107f7c:	14c5c83a 	sub	r2,r2,r19
10107f80:	1cc7883a 	add	r3,r3,r19
10107f84:	80800215 	stw	r2,8(r16)
10107f88:	80c00015 	stw	r3,0(r16)
10107f8c:	10004326 	beq	r2,zero,1010809c <__sfvwrite_r+0x450>
10107f90:	9805883a 	mov	r2,r19
10107f94:	003f8606 	br	10107db0 <__alt_data_end+0xfffe7db0>
10107f98:	b00d883a 	mov	r6,r22
10107f9c:	e00b883a 	mov	r5,fp
10107fa0:	da000115 	stw	r8,4(sp)
10107fa4:	01084c40 	call	101084c4 <memmove>
10107fa8:	80800217 	ldw	r2,8(r16)
10107fac:	80c00017 	ldw	r3,0(r16)
10107fb0:	da000117 	ldw	r8,4(sp)
10107fb4:	1585c83a 	sub	r2,r2,r22
10107fb8:	1dad883a 	add	r22,r3,r22
10107fbc:	80800215 	stw	r2,8(r16)
10107fc0:	85800015 	stw	r22,0(r16)
10107fc4:	003fbf06 	br	10107ec4 <__alt_data_end+0xfffe7ec4>
10107fc8:	81000017 	ldw	r4,0(r16)
10107fcc:	9027883a 	mov	r19,r18
10107fd0:	902f883a 	mov	r23,r18
10107fd4:	003f6c06 	br	10107d88 <__alt_data_end+0xfffe7d88>
10107fd8:	900d883a 	mov	r6,r18
10107fdc:	01400284 	movi	r5,10
10107fe0:	e009883a 	mov	r4,fp
10107fe4:	01082980 	call	10108298 <memchr>
10107fe8:	10003e26 	beq	r2,zero,101080e4 <__sfvwrite_r+0x498>
10107fec:	10800044 	addi	r2,r2,1
10107ff0:	1727c83a 	sub	r19,r2,fp
10107ff4:	02000044 	movi	r8,1
10107ff8:	003f9d06 	br	10107e70 <__alt_data_end+0xfffe7e70>
10107ffc:	80800517 	ldw	r2,20(r16)
10108000:	81400417 	ldw	r5,16(r16)
10108004:	81c00017 	ldw	r7,0(r16)
10108008:	10a7883a 	add	r19,r2,r2
1010800c:	9885883a 	add	r2,r19,r2
10108010:	1026d7fa 	srli	r19,r2,31
10108014:	396dc83a 	sub	r22,r7,r5
10108018:	b1000044 	addi	r4,r22,1
1010801c:	9885883a 	add	r2,r19,r2
10108020:	1027d07a 	srai	r19,r2,1
10108024:	2485883a 	add	r2,r4,r18
10108028:	980d883a 	mov	r6,r19
1010802c:	9880022e 	bgeu	r19,r2,10108038 <__sfvwrite_r+0x3ec>
10108030:	1027883a 	mov	r19,r2
10108034:	100d883a 	mov	r6,r2
10108038:	18c1000c 	andi	r3,r3,1024
1010803c:	18001c26 	beq	r3,zero,101080b0 <__sfvwrite_r+0x464>
10108040:	300b883a 	mov	r5,r6
10108044:	a809883a 	mov	r4,r21
10108048:	0102f540 	call	10102f54 <_malloc_r>
1010804c:	102f883a 	mov	r23,r2
10108050:	10002926 	beq	r2,zero,101080f8 <__sfvwrite_r+0x4ac>
10108054:	81400417 	ldw	r5,16(r16)
10108058:	b00d883a 	mov	r6,r22
1010805c:	1009883a 	mov	r4,r2
10108060:	010837c0 	call	1010837c <memcpy>
10108064:	8080030b 	ldhu	r2,12(r16)
10108068:	00fedfc4 	movi	r3,-1153
1010806c:	10c4703a 	and	r2,r2,r3
10108070:	10802014 	ori	r2,r2,128
10108074:	8080030d 	sth	r2,12(r16)
10108078:	bd89883a 	add	r4,r23,r22
1010807c:	9d8fc83a 	sub	r7,r19,r22
10108080:	85c00415 	stw	r23,16(r16)
10108084:	84c00515 	stw	r19,20(r16)
10108088:	81000015 	stw	r4,0(r16)
1010808c:	9027883a 	mov	r19,r18
10108090:	81c00215 	stw	r7,8(r16)
10108094:	902f883a 	mov	r23,r18
10108098:	003f3b06 	br	10107d88 <__alt_data_end+0xfffe7d88>
1010809c:	800b883a 	mov	r5,r16
101080a0:	a809883a 	mov	r4,r21
101080a4:	0101d7c0 	call	10101d7c <_fflush_r>
101080a8:	103fb926 	beq	r2,zero,10107f90 <__alt_data_end+0xfffe7f90>
101080ac:	003f6506 	br	10107e44 <__alt_data_end+0xfffe7e44>
101080b0:	a809883a 	mov	r4,r21
101080b4:	010967c0 	call	1010967c <_realloc_r>
101080b8:	102f883a 	mov	r23,r2
101080bc:	103fee1e 	bne	r2,zero,10108078 <__alt_data_end+0xfffe8078>
101080c0:	81400417 	ldw	r5,16(r16)
101080c4:	a809883a 	mov	r4,r21
101080c8:	01024240 	call	10102424 <_free_r>
101080cc:	8080030b 	ldhu	r2,12(r16)
101080d0:	00ffdfc4 	movi	r3,-129
101080d4:	1884703a 	and	r2,r3,r2
101080d8:	00c00304 	movi	r3,12
101080dc:	a8c00015 	stw	r3,0(r21)
101080e0:	003f5906 	br	10107e48 <__alt_data_end+0xfffe7e48>
101080e4:	94c00044 	addi	r19,r18,1
101080e8:	02000044 	movi	r8,1
101080ec:	003f6006 	br	10107e70 <__alt_data_end+0xfffe7e70>
101080f0:	00bfffc4 	movi	r2,-1
101080f4:	003f0306 	br	10107d04 <__alt_data_end+0xfffe7d04>
101080f8:	00800304 	movi	r2,12
101080fc:	a8800015 	stw	r2,0(r21)
10108100:	8080030b 	ldhu	r2,12(r16)
10108104:	003f5006 	br	10107e48 <__alt_data_end+0xfffe7e48>

10108108 <_isatty_r>:
10108108:	defffd04 	addi	sp,sp,-12
1010810c:	dc000015 	stw	r16,0(sp)
10108110:	04040474 	movhi	r16,4113
10108114:	dc400115 	stw	r17,4(sp)
10108118:	84150804 	addi	r16,r16,21536
1010811c:	2023883a 	mov	r17,r4
10108120:	2809883a 	mov	r4,r5
10108124:	dfc00215 	stw	ra,8(sp)
10108128:	80000015 	stw	zero,0(r16)
1010812c:	010ed380 	call	1010ed38 <isatty>
10108130:	00ffffc4 	movi	r3,-1
10108134:	10c00526 	beq	r2,r3,1010814c <_isatty_r+0x44>
10108138:	dfc00217 	ldw	ra,8(sp)
1010813c:	dc400117 	ldw	r17,4(sp)
10108140:	dc000017 	ldw	r16,0(sp)
10108144:	dec00304 	addi	sp,sp,12
10108148:	f800283a 	ret
1010814c:	80c00017 	ldw	r3,0(r16)
10108150:	183ff926 	beq	r3,zero,10108138 <__alt_data_end+0xfffe8138>
10108154:	88c00015 	stw	r3,0(r17)
10108158:	003ff706 	br	10108138 <__alt_data_end+0xfffe8138>

1010815c <_setlocale_r>:
1010815c:	30001b26 	beq	r6,zero,101081cc <_setlocale_r+0x70>
10108160:	01440474 	movhi	r5,4113
10108164:	defffe04 	addi	sp,sp,-8
10108168:	2946b604 	addi	r5,r5,6872
1010816c:	3009883a 	mov	r4,r6
10108170:	dc000015 	stw	r16,0(sp)
10108174:	dfc00115 	stw	ra,4(sp)
10108178:	3021883a 	mov	r16,r6
1010817c:	0109c540 	call	10109c54 <strcmp>
10108180:	1000061e 	bne	r2,zero,1010819c <_setlocale_r+0x40>
10108184:	00840474 	movhi	r2,4113
10108188:	10869704 	addi	r2,r2,6748
1010818c:	dfc00117 	ldw	ra,4(sp)
10108190:	dc000017 	ldw	r16,0(sp)
10108194:	dec00204 	addi	sp,sp,8
10108198:	f800283a 	ret
1010819c:	01440474 	movhi	r5,4113
101081a0:	29469704 	addi	r5,r5,6748
101081a4:	8009883a 	mov	r4,r16
101081a8:	0109c540 	call	10109c54 <strcmp>
101081ac:	103ff526 	beq	r2,zero,10108184 <__alt_data_end+0xfffe8184>
101081b0:	01440474 	movhi	r5,4113
101081b4:	2946a104 	addi	r5,r5,6788
101081b8:	8009883a 	mov	r4,r16
101081bc:	0109c540 	call	10109c54 <strcmp>
101081c0:	103ff026 	beq	r2,zero,10108184 <__alt_data_end+0xfffe8184>
101081c4:	0005883a 	mov	r2,zero
101081c8:	003ff006 	br	1010818c <__alt_data_end+0xfffe818c>
101081cc:	00840474 	movhi	r2,4113
101081d0:	10869704 	addi	r2,r2,6748
101081d4:	f800283a 	ret

101081d8 <__locale_charset>:
101081d8:	00840474 	movhi	r2,4113
101081dc:	10896d04 	addi	r2,r2,9652
101081e0:	f800283a 	ret

101081e4 <__locale_mb_cur_max>:
101081e4:	00840474 	movhi	r2,4113
101081e8:	108e1304 	addi	r2,r2,14412
101081ec:	10800017 	ldw	r2,0(r2)
101081f0:	f800283a 	ret

101081f4 <__locale_msgcharset>:
101081f4:	00840474 	movhi	r2,4113
101081f8:	10896504 	addi	r2,r2,9620
101081fc:	f800283a 	ret

10108200 <__locale_cjk_lang>:
10108200:	0005883a 	mov	r2,zero
10108204:	f800283a 	ret

10108208 <_localeconv_r>:
10108208:	00840474 	movhi	r2,4113
1010820c:	10897504 	addi	r2,r2,9684
10108210:	f800283a 	ret

10108214 <setlocale>:
10108214:	00840474 	movhi	r2,4113
10108218:	108e1004 	addi	r2,r2,14400
1010821c:	280d883a 	mov	r6,r5
10108220:	200b883a 	mov	r5,r4
10108224:	11000017 	ldw	r4,0(r2)
10108228:	010815c1 	jmpi	1010815c <_setlocale_r>

1010822c <localeconv>:
1010822c:	00840474 	movhi	r2,4113
10108230:	10897504 	addi	r2,r2,9684
10108234:	f800283a 	ret

10108238 <_lseek_r>:
10108238:	defffd04 	addi	sp,sp,-12
1010823c:	2805883a 	mov	r2,r5
10108240:	dc000015 	stw	r16,0(sp)
10108244:	04040474 	movhi	r16,4113
10108248:	dc400115 	stw	r17,4(sp)
1010824c:	300b883a 	mov	r5,r6
10108250:	84150804 	addi	r16,r16,21536
10108254:	2023883a 	mov	r17,r4
10108258:	380d883a 	mov	r6,r7
1010825c:	1009883a 	mov	r4,r2
10108260:	dfc00215 	stw	ra,8(sp)
10108264:	80000015 	stw	zero,0(r16)
10108268:	010ef180 	call	1010ef18 <lseek>
1010826c:	00ffffc4 	movi	r3,-1
10108270:	10c00526 	beq	r2,r3,10108288 <_lseek_r+0x50>
10108274:	dfc00217 	ldw	ra,8(sp)
10108278:	dc400117 	ldw	r17,4(sp)
1010827c:	dc000017 	ldw	r16,0(sp)
10108280:	dec00304 	addi	sp,sp,12
10108284:	f800283a 	ret
10108288:	80c00017 	ldw	r3,0(r16)
1010828c:	183ff926 	beq	r3,zero,10108274 <__alt_data_end+0xfffe8274>
10108290:	88c00015 	stw	r3,0(r17)
10108294:	003ff706 	br	10108274 <__alt_data_end+0xfffe8274>

10108298 <memchr>:
10108298:	208000cc 	andi	r2,r4,3
1010829c:	280f883a 	mov	r7,r5
101082a0:	10003426 	beq	r2,zero,10108374 <memchr+0xdc>
101082a4:	30bfffc4 	addi	r2,r6,-1
101082a8:	30001a26 	beq	r6,zero,10108314 <memchr+0x7c>
101082ac:	20c00003 	ldbu	r3,0(r4)
101082b0:	29803fcc 	andi	r6,r5,255
101082b4:	30c0051e 	bne	r6,r3,101082cc <memchr+0x34>
101082b8:	00001806 	br	1010831c <memchr+0x84>
101082bc:	10001526 	beq	r2,zero,10108314 <memchr+0x7c>
101082c0:	20c00003 	ldbu	r3,0(r4)
101082c4:	10bfffc4 	addi	r2,r2,-1
101082c8:	30c01426 	beq	r6,r3,1010831c <memchr+0x84>
101082cc:	21000044 	addi	r4,r4,1
101082d0:	20c000cc 	andi	r3,r4,3
101082d4:	183ff91e 	bne	r3,zero,101082bc <__alt_data_end+0xfffe82bc>
101082d8:	020000c4 	movi	r8,3
101082dc:	40801136 	bltu	r8,r2,10108324 <memchr+0x8c>
101082e0:	10000c26 	beq	r2,zero,10108314 <memchr+0x7c>
101082e4:	20c00003 	ldbu	r3,0(r4)
101082e8:	29403fcc 	andi	r5,r5,255
101082ec:	28c00b26 	beq	r5,r3,1010831c <memchr+0x84>
101082f0:	20c00044 	addi	r3,r4,1
101082f4:	39803fcc 	andi	r6,r7,255
101082f8:	2089883a 	add	r4,r4,r2
101082fc:	00000306 	br	1010830c <memchr+0x74>
10108300:	18c00044 	addi	r3,r3,1
10108304:	197fffc3 	ldbu	r5,-1(r3)
10108308:	31400526 	beq	r6,r5,10108320 <memchr+0x88>
1010830c:	1805883a 	mov	r2,r3
10108310:	20fffb1e 	bne	r4,r3,10108300 <__alt_data_end+0xfffe8300>
10108314:	0005883a 	mov	r2,zero
10108318:	f800283a 	ret
1010831c:	2005883a 	mov	r2,r4
10108320:	f800283a 	ret
10108324:	28c03fcc 	andi	r3,r5,255
10108328:	1812923a 	slli	r9,r3,8
1010832c:	02ffbff4 	movhi	r11,65279
10108330:	02a02074 	movhi	r10,32897
10108334:	48d2b03a 	or	r9,r9,r3
10108338:	4806943a 	slli	r3,r9,16
1010833c:	5affbfc4 	addi	r11,r11,-257
10108340:	52a02004 	addi	r10,r10,-32640
10108344:	48d2b03a 	or	r9,r9,r3
10108348:	20c00017 	ldw	r3,0(r4)
1010834c:	48c6f03a 	xor	r3,r9,r3
10108350:	1acd883a 	add	r6,r3,r11
10108354:	00c6303a 	nor	r3,zero,r3
10108358:	30c6703a 	and	r3,r6,r3
1010835c:	1a86703a 	and	r3,r3,r10
10108360:	183fe01e 	bne	r3,zero,101082e4 <__alt_data_end+0xfffe82e4>
10108364:	10bfff04 	addi	r2,r2,-4
10108368:	21000104 	addi	r4,r4,4
1010836c:	40bff636 	bltu	r8,r2,10108348 <__alt_data_end+0xfffe8348>
10108370:	003fdb06 	br	101082e0 <__alt_data_end+0xfffe82e0>
10108374:	3005883a 	mov	r2,r6
10108378:	003fd706 	br	101082d8 <__alt_data_end+0xfffe82d8>

1010837c <memcpy>:
1010837c:	defffd04 	addi	sp,sp,-12
10108380:	dfc00215 	stw	ra,8(sp)
10108384:	dc400115 	stw	r17,4(sp)
10108388:	dc000015 	stw	r16,0(sp)
1010838c:	00c003c4 	movi	r3,15
10108390:	2005883a 	mov	r2,r4
10108394:	1980452e 	bgeu	r3,r6,101084ac <memcpy+0x130>
10108398:	2906b03a 	or	r3,r5,r4
1010839c:	18c000cc 	andi	r3,r3,3
101083a0:	1800441e 	bne	r3,zero,101084b4 <memcpy+0x138>
101083a4:	347ffc04 	addi	r17,r6,-16
101083a8:	8822d13a 	srli	r17,r17,4
101083ac:	28c00104 	addi	r3,r5,4
101083b0:	23400104 	addi	r13,r4,4
101083b4:	8820913a 	slli	r16,r17,4
101083b8:	2b000204 	addi	r12,r5,8
101083bc:	22c00204 	addi	r11,r4,8
101083c0:	84000504 	addi	r16,r16,20
101083c4:	2a800304 	addi	r10,r5,12
101083c8:	22400304 	addi	r9,r4,12
101083cc:	2c21883a 	add	r16,r5,r16
101083d0:	2811883a 	mov	r8,r5
101083d4:	200f883a 	mov	r7,r4
101083d8:	41000017 	ldw	r4,0(r8)
101083dc:	1fc00017 	ldw	ra,0(r3)
101083e0:	63c00017 	ldw	r15,0(r12)
101083e4:	39000015 	stw	r4,0(r7)
101083e8:	53800017 	ldw	r14,0(r10)
101083ec:	6fc00015 	stw	ra,0(r13)
101083f0:	5bc00015 	stw	r15,0(r11)
101083f4:	4b800015 	stw	r14,0(r9)
101083f8:	18c00404 	addi	r3,r3,16
101083fc:	39c00404 	addi	r7,r7,16
10108400:	42000404 	addi	r8,r8,16
10108404:	6b400404 	addi	r13,r13,16
10108408:	63000404 	addi	r12,r12,16
1010840c:	5ac00404 	addi	r11,r11,16
10108410:	52800404 	addi	r10,r10,16
10108414:	4a400404 	addi	r9,r9,16
10108418:	1c3fef1e 	bne	r3,r16,101083d8 <__alt_data_end+0xfffe83d8>
1010841c:	89c00044 	addi	r7,r17,1
10108420:	380e913a 	slli	r7,r7,4
10108424:	310003cc 	andi	r4,r6,15
10108428:	02c000c4 	movi	r11,3
1010842c:	11c7883a 	add	r3,r2,r7
10108430:	29cb883a 	add	r5,r5,r7
10108434:	5900212e 	bgeu	r11,r4,101084bc <memcpy+0x140>
10108438:	1813883a 	mov	r9,r3
1010843c:	2811883a 	mov	r8,r5
10108440:	200f883a 	mov	r7,r4
10108444:	42800017 	ldw	r10,0(r8)
10108448:	4a400104 	addi	r9,r9,4
1010844c:	39ffff04 	addi	r7,r7,-4
10108450:	4abfff15 	stw	r10,-4(r9)
10108454:	42000104 	addi	r8,r8,4
10108458:	59fffa36 	bltu	r11,r7,10108444 <__alt_data_end+0xfffe8444>
1010845c:	213fff04 	addi	r4,r4,-4
10108460:	2008d0ba 	srli	r4,r4,2
10108464:	318000cc 	andi	r6,r6,3
10108468:	21000044 	addi	r4,r4,1
1010846c:	2109883a 	add	r4,r4,r4
10108470:	2109883a 	add	r4,r4,r4
10108474:	1907883a 	add	r3,r3,r4
10108478:	290b883a 	add	r5,r5,r4
1010847c:	30000626 	beq	r6,zero,10108498 <memcpy+0x11c>
10108480:	198d883a 	add	r6,r3,r6
10108484:	29c00003 	ldbu	r7,0(r5)
10108488:	18c00044 	addi	r3,r3,1
1010848c:	29400044 	addi	r5,r5,1
10108490:	19ffffc5 	stb	r7,-1(r3)
10108494:	19bffb1e 	bne	r3,r6,10108484 <__alt_data_end+0xfffe8484>
10108498:	dfc00217 	ldw	ra,8(sp)
1010849c:	dc400117 	ldw	r17,4(sp)
101084a0:	dc000017 	ldw	r16,0(sp)
101084a4:	dec00304 	addi	sp,sp,12
101084a8:	f800283a 	ret
101084ac:	2007883a 	mov	r3,r4
101084b0:	003ff206 	br	1010847c <__alt_data_end+0xfffe847c>
101084b4:	2007883a 	mov	r3,r4
101084b8:	003ff106 	br	10108480 <__alt_data_end+0xfffe8480>
101084bc:	200d883a 	mov	r6,r4
101084c0:	003fee06 	br	1010847c <__alt_data_end+0xfffe847c>

101084c4 <memmove>:
101084c4:	2005883a 	mov	r2,r4
101084c8:	29000b2e 	bgeu	r5,r4,101084f8 <memmove+0x34>
101084cc:	298f883a 	add	r7,r5,r6
101084d0:	21c0092e 	bgeu	r4,r7,101084f8 <memmove+0x34>
101084d4:	2187883a 	add	r3,r4,r6
101084d8:	198bc83a 	sub	r5,r3,r6
101084dc:	30004826 	beq	r6,zero,10108600 <memmove+0x13c>
101084e0:	39ffffc4 	addi	r7,r7,-1
101084e4:	39000003 	ldbu	r4,0(r7)
101084e8:	18ffffc4 	addi	r3,r3,-1
101084ec:	19000005 	stb	r4,0(r3)
101084f0:	28fffb1e 	bne	r5,r3,101084e0 <__alt_data_end+0xfffe84e0>
101084f4:	f800283a 	ret
101084f8:	00c003c4 	movi	r3,15
101084fc:	1980412e 	bgeu	r3,r6,10108604 <memmove+0x140>
10108500:	2886b03a 	or	r3,r5,r2
10108504:	18c000cc 	andi	r3,r3,3
10108508:	1800401e 	bne	r3,zero,1010860c <memmove+0x148>
1010850c:	33fffc04 	addi	r15,r6,-16
10108510:	781ed13a 	srli	r15,r15,4
10108514:	28c00104 	addi	r3,r5,4
10108518:	13400104 	addi	r13,r2,4
1010851c:	781c913a 	slli	r14,r15,4
10108520:	2b000204 	addi	r12,r5,8
10108524:	12c00204 	addi	r11,r2,8
10108528:	73800504 	addi	r14,r14,20
1010852c:	2a800304 	addi	r10,r5,12
10108530:	12400304 	addi	r9,r2,12
10108534:	2b9d883a 	add	r14,r5,r14
10108538:	2811883a 	mov	r8,r5
1010853c:	100f883a 	mov	r7,r2
10108540:	41000017 	ldw	r4,0(r8)
10108544:	39c00404 	addi	r7,r7,16
10108548:	18c00404 	addi	r3,r3,16
1010854c:	393ffc15 	stw	r4,-16(r7)
10108550:	193ffc17 	ldw	r4,-16(r3)
10108554:	6b400404 	addi	r13,r13,16
10108558:	5ac00404 	addi	r11,r11,16
1010855c:	693ffc15 	stw	r4,-16(r13)
10108560:	61000017 	ldw	r4,0(r12)
10108564:	4a400404 	addi	r9,r9,16
10108568:	42000404 	addi	r8,r8,16
1010856c:	593ffc15 	stw	r4,-16(r11)
10108570:	51000017 	ldw	r4,0(r10)
10108574:	63000404 	addi	r12,r12,16
10108578:	52800404 	addi	r10,r10,16
1010857c:	493ffc15 	stw	r4,-16(r9)
10108580:	1bbfef1e 	bne	r3,r14,10108540 <__alt_data_end+0xfffe8540>
10108584:	79000044 	addi	r4,r15,1
10108588:	2008913a 	slli	r4,r4,4
1010858c:	328003cc 	andi	r10,r6,15
10108590:	02c000c4 	movi	r11,3
10108594:	1107883a 	add	r3,r2,r4
10108598:	290b883a 	add	r5,r5,r4
1010859c:	5a801e2e 	bgeu	r11,r10,10108618 <memmove+0x154>
101085a0:	1813883a 	mov	r9,r3
101085a4:	2811883a 	mov	r8,r5
101085a8:	500f883a 	mov	r7,r10
101085ac:	41000017 	ldw	r4,0(r8)
101085b0:	4a400104 	addi	r9,r9,4
101085b4:	39ffff04 	addi	r7,r7,-4
101085b8:	493fff15 	stw	r4,-4(r9)
101085bc:	42000104 	addi	r8,r8,4
101085c0:	59fffa36 	bltu	r11,r7,101085ac <__alt_data_end+0xfffe85ac>
101085c4:	513fff04 	addi	r4,r10,-4
101085c8:	2008d0ba 	srli	r4,r4,2
101085cc:	318000cc 	andi	r6,r6,3
101085d0:	21000044 	addi	r4,r4,1
101085d4:	2109883a 	add	r4,r4,r4
101085d8:	2109883a 	add	r4,r4,r4
101085dc:	1907883a 	add	r3,r3,r4
101085e0:	290b883a 	add	r5,r5,r4
101085e4:	30000b26 	beq	r6,zero,10108614 <memmove+0x150>
101085e8:	198d883a 	add	r6,r3,r6
101085ec:	29c00003 	ldbu	r7,0(r5)
101085f0:	18c00044 	addi	r3,r3,1
101085f4:	29400044 	addi	r5,r5,1
101085f8:	19ffffc5 	stb	r7,-1(r3)
101085fc:	19bffb1e 	bne	r3,r6,101085ec <__alt_data_end+0xfffe85ec>
10108600:	f800283a 	ret
10108604:	1007883a 	mov	r3,r2
10108608:	003ff606 	br	101085e4 <__alt_data_end+0xfffe85e4>
1010860c:	1007883a 	mov	r3,r2
10108610:	003ff506 	br	101085e8 <__alt_data_end+0xfffe85e8>
10108614:	f800283a 	ret
10108618:	500d883a 	mov	r6,r10
1010861c:	003ff106 	br	101085e4 <__alt_data_end+0xfffe85e4>

10108620 <_Balloc>:
10108620:	20801317 	ldw	r2,76(r4)
10108624:	defffc04 	addi	sp,sp,-16
10108628:	dc400115 	stw	r17,4(sp)
1010862c:	dc000015 	stw	r16,0(sp)
10108630:	dfc00315 	stw	ra,12(sp)
10108634:	dc800215 	stw	r18,8(sp)
10108638:	2023883a 	mov	r17,r4
1010863c:	2821883a 	mov	r16,r5
10108640:	10000f26 	beq	r2,zero,10108680 <_Balloc+0x60>
10108644:	8407883a 	add	r3,r16,r16
10108648:	18c7883a 	add	r3,r3,r3
1010864c:	10c7883a 	add	r3,r2,r3
10108650:	18800017 	ldw	r2,0(r3)
10108654:	10001126 	beq	r2,zero,1010869c <_Balloc+0x7c>
10108658:	11000017 	ldw	r4,0(r2)
1010865c:	19000015 	stw	r4,0(r3)
10108660:	10000415 	stw	zero,16(r2)
10108664:	10000315 	stw	zero,12(r2)
10108668:	dfc00317 	ldw	ra,12(sp)
1010866c:	dc800217 	ldw	r18,8(sp)
10108670:	dc400117 	ldw	r17,4(sp)
10108674:	dc000017 	ldw	r16,0(sp)
10108678:	dec00404 	addi	sp,sp,16
1010867c:	f800283a 	ret
10108680:	01800844 	movi	r6,33
10108684:	01400104 	movi	r5,4
10108688:	010b3780 	call	1010b378 <_calloc_r>
1010868c:	88801315 	stw	r2,76(r17)
10108690:	103fec1e 	bne	r2,zero,10108644 <__alt_data_end+0xfffe8644>
10108694:	0005883a 	mov	r2,zero
10108698:	003ff306 	br	10108668 <__alt_data_end+0xfffe8668>
1010869c:	01400044 	movi	r5,1
101086a0:	2c24983a 	sll	r18,r5,r16
101086a4:	8809883a 	mov	r4,r17
101086a8:	91800144 	addi	r6,r18,5
101086ac:	318d883a 	add	r6,r6,r6
101086b0:	318d883a 	add	r6,r6,r6
101086b4:	010b3780 	call	1010b378 <_calloc_r>
101086b8:	103ff626 	beq	r2,zero,10108694 <__alt_data_end+0xfffe8694>
101086bc:	14000115 	stw	r16,4(r2)
101086c0:	14800215 	stw	r18,8(r2)
101086c4:	003fe606 	br	10108660 <__alt_data_end+0xfffe8660>

101086c8 <_Bfree>:
101086c8:	28000826 	beq	r5,zero,101086ec <_Bfree+0x24>
101086cc:	28c00117 	ldw	r3,4(r5)
101086d0:	20801317 	ldw	r2,76(r4)
101086d4:	18c7883a 	add	r3,r3,r3
101086d8:	18c7883a 	add	r3,r3,r3
101086dc:	10c5883a 	add	r2,r2,r3
101086e0:	10c00017 	ldw	r3,0(r2)
101086e4:	28c00015 	stw	r3,0(r5)
101086e8:	11400015 	stw	r5,0(r2)
101086ec:	f800283a 	ret

101086f0 <__multadd>:
101086f0:	defffa04 	addi	sp,sp,-24
101086f4:	dc800315 	stw	r18,12(sp)
101086f8:	dc400215 	stw	r17,8(sp)
101086fc:	dc000115 	stw	r16,4(sp)
10108700:	2823883a 	mov	r17,r5
10108704:	2c000417 	ldw	r16,16(r5)
10108708:	dfc00515 	stw	ra,20(sp)
1010870c:	dcc00415 	stw	r19,16(sp)
10108710:	2025883a 	mov	r18,r4
10108714:	29400504 	addi	r5,r5,20
10108718:	0011883a 	mov	r8,zero
1010871c:	28c00017 	ldw	r3,0(r5)
10108720:	29400104 	addi	r5,r5,4
10108724:	42000044 	addi	r8,r8,1
10108728:	18bfffcc 	andi	r2,r3,65535
1010872c:	1185383a 	mul	r2,r2,r6
10108730:	1806d43a 	srli	r3,r3,16
10108734:	11cf883a 	add	r7,r2,r7
10108738:	3808d43a 	srli	r4,r7,16
1010873c:	1987383a 	mul	r3,r3,r6
10108740:	38bfffcc 	andi	r2,r7,65535
10108744:	1907883a 	add	r3,r3,r4
10108748:	1808943a 	slli	r4,r3,16
1010874c:	180ed43a 	srli	r7,r3,16
10108750:	2085883a 	add	r2,r4,r2
10108754:	28bfff15 	stw	r2,-4(r5)
10108758:	443ff016 	blt	r8,r16,1010871c <__alt_data_end+0xfffe871c>
1010875c:	38000926 	beq	r7,zero,10108784 <__multadd+0x94>
10108760:	88800217 	ldw	r2,8(r17)
10108764:	80800f0e 	bge	r16,r2,101087a4 <__multadd+0xb4>
10108768:	80800144 	addi	r2,r16,5
1010876c:	1085883a 	add	r2,r2,r2
10108770:	1085883a 	add	r2,r2,r2
10108774:	8885883a 	add	r2,r17,r2
10108778:	11c00015 	stw	r7,0(r2)
1010877c:	84000044 	addi	r16,r16,1
10108780:	8c000415 	stw	r16,16(r17)
10108784:	8805883a 	mov	r2,r17
10108788:	dfc00517 	ldw	ra,20(sp)
1010878c:	dcc00417 	ldw	r19,16(sp)
10108790:	dc800317 	ldw	r18,12(sp)
10108794:	dc400217 	ldw	r17,8(sp)
10108798:	dc000117 	ldw	r16,4(sp)
1010879c:	dec00604 	addi	sp,sp,24
101087a0:	f800283a 	ret
101087a4:	89400117 	ldw	r5,4(r17)
101087a8:	9009883a 	mov	r4,r18
101087ac:	d9c00015 	stw	r7,0(sp)
101087b0:	29400044 	addi	r5,r5,1
101087b4:	01086200 	call	10108620 <_Balloc>
101087b8:	89800417 	ldw	r6,16(r17)
101087bc:	89400304 	addi	r5,r17,12
101087c0:	11000304 	addi	r4,r2,12
101087c4:	31800084 	addi	r6,r6,2
101087c8:	318d883a 	add	r6,r6,r6
101087cc:	318d883a 	add	r6,r6,r6
101087d0:	1027883a 	mov	r19,r2
101087d4:	010837c0 	call	1010837c <memcpy>
101087d8:	d9c00017 	ldw	r7,0(sp)
101087dc:	88000a26 	beq	r17,zero,10108808 <__multadd+0x118>
101087e0:	88c00117 	ldw	r3,4(r17)
101087e4:	90801317 	ldw	r2,76(r18)
101087e8:	18c7883a 	add	r3,r3,r3
101087ec:	18c7883a 	add	r3,r3,r3
101087f0:	10c5883a 	add	r2,r2,r3
101087f4:	10c00017 	ldw	r3,0(r2)
101087f8:	88c00015 	stw	r3,0(r17)
101087fc:	14400015 	stw	r17,0(r2)
10108800:	9823883a 	mov	r17,r19
10108804:	003fd806 	br	10108768 <__alt_data_end+0xfffe8768>
10108808:	9823883a 	mov	r17,r19
1010880c:	003fd606 	br	10108768 <__alt_data_end+0xfffe8768>

10108810 <__s2b>:
10108810:	defff904 	addi	sp,sp,-28
10108814:	dc400115 	stw	r17,4(sp)
10108818:	dc000015 	stw	r16,0(sp)
1010881c:	2023883a 	mov	r17,r4
10108820:	2821883a 	mov	r16,r5
10108824:	39000204 	addi	r4,r7,8
10108828:	01400244 	movi	r5,9
1010882c:	dcc00315 	stw	r19,12(sp)
10108830:	dc800215 	stw	r18,8(sp)
10108834:	dfc00615 	stw	ra,24(sp)
10108838:	dd400515 	stw	r21,20(sp)
1010883c:	dd000415 	stw	r20,16(sp)
10108840:	3825883a 	mov	r18,r7
10108844:	3027883a 	mov	r19,r6
10108848:	01018a80 	call	101018a8 <__divsi3>
1010884c:	00c00044 	movi	r3,1
10108850:	000b883a 	mov	r5,zero
10108854:	1880030e 	bge	r3,r2,10108864 <__s2b+0x54>
10108858:	18c7883a 	add	r3,r3,r3
1010885c:	29400044 	addi	r5,r5,1
10108860:	18bffd16 	blt	r3,r2,10108858 <__alt_data_end+0xfffe8858>
10108864:	8809883a 	mov	r4,r17
10108868:	01086200 	call	10108620 <_Balloc>
1010886c:	d8c00717 	ldw	r3,28(sp)
10108870:	10c00515 	stw	r3,20(r2)
10108874:	00c00044 	movi	r3,1
10108878:	10c00415 	stw	r3,16(r2)
1010887c:	00c00244 	movi	r3,9
10108880:	1cc0210e 	bge	r3,r19,10108908 <__s2b+0xf8>
10108884:	80eb883a 	add	r21,r16,r3
10108888:	a829883a 	mov	r20,r21
1010888c:	84e1883a 	add	r16,r16,r19
10108890:	a1c00007 	ldb	r7,0(r20)
10108894:	01800284 	movi	r6,10
10108898:	a5000044 	addi	r20,r20,1
1010889c:	100b883a 	mov	r5,r2
101088a0:	39fff404 	addi	r7,r7,-48
101088a4:	8809883a 	mov	r4,r17
101088a8:	01086f00 	call	101086f0 <__multadd>
101088ac:	a43ff81e 	bne	r20,r16,10108890 <__alt_data_end+0xfffe8890>
101088b0:	ace1883a 	add	r16,r21,r19
101088b4:	843ffe04 	addi	r16,r16,-8
101088b8:	9c800a0e 	bge	r19,r18,101088e4 <__s2b+0xd4>
101088bc:	94e5c83a 	sub	r18,r18,r19
101088c0:	84a5883a 	add	r18,r16,r18
101088c4:	81c00007 	ldb	r7,0(r16)
101088c8:	01800284 	movi	r6,10
101088cc:	84000044 	addi	r16,r16,1
101088d0:	100b883a 	mov	r5,r2
101088d4:	39fff404 	addi	r7,r7,-48
101088d8:	8809883a 	mov	r4,r17
101088dc:	01086f00 	call	101086f0 <__multadd>
101088e0:	84bff81e 	bne	r16,r18,101088c4 <__alt_data_end+0xfffe88c4>
101088e4:	dfc00617 	ldw	ra,24(sp)
101088e8:	dd400517 	ldw	r21,20(sp)
101088ec:	dd000417 	ldw	r20,16(sp)
101088f0:	dcc00317 	ldw	r19,12(sp)
101088f4:	dc800217 	ldw	r18,8(sp)
101088f8:	dc400117 	ldw	r17,4(sp)
101088fc:	dc000017 	ldw	r16,0(sp)
10108900:	dec00704 	addi	sp,sp,28
10108904:	f800283a 	ret
10108908:	84000284 	addi	r16,r16,10
1010890c:	1827883a 	mov	r19,r3
10108910:	003fe906 	br	101088b8 <__alt_data_end+0xfffe88b8>

10108914 <__hi0bits>:
10108914:	20bfffec 	andhi	r2,r4,65535
10108918:	1000141e 	bne	r2,zero,1010896c <__hi0bits+0x58>
1010891c:	2008943a 	slli	r4,r4,16
10108920:	00800404 	movi	r2,16
10108924:	20ffc02c 	andhi	r3,r4,65280
10108928:	1800021e 	bne	r3,zero,10108934 <__hi0bits+0x20>
1010892c:	2008923a 	slli	r4,r4,8
10108930:	10800204 	addi	r2,r2,8
10108934:	20fc002c 	andhi	r3,r4,61440
10108938:	1800021e 	bne	r3,zero,10108944 <__hi0bits+0x30>
1010893c:	2008913a 	slli	r4,r4,4
10108940:	10800104 	addi	r2,r2,4
10108944:	20f0002c 	andhi	r3,r4,49152
10108948:	1800031e 	bne	r3,zero,10108958 <__hi0bits+0x44>
1010894c:	2109883a 	add	r4,r4,r4
10108950:	10800084 	addi	r2,r2,2
10108954:	2109883a 	add	r4,r4,r4
10108958:	20000316 	blt	r4,zero,10108968 <__hi0bits+0x54>
1010895c:	2110002c 	andhi	r4,r4,16384
10108960:	2000041e 	bne	r4,zero,10108974 <__hi0bits+0x60>
10108964:	00800804 	movi	r2,32
10108968:	f800283a 	ret
1010896c:	0005883a 	mov	r2,zero
10108970:	003fec06 	br	10108924 <__alt_data_end+0xfffe8924>
10108974:	10800044 	addi	r2,r2,1
10108978:	f800283a 	ret

1010897c <__lo0bits>:
1010897c:	20c00017 	ldw	r3,0(r4)
10108980:	188001cc 	andi	r2,r3,7
10108984:	10000826 	beq	r2,zero,101089a8 <__lo0bits+0x2c>
10108988:	1880004c 	andi	r2,r3,1
1010898c:	1000211e 	bne	r2,zero,10108a14 <__lo0bits+0x98>
10108990:	1880008c 	andi	r2,r3,2
10108994:	1000211e 	bne	r2,zero,10108a1c <__lo0bits+0xa0>
10108998:	1806d0ba 	srli	r3,r3,2
1010899c:	00800084 	movi	r2,2
101089a0:	20c00015 	stw	r3,0(r4)
101089a4:	f800283a 	ret
101089a8:	18bfffcc 	andi	r2,r3,65535
101089ac:	10001326 	beq	r2,zero,101089fc <__lo0bits+0x80>
101089b0:	0005883a 	mov	r2,zero
101089b4:	19403fcc 	andi	r5,r3,255
101089b8:	2800021e 	bne	r5,zero,101089c4 <__lo0bits+0x48>
101089bc:	1806d23a 	srli	r3,r3,8
101089c0:	10800204 	addi	r2,r2,8
101089c4:	194003cc 	andi	r5,r3,15
101089c8:	2800021e 	bne	r5,zero,101089d4 <__lo0bits+0x58>
101089cc:	1806d13a 	srli	r3,r3,4
101089d0:	10800104 	addi	r2,r2,4
101089d4:	194000cc 	andi	r5,r3,3
101089d8:	2800021e 	bne	r5,zero,101089e4 <__lo0bits+0x68>
101089dc:	1806d0ba 	srli	r3,r3,2
101089e0:	10800084 	addi	r2,r2,2
101089e4:	1940004c 	andi	r5,r3,1
101089e8:	2800081e 	bne	r5,zero,10108a0c <__lo0bits+0x90>
101089ec:	1806d07a 	srli	r3,r3,1
101089f0:	1800051e 	bne	r3,zero,10108a08 <__lo0bits+0x8c>
101089f4:	00800804 	movi	r2,32
101089f8:	f800283a 	ret
101089fc:	1806d43a 	srli	r3,r3,16
10108a00:	00800404 	movi	r2,16
10108a04:	003feb06 	br	101089b4 <__alt_data_end+0xfffe89b4>
10108a08:	10800044 	addi	r2,r2,1
10108a0c:	20c00015 	stw	r3,0(r4)
10108a10:	f800283a 	ret
10108a14:	0005883a 	mov	r2,zero
10108a18:	f800283a 	ret
10108a1c:	1806d07a 	srli	r3,r3,1
10108a20:	00800044 	movi	r2,1
10108a24:	20c00015 	stw	r3,0(r4)
10108a28:	f800283a 	ret

10108a2c <__i2b>:
10108a2c:	defffd04 	addi	sp,sp,-12
10108a30:	dc000015 	stw	r16,0(sp)
10108a34:	04000044 	movi	r16,1
10108a38:	dc400115 	stw	r17,4(sp)
10108a3c:	2823883a 	mov	r17,r5
10108a40:	800b883a 	mov	r5,r16
10108a44:	dfc00215 	stw	ra,8(sp)
10108a48:	01086200 	call	10108620 <_Balloc>
10108a4c:	14400515 	stw	r17,20(r2)
10108a50:	14000415 	stw	r16,16(r2)
10108a54:	dfc00217 	ldw	ra,8(sp)
10108a58:	dc400117 	ldw	r17,4(sp)
10108a5c:	dc000017 	ldw	r16,0(sp)
10108a60:	dec00304 	addi	sp,sp,12
10108a64:	f800283a 	ret

10108a68 <__multiply>:
10108a68:	defffa04 	addi	sp,sp,-24
10108a6c:	dcc00315 	stw	r19,12(sp)
10108a70:	dc800215 	stw	r18,8(sp)
10108a74:	34c00417 	ldw	r19,16(r6)
10108a78:	2c800417 	ldw	r18,16(r5)
10108a7c:	dd000415 	stw	r20,16(sp)
10108a80:	dc400115 	stw	r17,4(sp)
10108a84:	dfc00515 	stw	ra,20(sp)
10108a88:	dc000015 	stw	r16,0(sp)
10108a8c:	2829883a 	mov	r20,r5
10108a90:	3023883a 	mov	r17,r6
10108a94:	94c0050e 	bge	r18,r19,10108aac <__multiply+0x44>
10108a98:	9007883a 	mov	r3,r18
10108a9c:	3029883a 	mov	r20,r6
10108aa0:	9825883a 	mov	r18,r19
10108aa4:	2823883a 	mov	r17,r5
10108aa8:	1827883a 	mov	r19,r3
10108aac:	a0800217 	ldw	r2,8(r20)
10108ab0:	94e1883a 	add	r16,r18,r19
10108ab4:	a1400117 	ldw	r5,4(r20)
10108ab8:	1400010e 	bge	r2,r16,10108ac0 <__multiply+0x58>
10108abc:	29400044 	addi	r5,r5,1
10108ac0:	01086200 	call	10108620 <_Balloc>
10108ac4:	8415883a 	add	r10,r16,r16
10108ac8:	12c00504 	addi	r11,r2,20
10108acc:	5295883a 	add	r10,r10,r10
10108ad0:	5a95883a 	add	r10,r11,r10
10108ad4:	5807883a 	mov	r3,r11
10108ad8:	5a80032e 	bgeu	r11,r10,10108ae8 <__multiply+0x80>
10108adc:	18000015 	stw	zero,0(r3)
10108ae0:	18c00104 	addi	r3,r3,4
10108ae4:	1abffd36 	bltu	r3,r10,10108adc <__alt_data_end+0xfffe8adc>
10108ae8:	9ce7883a 	add	r19,r19,r19
10108aec:	94a5883a 	add	r18,r18,r18
10108af0:	89800504 	addi	r6,r17,20
10108af4:	9ce7883a 	add	r19,r19,r19
10108af8:	a3400504 	addi	r13,r20,20
10108afc:	94a5883a 	add	r18,r18,r18
10108b00:	34d9883a 	add	r12,r6,r19
10108b04:	6c93883a 	add	r9,r13,r18
10108b08:	3300422e 	bgeu	r6,r12,10108c14 <__multiply+0x1ac>
10108b0c:	37c00017 	ldw	ra,0(r6)
10108b10:	fbffffcc 	andi	r15,ra,65535
10108b14:	78001b26 	beq	r15,zero,10108b84 <__multiply+0x11c>
10108b18:	5811883a 	mov	r8,r11
10108b1c:	681d883a 	mov	r14,r13
10108b20:	000f883a 	mov	r7,zero
10108b24:	71000017 	ldw	r4,0(r14)
10108b28:	40c00017 	ldw	r3,0(r8)
10108b2c:	73800104 	addi	r14,r14,4
10108b30:	217fffcc 	andi	r5,r4,65535
10108b34:	2bcb383a 	mul	r5,r5,r15
10108b38:	2008d43a 	srli	r4,r4,16
10108b3c:	1c7fffcc 	andi	r17,r3,65535
10108b40:	2c4b883a 	add	r5,r5,r17
10108b44:	29cb883a 	add	r5,r5,r7
10108b48:	23c9383a 	mul	r4,r4,r15
10108b4c:	1806d43a 	srli	r3,r3,16
10108b50:	280ed43a 	srli	r7,r5,16
10108b54:	297fffcc 	andi	r5,r5,65535
10108b58:	20c7883a 	add	r3,r4,r3
10108b5c:	19c7883a 	add	r3,r3,r7
10108b60:	1808943a 	slli	r4,r3,16
10108b64:	4023883a 	mov	r17,r8
10108b68:	180ed43a 	srli	r7,r3,16
10108b6c:	214ab03a 	or	r5,r4,r5
10108b70:	41400015 	stw	r5,0(r8)
10108b74:	42000104 	addi	r8,r8,4
10108b78:	727fea36 	bltu	r14,r9,10108b24 <__alt_data_end+0xfffe8b24>
10108b7c:	89c00115 	stw	r7,4(r17)
10108b80:	37c00017 	ldw	ra,0(r6)
10108b84:	f83ed43a 	srli	ra,ra,16
10108b88:	f8001f26 	beq	ra,zero,10108c08 <__multiply+0x1a0>
10108b8c:	58c00017 	ldw	r3,0(r11)
10108b90:	681d883a 	mov	r14,r13
10108b94:	581f883a 	mov	r15,r11
10108b98:	1811883a 	mov	r8,r3
10108b9c:	5825883a 	mov	r18,r11
10108ba0:	000f883a 	mov	r7,zero
10108ba4:	00000106 	br	10108bac <__multiply+0x144>
10108ba8:	8825883a 	mov	r18,r17
10108bac:	7140000b 	ldhu	r5,0(r14)
10108bb0:	4010d43a 	srli	r8,r8,16
10108bb4:	193fffcc 	andi	r4,r3,65535
10108bb8:	2fcb383a 	mul	r5,r5,ra
10108bbc:	7bc00104 	addi	r15,r15,4
10108bc0:	73800104 	addi	r14,r14,4
10108bc4:	2a0b883a 	add	r5,r5,r8
10108bc8:	29cb883a 	add	r5,r5,r7
10108bcc:	2806943a 	slli	r3,r5,16
10108bd0:	94400104 	addi	r17,r18,4
10108bd4:	280ad43a 	srli	r5,r5,16
10108bd8:	1908b03a 	or	r4,r3,r4
10108bdc:	793fff15 	stw	r4,-4(r15)
10108be0:	70ffff17 	ldw	r3,-4(r14)
10108be4:	8a000017 	ldw	r8,0(r17)
10108be8:	1806d43a 	srli	r3,r3,16
10108bec:	413fffcc 	andi	r4,r8,65535
10108bf0:	1fc7383a 	mul	r3,r3,ra
10108bf4:	1907883a 	add	r3,r3,r4
10108bf8:	1947883a 	add	r3,r3,r5
10108bfc:	180ed43a 	srli	r7,r3,16
10108c00:	727fe936 	bltu	r14,r9,10108ba8 <__alt_data_end+0xfffe8ba8>
10108c04:	90c00115 	stw	r3,4(r18)
10108c08:	31800104 	addi	r6,r6,4
10108c0c:	5ac00104 	addi	r11,r11,4
10108c10:	333fbe36 	bltu	r6,r12,10108b0c <__alt_data_end+0xfffe8b0c>
10108c14:	0400090e 	bge	zero,r16,10108c3c <__multiply+0x1d4>
10108c18:	50ffff17 	ldw	r3,-4(r10)
10108c1c:	52bfff04 	addi	r10,r10,-4
10108c20:	18000326 	beq	r3,zero,10108c30 <__multiply+0x1c8>
10108c24:	00000506 	br	10108c3c <__multiply+0x1d4>
10108c28:	50c00017 	ldw	r3,0(r10)
10108c2c:	1800031e 	bne	r3,zero,10108c3c <__multiply+0x1d4>
10108c30:	843fffc4 	addi	r16,r16,-1
10108c34:	52bfff04 	addi	r10,r10,-4
10108c38:	803ffb1e 	bne	r16,zero,10108c28 <__alt_data_end+0xfffe8c28>
10108c3c:	14000415 	stw	r16,16(r2)
10108c40:	dfc00517 	ldw	ra,20(sp)
10108c44:	dd000417 	ldw	r20,16(sp)
10108c48:	dcc00317 	ldw	r19,12(sp)
10108c4c:	dc800217 	ldw	r18,8(sp)
10108c50:	dc400117 	ldw	r17,4(sp)
10108c54:	dc000017 	ldw	r16,0(sp)
10108c58:	dec00604 	addi	sp,sp,24
10108c5c:	f800283a 	ret

10108c60 <__pow5mult>:
10108c60:	defffa04 	addi	sp,sp,-24
10108c64:	dcc00315 	stw	r19,12(sp)
10108c68:	dc000015 	stw	r16,0(sp)
10108c6c:	dfc00515 	stw	ra,20(sp)
10108c70:	dd000415 	stw	r20,16(sp)
10108c74:	dc800215 	stw	r18,8(sp)
10108c78:	dc400115 	stw	r17,4(sp)
10108c7c:	308000cc 	andi	r2,r6,3
10108c80:	3021883a 	mov	r16,r6
10108c84:	2027883a 	mov	r19,r4
10108c88:	10002f1e 	bne	r2,zero,10108d48 <__pow5mult+0xe8>
10108c8c:	2825883a 	mov	r18,r5
10108c90:	8021d0ba 	srai	r16,r16,2
10108c94:	80001a26 	beq	r16,zero,10108d00 <__pow5mult+0xa0>
10108c98:	9c401217 	ldw	r17,72(r19)
10108c9c:	8800061e 	bne	r17,zero,10108cb8 <__pow5mult+0x58>
10108ca0:	00003406 	br	10108d74 <__pow5mult+0x114>
10108ca4:	8021d07a 	srai	r16,r16,1
10108ca8:	80001526 	beq	r16,zero,10108d00 <__pow5mult+0xa0>
10108cac:	88800017 	ldw	r2,0(r17)
10108cb0:	10001c26 	beq	r2,zero,10108d24 <__pow5mult+0xc4>
10108cb4:	1023883a 	mov	r17,r2
10108cb8:	8080004c 	andi	r2,r16,1
10108cbc:	103ff926 	beq	r2,zero,10108ca4 <__alt_data_end+0xfffe8ca4>
10108cc0:	880d883a 	mov	r6,r17
10108cc4:	900b883a 	mov	r5,r18
10108cc8:	9809883a 	mov	r4,r19
10108ccc:	0108a680 	call	10108a68 <__multiply>
10108cd0:	90001b26 	beq	r18,zero,10108d40 <__pow5mult+0xe0>
10108cd4:	91000117 	ldw	r4,4(r18)
10108cd8:	98c01317 	ldw	r3,76(r19)
10108cdc:	8021d07a 	srai	r16,r16,1
10108ce0:	2109883a 	add	r4,r4,r4
10108ce4:	2109883a 	add	r4,r4,r4
10108ce8:	1907883a 	add	r3,r3,r4
10108cec:	19000017 	ldw	r4,0(r3)
10108cf0:	91000015 	stw	r4,0(r18)
10108cf4:	1c800015 	stw	r18,0(r3)
10108cf8:	1025883a 	mov	r18,r2
10108cfc:	803feb1e 	bne	r16,zero,10108cac <__alt_data_end+0xfffe8cac>
10108d00:	9005883a 	mov	r2,r18
10108d04:	dfc00517 	ldw	ra,20(sp)
10108d08:	dd000417 	ldw	r20,16(sp)
10108d0c:	dcc00317 	ldw	r19,12(sp)
10108d10:	dc800217 	ldw	r18,8(sp)
10108d14:	dc400117 	ldw	r17,4(sp)
10108d18:	dc000017 	ldw	r16,0(sp)
10108d1c:	dec00604 	addi	sp,sp,24
10108d20:	f800283a 	ret
10108d24:	880d883a 	mov	r6,r17
10108d28:	880b883a 	mov	r5,r17
10108d2c:	9809883a 	mov	r4,r19
10108d30:	0108a680 	call	10108a68 <__multiply>
10108d34:	88800015 	stw	r2,0(r17)
10108d38:	10000015 	stw	zero,0(r2)
10108d3c:	003fdd06 	br	10108cb4 <__alt_data_end+0xfffe8cb4>
10108d40:	1025883a 	mov	r18,r2
10108d44:	003fd706 	br	10108ca4 <__alt_data_end+0xfffe8ca4>
10108d48:	10bfffc4 	addi	r2,r2,-1
10108d4c:	1085883a 	add	r2,r2,r2
10108d50:	00c40474 	movhi	r3,4113
10108d54:	18c6b904 	addi	r3,r3,6884
10108d58:	1085883a 	add	r2,r2,r2
10108d5c:	1885883a 	add	r2,r3,r2
10108d60:	11800017 	ldw	r6,0(r2)
10108d64:	000f883a 	mov	r7,zero
10108d68:	01086f00 	call	101086f0 <__multadd>
10108d6c:	1025883a 	mov	r18,r2
10108d70:	003fc706 	br	10108c90 <__alt_data_end+0xfffe8c90>
10108d74:	05000044 	movi	r20,1
10108d78:	a00b883a 	mov	r5,r20
10108d7c:	9809883a 	mov	r4,r19
10108d80:	01086200 	call	10108620 <_Balloc>
10108d84:	1023883a 	mov	r17,r2
10108d88:	00809c44 	movi	r2,625
10108d8c:	88800515 	stw	r2,20(r17)
10108d90:	8d000415 	stw	r20,16(r17)
10108d94:	9c401215 	stw	r17,72(r19)
10108d98:	88000015 	stw	zero,0(r17)
10108d9c:	003fc606 	br	10108cb8 <__alt_data_end+0xfffe8cb8>

10108da0 <__lshift>:
10108da0:	defff904 	addi	sp,sp,-28
10108da4:	dd400515 	stw	r21,20(sp)
10108da8:	dcc00315 	stw	r19,12(sp)
10108dac:	302bd17a 	srai	r21,r6,5
10108db0:	2cc00417 	ldw	r19,16(r5)
10108db4:	28800217 	ldw	r2,8(r5)
10108db8:	dd000415 	stw	r20,16(sp)
10108dbc:	ace7883a 	add	r19,r21,r19
10108dc0:	dc800215 	stw	r18,8(sp)
10108dc4:	dc400115 	stw	r17,4(sp)
10108dc8:	dc000015 	stw	r16,0(sp)
10108dcc:	dfc00615 	stw	ra,24(sp)
10108dd0:	9c000044 	addi	r16,r19,1
10108dd4:	2823883a 	mov	r17,r5
10108dd8:	3029883a 	mov	r20,r6
10108ddc:	2025883a 	mov	r18,r4
10108de0:	29400117 	ldw	r5,4(r5)
10108de4:	1400030e 	bge	r2,r16,10108df4 <__lshift+0x54>
10108de8:	1085883a 	add	r2,r2,r2
10108dec:	29400044 	addi	r5,r5,1
10108df0:	143ffd16 	blt	r2,r16,10108de8 <__alt_data_end+0xfffe8de8>
10108df4:	9009883a 	mov	r4,r18
10108df8:	01086200 	call	10108620 <_Balloc>
10108dfc:	10c00504 	addi	r3,r2,20
10108e00:	0540070e 	bge	zero,r21,10108e20 <__lshift+0x80>
10108e04:	ad6b883a 	add	r21,r21,r21
10108e08:	ad6b883a 	add	r21,r21,r21
10108e0c:	1809883a 	mov	r4,r3
10108e10:	1d47883a 	add	r3,r3,r21
10108e14:	20000015 	stw	zero,0(r4)
10108e18:	21000104 	addi	r4,r4,4
10108e1c:	193ffd1e 	bne	r3,r4,10108e14 <__alt_data_end+0xfffe8e14>
10108e20:	8a000417 	ldw	r8,16(r17)
10108e24:	89000504 	addi	r4,r17,20
10108e28:	a18007cc 	andi	r6,r20,31
10108e2c:	4211883a 	add	r8,r8,r8
10108e30:	4211883a 	add	r8,r8,r8
10108e34:	2211883a 	add	r8,r4,r8
10108e38:	30002326 	beq	r6,zero,10108ec8 <__lshift+0x128>
10108e3c:	02400804 	movi	r9,32
10108e40:	4993c83a 	sub	r9,r9,r6
10108e44:	000b883a 	mov	r5,zero
10108e48:	21c00017 	ldw	r7,0(r4)
10108e4c:	1815883a 	mov	r10,r3
10108e50:	18c00104 	addi	r3,r3,4
10108e54:	398e983a 	sll	r7,r7,r6
10108e58:	21000104 	addi	r4,r4,4
10108e5c:	394ab03a 	or	r5,r7,r5
10108e60:	197fff15 	stw	r5,-4(r3)
10108e64:	217fff17 	ldw	r5,-4(r4)
10108e68:	2a4ad83a 	srl	r5,r5,r9
10108e6c:	223ff636 	bltu	r4,r8,10108e48 <__alt_data_end+0xfffe8e48>
10108e70:	51400115 	stw	r5,4(r10)
10108e74:	28001a1e 	bne	r5,zero,10108ee0 <__lshift+0x140>
10108e78:	843fffc4 	addi	r16,r16,-1
10108e7c:	14000415 	stw	r16,16(r2)
10108e80:	88000826 	beq	r17,zero,10108ea4 <__lshift+0x104>
10108e84:	89000117 	ldw	r4,4(r17)
10108e88:	90c01317 	ldw	r3,76(r18)
10108e8c:	2109883a 	add	r4,r4,r4
10108e90:	2109883a 	add	r4,r4,r4
10108e94:	1907883a 	add	r3,r3,r4
10108e98:	19000017 	ldw	r4,0(r3)
10108e9c:	89000015 	stw	r4,0(r17)
10108ea0:	1c400015 	stw	r17,0(r3)
10108ea4:	dfc00617 	ldw	ra,24(sp)
10108ea8:	dd400517 	ldw	r21,20(sp)
10108eac:	dd000417 	ldw	r20,16(sp)
10108eb0:	dcc00317 	ldw	r19,12(sp)
10108eb4:	dc800217 	ldw	r18,8(sp)
10108eb8:	dc400117 	ldw	r17,4(sp)
10108ebc:	dc000017 	ldw	r16,0(sp)
10108ec0:	dec00704 	addi	sp,sp,28
10108ec4:	f800283a 	ret
10108ec8:	21400017 	ldw	r5,0(r4)
10108ecc:	18c00104 	addi	r3,r3,4
10108ed0:	21000104 	addi	r4,r4,4
10108ed4:	197fff15 	stw	r5,-4(r3)
10108ed8:	223ffb36 	bltu	r4,r8,10108ec8 <__alt_data_end+0xfffe8ec8>
10108edc:	003fe606 	br	10108e78 <__alt_data_end+0xfffe8e78>
10108ee0:	9c000084 	addi	r16,r19,2
10108ee4:	003fe406 	br	10108e78 <__alt_data_end+0xfffe8e78>

10108ee8 <__mcmp>:
10108ee8:	20800417 	ldw	r2,16(r4)
10108eec:	28c00417 	ldw	r3,16(r5)
10108ef0:	10c5c83a 	sub	r2,r2,r3
10108ef4:	1000111e 	bne	r2,zero,10108f3c <__mcmp+0x54>
10108ef8:	18c7883a 	add	r3,r3,r3
10108efc:	18c7883a 	add	r3,r3,r3
10108f00:	21000504 	addi	r4,r4,20
10108f04:	29400504 	addi	r5,r5,20
10108f08:	20c5883a 	add	r2,r4,r3
10108f0c:	28cb883a 	add	r5,r5,r3
10108f10:	00000106 	br	10108f18 <__mcmp+0x30>
10108f14:	20800a2e 	bgeu	r4,r2,10108f40 <__mcmp+0x58>
10108f18:	10bfff04 	addi	r2,r2,-4
10108f1c:	297fff04 	addi	r5,r5,-4
10108f20:	11800017 	ldw	r6,0(r2)
10108f24:	28c00017 	ldw	r3,0(r5)
10108f28:	30fffa26 	beq	r6,r3,10108f14 <__alt_data_end+0xfffe8f14>
10108f2c:	30c00236 	bltu	r6,r3,10108f38 <__mcmp+0x50>
10108f30:	00800044 	movi	r2,1
10108f34:	f800283a 	ret
10108f38:	00bfffc4 	movi	r2,-1
10108f3c:	f800283a 	ret
10108f40:	0005883a 	mov	r2,zero
10108f44:	f800283a 	ret

10108f48 <__mdiff>:
10108f48:	28c00417 	ldw	r3,16(r5)
10108f4c:	30800417 	ldw	r2,16(r6)
10108f50:	defffa04 	addi	sp,sp,-24
10108f54:	dcc00315 	stw	r19,12(sp)
10108f58:	dc800215 	stw	r18,8(sp)
10108f5c:	dfc00515 	stw	ra,20(sp)
10108f60:	dd000415 	stw	r20,16(sp)
10108f64:	dc400115 	stw	r17,4(sp)
10108f68:	dc000015 	stw	r16,0(sp)
10108f6c:	1887c83a 	sub	r3,r3,r2
10108f70:	2825883a 	mov	r18,r5
10108f74:	3027883a 	mov	r19,r6
10108f78:	1800141e 	bne	r3,zero,10108fcc <__mdiff+0x84>
10108f7c:	1085883a 	add	r2,r2,r2
10108f80:	1085883a 	add	r2,r2,r2
10108f84:	2a000504 	addi	r8,r5,20
10108f88:	34000504 	addi	r16,r6,20
10108f8c:	4087883a 	add	r3,r8,r2
10108f90:	8085883a 	add	r2,r16,r2
10108f94:	00000106 	br	10108f9c <__mdiff+0x54>
10108f98:	40c0592e 	bgeu	r8,r3,10109100 <__mdiff+0x1b8>
10108f9c:	18ffff04 	addi	r3,r3,-4
10108fa0:	10bfff04 	addi	r2,r2,-4
10108fa4:	19c00017 	ldw	r7,0(r3)
10108fa8:	11400017 	ldw	r5,0(r2)
10108fac:	397ffa26 	beq	r7,r5,10108f98 <__alt_data_end+0xfffe8f98>
10108fb0:	3940592e 	bgeu	r7,r5,10109118 <__mdiff+0x1d0>
10108fb4:	9005883a 	mov	r2,r18
10108fb8:	4023883a 	mov	r17,r8
10108fbc:	9825883a 	mov	r18,r19
10108fc0:	05000044 	movi	r20,1
10108fc4:	1027883a 	mov	r19,r2
10108fc8:	00000406 	br	10108fdc <__mdiff+0x94>
10108fcc:	18005616 	blt	r3,zero,10109128 <__mdiff+0x1e0>
10108fd0:	34400504 	addi	r17,r6,20
10108fd4:	2c000504 	addi	r16,r5,20
10108fd8:	0029883a 	mov	r20,zero
10108fdc:	91400117 	ldw	r5,4(r18)
10108fe0:	01086200 	call	10108620 <_Balloc>
10108fe4:	92400417 	ldw	r9,16(r18)
10108fe8:	9b000417 	ldw	r12,16(r19)
10108fec:	12c00504 	addi	r11,r2,20
10108ff0:	4a51883a 	add	r8,r9,r9
10108ff4:	6319883a 	add	r12,r12,r12
10108ff8:	4211883a 	add	r8,r8,r8
10108ffc:	6319883a 	add	r12,r12,r12
10109000:	15000315 	stw	r20,12(r2)
10109004:	8211883a 	add	r8,r16,r8
10109008:	8b19883a 	add	r12,r17,r12
1010900c:	0007883a 	mov	r3,zero
10109010:	81400017 	ldw	r5,0(r16)
10109014:	89c00017 	ldw	r7,0(r17)
10109018:	59800104 	addi	r6,r11,4
1010901c:	293fffcc 	andi	r4,r5,65535
10109020:	20c7883a 	add	r3,r4,r3
10109024:	393fffcc 	andi	r4,r7,65535
10109028:	1909c83a 	sub	r4,r3,r4
1010902c:	280ad43a 	srli	r5,r5,16
10109030:	380ed43a 	srli	r7,r7,16
10109034:	2007d43a 	srai	r3,r4,16
10109038:	213fffcc 	andi	r4,r4,65535
1010903c:	29cbc83a 	sub	r5,r5,r7
10109040:	28c7883a 	add	r3,r5,r3
10109044:	180a943a 	slli	r5,r3,16
10109048:	8c400104 	addi	r17,r17,4
1010904c:	84000104 	addi	r16,r16,4
10109050:	2908b03a 	or	r4,r5,r4
10109054:	59000015 	stw	r4,0(r11)
10109058:	1807d43a 	srai	r3,r3,16
1010905c:	3015883a 	mov	r10,r6
10109060:	3017883a 	mov	r11,r6
10109064:	8b3fea36 	bltu	r17,r12,10109010 <__alt_data_end+0xfffe9010>
10109068:	8200162e 	bgeu	r16,r8,101090c4 <__mdiff+0x17c>
1010906c:	8017883a 	mov	r11,r16
10109070:	59400017 	ldw	r5,0(r11)
10109074:	31800104 	addi	r6,r6,4
10109078:	5ac00104 	addi	r11,r11,4
1010907c:	293fffcc 	andi	r4,r5,65535
10109080:	20c7883a 	add	r3,r4,r3
10109084:	280ed43a 	srli	r7,r5,16
10109088:	180bd43a 	srai	r5,r3,16
1010908c:	193fffcc 	andi	r4,r3,65535
10109090:	3947883a 	add	r3,r7,r5
10109094:	180a943a 	slli	r5,r3,16
10109098:	1807d43a 	srai	r3,r3,16
1010909c:	2908b03a 	or	r4,r5,r4
101090a0:	313fff15 	stw	r4,-4(r6)
101090a4:	5a3ff236 	bltu	r11,r8,10109070 <__alt_data_end+0xfffe9070>
101090a8:	0406303a 	nor	r3,zero,r16
101090ac:	1a07883a 	add	r3,r3,r8
101090b0:	1806d0ba 	srli	r3,r3,2
101090b4:	18c00044 	addi	r3,r3,1
101090b8:	18c7883a 	add	r3,r3,r3
101090bc:	18c7883a 	add	r3,r3,r3
101090c0:	50d5883a 	add	r10,r10,r3
101090c4:	50ffff04 	addi	r3,r10,-4
101090c8:	2000041e 	bne	r4,zero,101090dc <__mdiff+0x194>
101090cc:	18ffff04 	addi	r3,r3,-4
101090d0:	19000017 	ldw	r4,0(r3)
101090d4:	4a7fffc4 	addi	r9,r9,-1
101090d8:	203ffc26 	beq	r4,zero,101090cc <__alt_data_end+0xfffe90cc>
101090dc:	12400415 	stw	r9,16(r2)
101090e0:	dfc00517 	ldw	ra,20(sp)
101090e4:	dd000417 	ldw	r20,16(sp)
101090e8:	dcc00317 	ldw	r19,12(sp)
101090ec:	dc800217 	ldw	r18,8(sp)
101090f0:	dc400117 	ldw	r17,4(sp)
101090f4:	dc000017 	ldw	r16,0(sp)
101090f8:	dec00604 	addi	sp,sp,24
101090fc:	f800283a 	ret
10109100:	000b883a 	mov	r5,zero
10109104:	01086200 	call	10108620 <_Balloc>
10109108:	00c00044 	movi	r3,1
1010910c:	10c00415 	stw	r3,16(r2)
10109110:	10000515 	stw	zero,20(r2)
10109114:	003ff206 	br	101090e0 <__alt_data_end+0xfffe90e0>
10109118:	8023883a 	mov	r17,r16
1010911c:	0029883a 	mov	r20,zero
10109120:	4021883a 	mov	r16,r8
10109124:	003fad06 	br	10108fdc <__alt_data_end+0xfffe8fdc>
10109128:	9005883a 	mov	r2,r18
1010912c:	94400504 	addi	r17,r18,20
10109130:	9c000504 	addi	r16,r19,20
10109134:	9825883a 	mov	r18,r19
10109138:	05000044 	movi	r20,1
1010913c:	1027883a 	mov	r19,r2
10109140:	003fa606 	br	10108fdc <__alt_data_end+0xfffe8fdc>

10109144 <__ulp>:
10109144:	295ffc2c 	andhi	r5,r5,32752
10109148:	00bf3034 	movhi	r2,64704
1010914c:	2887883a 	add	r3,r5,r2
10109150:	00c0020e 	bge	zero,r3,1010915c <__ulp+0x18>
10109154:	0005883a 	mov	r2,zero
10109158:	f800283a 	ret
1010915c:	00c7c83a 	sub	r3,zero,r3
10109160:	1807d53a 	srai	r3,r3,20
10109164:	008004c4 	movi	r2,19
10109168:	10c00b0e 	bge	r2,r3,10109198 <__ulp+0x54>
1010916c:	18bffb04 	addi	r2,r3,-20
10109170:	01000784 	movi	r4,30
10109174:	0007883a 	mov	r3,zero
10109178:	20800516 	blt	r4,r2,10109190 <__ulp+0x4c>
1010917c:	010007c4 	movi	r4,31
10109180:	2089c83a 	sub	r4,r4,r2
10109184:	00800044 	movi	r2,1
10109188:	1104983a 	sll	r2,r2,r4
1010918c:	f800283a 	ret
10109190:	00800044 	movi	r2,1
10109194:	f800283a 	ret
10109198:	01400234 	movhi	r5,8
1010919c:	28c7d83a 	sra	r3,r5,r3
101091a0:	0005883a 	mov	r2,zero
101091a4:	f800283a 	ret

101091a8 <__b2d>:
101091a8:	defffa04 	addi	sp,sp,-24
101091ac:	dc000015 	stw	r16,0(sp)
101091b0:	24000417 	ldw	r16,16(r4)
101091b4:	dc400115 	stw	r17,4(sp)
101091b8:	24400504 	addi	r17,r4,20
101091bc:	8421883a 	add	r16,r16,r16
101091c0:	8421883a 	add	r16,r16,r16
101091c4:	8c21883a 	add	r16,r17,r16
101091c8:	dc800215 	stw	r18,8(sp)
101091cc:	84bfff17 	ldw	r18,-4(r16)
101091d0:	dd000415 	stw	r20,16(sp)
101091d4:	dcc00315 	stw	r19,12(sp)
101091d8:	9009883a 	mov	r4,r18
101091dc:	2829883a 	mov	r20,r5
101091e0:	dfc00515 	stw	ra,20(sp)
101091e4:	01089140 	call	10108914 <__hi0bits>
101091e8:	00c00804 	movi	r3,32
101091ec:	1889c83a 	sub	r4,r3,r2
101091f0:	a1000015 	stw	r4,0(r20)
101091f4:	01000284 	movi	r4,10
101091f8:	84ffff04 	addi	r19,r16,-4
101091fc:	20801216 	blt	r4,r2,10109248 <__b2d+0xa0>
10109200:	018002c4 	movi	r6,11
10109204:	308dc83a 	sub	r6,r6,r2
10109208:	9186d83a 	srl	r3,r18,r6
1010920c:	18cffc34 	orhi	r3,r3,16368
10109210:	8cc0212e 	bgeu	r17,r19,10109298 <__b2d+0xf0>
10109214:	813ffe17 	ldw	r4,-8(r16)
10109218:	218cd83a 	srl	r6,r4,r6
1010921c:	10800544 	addi	r2,r2,21
10109220:	9084983a 	sll	r2,r18,r2
10109224:	1184b03a 	or	r2,r2,r6
10109228:	dfc00517 	ldw	ra,20(sp)
1010922c:	dd000417 	ldw	r20,16(sp)
10109230:	dcc00317 	ldw	r19,12(sp)
10109234:	dc800217 	ldw	r18,8(sp)
10109238:	dc400117 	ldw	r17,4(sp)
1010923c:	dc000017 	ldw	r16,0(sp)
10109240:	dec00604 	addi	sp,sp,24
10109244:	f800283a 	ret
10109248:	8cc00f2e 	bgeu	r17,r19,10109288 <__b2d+0xe0>
1010924c:	117ffd44 	addi	r5,r2,-11
10109250:	80bffe17 	ldw	r2,-8(r16)
10109254:	28000e26 	beq	r5,zero,10109290 <__b2d+0xe8>
10109258:	1949c83a 	sub	r4,r3,r5
1010925c:	9164983a 	sll	r18,r18,r5
10109260:	1106d83a 	srl	r3,r2,r4
10109264:	81bffe04 	addi	r6,r16,-8
10109268:	948ffc34 	orhi	r18,r18,16368
1010926c:	90c6b03a 	or	r3,r18,r3
10109270:	89800e2e 	bgeu	r17,r6,101092ac <__b2d+0x104>
10109274:	81bffd17 	ldw	r6,-12(r16)
10109278:	1144983a 	sll	r2,r2,r5
1010927c:	310ad83a 	srl	r5,r6,r4
10109280:	2884b03a 	or	r2,r5,r2
10109284:	003fe806 	br	10109228 <__alt_data_end+0xfffe9228>
10109288:	10bffd44 	addi	r2,r2,-11
1010928c:	1000041e 	bne	r2,zero,101092a0 <__b2d+0xf8>
10109290:	90cffc34 	orhi	r3,r18,16368
10109294:	003fe406 	br	10109228 <__alt_data_end+0xfffe9228>
10109298:	000d883a 	mov	r6,zero
1010929c:	003fdf06 	br	1010921c <__alt_data_end+0xfffe921c>
101092a0:	90a4983a 	sll	r18,r18,r2
101092a4:	0005883a 	mov	r2,zero
101092a8:	003ff906 	br	10109290 <__alt_data_end+0xfffe9290>
101092ac:	1144983a 	sll	r2,r2,r5
101092b0:	003fdd06 	br	10109228 <__alt_data_end+0xfffe9228>

101092b4 <__d2b>:
101092b4:	defff804 	addi	sp,sp,-32
101092b8:	dc000215 	stw	r16,8(sp)
101092bc:	3021883a 	mov	r16,r6
101092c0:	dc400315 	stw	r17,12(sp)
101092c4:	8022907a 	slli	r17,r16,1
101092c8:	dd000615 	stw	r20,24(sp)
101092cc:	2829883a 	mov	r20,r5
101092d0:	01400044 	movi	r5,1
101092d4:	dcc00515 	stw	r19,20(sp)
101092d8:	dc800415 	stw	r18,16(sp)
101092dc:	dfc00715 	stw	ra,28(sp)
101092e0:	3825883a 	mov	r18,r7
101092e4:	8822d57a 	srli	r17,r17,21
101092e8:	01086200 	call	10108620 <_Balloc>
101092ec:	1027883a 	mov	r19,r2
101092f0:	00800434 	movhi	r2,16
101092f4:	10bfffc4 	addi	r2,r2,-1
101092f8:	808c703a 	and	r6,r16,r2
101092fc:	88000126 	beq	r17,zero,10109304 <__d2b+0x50>
10109300:	31800434 	orhi	r6,r6,16
10109304:	d9800015 	stw	r6,0(sp)
10109308:	a0002426 	beq	r20,zero,1010939c <__d2b+0xe8>
1010930c:	d9000104 	addi	r4,sp,4
10109310:	dd000115 	stw	r20,4(sp)
10109314:	010897c0 	call	1010897c <__lo0bits>
10109318:	d8c00017 	ldw	r3,0(sp)
1010931c:	10002f1e 	bne	r2,zero,101093dc <__d2b+0x128>
10109320:	d9000117 	ldw	r4,4(sp)
10109324:	99000515 	stw	r4,20(r19)
10109328:	1821003a 	cmpeq	r16,r3,zero
1010932c:	01000084 	movi	r4,2
10109330:	2421c83a 	sub	r16,r4,r16
10109334:	98c00615 	stw	r3,24(r19)
10109338:	9c000415 	stw	r16,16(r19)
1010933c:	88001f1e 	bne	r17,zero,101093bc <__d2b+0x108>
10109340:	10bef384 	addi	r2,r2,-1074
10109344:	90800015 	stw	r2,0(r18)
10109348:	00900034 	movhi	r2,16384
1010934c:	10bfffc4 	addi	r2,r2,-1
10109350:	8085883a 	add	r2,r16,r2
10109354:	1085883a 	add	r2,r2,r2
10109358:	1085883a 	add	r2,r2,r2
1010935c:	9885883a 	add	r2,r19,r2
10109360:	11000517 	ldw	r4,20(r2)
10109364:	8020917a 	slli	r16,r16,5
10109368:	01089140 	call	10108914 <__hi0bits>
1010936c:	d8c00817 	ldw	r3,32(sp)
10109370:	8085c83a 	sub	r2,r16,r2
10109374:	18800015 	stw	r2,0(r3)
10109378:	9805883a 	mov	r2,r19
1010937c:	dfc00717 	ldw	ra,28(sp)
10109380:	dd000617 	ldw	r20,24(sp)
10109384:	dcc00517 	ldw	r19,20(sp)
10109388:	dc800417 	ldw	r18,16(sp)
1010938c:	dc400317 	ldw	r17,12(sp)
10109390:	dc000217 	ldw	r16,8(sp)
10109394:	dec00804 	addi	sp,sp,32
10109398:	f800283a 	ret
1010939c:	d809883a 	mov	r4,sp
101093a0:	010897c0 	call	1010897c <__lo0bits>
101093a4:	d8c00017 	ldw	r3,0(sp)
101093a8:	04000044 	movi	r16,1
101093ac:	9c000415 	stw	r16,16(r19)
101093b0:	98c00515 	stw	r3,20(r19)
101093b4:	10800804 	addi	r2,r2,32
101093b8:	883fe126 	beq	r17,zero,10109340 <__alt_data_end+0xfffe9340>
101093bc:	00c00d44 	movi	r3,53
101093c0:	8c7ef344 	addi	r17,r17,-1075
101093c4:	88a3883a 	add	r17,r17,r2
101093c8:	1885c83a 	sub	r2,r3,r2
101093cc:	d8c00817 	ldw	r3,32(sp)
101093d0:	94400015 	stw	r17,0(r18)
101093d4:	18800015 	stw	r2,0(r3)
101093d8:	003fe706 	br	10109378 <__alt_data_end+0xfffe9378>
101093dc:	01000804 	movi	r4,32
101093e0:	2089c83a 	sub	r4,r4,r2
101093e4:	1908983a 	sll	r4,r3,r4
101093e8:	d9400117 	ldw	r5,4(sp)
101093ec:	1886d83a 	srl	r3,r3,r2
101093f0:	2148b03a 	or	r4,r4,r5
101093f4:	99000515 	stw	r4,20(r19)
101093f8:	d8c00015 	stw	r3,0(sp)
101093fc:	003fca06 	br	10109328 <__alt_data_end+0xfffe9328>

10109400 <__ratio>:
10109400:	defff904 	addi	sp,sp,-28
10109404:	dc400315 	stw	r17,12(sp)
10109408:	2823883a 	mov	r17,r5
1010940c:	d9400104 	addi	r5,sp,4
10109410:	dfc00615 	stw	ra,24(sp)
10109414:	dcc00515 	stw	r19,20(sp)
10109418:	dc800415 	stw	r18,16(sp)
1010941c:	2027883a 	mov	r19,r4
10109420:	dc000215 	stw	r16,8(sp)
10109424:	01091a80 	call	101091a8 <__b2d>
10109428:	d80b883a 	mov	r5,sp
1010942c:	8809883a 	mov	r4,r17
10109430:	1025883a 	mov	r18,r2
10109434:	1821883a 	mov	r16,r3
10109438:	01091a80 	call	101091a8 <__b2d>
1010943c:	8a000417 	ldw	r8,16(r17)
10109440:	99000417 	ldw	r4,16(r19)
10109444:	d9400117 	ldw	r5,4(sp)
10109448:	2209c83a 	sub	r4,r4,r8
1010944c:	2010917a 	slli	r8,r4,5
10109450:	d9000017 	ldw	r4,0(sp)
10109454:	2909c83a 	sub	r4,r5,r4
10109458:	4109883a 	add	r4,r8,r4
1010945c:	01000e0e 	bge	zero,r4,10109498 <__ratio+0x98>
10109460:	2008953a 	slli	r4,r4,20
10109464:	2421883a 	add	r16,r4,r16
10109468:	100d883a 	mov	r6,r2
1010946c:	180f883a 	mov	r7,r3
10109470:	9009883a 	mov	r4,r18
10109474:	800b883a 	mov	r5,r16
10109478:	010cce00 	call	1010cce0 <__divdf3>
1010947c:	dfc00617 	ldw	ra,24(sp)
10109480:	dcc00517 	ldw	r19,20(sp)
10109484:	dc800417 	ldw	r18,16(sp)
10109488:	dc400317 	ldw	r17,12(sp)
1010948c:	dc000217 	ldw	r16,8(sp)
10109490:	dec00704 	addi	sp,sp,28
10109494:	f800283a 	ret
10109498:	2008953a 	slli	r4,r4,20
1010949c:	1907c83a 	sub	r3,r3,r4
101094a0:	003ff106 	br	10109468 <__alt_data_end+0xfffe9468>

101094a4 <_mprec_log10>:
101094a4:	defffe04 	addi	sp,sp,-8
101094a8:	dc000015 	stw	r16,0(sp)
101094ac:	dfc00115 	stw	ra,4(sp)
101094b0:	008005c4 	movi	r2,23
101094b4:	2021883a 	mov	r16,r4
101094b8:	11000d0e 	bge	r2,r4,101094f0 <_mprec_log10+0x4c>
101094bc:	0005883a 	mov	r2,zero
101094c0:	00cffc34 	movhi	r3,16368
101094c4:	843fffc4 	addi	r16,r16,-1
101094c8:	000d883a 	mov	r6,zero
101094cc:	01d00934 	movhi	r7,16420
101094d0:	1009883a 	mov	r4,r2
101094d4:	180b883a 	mov	r5,r3
101094d8:	010d8200 	call	1010d820 <__muldf3>
101094dc:	803ff91e 	bne	r16,zero,101094c4 <__alt_data_end+0xfffe94c4>
101094e0:	dfc00117 	ldw	ra,4(sp)
101094e4:	dc000017 	ldw	r16,0(sp)
101094e8:	dec00204 	addi	sp,sp,8
101094ec:	f800283a 	ret
101094f0:	202090fa 	slli	r16,r4,3
101094f4:	00840474 	movhi	r2,4113
101094f8:	1086d004 	addi	r2,r2,6976
101094fc:	1421883a 	add	r16,r2,r16
10109500:	80800017 	ldw	r2,0(r16)
10109504:	80c00117 	ldw	r3,4(r16)
10109508:	dfc00117 	ldw	ra,4(sp)
1010950c:	dc000017 	ldw	r16,0(sp)
10109510:	dec00204 	addi	sp,sp,8
10109514:	f800283a 	ret

10109518 <__copybits>:
10109518:	297fffc4 	addi	r5,r5,-1
1010951c:	280fd17a 	srai	r7,r5,5
10109520:	30c00417 	ldw	r3,16(r6)
10109524:	30800504 	addi	r2,r6,20
10109528:	39c00044 	addi	r7,r7,1
1010952c:	18c7883a 	add	r3,r3,r3
10109530:	39cf883a 	add	r7,r7,r7
10109534:	18c7883a 	add	r3,r3,r3
10109538:	39cf883a 	add	r7,r7,r7
1010953c:	10c7883a 	add	r3,r2,r3
10109540:	21cf883a 	add	r7,r4,r7
10109544:	10c00d2e 	bgeu	r2,r3,1010957c <__copybits+0x64>
10109548:	200b883a 	mov	r5,r4
1010954c:	12000017 	ldw	r8,0(r2)
10109550:	29400104 	addi	r5,r5,4
10109554:	10800104 	addi	r2,r2,4
10109558:	2a3fff15 	stw	r8,-4(r5)
1010955c:	10fffb36 	bltu	r2,r3,1010954c <__alt_data_end+0xfffe954c>
10109560:	1985c83a 	sub	r2,r3,r6
10109564:	10bffac4 	addi	r2,r2,-21
10109568:	1004d0ba 	srli	r2,r2,2
1010956c:	10800044 	addi	r2,r2,1
10109570:	1085883a 	add	r2,r2,r2
10109574:	1085883a 	add	r2,r2,r2
10109578:	2089883a 	add	r4,r4,r2
1010957c:	21c0032e 	bgeu	r4,r7,1010958c <__copybits+0x74>
10109580:	20000015 	stw	zero,0(r4)
10109584:	21000104 	addi	r4,r4,4
10109588:	21fffd36 	bltu	r4,r7,10109580 <__alt_data_end+0xfffe9580>
1010958c:	f800283a 	ret

10109590 <__any_on>:
10109590:	20c00417 	ldw	r3,16(r4)
10109594:	2805d17a 	srai	r2,r5,5
10109598:	21000504 	addi	r4,r4,20
1010959c:	18800d0e 	bge	r3,r2,101095d4 <__any_on+0x44>
101095a0:	18c7883a 	add	r3,r3,r3
101095a4:	18c7883a 	add	r3,r3,r3
101095a8:	20c7883a 	add	r3,r4,r3
101095ac:	20c0192e 	bgeu	r4,r3,10109614 <__any_on+0x84>
101095b0:	18bfff17 	ldw	r2,-4(r3)
101095b4:	18ffff04 	addi	r3,r3,-4
101095b8:	1000041e 	bne	r2,zero,101095cc <__any_on+0x3c>
101095bc:	20c0142e 	bgeu	r4,r3,10109610 <__any_on+0x80>
101095c0:	18ffff04 	addi	r3,r3,-4
101095c4:	19400017 	ldw	r5,0(r3)
101095c8:	283ffc26 	beq	r5,zero,101095bc <__alt_data_end+0xfffe95bc>
101095cc:	00800044 	movi	r2,1
101095d0:	f800283a 	ret
101095d4:	10c00a0e 	bge	r2,r3,10109600 <__any_on+0x70>
101095d8:	1085883a 	add	r2,r2,r2
101095dc:	1085883a 	add	r2,r2,r2
101095e0:	294007cc 	andi	r5,r5,31
101095e4:	2087883a 	add	r3,r4,r2
101095e8:	283ff026 	beq	r5,zero,101095ac <__alt_data_end+0xfffe95ac>
101095ec:	19800017 	ldw	r6,0(r3)
101095f0:	3144d83a 	srl	r2,r6,r5
101095f4:	114a983a 	sll	r5,r2,r5
101095f8:	317ff41e 	bne	r6,r5,101095cc <__alt_data_end+0xfffe95cc>
101095fc:	003feb06 	br	101095ac <__alt_data_end+0xfffe95ac>
10109600:	1085883a 	add	r2,r2,r2
10109604:	1085883a 	add	r2,r2,r2
10109608:	2087883a 	add	r3,r4,r2
1010960c:	003fe706 	br	101095ac <__alt_data_end+0xfffe95ac>
10109610:	f800283a 	ret
10109614:	0005883a 	mov	r2,zero
10109618:	f800283a 	ret

1010961c <_read_r>:
1010961c:	defffd04 	addi	sp,sp,-12
10109620:	2805883a 	mov	r2,r5
10109624:	dc000015 	stw	r16,0(sp)
10109628:	04040474 	movhi	r16,4113
1010962c:	dc400115 	stw	r17,4(sp)
10109630:	300b883a 	mov	r5,r6
10109634:	84150804 	addi	r16,r16,21536
10109638:	2023883a 	mov	r17,r4
1010963c:	380d883a 	mov	r6,r7
10109640:	1009883a 	mov	r4,r2
10109644:	dfc00215 	stw	ra,8(sp)
10109648:	80000015 	stw	zero,0(r16)
1010964c:	010f3740 	call	1010f374 <read>
10109650:	00ffffc4 	movi	r3,-1
10109654:	10c00526 	beq	r2,r3,1010966c <_read_r+0x50>
10109658:	dfc00217 	ldw	ra,8(sp)
1010965c:	dc400117 	ldw	r17,4(sp)
10109660:	dc000017 	ldw	r16,0(sp)
10109664:	dec00304 	addi	sp,sp,12
10109668:	f800283a 	ret
1010966c:	80c00017 	ldw	r3,0(r16)
10109670:	183ff926 	beq	r3,zero,10109658 <__alt_data_end+0xfffe9658>
10109674:	88c00015 	stw	r3,0(r17)
10109678:	003ff706 	br	10109658 <__alt_data_end+0xfffe9658>

1010967c <_realloc_r>:
1010967c:	defff604 	addi	sp,sp,-40
10109680:	dc400115 	stw	r17,4(sp)
10109684:	dfc00915 	stw	ra,36(sp)
10109688:	df000815 	stw	fp,32(sp)
1010968c:	ddc00715 	stw	r23,28(sp)
10109690:	dd800615 	stw	r22,24(sp)
10109694:	dd400515 	stw	r21,20(sp)
10109698:	dd000415 	stw	r20,16(sp)
1010969c:	dcc00315 	stw	r19,12(sp)
101096a0:	dc800215 	stw	r18,8(sp)
101096a4:	dc000015 	stw	r16,0(sp)
101096a8:	3023883a 	mov	r17,r6
101096ac:	2800b626 	beq	r5,zero,10109988 <_realloc_r+0x30c>
101096b0:	2829883a 	mov	r20,r5
101096b4:	2025883a 	mov	r18,r4
101096b8:	010f0680 	call	1010f068 <__malloc_lock>
101096bc:	a0ffff17 	ldw	r3,-4(r20)
101096c0:	043fff04 	movi	r16,-4
101096c4:	888002c4 	addi	r2,r17,11
101096c8:	01000584 	movi	r4,22
101096cc:	a57ffe04 	addi	r21,r20,-8
101096d0:	1c20703a 	and	r16,r3,r16
101096d4:	2080332e 	bgeu	r4,r2,101097a4 <_realloc_r+0x128>
101096d8:	05bffe04 	movi	r22,-8
101096dc:	15ac703a 	and	r22,r2,r22
101096e0:	b005883a 	mov	r2,r22
101096e4:	b0005716 	blt	r22,zero,10109844 <_realloc_r+0x1c8>
101096e8:	b4405636 	bltu	r22,r17,10109844 <_realloc_r+0x1c8>
101096ec:	8080300e 	bge	r16,r2,101097b0 <_realloc_r+0x134>
101096f0:	07040474 	movhi	fp,4113
101096f4:	e7086304 	addi	fp,fp,8588
101096f8:	e2000217 	ldw	r8,8(fp)
101096fc:	ac09883a 	add	r4,r21,r16
10109700:	22006126 	beq	r4,r8,10109888 <_realloc_r+0x20c>
10109704:	22400117 	ldw	r9,4(r4)
10109708:	01ffff84 	movi	r7,-2
1010970c:	49ce703a 	and	r7,r9,r7
10109710:	21cf883a 	add	r7,r4,r7
10109714:	39800117 	ldw	r6,4(r7)
10109718:	3180004c 	andi	r6,r6,1
1010971c:	30003e26 	beq	r6,zero,10109818 <_realloc_r+0x19c>
10109720:	18c0004c 	andi	r3,r3,1
10109724:	18008126 	beq	r3,zero,1010992c <_realloc_r+0x2b0>
10109728:	880b883a 	mov	r5,r17
1010972c:	9009883a 	mov	r4,r18
10109730:	0102f540 	call	10102f54 <_malloc_r>
10109734:	1023883a 	mov	r17,r2
10109738:	10011e26 	beq	r2,zero,10109bb4 <_realloc_r+0x538>
1010973c:	a0ffff17 	ldw	r3,-4(r20)
10109740:	113ffe04 	addi	r4,r2,-8
10109744:	00bfff84 	movi	r2,-2
10109748:	1884703a 	and	r2,r3,r2
1010974c:	a885883a 	add	r2,r21,r2
10109750:	2080ee26 	beq	r4,r2,10109b0c <_realloc_r+0x490>
10109754:	81bfff04 	addi	r6,r16,-4
10109758:	00800904 	movi	r2,36
1010975c:	1180b836 	bltu	r2,r6,10109a40 <_realloc_r+0x3c4>
10109760:	00c004c4 	movi	r3,19
10109764:	19809536 	bltu	r3,r6,101099bc <_realloc_r+0x340>
10109768:	8805883a 	mov	r2,r17
1010976c:	a007883a 	mov	r3,r20
10109770:	19000017 	ldw	r4,0(r3)
10109774:	11000015 	stw	r4,0(r2)
10109778:	19000117 	ldw	r4,4(r3)
1010977c:	11000115 	stw	r4,4(r2)
10109780:	18c00217 	ldw	r3,8(r3)
10109784:	10c00215 	stw	r3,8(r2)
10109788:	a00b883a 	mov	r5,r20
1010978c:	9009883a 	mov	r4,r18
10109790:	01024240 	call	10102424 <_free_r>
10109794:	9009883a 	mov	r4,r18
10109798:	010f08c0 	call	1010f08c <__malloc_unlock>
1010979c:	8805883a 	mov	r2,r17
101097a0:	00001106 	br	101097e8 <_realloc_r+0x16c>
101097a4:	00800404 	movi	r2,16
101097a8:	102d883a 	mov	r22,r2
101097ac:	003fce06 	br	101096e8 <__alt_data_end+0xfffe96e8>
101097b0:	a023883a 	mov	r17,r20
101097b4:	858fc83a 	sub	r7,r16,r22
101097b8:	008003c4 	movi	r2,15
101097bc:	18c0004c 	andi	r3,r3,1
101097c0:	11c02436 	bltu	r2,r7,10109854 <_realloc_r+0x1d8>
101097c4:	1c06b03a 	or	r3,r3,r16
101097c8:	a8c00115 	stw	r3,4(r21)
101097cc:	ac21883a 	add	r16,r21,r16
101097d0:	80800117 	ldw	r2,4(r16)
101097d4:	10800054 	ori	r2,r2,1
101097d8:	80800115 	stw	r2,4(r16)
101097dc:	9009883a 	mov	r4,r18
101097e0:	010f08c0 	call	1010f08c <__malloc_unlock>
101097e4:	8805883a 	mov	r2,r17
101097e8:	dfc00917 	ldw	ra,36(sp)
101097ec:	df000817 	ldw	fp,32(sp)
101097f0:	ddc00717 	ldw	r23,28(sp)
101097f4:	dd800617 	ldw	r22,24(sp)
101097f8:	dd400517 	ldw	r21,20(sp)
101097fc:	dd000417 	ldw	r20,16(sp)
10109800:	dcc00317 	ldw	r19,12(sp)
10109804:	dc800217 	ldw	r18,8(sp)
10109808:	dc400117 	ldw	r17,4(sp)
1010980c:	dc000017 	ldw	r16,0(sp)
10109810:	dec00a04 	addi	sp,sp,40
10109814:	f800283a 	ret
10109818:	017fff04 	movi	r5,-4
1010981c:	494a703a 	and	r5,r9,r5
10109820:	814d883a 	add	r6,r16,r5
10109824:	30801e16 	blt	r6,r2,101098a0 <_realloc_r+0x224>
10109828:	20800317 	ldw	r2,12(r4)
1010982c:	21000217 	ldw	r4,8(r4)
10109830:	a023883a 	mov	r17,r20
10109834:	3021883a 	mov	r16,r6
10109838:	20800315 	stw	r2,12(r4)
1010983c:	11000215 	stw	r4,8(r2)
10109840:	003fdc06 	br	101097b4 <__alt_data_end+0xfffe97b4>
10109844:	00800304 	movi	r2,12
10109848:	90800015 	stw	r2,0(r18)
1010984c:	0005883a 	mov	r2,zero
10109850:	003fe506 	br	101097e8 <__alt_data_end+0xfffe97e8>
10109854:	1d86b03a 	or	r3,r3,r22
10109858:	a8c00115 	stw	r3,4(r21)
1010985c:	ad8b883a 	add	r5,r21,r22
10109860:	38c00054 	ori	r3,r7,1
10109864:	28c00115 	stw	r3,4(r5)
10109868:	29cf883a 	add	r7,r5,r7
1010986c:	38c00117 	ldw	r3,4(r7)
10109870:	29400204 	addi	r5,r5,8
10109874:	9009883a 	mov	r4,r18
10109878:	18800054 	ori	r2,r3,1
1010987c:	38800115 	stw	r2,4(r7)
10109880:	01024240 	call	10102424 <_free_r>
10109884:	003fd506 	br	101097dc <__alt_data_end+0xfffe97dc>
10109888:	21c00117 	ldw	r7,4(r4)
1010988c:	017fff04 	movi	r5,-4
10109890:	b1800404 	addi	r6,r22,16
10109894:	394a703a 	and	r5,r7,r5
10109898:	814f883a 	add	r7,r16,r5
1010989c:	39805b0e 	bge	r7,r6,10109a0c <_realloc_r+0x390>
101098a0:	18c0004c 	andi	r3,r3,1
101098a4:	183fa01e 	bne	r3,zero,10109728 <__alt_data_end+0xfffe9728>
101098a8:	a4fffe17 	ldw	r19,-8(r20)
101098ac:	00ffff04 	movi	r3,-4
101098b0:	ace7c83a 	sub	r19,r21,r19
101098b4:	99800117 	ldw	r6,4(r19)
101098b8:	30c6703a 	and	r3,r6,r3
101098bc:	20002026 	beq	r4,zero,10109940 <_realloc_r+0x2c4>
101098c0:	80ef883a 	add	r23,r16,r3
101098c4:	b96f883a 	add	r23,r23,r5
101098c8:	22006126 	beq	r4,r8,10109a50 <_realloc_r+0x3d4>
101098cc:	b8801c16 	blt	r23,r2,10109940 <_realloc_r+0x2c4>
101098d0:	20800317 	ldw	r2,12(r4)
101098d4:	20c00217 	ldw	r3,8(r4)
101098d8:	81bfff04 	addi	r6,r16,-4
101098dc:	01000904 	movi	r4,36
101098e0:	18800315 	stw	r2,12(r3)
101098e4:	10c00215 	stw	r3,8(r2)
101098e8:	98c00217 	ldw	r3,8(r19)
101098ec:	98800317 	ldw	r2,12(r19)
101098f0:	9c400204 	addi	r17,r19,8
101098f4:	18800315 	stw	r2,12(r3)
101098f8:	10c00215 	stw	r3,8(r2)
101098fc:	21801b36 	bltu	r4,r6,1010996c <_realloc_r+0x2f0>
10109900:	008004c4 	movi	r2,19
10109904:	1180362e 	bgeu	r2,r6,101099e0 <_realloc_r+0x364>
10109908:	a0800017 	ldw	r2,0(r20)
1010990c:	98800215 	stw	r2,8(r19)
10109910:	a0800117 	ldw	r2,4(r20)
10109914:	98800315 	stw	r2,12(r19)
10109918:	008006c4 	movi	r2,27
1010991c:	11808136 	bltu	r2,r6,10109b24 <_realloc_r+0x4a8>
10109920:	98800404 	addi	r2,r19,16
10109924:	a5000204 	addi	r20,r20,8
10109928:	00002e06 	br	101099e4 <_realloc_r+0x368>
1010992c:	a4fffe17 	ldw	r19,-8(r20)
10109930:	00ffff04 	movi	r3,-4
10109934:	ace7c83a 	sub	r19,r21,r19
10109938:	99000117 	ldw	r4,4(r19)
1010993c:	20c6703a 	and	r3,r4,r3
10109940:	983f7926 	beq	r19,zero,10109728 <__alt_data_end+0xfffe9728>
10109944:	80ef883a 	add	r23,r16,r3
10109948:	b8bf7716 	blt	r23,r2,10109728 <__alt_data_end+0xfffe9728>
1010994c:	98800317 	ldw	r2,12(r19)
10109950:	98c00217 	ldw	r3,8(r19)
10109954:	81bfff04 	addi	r6,r16,-4
10109958:	01000904 	movi	r4,36
1010995c:	18800315 	stw	r2,12(r3)
10109960:	10c00215 	stw	r3,8(r2)
10109964:	9c400204 	addi	r17,r19,8
10109968:	21bfe52e 	bgeu	r4,r6,10109900 <__alt_data_end+0xfffe9900>
1010996c:	a00b883a 	mov	r5,r20
10109970:	8809883a 	mov	r4,r17
10109974:	01084c40 	call	101084c4 <memmove>
10109978:	98c00117 	ldw	r3,4(r19)
1010997c:	b821883a 	mov	r16,r23
10109980:	982b883a 	mov	r21,r19
10109984:	003f8b06 	br	101097b4 <__alt_data_end+0xfffe97b4>
10109988:	300b883a 	mov	r5,r6
1010998c:	dfc00917 	ldw	ra,36(sp)
10109990:	df000817 	ldw	fp,32(sp)
10109994:	ddc00717 	ldw	r23,28(sp)
10109998:	dd800617 	ldw	r22,24(sp)
1010999c:	dd400517 	ldw	r21,20(sp)
101099a0:	dd000417 	ldw	r20,16(sp)
101099a4:	dcc00317 	ldw	r19,12(sp)
101099a8:	dc800217 	ldw	r18,8(sp)
101099ac:	dc400117 	ldw	r17,4(sp)
101099b0:	dc000017 	ldw	r16,0(sp)
101099b4:	dec00a04 	addi	sp,sp,40
101099b8:	0102f541 	jmpi	10102f54 <_malloc_r>
101099bc:	a0c00017 	ldw	r3,0(r20)
101099c0:	88c00015 	stw	r3,0(r17)
101099c4:	a0c00117 	ldw	r3,4(r20)
101099c8:	88c00115 	stw	r3,4(r17)
101099cc:	00c006c4 	movi	r3,27
101099d0:	19804636 	bltu	r3,r6,10109aec <_realloc_r+0x470>
101099d4:	88800204 	addi	r2,r17,8
101099d8:	a0c00204 	addi	r3,r20,8
101099dc:	003f6406 	br	10109770 <__alt_data_end+0xfffe9770>
101099e0:	8805883a 	mov	r2,r17
101099e4:	a0c00017 	ldw	r3,0(r20)
101099e8:	b821883a 	mov	r16,r23
101099ec:	982b883a 	mov	r21,r19
101099f0:	10c00015 	stw	r3,0(r2)
101099f4:	a0c00117 	ldw	r3,4(r20)
101099f8:	10c00115 	stw	r3,4(r2)
101099fc:	a0c00217 	ldw	r3,8(r20)
10109a00:	10c00215 	stw	r3,8(r2)
10109a04:	98c00117 	ldw	r3,4(r19)
10109a08:	003f6a06 	br	101097b4 <__alt_data_end+0xfffe97b4>
10109a0c:	adab883a 	add	r21,r21,r22
10109a10:	3d85c83a 	sub	r2,r7,r22
10109a14:	e5400215 	stw	r21,8(fp)
10109a18:	10800054 	ori	r2,r2,1
10109a1c:	a8800115 	stw	r2,4(r21)
10109a20:	a0bfff17 	ldw	r2,-4(r20)
10109a24:	9009883a 	mov	r4,r18
10109a28:	1080004c 	andi	r2,r2,1
10109a2c:	1584b03a 	or	r2,r2,r22
10109a30:	a0bfff15 	stw	r2,-4(r20)
10109a34:	010f08c0 	call	1010f08c <__malloc_unlock>
10109a38:	a005883a 	mov	r2,r20
10109a3c:	003f6a06 	br	101097e8 <__alt_data_end+0xfffe97e8>
10109a40:	a00b883a 	mov	r5,r20
10109a44:	8809883a 	mov	r4,r17
10109a48:	01084c40 	call	101084c4 <memmove>
10109a4c:	003f4e06 	br	10109788 <__alt_data_end+0xfffe9788>
10109a50:	b1000404 	addi	r4,r22,16
10109a54:	b93fba16 	blt	r23,r4,10109940 <__alt_data_end+0xfffe9940>
10109a58:	98800317 	ldw	r2,12(r19)
10109a5c:	98c00217 	ldw	r3,8(r19)
10109a60:	81bfff04 	addi	r6,r16,-4
10109a64:	01000904 	movi	r4,36
10109a68:	18800315 	stw	r2,12(r3)
10109a6c:	10c00215 	stw	r3,8(r2)
10109a70:	9c400204 	addi	r17,r19,8
10109a74:	21804336 	bltu	r4,r6,10109b84 <_realloc_r+0x508>
10109a78:	008004c4 	movi	r2,19
10109a7c:	11803f2e 	bgeu	r2,r6,10109b7c <_realloc_r+0x500>
10109a80:	a0800017 	ldw	r2,0(r20)
10109a84:	98800215 	stw	r2,8(r19)
10109a88:	a0800117 	ldw	r2,4(r20)
10109a8c:	98800315 	stw	r2,12(r19)
10109a90:	008006c4 	movi	r2,27
10109a94:	11803f36 	bltu	r2,r6,10109b94 <_realloc_r+0x518>
10109a98:	98800404 	addi	r2,r19,16
10109a9c:	a5000204 	addi	r20,r20,8
10109aa0:	a0c00017 	ldw	r3,0(r20)
10109aa4:	10c00015 	stw	r3,0(r2)
10109aa8:	a0c00117 	ldw	r3,4(r20)
10109aac:	10c00115 	stw	r3,4(r2)
10109ab0:	a0c00217 	ldw	r3,8(r20)
10109ab4:	10c00215 	stw	r3,8(r2)
10109ab8:	9d87883a 	add	r3,r19,r22
10109abc:	bd85c83a 	sub	r2,r23,r22
10109ac0:	e0c00215 	stw	r3,8(fp)
10109ac4:	10800054 	ori	r2,r2,1
10109ac8:	18800115 	stw	r2,4(r3)
10109acc:	98800117 	ldw	r2,4(r19)
10109ad0:	9009883a 	mov	r4,r18
10109ad4:	1080004c 	andi	r2,r2,1
10109ad8:	1584b03a 	or	r2,r2,r22
10109adc:	98800115 	stw	r2,4(r19)
10109ae0:	010f08c0 	call	1010f08c <__malloc_unlock>
10109ae4:	8805883a 	mov	r2,r17
10109ae8:	003f3f06 	br	101097e8 <__alt_data_end+0xfffe97e8>
10109aec:	a0c00217 	ldw	r3,8(r20)
10109af0:	88c00215 	stw	r3,8(r17)
10109af4:	a0c00317 	ldw	r3,12(r20)
10109af8:	88c00315 	stw	r3,12(r17)
10109afc:	30801126 	beq	r6,r2,10109b44 <_realloc_r+0x4c8>
10109b00:	88800404 	addi	r2,r17,16
10109b04:	a0c00404 	addi	r3,r20,16
10109b08:	003f1906 	br	10109770 <__alt_data_end+0xfffe9770>
10109b0c:	893fff17 	ldw	r4,-4(r17)
10109b10:	00bfff04 	movi	r2,-4
10109b14:	a023883a 	mov	r17,r20
10109b18:	2084703a 	and	r2,r4,r2
10109b1c:	80a1883a 	add	r16,r16,r2
10109b20:	003f2406 	br	101097b4 <__alt_data_end+0xfffe97b4>
10109b24:	a0800217 	ldw	r2,8(r20)
10109b28:	98800415 	stw	r2,16(r19)
10109b2c:	a0800317 	ldw	r2,12(r20)
10109b30:	98800515 	stw	r2,20(r19)
10109b34:	31000a26 	beq	r6,r4,10109b60 <_realloc_r+0x4e4>
10109b38:	98800604 	addi	r2,r19,24
10109b3c:	a5000404 	addi	r20,r20,16
10109b40:	003fa806 	br	101099e4 <__alt_data_end+0xfffe99e4>
10109b44:	a1000417 	ldw	r4,16(r20)
10109b48:	88800604 	addi	r2,r17,24
10109b4c:	a0c00604 	addi	r3,r20,24
10109b50:	89000415 	stw	r4,16(r17)
10109b54:	a1000517 	ldw	r4,20(r20)
10109b58:	89000515 	stw	r4,20(r17)
10109b5c:	003f0406 	br	10109770 <__alt_data_end+0xfffe9770>
10109b60:	a0c00417 	ldw	r3,16(r20)
10109b64:	a5000604 	addi	r20,r20,24
10109b68:	98800804 	addi	r2,r19,32
10109b6c:	98c00615 	stw	r3,24(r19)
10109b70:	a0ffff17 	ldw	r3,-4(r20)
10109b74:	98c00715 	stw	r3,28(r19)
10109b78:	003f9a06 	br	101099e4 <__alt_data_end+0xfffe99e4>
10109b7c:	8805883a 	mov	r2,r17
10109b80:	003fc706 	br	10109aa0 <__alt_data_end+0xfffe9aa0>
10109b84:	a00b883a 	mov	r5,r20
10109b88:	8809883a 	mov	r4,r17
10109b8c:	01084c40 	call	101084c4 <memmove>
10109b90:	003fc906 	br	10109ab8 <__alt_data_end+0xfffe9ab8>
10109b94:	a0800217 	ldw	r2,8(r20)
10109b98:	98800415 	stw	r2,16(r19)
10109b9c:	a0800317 	ldw	r2,12(r20)
10109ba0:	98800515 	stw	r2,20(r19)
10109ba4:	31000726 	beq	r6,r4,10109bc4 <_realloc_r+0x548>
10109ba8:	98800604 	addi	r2,r19,24
10109bac:	a5000404 	addi	r20,r20,16
10109bb0:	003fbb06 	br	10109aa0 <__alt_data_end+0xfffe9aa0>
10109bb4:	9009883a 	mov	r4,r18
10109bb8:	010f08c0 	call	1010f08c <__malloc_unlock>
10109bbc:	0005883a 	mov	r2,zero
10109bc0:	003f0906 	br	101097e8 <__alt_data_end+0xfffe97e8>
10109bc4:	a0c00417 	ldw	r3,16(r20)
10109bc8:	a5000604 	addi	r20,r20,24
10109bcc:	98800804 	addi	r2,r19,32
10109bd0:	98c00615 	stw	r3,24(r19)
10109bd4:	a0ffff17 	ldw	r3,-4(r20)
10109bd8:	98c00715 	stw	r3,28(r19)
10109bdc:	003fb006 	br	10109aa0 <__alt_data_end+0xfffe9aa0>

10109be0 <__fpclassifyd>:
10109be0:	00a00034 	movhi	r2,32768
10109be4:	10bfffc4 	addi	r2,r2,-1
10109be8:	2884703a 	and	r2,r5,r2
10109bec:	10000726 	beq	r2,zero,10109c0c <__fpclassifyd+0x2c>
10109bf0:	00fffc34 	movhi	r3,65520
10109bf4:	019ff834 	movhi	r6,32736
10109bf8:	28c7883a 	add	r3,r5,r3
10109bfc:	31bfffc4 	addi	r6,r6,-1
10109c00:	30c00536 	bltu	r6,r3,10109c18 <__fpclassifyd+0x38>
10109c04:	00800104 	movi	r2,4
10109c08:	f800283a 	ret
10109c0c:	2000021e 	bne	r4,zero,10109c18 <__fpclassifyd+0x38>
10109c10:	00800084 	movi	r2,2
10109c14:	f800283a 	ret
10109c18:	00dffc34 	movhi	r3,32752
10109c1c:	019ff834 	movhi	r6,32736
10109c20:	28cb883a 	add	r5,r5,r3
10109c24:	31bfffc4 	addi	r6,r6,-1
10109c28:	317ff62e 	bgeu	r6,r5,10109c04 <__alt_data_end+0xfffe9c04>
10109c2c:	01400434 	movhi	r5,16
10109c30:	297fffc4 	addi	r5,r5,-1
10109c34:	28800236 	bltu	r5,r2,10109c40 <__fpclassifyd+0x60>
10109c38:	008000c4 	movi	r2,3
10109c3c:	f800283a 	ret
10109c40:	10c00226 	beq	r2,r3,10109c4c <__fpclassifyd+0x6c>
10109c44:	0005883a 	mov	r2,zero
10109c48:	f800283a 	ret
10109c4c:	2005003a 	cmpeq	r2,r4,zero
10109c50:	f800283a 	ret

10109c54 <strcmp>:
10109c54:	2144b03a 	or	r2,r4,r5
10109c58:	108000cc 	andi	r2,r2,3
10109c5c:	1000171e 	bne	r2,zero,10109cbc <strcmp+0x68>
10109c60:	20800017 	ldw	r2,0(r4)
10109c64:	28c00017 	ldw	r3,0(r5)
10109c68:	10c0141e 	bne	r2,r3,10109cbc <strcmp+0x68>
10109c6c:	027fbff4 	movhi	r9,65279
10109c70:	4a7fbfc4 	addi	r9,r9,-257
10109c74:	0086303a 	nor	r3,zero,r2
10109c78:	02202074 	movhi	r8,32897
10109c7c:	1245883a 	add	r2,r2,r9
10109c80:	42202004 	addi	r8,r8,-32640
10109c84:	10c4703a 	and	r2,r2,r3
10109c88:	1204703a 	and	r2,r2,r8
10109c8c:	10000226 	beq	r2,zero,10109c98 <strcmp+0x44>
10109c90:	00002306 	br	10109d20 <strcmp+0xcc>
10109c94:	1000221e 	bne	r2,zero,10109d20 <strcmp+0xcc>
10109c98:	21000104 	addi	r4,r4,4
10109c9c:	20c00017 	ldw	r3,0(r4)
10109ca0:	29400104 	addi	r5,r5,4
10109ca4:	29800017 	ldw	r6,0(r5)
10109ca8:	1a4f883a 	add	r7,r3,r9
10109cac:	00c4303a 	nor	r2,zero,r3
10109cb0:	3884703a 	and	r2,r7,r2
10109cb4:	1204703a 	and	r2,r2,r8
10109cb8:	19bff626 	beq	r3,r6,10109c94 <__alt_data_end+0xfffe9c94>
10109cbc:	20800003 	ldbu	r2,0(r4)
10109cc0:	10c03fcc 	andi	r3,r2,255
10109cc4:	18c0201c 	xori	r3,r3,128
10109cc8:	18ffe004 	addi	r3,r3,-128
10109ccc:	18000c26 	beq	r3,zero,10109d00 <strcmp+0xac>
10109cd0:	29800007 	ldb	r6,0(r5)
10109cd4:	19800326 	beq	r3,r6,10109ce4 <strcmp+0x90>
10109cd8:	00001306 	br	10109d28 <strcmp+0xd4>
10109cdc:	29800007 	ldb	r6,0(r5)
10109ce0:	11800b1e 	bne	r2,r6,10109d10 <strcmp+0xbc>
10109ce4:	21000044 	addi	r4,r4,1
10109ce8:	20c00003 	ldbu	r3,0(r4)
10109cec:	29400044 	addi	r5,r5,1
10109cf0:	18803fcc 	andi	r2,r3,255
10109cf4:	1080201c 	xori	r2,r2,128
10109cf8:	10bfe004 	addi	r2,r2,-128
10109cfc:	103ff71e 	bne	r2,zero,10109cdc <__alt_data_end+0xfffe9cdc>
10109d00:	0007883a 	mov	r3,zero
10109d04:	28800003 	ldbu	r2,0(r5)
10109d08:	1885c83a 	sub	r2,r3,r2
10109d0c:	f800283a 	ret
10109d10:	28800003 	ldbu	r2,0(r5)
10109d14:	18c03fcc 	andi	r3,r3,255
10109d18:	1885c83a 	sub	r2,r3,r2
10109d1c:	f800283a 	ret
10109d20:	0005883a 	mov	r2,zero
10109d24:	f800283a 	ret
10109d28:	10c03fcc 	andi	r3,r2,255
10109d2c:	003ff506 	br	10109d04 <__alt_data_end+0xfffe9d04>

10109d30 <__sprint_r.part.0>:
10109d30:	28801917 	ldw	r2,100(r5)
10109d34:	defff604 	addi	sp,sp,-40
10109d38:	dd400515 	stw	r21,20(sp)
10109d3c:	dfc00915 	stw	ra,36(sp)
10109d40:	df000815 	stw	fp,32(sp)
10109d44:	ddc00715 	stw	r23,28(sp)
10109d48:	dd800615 	stw	r22,24(sp)
10109d4c:	dd000415 	stw	r20,16(sp)
10109d50:	dcc00315 	stw	r19,12(sp)
10109d54:	dc800215 	stw	r18,8(sp)
10109d58:	dc400115 	stw	r17,4(sp)
10109d5c:	dc000015 	stw	r16,0(sp)
10109d60:	1088000c 	andi	r2,r2,8192
10109d64:	302b883a 	mov	r21,r6
10109d68:	10002e26 	beq	r2,zero,10109e24 <__sprint_r.part.0+0xf4>
10109d6c:	30800217 	ldw	r2,8(r6)
10109d70:	35800017 	ldw	r22,0(r6)
10109d74:	10002926 	beq	r2,zero,10109e1c <__sprint_r.part.0+0xec>
10109d78:	2827883a 	mov	r19,r5
10109d7c:	2029883a 	mov	r20,r4
10109d80:	b5c00104 	addi	r23,r22,4
10109d84:	04bfffc4 	movi	r18,-1
10109d88:	bc400017 	ldw	r17,0(r23)
10109d8c:	b4000017 	ldw	r16,0(r22)
10109d90:	0039883a 	mov	fp,zero
10109d94:	8822d0ba 	srli	r17,r17,2
10109d98:	8800031e 	bne	r17,zero,10109da8 <__sprint_r.part.0+0x78>
10109d9c:	00001806 	br	10109e00 <__sprint_r.part.0+0xd0>
10109da0:	84000104 	addi	r16,r16,4
10109da4:	8f001526 	beq	r17,fp,10109dfc <__sprint_r.part.0+0xcc>
10109da8:	81400017 	ldw	r5,0(r16)
10109dac:	980d883a 	mov	r6,r19
10109db0:	a009883a 	mov	r4,r20
10109db4:	010b5a00 	call	1010b5a0 <_fputwc_r>
10109db8:	e7000044 	addi	fp,fp,1
10109dbc:	14bff81e 	bne	r2,r18,10109da0 <__alt_data_end+0xfffe9da0>
10109dc0:	9005883a 	mov	r2,r18
10109dc4:	a8000215 	stw	zero,8(r21)
10109dc8:	a8000115 	stw	zero,4(r21)
10109dcc:	dfc00917 	ldw	ra,36(sp)
10109dd0:	df000817 	ldw	fp,32(sp)
10109dd4:	ddc00717 	ldw	r23,28(sp)
10109dd8:	dd800617 	ldw	r22,24(sp)
10109ddc:	dd400517 	ldw	r21,20(sp)
10109de0:	dd000417 	ldw	r20,16(sp)
10109de4:	dcc00317 	ldw	r19,12(sp)
10109de8:	dc800217 	ldw	r18,8(sp)
10109dec:	dc400117 	ldw	r17,4(sp)
10109df0:	dc000017 	ldw	r16,0(sp)
10109df4:	dec00a04 	addi	sp,sp,40
10109df8:	f800283a 	ret
10109dfc:	a8800217 	ldw	r2,8(r21)
10109e00:	8c63883a 	add	r17,r17,r17
10109e04:	8c63883a 	add	r17,r17,r17
10109e08:	1445c83a 	sub	r2,r2,r17
10109e0c:	a8800215 	stw	r2,8(r21)
10109e10:	b5800204 	addi	r22,r22,8
10109e14:	bdc00204 	addi	r23,r23,8
10109e18:	103fdb1e 	bne	r2,zero,10109d88 <__alt_data_end+0xfffe9d88>
10109e1c:	0005883a 	mov	r2,zero
10109e20:	003fe806 	br	10109dc4 <__alt_data_end+0xfffe9dc4>
10109e24:	0107c4c0 	call	10107c4c <__sfvwrite_r>
10109e28:	003fe606 	br	10109dc4 <__alt_data_end+0xfffe9dc4>

10109e2c <__sprint_r>:
10109e2c:	30c00217 	ldw	r3,8(r6)
10109e30:	18000126 	beq	r3,zero,10109e38 <__sprint_r+0xc>
10109e34:	0109d301 	jmpi	10109d30 <__sprint_r.part.0>
10109e38:	30000115 	stw	zero,4(r6)
10109e3c:	0005883a 	mov	r2,zero
10109e40:	f800283a 	ret

10109e44 <___vfiprintf_internal_r>:
10109e44:	deffc904 	addi	sp,sp,-220
10109e48:	df003515 	stw	fp,212(sp)
10109e4c:	dd003115 	stw	r20,196(sp)
10109e50:	dfc03615 	stw	ra,216(sp)
10109e54:	ddc03415 	stw	r23,208(sp)
10109e58:	dd803315 	stw	r22,204(sp)
10109e5c:	dd403215 	stw	r21,200(sp)
10109e60:	dcc03015 	stw	r19,192(sp)
10109e64:	dc802f15 	stw	r18,188(sp)
10109e68:	dc402e15 	stw	r17,184(sp)
10109e6c:	dc002d15 	stw	r16,180(sp)
10109e70:	d9002015 	stw	r4,128(sp)
10109e74:	d9c02215 	stw	r7,136(sp)
10109e78:	2829883a 	mov	r20,r5
10109e7c:	3039883a 	mov	fp,r6
10109e80:	20000226 	beq	r4,zero,10109e8c <___vfiprintf_internal_r+0x48>
10109e84:	20800e17 	ldw	r2,56(r4)
10109e88:	1000cf26 	beq	r2,zero,1010a1c8 <___vfiprintf_internal_r+0x384>
10109e8c:	a080030b 	ldhu	r2,12(r20)
10109e90:	10c8000c 	andi	r3,r2,8192
10109e94:	1800061e 	bne	r3,zero,10109eb0 <___vfiprintf_internal_r+0x6c>
10109e98:	a1001917 	ldw	r4,100(r20)
10109e9c:	00f7ffc4 	movi	r3,-8193
10109ea0:	10880014 	ori	r2,r2,8192
10109ea4:	20c6703a 	and	r3,r4,r3
10109ea8:	a080030d 	sth	r2,12(r20)
10109eac:	a0c01915 	stw	r3,100(r20)
10109eb0:	10c0020c 	andi	r3,r2,8
10109eb4:	1800a926 	beq	r3,zero,1010a15c <___vfiprintf_internal_r+0x318>
10109eb8:	a0c00417 	ldw	r3,16(r20)
10109ebc:	1800a726 	beq	r3,zero,1010a15c <___vfiprintf_internal_r+0x318>
10109ec0:	1080068c 	andi	r2,r2,26
10109ec4:	00c00284 	movi	r3,10
10109ec8:	10c0ac26 	beq	r2,r3,1010a17c <___vfiprintf_internal_r+0x338>
10109ecc:	da801a04 	addi	r10,sp,104
10109ed0:	da801e15 	stw	r10,120(sp)
10109ed4:	d8801e17 	ldw	r2,120(sp)
10109ed8:	da8019c4 	addi	r10,sp,103
10109edc:	05840474 	movhi	r22,4113
10109ee0:	05c40474 	movhi	r23,4113
10109ee4:	da801f15 	stw	r10,124(sp)
10109ee8:	1295c83a 	sub	r10,r2,r10
10109eec:	b5870604 	addi	r22,r22,7192
10109ef0:	bdc70204 	addi	r23,r23,7176
10109ef4:	dec01a15 	stw	sp,104(sp)
10109ef8:	d8001c15 	stw	zero,112(sp)
10109efc:	d8001b15 	stw	zero,108(sp)
10109f00:	d8002615 	stw	zero,152(sp)
10109f04:	d8002315 	stw	zero,140(sp)
10109f08:	da802715 	stw	r10,156(sp)
10109f0c:	d811883a 	mov	r8,sp
10109f10:	dd002115 	stw	r20,132(sp)
10109f14:	e021883a 	mov	r16,fp
10109f18:	80800007 	ldb	r2,0(r16)
10109f1c:	1003ea26 	beq	r2,zero,1010aec8 <___vfiprintf_internal_r+0x1084>
10109f20:	00c00944 	movi	r3,37
10109f24:	8025883a 	mov	r18,r16
10109f28:	10c0021e 	bne	r2,r3,10109f34 <___vfiprintf_internal_r+0xf0>
10109f2c:	00001606 	br	10109f88 <___vfiprintf_internal_r+0x144>
10109f30:	10c00326 	beq	r2,r3,10109f40 <___vfiprintf_internal_r+0xfc>
10109f34:	94800044 	addi	r18,r18,1
10109f38:	90800007 	ldb	r2,0(r18)
10109f3c:	103ffc1e 	bne	r2,zero,10109f30 <__alt_data_end+0xfffe9f30>
10109f40:	9423c83a 	sub	r17,r18,r16
10109f44:	88001026 	beq	r17,zero,10109f88 <___vfiprintf_internal_r+0x144>
10109f48:	d8c01c17 	ldw	r3,112(sp)
10109f4c:	d8801b17 	ldw	r2,108(sp)
10109f50:	44000015 	stw	r16,0(r8)
10109f54:	88c7883a 	add	r3,r17,r3
10109f58:	10800044 	addi	r2,r2,1
10109f5c:	44400115 	stw	r17,4(r8)
10109f60:	d8c01c15 	stw	r3,112(sp)
10109f64:	d8801b15 	stw	r2,108(sp)
10109f68:	010001c4 	movi	r4,7
10109f6c:	2080760e 	bge	r4,r2,1010a148 <___vfiprintf_internal_r+0x304>
10109f70:	1803821e 	bne	r3,zero,1010ad7c <___vfiprintf_internal_r+0xf38>
10109f74:	da802317 	ldw	r10,140(sp)
10109f78:	d8001b15 	stw	zero,108(sp)
10109f7c:	d811883a 	mov	r8,sp
10109f80:	5455883a 	add	r10,r10,r17
10109f84:	da802315 	stw	r10,140(sp)
10109f88:	90800007 	ldb	r2,0(r18)
10109f8c:	10044626 	beq	r2,zero,1010b0a8 <___vfiprintf_internal_r+0x1264>
10109f90:	90c00047 	ldb	r3,1(r18)
10109f94:	94000044 	addi	r16,r18,1
10109f98:	d8001d85 	stb	zero,118(sp)
10109f9c:	0009883a 	mov	r4,zero
10109fa0:	000f883a 	mov	r7,zero
10109fa4:	027fffc4 	movi	r9,-1
10109fa8:	0023883a 	mov	r17,zero
10109fac:	0029883a 	mov	r20,zero
10109fb0:	01401604 	movi	r5,88
10109fb4:	01800244 	movi	r6,9
10109fb8:	03400a84 	movi	r13,42
10109fbc:	03001b04 	movi	r12,108
10109fc0:	84000044 	addi	r16,r16,1
10109fc4:	18bff804 	addi	r2,r3,-32
10109fc8:	28827336 	bltu	r5,r2,1010a998 <___vfiprintf_internal_r+0xb54>
10109fcc:	100490ba 	slli	r2,r2,2
10109fd0:	02840474 	movhi	r10,4113
10109fd4:	52a7f904 	addi	r10,r10,-24604
10109fd8:	1285883a 	add	r2,r2,r10
10109fdc:	10800017 	ldw	r2,0(r2)
10109fe0:	1000683a 	jmp	r2
10109fe4:	1010a6cc 	andi	zero,r2,17051
10109fe8:	1010a998 	cmpnei	zero,r2,17062
10109fec:	1010a998 	cmpnei	zero,r2,17062
10109ff0:	1010a6ec 	andhi	zero,r2,17051
10109ff4:	1010a998 	cmpnei	zero,r2,17062
10109ff8:	1010a998 	cmpnei	zero,r2,17062
10109ffc:	1010a998 	cmpnei	zero,r2,17062
1010a000:	1010a998 	cmpnei	zero,r2,17062
1010a004:	1010a998 	cmpnei	zero,r2,17062
1010a008:	1010a998 	cmpnei	zero,r2,17062
1010a00c:	1010a8d4 	ori	zero,r2,17059
1010a010:	1010a8f0 	cmpltui	zero,r2,17059
1010a014:	1010a998 	cmpnei	zero,r2,17062
1010a018:	1010a1d8 	cmpnei	zero,r2,17031
1010a01c:	1010a900 	call	11010a90 <__alt_data_end+0xef0a90>
1010a020:	1010a998 	cmpnei	zero,r2,17062
1010a024:	1010a6f8 	rdprs	zero,r2,17051
1010a028:	1010a704 	addi	zero,r2,17052
1010a02c:	1010a704 	addi	zero,r2,17052
1010a030:	1010a704 	addi	zero,r2,17052
1010a034:	1010a704 	addi	zero,r2,17052
1010a038:	1010a704 	addi	zero,r2,17052
1010a03c:	1010a704 	addi	zero,r2,17052
1010a040:	1010a704 	addi	zero,r2,17052
1010a044:	1010a704 	addi	zero,r2,17052
1010a048:	1010a704 	addi	zero,r2,17052
1010a04c:	1010a998 	cmpnei	zero,r2,17062
1010a050:	1010a998 	cmpnei	zero,r2,17062
1010a054:	1010a998 	cmpnei	zero,r2,17062
1010a058:	1010a998 	cmpnei	zero,r2,17062
1010a05c:	1010a998 	cmpnei	zero,r2,17062
1010a060:	1010a998 	cmpnei	zero,r2,17062
1010a064:	1010a998 	cmpnei	zero,r2,17062
1010a068:	1010a998 	cmpnei	zero,r2,17062
1010a06c:	1010a998 	cmpnei	zero,r2,17062
1010a070:	1010a998 	cmpnei	zero,r2,17062
1010a074:	1010a730 	cmpltui	zero,r2,17052
1010a078:	1010a998 	cmpnei	zero,r2,17062
1010a07c:	1010a998 	cmpnei	zero,r2,17062
1010a080:	1010a998 	cmpnei	zero,r2,17062
1010a084:	1010a998 	cmpnei	zero,r2,17062
1010a088:	1010a998 	cmpnei	zero,r2,17062
1010a08c:	1010a998 	cmpnei	zero,r2,17062
1010a090:	1010a998 	cmpnei	zero,r2,17062
1010a094:	1010a998 	cmpnei	zero,r2,17062
1010a098:	1010a998 	cmpnei	zero,r2,17062
1010a09c:	1010a998 	cmpnei	zero,r2,17062
1010a0a0:	1010a768 	cmpgeui	zero,r2,17053
1010a0a4:	1010a998 	cmpnei	zero,r2,17062
1010a0a8:	1010a998 	cmpnei	zero,r2,17062
1010a0ac:	1010a998 	cmpnei	zero,r2,17062
1010a0b0:	1010a998 	cmpnei	zero,r2,17062
1010a0b4:	1010a998 	cmpnei	zero,r2,17062
1010a0b8:	1010a7c0 	call	11010a7c <__alt_data_end+0xef0a7c>
1010a0bc:	1010a998 	cmpnei	zero,r2,17062
1010a0c0:	1010a998 	cmpnei	zero,r2,17062
1010a0c4:	1010a830 	cmpltui	zero,r2,17056
1010a0c8:	1010a998 	cmpnei	zero,r2,17062
1010a0cc:	1010a998 	cmpnei	zero,r2,17062
1010a0d0:	1010a998 	cmpnei	zero,r2,17062
1010a0d4:	1010a998 	cmpnei	zero,r2,17062
1010a0d8:	1010a998 	cmpnei	zero,r2,17062
1010a0dc:	1010a998 	cmpnei	zero,r2,17062
1010a0e0:	1010a998 	cmpnei	zero,r2,17062
1010a0e4:	1010a998 	cmpnei	zero,r2,17062
1010a0e8:	1010a998 	cmpnei	zero,r2,17062
1010a0ec:	1010a998 	cmpnei	zero,r2,17062
1010a0f0:	1010a5dc 	xori	zero,r2,17047
1010a0f4:	1010a608 	cmpgei	zero,r2,17048
1010a0f8:	1010a998 	cmpnei	zero,r2,17062
1010a0fc:	1010a998 	cmpnei	zero,r2,17062
1010a100:	1010a998 	cmpnei	zero,r2,17062
1010a104:	1010a940 	call	11010a94 <__alt_data_end+0xef0a94>
1010a108:	1010a608 	cmpgei	zero,r2,17048
1010a10c:	1010a998 	cmpnei	zero,r2,17062
1010a110:	1010a998 	cmpnei	zero,r2,17062
1010a114:	1010a49c 	xori	zero,r2,17042
1010a118:	1010a998 	cmpnei	zero,r2,17062
1010a11c:	1010a4ac 	andhi	zero,r2,17042
1010a120:	1010a4e8 	cmpgeui	zero,r2,17043
1010a124:	1010a1e4 	muli	zero,r2,17031
1010a128:	1010a490 	cmplti	zero,r2,17042
1010a12c:	1010a998 	cmpnei	zero,r2,17062
1010a130:	1010a86c 	andhi	zero,r2,17057
1010a134:	1010a998 	cmpnei	zero,r2,17062
1010a138:	1010a8c4 	addi	zero,r2,17059
1010a13c:	1010a998 	cmpnei	zero,r2,17062
1010a140:	1010a998 	cmpnei	zero,r2,17062
1010a144:	1010a588 	cmpgei	zero,r2,17046
1010a148:	42000204 	addi	r8,r8,8
1010a14c:	da802317 	ldw	r10,140(sp)
1010a150:	5455883a 	add	r10,r10,r17
1010a154:	da802315 	stw	r10,140(sp)
1010a158:	003f8b06 	br	10109f88 <__alt_data_end+0xfffe9f88>
1010a15c:	d9002017 	ldw	r4,128(sp)
1010a160:	a00b883a 	mov	r5,r20
1010a164:	01061700 	call	10106170 <__swsetup_r>
1010a168:	1003b11e 	bne	r2,zero,1010b030 <___vfiprintf_internal_r+0x11ec>
1010a16c:	a080030b 	ldhu	r2,12(r20)
1010a170:	00c00284 	movi	r3,10
1010a174:	1080068c 	andi	r2,r2,26
1010a178:	10ff541e 	bne	r2,r3,10109ecc <__alt_data_end+0xfffe9ecc>
1010a17c:	a080038f 	ldh	r2,14(r20)
1010a180:	103f5216 	blt	r2,zero,10109ecc <__alt_data_end+0xfffe9ecc>
1010a184:	d9c02217 	ldw	r7,136(sp)
1010a188:	d9002017 	ldw	r4,128(sp)
1010a18c:	e00d883a 	mov	r6,fp
1010a190:	a00b883a 	mov	r5,r20
1010a194:	010b2bc0 	call	1010b2bc <__sbprintf>
1010a198:	dfc03617 	ldw	ra,216(sp)
1010a19c:	df003517 	ldw	fp,212(sp)
1010a1a0:	ddc03417 	ldw	r23,208(sp)
1010a1a4:	dd803317 	ldw	r22,204(sp)
1010a1a8:	dd403217 	ldw	r21,200(sp)
1010a1ac:	dd003117 	ldw	r20,196(sp)
1010a1b0:	dcc03017 	ldw	r19,192(sp)
1010a1b4:	dc802f17 	ldw	r18,188(sp)
1010a1b8:	dc402e17 	ldw	r17,184(sp)
1010a1bc:	dc002d17 	ldw	r16,180(sp)
1010a1c0:	dec03704 	addi	sp,sp,220
1010a1c4:	f800283a 	ret
1010a1c8:	01021580 	call	10102158 <__sinit>
1010a1cc:	003f2f06 	br	10109e8c <__alt_data_end+0xfffe9e8c>
1010a1d0:	0463c83a 	sub	r17,zero,r17
1010a1d4:	d8802215 	stw	r2,136(sp)
1010a1d8:	a5000114 	ori	r20,r20,4
1010a1dc:	80c00007 	ldb	r3,0(r16)
1010a1e0:	003f7706 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a1e4:	00800c04 	movi	r2,48
1010a1e8:	da802217 	ldw	r10,136(sp)
1010a1ec:	d8801d05 	stb	r2,116(sp)
1010a1f0:	00801e04 	movi	r2,120
1010a1f4:	d8801d45 	stb	r2,117(sp)
1010a1f8:	d8001d85 	stb	zero,118(sp)
1010a1fc:	50c00104 	addi	r3,r10,4
1010a200:	54800017 	ldw	r18,0(r10)
1010a204:	0027883a 	mov	r19,zero
1010a208:	a0800094 	ori	r2,r20,2
1010a20c:	48030b16 	blt	r9,zero,1010ae3c <___vfiprintf_internal_r+0xff8>
1010a210:	00bfdfc4 	movi	r2,-129
1010a214:	a096703a 	and	r11,r20,r2
1010a218:	d8c02215 	stw	r3,136(sp)
1010a21c:	5d000094 	ori	r20,r11,2
1010a220:	90032b1e 	bne	r18,zero,1010aed0 <___vfiprintf_internal_r+0x108c>
1010a224:	00840474 	movhi	r2,4113
1010a228:	1086a204 	addi	r2,r2,6792
1010a22c:	d8802615 	stw	r2,152(sp)
1010a230:	0039883a 	mov	fp,zero
1010a234:	48017b1e 	bne	r9,zero,1010a824 <___vfiprintf_internal_r+0x9e0>
1010a238:	0013883a 	mov	r9,zero
1010a23c:	0027883a 	mov	r19,zero
1010a240:	dd401a04 	addi	r21,sp,104
1010a244:	4825883a 	mov	r18,r9
1010a248:	4cc0010e 	bge	r9,r19,1010a250 <___vfiprintf_internal_r+0x40c>
1010a24c:	9825883a 	mov	r18,r19
1010a250:	e7003fcc 	andi	fp,fp,255
1010a254:	e700201c 	xori	fp,fp,128
1010a258:	e73fe004 	addi	fp,fp,-128
1010a25c:	e0000126 	beq	fp,zero,1010a264 <___vfiprintf_internal_r+0x420>
1010a260:	94800044 	addi	r18,r18,1
1010a264:	a380008c 	andi	r14,r20,2
1010a268:	70000126 	beq	r14,zero,1010a270 <___vfiprintf_internal_r+0x42c>
1010a26c:	94800084 	addi	r18,r18,2
1010a270:	a700210c 	andi	fp,r20,132
1010a274:	e001df1e 	bne	fp,zero,1010a9f4 <___vfiprintf_internal_r+0xbb0>
1010a278:	8c87c83a 	sub	r3,r17,r18
1010a27c:	00c1dd0e 	bge	zero,r3,1010a9f4 <___vfiprintf_internal_r+0xbb0>
1010a280:	01c00404 	movi	r7,16
1010a284:	d8801c17 	ldw	r2,112(sp)
1010a288:	38c3ad0e 	bge	r7,r3,1010b140 <___vfiprintf_internal_r+0x12fc>
1010a28c:	02840474 	movhi	r10,4113
1010a290:	52870604 	addi	r10,r10,7192
1010a294:	dc002915 	stw	r16,164(sp)
1010a298:	d9801b17 	ldw	r6,108(sp)
1010a29c:	da802415 	stw	r10,144(sp)
1010a2a0:	03c001c4 	movi	r15,7
1010a2a4:	da402515 	stw	r9,148(sp)
1010a2a8:	db802815 	stw	r14,160(sp)
1010a2ac:	1821883a 	mov	r16,r3
1010a2b0:	00000506 	br	1010a2c8 <___vfiprintf_internal_r+0x484>
1010a2b4:	31400084 	addi	r5,r6,2
1010a2b8:	42000204 	addi	r8,r8,8
1010a2bc:	200d883a 	mov	r6,r4
1010a2c0:	843ffc04 	addi	r16,r16,-16
1010a2c4:	3c000d0e 	bge	r7,r16,1010a2fc <___vfiprintf_internal_r+0x4b8>
1010a2c8:	10800404 	addi	r2,r2,16
1010a2cc:	31000044 	addi	r4,r6,1
1010a2d0:	45800015 	stw	r22,0(r8)
1010a2d4:	41c00115 	stw	r7,4(r8)
1010a2d8:	d8801c15 	stw	r2,112(sp)
1010a2dc:	d9001b15 	stw	r4,108(sp)
1010a2e0:	793ff40e 	bge	r15,r4,1010a2b4 <__alt_data_end+0xfffea2b4>
1010a2e4:	1001b51e 	bne	r2,zero,1010a9bc <___vfiprintf_internal_r+0xb78>
1010a2e8:	843ffc04 	addi	r16,r16,-16
1010a2ec:	000d883a 	mov	r6,zero
1010a2f0:	01400044 	movi	r5,1
1010a2f4:	d811883a 	mov	r8,sp
1010a2f8:	3c3ff316 	blt	r7,r16,1010a2c8 <__alt_data_end+0xfffea2c8>
1010a2fc:	8007883a 	mov	r3,r16
1010a300:	da402517 	ldw	r9,148(sp)
1010a304:	db802817 	ldw	r14,160(sp)
1010a308:	dc002917 	ldw	r16,164(sp)
1010a30c:	da802417 	ldw	r10,144(sp)
1010a310:	1885883a 	add	r2,r3,r2
1010a314:	40c00115 	stw	r3,4(r8)
1010a318:	42800015 	stw	r10,0(r8)
1010a31c:	d8801c15 	stw	r2,112(sp)
1010a320:	d9401b15 	stw	r5,108(sp)
1010a324:	00c001c4 	movi	r3,7
1010a328:	19426016 	blt	r3,r5,1010acac <___vfiprintf_internal_r+0xe68>
1010a32c:	d8c01d87 	ldb	r3,118(sp)
1010a330:	42000204 	addi	r8,r8,8
1010a334:	29000044 	addi	r4,r5,1
1010a338:	1801b31e 	bne	r3,zero,1010aa08 <___vfiprintf_internal_r+0xbc4>
1010a33c:	7001c026 	beq	r14,zero,1010aa40 <___vfiprintf_internal_r+0xbfc>
1010a340:	d8c01d04 	addi	r3,sp,116
1010a344:	10800084 	addi	r2,r2,2
1010a348:	40c00015 	stw	r3,0(r8)
1010a34c:	00c00084 	movi	r3,2
1010a350:	40c00115 	stw	r3,4(r8)
1010a354:	d8801c15 	stw	r2,112(sp)
1010a358:	d9001b15 	stw	r4,108(sp)
1010a35c:	00c001c4 	movi	r3,7
1010a360:	1902650e 	bge	r3,r4,1010acf8 <___vfiprintf_internal_r+0xeb4>
1010a364:	10029a1e 	bne	r2,zero,1010add0 <___vfiprintf_internal_r+0xf8c>
1010a368:	00c02004 	movi	r3,128
1010a36c:	01000044 	movi	r4,1
1010a370:	000b883a 	mov	r5,zero
1010a374:	d811883a 	mov	r8,sp
1010a378:	e0c1b31e 	bne	fp,r3,1010aa48 <___vfiprintf_internal_r+0xc04>
1010a37c:	8cb9c83a 	sub	fp,r17,r18
1010a380:	0701b10e 	bge	zero,fp,1010aa48 <___vfiprintf_internal_r+0xc04>
1010a384:	01c00404 	movi	r7,16
1010a388:	3f03890e 	bge	r7,fp,1010b1b0 <___vfiprintf_internal_r+0x136c>
1010a38c:	00c40474 	movhi	r3,4113
1010a390:	18c70204 	addi	r3,r3,7176
1010a394:	d8c02415 	stw	r3,144(sp)
1010a398:	8007883a 	mov	r3,r16
1010a39c:	034001c4 	movi	r13,7
1010a3a0:	e021883a 	mov	r16,fp
1010a3a4:	da402515 	stw	r9,148(sp)
1010a3a8:	1839883a 	mov	fp,r3
1010a3ac:	00000506 	br	1010a3c4 <___vfiprintf_internal_r+0x580>
1010a3b0:	29800084 	addi	r6,r5,2
1010a3b4:	42000204 	addi	r8,r8,8
1010a3b8:	180b883a 	mov	r5,r3
1010a3bc:	843ffc04 	addi	r16,r16,-16
1010a3c0:	3c000d0e 	bge	r7,r16,1010a3f8 <___vfiprintf_internal_r+0x5b4>
1010a3c4:	10800404 	addi	r2,r2,16
1010a3c8:	28c00044 	addi	r3,r5,1
1010a3cc:	45c00015 	stw	r23,0(r8)
1010a3d0:	41c00115 	stw	r7,4(r8)
1010a3d4:	d8801c15 	stw	r2,112(sp)
1010a3d8:	d8c01b15 	stw	r3,108(sp)
1010a3dc:	68fff40e 	bge	r13,r3,1010a3b0 <__alt_data_end+0xfffea3b0>
1010a3e0:	1002241e 	bne	r2,zero,1010ac74 <___vfiprintf_internal_r+0xe30>
1010a3e4:	843ffc04 	addi	r16,r16,-16
1010a3e8:	01800044 	movi	r6,1
1010a3ec:	000b883a 	mov	r5,zero
1010a3f0:	d811883a 	mov	r8,sp
1010a3f4:	3c3ff316 	blt	r7,r16,1010a3c4 <__alt_data_end+0xfffea3c4>
1010a3f8:	da402517 	ldw	r9,148(sp)
1010a3fc:	e007883a 	mov	r3,fp
1010a400:	8039883a 	mov	fp,r16
1010a404:	1821883a 	mov	r16,r3
1010a408:	d8c02417 	ldw	r3,144(sp)
1010a40c:	1705883a 	add	r2,r2,fp
1010a410:	47000115 	stw	fp,4(r8)
1010a414:	40c00015 	stw	r3,0(r8)
1010a418:	d8801c15 	stw	r2,112(sp)
1010a41c:	d9801b15 	stw	r6,108(sp)
1010a420:	00c001c4 	movi	r3,7
1010a424:	19827616 	blt	r3,r6,1010ae00 <___vfiprintf_internal_r+0xfbc>
1010a428:	4cf9c83a 	sub	fp,r9,r19
1010a42c:	42000204 	addi	r8,r8,8
1010a430:	31000044 	addi	r4,r6,1
1010a434:	300b883a 	mov	r5,r6
1010a438:	07018516 	blt	zero,fp,1010aa50 <___vfiprintf_internal_r+0xc0c>
1010a43c:	9885883a 	add	r2,r19,r2
1010a440:	45400015 	stw	r21,0(r8)
1010a444:	44c00115 	stw	r19,4(r8)
1010a448:	d8801c15 	stw	r2,112(sp)
1010a44c:	d9001b15 	stw	r4,108(sp)
1010a450:	00c001c4 	movi	r3,7
1010a454:	1901dd0e 	bge	r3,r4,1010abcc <___vfiprintf_internal_r+0xd88>
1010a458:	1002401e 	bne	r2,zero,1010ad5c <___vfiprintf_internal_r+0xf18>
1010a45c:	d8001b15 	stw	zero,108(sp)
1010a460:	a2c0010c 	andi	r11,r20,4
1010a464:	58000226 	beq	r11,zero,1010a470 <___vfiprintf_internal_r+0x62c>
1010a468:	8ca7c83a 	sub	r19,r17,r18
1010a46c:	04c2f216 	blt	zero,r19,1010b038 <___vfiprintf_internal_r+0x11f4>
1010a470:	8c80010e 	bge	r17,r18,1010a478 <___vfiprintf_internal_r+0x634>
1010a474:	9023883a 	mov	r17,r18
1010a478:	da802317 	ldw	r10,140(sp)
1010a47c:	5455883a 	add	r10,r10,r17
1010a480:	da802315 	stw	r10,140(sp)
1010a484:	d8001b15 	stw	zero,108(sp)
1010a488:	d811883a 	mov	r8,sp
1010a48c:	003ea206 	br	10109f18 <__alt_data_end+0xfffe9f18>
1010a490:	a5000814 	ori	r20,r20,32
1010a494:	80c00007 	ldb	r3,0(r16)
1010a498:	003ec906 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a49c:	80c00007 	ldb	r3,0(r16)
1010a4a0:	1b030926 	beq	r3,r12,1010b0c8 <___vfiprintf_internal_r+0x1284>
1010a4a4:	a5000414 	ori	r20,r20,16
1010a4a8:	003ec506 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a4ac:	21003fcc 	andi	r4,r4,255
1010a4b0:	20035e1e 	bne	r4,zero,1010b22c <___vfiprintf_internal_r+0x13e8>
1010a4b4:	a080080c 	andi	r2,r20,32
1010a4b8:	1002a526 	beq	r2,zero,1010af50 <___vfiprintf_internal_r+0x110c>
1010a4bc:	da802217 	ldw	r10,136(sp)
1010a4c0:	50800017 	ldw	r2,0(r10)
1010a4c4:	da802317 	ldw	r10,140(sp)
1010a4c8:	5007d7fa 	srai	r3,r10,31
1010a4cc:	da802217 	ldw	r10,136(sp)
1010a4d0:	10c00115 	stw	r3,4(r2)
1010a4d4:	52800104 	addi	r10,r10,4
1010a4d8:	da802215 	stw	r10,136(sp)
1010a4dc:	da802317 	ldw	r10,140(sp)
1010a4e0:	12800015 	stw	r10,0(r2)
1010a4e4:	003e8c06 	br	10109f18 <__alt_data_end+0xfffe9f18>
1010a4e8:	21003fcc 	andi	r4,r4,255
1010a4ec:	2003511e 	bne	r4,zero,1010b234 <___vfiprintf_internal_r+0x13f0>
1010a4f0:	a080080c 	andi	r2,r20,32
1010a4f4:	1000a126 	beq	r2,zero,1010a77c <___vfiprintf_internal_r+0x938>
1010a4f8:	da802217 	ldw	r10,136(sp)
1010a4fc:	d8001d85 	stb	zero,118(sp)
1010a500:	50800204 	addi	r2,r10,8
1010a504:	54800017 	ldw	r18,0(r10)
1010a508:	54c00117 	ldw	r19,4(r10)
1010a50c:	4802b416 	blt	r9,zero,1010afe0 <___vfiprintf_internal_r+0x119c>
1010a510:	013fdfc4 	movi	r4,-129
1010a514:	94c6b03a 	or	r3,r18,r19
1010a518:	d8802215 	stw	r2,136(sp)
1010a51c:	a128703a 	and	r20,r20,r4
1010a520:	1800a226 	beq	r3,zero,1010a7ac <___vfiprintf_internal_r+0x968>
1010a524:	0039883a 	mov	fp,zero
1010a528:	dd401a04 	addi	r21,sp,104
1010a52c:	9006d0fa 	srli	r3,r18,3
1010a530:	9808977a 	slli	r4,r19,29
1010a534:	9826d0fa 	srli	r19,r19,3
1010a538:	948001cc 	andi	r18,r18,7
1010a53c:	90800c04 	addi	r2,r18,48
1010a540:	ad7fffc4 	addi	r21,r21,-1
1010a544:	20e4b03a 	or	r18,r4,r3
1010a548:	a8800005 	stb	r2,0(r21)
1010a54c:	94c6b03a 	or	r3,r18,r19
1010a550:	183ff61e 	bne	r3,zero,1010a52c <__alt_data_end+0xfffea52c>
1010a554:	a0c0004c 	andi	r3,r20,1
1010a558:	18005926 	beq	r3,zero,1010a6c0 <___vfiprintf_internal_r+0x87c>
1010a55c:	10803fcc 	andi	r2,r2,255
1010a560:	1080201c 	xori	r2,r2,128
1010a564:	10bfe004 	addi	r2,r2,-128
1010a568:	00c00c04 	movi	r3,48
1010a56c:	10c05426 	beq	r2,r3,1010a6c0 <___vfiprintf_internal_r+0x87c>
1010a570:	da801e17 	ldw	r10,120(sp)
1010a574:	a8bfffc4 	addi	r2,r21,-1
1010a578:	a8ffffc5 	stb	r3,-1(r21)
1010a57c:	50a7c83a 	sub	r19,r10,r2
1010a580:	102b883a 	mov	r21,r2
1010a584:	003f2f06 	br	1010a244 <__alt_data_end+0xfffea244>
1010a588:	21003fcc 	andi	r4,r4,255
1010a58c:	2003421e 	bne	r4,zero,1010b298 <___vfiprintf_internal_r+0x1454>
1010a590:	00840474 	movhi	r2,4113
1010a594:	1086a204 	addi	r2,r2,6792
1010a598:	d8802615 	stw	r2,152(sp)
1010a59c:	a080080c 	andi	r2,r20,32
1010a5a0:	1000aa26 	beq	r2,zero,1010a84c <___vfiprintf_internal_r+0xa08>
1010a5a4:	da802217 	ldw	r10,136(sp)
1010a5a8:	54800017 	ldw	r18,0(r10)
1010a5ac:	54c00117 	ldw	r19,4(r10)
1010a5b0:	52800204 	addi	r10,r10,8
1010a5b4:	da802215 	stw	r10,136(sp)
1010a5b8:	a080004c 	andi	r2,r20,1
1010a5bc:	1001d226 	beq	r2,zero,1010ad08 <___vfiprintf_internal_r+0xec4>
1010a5c0:	94c4b03a 	or	r2,r18,r19
1010a5c4:	1002351e 	bne	r2,zero,1010ae9c <___vfiprintf_internal_r+0x1058>
1010a5c8:	d8001d85 	stb	zero,118(sp)
1010a5cc:	48022216 	blt	r9,zero,1010ae58 <___vfiprintf_internal_r+0x1014>
1010a5d0:	00bfdfc4 	movi	r2,-129
1010a5d4:	a0a8703a 	and	r20,r20,r2
1010a5d8:	003f1506 	br	1010a230 <__alt_data_end+0xfffea230>
1010a5dc:	da802217 	ldw	r10,136(sp)
1010a5e0:	04800044 	movi	r18,1
1010a5e4:	d8001d85 	stb	zero,118(sp)
1010a5e8:	50800017 	ldw	r2,0(r10)
1010a5ec:	52800104 	addi	r10,r10,4
1010a5f0:	da802215 	stw	r10,136(sp)
1010a5f4:	d8801005 	stb	r2,64(sp)
1010a5f8:	9027883a 	mov	r19,r18
1010a5fc:	dd401004 	addi	r21,sp,64
1010a600:	0013883a 	mov	r9,zero
1010a604:	003f1706 	br	1010a264 <__alt_data_end+0xfffea264>
1010a608:	21003fcc 	andi	r4,r4,255
1010a60c:	2003201e 	bne	r4,zero,1010b290 <___vfiprintf_internal_r+0x144c>
1010a610:	a080080c 	andi	r2,r20,32
1010a614:	10004b26 	beq	r2,zero,1010a744 <___vfiprintf_internal_r+0x900>
1010a618:	da802217 	ldw	r10,136(sp)
1010a61c:	50800117 	ldw	r2,4(r10)
1010a620:	54800017 	ldw	r18,0(r10)
1010a624:	52800204 	addi	r10,r10,8
1010a628:	da802215 	stw	r10,136(sp)
1010a62c:	1027883a 	mov	r19,r2
1010a630:	10022c16 	blt	r2,zero,1010aee4 <___vfiprintf_internal_r+0x10a0>
1010a634:	df001d83 	ldbu	fp,118(sp)
1010a638:	48007216 	blt	r9,zero,1010a804 <___vfiprintf_internal_r+0x9c0>
1010a63c:	00ffdfc4 	movi	r3,-129
1010a640:	94c4b03a 	or	r2,r18,r19
1010a644:	a0e8703a 	and	r20,r20,r3
1010a648:	1000cc26 	beq	r2,zero,1010a97c <___vfiprintf_internal_r+0xb38>
1010a64c:	98021026 	beq	r19,zero,1010ae90 <___vfiprintf_internal_r+0x104c>
1010a650:	dc402415 	stw	r17,144(sp)
1010a654:	dc002515 	stw	r16,148(sp)
1010a658:	9823883a 	mov	r17,r19
1010a65c:	9021883a 	mov	r16,r18
1010a660:	dd401a04 	addi	r21,sp,104
1010a664:	4825883a 	mov	r18,r9
1010a668:	4027883a 	mov	r19,r8
1010a66c:	8009883a 	mov	r4,r16
1010a670:	880b883a 	mov	r5,r17
1010a674:	01800284 	movi	r6,10
1010a678:	000f883a 	mov	r7,zero
1010a67c:	010befc0 	call	1010befc <__umoddi3>
1010a680:	10800c04 	addi	r2,r2,48
1010a684:	ad7fffc4 	addi	r21,r21,-1
1010a688:	8009883a 	mov	r4,r16
1010a68c:	880b883a 	mov	r5,r17
1010a690:	a8800005 	stb	r2,0(r21)
1010a694:	01800284 	movi	r6,10
1010a698:	000f883a 	mov	r7,zero
1010a69c:	010b9840 	call	1010b984 <__udivdi3>
1010a6a0:	1021883a 	mov	r16,r2
1010a6a4:	10c4b03a 	or	r2,r2,r3
1010a6a8:	1823883a 	mov	r17,r3
1010a6ac:	103fef1e 	bne	r2,zero,1010a66c <__alt_data_end+0xfffea66c>
1010a6b0:	dc402417 	ldw	r17,144(sp)
1010a6b4:	dc002517 	ldw	r16,148(sp)
1010a6b8:	9013883a 	mov	r9,r18
1010a6bc:	9811883a 	mov	r8,r19
1010a6c0:	da801e17 	ldw	r10,120(sp)
1010a6c4:	5567c83a 	sub	r19,r10,r21
1010a6c8:	003ede06 	br	1010a244 <__alt_data_end+0xfffea244>
1010a6cc:	38803fcc 	andi	r2,r7,255
1010a6d0:	1080201c 	xori	r2,r2,128
1010a6d4:	10bfe004 	addi	r2,r2,-128
1010a6d8:	1002371e 	bne	r2,zero,1010afb8 <___vfiprintf_internal_r+0x1174>
1010a6dc:	01000044 	movi	r4,1
1010a6e0:	01c00804 	movi	r7,32
1010a6e4:	80c00007 	ldb	r3,0(r16)
1010a6e8:	003e3506 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a6ec:	a5000054 	ori	r20,r20,1
1010a6f0:	80c00007 	ldb	r3,0(r16)
1010a6f4:	003e3206 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a6f8:	a5002014 	ori	r20,r20,128
1010a6fc:	80c00007 	ldb	r3,0(r16)
1010a700:	003e2f06 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a704:	8015883a 	mov	r10,r16
1010a708:	0023883a 	mov	r17,zero
1010a70c:	18bff404 	addi	r2,r3,-48
1010a710:	50c00007 	ldb	r3,0(r10)
1010a714:	8c4002a4 	muli	r17,r17,10
1010a718:	84000044 	addi	r16,r16,1
1010a71c:	8015883a 	mov	r10,r16
1010a720:	1463883a 	add	r17,r2,r17
1010a724:	18bff404 	addi	r2,r3,-48
1010a728:	30bff92e 	bgeu	r6,r2,1010a710 <__alt_data_end+0xfffea710>
1010a72c:	003e2506 	br	10109fc4 <__alt_data_end+0xfffe9fc4>
1010a730:	21003fcc 	andi	r4,r4,255
1010a734:	2002d41e 	bne	r4,zero,1010b288 <___vfiprintf_internal_r+0x1444>
1010a738:	a5000414 	ori	r20,r20,16
1010a73c:	a080080c 	andi	r2,r20,32
1010a740:	103fb51e 	bne	r2,zero,1010a618 <__alt_data_end+0xfffea618>
1010a744:	a080040c 	andi	r2,r20,16
1010a748:	1001f826 	beq	r2,zero,1010af2c <___vfiprintf_internal_r+0x10e8>
1010a74c:	da802217 	ldw	r10,136(sp)
1010a750:	54800017 	ldw	r18,0(r10)
1010a754:	52800104 	addi	r10,r10,4
1010a758:	da802215 	stw	r10,136(sp)
1010a75c:	9027d7fa 	srai	r19,r18,31
1010a760:	9805883a 	mov	r2,r19
1010a764:	003fb206 	br	1010a630 <__alt_data_end+0xfffea630>
1010a768:	21003fcc 	andi	r4,r4,255
1010a76c:	2002c41e 	bne	r4,zero,1010b280 <___vfiprintf_internal_r+0x143c>
1010a770:	a5000414 	ori	r20,r20,16
1010a774:	a080080c 	andi	r2,r20,32
1010a778:	103f5f1e 	bne	r2,zero,1010a4f8 <__alt_data_end+0xfffea4f8>
1010a77c:	a080040c 	andi	r2,r20,16
1010a780:	10020f26 	beq	r2,zero,1010afc0 <___vfiprintf_internal_r+0x117c>
1010a784:	da802217 	ldw	r10,136(sp)
1010a788:	d8001d85 	stb	zero,118(sp)
1010a78c:	0027883a 	mov	r19,zero
1010a790:	50800104 	addi	r2,r10,4
1010a794:	54800017 	ldw	r18,0(r10)
1010a798:	48021116 	blt	r9,zero,1010afe0 <___vfiprintf_internal_r+0x119c>
1010a79c:	00ffdfc4 	movi	r3,-129
1010a7a0:	d8802215 	stw	r2,136(sp)
1010a7a4:	a0e8703a 	and	r20,r20,r3
1010a7a8:	903f5e1e 	bne	r18,zero,1010a524 <__alt_data_end+0xfffea524>
1010a7ac:	0039883a 	mov	fp,zero
1010a7b0:	4802a626 	beq	r9,zero,1010b24c <___vfiprintf_internal_r+0x1408>
1010a7b4:	0025883a 	mov	r18,zero
1010a7b8:	0027883a 	mov	r19,zero
1010a7bc:	003f5a06 	br	1010a528 <__alt_data_end+0xfffea528>
1010a7c0:	21003fcc 	andi	r4,r4,255
1010a7c4:	20029f1e 	bne	r4,zero,1010b244 <___vfiprintf_internal_r+0x1400>
1010a7c8:	a5000414 	ori	r20,r20,16
1010a7cc:	a080080c 	andi	r2,r20,32
1010a7d0:	10005e1e 	bne	r2,zero,1010a94c <___vfiprintf_internal_r+0xb08>
1010a7d4:	a080040c 	andi	r2,r20,16
1010a7d8:	1001a21e 	bne	r2,zero,1010ae64 <___vfiprintf_internal_r+0x1020>
1010a7dc:	a080100c 	andi	r2,r20,64
1010a7e0:	d8001d85 	stb	zero,118(sp)
1010a7e4:	da802217 	ldw	r10,136(sp)
1010a7e8:	1002231e 	bne	r2,zero,1010b078 <___vfiprintf_internal_r+0x1234>
1010a7ec:	50800104 	addi	r2,r10,4
1010a7f0:	54800017 	ldw	r18,0(r10)
1010a7f4:	0027883a 	mov	r19,zero
1010a7f8:	4801a00e 	bge	r9,zero,1010ae7c <___vfiprintf_internal_r+0x1038>
1010a7fc:	d8802215 	stw	r2,136(sp)
1010a800:	0039883a 	mov	fp,zero
1010a804:	94c4b03a 	or	r2,r18,r19
1010a808:	103f901e 	bne	r2,zero,1010a64c <__alt_data_end+0xfffea64c>
1010a80c:	00800044 	movi	r2,1
1010a810:	10803fcc 	andi	r2,r2,255
1010a814:	00c00044 	movi	r3,1
1010a818:	10c05926 	beq	r2,r3,1010a980 <___vfiprintf_internal_r+0xb3c>
1010a81c:	00c00084 	movi	r3,2
1010a820:	10ffe41e 	bne	r2,r3,1010a7b4 <__alt_data_end+0xfffea7b4>
1010a824:	0025883a 	mov	r18,zero
1010a828:	0027883a 	mov	r19,zero
1010a82c:	00013d06 	br	1010ad24 <___vfiprintf_internal_r+0xee0>
1010a830:	21003fcc 	andi	r4,r4,255
1010a834:	2002811e 	bne	r4,zero,1010b23c <___vfiprintf_internal_r+0x13f8>
1010a838:	00840474 	movhi	r2,4113
1010a83c:	10869d04 	addi	r2,r2,6772
1010a840:	d8802615 	stw	r2,152(sp)
1010a844:	a080080c 	andi	r2,r20,32
1010a848:	103f561e 	bne	r2,zero,1010a5a4 <__alt_data_end+0xfffea5a4>
1010a84c:	a080040c 	andi	r2,r20,16
1010a850:	1001d126 	beq	r2,zero,1010af98 <___vfiprintf_internal_r+0x1154>
1010a854:	da802217 	ldw	r10,136(sp)
1010a858:	0027883a 	mov	r19,zero
1010a85c:	54800017 	ldw	r18,0(r10)
1010a860:	52800104 	addi	r10,r10,4
1010a864:	da802215 	stw	r10,136(sp)
1010a868:	003f5306 	br	1010a5b8 <__alt_data_end+0xfffea5b8>
1010a86c:	da802217 	ldw	r10,136(sp)
1010a870:	d8001d85 	stb	zero,118(sp)
1010a874:	55400017 	ldw	r21,0(r10)
1010a878:	50c00104 	addi	r3,r10,4
1010a87c:	a8024226 	beq	r21,zero,1010b188 <___vfiprintf_internal_r+0x1344>
1010a880:	48021816 	blt	r9,zero,1010b0e4 <___vfiprintf_internal_r+0x12a0>
1010a884:	480d883a 	mov	r6,r9
1010a888:	000b883a 	mov	r5,zero
1010a88c:	a809883a 	mov	r4,r21
1010a890:	d8c02a15 	stw	r3,168(sp)
1010a894:	da002b15 	stw	r8,172(sp)
1010a898:	da402c15 	stw	r9,176(sp)
1010a89c:	01082980 	call	10108298 <memchr>
1010a8a0:	d8c02a17 	ldw	r3,168(sp)
1010a8a4:	da002b17 	ldw	r8,172(sp)
1010a8a8:	da402c17 	ldw	r9,176(sp)
1010a8ac:	10024826 	beq	r2,zero,1010b1d0 <___vfiprintf_internal_r+0x138c>
1010a8b0:	1567c83a 	sub	r19,r2,r21
1010a8b4:	df001d83 	ldbu	fp,118(sp)
1010a8b8:	d8c02215 	stw	r3,136(sp)
1010a8bc:	0013883a 	mov	r9,zero
1010a8c0:	003e6006 	br	1010a244 <__alt_data_end+0xfffea244>
1010a8c4:	21003fcc 	andi	r4,r4,255
1010a8c8:	203fc026 	beq	r4,zero,1010a7cc <__alt_data_end+0xfffea7cc>
1010a8cc:	d9c01d85 	stb	r7,118(sp)
1010a8d0:	003fbe06 	br	1010a7cc <__alt_data_end+0xfffea7cc>
1010a8d4:	da802217 	ldw	r10,136(sp)
1010a8d8:	54400017 	ldw	r17,0(r10)
1010a8dc:	50800104 	addi	r2,r10,4
1010a8e0:	883e3b16 	blt	r17,zero,1010a1d0 <__alt_data_end+0xfffea1d0>
1010a8e4:	d8802215 	stw	r2,136(sp)
1010a8e8:	80c00007 	ldb	r3,0(r16)
1010a8ec:	003db406 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a8f0:	01000044 	movi	r4,1
1010a8f4:	01c00ac4 	movi	r7,43
1010a8f8:	80c00007 	ldb	r3,0(r16)
1010a8fc:	003db006 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a900:	80c00007 	ldb	r3,0(r16)
1010a904:	82800044 	addi	r10,r16,1
1010a908:	1b423c26 	beq	r3,r13,1010b1fc <___vfiprintf_internal_r+0x13b8>
1010a90c:	18bff404 	addi	r2,r3,-48
1010a910:	0013883a 	mov	r9,zero
1010a914:	30822b36 	bltu	r6,r2,1010b1c4 <___vfiprintf_internal_r+0x1380>
1010a918:	50c00007 	ldb	r3,0(r10)
1010a91c:	4a4002a4 	muli	r9,r9,10
1010a920:	54000044 	addi	r16,r10,1
1010a924:	8015883a 	mov	r10,r16
1010a928:	4893883a 	add	r9,r9,r2
1010a92c:	18bff404 	addi	r2,r3,-48
1010a930:	30bff92e 	bgeu	r6,r2,1010a918 <__alt_data_end+0xfffea918>
1010a934:	483da30e 	bge	r9,zero,10109fc4 <__alt_data_end+0xfffe9fc4>
1010a938:	027fffc4 	movi	r9,-1
1010a93c:	003da106 	br	10109fc4 <__alt_data_end+0xfffe9fc4>
1010a940:	a5001014 	ori	r20,r20,64
1010a944:	80c00007 	ldb	r3,0(r16)
1010a948:	003d9d06 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a94c:	da802217 	ldw	r10,136(sp)
1010a950:	d8001d85 	stb	zero,118(sp)
1010a954:	50c00204 	addi	r3,r10,8
1010a958:	54800017 	ldw	r18,0(r10)
1010a95c:	54c00117 	ldw	r19,4(r10)
1010a960:	4801ca16 	blt	r9,zero,1010b08c <___vfiprintf_internal_r+0x1248>
1010a964:	013fdfc4 	movi	r4,-129
1010a968:	94c4b03a 	or	r2,r18,r19
1010a96c:	d8c02215 	stw	r3,136(sp)
1010a970:	a128703a 	and	r20,r20,r4
1010a974:	0039883a 	mov	fp,zero
1010a978:	103f341e 	bne	r2,zero,1010a64c <__alt_data_end+0xfffea64c>
1010a97c:	483e2e26 	beq	r9,zero,1010a238 <__alt_data_end+0xfffea238>
1010a980:	0025883a 	mov	r18,zero
1010a984:	94800c04 	addi	r18,r18,48
1010a988:	dc8019c5 	stb	r18,103(sp)
1010a98c:	dcc02717 	ldw	r19,156(sp)
1010a990:	dd4019c4 	addi	r21,sp,103
1010a994:	003e2b06 	br	1010a244 <__alt_data_end+0xfffea244>
1010a998:	21003fcc 	andi	r4,r4,255
1010a99c:	2002361e 	bne	r4,zero,1010b278 <___vfiprintf_internal_r+0x1434>
1010a9a0:	1801c126 	beq	r3,zero,1010b0a8 <___vfiprintf_internal_r+0x1264>
1010a9a4:	04800044 	movi	r18,1
1010a9a8:	d8c01005 	stb	r3,64(sp)
1010a9ac:	d8001d85 	stb	zero,118(sp)
1010a9b0:	9027883a 	mov	r19,r18
1010a9b4:	dd401004 	addi	r21,sp,64
1010a9b8:	003f1106 	br	1010a600 <__alt_data_end+0xfffea600>
1010a9bc:	d9402117 	ldw	r5,132(sp)
1010a9c0:	d9002017 	ldw	r4,128(sp)
1010a9c4:	d9801a04 	addi	r6,sp,104
1010a9c8:	d9c02b15 	stw	r7,172(sp)
1010a9cc:	dbc02a15 	stw	r15,168(sp)
1010a9d0:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010a9d4:	d9c02b17 	ldw	r7,172(sp)
1010a9d8:	dbc02a17 	ldw	r15,168(sp)
1010a9dc:	10006d1e 	bne	r2,zero,1010ab94 <___vfiprintf_internal_r+0xd50>
1010a9e0:	d9801b17 	ldw	r6,108(sp)
1010a9e4:	d8801c17 	ldw	r2,112(sp)
1010a9e8:	d811883a 	mov	r8,sp
1010a9ec:	31400044 	addi	r5,r6,1
1010a9f0:	003e3306 	br	1010a2c0 <__alt_data_end+0xfffea2c0>
1010a9f4:	d9401b17 	ldw	r5,108(sp)
1010a9f8:	d8801c17 	ldw	r2,112(sp)
1010a9fc:	29000044 	addi	r4,r5,1
1010aa00:	d8c01d87 	ldb	r3,118(sp)
1010aa04:	183e4d26 	beq	r3,zero,1010a33c <__alt_data_end+0xfffea33c>
1010aa08:	00c00044 	movi	r3,1
1010aa0c:	d9401d84 	addi	r5,sp,118
1010aa10:	10c5883a 	add	r2,r2,r3
1010aa14:	41400015 	stw	r5,0(r8)
1010aa18:	40c00115 	stw	r3,4(r8)
1010aa1c:	d8801c15 	stw	r2,112(sp)
1010aa20:	d9001b15 	stw	r4,108(sp)
1010aa24:	014001c4 	movi	r5,7
1010aa28:	2900a90e 	bge	r5,r4,1010acd0 <___vfiprintf_internal_r+0xe8c>
1010aa2c:	1000da1e 	bne	r2,zero,1010ad98 <___vfiprintf_internal_r+0xf54>
1010aa30:	7000ab1e 	bne	r14,zero,1010ace0 <___vfiprintf_internal_r+0xe9c>
1010aa34:	000b883a 	mov	r5,zero
1010aa38:	1809883a 	mov	r4,r3
1010aa3c:	d811883a 	mov	r8,sp
1010aa40:	00c02004 	movi	r3,128
1010aa44:	e0fe4d26 	beq	fp,r3,1010a37c <__alt_data_end+0xfffea37c>
1010aa48:	4cf9c83a 	sub	fp,r9,r19
1010aa4c:	073e7b0e 	bge	zero,fp,1010a43c <__alt_data_end+0xfffea43c>
1010aa50:	01c00404 	movi	r7,16
1010aa54:	3f01900e 	bge	r7,fp,1010b098 <___vfiprintf_internal_r+0x1254>
1010aa58:	00c40474 	movhi	r3,4113
1010aa5c:	18c70204 	addi	r3,r3,7176
1010aa60:	d8c02415 	stw	r3,144(sp)
1010aa64:	034001c4 	movi	r13,7
1010aa68:	00000506 	br	1010aa80 <___vfiprintf_internal_r+0xc3c>
1010aa6c:	29000084 	addi	r4,r5,2
1010aa70:	42000204 	addi	r8,r8,8
1010aa74:	180b883a 	mov	r5,r3
1010aa78:	e73ffc04 	addi	fp,fp,-16
1010aa7c:	3f000d0e 	bge	r7,fp,1010aab4 <___vfiprintf_internal_r+0xc70>
1010aa80:	10800404 	addi	r2,r2,16
1010aa84:	28c00044 	addi	r3,r5,1
1010aa88:	45c00015 	stw	r23,0(r8)
1010aa8c:	41c00115 	stw	r7,4(r8)
1010aa90:	d8801c15 	stw	r2,112(sp)
1010aa94:	d8c01b15 	stw	r3,108(sp)
1010aa98:	68fff40e 	bge	r13,r3,1010aa6c <__alt_data_end+0xfffeaa6c>
1010aa9c:	1000101e 	bne	r2,zero,1010aae0 <___vfiprintf_internal_r+0xc9c>
1010aaa0:	e73ffc04 	addi	fp,fp,-16
1010aaa4:	01000044 	movi	r4,1
1010aaa8:	000b883a 	mov	r5,zero
1010aaac:	d811883a 	mov	r8,sp
1010aab0:	3f3ff316 	blt	r7,fp,1010aa80 <__alt_data_end+0xfffeaa80>
1010aab4:	da802417 	ldw	r10,144(sp)
1010aab8:	1705883a 	add	r2,r2,fp
1010aabc:	47000115 	stw	fp,4(r8)
1010aac0:	42800015 	stw	r10,0(r8)
1010aac4:	d8801c15 	stw	r2,112(sp)
1010aac8:	d9001b15 	stw	r4,108(sp)
1010aacc:	00c001c4 	movi	r3,7
1010aad0:	19003616 	blt	r3,r4,1010abac <___vfiprintf_internal_r+0xd68>
1010aad4:	42000204 	addi	r8,r8,8
1010aad8:	21000044 	addi	r4,r4,1
1010aadc:	003e5706 	br	1010a43c <__alt_data_end+0xfffea43c>
1010aae0:	d9402117 	ldw	r5,132(sp)
1010aae4:	d9002017 	ldw	r4,128(sp)
1010aae8:	d9801a04 	addi	r6,sp,104
1010aaec:	d9c02b15 	stw	r7,172(sp)
1010aaf0:	db402a15 	stw	r13,168(sp)
1010aaf4:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010aaf8:	d9c02b17 	ldw	r7,172(sp)
1010aafc:	db402a17 	ldw	r13,168(sp)
1010ab00:	1000241e 	bne	r2,zero,1010ab94 <___vfiprintf_internal_r+0xd50>
1010ab04:	d9401b17 	ldw	r5,108(sp)
1010ab08:	d8801c17 	ldw	r2,112(sp)
1010ab0c:	d811883a 	mov	r8,sp
1010ab10:	29000044 	addi	r4,r5,1
1010ab14:	003fd806 	br	1010aa78 <__alt_data_end+0xfffeaa78>
1010ab18:	d9401b17 	ldw	r5,108(sp)
1010ab1c:	00c40474 	movhi	r3,4113
1010ab20:	18c70604 	addi	r3,r3,7192
1010ab24:	d8c02415 	stw	r3,144(sp)
1010ab28:	29400044 	addi	r5,r5,1
1010ab2c:	d8c02417 	ldw	r3,144(sp)
1010ab30:	14c5883a 	add	r2,r2,r19
1010ab34:	44c00115 	stw	r19,4(r8)
1010ab38:	40c00015 	stw	r3,0(r8)
1010ab3c:	d8801c15 	stw	r2,112(sp)
1010ab40:	d9401b15 	stw	r5,108(sp)
1010ab44:	00c001c4 	movi	r3,7
1010ab48:	1940070e 	bge	r3,r5,1010ab68 <___vfiprintf_internal_r+0xd24>
1010ab4c:	103e4826 	beq	r2,zero,1010a470 <__alt_data_end+0xfffea470>
1010ab50:	d9402117 	ldw	r5,132(sp)
1010ab54:	d9002017 	ldw	r4,128(sp)
1010ab58:	d9801a04 	addi	r6,sp,104
1010ab5c:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ab60:	10000c1e 	bne	r2,zero,1010ab94 <___vfiprintf_internal_r+0xd50>
1010ab64:	d8801c17 	ldw	r2,112(sp)
1010ab68:	8c80010e 	bge	r17,r18,1010ab70 <___vfiprintf_internal_r+0xd2c>
1010ab6c:	9023883a 	mov	r17,r18
1010ab70:	da802317 	ldw	r10,140(sp)
1010ab74:	5455883a 	add	r10,r10,r17
1010ab78:	da802315 	stw	r10,140(sp)
1010ab7c:	103e4126 	beq	r2,zero,1010a484 <__alt_data_end+0xfffea484>
1010ab80:	d9402117 	ldw	r5,132(sp)
1010ab84:	d9002017 	ldw	r4,128(sp)
1010ab88:	d9801a04 	addi	r6,sp,104
1010ab8c:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ab90:	103e3c26 	beq	r2,zero,1010a484 <__alt_data_end+0xfffea484>
1010ab94:	dd002117 	ldw	r20,132(sp)
1010ab98:	a080030b 	ldhu	r2,12(r20)
1010ab9c:	1080100c 	andi	r2,r2,64
1010aba0:	1001231e 	bne	r2,zero,1010b030 <___vfiprintf_internal_r+0x11ec>
1010aba4:	d8802317 	ldw	r2,140(sp)
1010aba8:	003d7b06 	br	1010a198 <__alt_data_end+0xfffea198>
1010abac:	1000991e 	bne	r2,zero,1010ae14 <___vfiprintf_internal_r+0xfd0>
1010abb0:	00c00044 	movi	r3,1
1010abb4:	9805883a 	mov	r2,r19
1010abb8:	dd400015 	stw	r21,0(sp)
1010abbc:	dcc00115 	stw	r19,4(sp)
1010abc0:	dcc01c15 	stw	r19,112(sp)
1010abc4:	d8c01b15 	stw	r3,108(sp)
1010abc8:	d811883a 	mov	r8,sp
1010abcc:	42000204 	addi	r8,r8,8
1010abd0:	a2c0010c 	andi	r11,r20,4
1010abd4:	583fe426 	beq	r11,zero,1010ab68 <__alt_data_end+0xfffeab68>
1010abd8:	8ca7c83a 	sub	r19,r17,r18
1010abdc:	04ffe20e 	bge	zero,r19,1010ab68 <__alt_data_end+0xfffeab68>
1010abe0:	01c00404 	movi	r7,16
1010abe4:	3cffcc0e 	bge	r7,r19,1010ab18 <__alt_data_end+0xfffeab18>
1010abe8:	02840474 	movhi	r10,4113
1010abec:	52870604 	addi	r10,r10,7192
1010abf0:	d9001b17 	ldw	r4,108(sp)
1010abf4:	da802415 	stw	r10,144(sp)
1010abf8:	382b883a 	mov	r21,r7
1010abfc:	050001c4 	movi	r20,7
1010ac00:	df002017 	ldw	fp,128(sp)
1010ac04:	00000506 	br	1010ac1c <___vfiprintf_internal_r+0xdd8>
1010ac08:	21400084 	addi	r5,r4,2
1010ac0c:	42000204 	addi	r8,r8,8
1010ac10:	1809883a 	mov	r4,r3
1010ac14:	9cfffc04 	addi	r19,r19,-16
1010ac18:	acffc40e 	bge	r21,r19,1010ab2c <__alt_data_end+0xfffeab2c>
1010ac1c:	10800404 	addi	r2,r2,16
1010ac20:	20c00044 	addi	r3,r4,1
1010ac24:	45800015 	stw	r22,0(r8)
1010ac28:	45400115 	stw	r21,4(r8)
1010ac2c:	d8801c15 	stw	r2,112(sp)
1010ac30:	d8c01b15 	stw	r3,108(sp)
1010ac34:	a0fff40e 	bge	r20,r3,1010ac08 <__alt_data_end+0xfffeac08>
1010ac38:	1000041e 	bne	r2,zero,1010ac4c <___vfiprintf_internal_r+0xe08>
1010ac3c:	01400044 	movi	r5,1
1010ac40:	0009883a 	mov	r4,zero
1010ac44:	d811883a 	mov	r8,sp
1010ac48:	003ff206 	br	1010ac14 <__alt_data_end+0xfffeac14>
1010ac4c:	d9402117 	ldw	r5,132(sp)
1010ac50:	d9801a04 	addi	r6,sp,104
1010ac54:	e009883a 	mov	r4,fp
1010ac58:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ac5c:	103fcd1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010ac60:	d9001b17 	ldw	r4,108(sp)
1010ac64:	d8801c17 	ldw	r2,112(sp)
1010ac68:	d811883a 	mov	r8,sp
1010ac6c:	21400044 	addi	r5,r4,1
1010ac70:	003fe806 	br	1010ac14 <__alt_data_end+0xfffeac14>
1010ac74:	d9402117 	ldw	r5,132(sp)
1010ac78:	d9002017 	ldw	r4,128(sp)
1010ac7c:	d9801a04 	addi	r6,sp,104
1010ac80:	d9c02b15 	stw	r7,172(sp)
1010ac84:	db402a15 	stw	r13,168(sp)
1010ac88:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ac8c:	d9c02b17 	ldw	r7,172(sp)
1010ac90:	db402a17 	ldw	r13,168(sp)
1010ac94:	103fbf1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010ac98:	d9401b17 	ldw	r5,108(sp)
1010ac9c:	d8801c17 	ldw	r2,112(sp)
1010aca0:	d811883a 	mov	r8,sp
1010aca4:	29800044 	addi	r6,r5,1
1010aca8:	003dc406 	br	1010a3bc <__alt_data_end+0xfffea3bc>
1010acac:	1000d21e 	bne	r2,zero,1010aff8 <___vfiprintf_internal_r+0x11b4>
1010acb0:	d8c01d87 	ldb	r3,118(sp)
1010acb4:	18009526 	beq	r3,zero,1010af0c <___vfiprintf_internal_r+0x10c8>
1010acb8:	00800044 	movi	r2,1
1010acbc:	d8c01d84 	addi	r3,sp,118
1010acc0:	1009883a 	mov	r4,r2
1010acc4:	d8c00015 	stw	r3,0(sp)
1010acc8:	d8800115 	stw	r2,4(sp)
1010accc:	d811883a 	mov	r8,sp
1010acd0:	200b883a 	mov	r5,r4
1010acd4:	42000204 	addi	r8,r8,8
1010acd8:	21000044 	addi	r4,r4,1
1010acdc:	003d9706 	br	1010a33c <__alt_data_end+0xfffea33c>
1010ace0:	d9001d04 	addi	r4,sp,116
1010ace4:	00800084 	movi	r2,2
1010ace8:	d9000015 	stw	r4,0(sp)
1010acec:	d8800115 	stw	r2,4(sp)
1010acf0:	1809883a 	mov	r4,r3
1010acf4:	d811883a 	mov	r8,sp
1010acf8:	200b883a 	mov	r5,r4
1010acfc:	42000204 	addi	r8,r8,8
1010ad00:	21000044 	addi	r4,r4,1
1010ad04:	003f4e06 	br	1010aa40 <__alt_data_end+0xfffeaa40>
1010ad08:	d8001d85 	stb	zero,118(sp)
1010ad0c:	48005016 	blt	r9,zero,1010ae50 <___vfiprintf_internal_r+0x100c>
1010ad10:	00ffdfc4 	movi	r3,-129
1010ad14:	94c4b03a 	or	r2,r18,r19
1010ad18:	a0e8703a 	and	r20,r20,r3
1010ad1c:	103d4426 	beq	r2,zero,1010a230 <__alt_data_end+0xfffea230>
1010ad20:	0039883a 	mov	fp,zero
1010ad24:	d9002617 	ldw	r4,152(sp)
1010ad28:	dd401a04 	addi	r21,sp,104
1010ad2c:	908003cc 	andi	r2,r18,15
1010ad30:	9806973a 	slli	r3,r19,28
1010ad34:	2085883a 	add	r2,r4,r2
1010ad38:	9024d13a 	srli	r18,r18,4
1010ad3c:	10800003 	ldbu	r2,0(r2)
1010ad40:	9826d13a 	srli	r19,r19,4
1010ad44:	ad7fffc4 	addi	r21,r21,-1
1010ad48:	1ca4b03a 	or	r18,r3,r18
1010ad4c:	a8800005 	stb	r2,0(r21)
1010ad50:	94c4b03a 	or	r2,r18,r19
1010ad54:	103ff51e 	bne	r2,zero,1010ad2c <__alt_data_end+0xfffead2c>
1010ad58:	003e5906 	br	1010a6c0 <__alt_data_end+0xfffea6c0>
1010ad5c:	d9402117 	ldw	r5,132(sp)
1010ad60:	d9002017 	ldw	r4,128(sp)
1010ad64:	d9801a04 	addi	r6,sp,104
1010ad68:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ad6c:	103f891e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010ad70:	d8801c17 	ldw	r2,112(sp)
1010ad74:	d811883a 	mov	r8,sp
1010ad78:	003f9506 	br	1010abd0 <__alt_data_end+0xfffeabd0>
1010ad7c:	d9402117 	ldw	r5,132(sp)
1010ad80:	d9002017 	ldw	r4,128(sp)
1010ad84:	d9801a04 	addi	r6,sp,104
1010ad88:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ad8c:	103f811e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010ad90:	d811883a 	mov	r8,sp
1010ad94:	003ced06 	br	1010a14c <__alt_data_end+0xfffea14c>
1010ad98:	d9402117 	ldw	r5,132(sp)
1010ad9c:	d9002017 	ldw	r4,128(sp)
1010ada0:	d9801a04 	addi	r6,sp,104
1010ada4:	da402c15 	stw	r9,176(sp)
1010ada8:	db802a15 	stw	r14,168(sp)
1010adac:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010adb0:	da402c17 	ldw	r9,176(sp)
1010adb4:	db802a17 	ldw	r14,168(sp)
1010adb8:	103f761e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010adbc:	d9401b17 	ldw	r5,108(sp)
1010adc0:	d8801c17 	ldw	r2,112(sp)
1010adc4:	d811883a 	mov	r8,sp
1010adc8:	29000044 	addi	r4,r5,1
1010adcc:	003d5b06 	br	1010a33c <__alt_data_end+0xfffea33c>
1010add0:	d9402117 	ldw	r5,132(sp)
1010add4:	d9002017 	ldw	r4,128(sp)
1010add8:	d9801a04 	addi	r6,sp,104
1010addc:	da402c15 	stw	r9,176(sp)
1010ade0:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ade4:	da402c17 	ldw	r9,176(sp)
1010ade8:	103f6a1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010adec:	d9401b17 	ldw	r5,108(sp)
1010adf0:	d8801c17 	ldw	r2,112(sp)
1010adf4:	d811883a 	mov	r8,sp
1010adf8:	29000044 	addi	r4,r5,1
1010adfc:	003f1006 	br	1010aa40 <__alt_data_end+0xfffeaa40>
1010ae00:	1000c31e 	bne	r2,zero,1010b110 <___vfiprintf_internal_r+0x12cc>
1010ae04:	01000044 	movi	r4,1
1010ae08:	000b883a 	mov	r5,zero
1010ae0c:	d811883a 	mov	r8,sp
1010ae10:	003f0d06 	br	1010aa48 <__alt_data_end+0xfffeaa48>
1010ae14:	d9402117 	ldw	r5,132(sp)
1010ae18:	d9002017 	ldw	r4,128(sp)
1010ae1c:	d9801a04 	addi	r6,sp,104
1010ae20:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010ae24:	103f5b1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010ae28:	d9001b17 	ldw	r4,108(sp)
1010ae2c:	d8801c17 	ldw	r2,112(sp)
1010ae30:	d811883a 	mov	r8,sp
1010ae34:	21000044 	addi	r4,r4,1
1010ae38:	003d8006 	br	1010a43c <__alt_data_end+0xfffea43c>
1010ae3c:	01040474 	movhi	r4,4113
1010ae40:	2106a204 	addi	r4,r4,6792
1010ae44:	d9002615 	stw	r4,152(sp)
1010ae48:	d8c02215 	stw	r3,136(sp)
1010ae4c:	1029883a 	mov	r20,r2
1010ae50:	94c4b03a 	or	r2,r18,r19
1010ae54:	103fb21e 	bne	r2,zero,1010ad20 <__alt_data_end+0xfffead20>
1010ae58:	0039883a 	mov	fp,zero
1010ae5c:	00800084 	movi	r2,2
1010ae60:	003e6b06 	br	1010a810 <__alt_data_end+0xfffea810>
1010ae64:	da802217 	ldw	r10,136(sp)
1010ae68:	d8001d85 	stb	zero,118(sp)
1010ae6c:	0027883a 	mov	r19,zero
1010ae70:	50800104 	addi	r2,r10,4
1010ae74:	54800017 	ldw	r18,0(r10)
1010ae78:	483e6016 	blt	r9,zero,1010a7fc <__alt_data_end+0xfffea7fc>
1010ae7c:	00ffdfc4 	movi	r3,-129
1010ae80:	d8802215 	stw	r2,136(sp)
1010ae84:	a0e8703a 	and	r20,r20,r3
1010ae88:	0039883a 	mov	fp,zero
1010ae8c:	903ebb26 	beq	r18,zero,1010a97c <__alt_data_end+0xfffea97c>
1010ae90:	00800244 	movi	r2,9
1010ae94:	14bdee36 	bltu	r2,r18,1010a650 <__alt_data_end+0xfffea650>
1010ae98:	003eba06 	br	1010a984 <__alt_data_end+0xfffea984>
1010ae9c:	00800c04 	movi	r2,48
1010aea0:	d8c01d45 	stb	r3,117(sp)
1010aea4:	d8801d05 	stb	r2,116(sp)
1010aea8:	d8001d85 	stb	zero,118(sp)
1010aeac:	a0c00094 	ori	r3,r20,2
1010aeb0:	4800a916 	blt	r9,zero,1010b158 <___vfiprintf_internal_r+0x1314>
1010aeb4:	00bfdfc4 	movi	r2,-129
1010aeb8:	a096703a 	and	r11,r20,r2
1010aebc:	5d000094 	ori	r20,r11,2
1010aec0:	0039883a 	mov	fp,zero
1010aec4:	003f9706 	br	1010ad24 <__alt_data_end+0xfffead24>
1010aec8:	8025883a 	mov	r18,r16
1010aecc:	003c2e06 	br	10109f88 <__alt_data_end+0xfffe9f88>
1010aed0:	00840474 	movhi	r2,4113
1010aed4:	1086a204 	addi	r2,r2,6792
1010aed8:	0039883a 	mov	fp,zero
1010aedc:	d8802615 	stw	r2,152(sp)
1010aee0:	003f9006 	br	1010ad24 <__alt_data_end+0xfffead24>
1010aee4:	04a5c83a 	sub	r18,zero,r18
1010aee8:	07000b44 	movi	fp,45
1010aeec:	9004c03a 	cmpne	r2,r18,zero
1010aef0:	04e7c83a 	sub	r19,zero,r19
1010aef4:	df001d85 	stb	fp,118(sp)
1010aef8:	98a7c83a 	sub	r19,r19,r2
1010aefc:	48009f16 	blt	r9,zero,1010b17c <___vfiprintf_internal_r+0x1338>
1010af00:	00bfdfc4 	movi	r2,-129
1010af04:	a0a8703a 	and	r20,r20,r2
1010af08:	003dd006 	br	1010a64c <__alt_data_end+0xfffea64c>
1010af0c:	70004c26 	beq	r14,zero,1010b040 <___vfiprintf_internal_r+0x11fc>
1010af10:	00800084 	movi	r2,2
1010af14:	d8c01d04 	addi	r3,sp,116
1010af18:	d8c00015 	stw	r3,0(sp)
1010af1c:	d8800115 	stw	r2,4(sp)
1010af20:	01000044 	movi	r4,1
1010af24:	d811883a 	mov	r8,sp
1010af28:	003f7306 	br	1010acf8 <__alt_data_end+0xfffeacf8>
1010af2c:	a080100c 	andi	r2,r20,64
1010af30:	da802217 	ldw	r10,136(sp)
1010af34:	103e0626 	beq	r2,zero,1010a750 <__alt_data_end+0xfffea750>
1010af38:	5480000f 	ldh	r18,0(r10)
1010af3c:	52800104 	addi	r10,r10,4
1010af40:	da802215 	stw	r10,136(sp)
1010af44:	9027d7fa 	srai	r19,r18,31
1010af48:	9805883a 	mov	r2,r19
1010af4c:	003db806 	br	1010a630 <__alt_data_end+0xfffea630>
1010af50:	a080040c 	andi	r2,r20,16
1010af54:	1000091e 	bne	r2,zero,1010af7c <___vfiprintf_internal_r+0x1138>
1010af58:	a2c0100c 	andi	r11,r20,64
1010af5c:	58000726 	beq	r11,zero,1010af7c <___vfiprintf_internal_r+0x1138>
1010af60:	da802217 	ldw	r10,136(sp)
1010af64:	50800017 	ldw	r2,0(r10)
1010af68:	52800104 	addi	r10,r10,4
1010af6c:	da802215 	stw	r10,136(sp)
1010af70:	da802317 	ldw	r10,140(sp)
1010af74:	1280000d 	sth	r10,0(r2)
1010af78:	003be706 	br	10109f18 <__alt_data_end+0xfffe9f18>
1010af7c:	da802217 	ldw	r10,136(sp)
1010af80:	50800017 	ldw	r2,0(r10)
1010af84:	52800104 	addi	r10,r10,4
1010af88:	da802215 	stw	r10,136(sp)
1010af8c:	da802317 	ldw	r10,140(sp)
1010af90:	12800015 	stw	r10,0(r2)
1010af94:	003be006 	br	10109f18 <__alt_data_end+0xfffe9f18>
1010af98:	a080100c 	andi	r2,r20,64
1010af9c:	da802217 	ldw	r10,136(sp)
1010afa0:	10003026 	beq	r2,zero,1010b064 <___vfiprintf_internal_r+0x1220>
1010afa4:	5480000b 	ldhu	r18,0(r10)
1010afa8:	52800104 	addi	r10,r10,4
1010afac:	0027883a 	mov	r19,zero
1010afb0:	da802215 	stw	r10,136(sp)
1010afb4:	003d8006 	br	1010a5b8 <__alt_data_end+0xfffea5b8>
1010afb8:	80c00007 	ldb	r3,0(r16)
1010afbc:	003c0006 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010afc0:	a080100c 	andi	r2,r20,64
1010afc4:	d8001d85 	stb	zero,118(sp)
1010afc8:	da802217 	ldw	r10,136(sp)
1010afcc:	1000201e 	bne	r2,zero,1010b050 <___vfiprintf_internal_r+0x120c>
1010afd0:	50800104 	addi	r2,r10,4
1010afd4:	54800017 	ldw	r18,0(r10)
1010afd8:	0027883a 	mov	r19,zero
1010afdc:	483def0e 	bge	r9,zero,1010a79c <__alt_data_end+0xfffea79c>
1010afe0:	94c6b03a 	or	r3,r18,r19
1010afe4:	d8802215 	stw	r2,136(sp)
1010afe8:	183d4e1e 	bne	r3,zero,1010a524 <__alt_data_end+0xfffea524>
1010afec:	0039883a 	mov	fp,zero
1010aff0:	0005883a 	mov	r2,zero
1010aff4:	003e0606 	br	1010a810 <__alt_data_end+0xfffea810>
1010aff8:	d9402117 	ldw	r5,132(sp)
1010affc:	d9002017 	ldw	r4,128(sp)
1010b000:	d9801a04 	addi	r6,sp,104
1010b004:	da402c15 	stw	r9,176(sp)
1010b008:	db802a15 	stw	r14,168(sp)
1010b00c:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010b010:	da402c17 	ldw	r9,176(sp)
1010b014:	db802a17 	ldw	r14,168(sp)
1010b018:	103ede1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010b01c:	d9401b17 	ldw	r5,108(sp)
1010b020:	d8801c17 	ldw	r2,112(sp)
1010b024:	d811883a 	mov	r8,sp
1010b028:	29000044 	addi	r4,r5,1
1010b02c:	003e7406 	br	1010aa00 <__alt_data_end+0xfffeaa00>
1010b030:	00bfffc4 	movi	r2,-1
1010b034:	003c5806 	br	1010a198 <__alt_data_end+0xfffea198>
1010b038:	d811883a 	mov	r8,sp
1010b03c:	003ee806 	br	1010abe0 <__alt_data_end+0xfffeabe0>
1010b040:	000b883a 	mov	r5,zero
1010b044:	01000044 	movi	r4,1
1010b048:	d811883a 	mov	r8,sp
1010b04c:	003e7c06 	br	1010aa40 <__alt_data_end+0xfffeaa40>
1010b050:	50800104 	addi	r2,r10,4
1010b054:	5480000b 	ldhu	r18,0(r10)
1010b058:	0027883a 	mov	r19,zero
1010b05c:	483dcf0e 	bge	r9,zero,1010a79c <__alt_data_end+0xfffea79c>
1010b060:	003fdf06 	br	1010afe0 <__alt_data_end+0xfffeafe0>
1010b064:	54800017 	ldw	r18,0(r10)
1010b068:	52800104 	addi	r10,r10,4
1010b06c:	0027883a 	mov	r19,zero
1010b070:	da802215 	stw	r10,136(sp)
1010b074:	003d5006 	br	1010a5b8 <__alt_data_end+0xfffea5b8>
1010b078:	50800104 	addi	r2,r10,4
1010b07c:	5480000b 	ldhu	r18,0(r10)
1010b080:	0027883a 	mov	r19,zero
1010b084:	483f7d0e 	bge	r9,zero,1010ae7c <__alt_data_end+0xfffeae7c>
1010b088:	003ddc06 	br	1010a7fc <__alt_data_end+0xfffea7fc>
1010b08c:	d8c02215 	stw	r3,136(sp)
1010b090:	0039883a 	mov	fp,zero
1010b094:	003ddb06 	br	1010a804 <__alt_data_end+0xfffea804>
1010b098:	02840474 	movhi	r10,4113
1010b09c:	52870204 	addi	r10,r10,7176
1010b0a0:	da802415 	stw	r10,144(sp)
1010b0a4:	003e8306 	br	1010aab4 <__alt_data_end+0xfffeaab4>
1010b0a8:	d8801c17 	ldw	r2,112(sp)
1010b0ac:	dd002117 	ldw	r20,132(sp)
1010b0b0:	103eb926 	beq	r2,zero,1010ab98 <__alt_data_end+0xfffeab98>
1010b0b4:	d9002017 	ldw	r4,128(sp)
1010b0b8:	d9801a04 	addi	r6,sp,104
1010b0bc:	a00b883a 	mov	r5,r20
1010b0c0:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010b0c4:	003eb406 	br	1010ab98 <__alt_data_end+0xfffeab98>
1010b0c8:	80c00043 	ldbu	r3,1(r16)
1010b0cc:	a5000814 	ori	r20,r20,32
1010b0d0:	84000044 	addi	r16,r16,1
1010b0d4:	18c03fcc 	andi	r3,r3,255
1010b0d8:	18c0201c 	xori	r3,r3,128
1010b0dc:	18ffe004 	addi	r3,r3,-128
1010b0e0:	003bb706 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010b0e4:	a809883a 	mov	r4,r21
1010b0e8:	d8c02a15 	stw	r3,168(sp)
1010b0ec:	da002b15 	stw	r8,172(sp)
1010b0f0:	0103da80 	call	10103da8 <strlen>
1010b0f4:	d8c02a17 	ldw	r3,168(sp)
1010b0f8:	1027883a 	mov	r19,r2
1010b0fc:	df001d83 	ldbu	fp,118(sp)
1010b100:	d8c02215 	stw	r3,136(sp)
1010b104:	0013883a 	mov	r9,zero
1010b108:	da002b17 	ldw	r8,172(sp)
1010b10c:	003c4d06 	br	1010a244 <__alt_data_end+0xfffea244>
1010b110:	d9402117 	ldw	r5,132(sp)
1010b114:	d9002017 	ldw	r4,128(sp)
1010b118:	d9801a04 	addi	r6,sp,104
1010b11c:	da402c15 	stw	r9,176(sp)
1010b120:	0109d300 	call	10109d30 <__sprint_r.part.0>
1010b124:	da402c17 	ldw	r9,176(sp)
1010b128:	103e9a1e 	bne	r2,zero,1010ab94 <__alt_data_end+0xfffeab94>
1010b12c:	d9401b17 	ldw	r5,108(sp)
1010b130:	d8801c17 	ldw	r2,112(sp)
1010b134:	d811883a 	mov	r8,sp
1010b138:	29000044 	addi	r4,r5,1
1010b13c:	003e4206 	br	1010aa48 <__alt_data_end+0xfffeaa48>
1010b140:	d9401b17 	ldw	r5,108(sp)
1010b144:	01040474 	movhi	r4,4113
1010b148:	21070604 	addi	r4,r4,7192
1010b14c:	d9002415 	stw	r4,144(sp)
1010b150:	29400044 	addi	r5,r5,1
1010b154:	003c6d06 	br	1010a30c <__alt_data_end+0xfffea30c>
1010b158:	0039883a 	mov	fp,zero
1010b15c:	00800084 	movi	r2,2
1010b160:	10803fcc 	andi	r2,r2,255
1010b164:	01000044 	movi	r4,1
1010b168:	11001e26 	beq	r2,r4,1010b1e4 <___vfiprintf_internal_r+0x13a0>
1010b16c:	01000084 	movi	r4,2
1010b170:	11001e1e 	bne	r2,r4,1010b1ec <___vfiprintf_internal_r+0x13a8>
1010b174:	1829883a 	mov	r20,r3
1010b178:	003eea06 	br	1010ad24 <__alt_data_end+0xfffead24>
1010b17c:	a007883a 	mov	r3,r20
1010b180:	00800044 	movi	r2,1
1010b184:	003ff606 	br	1010b160 <__alt_data_end+0xfffeb160>
1010b188:	00800184 	movi	r2,6
1010b18c:	1240012e 	bgeu	r2,r9,1010b194 <___vfiprintf_internal_r+0x1350>
1010b190:	1013883a 	mov	r9,r2
1010b194:	4827883a 	mov	r19,r9
1010b198:	4825883a 	mov	r18,r9
1010b19c:	48001516 	blt	r9,zero,1010b1f4 <___vfiprintf_internal_r+0x13b0>
1010b1a0:	05440474 	movhi	r21,4113
1010b1a4:	d8c02215 	stw	r3,136(sp)
1010b1a8:	ad46a704 	addi	r21,r21,6812
1010b1ac:	003d1406 	br	1010a600 <__alt_data_end+0xfffea600>
1010b1b0:	02840474 	movhi	r10,4113
1010b1b4:	52870204 	addi	r10,r10,7176
1010b1b8:	da802415 	stw	r10,144(sp)
1010b1bc:	200d883a 	mov	r6,r4
1010b1c0:	003c9106 	br	1010a408 <__alt_data_end+0xfffea408>
1010b1c4:	5021883a 	mov	r16,r10
1010b1c8:	0013883a 	mov	r9,zero
1010b1cc:	003b7d06 	br	10109fc4 <__alt_data_end+0xfffe9fc4>
1010b1d0:	4827883a 	mov	r19,r9
1010b1d4:	df001d83 	ldbu	fp,118(sp)
1010b1d8:	d8c02215 	stw	r3,136(sp)
1010b1dc:	0013883a 	mov	r9,zero
1010b1e0:	003c1806 	br	1010a244 <__alt_data_end+0xfffea244>
1010b1e4:	1829883a 	mov	r20,r3
1010b1e8:	003d1806 	br	1010a64c <__alt_data_end+0xfffea64c>
1010b1ec:	1829883a 	mov	r20,r3
1010b1f0:	003ccd06 	br	1010a528 <__alt_data_end+0xfffea528>
1010b1f4:	0025883a 	mov	r18,zero
1010b1f8:	003fe906 	br	1010b1a0 <__alt_data_end+0xfffeb1a0>
1010b1fc:	d8802217 	ldw	r2,136(sp)
1010b200:	80c00043 	ldbu	r3,1(r16)
1010b204:	5021883a 	mov	r16,r10
1010b208:	12400017 	ldw	r9,0(r2)
1010b20c:	10800104 	addi	r2,r2,4
1010b210:	d8802215 	stw	r2,136(sp)
1010b214:	483faf0e 	bge	r9,zero,1010b0d4 <__alt_data_end+0xfffeb0d4>
1010b218:	18c03fcc 	andi	r3,r3,255
1010b21c:	18c0201c 	xori	r3,r3,128
1010b220:	027fffc4 	movi	r9,-1
1010b224:	18ffe004 	addi	r3,r3,-128
1010b228:	003b6506 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010b22c:	d9c01d85 	stb	r7,118(sp)
1010b230:	003ca006 	br	1010a4b4 <__alt_data_end+0xfffea4b4>
1010b234:	d9c01d85 	stb	r7,118(sp)
1010b238:	003cad06 	br	1010a4f0 <__alt_data_end+0xfffea4f0>
1010b23c:	d9c01d85 	stb	r7,118(sp)
1010b240:	003d7d06 	br	1010a838 <__alt_data_end+0xfffea838>
1010b244:	d9c01d85 	stb	r7,118(sp)
1010b248:	003d5f06 	br	1010a7c8 <__alt_data_end+0xfffea7c8>
1010b24c:	a080004c 	andi	r2,r20,1
1010b250:	0039883a 	mov	fp,zero
1010b254:	10000526 	beq	r2,zero,1010b26c <___vfiprintf_internal_r+0x1428>
1010b258:	00800c04 	movi	r2,48
1010b25c:	d88019c5 	stb	r2,103(sp)
1010b260:	dcc02717 	ldw	r19,156(sp)
1010b264:	dd4019c4 	addi	r21,sp,103
1010b268:	003bf606 	br	1010a244 <__alt_data_end+0xfffea244>
1010b26c:	0027883a 	mov	r19,zero
1010b270:	dd401a04 	addi	r21,sp,104
1010b274:	003bf306 	br	1010a244 <__alt_data_end+0xfffea244>
1010b278:	d9c01d85 	stb	r7,118(sp)
1010b27c:	003dc806 	br	1010a9a0 <__alt_data_end+0xfffea9a0>
1010b280:	d9c01d85 	stb	r7,118(sp)
1010b284:	003d3a06 	br	1010a770 <__alt_data_end+0xfffea770>
1010b288:	d9c01d85 	stb	r7,118(sp)
1010b28c:	003d2a06 	br	1010a738 <__alt_data_end+0xfffea738>
1010b290:	d9c01d85 	stb	r7,118(sp)
1010b294:	003cde06 	br	1010a610 <__alt_data_end+0xfffea610>
1010b298:	d9c01d85 	stb	r7,118(sp)
1010b29c:	003cbc06 	br	1010a590 <__alt_data_end+0xfffea590>

1010b2a0 <__vfiprintf_internal>:
1010b2a0:	00840474 	movhi	r2,4113
1010b2a4:	108e1004 	addi	r2,r2,14400
1010b2a8:	300f883a 	mov	r7,r6
1010b2ac:	280d883a 	mov	r6,r5
1010b2b0:	200b883a 	mov	r5,r4
1010b2b4:	11000017 	ldw	r4,0(r2)
1010b2b8:	0109e441 	jmpi	10109e44 <___vfiprintf_internal_r>

1010b2bc <__sbprintf>:
1010b2bc:	2880030b 	ldhu	r2,12(r5)
1010b2c0:	2ac01917 	ldw	r11,100(r5)
1010b2c4:	2a80038b 	ldhu	r10,14(r5)
1010b2c8:	2a400717 	ldw	r9,28(r5)
1010b2cc:	2a000917 	ldw	r8,36(r5)
1010b2d0:	defee204 	addi	sp,sp,-1144
1010b2d4:	00c10004 	movi	r3,1024
1010b2d8:	dc011a15 	stw	r16,1128(sp)
1010b2dc:	10bfff4c 	andi	r2,r2,65533
1010b2e0:	2821883a 	mov	r16,r5
1010b2e4:	d8cb883a 	add	r5,sp,r3
1010b2e8:	dc811c15 	stw	r18,1136(sp)
1010b2ec:	dc411b15 	stw	r17,1132(sp)
1010b2f0:	dfc11d15 	stw	ra,1140(sp)
1010b2f4:	2025883a 	mov	r18,r4
1010b2f8:	d881030d 	sth	r2,1036(sp)
1010b2fc:	dac11915 	stw	r11,1124(sp)
1010b300:	da81038d 	sth	r10,1038(sp)
1010b304:	da410715 	stw	r9,1052(sp)
1010b308:	da010915 	stw	r8,1060(sp)
1010b30c:	dec10015 	stw	sp,1024(sp)
1010b310:	dec10415 	stw	sp,1040(sp)
1010b314:	d8c10215 	stw	r3,1032(sp)
1010b318:	d8c10515 	stw	r3,1044(sp)
1010b31c:	d8010615 	stw	zero,1048(sp)
1010b320:	0109e440 	call	10109e44 <___vfiprintf_internal_r>
1010b324:	1023883a 	mov	r17,r2
1010b328:	10000416 	blt	r2,zero,1010b33c <__sbprintf+0x80>
1010b32c:	d9410004 	addi	r5,sp,1024
1010b330:	9009883a 	mov	r4,r18
1010b334:	0101d7c0 	call	10101d7c <_fflush_r>
1010b338:	10000d1e 	bne	r2,zero,1010b370 <__sbprintf+0xb4>
1010b33c:	d881030b 	ldhu	r2,1036(sp)
1010b340:	1080100c 	andi	r2,r2,64
1010b344:	10000326 	beq	r2,zero,1010b354 <__sbprintf+0x98>
1010b348:	8080030b 	ldhu	r2,12(r16)
1010b34c:	10801014 	ori	r2,r2,64
1010b350:	8080030d 	sth	r2,12(r16)
1010b354:	8805883a 	mov	r2,r17
1010b358:	dfc11d17 	ldw	ra,1140(sp)
1010b35c:	dc811c17 	ldw	r18,1136(sp)
1010b360:	dc411b17 	ldw	r17,1132(sp)
1010b364:	dc011a17 	ldw	r16,1128(sp)
1010b368:	dec11e04 	addi	sp,sp,1144
1010b36c:	f800283a 	ret
1010b370:	047fffc4 	movi	r17,-1
1010b374:	003ff106 	br	1010b33c <__alt_data_end+0xfffeb33c>

1010b378 <_calloc_r>:
1010b378:	298b383a 	mul	r5,r5,r6
1010b37c:	defffe04 	addi	sp,sp,-8
1010b380:	dfc00115 	stw	ra,4(sp)
1010b384:	dc000015 	stw	r16,0(sp)
1010b388:	0102f540 	call	10102f54 <_malloc_r>
1010b38c:	10002926 	beq	r2,zero,1010b434 <_calloc_r+0xbc>
1010b390:	11bfff17 	ldw	r6,-4(r2)
1010b394:	1021883a 	mov	r16,r2
1010b398:	00bfff04 	movi	r2,-4
1010b39c:	308c703a 	and	r6,r6,r2
1010b3a0:	00c00904 	movi	r3,36
1010b3a4:	308d883a 	add	r6,r6,r2
1010b3a8:	19801636 	bltu	r3,r6,1010b404 <_calloc_r+0x8c>
1010b3ac:	008004c4 	movi	r2,19
1010b3b0:	11800b2e 	bgeu	r2,r6,1010b3e0 <_calloc_r+0x68>
1010b3b4:	80000015 	stw	zero,0(r16)
1010b3b8:	80000115 	stw	zero,4(r16)
1010b3bc:	008006c4 	movi	r2,27
1010b3c0:	11801a2e 	bgeu	r2,r6,1010b42c <_calloc_r+0xb4>
1010b3c4:	80000215 	stw	zero,8(r16)
1010b3c8:	80000315 	stw	zero,12(r16)
1010b3cc:	30c0151e 	bne	r6,r3,1010b424 <_calloc_r+0xac>
1010b3d0:	80000415 	stw	zero,16(r16)
1010b3d4:	80800604 	addi	r2,r16,24
1010b3d8:	80000515 	stw	zero,20(r16)
1010b3dc:	00000106 	br	1010b3e4 <_calloc_r+0x6c>
1010b3e0:	8005883a 	mov	r2,r16
1010b3e4:	10000015 	stw	zero,0(r2)
1010b3e8:	10000115 	stw	zero,4(r2)
1010b3ec:	10000215 	stw	zero,8(r2)
1010b3f0:	8005883a 	mov	r2,r16
1010b3f4:	dfc00117 	ldw	ra,4(sp)
1010b3f8:	dc000017 	ldw	r16,0(sp)
1010b3fc:	dec00204 	addi	sp,sp,8
1010b400:	f800283a 	ret
1010b404:	000b883a 	mov	r5,zero
1010b408:	8009883a 	mov	r4,r16
1010b40c:	01037600 	call	10103760 <memset>
1010b410:	8005883a 	mov	r2,r16
1010b414:	dfc00117 	ldw	ra,4(sp)
1010b418:	dc000017 	ldw	r16,0(sp)
1010b41c:	dec00204 	addi	sp,sp,8
1010b420:	f800283a 	ret
1010b424:	80800404 	addi	r2,r16,16
1010b428:	003fee06 	br	1010b3e4 <__alt_data_end+0xfffeb3e4>
1010b42c:	80800204 	addi	r2,r16,8
1010b430:	003fec06 	br	1010b3e4 <__alt_data_end+0xfffeb3e4>
1010b434:	0005883a 	mov	r2,zero
1010b438:	003fee06 	br	1010b3f4 <__alt_data_end+0xfffeb3f4>

1010b43c <__fputwc>:
1010b43c:	defff804 	addi	sp,sp,-32
1010b440:	dcc00415 	stw	r19,16(sp)
1010b444:	dc800315 	stw	r18,12(sp)
1010b448:	dc000115 	stw	r16,4(sp)
1010b44c:	dfc00715 	stw	ra,28(sp)
1010b450:	dd400615 	stw	r21,24(sp)
1010b454:	dd000515 	stw	r20,20(sp)
1010b458:	dc400215 	stw	r17,8(sp)
1010b45c:	2027883a 	mov	r19,r4
1010b460:	2825883a 	mov	r18,r5
1010b464:	3021883a 	mov	r16,r6
1010b468:	01081e40 	call	101081e4 <__locale_mb_cur_max>
1010b46c:	00c00044 	movi	r3,1
1010b470:	10c03e26 	beq	r2,r3,1010b56c <__fputwc+0x130>
1010b474:	81c01704 	addi	r7,r16,92
1010b478:	900d883a 	mov	r6,r18
1010b47c:	d80b883a 	mov	r5,sp
1010b480:	9809883a 	mov	r4,r19
1010b484:	010b79c0 	call	1010b79c <_wcrtomb_r>
1010b488:	1029883a 	mov	r20,r2
1010b48c:	00bfffc4 	movi	r2,-1
1010b490:	a0802026 	beq	r20,r2,1010b514 <__fputwc+0xd8>
1010b494:	d9400003 	ldbu	r5,0(sp)
1010b498:	a0001c26 	beq	r20,zero,1010b50c <__fputwc+0xd0>
1010b49c:	0023883a 	mov	r17,zero
1010b4a0:	05400284 	movi	r21,10
1010b4a4:	00000906 	br	1010b4cc <__fputwc+0x90>
1010b4a8:	80800017 	ldw	r2,0(r16)
1010b4ac:	11400005 	stb	r5,0(r2)
1010b4b0:	80c00017 	ldw	r3,0(r16)
1010b4b4:	18c00044 	addi	r3,r3,1
1010b4b8:	80c00015 	stw	r3,0(r16)
1010b4bc:	8c400044 	addi	r17,r17,1
1010b4c0:	dc45883a 	add	r2,sp,r17
1010b4c4:	8d00112e 	bgeu	r17,r20,1010b50c <__fputwc+0xd0>
1010b4c8:	11400003 	ldbu	r5,0(r2)
1010b4cc:	80c00217 	ldw	r3,8(r16)
1010b4d0:	18ffffc4 	addi	r3,r3,-1
1010b4d4:	80c00215 	stw	r3,8(r16)
1010b4d8:	183ff30e 	bge	r3,zero,1010b4a8 <__alt_data_end+0xfffeb4a8>
1010b4dc:	80800617 	ldw	r2,24(r16)
1010b4e0:	18801916 	blt	r3,r2,1010b548 <__fputwc+0x10c>
1010b4e4:	80800017 	ldw	r2,0(r16)
1010b4e8:	11400005 	stb	r5,0(r2)
1010b4ec:	80800017 	ldw	r2,0(r16)
1010b4f0:	10c00003 	ldbu	r3,0(r2)
1010b4f4:	10800044 	addi	r2,r2,1
1010b4f8:	1d402326 	beq	r3,r21,1010b588 <__fputwc+0x14c>
1010b4fc:	80800015 	stw	r2,0(r16)
1010b500:	8c400044 	addi	r17,r17,1
1010b504:	dc45883a 	add	r2,sp,r17
1010b508:	8d3fef36 	bltu	r17,r20,1010b4c8 <__alt_data_end+0xfffeb4c8>
1010b50c:	9005883a 	mov	r2,r18
1010b510:	00000406 	br	1010b524 <__fputwc+0xe8>
1010b514:	80c0030b 	ldhu	r3,12(r16)
1010b518:	a005883a 	mov	r2,r20
1010b51c:	18c01014 	ori	r3,r3,64
1010b520:	80c0030d 	sth	r3,12(r16)
1010b524:	dfc00717 	ldw	ra,28(sp)
1010b528:	dd400617 	ldw	r21,24(sp)
1010b52c:	dd000517 	ldw	r20,20(sp)
1010b530:	dcc00417 	ldw	r19,16(sp)
1010b534:	dc800317 	ldw	r18,12(sp)
1010b538:	dc400217 	ldw	r17,8(sp)
1010b53c:	dc000117 	ldw	r16,4(sp)
1010b540:	dec00804 	addi	sp,sp,32
1010b544:	f800283a 	ret
1010b548:	800d883a 	mov	r6,r16
1010b54c:	29403fcc 	andi	r5,r5,255
1010b550:	9809883a 	mov	r4,r19
1010b554:	010b6440 	call	1010b644 <__swbuf_r>
1010b558:	10bfffe0 	cmpeqi	r2,r2,-1
1010b55c:	10803fcc 	andi	r2,r2,255
1010b560:	103fd626 	beq	r2,zero,1010b4bc <__alt_data_end+0xfffeb4bc>
1010b564:	00bfffc4 	movi	r2,-1
1010b568:	003fee06 	br	1010b524 <__alt_data_end+0xfffeb524>
1010b56c:	90ffffc4 	addi	r3,r18,-1
1010b570:	01003f84 	movi	r4,254
1010b574:	20ffbf36 	bltu	r4,r3,1010b474 <__alt_data_end+0xfffeb474>
1010b578:	900b883a 	mov	r5,r18
1010b57c:	dc800005 	stb	r18,0(sp)
1010b580:	1029883a 	mov	r20,r2
1010b584:	003fc506 	br	1010b49c <__alt_data_end+0xfffeb49c>
1010b588:	800d883a 	mov	r6,r16
1010b58c:	a80b883a 	mov	r5,r21
1010b590:	9809883a 	mov	r4,r19
1010b594:	010b6440 	call	1010b644 <__swbuf_r>
1010b598:	10bfffe0 	cmpeqi	r2,r2,-1
1010b59c:	003fef06 	br	1010b55c <__alt_data_end+0xfffeb55c>

1010b5a0 <_fputwc_r>:
1010b5a0:	3080030b 	ldhu	r2,12(r6)
1010b5a4:	10c8000c 	andi	r3,r2,8192
1010b5a8:	1800051e 	bne	r3,zero,1010b5c0 <_fputwc_r+0x20>
1010b5ac:	30c01917 	ldw	r3,100(r6)
1010b5b0:	10880014 	ori	r2,r2,8192
1010b5b4:	3080030d 	sth	r2,12(r6)
1010b5b8:	18880014 	ori	r2,r3,8192
1010b5bc:	30801915 	stw	r2,100(r6)
1010b5c0:	010b43c1 	jmpi	1010b43c <__fputwc>

1010b5c4 <fputwc>:
1010b5c4:	00840474 	movhi	r2,4113
1010b5c8:	defffc04 	addi	sp,sp,-16
1010b5cc:	108e1004 	addi	r2,r2,14400
1010b5d0:	dc000115 	stw	r16,4(sp)
1010b5d4:	14000017 	ldw	r16,0(r2)
1010b5d8:	dc400215 	stw	r17,8(sp)
1010b5dc:	dfc00315 	stw	ra,12(sp)
1010b5e0:	2023883a 	mov	r17,r4
1010b5e4:	80000226 	beq	r16,zero,1010b5f0 <fputwc+0x2c>
1010b5e8:	80800e17 	ldw	r2,56(r16)
1010b5ec:	10001026 	beq	r2,zero,1010b630 <fputwc+0x6c>
1010b5f0:	2880030b 	ldhu	r2,12(r5)
1010b5f4:	10c8000c 	andi	r3,r2,8192
1010b5f8:	1800051e 	bne	r3,zero,1010b610 <fputwc+0x4c>
1010b5fc:	28c01917 	ldw	r3,100(r5)
1010b600:	10880014 	ori	r2,r2,8192
1010b604:	2880030d 	sth	r2,12(r5)
1010b608:	18880014 	ori	r2,r3,8192
1010b60c:	28801915 	stw	r2,100(r5)
1010b610:	280d883a 	mov	r6,r5
1010b614:	8009883a 	mov	r4,r16
1010b618:	880b883a 	mov	r5,r17
1010b61c:	dfc00317 	ldw	ra,12(sp)
1010b620:	dc400217 	ldw	r17,8(sp)
1010b624:	dc000117 	ldw	r16,4(sp)
1010b628:	dec00404 	addi	sp,sp,16
1010b62c:	010b43c1 	jmpi	1010b43c <__fputwc>
1010b630:	8009883a 	mov	r4,r16
1010b634:	d9400015 	stw	r5,0(sp)
1010b638:	01021580 	call	10102158 <__sinit>
1010b63c:	d9400017 	ldw	r5,0(sp)
1010b640:	003feb06 	br	1010b5f0 <__alt_data_end+0xfffeb5f0>

1010b644 <__swbuf_r>:
1010b644:	defffb04 	addi	sp,sp,-20
1010b648:	dcc00315 	stw	r19,12(sp)
1010b64c:	dc800215 	stw	r18,8(sp)
1010b650:	dc000015 	stw	r16,0(sp)
1010b654:	dfc00415 	stw	ra,16(sp)
1010b658:	dc400115 	stw	r17,4(sp)
1010b65c:	2025883a 	mov	r18,r4
1010b660:	2827883a 	mov	r19,r5
1010b664:	3021883a 	mov	r16,r6
1010b668:	20000226 	beq	r4,zero,1010b674 <__swbuf_r+0x30>
1010b66c:	20800e17 	ldw	r2,56(r4)
1010b670:	10004226 	beq	r2,zero,1010b77c <__swbuf_r+0x138>
1010b674:	80800617 	ldw	r2,24(r16)
1010b678:	8100030b 	ldhu	r4,12(r16)
1010b67c:	80800215 	stw	r2,8(r16)
1010b680:	2080020c 	andi	r2,r4,8
1010b684:	10003626 	beq	r2,zero,1010b760 <__swbuf_r+0x11c>
1010b688:	80c00417 	ldw	r3,16(r16)
1010b68c:	18003426 	beq	r3,zero,1010b760 <__swbuf_r+0x11c>
1010b690:	2088000c 	andi	r2,r4,8192
1010b694:	9c403fcc 	andi	r17,r19,255
1010b698:	10001a26 	beq	r2,zero,1010b704 <__swbuf_r+0xc0>
1010b69c:	80800017 	ldw	r2,0(r16)
1010b6a0:	81000517 	ldw	r4,20(r16)
1010b6a4:	10c7c83a 	sub	r3,r2,r3
1010b6a8:	1900200e 	bge	r3,r4,1010b72c <__swbuf_r+0xe8>
1010b6ac:	18c00044 	addi	r3,r3,1
1010b6b0:	81000217 	ldw	r4,8(r16)
1010b6b4:	11400044 	addi	r5,r2,1
1010b6b8:	81400015 	stw	r5,0(r16)
1010b6bc:	213fffc4 	addi	r4,r4,-1
1010b6c0:	81000215 	stw	r4,8(r16)
1010b6c4:	14c00005 	stb	r19,0(r2)
1010b6c8:	80800517 	ldw	r2,20(r16)
1010b6cc:	10c01e26 	beq	r2,r3,1010b748 <__swbuf_r+0x104>
1010b6d0:	8080030b 	ldhu	r2,12(r16)
1010b6d4:	1080004c 	andi	r2,r2,1
1010b6d8:	10000226 	beq	r2,zero,1010b6e4 <__swbuf_r+0xa0>
1010b6dc:	00800284 	movi	r2,10
1010b6e0:	88801926 	beq	r17,r2,1010b748 <__swbuf_r+0x104>
1010b6e4:	8805883a 	mov	r2,r17
1010b6e8:	dfc00417 	ldw	ra,16(sp)
1010b6ec:	dcc00317 	ldw	r19,12(sp)
1010b6f0:	dc800217 	ldw	r18,8(sp)
1010b6f4:	dc400117 	ldw	r17,4(sp)
1010b6f8:	dc000017 	ldw	r16,0(sp)
1010b6fc:	dec00504 	addi	sp,sp,20
1010b700:	f800283a 	ret
1010b704:	81401917 	ldw	r5,100(r16)
1010b708:	00b7ffc4 	movi	r2,-8193
1010b70c:	21080014 	ori	r4,r4,8192
1010b710:	2884703a 	and	r2,r5,r2
1010b714:	80801915 	stw	r2,100(r16)
1010b718:	80800017 	ldw	r2,0(r16)
1010b71c:	8100030d 	sth	r4,12(r16)
1010b720:	81000517 	ldw	r4,20(r16)
1010b724:	10c7c83a 	sub	r3,r2,r3
1010b728:	193fe016 	blt	r3,r4,1010b6ac <__alt_data_end+0xfffeb6ac>
1010b72c:	800b883a 	mov	r5,r16
1010b730:	9009883a 	mov	r4,r18
1010b734:	0101d7c0 	call	10101d7c <_fflush_r>
1010b738:	1000071e 	bne	r2,zero,1010b758 <__swbuf_r+0x114>
1010b73c:	80800017 	ldw	r2,0(r16)
1010b740:	00c00044 	movi	r3,1
1010b744:	003fda06 	br	1010b6b0 <__alt_data_end+0xfffeb6b0>
1010b748:	800b883a 	mov	r5,r16
1010b74c:	9009883a 	mov	r4,r18
1010b750:	0101d7c0 	call	10101d7c <_fflush_r>
1010b754:	103fe326 	beq	r2,zero,1010b6e4 <__alt_data_end+0xfffeb6e4>
1010b758:	00bfffc4 	movi	r2,-1
1010b75c:	003fe206 	br	1010b6e8 <__alt_data_end+0xfffeb6e8>
1010b760:	800b883a 	mov	r5,r16
1010b764:	9009883a 	mov	r4,r18
1010b768:	01061700 	call	10106170 <__swsetup_r>
1010b76c:	103ffa1e 	bne	r2,zero,1010b758 <__alt_data_end+0xfffeb758>
1010b770:	8100030b 	ldhu	r4,12(r16)
1010b774:	80c00417 	ldw	r3,16(r16)
1010b778:	003fc506 	br	1010b690 <__alt_data_end+0xfffeb690>
1010b77c:	01021580 	call	10102158 <__sinit>
1010b780:	003fbc06 	br	1010b674 <__alt_data_end+0xfffeb674>

1010b784 <__swbuf>:
1010b784:	00840474 	movhi	r2,4113
1010b788:	108e1004 	addi	r2,r2,14400
1010b78c:	280d883a 	mov	r6,r5
1010b790:	200b883a 	mov	r5,r4
1010b794:	11000017 	ldw	r4,0(r2)
1010b798:	010b6441 	jmpi	1010b644 <__swbuf_r>

1010b79c <_wcrtomb_r>:
1010b79c:	defff604 	addi	sp,sp,-40
1010b7a0:	00840474 	movhi	r2,4113
1010b7a4:	dc800815 	stw	r18,32(sp)
1010b7a8:	dc400715 	stw	r17,28(sp)
1010b7ac:	dc000615 	stw	r16,24(sp)
1010b7b0:	108e1404 	addi	r2,r2,14416
1010b7b4:	dfc00915 	stw	ra,36(sp)
1010b7b8:	2021883a 	mov	r16,r4
1010b7bc:	3823883a 	mov	r17,r7
1010b7c0:	14800017 	ldw	r18,0(r2)
1010b7c4:	28001426 	beq	r5,zero,1010b818 <_wcrtomb_r+0x7c>
1010b7c8:	d9400415 	stw	r5,16(sp)
1010b7cc:	d9800515 	stw	r6,20(sp)
1010b7d0:	01081d80 	call	101081d8 <__locale_charset>
1010b7d4:	d9800517 	ldw	r6,20(sp)
1010b7d8:	d9400417 	ldw	r5,16(sp)
1010b7dc:	100f883a 	mov	r7,r2
1010b7e0:	dc400015 	stw	r17,0(sp)
1010b7e4:	8009883a 	mov	r4,r16
1010b7e8:	903ee83a 	callr	r18
1010b7ec:	00ffffc4 	movi	r3,-1
1010b7f0:	10c0031e 	bne	r2,r3,1010b800 <_wcrtomb_r+0x64>
1010b7f4:	88000015 	stw	zero,0(r17)
1010b7f8:	00c02284 	movi	r3,138
1010b7fc:	80c00015 	stw	r3,0(r16)
1010b800:	dfc00917 	ldw	ra,36(sp)
1010b804:	dc800817 	ldw	r18,32(sp)
1010b808:	dc400717 	ldw	r17,28(sp)
1010b80c:	dc000617 	ldw	r16,24(sp)
1010b810:	dec00a04 	addi	sp,sp,40
1010b814:	f800283a 	ret
1010b818:	01081d80 	call	101081d8 <__locale_charset>
1010b81c:	100f883a 	mov	r7,r2
1010b820:	dc400015 	stw	r17,0(sp)
1010b824:	000d883a 	mov	r6,zero
1010b828:	d9400104 	addi	r5,sp,4
1010b82c:	8009883a 	mov	r4,r16
1010b830:	903ee83a 	callr	r18
1010b834:	003fed06 	br	1010b7ec <__alt_data_end+0xfffeb7ec>

1010b838 <wcrtomb>:
1010b838:	defff604 	addi	sp,sp,-40
1010b83c:	00840474 	movhi	r2,4113
1010b840:	dc800615 	stw	r18,24(sp)
1010b844:	dc400515 	stw	r17,20(sp)
1010b848:	108e1004 	addi	r2,r2,14400
1010b84c:	dfc00915 	stw	ra,36(sp)
1010b850:	dd000815 	stw	r20,32(sp)
1010b854:	dcc00715 	stw	r19,28(sp)
1010b858:	dc000415 	stw	r16,16(sp)
1010b85c:	3025883a 	mov	r18,r6
1010b860:	14400017 	ldw	r17,0(r2)
1010b864:	20001926 	beq	r4,zero,1010b8cc <wcrtomb+0x94>
1010b868:	00840474 	movhi	r2,4113
1010b86c:	108e1404 	addi	r2,r2,14416
1010b870:	15000017 	ldw	r20,0(r2)
1010b874:	2021883a 	mov	r16,r4
1010b878:	2827883a 	mov	r19,r5
1010b87c:	01081d80 	call	101081d8 <__locale_charset>
1010b880:	100f883a 	mov	r7,r2
1010b884:	dc800015 	stw	r18,0(sp)
1010b888:	980d883a 	mov	r6,r19
1010b88c:	800b883a 	mov	r5,r16
1010b890:	8809883a 	mov	r4,r17
1010b894:	a03ee83a 	callr	r20
1010b898:	00ffffc4 	movi	r3,-1
1010b89c:	10c0031e 	bne	r2,r3,1010b8ac <wcrtomb+0x74>
1010b8a0:	90000015 	stw	zero,0(r18)
1010b8a4:	00c02284 	movi	r3,138
1010b8a8:	88c00015 	stw	r3,0(r17)
1010b8ac:	dfc00917 	ldw	ra,36(sp)
1010b8b0:	dd000817 	ldw	r20,32(sp)
1010b8b4:	dcc00717 	ldw	r19,28(sp)
1010b8b8:	dc800617 	ldw	r18,24(sp)
1010b8bc:	dc400517 	ldw	r17,20(sp)
1010b8c0:	dc000417 	ldw	r16,16(sp)
1010b8c4:	dec00a04 	addi	sp,sp,40
1010b8c8:	f800283a 	ret
1010b8cc:	00840474 	movhi	r2,4113
1010b8d0:	108e1404 	addi	r2,r2,14416
1010b8d4:	14000017 	ldw	r16,0(r2)
1010b8d8:	01081d80 	call	101081d8 <__locale_charset>
1010b8dc:	100f883a 	mov	r7,r2
1010b8e0:	dc800015 	stw	r18,0(sp)
1010b8e4:	000d883a 	mov	r6,zero
1010b8e8:	d9400104 	addi	r5,sp,4
1010b8ec:	8809883a 	mov	r4,r17
1010b8f0:	803ee83a 	callr	r16
1010b8f4:	003fe806 	br	1010b898 <__alt_data_end+0xfffeb898>

1010b8f8 <__ascii_wctomb>:
1010b8f8:	28000526 	beq	r5,zero,1010b910 <__ascii_wctomb+0x18>
1010b8fc:	00803fc4 	movi	r2,255
1010b900:	11800536 	bltu	r2,r6,1010b918 <__ascii_wctomb+0x20>
1010b904:	29800005 	stb	r6,0(r5)
1010b908:	00800044 	movi	r2,1
1010b90c:	f800283a 	ret
1010b910:	0005883a 	mov	r2,zero
1010b914:	f800283a 	ret
1010b918:	00802284 	movi	r2,138
1010b91c:	20800015 	stw	r2,0(r4)
1010b920:	00bfffc4 	movi	r2,-1
1010b924:	f800283a 	ret

1010b928 <_wctomb_r>:
1010b928:	00840474 	movhi	r2,4113
1010b92c:	defff904 	addi	sp,sp,-28
1010b930:	108e1404 	addi	r2,r2,14416
1010b934:	dfc00615 	stw	ra,24(sp)
1010b938:	dc400515 	stw	r17,20(sp)
1010b93c:	dc000415 	stw	r16,16(sp)
1010b940:	3823883a 	mov	r17,r7
1010b944:	14000017 	ldw	r16,0(r2)
1010b948:	d9000115 	stw	r4,4(sp)
1010b94c:	d9400215 	stw	r5,8(sp)
1010b950:	d9800315 	stw	r6,12(sp)
1010b954:	01081d80 	call	101081d8 <__locale_charset>
1010b958:	d9800317 	ldw	r6,12(sp)
1010b95c:	d9400217 	ldw	r5,8(sp)
1010b960:	d9000117 	ldw	r4,4(sp)
1010b964:	100f883a 	mov	r7,r2
1010b968:	dc400015 	stw	r17,0(sp)
1010b96c:	803ee83a 	callr	r16
1010b970:	dfc00617 	ldw	ra,24(sp)
1010b974:	dc400517 	ldw	r17,20(sp)
1010b978:	dc000417 	ldw	r16,16(sp)
1010b97c:	dec00704 	addi	sp,sp,28
1010b980:	f800283a 	ret

1010b984 <__udivdi3>:
1010b984:	defff504 	addi	sp,sp,-44
1010b988:	dcc00415 	stw	r19,16(sp)
1010b98c:	dc000115 	stw	r16,4(sp)
1010b990:	dfc00a15 	stw	ra,40(sp)
1010b994:	df000915 	stw	fp,36(sp)
1010b998:	ddc00815 	stw	r23,32(sp)
1010b99c:	dd800715 	stw	r22,28(sp)
1010b9a0:	dd400615 	stw	r21,24(sp)
1010b9a4:	dd000515 	stw	r20,20(sp)
1010b9a8:	dc800315 	stw	r18,12(sp)
1010b9ac:	dc400215 	stw	r17,8(sp)
1010b9b0:	2027883a 	mov	r19,r4
1010b9b4:	2821883a 	mov	r16,r5
1010b9b8:	3800411e 	bne	r7,zero,1010bac0 <__udivdi3+0x13c>
1010b9bc:	3023883a 	mov	r17,r6
1010b9c0:	2025883a 	mov	r18,r4
1010b9c4:	2980522e 	bgeu	r5,r6,1010bb10 <__udivdi3+0x18c>
1010b9c8:	00bfffd4 	movui	r2,65535
1010b9cc:	282d883a 	mov	r22,r5
1010b9d0:	1180a836 	bltu	r2,r6,1010bc74 <__udivdi3+0x2f0>
1010b9d4:	00803fc4 	movi	r2,255
1010b9d8:	1185803a 	cmpltu	r2,r2,r6
1010b9dc:	100490fa 	slli	r2,r2,3
1010b9e0:	3086d83a 	srl	r3,r6,r2
1010b9e4:	01040474 	movhi	r4,4113
1010b9e8:	21070a04 	addi	r4,r4,7208
1010b9ec:	20c7883a 	add	r3,r4,r3
1010b9f0:	18c00003 	ldbu	r3,0(r3)
1010b9f4:	1885883a 	add	r2,r3,r2
1010b9f8:	00c00804 	movi	r3,32
1010b9fc:	1887c83a 	sub	r3,r3,r2
1010ba00:	18000526 	beq	r3,zero,1010ba18 <__udivdi3+0x94>
1010ba04:	80e0983a 	sll	r16,r16,r3
1010ba08:	9884d83a 	srl	r2,r19,r2
1010ba0c:	30e2983a 	sll	r17,r6,r3
1010ba10:	98e4983a 	sll	r18,r19,r3
1010ba14:	142cb03a 	or	r22,r2,r16
1010ba18:	882ad43a 	srli	r21,r17,16
1010ba1c:	b009883a 	mov	r4,r22
1010ba20:	8d3fffcc 	andi	r20,r17,65535
1010ba24:	a80b883a 	mov	r5,r21
1010ba28:	0101a040 	call	10101a04 <__umodsi3>
1010ba2c:	b009883a 	mov	r4,r22
1010ba30:	a80b883a 	mov	r5,r21
1010ba34:	1027883a 	mov	r19,r2
1010ba38:	01019a00 	call	101019a0 <__udivsi3>
1010ba3c:	102d883a 	mov	r22,r2
1010ba40:	9826943a 	slli	r19,r19,16
1010ba44:	9004d43a 	srli	r2,r18,16
1010ba48:	a5a1383a 	mul	r16,r20,r22
1010ba4c:	14c4b03a 	or	r2,r2,r19
1010ba50:	1400052e 	bgeu	r2,r16,1010ba68 <__udivdi3+0xe4>
1010ba54:	1445883a 	add	r2,r2,r17
1010ba58:	b0ffffc4 	addi	r3,r22,-1
1010ba5c:	14400136 	bltu	r2,r17,1010ba64 <__udivdi3+0xe0>
1010ba60:	14012336 	bltu	r2,r16,1010bef0 <__udivdi3+0x56c>
1010ba64:	182d883a 	mov	r22,r3
1010ba68:	1421c83a 	sub	r16,r2,r16
1010ba6c:	a80b883a 	mov	r5,r21
1010ba70:	8009883a 	mov	r4,r16
1010ba74:	0101a040 	call	10101a04 <__umodsi3>
1010ba78:	1027883a 	mov	r19,r2
1010ba7c:	a80b883a 	mov	r5,r21
1010ba80:	8009883a 	mov	r4,r16
1010ba84:	01019a00 	call	101019a0 <__udivsi3>
1010ba88:	9826943a 	slli	r19,r19,16
1010ba8c:	a0a9383a 	mul	r20,r20,r2
1010ba90:	94bfffcc 	andi	r18,r18,65535
1010ba94:	94e4b03a 	or	r18,r18,r19
1010ba98:	9500052e 	bgeu	r18,r20,1010bab0 <__udivdi3+0x12c>
1010ba9c:	8ca5883a 	add	r18,r17,r18
1010baa0:	10ffffc4 	addi	r3,r2,-1
1010baa4:	9440f136 	bltu	r18,r17,1010be6c <__udivdi3+0x4e8>
1010baa8:	9500f02e 	bgeu	r18,r20,1010be6c <__udivdi3+0x4e8>
1010baac:	10bfff84 	addi	r2,r2,-2
1010bab0:	b00c943a 	slli	r6,r22,16
1010bab4:	0007883a 	mov	r3,zero
1010bab8:	3084b03a 	or	r2,r6,r2
1010babc:	00005906 	br	1010bc24 <__udivdi3+0x2a0>
1010bac0:	29c05636 	bltu	r5,r7,1010bc1c <__udivdi3+0x298>
1010bac4:	00bfffd4 	movui	r2,65535
1010bac8:	11c0622e 	bgeu	r2,r7,1010bc54 <__udivdi3+0x2d0>
1010bacc:	00804034 	movhi	r2,256
1010bad0:	10bfffc4 	addi	r2,r2,-1
1010bad4:	11c0ee36 	bltu	r2,r7,1010be90 <__udivdi3+0x50c>
1010bad8:	00800404 	movi	r2,16
1010badc:	3886d83a 	srl	r3,r7,r2
1010bae0:	01040474 	movhi	r4,4113
1010bae4:	21070a04 	addi	r4,r4,7208
1010bae8:	20c7883a 	add	r3,r4,r3
1010baec:	18c00003 	ldbu	r3,0(r3)
1010baf0:	05400804 	movi	r21,32
1010baf4:	1885883a 	add	r2,r3,r2
1010baf8:	a8abc83a 	sub	r21,r21,r2
1010bafc:	a800621e 	bne	r21,zero,1010bc88 <__udivdi3+0x304>
1010bb00:	3c00e936 	bltu	r7,r16,1010bea8 <__udivdi3+0x524>
1010bb04:	9985403a 	cmpgeu	r2,r19,r6
1010bb08:	0007883a 	mov	r3,zero
1010bb0c:	00004506 	br	1010bc24 <__udivdi3+0x2a0>
1010bb10:	3000041e 	bne	r6,zero,1010bb24 <__udivdi3+0x1a0>
1010bb14:	000b883a 	mov	r5,zero
1010bb18:	01000044 	movi	r4,1
1010bb1c:	01019a00 	call	101019a0 <__udivsi3>
1010bb20:	1023883a 	mov	r17,r2
1010bb24:	00bfffd4 	movui	r2,65535
1010bb28:	14404e2e 	bgeu	r2,r17,1010bc64 <__udivdi3+0x2e0>
1010bb2c:	00804034 	movhi	r2,256
1010bb30:	10bfffc4 	addi	r2,r2,-1
1010bb34:	1440d836 	bltu	r2,r17,1010be98 <__udivdi3+0x514>
1010bb38:	00800404 	movi	r2,16
1010bb3c:	8886d83a 	srl	r3,r17,r2
1010bb40:	01040474 	movhi	r4,4113
1010bb44:	21070a04 	addi	r4,r4,7208
1010bb48:	20c7883a 	add	r3,r4,r3
1010bb4c:	18c00003 	ldbu	r3,0(r3)
1010bb50:	1885883a 	add	r2,r3,r2
1010bb54:	00c00804 	movi	r3,32
1010bb58:	1887c83a 	sub	r3,r3,r2
1010bb5c:	18008f1e 	bne	r3,zero,1010bd9c <__udivdi3+0x418>
1010bb60:	882ad43a 	srli	r21,r17,16
1010bb64:	8461c83a 	sub	r16,r16,r17
1010bb68:	8d3fffcc 	andi	r20,r17,65535
1010bb6c:	00c00044 	movi	r3,1
1010bb70:	8009883a 	mov	r4,r16
1010bb74:	a80b883a 	mov	r5,r21
1010bb78:	d8c00015 	stw	r3,0(sp)
1010bb7c:	0101a040 	call	10101a04 <__umodsi3>
1010bb80:	8009883a 	mov	r4,r16
1010bb84:	a80b883a 	mov	r5,r21
1010bb88:	1027883a 	mov	r19,r2
1010bb8c:	01019a00 	call	101019a0 <__udivsi3>
1010bb90:	9826943a 	slli	r19,r19,16
1010bb94:	9008d43a 	srli	r4,r18,16
1010bb98:	1521383a 	mul	r16,r2,r20
1010bb9c:	102d883a 	mov	r22,r2
1010bba0:	24c8b03a 	or	r4,r4,r19
1010bba4:	d8c00017 	ldw	r3,0(sp)
1010bba8:	2400052e 	bgeu	r4,r16,1010bbc0 <__udivdi3+0x23c>
1010bbac:	2449883a 	add	r4,r4,r17
1010bbb0:	b0bfffc4 	addi	r2,r22,-1
1010bbb4:	24400136 	bltu	r4,r17,1010bbbc <__udivdi3+0x238>
1010bbb8:	2400ca36 	bltu	r4,r16,1010bee4 <__udivdi3+0x560>
1010bbbc:	102d883a 	mov	r22,r2
1010bbc0:	2421c83a 	sub	r16,r4,r16
1010bbc4:	a80b883a 	mov	r5,r21
1010bbc8:	8009883a 	mov	r4,r16
1010bbcc:	d8c00015 	stw	r3,0(sp)
1010bbd0:	0101a040 	call	10101a04 <__umodsi3>
1010bbd4:	1027883a 	mov	r19,r2
1010bbd8:	a80b883a 	mov	r5,r21
1010bbdc:	8009883a 	mov	r4,r16
1010bbe0:	01019a00 	call	101019a0 <__udivsi3>
1010bbe4:	9826943a 	slli	r19,r19,16
1010bbe8:	1529383a 	mul	r20,r2,r20
1010bbec:	94bfffcc 	andi	r18,r18,65535
1010bbf0:	94e4b03a 	or	r18,r18,r19
1010bbf4:	d8c00017 	ldw	r3,0(sp)
1010bbf8:	9500052e 	bgeu	r18,r20,1010bc10 <__udivdi3+0x28c>
1010bbfc:	8ca5883a 	add	r18,r17,r18
1010bc00:	113fffc4 	addi	r4,r2,-1
1010bc04:	94409736 	bltu	r18,r17,1010be64 <__udivdi3+0x4e0>
1010bc08:	9500962e 	bgeu	r18,r20,1010be64 <__udivdi3+0x4e0>
1010bc0c:	10bfff84 	addi	r2,r2,-2
1010bc10:	b00c943a 	slli	r6,r22,16
1010bc14:	3084b03a 	or	r2,r6,r2
1010bc18:	00000206 	br	1010bc24 <__udivdi3+0x2a0>
1010bc1c:	0007883a 	mov	r3,zero
1010bc20:	0005883a 	mov	r2,zero
1010bc24:	dfc00a17 	ldw	ra,40(sp)
1010bc28:	df000917 	ldw	fp,36(sp)
1010bc2c:	ddc00817 	ldw	r23,32(sp)
1010bc30:	dd800717 	ldw	r22,28(sp)
1010bc34:	dd400617 	ldw	r21,24(sp)
1010bc38:	dd000517 	ldw	r20,20(sp)
1010bc3c:	dcc00417 	ldw	r19,16(sp)
1010bc40:	dc800317 	ldw	r18,12(sp)
1010bc44:	dc400217 	ldw	r17,8(sp)
1010bc48:	dc000117 	ldw	r16,4(sp)
1010bc4c:	dec00b04 	addi	sp,sp,44
1010bc50:	f800283a 	ret
1010bc54:	00803fc4 	movi	r2,255
1010bc58:	11c5803a 	cmpltu	r2,r2,r7
1010bc5c:	100490fa 	slli	r2,r2,3
1010bc60:	003f9e06 	br	1010badc <__alt_data_end+0xfffebadc>
1010bc64:	00803fc4 	movi	r2,255
1010bc68:	1445803a 	cmpltu	r2,r2,r17
1010bc6c:	100490fa 	slli	r2,r2,3
1010bc70:	003fb206 	br	1010bb3c <__alt_data_end+0xfffebb3c>
1010bc74:	00804034 	movhi	r2,256
1010bc78:	10bfffc4 	addi	r2,r2,-1
1010bc7c:	11808836 	bltu	r2,r6,1010bea0 <__udivdi3+0x51c>
1010bc80:	00800404 	movi	r2,16
1010bc84:	003f5606 	br	1010b9e0 <__alt_data_end+0xfffeb9e0>
1010bc88:	30aed83a 	srl	r23,r6,r2
1010bc8c:	3d4e983a 	sll	r7,r7,r21
1010bc90:	80acd83a 	srl	r22,r16,r2
1010bc94:	9884d83a 	srl	r2,r19,r2
1010bc98:	3deeb03a 	or	r23,r7,r23
1010bc9c:	b824d43a 	srli	r18,r23,16
1010bca0:	8560983a 	sll	r16,r16,r21
1010bca4:	b009883a 	mov	r4,r22
1010bca8:	900b883a 	mov	r5,r18
1010bcac:	3568983a 	sll	r20,r6,r21
1010bcb0:	1420b03a 	or	r16,r2,r16
1010bcb4:	0101a040 	call	10101a04 <__umodsi3>
1010bcb8:	b009883a 	mov	r4,r22
1010bcbc:	900b883a 	mov	r5,r18
1010bcc0:	1023883a 	mov	r17,r2
1010bcc4:	01019a00 	call	101019a0 <__udivsi3>
1010bcc8:	8808943a 	slli	r4,r17,16
1010bccc:	bf3fffcc 	andi	fp,r23,65535
1010bcd0:	8006d43a 	srli	r3,r16,16
1010bcd4:	e0a3383a 	mul	r17,fp,r2
1010bcd8:	100d883a 	mov	r6,r2
1010bcdc:	1906b03a 	or	r3,r3,r4
1010bce0:	1c40042e 	bgeu	r3,r17,1010bcf4 <__udivdi3+0x370>
1010bce4:	1dc7883a 	add	r3,r3,r23
1010bce8:	10bfffc4 	addi	r2,r2,-1
1010bcec:	1dc0752e 	bgeu	r3,r23,1010bec4 <__udivdi3+0x540>
1010bcf0:	100d883a 	mov	r6,r2
1010bcf4:	1c63c83a 	sub	r17,r3,r17
1010bcf8:	900b883a 	mov	r5,r18
1010bcfc:	8809883a 	mov	r4,r17
1010bd00:	d9800015 	stw	r6,0(sp)
1010bd04:	0101a040 	call	10101a04 <__umodsi3>
1010bd08:	102d883a 	mov	r22,r2
1010bd0c:	8809883a 	mov	r4,r17
1010bd10:	900b883a 	mov	r5,r18
1010bd14:	01019a00 	call	101019a0 <__udivsi3>
1010bd18:	b02c943a 	slli	r22,r22,16
1010bd1c:	e089383a 	mul	r4,fp,r2
1010bd20:	843fffcc 	andi	r16,r16,65535
1010bd24:	85a0b03a 	or	r16,r16,r22
1010bd28:	d9800017 	ldw	r6,0(sp)
1010bd2c:	8100042e 	bgeu	r16,r4,1010bd40 <__udivdi3+0x3bc>
1010bd30:	85e1883a 	add	r16,r16,r23
1010bd34:	10ffffc4 	addi	r3,r2,-1
1010bd38:	85c05e2e 	bgeu	r16,r23,1010beb4 <__udivdi3+0x530>
1010bd3c:	1805883a 	mov	r2,r3
1010bd40:	300c943a 	slli	r6,r6,16
1010bd44:	a17fffcc 	andi	r5,r20,65535
1010bd48:	a028d43a 	srli	r20,r20,16
1010bd4c:	3084b03a 	or	r2,r6,r2
1010bd50:	10ffffcc 	andi	r3,r2,65535
1010bd54:	100cd43a 	srli	r6,r2,16
1010bd58:	194f383a 	mul	r7,r3,r5
1010bd5c:	1d07383a 	mul	r3,r3,r20
1010bd60:	314b383a 	mul	r5,r6,r5
1010bd64:	3810d43a 	srli	r8,r7,16
1010bd68:	8121c83a 	sub	r16,r16,r4
1010bd6c:	1947883a 	add	r3,r3,r5
1010bd70:	40c7883a 	add	r3,r8,r3
1010bd74:	350d383a 	mul	r6,r6,r20
1010bd78:	1940022e 	bgeu	r3,r5,1010bd84 <__udivdi3+0x400>
1010bd7c:	01000074 	movhi	r4,1
1010bd80:	310d883a 	add	r6,r6,r4
1010bd84:	1828d43a 	srli	r20,r3,16
1010bd88:	a18d883a 	add	r6,r20,r6
1010bd8c:	81803e36 	bltu	r16,r6,1010be88 <__udivdi3+0x504>
1010bd90:	81803826 	beq	r16,r6,1010be74 <__udivdi3+0x4f0>
1010bd94:	0007883a 	mov	r3,zero
1010bd98:	003fa206 	br	1010bc24 <__alt_data_end+0xfffebc24>
1010bd9c:	88e2983a 	sll	r17,r17,r3
1010bda0:	80a8d83a 	srl	r20,r16,r2
1010bda4:	80e0983a 	sll	r16,r16,r3
1010bda8:	882ad43a 	srli	r21,r17,16
1010bdac:	9884d83a 	srl	r2,r19,r2
1010bdb0:	a009883a 	mov	r4,r20
1010bdb4:	a80b883a 	mov	r5,r21
1010bdb8:	142eb03a 	or	r23,r2,r16
1010bdbc:	98e4983a 	sll	r18,r19,r3
1010bdc0:	0101a040 	call	10101a04 <__umodsi3>
1010bdc4:	a009883a 	mov	r4,r20
1010bdc8:	a80b883a 	mov	r5,r21
1010bdcc:	1021883a 	mov	r16,r2
1010bdd0:	01019a00 	call	101019a0 <__udivsi3>
1010bdd4:	1039883a 	mov	fp,r2
1010bdd8:	8d3fffcc 	andi	r20,r17,65535
1010bddc:	8020943a 	slli	r16,r16,16
1010bde0:	b804d43a 	srli	r2,r23,16
1010bde4:	a72d383a 	mul	r22,r20,fp
1010bde8:	1404b03a 	or	r2,r2,r16
1010bdec:	1580062e 	bgeu	r2,r22,1010be08 <__udivdi3+0x484>
1010bdf0:	1445883a 	add	r2,r2,r17
1010bdf4:	e0ffffc4 	addi	r3,fp,-1
1010bdf8:	14403836 	bltu	r2,r17,1010bedc <__udivdi3+0x558>
1010bdfc:	1580372e 	bgeu	r2,r22,1010bedc <__udivdi3+0x558>
1010be00:	e73fff84 	addi	fp,fp,-2
1010be04:	1445883a 	add	r2,r2,r17
1010be08:	15adc83a 	sub	r22,r2,r22
1010be0c:	a80b883a 	mov	r5,r21
1010be10:	b009883a 	mov	r4,r22
1010be14:	0101a040 	call	10101a04 <__umodsi3>
1010be18:	1027883a 	mov	r19,r2
1010be1c:	b009883a 	mov	r4,r22
1010be20:	a80b883a 	mov	r5,r21
1010be24:	01019a00 	call	101019a0 <__udivsi3>
1010be28:	9826943a 	slli	r19,r19,16
1010be2c:	a0a1383a 	mul	r16,r20,r2
1010be30:	b93fffcc 	andi	r4,r23,65535
1010be34:	24c8b03a 	or	r4,r4,r19
1010be38:	2400062e 	bgeu	r4,r16,1010be54 <__udivdi3+0x4d0>
1010be3c:	2449883a 	add	r4,r4,r17
1010be40:	10ffffc4 	addi	r3,r2,-1
1010be44:	24402336 	bltu	r4,r17,1010bed4 <__udivdi3+0x550>
1010be48:	2400222e 	bgeu	r4,r16,1010bed4 <__udivdi3+0x550>
1010be4c:	10bfff84 	addi	r2,r2,-2
1010be50:	2449883a 	add	r4,r4,r17
1010be54:	e038943a 	slli	fp,fp,16
1010be58:	2421c83a 	sub	r16,r4,r16
1010be5c:	e086b03a 	or	r3,fp,r2
1010be60:	003f4306 	br	1010bb70 <__alt_data_end+0xfffebb70>
1010be64:	2005883a 	mov	r2,r4
1010be68:	003f6906 	br	1010bc10 <__alt_data_end+0xfffebc10>
1010be6c:	1805883a 	mov	r2,r3
1010be70:	003f0f06 	br	1010bab0 <__alt_data_end+0xfffebab0>
1010be74:	1806943a 	slli	r3,r3,16
1010be78:	9d66983a 	sll	r19,r19,r21
1010be7c:	39ffffcc 	andi	r7,r7,65535
1010be80:	19c7883a 	add	r3,r3,r7
1010be84:	98ffc32e 	bgeu	r19,r3,1010bd94 <__alt_data_end+0xfffebd94>
1010be88:	10bfffc4 	addi	r2,r2,-1
1010be8c:	003fc106 	br	1010bd94 <__alt_data_end+0xfffebd94>
1010be90:	00800604 	movi	r2,24
1010be94:	003f1106 	br	1010badc <__alt_data_end+0xfffebadc>
1010be98:	00800604 	movi	r2,24
1010be9c:	003f2706 	br	1010bb3c <__alt_data_end+0xfffebb3c>
1010bea0:	00800604 	movi	r2,24
1010bea4:	003ece06 	br	1010b9e0 <__alt_data_end+0xfffeb9e0>
1010bea8:	0007883a 	mov	r3,zero
1010beac:	00800044 	movi	r2,1
1010beb0:	003f5c06 	br	1010bc24 <__alt_data_end+0xfffebc24>
1010beb4:	813fa12e 	bgeu	r16,r4,1010bd3c <__alt_data_end+0xfffebd3c>
1010beb8:	10bfff84 	addi	r2,r2,-2
1010bebc:	85e1883a 	add	r16,r16,r23
1010bec0:	003f9f06 	br	1010bd40 <__alt_data_end+0xfffebd40>
1010bec4:	1c7f8a2e 	bgeu	r3,r17,1010bcf0 <__alt_data_end+0xfffebcf0>
1010bec8:	31bfff84 	addi	r6,r6,-2
1010becc:	1dc7883a 	add	r3,r3,r23
1010bed0:	003f8806 	br	1010bcf4 <__alt_data_end+0xfffebcf4>
1010bed4:	1805883a 	mov	r2,r3
1010bed8:	003fde06 	br	1010be54 <__alt_data_end+0xfffebe54>
1010bedc:	1839883a 	mov	fp,r3
1010bee0:	003fc906 	br	1010be08 <__alt_data_end+0xfffebe08>
1010bee4:	b5bfff84 	addi	r22,r22,-2
1010bee8:	2449883a 	add	r4,r4,r17
1010beec:	003f3406 	br	1010bbc0 <__alt_data_end+0xfffebbc0>
1010bef0:	b5bfff84 	addi	r22,r22,-2
1010bef4:	1445883a 	add	r2,r2,r17
1010bef8:	003edb06 	br	1010ba68 <__alt_data_end+0xfffeba68>

1010befc <__umoddi3>:
1010befc:	defff404 	addi	sp,sp,-48
1010bf00:	df000a15 	stw	fp,40(sp)
1010bf04:	dc400315 	stw	r17,12(sp)
1010bf08:	dc000215 	stw	r16,8(sp)
1010bf0c:	dfc00b15 	stw	ra,44(sp)
1010bf10:	ddc00915 	stw	r23,36(sp)
1010bf14:	dd800815 	stw	r22,32(sp)
1010bf18:	dd400715 	stw	r21,28(sp)
1010bf1c:	dd000615 	stw	r20,24(sp)
1010bf20:	dcc00515 	stw	r19,20(sp)
1010bf24:	dc800415 	stw	r18,16(sp)
1010bf28:	2021883a 	mov	r16,r4
1010bf2c:	2823883a 	mov	r17,r5
1010bf30:	2839883a 	mov	fp,r5
1010bf34:	38003c1e 	bne	r7,zero,1010c028 <__umoddi3+0x12c>
1010bf38:	3027883a 	mov	r19,r6
1010bf3c:	2029883a 	mov	r20,r4
1010bf40:	2980512e 	bgeu	r5,r6,1010c088 <__umoddi3+0x18c>
1010bf44:	00bfffd4 	movui	r2,65535
1010bf48:	11809a36 	bltu	r2,r6,1010c1b4 <__umoddi3+0x2b8>
1010bf4c:	01003fc4 	movi	r4,255
1010bf50:	2189803a 	cmpltu	r4,r4,r6
1010bf54:	200890fa 	slli	r4,r4,3
1010bf58:	3104d83a 	srl	r2,r6,r4
1010bf5c:	00c40474 	movhi	r3,4113
1010bf60:	18c70a04 	addi	r3,r3,7208
1010bf64:	1885883a 	add	r2,r3,r2
1010bf68:	10c00003 	ldbu	r3,0(r2)
1010bf6c:	00800804 	movi	r2,32
1010bf70:	1909883a 	add	r4,r3,r4
1010bf74:	1125c83a 	sub	r18,r2,r4
1010bf78:	90000526 	beq	r18,zero,1010bf90 <__umoddi3+0x94>
1010bf7c:	8ca2983a 	sll	r17,r17,r18
1010bf80:	8108d83a 	srl	r4,r16,r4
1010bf84:	34a6983a 	sll	r19,r6,r18
1010bf88:	84a8983a 	sll	r20,r16,r18
1010bf8c:	2478b03a 	or	fp,r4,r17
1010bf90:	982ed43a 	srli	r23,r19,16
1010bf94:	e009883a 	mov	r4,fp
1010bf98:	9dbfffcc 	andi	r22,r19,65535
1010bf9c:	b80b883a 	mov	r5,r23
1010bfa0:	0101a040 	call	10101a04 <__umodsi3>
1010bfa4:	e009883a 	mov	r4,fp
1010bfa8:	b80b883a 	mov	r5,r23
1010bfac:	102b883a 	mov	r21,r2
1010bfb0:	01019a00 	call	101019a0 <__udivsi3>
1010bfb4:	a806943a 	slli	r3,r21,16
1010bfb8:	a008d43a 	srli	r4,r20,16
1010bfbc:	b085383a 	mul	r2,r22,r2
1010bfc0:	20c8b03a 	or	r4,r4,r3
1010bfc4:	2080032e 	bgeu	r4,r2,1010bfd4 <__umoddi3+0xd8>
1010bfc8:	24c9883a 	add	r4,r4,r19
1010bfcc:	24c00136 	bltu	r4,r19,1010bfd4 <__umoddi3+0xd8>
1010bfd0:	20811036 	bltu	r4,r2,1010c414 <__umoddi3+0x518>
1010bfd4:	20abc83a 	sub	r21,r4,r2
1010bfd8:	b80b883a 	mov	r5,r23
1010bfdc:	a809883a 	mov	r4,r21
1010bfe0:	0101a040 	call	10101a04 <__umodsi3>
1010bfe4:	1023883a 	mov	r17,r2
1010bfe8:	b80b883a 	mov	r5,r23
1010bfec:	a809883a 	mov	r4,r21
1010bff0:	01019a00 	call	101019a0 <__udivsi3>
1010bff4:	8822943a 	slli	r17,r17,16
1010bff8:	b085383a 	mul	r2,r22,r2
1010bffc:	a0ffffcc 	andi	r3,r20,65535
1010c000:	1c46b03a 	or	r3,r3,r17
1010c004:	1880042e 	bgeu	r3,r2,1010c018 <__umoddi3+0x11c>
1010c008:	1cc7883a 	add	r3,r3,r19
1010c00c:	1cc00236 	bltu	r3,r19,1010c018 <__umoddi3+0x11c>
1010c010:	1880012e 	bgeu	r3,r2,1010c018 <__umoddi3+0x11c>
1010c014:	1cc7883a 	add	r3,r3,r19
1010c018:	1885c83a 	sub	r2,r3,r2
1010c01c:	1484d83a 	srl	r2,r2,r18
1010c020:	0007883a 	mov	r3,zero
1010c024:	00004f06 	br	1010c164 <__umoddi3+0x268>
1010c028:	29c04c36 	bltu	r5,r7,1010c15c <__umoddi3+0x260>
1010c02c:	00bfffd4 	movui	r2,65535
1010c030:	11c0582e 	bgeu	r2,r7,1010c194 <__umoddi3+0x298>
1010c034:	00804034 	movhi	r2,256
1010c038:	10bfffc4 	addi	r2,r2,-1
1010c03c:	11c0e736 	bltu	r2,r7,1010c3dc <__umoddi3+0x4e0>
1010c040:	01000404 	movi	r4,16
1010c044:	3904d83a 	srl	r2,r7,r4
1010c048:	00c40474 	movhi	r3,4113
1010c04c:	18c70a04 	addi	r3,r3,7208
1010c050:	1885883a 	add	r2,r3,r2
1010c054:	14c00003 	ldbu	r19,0(r2)
1010c058:	00c00804 	movi	r3,32
1010c05c:	9927883a 	add	r19,r19,r4
1010c060:	1ce9c83a 	sub	r20,r3,r19
1010c064:	a000581e 	bne	r20,zero,1010c1c8 <__umoddi3+0x2cc>
1010c068:	3c400136 	bltu	r7,r17,1010c070 <__umoddi3+0x174>
1010c06c:	8180eb36 	bltu	r16,r6,1010c41c <__umoddi3+0x520>
1010c070:	8185c83a 	sub	r2,r16,r6
1010c074:	89e3c83a 	sub	r17,r17,r7
1010c078:	8089803a 	cmpltu	r4,r16,r2
1010c07c:	8939c83a 	sub	fp,r17,r4
1010c080:	e007883a 	mov	r3,fp
1010c084:	00003706 	br	1010c164 <__umoddi3+0x268>
1010c088:	3000041e 	bne	r6,zero,1010c09c <__umoddi3+0x1a0>
1010c08c:	000b883a 	mov	r5,zero
1010c090:	01000044 	movi	r4,1
1010c094:	01019a00 	call	101019a0 <__udivsi3>
1010c098:	1027883a 	mov	r19,r2
1010c09c:	00bfffd4 	movui	r2,65535
1010c0a0:	14c0402e 	bgeu	r2,r19,1010c1a4 <__umoddi3+0x2a8>
1010c0a4:	00804034 	movhi	r2,256
1010c0a8:	10bfffc4 	addi	r2,r2,-1
1010c0ac:	14c0cd36 	bltu	r2,r19,1010c3e4 <__umoddi3+0x4e8>
1010c0b0:	00800404 	movi	r2,16
1010c0b4:	9886d83a 	srl	r3,r19,r2
1010c0b8:	01040474 	movhi	r4,4113
1010c0bc:	21070a04 	addi	r4,r4,7208
1010c0c0:	20c7883a 	add	r3,r4,r3
1010c0c4:	18c00003 	ldbu	r3,0(r3)
1010c0c8:	1887883a 	add	r3,r3,r2
1010c0cc:	00800804 	movi	r2,32
1010c0d0:	10e5c83a 	sub	r18,r2,r3
1010c0d4:	9000901e 	bne	r18,zero,1010c318 <__umoddi3+0x41c>
1010c0d8:	982cd43a 	srli	r22,r19,16
1010c0dc:	8ce3c83a 	sub	r17,r17,r19
1010c0e0:	9d7fffcc 	andi	r21,r19,65535
1010c0e4:	b00b883a 	mov	r5,r22
1010c0e8:	8809883a 	mov	r4,r17
1010c0ec:	0101a040 	call	10101a04 <__umodsi3>
1010c0f0:	8809883a 	mov	r4,r17
1010c0f4:	b00b883a 	mov	r5,r22
1010c0f8:	1021883a 	mov	r16,r2
1010c0fc:	01019a00 	call	101019a0 <__udivsi3>
1010c100:	8006943a 	slli	r3,r16,16
1010c104:	a008d43a 	srli	r4,r20,16
1010c108:	1545383a 	mul	r2,r2,r21
1010c10c:	20c8b03a 	or	r4,r4,r3
1010c110:	2080042e 	bgeu	r4,r2,1010c124 <__umoddi3+0x228>
1010c114:	24c9883a 	add	r4,r4,r19
1010c118:	24c00236 	bltu	r4,r19,1010c124 <__umoddi3+0x228>
1010c11c:	2080012e 	bgeu	r4,r2,1010c124 <__umoddi3+0x228>
1010c120:	24c9883a 	add	r4,r4,r19
1010c124:	20a1c83a 	sub	r16,r4,r2
1010c128:	b00b883a 	mov	r5,r22
1010c12c:	8009883a 	mov	r4,r16
1010c130:	0101a040 	call	10101a04 <__umodsi3>
1010c134:	1023883a 	mov	r17,r2
1010c138:	b00b883a 	mov	r5,r22
1010c13c:	8009883a 	mov	r4,r16
1010c140:	01019a00 	call	101019a0 <__udivsi3>
1010c144:	8822943a 	slli	r17,r17,16
1010c148:	1545383a 	mul	r2,r2,r21
1010c14c:	a53fffcc 	andi	r20,r20,65535
1010c150:	a446b03a 	or	r3,r20,r17
1010c154:	18bfb02e 	bgeu	r3,r2,1010c018 <__alt_data_end+0xfffec018>
1010c158:	003fab06 	br	1010c008 <__alt_data_end+0xfffec008>
1010c15c:	2005883a 	mov	r2,r4
1010c160:	2807883a 	mov	r3,r5
1010c164:	dfc00b17 	ldw	ra,44(sp)
1010c168:	df000a17 	ldw	fp,40(sp)
1010c16c:	ddc00917 	ldw	r23,36(sp)
1010c170:	dd800817 	ldw	r22,32(sp)
1010c174:	dd400717 	ldw	r21,28(sp)
1010c178:	dd000617 	ldw	r20,24(sp)
1010c17c:	dcc00517 	ldw	r19,20(sp)
1010c180:	dc800417 	ldw	r18,16(sp)
1010c184:	dc400317 	ldw	r17,12(sp)
1010c188:	dc000217 	ldw	r16,8(sp)
1010c18c:	dec00c04 	addi	sp,sp,48
1010c190:	f800283a 	ret
1010c194:	04c03fc4 	movi	r19,255
1010c198:	99c9803a 	cmpltu	r4,r19,r7
1010c19c:	200890fa 	slli	r4,r4,3
1010c1a0:	003fa806 	br	1010c044 <__alt_data_end+0xfffec044>
1010c1a4:	00803fc4 	movi	r2,255
1010c1a8:	14c5803a 	cmpltu	r2,r2,r19
1010c1ac:	100490fa 	slli	r2,r2,3
1010c1b0:	003fc006 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c1b4:	00804034 	movhi	r2,256
1010c1b8:	10bfffc4 	addi	r2,r2,-1
1010c1bc:	11808b36 	bltu	r2,r6,1010c3ec <__umoddi3+0x4f0>
1010c1c0:	01000404 	movi	r4,16
1010c1c4:	003f6406 	br	1010bf58 <__alt_data_end+0xfffebf58>
1010c1c8:	34c4d83a 	srl	r2,r6,r19
1010c1cc:	3d0e983a 	sll	r7,r7,r20
1010c1d0:	8cf8d83a 	srl	fp,r17,r19
1010c1d4:	8d10983a 	sll	r8,r17,r20
1010c1d8:	38aab03a 	or	r21,r7,r2
1010c1dc:	a82cd43a 	srli	r22,r21,16
1010c1e0:	84e2d83a 	srl	r17,r16,r19
1010c1e4:	e009883a 	mov	r4,fp
1010c1e8:	b00b883a 	mov	r5,r22
1010c1ec:	8a22b03a 	or	r17,r17,r8
1010c1f0:	3524983a 	sll	r18,r6,r20
1010c1f4:	0101a040 	call	10101a04 <__umodsi3>
1010c1f8:	e009883a 	mov	r4,fp
1010c1fc:	b00b883a 	mov	r5,r22
1010c200:	102f883a 	mov	r23,r2
1010c204:	01019a00 	call	101019a0 <__udivsi3>
1010c208:	100d883a 	mov	r6,r2
1010c20c:	b808943a 	slli	r4,r23,16
1010c210:	aa3fffcc 	andi	r8,r21,65535
1010c214:	8804d43a 	srli	r2,r17,16
1010c218:	41af383a 	mul	r23,r8,r6
1010c21c:	8520983a 	sll	r16,r16,r20
1010c220:	1104b03a 	or	r2,r2,r4
1010c224:	15c0042e 	bgeu	r2,r23,1010c238 <__umoddi3+0x33c>
1010c228:	1545883a 	add	r2,r2,r21
1010c22c:	30ffffc4 	addi	r3,r6,-1
1010c230:	1540742e 	bgeu	r2,r21,1010c404 <__umoddi3+0x508>
1010c234:	180d883a 	mov	r6,r3
1010c238:	15efc83a 	sub	r23,r2,r23
1010c23c:	b00b883a 	mov	r5,r22
1010c240:	b809883a 	mov	r4,r23
1010c244:	d9800115 	stw	r6,4(sp)
1010c248:	da000015 	stw	r8,0(sp)
1010c24c:	0101a040 	call	10101a04 <__umodsi3>
1010c250:	b00b883a 	mov	r5,r22
1010c254:	b809883a 	mov	r4,r23
1010c258:	1039883a 	mov	fp,r2
1010c25c:	01019a00 	call	101019a0 <__udivsi3>
1010c260:	da000017 	ldw	r8,0(sp)
1010c264:	e038943a 	slli	fp,fp,16
1010c268:	100b883a 	mov	r5,r2
1010c26c:	4089383a 	mul	r4,r8,r2
1010c270:	8a3fffcc 	andi	r8,r17,65535
1010c274:	4710b03a 	or	r8,r8,fp
1010c278:	d9800117 	ldw	r6,4(sp)
1010c27c:	4100042e 	bgeu	r8,r4,1010c290 <__umoddi3+0x394>
1010c280:	4551883a 	add	r8,r8,r21
1010c284:	10bfffc4 	addi	r2,r2,-1
1010c288:	45405a2e 	bgeu	r8,r21,1010c3f4 <__umoddi3+0x4f8>
1010c28c:	100b883a 	mov	r5,r2
1010c290:	300c943a 	slli	r6,r6,16
1010c294:	91ffffcc 	andi	r7,r18,65535
1010c298:	9004d43a 	srli	r2,r18,16
1010c29c:	314cb03a 	or	r6,r6,r5
1010c2a0:	317fffcc 	andi	r5,r6,65535
1010c2a4:	300cd43a 	srli	r6,r6,16
1010c2a8:	29d3383a 	mul	r9,r5,r7
1010c2ac:	288b383a 	mul	r5,r5,r2
1010c2b0:	31cf383a 	mul	r7,r6,r7
1010c2b4:	4806d43a 	srli	r3,r9,16
1010c2b8:	4111c83a 	sub	r8,r8,r4
1010c2bc:	29cb883a 	add	r5,r5,r7
1010c2c0:	194b883a 	add	r5,r3,r5
1010c2c4:	3085383a 	mul	r2,r6,r2
1010c2c8:	29c0022e 	bgeu	r5,r7,1010c2d4 <__umoddi3+0x3d8>
1010c2cc:	00c00074 	movhi	r3,1
1010c2d0:	10c5883a 	add	r2,r2,r3
1010c2d4:	2808d43a 	srli	r4,r5,16
1010c2d8:	280a943a 	slli	r5,r5,16
1010c2dc:	4a7fffcc 	andi	r9,r9,65535
1010c2e0:	2085883a 	add	r2,r4,r2
1010c2e4:	2a4b883a 	add	r5,r5,r9
1010c2e8:	40803636 	bltu	r8,r2,1010c3c4 <__umoddi3+0x4c8>
1010c2ec:	40804d26 	beq	r8,r2,1010c424 <__umoddi3+0x528>
1010c2f0:	4089c83a 	sub	r4,r8,r2
1010c2f4:	280f883a 	mov	r7,r5
1010c2f8:	81cfc83a 	sub	r7,r16,r7
1010c2fc:	81c7803a 	cmpltu	r3,r16,r7
1010c300:	20c7c83a 	sub	r3,r4,r3
1010c304:	1cc4983a 	sll	r2,r3,r19
1010c308:	3d0ed83a 	srl	r7,r7,r20
1010c30c:	1d06d83a 	srl	r3,r3,r20
1010c310:	11c4b03a 	or	r2,r2,r7
1010c314:	003f9306 	br	1010c164 <__alt_data_end+0xfffec164>
1010c318:	9ca6983a 	sll	r19,r19,r18
1010c31c:	88e8d83a 	srl	r20,r17,r3
1010c320:	80c4d83a 	srl	r2,r16,r3
1010c324:	982cd43a 	srli	r22,r19,16
1010c328:	8ca2983a 	sll	r17,r17,r18
1010c32c:	a009883a 	mov	r4,r20
1010c330:	b00b883a 	mov	r5,r22
1010c334:	1478b03a 	or	fp,r2,r17
1010c338:	0101a040 	call	10101a04 <__umodsi3>
1010c33c:	a009883a 	mov	r4,r20
1010c340:	b00b883a 	mov	r5,r22
1010c344:	1023883a 	mov	r17,r2
1010c348:	01019a00 	call	101019a0 <__udivsi3>
1010c34c:	9d7fffcc 	andi	r21,r19,65535
1010c350:	880a943a 	slli	r5,r17,16
1010c354:	e008d43a 	srli	r4,fp,16
1010c358:	a885383a 	mul	r2,r21,r2
1010c35c:	84a8983a 	sll	r20,r16,r18
1010c360:	2148b03a 	or	r4,r4,r5
1010c364:	2080042e 	bgeu	r4,r2,1010c378 <__umoddi3+0x47c>
1010c368:	24c9883a 	add	r4,r4,r19
1010c36c:	24c00236 	bltu	r4,r19,1010c378 <__umoddi3+0x47c>
1010c370:	2080012e 	bgeu	r4,r2,1010c378 <__umoddi3+0x47c>
1010c374:	24c9883a 	add	r4,r4,r19
1010c378:	20a3c83a 	sub	r17,r4,r2
1010c37c:	b00b883a 	mov	r5,r22
1010c380:	8809883a 	mov	r4,r17
1010c384:	0101a040 	call	10101a04 <__umodsi3>
1010c388:	102f883a 	mov	r23,r2
1010c38c:	8809883a 	mov	r4,r17
1010c390:	b00b883a 	mov	r5,r22
1010c394:	01019a00 	call	101019a0 <__udivsi3>
1010c398:	b82e943a 	slli	r23,r23,16
1010c39c:	a885383a 	mul	r2,r21,r2
1010c3a0:	e13fffcc 	andi	r4,fp,65535
1010c3a4:	25c8b03a 	or	r4,r4,r23
1010c3a8:	2080042e 	bgeu	r4,r2,1010c3bc <__umoddi3+0x4c0>
1010c3ac:	24c9883a 	add	r4,r4,r19
1010c3b0:	24c00236 	bltu	r4,r19,1010c3bc <__umoddi3+0x4c0>
1010c3b4:	2080012e 	bgeu	r4,r2,1010c3bc <__umoddi3+0x4c0>
1010c3b8:	24c9883a 	add	r4,r4,r19
1010c3bc:	20a3c83a 	sub	r17,r4,r2
1010c3c0:	003f4806 	br	1010c0e4 <__alt_data_end+0xfffec0e4>
1010c3c4:	2c8fc83a 	sub	r7,r5,r18
1010c3c8:	1545c83a 	sub	r2,r2,r21
1010c3cc:	29cb803a 	cmpltu	r5,r5,r7
1010c3d0:	1145c83a 	sub	r2,r2,r5
1010c3d4:	4089c83a 	sub	r4,r8,r2
1010c3d8:	003fc706 	br	1010c2f8 <__alt_data_end+0xfffec2f8>
1010c3dc:	01000604 	movi	r4,24
1010c3e0:	003f1806 	br	1010c044 <__alt_data_end+0xfffec044>
1010c3e4:	00800604 	movi	r2,24
1010c3e8:	003f3206 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c3ec:	01000604 	movi	r4,24
1010c3f0:	003ed906 	br	1010bf58 <__alt_data_end+0xfffebf58>
1010c3f4:	413fa52e 	bgeu	r8,r4,1010c28c <__alt_data_end+0xfffec28c>
1010c3f8:	297fff84 	addi	r5,r5,-2
1010c3fc:	4551883a 	add	r8,r8,r21
1010c400:	003fa306 	br	1010c290 <__alt_data_end+0xfffec290>
1010c404:	15ff8b2e 	bgeu	r2,r23,1010c234 <__alt_data_end+0xfffec234>
1010c408:	31bfff84 	addi	r6,r6,-2
1010c40c:	1545883a 	add	r2,r2,r21
1010c410:	003f8906 	br	1010c238 <__alt_data_end+0xfffec238>
1010c414:	24c9883a 	add	r4,r4,r19
1010c418:	003eee06 	br	1010bfd4 <__alt_data_end+0xfffebfd4>
1010c41c:	8005883a 	mov	r2,r16
1010c420:	003f1706 	br	1010c080 <__alt_data_end+0xfffec080>
1010c424:	817fe736 	bltu	r16,r5,1010c3c4 <__alt_data_end+0xfffec3c4>
1010c428:	280f883a 	mov	r7,r5
1010c42c:	0009883a 	mov	r4,zero
1010c430:	003fb106 	br	1010c2f8 <__alt_data_end+0xfffec2f8>

1010c434 <__adddf3>:
1010c434:	02c00434 	movhi	r11,16
1010c438:	5affffc4 	addi	r11,r11,-1
1010c43c:	2806d7fa 	srli	r3,r5,31
1010c440:	2ad4703a 	and	r10,r5,r11
1010c444:	3ad2703a 	and	r9,r7,r11
1010c448:	3804d53a 	srli	r2,r7,20
1010c44c:	3018d77a 	srli	r12,r6,29
1010c450:	280ad53a 	srli	r5,r5,20
1010c454:	501490fa 	slli	r10,r10,3
1010c458:	2010d77a 	srli	r8,r4,29
1010c45c:	481290fa 	slli	r9,r9,3
1010c460:	380ed7fa 	srli	r7,r7,31
1010c464:	defffb04 	addi	sp,sp,-20
1010c468:	dc800215 	stw	r18,8(sp)
1010c46c:	dc400115 	stw	r17,4(sp)
1010c470:	dc000015 	stw	r16,0(sp)
1010c474:	dfc00415 	stw	ra,16(sp)
1010c478:	dcc00315 	stw	r19,12(sp)
1010c47c:	1c803fcc 	andi	r18,r3,255
1010c480:	2c01ffcc 	andi	r16,r5,2047
1010c484:	5210b03a 	or	r8,r10,r8
1010c488:	202290fa 	slli	r17,r4,3
1010c48c:	1081ffcc 	andi	r2,r2,2047
1010c490:	4b12b03a 	or	r9,r9,r12
1010c494:	300c90fa 	slli	r6,r6,3
1010c498:	91c07526 	beq	r18,r7,1010c670 <__adddf3+0x23c>
1010c49c:	8087c83a 	sub	r3,r16,r2
1010c4a0:	00c0ab0e 	bge	zero,r3,1010c750 <__adddf3+0x31c>
1010c4a4:	10002a1e 	bne	r2,zero,1010c550 <__adddf3+0x11c>
1010c4a8:	4984b03a 	or	r2,r9,r6
1010c4ac:	1000961e 	bne	r2,zero,1010c708 <__adddf3+0x2d4>
1010c4b0:	888001cc 	andi	r2,r17,7
1010c4b4:	10000726 	beq	r2,zero,1010c4d4 <__adddf3+0xa0>
1010c4b8:	888003cc 	andi	r2,r17,15
1010c4bc:	00c00104 	movi	r3,4
1010c4c0:	10c00426 	beq	r2,r3,1010c4d4 <__adddf3+0xa0>
1010c4c4:	88c7883a 	add	r3,r17,r3
1010c4c8:	1c63803a 	cmpltu	r17,r3,r17
1010c4cc:	4451883a 	add	r8,r8,r17
1010c4d0:	1823883a 	mov	r17,r3
1010c4d4:	4080202c 	andhi	r2,r8,128
1010c4d8:	10005926 	beq	r2,zero,1010c640 <__adddf3+0x20c>
1010c4dc:	84000044 	addi	r16,r16,1
1010c4e0:	0081ffc4 	movi	r2,2047
1010c4e4:	8080ba26 	beq	r16,r2,1010c7d0 <__adddf3+0x39c>
1010c4e8:	00bfe034 	movhi	r2,65408
1010c4ec:	10bfffc4 	addi	r2,r2,-1
1010c4f0:	4090703a 	and	r8,r8,r2
1010c4f4:	4004977a 	slli	r2,r8,29
1010c4f8:	4010927a 	slli	r8,r8,9
1010c4fc:	8822d0fa 	srli	r17,r17,3
1010c500:	8401ffcc 	andi	r16,r16,2047
1010c504:	4010d33a 	srli	r8,r8,12
1010c508:	9007883a 	mov	r3,r18
1010c50c:	1444b03a 	or	r2,r2,r17
1010c510:	8401ffcc 	andi	r16,r16,2047
1010c514:	8020953a 	slli	r16,r16,20
1010c518:	18c03fcc 	andi	r3,r3,255
1010c51c:	01000434 	movhi	r4,16
1010c520:	213fffc4 	addi	r4,r4,-1
1010c524:	180697fa 	slli	r3,r3,31
1010c528:	4110703a 	and	r8,r8,r4
1010c52c:	4410b03a 	or	r8,r8,r16
1010c530:	40c6b03a 	or	r3,r8,r3
1010c534:	dfc00417 	ldw	ra,16(sp)
1010c538:	dcc00317 	ldw	r19,12(sp)
1010c53c:	dc800217 	ldw	r18,8(sp)
1010c540:	dc400117 	ldw	r17,4(sp)
1010c544:	dc000017 	ldw	r16,0(sp)
1010c548:	dec00504 	addi	sp,sp,20
1010c54c:	f800283a 	ret
1010c550:	0081ffc4 	movi	r2,2047
1010c554:	80bfd626 	beq	r16,r2,1010c4b0 <__alt_data_end+0xfffec4b0>
1010c558:	4a402034 	orhi	r9,r9,128
1010c55c:	00800e04 	movi	r2,56
1010c560:	10c09f16 	blt	r2,r3,1010c7e0 <__adddf3+0x3ac>
1010c564:	008007c4 	movi	r2,31
1010c568:	10c0c216 	blt	r2,r3,1010c874 <__adddf3+0x440>
1010c56c:	00800804 	movi	r2,32
1010c570:	10c5c83a 	sub	r2,r2,r3
1010c574:	488a983a 	sll	r5,r9,r2
1010c578:	30c8d83a 	srl	r4,r6,r3
1010c57c:	3084983a 	sll	r2,r6,r2
1010c580:	48c6d83a 	srl	r3,r9,r3
1010c584:	290cb03a 	or	r6,r5,r4
1010c588:	1004c03a 	cmpne	r2,r2,zero
1010c58c:	308cb03a 	or	r6,r6,r2
1010c590:	898dc83a 	sub	r6,r17,r6
1010c594:	89a3803a 	cmpltu	r17,r17,r6
1010c598:	40d1c83a 	sub	r8,r8,r3
1010c59c:	4451c83a 	sub	r8,r8,r17
1010c5a0:	3023883a 	mov	r17,r6
1010c5a4:	4080202c 	andhi	r2,r8,128
1010c5a8:	10002326 	beq	r2,zero,1010c638 <__adddf3+0x204>
1010c5ac:	04c02034 	movhi	r19,128
1010c5b0:	9cffffc4 	addi	r19,r19,-1
1010c5b4:	44e6703a 	and	r19,r8,r19
1010c5b8:	98007626 	beq	r19,zero,1010c794 <__adddf3+0x360>
1010c5bc:	9809883a 	mov	r4,r19
1010c5c0:	010ea380 	call	1010ea38 <__clzsi2>
1010c5c4:	10fffe04 	addi	r3,r2,-8
1010c5c8:	010007c4 	movi	r4,31
1010c5cc:	20c07716 	blt	r4,r3,1010c7ac <__adddf3+0x378>
1010c5d0:	00800804 	movi	r2,32
1010c5d4:	10c5c83a 	sub	r2,r2,r3
1010c5d8:	8884d83a 	srl	r2,r17,r2
1010c5dc:	98d0983a 	sll	r8,r19,r3
1010c5e0:	88e2983a 	sll	r17,r17,r3
1010c5e4:	1204b03a 	or	r2,r2,r8
1010c5e8:	1c007416 	blt	r3,r16,1010c7bc <__adddf3+0x388>
1010c5ec:	1c21c83a 	sub	r16,r3,r16
1010c5f0:	82000044 	addi	r8,r16,1
1010c5f4:	00c007c4 	movi	r3,31
1010c5f8:	1a009116 	blt	r3,r8,1010c840 <__adddf3+0x40c>
1010c5fc:	00c00804 	movi	r3,32
1010c600:	1a07c83a 	sub	r3,r3,r8
1010c604:	8a08d83a 	srl	r4,r17,r8
1010c608:	88e2983a 	sll	r17,r17,r3
1010c60c:	10c6983a 	sll	r3,r2,r3
1010c610:	1210d83a 	srl	r8,r2,r8
1010c614:	8804c03a 	cmpne	r2,r17,zero
1010c618:	1906b03a 	or	r3,r3,r4
1010c61c:	18a2b03a 	or	r17,r3,r2
1010c620:	0021883a 	mov	r16,zero
1010c624:	003fa206 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c628:	1890b03a 	or	r8,r3,r2
1010c62c:	40017d26 	beq	r8,zero,1010cc24 <__adddf3+0x7f0>
1010c630:	1011883a 	mov	r8,r2
1010c634:	1823883a 	mov	r17,r3
1010c638:	888001cc 	andi	r2,r17,7
1010c63c:	103f9e1e 	bne	r2,zero,1010c4b8 <__alt_data_end+0xfffec4b8>
1010c640:	4004977a 	slli	r2,r8,29
1010c644:	8822d0fa 	srli	r17,r17,3
1010c648:	4010d0fa 	srli	r8,r8,3
1010c64c:	9007883a 	mov	r3,r18
1010c650:	1444b03a 	or	r2,r2,r17
1010c654:	0101ffc4 	movi	r4,2047
1010c658:	81002426 	beq	r16,r4,1010c6ec <__adddf3+0x2b8>
1010c65c:	8120703a 	and	r16,r16,r4
1010c660:	01000434 	movhi	r4,16
1010c664:	213fffc4 	addi	r4,r4,-1
1010c668:	4110703a 	and	r8,r8,r4
1010c66c:	003fa806 	br	1010c510 <__alt_data_end+0xfffec510>
1010c670:	8089c83a 	sub	r4,r16,r2
1010c674:	01005e0e 	bge	zero,r4,1010c7f0 <__adddf3+0x3bc>
1010c678:	10002b26 	beq	r2,zero,1010c728 <__adddf3+0x2f4>
1010c67c:	0081ffc4 	movi	r2,2047
1010c680:	80bf8b26 	beq	r16,r2,1010c4b0 <__alt_data_end+0xfffec4b0>
1010c684:	4a402034 	orhi	r9,r9,128
1010c688:	00800e04 	movi	r2,56
1010c68c:	1100a40e 	bge	r2,r4,1010c920 <__adddf3+0x4ec>
1010c690:	498cb03a 	or	r6,r9,r6
1010c694:	300ac03a 	cmpne	r5,r6,zero
1010c698:	0013883a 	mov	r9,zero
1010c69c:	2c4b883a 	add	r5,r5,r17
1010c6a0:	2c63803a 	cmpltu	r17,r5,r17
1010c6a4:	4a11883a 	add	r8,r9,r8
1010c6a8:	8a11883a 	add	r8,r17,r8
1010c6ac:	2823883a 	mov	r17,r5
1010c6b0:	4080202c 	andhi	r2,r8,128
1010c6b4:	103fe026 	beq	r2,zero,1010c638 <__alt_data_end+0xfffec638>
1010c6b8:	84000044 	addi	r16,r16,1
1010c6bc:	0081ffc4 	movi	r2,2047
1010c6c0:	8080d226 	beq	r16,r2,1010ca0c <__adddf3+0x5d8>
1010c6c4:	00bfe034 	movhi	r2,65408
1010c6c8:	10bfffc4 	addi	r2,r2,-1
1010c6cc:	4090703a 	and	r8,r8,r2
1010c6d0:	880ad07a 	srli	r5,r17,1
1010c6d4:	400897fa 	slli	r4,r8,31
1010c6d8:	88c0004c 	andi	r3,r17,1
1010c6dc:	28e2b03a 	or	r17,r5,r3
1010c6e0:	4010d07a 	srli	r8,r8,1
1010c6e4:	2462b03a 	or	r17,r4,r17
1010c6e8:	003f7106 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c6ec:	4088b03a 	or	r4,r8,r2
1010c6f0:	20014526 	beq	r4,zero,1010cc08 <__adddf3+0x7d4>
1010c6f4:	01000434 	movhi	r4,16
1010c6f8:	42000234 	orhi	r8,r8,8
1010c6fc:	213fffc4 	addi	r4,r4,-1
1010c700:	4110703a 	and	r8,r8,r4
1010c704:	003f8206 	br	1010c510 <__alt_data_end+0xfffec510>
1010c708:	18ffffc4 	addi	r3,r3,-1
1010c70c:	1800491e 	bne	r3,zero,1010c834 <__adddf3+0x400>
1010c710:	898bc83a 	sub	r5,r17,r6
1010c714:	8963803a 	cmpltu	r17,r17,r5
1010c718:	4251c83a 	sub	r8,r8,r9
1010c71c:	4451c83a 	sub	r8,r8,r17
1010c720:	2823883a 	mov	r17,r5
1010c724:	003f9f06 	br	1010c5a4 <__alt_data_end+0xfffec5a4>
1010c728:	4984b03a 	or	r2,r9,r6
1010c72c:	103f6026 	beq	r2,zero,1010c4b0 <__alt_data_end+0xfffec4b0>
1010c730:	213fffc4 	addi	r4,r4,-1
1010c734:	2000931e 	bne	r4,zero,1010c984 <__adddf3+0x550>
1010c738:	898d883a 	add	r6,r17,r6
1010c73c:	3463803a 	cmpltu	r17,r6,r17
1010c740:	4251883a 	add	r8,r8,r9
1010c744:	8a11883a 	add	r8,r17,r8
1010c748:	3023883a 	mov	r17,r6
1010c74c:	003fd806 	br	1010c6b0 <__alt_data_end+0xfffec6b0>
1010c750:	1800541e 	bne	r3,zero,1010c8a4 <__adddf3+0x470>
1010c754:	80800044 	addi	r2,r16,1
1010c758:	1081ffcc 	andi	r2,r2,2047
1010c75c:	00c00044 	movi	r3,1
1010c760:	1880a00e 	bge	r3,r2,1010c9e4 <__adddf3+0x5b0>
1010c764:	8989c83a 	sub	r4,r17,r6
1010c768:	8905803a 	cmpltu	r2,r17,r4
1010c76c:	4267c83a 	sub	r19,r8,r9
1010c770:	98a7c83a 	sub	r19,r19,r2
1010c774:	9880202c 	andhi	r2,r19,128
1010c778:	10006326 	beq	r2,zero,1010c908 <__adddf3+0x4d4>
1010c77c:	3463c83a 	sub	r17,r6,r17
1010c780:	4a07c83a 	sub	r3,r9,r8
1010c784:	344d803a 	cmpltu	r6,r6,r17
1010c788:	19a7c83a 	sub	r19,r3,r6
1010c78c:	3825883a 	mov	r18,r7
1010c790:	983f8a1e 	bne	r19,zero,1010c5bc <__alt_data_end+0xfffec5bc>
1010c794:	8809883a 	mov	r4,r17
1010c798:	010ea380 	call	1010ea38 <__clzsi2>
1010c79c:	10800804 	addi	r2,r2,32
1010c7a0:	10fffe04 	addi	r3,r2,-8
1010c7a4:	010007c4 	movi	r4,31
1010c7a8:	20ff890e 	bge	r4,r3,1010c5d0 <__alt_data_end+0xfffec5d0>
1010c7ac:	10bff604 	addi	r2,r2,-40
1010c7b0:	8884983a 	sll	r2,r17,r2
1010c7b4:	0023883a 	mov	r17,zero
1010c7b8:	1c3f8c0e 	bge	r3,r16,1010c5ec <__alt_data_end+0xfffec5ec>
1010c7bc:	023fe034 	movhi	r8,65408
1010c7c0:	423fffc4 	addi	r8,r8,-1
1010c7c4:	80e1c83a 	sub	r16,r16,r3
1010c7c8:	1210703a 	and	r8,r2,r8
1010c7cc:	003f3806 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c7d0:	9007883a 	mov	r3,r18
1010c7d4:	0011883a 	mov	r8,zero
1010c7d8:	0005883a 	mov	r2,zero
1010c7dc:	003f4c06 	br	1010c510 <__alt_data_end+0xfffec510>
1010c7e0:	498cb03a 	or	r6,r9,r6
1010c7e4:	300cc03a 	cmpne	r6,r6,zero
1010c7e8:	0007883a 	mov	r3,zero
1010c7ec:	003f6806 	br	1010c590 <__alt_data_end+0xfffec590>
1010c7f0:	20009c1e 	bne	r4,zero,1010ca64 <__adddf3+0x630>
1010c7f4:	80800044 	addi	r2,r16,1
1010c7f8:	1141ffcc 	andi	r5,r2,2047
1010c7fc:	01000044 	movi	r4,1
1010c800:	2140670e 	bge	r4,r5,1010c9a0 <__adddf3+0x56c>
1010c804:	0101ffc4 	movi	r4,2047
1010c808:	11007f26 	beq	r2,r4,1010ca08 <__adddf3+0x5d4>
1010c80c:	898d883a 	add	r6,r17,r6
1010c810:	4247883a 	add	r3,r8,r9
1010c814:	3451803a 	cmpltu	r8,r6,r17
1010c818:	40d1883a 	add	r8,r8,r3
1010c81c:	402297fa 	slli	r17,r8,31
1010c820:	300cd07a 	srli	r6,r6,1
1010c824:	4010d07a 	srli	r8,r8,1
1010c828:	1021883a 	mov	r16,r2
1010c82c:	89a2b03a 	or	r17,r17,r6
1010c830:	003f1f06 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c834:	0081ffc4 	movi	r2,2047
1010c838:	80bf481e 	bne	r16,r2,1010c55c <__alt_data_end+0xfffec55c>
1010c83c:	003f1c06 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c840:	843ff844 	addi	r16,r16,-31
1010c844:	01000804 	movi	r4,32
1010c848:	1406d83a 	srl	r3,r2,r16
1010c84c:	41005026 	beq	r8,r4,1010c990 <__adddf3+0x55c>
1010c850:	01001004 	movi	r4,64
1010c854:	2211c83a 	sub	r8,r4,r8
1010c858:	1204983a 	sll	r2,r2,r8
1010c85c:	88a2b03a 	or	r17,r17,r2
1010c860:	8822c03a 	cmpne	r17,r17,zero
1010c864:	1c62b03a 	or	r17,r3,r17
1010c868:	0011883a 	mov	r8,zero
1010c86c:	0021883a 	mov	r16,zero
1010c870:	003f7106 	br	1010c638 <__alt_data_end+0xfffec638>
1010c874:	193ff804 	addi	r4,r3,-32
1010c878:	00800804 	movi	r2,32
1010c87c:	4908d83a 	srl	r4,r9,r4
1010c880:	18804526 	beq	r3,r2,1010c998 <__adddf3+0x564>
1010c884:	00801004 	movi	r2,64
1010c888:	10c5c83a 	sub	r2,r2,r3
1010c88c:	4886983a 	sll	r3,r9,r2
1010c890:	198cb03a 	or	r6,r3,r6
1010c894:	300cc03a 	cmpne	r6,r6,zero
1010c898:	218cb03a 	or	r6,r4,r6
1010c89c:	0007883a 	mov	r3,zero
1010c8a0:	003f3b06 	br	1010c590 <__alt_data_end+0xfffec590>
1010c8a4:	80002a26 	beq	r16,zero,1010c950 <__adddf3+0x51c>
1010c8a8:	0101ffc4 	movi	r4,2047
1010c8ac:	11006826 	beq	r2,r4,1010ca50 <__adddf3+0x61c>
1010c8b0:	00c7c83a 	sub	r3,zero,r3
1010c8b4:	42002034 	orhi	r8,r8,128
1010c8b8:	01000e04 	movi	r4,56
1010c8bc:	20c07c16 	blt	r4,r3,1010cab0 <__adddf3+0x67c>
1010c8c0:	010007c4 	movi	r4,31
1010c8c4:	20c0da16 	blt	r4,r3,1010cc30 <__adddf3+0x7fc>
1010c8c8:	01000804 	movi	r4,32
1010c8cc:	20c9c83a 	sub	r4,r4,r3
1010c8d0:	4114983a 	sll	r10,r8,r4
1010c8d4:	88cad83a 	srl	r5,r17,r3
1010c8d8:	8908983a 	sll	r4,r17,r4
1010c8dc:	40c6d83a 	srl	r3,r8,r3
1010c8e0:	5162b03a 	or	r17,r10,r5
1010c8e4:	2008c03a 	cmpne	r4,r4,zero
1010c8e8:	8922b03a 	or	r17,r17,r4
1010c8ec:	3463c83a 	sub	r17,r6,r17
1010c8f0:	48c7c83a 	sub	r3,r9,r3
1010c8f4:	344d803a 	cmpltu	r6,r6,r17
1010c8f8:	1991c83a 	sub	r8,r3,r6
1010c8fc:	1021883a 	mov	r16,r2
1010c900:	3825883a 	mov	r18,r7
1010c904:	003f2706 	br	1010c5a4 <__alt_data_end+0xfffec5a4>
1010c908:	24d0b03a 	or	r8,r4,r19
1010c90c:	40001b1e 	bne	r8,zero,1010c97c <__adddf3+0x548>
1010c910:	0005883a 	mov	r2,zero
1010c914:	0007883a 	mov	r3,zero
1010c918:	0021883a 	mov	r16,zero
1010c91c:	003f4d06 	br	1010c654 <__alt_data_end+0xfffec654>
1010c920:	008007c4 	movi	r2,31
1010c924:	11003c16 	blt	r2,r4,1010ca18 <__adddf3+0x5e4>
1010c928:	00800804 	movi	r2,32
1010c92c:	1105c83a 	sub	r2,r2,r4
1010c930:	488e983a 	sll	r7,r9,r2
1010c934:	310ad83a 	srl	r5,r6,r4
1010c938:	3084983a 	sll	r2,r6,r2
1010c93c:	4912d83a 	srl	r9,r9,r4
1010c940:	394ab03a 	or	r5,r7,r5
1010c944:	1004c03a 	cmpne	r2,r2,zero
1010c948:	288ab03a 	or	r5,r5,r2
1010c94c:	003f5306 	br	1010c69c <__alt_data_end+0xfffec69c>
1010c950:	4448b03a 	or	r4,r8,r17
1010c954:	20003e26 	beq	r4,zero,1010ca50 <__adddf3+0x61c>
1010c958:	00c6303a 	nor	r3,zero,r3
1010c95c:	18003a1e 	bne	r3,zero,1010ca48 <__adddf3+0x614>
1010c960:	3463c83a 	sub	r17,r6,r17
1010c964:	4a07c83a 	sub	r3,r9,r8
1010c968:	344d803a 	cmpltu	r6,r6,r17
1010c96c:	1991c83a 	sub	r8,r3,r6
1010c970:	1021883a 	mov	r16,r2
1010c974:	3825883a 	mov	r18,r7
1010c978:	003f0a06 	br	1010c5a4 <__alt_data_end+0xfffec5a4>
1010c97c:	2023883a 	mov	r17,r4
1010c980:	003f0d06 	br	1010c5b8 <__alt_data_end+0xfffec5b8>
1010c984:	0081ffc4 	movi	r2,2047
1010c988:	80bf3f1e 	bne	r16,r2,1010c688 <__alt_data_end+0xfffec688>
1010c98c:	003ec806 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c990:	0005883a 	mov	r2,zero
1010c994:	003fb106 	br	1010c85c <__alt_data_end+0xfffec85c>
1010c998:	0007883a 	mov	r3,zero
1010c99c:	003fbc06 	br	1010c890 <__alt_data_end+0xfffec890>
1010c9a0:	4444b03a 	or	r2,r8,r17
1010c9a4:	8000871e 	bne	r16,zero,1010cbc4 <__adddf3+0x790>
1010c9a8:	1000ba26 	beq	r2,zero,1010cc94 <__adddf3+0x860>
1010c9ac:	4984b03a 	or	r2,r9,r6
1010c9b0:	103ebf26 	beq	r2,zero,1010c4b0 <__alt_data_end+0xfffec4b0>
1010c9b4:	8985883a 	add	r2,r17,r6
1010c9b8:	4247883a 	add	r3,r8,r9
1010c9bc:	1451803a 	cmpltu	r8,r2,r17
1010c9c0:	40d1883a 	add	r8,r8,r3
1010c9c4:	40c0202c 	andhi	r3,r8,128
1010c9c8:	1023883a 	mov	r17,r2
1010c9cc:	183f1a26 	beq	r3,zero,1010c638 <__alt_data_end+0xfffec638>
1010c9d0:	00bfe034 	movhi	r2,65408
1010c9d4:	10bfffc4 	addi	r2,r2,-1
1010c9d8:	2021883a 	mov	r16,r4
1010c9dc:	4090703a 	and	r8,r8,r2
1010c9e0:	003eb306 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010c9e4:	4444b03a 	or	r2,r8,r17
1010c9e8:	8000291e 	bne	r16,zero,1010ca90 <__adddf3+0x65c>
1010c9ec:	10004b1e 	bne	r2,zero,1010cb1c <__adddf3+0x6e8>
1010c9f0:	4990b03a 	or	r8,r9,r6
1010c9f4:	40008b26 	beq	r8,zero,1010cc24 <__adddf3+0x7f0>
1010c9f8:	4811883a 	mov	r8,r9
1010c9fc:	3023883a 	mov	r17,r6
1010ca00:	3825883a 	mov	r18,r7
1010ca04:	003eaa06 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010ca08:	1021883a 	mov	r16,r2
1010ca0c:	0011883a 	mov	r8,zero
1010ca10:	0005883a 	mov	r2,zero
1010ca14:	003f0f06 	br	1010c654 <__alt_data_end+0xfffec654>
1010ca18:	217ff804 	addi	r5,r4,-32
1010ca1c:	00800804 	movi	r2,32
1010ca20:	494ad83a 	srl	r5,r9,r5
1010ca24:	20807d26 	beq	r4,r2,1010cc1c <__adddf3+0x7e8>
1010ca28:	00801004 	movi	r2,64
1010ca2c:	1109c83a 	sub	r4,r2,r4
1010ca30:	4912983a 	sll	r9,r9,r4
1010ca34:	498cb03a 	or	r6,r9,r6
1010ca38:	300cc03a 	cmpne	r6,r6,zero
1010ca3c:	298ab03a 	or	r5,r5,r6
1010ca40:	0013883a 	mov	r9,zero
1010ca44:	003f1506 	br	1010c69c <__alt_data_end+0xfffec69c>
1010ca48:	0101ffc4 	movi	r4,2047
1010ca4c:	113f9a1e 	bne	r2,r4,1010c8b8 <__alt_data_end+0xfffec8b8>
1010ca50:	4811883a 	mov	r8,r9
1010ca54:	3023883a 	mov	r17,r6
1010ca58:	1021883a 	mov	r16,r2
1010ca5c:	3825883a 	mov	r18,r7
1010ca60:	003e9306 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010ca64:	8000161e 	bne	r16,zero,1010cac0 <__adddf3+0x68c>
1010ca68:	444ab03a 	or	r5,r8,r17
1010ca6c:	28005126 	beq	r5,zero,1010cbb4 <__adddf3+0x780>
1010ca70:	0108303a 	nor	r4,zero,r4
1010ca74:	20004d1e 	bne	r4,zero,1010cbac <__adddf3+0x778>
1010ca78:	89a3883a 	add	r17,r17,r6
1010ca7c:	4253883a 	add	r9,r8,r9
1010ca80:	898d803a 	cmpltu	r6,r17,r6
1010ca84:	3251883a 	add	r8,r6,r9
1010ca88:	1021883a 	mov	r16,r2
1010ca8c:	003f0806 	br	1010c6b0 <__alt_data_end+0xfffec6b0>
1010ca90:	1000301e 	bne	r2,zero,1010cb54 <__adddf3+0x720>
1010ca94:	4984b03a 	or	r2,r9,r6
1010ca98:	10007126 	beq	r2,zero,1010cc60 <__adddf3+0x82c>
1010ca9c:	4811883a 	mov	r8,r9
1010caa0:	3023883a 	mov	r17,r6
1010caa4:	3825883a 	mov	r18,r7
1010caa8:	0401ffc4 	movi	r16,2047
1010caac:	003e8006 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cab0:	4462b03a 	or	r17,r8,r17
1010cab4:	8822c03a 	cmpne	r17,r17,zero
1010cab8:	0007883a 	mov	r3,zero
1010cabc:	003f8b06 	br	1010c8ec <__alt_data_end+0xfffec8ec>
1010cac0:	0141ffc4 	movi	r5,2047
1010cac4:	11403b26 	beq	r2,r5,1010cbb4 <__adddf3+0x780>
1010cac8:	0109c83a 	sub	r4,zero,r4
1010cacc:	42002034 	orhi	r8,r8,128
1010cad0:	01400e04 	movi	r5,56
1010cad4:	29006716 	blt	r5,r4,1010cc74 <__adddf3+0x840>
1010cad8:	014007c4 	movi	r5,31
1010cadc:	29007016 	blt	r5,r4,1010cca0 <__adddf3+0x86c>
1010cae0:	01400804 	movi	r5,32
1010cae4:	290bc83a 	sub	r5,r5,r4
1010cae8:	4154983a 	sll	r10,r8,r5
1010caec:	890ed83a 	srl	r7,r17,r4
1010caf0:	894a983a 	sll	r5,r17,r5
1010caf4:	4108d83a 	srl	r4,r8,r4
1010caf8:	51e2b03a 	or	r17,r10,r7
1010cafc:	280ac03a 	cmpne	r5,r5,zero
1010cb00:	8962b03a 	or	r17,r17,r5
1010cb04:	89a3883a 	add	r17,r17,r6
1010cb08:	2253883a 	add	r9,r4,r9
1010cb0c:	898d803a 	cmpltu	r6,r17,r6
1010cb10:	3251883a 	add	r8,r6,r9
1010cb14:	1021883a 	mov	r16,r2
1010cb18:	003ee506 	br	1010c6b0 <__alt_data_end+0xfffec6b0>
1010cb1c:	4984b03a 	or	r2,r9,r6
1010cb20:	103e6326 	beq	r2,zero,1010c4b0 <__alt_data_end+0xfffec4b0>
1010cb24:	8987c83a 	sub	r3,r17,r6
1010cb28:	88c9803a 	cmpltu	r4,r17,r3
1010cb2c:	4245c83a 	sub	r2,r8,r9
1010cb30:	1105c83a 	sub	r2,r2,r4
1010cb34:	1100202c 	andhi	r4,r2,128
1010cb38:	203ebb26 	beq	r4,zero,1010c628 <__alt_data_end+0xfffec628>
1010cb3c:	3463c83a 	sub	r17,r6,r17
1010cb40:	4a07c83a 	sub	r3,r9,r8
1010cb44:	344d803a 	cmpltu	r6,r6,r17
1010cb48:	1991c83a 	sub	r8,r3,r6
1010cb4c:	3825883a 	mov	r18,r7
1010cb50:	003e5706 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cb54:	4984b03a 	or	r2,r9,r6
1010cb58:	10002e26 	beq	r2,zero,1010cc14 <__adddf3+0x7e0>
1010cb5c:	4004d0fa 	srli	r2,r8,3
1010cb60:	8822d0fa 	srli	r17,r17,3
1010cb64:	4010977a 	slli	r8,r8,29
1010cb68:	10c0022c 	andhi	r3,r2,8
1010cb6c:	4462b03a 	or	r17,r8,r17
1010cb70:	18000826 	beq	r3,zero,1010cb94 <__adddf3+0x760>
1010cb74:	4808d0fa 	srli	r4,r9,3
1010cb78:	20c0022c 	andhi	r3,r4,8
1010cb7c:	1800051e 	bne	r3,zero,1010cb94 <__adddf3+0x760>
1010cb80:	300cd0fa 	srli	r6,r6,3
1010cb84:	4806977a 	slli	r3,r9,29
1010cb88:	2005883a 	mov	r2,r4
1010cb8c:	3825883a 	mov	r18,r7
1010cb90:	19a2b03a 	or	r17,r3,r6
1010cb94:	8810d77a 	srli	r8,r17,29
1010cb98:	100490fa 	slli	r2,r2,3
1010cb9c:	882290fa 	slli	r17,r17,3
1010cba0:	0401ffc4 	movi	r16,2047
1010cba4:	4090b03a 	or	r8,r8,r2
1010cba8:	003e4106 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cbac:	0141ffc4 	movi	r5,2047
1010cbb0:	117fc71e 	bne	r2,r5,1010cad0 <__alt_data_end+0xfffecad0>
1010cbb4:	4811883a 	mov	r8,r9
1010cbb8:	3023883a 	mov	r17,r6
1010cbbc:	1021883a 	mov	r16,r2
1010cbc0:	003e3b06 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cbc4:	10002f26 	beq	r2,zero,1010cc84 <__adddf3+0x850>
1010cbc8:	4984b03a 	or	r2,r9,r6
1010cbcc:	10001126 	beq	r2,zero,1010cc14 <__adddf3+0x7e0>
1010cbd0:	4004d0fa 	srli	r2,r8,3
1010cbd4:	8822d0fa 	srli	r17,r17,3
1010cbd8:	4010977a 	slli	r8,r8,29
1010cbdc:	10c0022c 	andhi	r3,r2,8
1010cbe0:	4462b03a 	or	r17,r8,r17
1010cbe4:	183feb26 	beq	r3,zero,1010cb94 <__alt_data_end+0xfffecb94>
1010cbe8:	4808d0fa 	srli	r4,r9,3
1010cbec:	20c0022c 	andhi	r3,r4,8
1010cbf0:	183fe81e 	bne	r3,zero,1010cb94 <__alt_data_end+0xfffecb94>
1010cbf4:	300cd0fa 	srli	r6,r6,3
1010cbf8:	4806977a 	slli	r3,r9,29
1010cbfc:	2005883a 	mov	r2,r4
1010cc00:	19a2b03a 	or	r17,r3,r6
1010cc04:	003fe306 	br	1010cb94 <__alt_data_end+0xfffecb94>
1010cc08:	0011883a 	mov	r8,zero
1010cc0c:	0005883a 	mov	r2,zero
1010cc10:	003e3f06 	br	1010c510 <__alt_data_end+0xfffec510>
1010cc14:	0401ffc4 	movi	r16,2047
1010cc18:	003e2506 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cc1c:	0013883a 	mov	r9,zero
1010cc20:	003f8406 	br	1010ca34 <__alt_data_end+0xfffeca34>
1010cc24:	0005883a 	mov	r2,zero
1010cc28:	0007883a 	mov	r3,zero
1010cc2c:	003e8906 	br	1010c654 <__alt_data_end+0xfffec654>
1010cc30:	197ff804 	addi	r5,r3,-32
1010cc34:	01000804 	movi	r4,32
1010cc38:	414ad83a 	srl	r5,r8,r5
1010cc3c:	19002426 	beq	r3,r4,1010ccd0 <__adddf3+0x89c>
1010cc40:	01001004 	movi	r4,64
1010cc44:	20c7c83a 	sub	r3,r4,r3
1010cc48:	40c6983a 	sll	r3,r8,r3
1010cc4c:	1c46b03a 	or	r3,r3,r17
1010cc50:	1806c03a 	cmpne	r3,r3,zero
1010cc54:	28e2b03a 	or	r17,r5,r3
1010cc58:	0007883a 	mov	r3,zero
1010cc5c:	003f2306 	br	1010c8ec <__alt_data_end+0xfffec8ec>
1010cc60:	0007883a 	mov	r3,zero
1010cc64:	5811883a 	mov	r8,r11
1010cc68:	00bfffc4 	movi	r2,-1
1010cc6c:	0401ffc4 	movi	r16,2047
1010cc70:	003e7806 	br	1010c654 <__alt_data_end+0xfffec654>
1010cc74:	4462b03a 	or	r17,r8,r17
1010cc78:	8822c03a 	cmpne	r17,r17,zero
1010cc7c:	0009883a 	mov	r4,zero
1010cc80:	003fa006 	br	1010cb04 <__alt_data_end+0xfffecb04>
1010cc84:	4811883a 	mov	r8,r9
1010cc88:	3023883a 	mov	r17,r6
1010cc8c:	0401ffc4 	movi	r16,2047
1010cc90:	003e0706 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cc94:	4811883a 	mov	r8,r9
1010cc98:	3023883a 	mov	r17,r6
1010cc9c:	003e0406 	br	1010c4b0 <__alt_data_end+0xfffec4b0>
1010cca0:	21fff804 	addi	r7,r4,-32
1010cca4:	01400804 	movi	r5,32
1010cca8:	41ced83a 	srl	r7,r8,r7
1010ccac:	21400a26 	beq	r4,r5,1010ccd8 <__adddf3+0x8a4>
1010ccb0:	01401004 	movi	r5,64
1010ccb4:	2909c83a 	sub	r4,r5,r4
1010ccb8:	4108983a 	sll	r4,r8,r4
1010ccbc:	2448b03a 	or	r4,r4,r17
1010ccc0:	2008c03a 	cmpne	r4,r4,zero
1010ccc4:	3922b03a 	or	r17,r7,r4
1010ccc8:	0009883a 	mov	r4,zero
1010cccc:	003f8d06 	br	1010cb04 <__alt_data_end+0xfffecb04>
1010ccd0:	0007883a 	mov	r3,zero
1010ccd4:	003fdd06 	br	1010cc4c <__alt_data_end+0xfffecc4c>
1010ccd8:	0009883a 	mov	r4,zero
1010ccdc:	003ff706 	br	1010ccbc <__alt_data_end+0xfffeccbc>

1010cce0 <__divdf3>:
1010cce0:	defff204 	addi	sp,sp,-56
1010cce4:	dd400915 	stw	r21,36(sp)
1010cce8:	282ad53a 	srli	r21,r5,20
1010ccec:	dd000815 	stw	r20,32(sp)
1010ccf0:	2828d7fa 	srli	r20,r5,31
1010ccf4:	dc000415 	stw	r16,16(sp)
1010ccf8:	04000434 	movhi	r16,16
1010ccfc:	df000c15 	stw	fp,48(sp)
1010cd00:	843fffc4 	addi	r16,r16,-1
1010cd04:	dfc00d15 	stw	ra,52(sp)
1010cd08:	ddc00b15 	stw	r23,44(sp)
1010cd0c:	dd800a15 	stw	r22,40(sp)
1010cd10:	dcc00715 	stw	r19,28(sp)
1010cd14:	dc800615 	stw	r18,24(sp)
1010cd18:	dc400515 	stw	r17,20(sp)
1010cd1c:	ad41ffcc 	andi	r21,r21,2047
1010cd20:	2c20703a 	and	r16,r5,r16
1010cd24:	a7003fcc 	andi	fp,r20,255
1010cd28:	a8006126 	beq	r21,zero,1010ceb0 <__divdf3+0x1d0>
1010cd2c:	0081ffc4 	movi	r2,2047
1010cd30:	2025883a 	mov	r18,r4
1010cd34:	a8803726 	beq	r21,r2,1010ce14 <__divdf3+0x134>
1010cd38:	80c00434 	orhi	r3,r16,16
1010cd3c:	180690fa 	slli	r3,r3,3
1010cd40:	2020d77a 	srli	r16,r4,29
1010cd44:	202490fa 	slli	r18,r4,3
1010cd48:	ad7f0044 	addi	r21,r21,-1023
1010cd4c:	80e0b03a 	or	r16,r16,r3
1010cd50:	0027883a 	mov	r19,zero
1010cd54:	0013883a 	mov	r9,zero
1010cd58:	3808d53a 	srli	r4,r7,20
1010cd5c:	382cd7fa 	srli	r22,r7,31
1010cd60:	04400434 	movhi	r17,16
1010cd64:	8c7fffc4 	addi	r17,r17,-1
1010cd68:	2101ffcc 	andi	r4,r4,2047
1010cd6c:	3011883a 	mov	r8,r6
1010cd70:	3c62703a 	and	r17,r7,r17
1010cd74:	b5c03fcc 	andi	r23,r22,255
1010cd78:	20006c26 	beq	r4,zero,1010cf2c <__divdf3+0x24c>
1010cd7c:	0081ffc4 	movi	r2,2047
1010cd80:	20806426 	beq	r4,r2,1010cf14 <__divdf3+0x234>
1010cd84:	88c00434 	orhi	r3,r17,16
1010cd88:	180690fa 	slli	r3,r3,3
1010cd8c:	3022d77a 	srli	r17,r6,29
1010cd90:	301090fa 	slli	r8,r6,3
1010cd94:	213f0044 	addi	r4,r4,-1023
1010cd98:	88e2b03a 	or	r17,r17,r3
1010cd9c:	000d883a 	mov	r6,zero
1010cda0:	a584f03a 	xor	r2,r20,r22
1010cda4:	34cab03a 	or	r5,r6,r19
1010cda8:	1007883a 	mov	r3,r2
1010cdac:	14c03fcc 	andi	r19,r2,255
1010cdb0:	008003c4 	movi	r2,15
1010cdb4:	a92bc83a 	sub	r21,r21,r4
1010cdb8:	11409036 	bltu	r2,r5,1010cffc <__divdf3+0x31c>
1010cdbc:	280a90ba 	slli	r5,r5,2
1010cdc0:	00840474 	movhi	r2,4113
1010cdc4:	10b37504 	addi	r2,r2,-12844
1010cdc8:	288b883a 	add	r5,r5,r2
1010cdcc:	28800017 	ldw	r2,0(r5)
1010cdd0:	1000683a 	jmp	r2
1010cdd4:	1010cffc 	xorhi	zero,r2,17215
1010cdd8:	1010ce4c 	andi	zero,r2,17209
1010cddc:	1010cfec 	andhi	zero,r2,17215
1010cde0:	1010ce40 	call	11010ce4 <__alt_data_end+0xef0ce4>
1010cde4:	1010cfec 	andhi	zero,r2,17215
1010cde8:	1010cfc0 	call	11010cfc <__alt_data_end+0xef0cfc>
1010cdec:	1010cfec 	andhi	zero,r2,17215
1010cdf0:	1010ce40 	call	11010ce4 <__alt_data_end+0xef0ce4>
1010cdf4:	1010ce4c 	andi	zero,r2,17209
1010cdf8:	1010ce4c 	andi	zero,r2,17209
1010cdfc:	1010cfc0 	call	11010cfc <__alt_data_end+0xef0cfc>
1010ce00:	1010ce40 	call	11010ce4 <__alt_data_end+0xef0ce4>
1010ce04:	1010ce30 	cmpltui	zero,r2,17208
1010ce08:	1010ce30 	cmpltui	zero,r2,17208
1010ce0c:	1010ce30 	cmpltui	zero,r2,17208
1010ce10:	1010d2e0 	cmpeqi	zero,r2,17227
1010ce14:	2404b03a 	or	r2,r4,r16
1010ce18:	1000661e 	bne	r2,zero,1010cfb4 <__divdf3+0x2d4>
1010ce1c:	04c00204 	movi	r19,8
1010ce20:	0021883a 	mov	r16,zero
1010ce24:	0025883a 	mov	r18,zero
1010ce28:	02400084 	movi	r9,2
1010ce2c:	003fca06 	br	1010cd58 <__alt_data_end+0xfffecd58>
1010ce30:	8023883a 	mov	r17,r16
1010ce34:	9011883a 	mov	r8,r18
1010ce38:	e02f883a 	mov	r23,fp
1010ce3c:	480d883a 	mov	r6,r9
1010ce40:	00800084 	movi	r2,2
1010ce44:	3081311e 	bne	r6,r2,1010d30c <__divdf3+0x62c>
1010ce48:	b827883a 	mov	r19,r23
1010ce4c:	98c0004c 	andi	r3,r19,1
1010ce50:	0081ffc4 	movi	r2,2047
1010ce54:	000b883a 	mov	r5,zero
1010ce58:	0025883a 	mov	r18,zero
1010ce5c:	1004953a 	slli	r2,r2,20
1010ce60:	18c03fcc 	andi	r3,r3,255
1010ce64:	04400434 	movhi	r17,16
1010ce68:	8c7fffc4 	addi	r17,r17,-1
1010ce6c:	180697fa 	slli	r3,r3,31
1010ce70:	2c4a703a 	and	r5,r5,r17
1010ce74:	288ab03a 	or	r5,r5,r2
1010ce78:	28c6b03a 	or	r3,r5,r3
1010ce7c:	9005883a 	mov	r2,r18
1010ce80:	dfc00d17 	ldw	ra,52(sp)
1010ce84:	df000c17 	ldw	fp,48(sp)
1010ce88:	ddc00b17 	ldw	r23,44(sp)
1010ce8c:	dd800a17 	ldw	r22,40(sp)
1010ce90:	dd400917 	ldw	r21,36(sp)
1010ce94:	dd000817 	ldw	r20,32(sp)
1010ce98:	dcc00717 	ldw	r19,28(sp)
1010ce9c:	dc800617 	ldw	r18,24(sp)
1010cea0:	dc400517 	ldw	r17,20(sp)
1010cea4:	dc000417 	ldw	r16,16(sp)
1010cea8:	dec00e04 	addi	sp,sp,56
1010ceac:	f800283a 	ret
1010ceb0:	2404b03a 	or	r2,r4,r16
1010ceb4:	2027883a 	mov	r19,r4
1010ceb8:	10003926 	beq	r2,zero,1010cfa0 <__divdf3+0x2c0>
1010cebc:	80012e26 	beq	r16,zero,1010d378 <__divdf3+0x698>
1010cec0:	8009883a 	mov	r4,r16
1010cec4:	d9800315 	stw	r6,12(sp)
1010cec8:	d9c00215 	stw	r7,8(sp)
1010cecc:	010ea380 	call	1010ea38 <__clzsi2>
1010ced0:	d9800317 	ldw	r6,12(sp)
1010ced4:	d9c00217 	ldw	r7,8(sp)
1010ced8:	10fffd44 	addi	r3,r2,-11
1010cedc:	01000704 	movi	r4,28
1010cee0:	20c12116 	blt	r4,r3,1010d368 <__divdf3+0x688>
1010cee4:	01000744 	movi	r4,29
1010cee8:	147ffe04 	addi	r17,r2,-8
1010ceec:	20c9c83a 	sub	r4,r4,r3
1010cef0:	8460983a 	sll	r16,r16,r17
1010cef4:	9908d83a 	srl	r4,r19,r4
1010cef8:	9c64983a 	sll	r18,r19,r17
1010cefc:	2420b03a 	or	r16,r4,r16
1010cf00:	057f0084 	movi	r21,-1022
1010cf04:	a8ebc83a 	sub	r21,r21,r3
1010cf08:	0027883a 	mov	r19,zero
1010cf0c:	0013883a 	mov	r9,zero
1010cf10:	003f9106 	br	1010cd58 <__alt_data_end+0xfffecd58>
1010cf14:	3444b03a 	or	r2,r6,r17
1010cf18:	10001f1e 	bne	r2,zero,1010cf98 <__divdf3+0x2b8>
1010cf1c:	0023883a 	mov	r17,zero
1010cf20:	0011883a 	mov	r8,zero
1010cf24:	01800084 	movi	r6,2
1010cf28:	003f9d06 	br	1010cda0 <__alt_data_end+0xfffecda0>
1010cf2c:	3444b03a 	or	r2,r6,r17
1010cf30:	10001526 	beq	r2,zero,1010cf88 <__divdf3+0x2a8>
1010cf34:	88011b26 	beq	r17,zero,1010d3a4 <__divdf3+0x6c4>
1010cf38:	8809883a 	mov	r4,r17
1010cf3c:	d9800315 	stw	r6,12(sp)
1010cf40:	da400115 	stw	r9,4(sp)
1010cf44:	010ea380 	call	1010ea38 <__clzsi2>
1010cf48:	d9800317 	ldw	r6,12(sp)
1010cf4c:	da400117 	ldw	r9,4(sp)
1010cf50:	10fffd44 	addi	r3,r2,-11
1010cf54:	01000704 	movi	r4,28
1010cf58:	20c10e16 	blt	r4,r3,1010d394 <__divdf3+0x6b4>
1010cf5c:	01000744 	movi	r4,29
1010cf60:	123ffe04 	addi	r8,r2,-8
1010cf64:	20c9c83a 	sub	r4,r4,r3
1010cf68:	8a22983a 	sll	r17,r17,r8
1010cf6c:	3108d83a 	srl	r4,r6,r4
1010cf70:	3210983a 	sll	r8,r6,r8
1010cf74:	2462b03a 	or	r17,r4,r17
1010cf78:	013f0084 	movi	r4,-1022
1010cf7c:	20c9c83a 	sub	r4,r4,r3
1010cf80:	000d883a 	mov	r6,zero
1010cf84:	003f8606 	br	1010cda0 <__alt_data_end+0xfffecda0>
1010cf88:	0023883a 	mov	r17,zero
1010cf8c:	0011883a 	mov	r8,zero
1010cf90:	01800044 	movi	r6,1
1010cf94:	003f8206 	br	1010cda0 <__alt_data_end+0xfffecda0>
1010cf98:	018000c4 	movi	r6,3
1010cf9c:	003f8006 	br	1010cda0 <__alt_data_end+0xfffecda0>
1010cfa0:	04c00104 	movi	r19,4
1010cfa4:	0021883a 	mov	r16,zero
1010cfa8:	0025883a 	mov	r18,zero
1010cfac:	02400044 	movi	r9,1
1010cfb0:	003f6906 	br	1010cd58 <__alt_data_end+0xfffecd58>
1010cfb4:	04c00304 	movi	r19,12
1010cfb8:	024000c4 	movi	r9,3
1010cfbc:	003f6606 	br	1010cd58 <__alt_data_end+0xfffecd58>
1010cfc0:	01400434 	movhi	r5,16
1010cfc4:	0007883a 	mov	r3,zero
1010cfc8:	297fffc4 	addi	r5,r5,-1
1010cfcc:	04bfffc4 	movi	r18,-1
1010cfd0:	0081ffc4 	movi	r2,2047
1010cfd4:	003fa106 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010cfd8:	00c00044 	movi	r3,1
1010cfdc:	1887c83a 	sub	r3,r3,r2
1010cfe0:	01000e04 	movi	r4,56
1010cfe4:	20c1210e 	bge	r4,r3,1010d46c <__divdf3+0x78c>
1010cfe8:	98c0004c 	andi	r3,r19,1
1010cfec:	0005883a 	mov	r2,zero
1010cff0:	000b883a 	mov	r5,zero
1010cff4:	0025883a 	mov	r18,zero
1010cff8:	003f9806 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010cffc:	8c00fd36 	bltu	r17,r16,1010d3f4 <__divdf3+0x714>
1010d000:	8440fb26 	beq	r16,r17,1010d3f0 <__divdf3+0x710>
1010d004:	8007883a 	mov	r3,r16
1010d008:	ad7fffc4 	addi	r21,r21,-1
1010d00c:	0021883a 	mov	r16,zero
1010d010:	400ad63a 	srli	r5,r8,24
1010d014:	8822923a 	slli	r17,r17,8
1010d018:	1809883a 	mov	r4,r3
1010d01c:	402c923a 	slli	r22,r8,8
1010d020:	8978b03a 	or	fp,r17,r5
1010d024:	e028d43a 	srli	r20,fp,16
1010d028:	d8c00015 	stw	r3,0(sp)
1010d02c:	e5ffffcc 	andi	r23,fp,65535
1010d030:	a00b883a 	mov	r5,r20
1010d034:	01019a00 	call	101019a0 <__udivsi3>
1010d038:	d8c00017 	ldw	r3,0(sp)
1010d03c:	a00b883a 	mov	r5,r20
1010d040:	d8800315 	stw	r2,12(sp)
1010d044:	1809883a 	mov	r4,r3
1010d048:	0101a040 	call	10101a04 <__umodsi3>
1010d04c:	d9800317 	ldw	r6,12(sp)
1010d050:	1006943a 	slli	r3,r2,16
1010d054:	9004d43a 	srli	r2,r18,16
1010d058:	b9a3383a 	mul	r17,r23,r6
1010d05c:	10c4b03a 	or	r2,r2,r3
1010d060:	1440062e 	bgeu	r2,r17,1010d07c <__divdf3+0x39c>
1010d064:	1705883a 	add	r2,r2,fp
1010d068:	30ffffc4 	addi	r3,r6,-1
1010d06c:	1700ee36 	bltu	r2,fp,1010d428 <__divdf3+0x748>
1010d070:	1440ed2e 	bgeu	r2,r17,1010d428 <__divdf3+0x748>
1010d074:	31bfff84 	addi	r6,r6,-2
1010d078:	1705883a 	add	r2,r2,fp
1010d07c:	1463c83a 	sub	r17,r2,r17
1010d080:	a00b883a 	mov	r5,r20
1010d084:	8809883a 	mov	r4,r17
1010d088:	d9800315 	stw	r6,12(sp)
1010d08c:	01019a00 	call	101019a0 <__udivsi3>
1010d090:	a00b883a 	mov	r5,r20
1010d094:	8809883a 	mov	r4,r17
1010d098:	d8800215 	stw	r2,8(sp)
1010d09c:	0101a040 	call	10101a04 <__umodsi3>
1010d0a0:	d9c00217 	ldw	r7,8(sp)
1010d0a4:	1004943a 	slli	r2,r2,16
1010d0a8:	94bfffcc 	andi	r18,r18,65535
1010d0ac:	b9d1383a 	mul	r8,r23,r7
1010d0b0:	90a4b03a 	or	r18,r18,r2
1010d0b4:	d9800317 	ldw	r6,12(sp)
1010d0b8:	9200062e 	bgeu	r18,r8,1010d0d4 <__divdf3+0x3f4>
1010d0bc:	9725883a 	add	r18,r18,fp
1010d0c0:	38bfffc4 	addi	r2,r7,-1
1010d0c4:	9700d636 	bltu	r18,fp,1010d420 <__divdf3+0x740>
1010d0c8:	9200d52e 	bgeu	r18,r8,1010d420 <__divdf3+0x740>
1010d0cc:	39ffff84 	addi	r7,r7,-2
1010d0d0:	9725883a 	add	r18,r18,fp
1010d0d4:	3004943a 	slli	r2,r6,16
1010d0d8:	b012d43a 	srli	r9,r22,16
1010d0dc:	b1bfffcc 	andi	r6,r22,65535
1010d0e0:	11e2b03a 	or	r17,r2,r7
1010d0e4:	8806d43a 	srli	r3,r17,16
1010d0e8:	893fffcc 	andi	r4,r17,65535
1010d0ec:	218b383a 	mul	r5,r4,r6
1010d0f0:	30c5383a 	mul	r2,r6,r3
1010d0f4:	2249383a 	mul	r4,r4,r9
1010d0f8:	280ed43a 	srli	r7,r5,16
1010d0fc:	9225c83a 	sub	r18,r18,r8
1010d100:	2089883a 	add	r4,r4,r2
1010d104:	3909883a 	add	r4,r7,r4
1010d108:	1a47383a 	mul	r3,r3,r9
1010d10c:	2080022e 	bgeu	r4,r2,1010d118 <__divdf3+0x438>
1010d110:	00800074 	movhi	r2,1
1010d114:	1887883a 	add	r3,r3,r2
1010d118:	2004d43a 	srli	r2,r4,16
1010d11c:	2008943a 	slli	r4,r4,16
1010d120:	297fffcc 	andi	r5,r5,65535
1010d124:	10c7883a 	add	r3,r2,r3
1010d128:	2149883a 	add	r4,r4,r5
1010d12c:	90c0a536 	bltu	r18,r3,1010d3c4 <__divdf3+0x6e4>
1010d130:	90c0bf26 	beq	r18,r3,1010d430 <__divdf3+0x750>
1010d134:	90c7c83a 	sub	r3,r18,r3
1010d138:	810fc83a 	sub	r7,r16,r4
1010d13c:	81e5803a 	cmpltu	r18,r16,r7
1010d140:	1ca5c83a 	sub	r18,r3,r18
1010d144:	e480c126 	beq	fp,r18,1010d44c <__divdf3+0x76c>
1010d148:	a00b883a 	mov	r5,r20
1010d14c:	9009883a 	mov	r4,r18
1010d150:	d9800315 	stw	r6,12(sp)
1010d154:	d9c00215 	stw	r7,8(sp)
1010d158:	da400115 	stw	r9,4(sp)
1010d15c:	01019a00 	call	101019a0 <__udivsi3>
1010d160:	a00b883a 	mov	r5,r20
1010d164:	9009883a 	mov	r4,r18
1010d168:	d8800015 	stw	r2,0(sp)
1010d16c:	0101a040 	call	10101a04 <__umodsi3>
1010d170:	d9c00217 	ldw	r7,8(sp)
1010d174:	da000017 	ldw	r8,0(sp)
1010d178:	1006943a 	slli	r3,r2,16
1010d17c:	3804d43a 	srli	r2,r7,16
1010d180:	ba21383a 	mul	r16,r23,r8
1010d184:	d9800317 	ldw	r6,12(sp)
1010d188:	10c4b03a 	or	r2,r2,r3
1010d18c:	da400117 	ldw	r9,4(sp)
1010d190:	1400062e 	bgeu	r2,r16,1010d1ac <__divdf3+0x4cc>
1010d194:	1705883a 	add	r2,r2,fp
1010d198:	40ffffc4 	addi	r3,r8,-1
1010d19c:	1700ad36 	bltu	r2,fp,1010d454 <__divdf3+0x774>
1010d1a0:	1400ac2e 	bgeu	r2,r16,1010d454 <__divdf3+0x774>
1010d1a4:	423fff84 	addi	r8,r8,-2
1010d1a8:	1705883a 	add	r2,r2,fp
1010d1ac:	1421c83a 	sub	r16,r2,r16
1010d1b0:	a00b883a 	mov	r5,r20
1010d1b4:	8009883a 	mov	r4,r16
1010d1b8:	d9800315 	stw	r6,12(sp)
1010d1bc:	d9c00215 	stw	r7,8(sp)
1010d1c0:	da000015 	stw	r8,0(sp)
1010d1c4:	da400115 	stw	r9,4(sp)
1010d1c8:	01019a00 	call	101019a0 <__udivsi3>
1010d1cc:	8009883a 	mov	r4,r16
1010d1d0:	a00b883a 	mov	r5,r20
1010d1d4:	1025883a 	mov	r18,r2
1010d1d8:	0101a040 	call	10101a04 <__umodsi3>
1010d1dc:	d9c00217 	ldw	r7,8(sp)
1010d1e0:	1004943a 	slli	r2,r2,16
1010d1e4:	bcaf383a 	mul	r23,r23,r18
1010d1e8:	393fffcc 	andi	r4,r7,65535
1010d1ec:	2088b03a 	or	r4,r4,r2
1010d1f0:	d9800317 	ldw	r6,12(sp)
1010d1f4:	da000017 	ldw	r8,0(sp)
1010d1f8:	da400117 	ldw	r9,4(sp)
1010d1fc:	25c0062e 	bgeu	r4,r23,1010d218 <__divdf3+0x538>
1010d200:	2709883a 	add	r4,r4,fp
1010d204:	90bfffc4 	addi	r2,r18,-1
1010d208:	27009436 	bltu	r4,fp,1010d45c <__divdf3+0x77c>
1010d20c:	25c0932e 	bgeu	r4,r23,1010d45c <__divdf3+0x77c>
1010d210:	94bfff84 	addi	r18,r18,-2
1010d214:	2709883a 	add	r4,r4,fp
1010d218:	4004943a 	slli	r2,r8,16
1010d21c:	25efc83a 	sub	r23,r4,r23
1010d220:	1490b03a 	or	r8,r2,r18
1010d224:	4008d43a 	srli	r4,r8,16
1010d228:	40ffffcc 	andi	r3,r8,65535
1010d22c:	30c5383a 	mul	r2,r6,r3
1010d230:	1a47383a 	mul	r3,r3,r9
1010d234:	310d383a 	mul	r6,r6,r4
1010d238:	100ad43a 	srli	r5,r2,16
1010d23c:	4913383a 	mul	r9,r9,r4
1010d240:	1987883a 	add	r3,r3,r6
1010d244:	28c7883a 	add	r3,r5,r3
1010d248:	1980022e 	bgeu	r3,r6,1010d254 <__divdf3+0x574>
1010d24c:	01000074 	movhi	r4,1
1010d250:	4913883a 	add	r9,r9,r4
1010d254:	1808d43a 	srli	r4,r3,16
1010d258:	1806943a 	slli	r3,r3,16
1010d25c:	10bfffcc 	andi	r2,r2,65535
1010d260:	2253883a 	add	r9,r4,r9
1010d264:	1887883a 	add	r3,r3,r2
1010d268:	ba403836 	bltu	r23,r9,1010d34c <__divdf3+0x66c>
1010d26c:	ba403626 	beq	r23,r9,1010d348 <__divdf3+0x668>
1010d270:	42000054 	ori	r8,r8,1
1010d274:	a880ffc4 	addi	r2,r21,1023
1010d278:	00bf570e 	bge	zero,r2,1010cfd8 <__alt_data_end+0xfffecfd8>
1010d27c:	40c001cc 	andi	r3,r8,7
1010d280:	18000726 	beq	r3,zero,1010d2a0 <__divdf3+0x5c0>
1010d284:	40c003cc 	andi	r3,r8,15
1010d288:	01000104 	movi	r4,4
1010d28c:	19000426 	beq	r3,r4,1010d2a0 <__divdf3+0x5c0>
1010d290:	4107883a 	add	r3,r8,r4
1010d294:	1a11803a 	cmpltu	r8,r3,r8
1010d298:	8a23883a 	add	r17,r17,r8
1010d29c:	1811883a 	mov	r8,r3
1010d2a0:	88c0402c 	andhi	r3,r17,256
1010d2a4:	18000426 	beq	r3,zero,1010d2b8 <__divdf3+0x5d8>
1010d2a8:	00ffc034 	movhi	r3,65280
1010d2ac:	18ffffc4 	addi	r3,r3,-1
1010d2b0:	a8810004 	addi	r2,r21,1024
1010d2b4:	88e2703a 	and	r17,r17,r3
1010d2b8:	00c1ff84 	movi	r3,2046
1010d2bc:	18bee316 	blt	r3,r2,1010ce4c <__alt_data_end+0xfffece4c>
1010d2c0:	8824977a 	slli	r18,r17,29
1010d2c4:	4010d0fa 	srli	r8,r8,3
1010d2c8:	8822927a 	slli	r17,r17,9
1010d2cc:	1081ffcc 	andi	r2,r2,2047
1010d2d0:	9224b03a 	or	r18,r18,r8
1010d2d4:	880ad33a 	srli	r5,r17,12
1010d2d8:	98c0004c 	andi	r3,r19,1
1010d2dc:	003edf06 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010d2e0:	8080022c 	andhi	r2,r16,8
1010d2e4:	10001226 	beq	r2,zero,1010d330 <__divdf3+0x650>
1010d2e8:	8880022c 	andhi	r2,r17,8
1010d2ec:	1000101e 	bne	r2,zero,1010d330 <__divdf3+0x650>
1010d2f0:	00800434 	movhi	r2,16
1010d2f4:	89400234 	orhi	r5,r17,8
1010d2f8:	10bfffc4 	addi	r2,r2,-1
1010d2fc:	b007883a 	mov	r3,r22
1010d300:	288a703a 	and	r5,r5,r2
1010d304:	4025883a 	mov	r18,r8
1010d308:	003f3106 	br	1010cfd0 <__alt_data_end+0xfffecfd0>
1010d30c:	008000c4 	movi	r2,3
1010d310:	3080a626 	beq	r6,r2,1010d5ac <__divdf3+0x8cc>
1010d314:	00800044 	movi	r2,1
1010d318:	3080521e 	bne	r6,r2,1010d464 <__divdf3+0x784>
1010d31c:	b807883a 	mov	r3,r23
1010d320:	0005883a 	mov	r2,zero
1010d324:	000b883a 	mov	r5,zero
1010d328:	0025883a 	mov	r18,zero
1010d32c:	003ecb06 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010d330:	00800434 	movhi	r2,16
1010d334:	81400234 	orhi	r5,r16,8
1010d338:	10bfffc4 	addi	r2,r2,-1
1010d33c:	a007883a 	mov	r3,r20
1010d340:	288a703a 	and	r5,r5,r2
1010d344:	003f2206 	br	1010cfd0 <__alt_data_end+0xfffecfd0>
1010d348:	183fca26 	beq	r3,zero,1010d274 <__alt_data_end+0xfffed274>
1010d34c:	e5ef883a 	add	r23,fp,r23
1010d350:	40bfffc4 	addi	r2,r8,-1
1010d354:	bf00392e 	bgeu	r23,fp,1010d43c <__divdf3+0x75c>
1010d358:	1011883a 	mov	r8,r2
1010d35c:	ba7fc41e 	bne	r23,r9,1010d270 <__alt_data_end+0xfffed270>
1010d360:	b0ffc31e 	bne	r22,r3,1010d270 <__alt_data_end+0xfffed270>
1010d364:	003fc306 	br	1010d274 <__alt_data_end+0xfffed274>
1010d368:	10bff604 	addi	r2,r2,-40
1010d36c:	98a0983a 	sll	r16,r19,r2
1010d370:	0025883a 	mov	r18,zero
1010d374:	003ee206 	br	1010cf00 <__alt_data_end+0xfffecf00>
1010d378:	d9800315 	stw	r6,12(sp)
1010d37c:	d9c00215 	stw	r7,8(sp)
1010d380:	010ea380 	call	1010ea38 <__clzsi2>
1010d384:	10800804 	addi	r2,r2,32
1010d388:	d9c00217 	ldw	r7,8(sp)
1010d38c:	d9800317 	ldw	r6,12(sp)
1010d390:	003ed106 	br	1010ced8 <__alt_data_end+0xfffeced8>
1010d394:	10bff604 	addi	r2,r2,-40
1010d398:	30a2983a 	sll	r17,r6,r2
1010d39c:	0011883a 	mov	r8,zero
1010d3a0:	003ef506 	br	1010cf78 <__alt_data_end+0xfffecf78>
1010d3a4:	3009883a 	mov	r4,r6
1010d3a8:	d9800315 	stw	r6,12(sp)
1010d3ac:	da400115 	stw	r9,4(sp)
1010d3b0:	010ea380 	call	1010ea38 <__clzsi2>
1010d3b4:	10800804 	addi	r2,r2,32
1010d3b8:	da400117 	ldw	r9,4(sp)
1010d3bc:	d9800317 	ldw	r6,12(sp)
1010d3c0:	003ee306 	br	1010cf50 <__alt_data_end+0xfffecf50>
1010d3c4:	85a1883a 	add	r16,r16,r22
1010d3c8:	8585803a 	cmpltu	r2,r16,r22
1010d3cc:	1705883a 	add	r2,r2,fp
1010d3d0:	14a5883a 	add	r18,r2,r18
1010d3d4:	88bfffc4 	addi	r2,r17,-1
1010d3d8:	e4800c2e 	bgeu	fp,r18,1010d40c <__divdf3+0x72c>
1010d3dc:	90c03e36 	bltu	r18,r3,1010d4d8 <__divdf3+0x7f8>
1010d3e0:	1c806926 	beq	r3,r18,1010d588 <__divdf3+0x8a8>
1010d3e4:	90c7c83a 	sub	r3,r18,r3
1010d3e8:	1023883a 	mov	r17,r2
1010d3ec:	003f5206 	br	1010d138 <__alt_data_end+0xfffed138>
1010d3f0:	923f0436 	bltu	r18,r8,1010d004 <__alt_data_end+0xfffed004>
1010d3f4:	800897fa 	slli	r4,r16,31
1010d3f8:	9004d07a 	srli	r2,r18,1
1010d3fc:	8006d07a 	srli	r3,r16,1
1010d400:	902097fa 	slli	r16,r18,31
1010d404:	20a4b03a 	or	r18,r4,r2
1010d408:	003f0106 	br	1010d010 <__alt_data_end+0xfffed010>
1010d40c:	e4bff51e 	bne	fp,r18,1010d3e4 <__alt_data_end+0xfffed3e4>
1010d410:	85bff22e 	bgeu	r16,r22,1010d3dc <__alt_data_end+0xfffed3dc>
1010d414:	e0c7c83a 	sub	r3,fp,r3
1010d418:	1023883a 	mov	r17,r2
1010d41c:	003f4606 	br	1010d138 <__alt_data_end+0xfffed138>
1010d420:	100f883a 	mov	r7,r2
1010d424:	003f2b06 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d428:	180d883a 	mov	r6,r3
1010d42c:	003f1306 	br	1010d07c <__alt_data_end+0xfffed07c>
1010d430:	813fe436 	bltu	r16,r4,1010d3c4 <__alt_data_end+0xfffed3c4>
1010d434:	0007883a 	mov	r3,zero
1010d438:	003f3f06 	br	1010d138 <__alt_data_end+0xfffed138>
1010d43c:	ba402c36 	bltu	r23,r9,1010d4f0 <__divdf3+0x810>
1010d440:	4dc05426 	beq	r9,r23,1010d594 <__divdf3+0x8b4>
1010d444:	1011883a 	mov	r8,r2
1010d448:	003f8906 	br	1010d270 <__alt_data_end+0xfffed270>
1010d44c:	023fffc4 	movi	r8,-1
1010d450:	003f8806 	br	1010d274 <__alt_data_end+0xfffed274>
1010d454:	1811883a 	mov	r8,r3
1010d458:	003f5406 	br	1010d1ac <__alt_data_end+0xfffed1ac>
1010d45c:	1025883a 	mov	r18,r2
1010d460:	003f6d06 	br	1010d218 <__alt_data_end+0xfffed218>
1010d464:	b827883a 	mov	r19,r23
1010d468:	003f8206 	br	1010d274 <__alt_data_end+0xfffed274>
1010d46c:	010007c4 	movi	r4,31
1010d470:	20c02616 	blt	r4,r3,1010d50c <__divdf3+0x82c>
1010d474:	00800804 	movi	r2,32
1010d478:	10c5c83a 	sub	r2,r2,r3
1010d47c:	888a983a 	sll	r5,r17,r2
1010d480:	40c8d83a 	srl	r4,r8,r3
1010d484:	4084983a 	sll	r2,r8,r2
1010d488:	88e2d83a 	srl	r17,r17,r3
1010d48c:	2906b03a 	or	r3,r5,r4
1010d490:	1004c03a 	cmpne	r2,r2,zero
1010d494:	1886b03a 	or	r3,r3,r2
1010d498:	188001cc 	andi	r2,r3,7
1010d49c:	10000726 	beq	r2,zero,1010d4bc <__divdf3+0x7dc>
1010d4a0:	188003cc 	andi	r2,r3,15
1010d4a4:	01000104 	movi	r4,4
1010d4a8:	11000426 	beq	r2,r4,1010d4bc <__divdf3+0x7dc>
1010d4ac:	1805883a 	mov	r2,r3
1010d4b0:	10c00104 	addi	r3,r2,4
1010d4b4:	1885803a 	cmpltu	r2,r3,r2
1010d4b8:	88a3883a 	add	r17,r17,r2
1010d4bc:	8880202c 	andhi	r2,r17,128
1010d4c0:	10002726 	beq	r2,zero,1010d560 <__divdf3+0x880>
1010d4c4:	98c0004c 	andi	r3,r19,1
1010d4c8:	00800044 	movi	r2,1
1010d4cc:	000b883a 	mov	r5,zero
1010d4d0:	0025883a 	mov	r18,zero
1010d4d4:	003e6106 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010d4d8:	85a1883a 	add	r16,r16,r22
1010d4dc:	8585803a 	cmpltu	r2,r16,r22
1010d4e0:	1705883a 	add	r2,r2,fp
1010d4e4:	14a5883a 	add	r18,r2,r18
1010d4e8:	8c7fff84 	addi	r17,r17,-2
1010d4ec:	003f1106 	br	1010d134 <__alt_data_end+0xfffed134>
1010d4f0:	b589883a 	add	r4,r22,r22
1010d4f4:	25ad803a 	cmpltu	r22,r4,r22
1010d4f8:	b739883a 	add	fp,r22,fp
1010d4fc:	40bfff84 	addi	r2,r8,-2
1010d500:	bf2f883a 	add	r23,r23,fp
1010d504:	202d883a 	mov	r22,r4
1010d508:	003f9306 	br	1010d358 <__alt_data_end+0xfffed358>
1010d50c:	013ff844 	movi	r4,-31
1010d510:	2085c83a 	sub	r2,r4,r2
1010d514:	8888d83a 	srl	r4,r17,r2
1010d518:	00800804 	movi	r2,32
1010d51c:	18802126 	beq	r3,r2,1010d5a4 <__divdf3+0x8c4>
1010d520:	00801004 	movi	r2,64
1010d524:	10c5c83a 	sub	r2,r2,r3
1010d528:	8884983a 	sll	r2,r17,r2
1010d52c:	1204b03a 	or	r2,r2,r8
1010d530:	1004c03a 	cmpne	r2,r2,zero
1010d534:	2084b03a 	or	r2,r4,r2
1010d538:	144001cc 	andi	r17,r2,7
1010d53c:	88000d1e 	bne	r17,zero,1010d574 <__divdf3+0x894>
1010d540:	000b883a 	mov	r5,zero
1010d544:	1024d0fa 	srli	r18,r2,3
1010d548:	98c0004c 	andi	r3,r19,1
1010d54c:	0005883a 	mov	r2,zero
1010d550:	9464b03a 	or	r18,r18,r17
1010d554:	003e4106 	br	1010ce5c <__alt_data_end+0xfffece5c>
1010d558:	1007883a 	mov	r3,r2
1010d55c:	0023883a 	mov	r17,zero
1010d560:	880a927a 	slli	r5,r17,9
1010d564:	1805883a 	mov	r2,r3
1010d568:	8822977a 	slli	r17,r17,29
1010d56c:	280ad33a 	srli	r5,r5,12
1010d570:	003ff406 	br	1010d544 <__alt_data_end+0xfffed544>
1010d574:	10c003cc 	andi	r3,r2,15
1010d578:	01000104 	movi	r4,4
1010d57c:	193ff626 	beq	r3,r4,1010d558 <__alt_data_end+0xfffed558>
1010d580:	0023883a 	mov	r17,zero
1010d584:	003fca06 	br	1010d4b0 <__alt_data_end+0xfffed4b0>
1010d588:	813fd336 	bltu	r16,r4,1010d4d8 <__alt_data_end+0xfffed4d8>
1010d58c:	1023883a 	mov	r17,r2
1010d590:	003fa806 	br	1010d434 <__alt_data_end+0xfffed434>
1010d594:	b0ffd636 	bltu	r22,r3,1010d4f0 <__alt_data_end+0xfffed4f0>
1010d598:	1011883a 	mov	r8,r2
1010d59c:	b0ff341e 	bne	r22,r3,1010d270 <__alt_data_end+0xfffed270>
1010d5a0:	003f3406 	br	1010d274 <__alt_data_end+0xfffed274>
1010d5a4:	0005883a 	mov	r2,zero
1010d5a8:	003fe006 	br	1010d52c <__alt_data_end+0xfffed52c>
1010d5ac:	00800434 	movhi	r2,16
1010d5b0:	89400234 	orhi	r5,r17,8
1010d5b4:	10bfffc4 	addi	r2,r2,-1
1010d5b8:	b807883a 	mov	r3,r23
1010d5bc:	288a703a 	and	r5,r5,r2
1010d5c0:	4025883a 	mov	r18,r8
1010d5c4:	003e8206 	br	1010cfd0 <__alt_data_end+0xfffecfd0>

1010d5c8 <__eqdf2>:
1010d5c8:	2804d53a 	srli	r2,r5,20
1010d5cc:	3806d53a 	srli	r3,r7,20
1010d5d0:	02000434 	movhi	r8,16
1010d5d4:	423fffc4 	addi	r8,r8,-1
1010d5d8:	1081ffcc 	andi	r2,r2,2047
1010d5dc:	0281ffc4 	movi	r10,2047
1010d5e0:	2a12703a 	and	r9,r5,r8
1010d5e4:	18c1ffcc 	andi	r3,r3,2047
1010d5e8:	3a10703a 	and	r8,r7,r8
1010d5ec:	280ad7fa 	srli	r5,r5,31
1010d5f0:	380ed7fa 	srli	r7,r7,31
1010d5f4:	12801026 	beq	r2,r10,1010d638 <__eqdf2+0x70>
1010d5f8:	0281ffc4 	movi	r10,2047
1010d5fc:	1a800a26 	beq	r3,r10,1010d628 <__eqdf2+0x60>
1010d600:	10c00226 	beq	r2,r3,1010d60c <__eqdf2+0x44>
1010d604:	00800044 	movi	r2,1
1010d608:	f800283a 	ret
1010d60c:	4a3ffd1e 	bne	r9,r8,1010d604 <__alt_data_end+0xfffed604>
1010d610:	21bffc1e 	bne	r4,r6,1010d604 <__alt_data_end+0xfffed604>
1010d614:	29c00c26 	beq	r5,r7,1010d648 <__eqdf2+0x80>
1010d618:	103ffa1e 	bne	r2,zero,1010d604 <__alt_data_end+0xfffed604>
1010d61c:	2244b03a 	or	r2,r4,r9
1010d620:	1004c03a 	cmpne	r2,r2,zero
1010d624:	f800283a 	ret
1010d628:	3214b03a 	or	r10,r6,r8
1010d62c:	503ff426 	beq	r10,zero,1010d600 <__alt_data_end+0xfffed600>
1010d630:	00800044 	movi	r2,1
1010d634:	f800283a 	ret
1010d638:	2254b03a 	or	r10,r4,r9
1010d63c:	503fee26 	beq	r10,zero,1010d5f8 <__alt_data_end+0xfffed5f8>
1010d640:	00800044 	movi	r2,1
1010d644:	f800283a 	ret
1010d648:	0005883a 	mov	r2,zero
1010d64c:	f800283a 	ret

1010d650 <__gedf2>:
1010d650:	2804d53a 	srli	r2,r5,20
1010d654:	3806d53a 	srli	r3,r7,20
1010d658:	02000434 	movhi	r8,16
1010d65c:	423fffc4 	addi	r8,r8,-1
1010d660:	1081ffcc 	andi	r2,r2,2047
1010d664:	0241ffc4 	movi	r9,2047
1010d668:	2a14703a 	and	r10,r5,r8
1010d66c:	18c1ffcc 	andi	r3,r3,2047
1010d670:	3a10703a 	and	r8,r7,r8
1010d674:	280ad7fa 	srli	r5,r5,31
1010d678:	380ed7fa 	srli	r7,r7,31
1010d67c:	12401d26 	beq	r2,r9,1010d6f4 <__gedf2+0xa4>
1010d680:	0241ffc4 	movi	r9,2047
1010d684:	1a401226 	beq	r3,r9,1010d6d0 <__gedf2+0x80>
1010d688:	1000081e 	bne	r2,zero,1010d6ac <__gedf2+0x5c>
1010d68c:	2296b03a 	or	r11,r4,r10
1010d690:	5813003a 	cmpeq	r9,r11,zero
1010d694:	1800091e 	bne	r3,zero,1010d6bc <__gedf2+0x6c>
1010d698:	3218b03a 	or	r12,r6,r8
1010d69c:	6000071e 	bne	r12,zero,1010d6bc <__gedf2+0x6c>
1010d6a0:	0005883a 	mov	r2,zero
1010d6a4:	5800101e 	bne	r11,zero,1010d6e8 <__gedf2+0x98>
1010d6a8:	f800283a 	ret
1010d6ac:	18000c1e 	bne	r3,zero,1010d6e0 <__gedf2+0x90>
1010d6b0:	3212b03a 	or	r9,r6,r8
1010d6b4:	48000c26 	beq	r9,zero,1010d6e8 <__gedf2+0x98>
1010d6b8:	0013883a 	mov	r9,zero
1010d6bc:	39c03fcc 	andi	r7,r7,255
1010d6c0:	48000826 	beq	r9,zero,1010d6e4 <__gedf2+0x94>
1010d6c4:	38000926 	beq	r7,zero,1010d6ec <__gedf2+0x9c>
1010d6c8:	00800044 	movi	r2,1
1010d6cc:	f800283a 	ret
1010d6d0:	3212b03a 	or	r9,r6,r8
1010d6d4:	483fec26 	beq	r9,zero,1010d688 <__alt_data_end+0xfffed688>
1010d6d8:	00bfff84 	movi	r2,-2
1010d6dc:	f800283a 	ret
1010d6e0:	39c03fcc 	andi	r7,r7,255
1010d6e4:	29c00626 	beq	r5,r7,1010d700 <__gedf2+0xb0>
1010d6e8:	283ff726 	beq	r5,zero,1010d6c8 <__alt_data_end+0xfffed6c8>
1010d6ec:	00bfffc4 	movi	r2,-1
1010d6f0:	f800283a 	ret
1010d6f4:	2292b03a 	or	r9,r4,r10
1010d6f8:	483fe126 	beq	r9,zero,1010d680 <__alt_data_end+0xfffed680>
1010d6fc:	003ff606 	br	1010d6d8 <__alt_data_end+0xfffed6d8>
1010d700:	18bff916 	blt	r3,r2,1010d6e8 <__alt_data_end+0xfffed6e8>
1010d704:	10c00316 	blt	r2,r3,1010d714 <__gedf2+0xc4>
1010d708:	42bff736 	bltu	r8,r10,1010d6e8 <__alt_data_end+0xfffed6e8>
1010d70c:	52000326 	beq	r10,r8,1010d71c <__gedf2+0xcc>
1010d710:	5200042e 	bgeu	r10,r8,1010d724 <__gedf2+0xd4>
1010d714:	283fec1e 	bne	r5,zero,1010d6c8 <__alt_data_end+0xfffed6c8>
1010d718:	003ff406 	br	1010d6ec <__alt_data_end+0xfffed6ec>
1010d71c:	313ff236 	bltu	r6,r4,1010d6e8 <__alt_data_end+0xfffed6e8>
1010d720:	21bffc36 	bltu	r4,r6,1010d714 <__alt_data_end+0xfffed714>
1010d724:	0005883a 	mov	r2,zero
1010d728:	f800283a 	ret

1010d72c <__ledf2>:
1010d72c:	2804d53a 	srli	r2,r5,20
1010d730:	3810d53a 	srli	r8,r7,20
1010d734:	00c00434 	movhi	r3,16
1010d738:	18ffffc4 	addi	r3,r3,-1
1010d73c:	1081ffcc 	andi	r2,r2,2047
1010d740:	0241ffc4 	movi	r9,2047
1010d744:	28d4703a 	and	r10,r5,r3
1010d748:	4201ffcc 	andi	r8,r8,2047
1010d74c:	38c6703a 	and	r3,r7,r3
1010d750:	280ad7fa 	srli	r5,r5,31
1010d754:	380ed7fa 	srli	r7,r7,31
1010d758:	12401f26 	beq	r2,r9,1010d7d8 <__ledf2+0xac>
1010d75c:	0241ffc4 	movi	r9,2047
1010d760:	42401426 	beq	r8,r9,1010d7b4 <__ledf2+0x88>
1010d764:	1000091e 	bne	r2,zero,1010d78c <__ledf2+0x60>
1010d768:	2296b03a 	or	r11,r4,r10
1010d76c:	5813003a 	cmpeq	r9,r11,zero
1010d770:	29403fcc 	andi	r5,r5,255
1010d774:	40000a1e 	bne	r8,zero,1010d7a0 <__ledf2+0x74>
1010d778:	30d8b03a 	or	r12,r6,r3
1010d77c:	6000081e 	bne	r12,zero,1010d7a0 <__ledf2+0x74>
1010d780:	0005883a 	mov	r2,zero
1010d784:	5800111e 	bne	r11,zero,1010d7cc <__ledf2+0xa0>
1010d788:	f800283a 	ret
1010d78c:	29403fcc 	andi	r5,r5,255
1010d790:	40000c1e 	bne	r8,zero,1010d7c4 <__ledf2+0x98>
1010d794:	30d2b03a 	or	r9,r6,r3
1010d798:	48000c26 	beq	r9,zero,1010d7cc <__ledf2+0xa0>
1010d79c:	0013883a 	mov	r9,zero
1010d7a0:	39c03fcc 	andi	r7,r7,255
1010d7a4:	48000826 	beq	r9,zero,1010d7c8 <__ledf2+0x9c>
1010d7a8:	38001126 	beq	r7,zero,1010d7f0 <__ledf2+0xc4>
1010d7ac:	00800044 	movi	r2,1
1010d7b0:	f800283a 	ret
1010d7b4:	30d2b03a 	or	r9,r6,r3
1010d7b8:	483fea26 	beq	r9,zero,1010d764 <__alt_data_end+0xfffed764>
1010d7bc:	00800084 	movi	r2,2
1010d7c0:	f800283a 	ret
1010d7c4:	39c03fcc 	andi	r7,r7,255
1010d7c8:	39400726 	beq	r7,r5,1010d7e8 <__ledf2+0xbc>
1010d7cc:	2800081e 	bne	r5,zero,1010d7f0 <__ledf2+0xc4>
1010d7d0:	00800044 	movi	r2,1
1010d7d4:	f800283a 	ret
1010d7d8:	2292b03a 	or	r9,r4,r10
1010d7dc:	483fdf26 	beq	r9,zero,1010d75c <__alt_data_end+0xfffed75c>
1010d7e0:	00800084 	movi	r2,2
1010d7e4:	f800283a 	ret
1010d7e8:	4080030e 	bge	r8,r2,1010d7f8 <__ledf2+0xcc>
1010d7ec:	383fef26 	beq	r7,zero,1010d7ac <__alt_data_end+0xfffed7ac>
1010d7f0:	00bfffc4 	movi	r2,-1
1010d7f4:	f800283a 	ret
1010d7f8:	123feb16 	blt	r2,r8,1010d7a8 <__alt_data_end+0xfffed7a8>
1010d7fc:	1abff336 	bltu	r3,r10,1010d7cc <__alt_data_end+0xfffed7cc>
1010d800:	50c00326 	beq	r10,r3,1010d810 <__ledf2+0xe4>
1010d804:	50c0042e 	bgeu	r10,r3,1010d818 <__ledf2+0xec>
1010d808:	283fe81e 	bne	r5,zero,1010d7ac <__alt_data_end+0xfffed7ac>
1010d80c:	003ff806 	br	1010d7f0 <__alt_data_end+0xfffed7f0>
1010d810:	313fee36 	bltu	r6,r4,1010d7cc <__alt_data_end+0xfffed7cc>
1010d814:	21bffc36 	bltu	r4,r6,1010d808 <__alt_data_end+0xfffed808>
1010d818:	0005883a 	mov	r2,zero
1010d81c:	f800283a 	ret

1010d820 <__muldf3>:
1010d820:	defff304 	addi	sp,sp,-52
1010d824:	dd400815 	stw	r21,32(sp)
1010d828:	282ad53a 	srli	r21,r5,20
1010d82c:	dd800915 	stw	r22,36(sp)
1010d830:	282cd7fa 	srli	r22,r5,31
1010d834:	dc000315 	stw	r16,12(sp)
1010d838:	04000434 	movhi	r16,16
1010d83c:	dd000715 	stw	r20,28(sp)
1010d840:	843fffc4 	addi	r16,r16,-1
1010d844:	dfc00c15 	stw	ra,48(sp)
1010d848:	df000b15 	stw	fp,44(sp)
1010d84c:	ddc00a15 	stw	r23,40(sp)
1010d850:	dcc00615 	stw	r19,24(sp)
1010d854:	dc800515 	stw	r18,20(sp)
1010d858:	dc400415 	stw	r17,16(sp)
1010d85c:	ad41ffcc 	andi	r21,r21,2047
1010d860:	2c20703a 	and	r16,r5,r16
1010d864:	b029883a 	mov	r20,r22
1010d868:	b2403fcc 	andi	r9,r22,255
1010d86c:	a8006026 	beq	r21,zero,1010d9f0 <__muldf3+0x1d0>
1010d870:	0081ffc4 	movi	r2,2047
1010d874:	2027883a 	mov	r19,r4
1010d878:	a8803626 	beq	r21,r2,1010d954 <__muldf3+0x134>
1010d87c:	80c00434 	orhi	r3,r16,16
1010d880:	180690fa 	slli	r3,r3,3
1010d884:	2020d77a 	srli	r16,r4,29
1010d888:	202690fa 	slli	r19,r4,3
1010d88c:	ad7f0044 	addi	r21,r21,-1023
1010d890:	80e0b03a 	or	r16,r16,r3
1010d894:	0025883a 	mov	r18,zero
1010d898:	0039883a 	mov	fp,zero
1010d89c:	3808d53a 	srli	r4,r7,20
1010d8a0:	382ed7fa 	srli	r23,r7,31
1010d8a4:	04400434 	movhi	r17,16
1010d8a8:	8c7fffc4 	addi	r17,r17,-1
1010d8ac:	2101ffcc 	andi	r4,r4,2047
1010d8b0:	3011883a 	mov	r8,r6
1010d8b4:	3c62703a 	and	r17,r7,r17
1010d8b8:	ba803fcc 	andi	r10,r23,255
1010d8bc:	20006d26 	beq	r4,zero,1010da74 <__muldf3+0x254>
1010d8c0:	0081ffc4 	movi	r2,2047
1010d8c4:	20806526 	beq	r4,r2,1010da5c <__muldf3+0x23c>
1010d8c8:	88c00434 	orhi	r3,r17,16
1010d8cc:	180690fa 	slli	r3,r3,3
1010d8d0:	3022d77a 	srli	r17,r6,29
1010d8d4:	301090fa 	slli	r8,r6,3
1010d8d8:	213f0044 	addi	r4,r4,-1023
1010d8dc:	88e2b03a 	or	r17,r17,r3
1010d8e0:	000b883a 	mov	r5,zero
1010d8e4:	a909883a 	add	r4,r21,r4
1010d8e8:	2c84b03a 	or	r2,r5,r18
1010d8ec:	00c003c4 	movi	r3,15
1010d8f0:	bdacf03a 	xor	r22,r23,r22
1010d8f4:	22c00044 	addi	r11,r4,1
1010d8f8:	18809936 	bltu	r3,r2,1010db60 <__muldf3+0x340>
1010d8fc:	100490ba 	slli	r2,r2,2
1010d900:	00c40474 	movhi	r3,4113
1010d904:	18f64504 	addi	r3,r3,-9964
1010d908:	10c5883a 	add	r2,r2,r3
1010d90c:	10800017 	ldw	r2,0(r2)
1010d910:	1000683a 	jmp	r2
1010d914:	1010db60 	cmpeqi	zero,r2,17261
1010d918:	1010d974 	orhi	zero,r2,17253
1010d91c:	1010d974 	orhi	zero,r2,17253
1010d920:	1010d970 	cmpltui	zero,r2,17253
1010d924:	1010db3c 	xorhi	zero,r2,17260
1010d928:	1010db3c 	xorhi	zero,r2,17260
1010d92c:	1010db24 	muli	zero,r2,17260
1010d930:	1010d970 	cmpltui	zero,r2,17253
1010d934:	1010db3c 	xorhi	zero,r2,17260
1010d938:	1010db24 	muli	zero,r2,17260
1010d93c:	1010db3c 	xorhi	zero,r2,17260
1010d940:	1010d970 	cmpltui	zero,r2,17253
1010d944:	1010db4c 	andi	zero,r2,17261
1010d948:	1010db4c 	andi	zero,r2,17261
1010d94c:	1010db4c 	andi	zero,r2,17261
1010d950:	1010dd68 	cmpgeui	zero,r2,17269
1010d954:	2404b03a 	or	r2,r4,r16
1010d958:	10006f1e 	bne	r2,zero,1010db18 <__muldf3+0x2f8>
1010d95c:	04800204 	movi	r18,8
1010d960:	0021883a 	mov	r16,zero
1010d964:	0027883a 	mov	r19,zero
1010d968:	07000084 	movi	fp,2
1010d96c:	003fcb06 	br	1010d89c <__alt_data_end+0xfffed89c>
1010d970:	502d883a 	mov	r22,r10
1010d974:	00800084 	movi	r2,2
1010d978:	28805726 	beq	r5,r2,1010dad8 <__muldf3+0x2b8>
1010d97c:	008000c4 	movi	r2,3
1010d980:	28816626 	beq	r5,r2,1010df1c <__muldf3+0x6fc>
1010d984:	00800044 	movi	r2,1
1010d988:	2881411e 	bne	r5,r2,1010de90 <__muldf3+0x670>
1010d98c:	b029883a 	mov	r20,r22
1010d990:	0005883a 	mov	r2,zero
1010d994:	000b883a 	mov	r5,zero
1010d998:	0027883a 	mov	r19,zero
1010d99c:	1004953a 	slli	r2,r2,20
1010d9a0:	a0c03fcc 	andi	r3,r20,255
1010d9a4:	04400434 	movhi	r17,16
1010d9a8:	8c7fffc4 	addi	r17,r17,-1
1010d9ac:	180697fa 	slli	r3,r3,31
1010d9b0:	2c4a703a 	and	r5,r5,r17
1010d9b4:	288ab03a 	or	r5,r5,r2
1010d9b8:	28c6b03a 	or	r3,r5,r3
1010d9bc:	9805883a 	mov	r2,r19
1010d9c0:	dfc00c17 	ldw	ra,48(sp)
1010d9c4:	df000b17 	ldw	fp,44(sp)
1010d9c8:	ddc00a17 	ldw	r23,40(sp)
1010d9cc:	dd800917 	ldw	r22,36(sp)
1010d9d0:	dd400817 	ldw	r21,32(sp)
1010d9d4:	dd000717 	ldw	r20,28(sp)
1010d9d8:	dcc00617 	ldw	r19,24(sp)
1010d9dc:	dc800517 	ldw	r18,20(sp)
1010d9e0:	dc400417 	ldw	r17,16(sp)
1010d9e4:	dc000317 	ldw	r16,12(sp)
1010d9e8:	dec00d04 	addi	sp,sp,52
1010d9ec:	f800283a 	ret
1010d9f0:	2404b03a 	or	r2,r4,r16
1010d9f4:	2025883a 	mov	r18,r4
1010d9f8:	10004226 	beq	r2,zero,1010db04 <__muldf3+0x2e4>
1010d9fc:	8000fc26 	beq	r16,zero,1010ddf0 <__muldf3+0x5d0>
1010da00:	8009883a 	mov	r4,r16
1010da04:	d9800215 	stw	r6,8(sp)
1010da08:	d9c00015 	stw	r7,0(sp)
1010da0c:	da400115 	stw	r9,4(sp)
1010da10:	010ea380 	call	1010ea38 <__clzsi2>
1010da14:	d9800217 	ldw	r6,8(sp)
1010da18:	d9c00017 	ldw	r7,0(sp)
1010da1c:	da400117 	ldw	r9,4(sp)
1010da20:	10fffd44 	addi	r3,r2,-11
1010da24:	01000704 	movi	r4,28
1010da28:	20c0ed16 	blt	r4,r3,1010dde0 <__muldf3+0x5c0>
1010da2c:	01000744 	movi	r4,29
1010da30:	147ffe04 	addi	r17,r2,-8
1010da34:	20c9c83a 	sub	r4,r4,r3
1010da38:	8460983a 	sll	r16,r16,r17
1010da3c:	9108d83a 	srl	r4,r18,r4
1010da40:	9466983a 	sll	r19,r18,r17
1010da44:	2420b03a 	or	r16,r4,r16
1010da48:	013f0084 	movi	r4,-1022
1010da4c:	20ebc83a 	sub	r21,r4,r3
1010da50:	0025883a 	mov	r18,zero
1010da54:	0039883a 	mov	fp,zero
1010da58:	003f9006 	br	1010d89c <__alt_data_end+0xfffed89c>
1010da5c:	3444b03a 	or	r2,r6,r17
1010da60:	1000261e 	bne	r2,zero,1010dafc <__muldf3+0x2dc>
1010da64:	0023883a 	mov	r17,zero
1010da68:	0011883a 	mov	r8,zero
1010da6c:	01400084 	movi	r5,2
1010da70:	003f9c06 	br	1010d8e4 <__alt_data_end+0xfffed8e4>
1010da74:	3444b03a 	or	r2,r6,r17
1010da78:	10001c26 	beq	r2,zero,1010daec <__muldf3+0x2cc>
1010da7c:	8800ce26 	beq	r17,zero,1010ddb8 <__muldf3+0x598>
1010da80:	8809883a 	mov	r4,r17
1010da84:	d9800215 	stw	r6,8(sp)
1010da88:	da400115 	stw	r9,4(sp)
1010da8c:	da800015 	stw	r10,0(sp)
1010da90:	010ea380 	call	1010ea38 <__clzsi2>
1010da94:	d9800217 	ldw	r6,8(sp)
1010da98:	da400117 	ldw	r9,4(sp)
1010da9c:	da800017 	ldw	r10,0(sp)
1010daa0:	113ffd44 	addi	r4,r2,-11
1010daa4:	00c00704 	movi	r3,28
1010daa8:	1900bf16 	blt	r3,r4,1010dda8 <__muldf3+0x588>
1010daac:	00c00744 	movi	r3,29
1010dab0:	123ffe04 	addi	r8,r2,-8
1010dab4:	1907c83a 	sub	r3,r3,r4
1010dab8:	8a22983a 	sll	r17,r17,r8
1010dabc:	30c6d83a 	srl	r3,r6,r3
1010dac0:	3210983a 	sll	r8,r6,r8
1010dac4:	1c62b03a 	or	r17,r3,r17
1010dac8:	017f0084 	movi	r5,-1022
1010dacc:	2909c83a 	sub	r4,r5,r4
1010dad0:	000b883a 	mov	r5,zero
1010dad4:	003f8306 	br	1010d8e4 <__alt_data_end+0xfffed8e4>
1010dad8:	b029883a 	mov	r20,r22
1010dadc:	0081ffc4 	movi	r2,2047
1010dae0:	000b883a 	mov	r5,zero
1010dae4:	0027883a 	mov	r19,zero
1010dae8:	003fac06 	br	1010d99c <__alt_data_end+0xfffed99c>
1010daec:	0023883a 	mov	r17,zero
1010daf0:	0011883a 	mov	r8,zero
1010daf4:	01400044 	movi	r5,1
1010daf8:	003f7a06 	br	1010d8e4 <__alt_data_end+0xfffed8e4>
1010dafc:	014000c4 	movi	r5,3
1010db00:	003f7806 	br	1010d8e4 <__alt_data_end+0xfffed8e4>
1010db04:	04800104 	movi	r18,4
1010db08:	0021883a 	mov	r16,zero
1010db0c:	0027883a 	mov	r19,zero
1010db10:	07000044 	movi	fp,1
1010db14:	003f6106 	br	1010d89c <__alt_data_end+0xfffed89c>
1010db18:	04800304 	movi	r18,12
1010db1c:	070000c4 	movi	fp,3
1010db20:	003f5e06 	br	1010d89c <__alt_data_end+0xfffed89c>
1010db24:	01400434 	movhi	r5,16
1010db28:	0029883a 	mov	r20,zero
1010db2c:	297fffc4 	addi	r5,r5,-1
1010db30:	04ffffc4 	movi	r19,-1
1010db34:	0081ffc4 	movi	r2,2047
1010db38:	003f9806 	br	1010d99c <__alt_data_end+0xfffed99c>
1010db3c:	8023883a 	mov	r17,r16
1010db40:	9811883a 	mov	r8,r19
1010db44:	e00b883a 	mov	r5,fp
1010db48:	003f8a06 	br	1010d974 <__alt_data_end+0xfffed974>
1010db4c:	8023883a 	mov	r17,r16
1010db50:	9811883a 	mov	r8,r19
1010db54:	482d883a 	mov	r22,r9
1010db58:	e00b883a 	mov	r5,fp
1010db5c:	003f8506 	br	1010d974 <__alt_data_end+0xfffed974>
1010db60:	980ad43a 	srli	r5,r19,16
1010db64:	401ad43a 	srli	r13,r8,16
1010db68:	9cffffcc 	andi	r19,r19,65535
1010db6c:	423fffcc 	andi	r8,r8,65535
1010db70:	44d9383a 	mul	r12,r8,r19
1010db74:	4145383a 	mul	r2,r8,r5
1010db78:	6ccd383a 	mul	r6,r13,r19
1010db7c:	6006d43a 	srli	r3,r12,16
1010db80:	2b5d383a 	mul	r14,r5,r13
1010db84:	308d883a 	add	r6,r6,r2
1010db88:	198d883a 	add	r6,r3,r6
1010db8c:	3080022e 	bgeu	r6,r2,1010db98 <__muldf3+0x378>
1010db90:	00800074 	movhi	r2,1
1010db94:	709d883a 	add	r14,r14,r2
1010db98:	8828d43a 	srli	r20,r17,16
1010db9c:	8bffffcc 	andi	r15,r17,65535
1010dba0:	7ce3383a 	mul	r17,r15,r19
1010dba4:	7945383a 	mul	r2,r15,r5
1010dba8:	a4e7383a 	mul	r19,r20,r19
1010dbac:	8814d43a 	srli	r10,r17,16
1010dbb0:	3012943a 	slli	r9,r6,16
1010dbb4:	98a7883a 	add	r19,r19,r2
1010dbb8:	633fffcc 	andi	r12,r12,65535
1010dbbc:	54d5883a 	add	r10,r10,r19
1010dbc0:	3006d43a 	srli	r3,r6,16
1010dbc4:	4b13883a 	add	r9,r9,r12
1010dbc8:	2d0b383a 	mul	r5,r5,r20
1010dbcc:	5080022e 	bgeu	r10,r2,1010dbd8 <__muldf3+0x3b8>
1010dbd0:	00800074 	movhi	r2,1
1010dbd4:	288b883a 	add	r5,r5,r2
1010dbd8:	802ad43a 	srli	r21,r16,16
1010dbdc:	843fffcc 	andi	r16,r16,65535
1010dbe0:	440d383a 	mul	r6,r8,r16
1010dbe4:	4565383a 	mul	r18,r8,r21
1010dbe8:	8359383a 	mul	r12,r16,r13
1010dbec:	500e943a 	slli	r7,r10,16
1010dbf0:	3010d43a 	srli	r8,r6,16
1010dbf4:	5026d43a 	srli	r19,r10,16
1010dbf8:	6499883a 	add	r12,r12,r18
1010dbfc:	8abfffcc 	andi	r10,r17,65535
1010dc00:	3a95883a 	add	r10,r7,r10
1010dc04:	4319883a 	add	r12,r8,r12
1010dc08:	9967883a 	add	r19,r19,r5
1010dc0c:	1a87883a 	add	r3,r3,r10
1010dc10:	6d5b383a 	mul	r13,r13,r21
1010dc14:	6480022e 	bgeu	r12,r18,1010dc20 <__muldf3+0x400>
1010dc18:	00800074 	movhi	r2,1
1010dc1c:	689b883a 	add	r13,r13,r2
1010dc20:	7c25383a 	mul	r18,r15,r16
1010dc24:	7d4b383a 	mul	r5,r15,r21
1010dc28:	850f383a 	mul	r7,r16,r20
1010dc2c:	901ed43a 	srli	r15,r18,16
1010dc30:	6004d43a 	srli	r2,r12,16
1010dc34:	6010943a 	slli	r8,r12,16
1010dc38:	394f883a 	add	r7,r7,r5
1010dc3c:	333fffcc 	andi	r12,r6,65535
1010dc40:	79df883a 	add	r15,r15,r7
1010dc44:	135b883a 	add	r13,r2,r13
1010dc48:	a563383a 	mul	r17,r20,r21
1010dc4c:	4305883a 	add	r2,r8,r12
1010dc50:	7940022e 	bgeu	r15,r5,1010dc5c <__muldf3+0x43c>
1010dc54:	01400074 	movhi	r5,1
1010dc58:	8963883a 	add	r17,r17,r5
1010dc5c:	780a943a 	slli	r5,r15,16
1010dc60:	91bfffcc 	andi	r6,r18,65535
1010dc64:	70c7883a 	add	r3,r14,r3
1010dc68:	298d883a 	add	r6,r5,r6
1010dc6c:	1a8f803a 	cmpltu	r7,r3,r10
1010dc70:	34cb883a 	add	r5,r6,r19
1010dc74:	10c7883a 	add	r3,r2,r3
1010dc78:	3955883a 	add	r10,r7,r5
1010dc7c:	1885803a 	cmpltu	r2,r3,r2
1010dc80:	6a91883a 	add	r8,r13,r10
1010dc84:	780cd43a 	srli	r6,r15,16
1010dc88:	1219883a 	add	r12,r2,r8
1010dc8c:	2ccb803a 	cmpltu	r5,r5,r19
1010dc90:	51cf803a 	cmpltu	r7,r10,r7
1010dc94:	29ceb03a 	or	r7,r5,r7
1010dc98:	4351803a 	cmpltu	r8,r8,r13
1010dc9c:	608b803a 	cmpltu	r5,r12,r2
1010dca0:	4144b03a 	or	r2,r8,r5
1010dca4:	398f883a 	add	r7,r7,r6
1010dca8:	3885883a 	add	r2,r7,r2
1010dcac:	1810927a 	slli	r8,r3,9
1010dcb0:	1445883a 	add	r2,r2,r17
1010dcb4:	1004927a 	slli	r2,r2,9
1010dcb8:	6022d5fa 	srli	r17,r12,23
1010dcbc:	1806d5fa 	srli	r3,r3,23
1010dcc0:	4252b03a 	or	r9,r8,r9
1010dcc4:	600a927a 	slli	r5,r12,9
1010dcc8:	4810c03a 	cmpne	r8,r9,zero
1010dccc:	1462b03a 	or	r17,r2,r17
1010dcd0:	40c6b03a 	or	r3,r8,r3
1010dcd4:	8880402c 	andhi	r2,r17,256
1010dcd8:	1950b03a 	or	r8,r3,r5
1010dcdc:	10000726 	beq	r2,zero,1010dcfc <__muldf3+0x4dc>
1010dce0:	4006d07a 	srli	r3,r8,1
1010dce4:	880497fa 	slli	r2,r17,31
1010dce8:	4200004c 	andi	r8,r8,1
1010dcec:	8822d07a 	srli	r17,r17,1
1010dcf0:	1a10b03a 	or	r8,r3,r8
1010dcf4:	1210b03a 	or	r8,r2,r8
1010dcf8:	5809883a 	mov	r4,r11
1010dcfc:	2080ffc4 	addi	r2,r4,1023
1010dd00:	0080440e 	bge	zero,r2,1010de14 <__muldf3+0x5f4>
1010dd04:	40c001cc 	andi	r3,r8,7
1010dd08:	18000726 	beq	r3,zero,1010dd28 <__muldf3+0x508>
1010dd0c:	40c003cc 	andi	r3,r8,15
1010dd10:	01400104 	movi	r5,4
1010dd14:	19400426 	beq	r3,r5,1010dd28 <__muldf3+0x508>
1010dd18:	4147883a 	add	r3,r8,r5
1010dd1c:	1a11803a 	cmpltu	r8,r3,r8
1010dd20:	8a23883a 	add	r17,r17,r8
1010dd24:	1811883a 	mov	r8,r3
1010dd28:	88c0402c 	andhi	r3,r17,256
1010dd2c:	18000426 	beq	r3,zero,1010dd40 <__muldf3+0x520>
1010dd30:	00ffc034 	movhi	r3,65280
1010dd34:	18ffffc4 	addi	r3,r3,-1
1010dd38:	20810004 	addi	r2,r4,1024
1010dd3c:	88e2703a 	and	r17,r17,r3
1010dd40:	00c1ff84 	movi	r3,2046
1010dd44:	18bf6416 	blt	r3,r2,1010dad8 <__alt_data_end+0xfffedad8>
1010dd48:	8826977a 	slli	r19,r17,29
1010dd4c:	4010d0fa 	srli	r8,r8,3
1010dd50:	8822927a 	slli	r17,r17,9
1010dd54:	1081ffcc 	andi	r2,r2,2047
1010dd58:	9a26b03a 	or	r19,r19,r8
1010dd5c:	880ad33a 	srli	r5,r17,12
1010dd60:	b029883a 	mov	r20,r22
1010dd64:	003f0d06 	br	1010d99c <__alt_data_end+0xfffed99c>
1010dd68:	8080022c 	andhi	r2,r16,8
1010dd6c:	10000926 	beq	r2,zero,1010dd94 <__muldf3+0x574>
1010dd70:	8880022c 	andhi	r2,r17,8
1010dd74:	1000071e 	bne	r2,zero,1010dd94 <__muldf3+0x574>
1010dd78:	00800434 	movhi	r2,16
1010dd7c:	89400234 	orhi	r5,r17,8
1010dd80:	10bfffc4 	addi	r2,r2,-1
1010dd84:	b829883a 	mov	r20,r23
1010dd88:	288a703a 	and	r5,r5,r2
1010dd8c:	4027883a 	mov	r19,r8
1010dd90:	003f6806 	br	1010db34 <__alt_data_end+0xfffedb34>
1010dd94:	00800434 	movhi	r2,16
1010dd98:	81400234 	orhi	r5,r16,8
1010dd9c:	10bfffc4 	addi	r2,r2,-1
1010dda0:	288a703a 	and	r5,r5,r2
1010dda4:	003f6306 	br	1010db34 <__alt_data_end+0xfffedb34>
1010dda8:	10bff604 	addi	r2,r2,-40
1010ddac:	30a2983a 	sll	r17,r6,r2
1010ddb0:	0011883a 	mov	r8,zero
1010ddb4:	003f4406 	br	1010dac8 <__alt_data_end+0xfffedac8>
1010ddb8:	3009883a 	mov	r4,r6
1010ddbc:	d9800215 	stw	r6,8(sp)
1010ddc0:	da400115 	stw	r9,4(sp)
1010ddc4:	da800015 	stw	r10,0(sp)
1010ddc8:	010ea380 	call	1010ea38 <__clzsi2>
1010ddcc:	10800804 	addi	r2,r2,32
1010ddd0:	da800017 	ldw	r10,0(sp)
1010ddd4:	da400117 	ldw	r9,4(sp)
1010ddd8:	d9800217 	ldw	r6,8(sp)
1010dddc:	003f3006 	br	1010daa0 <__alt_data_end+0xfffedaa0>
1010dde0:	10bff604 	addi	r2,r2,-40
1010dde4:	90a0983a 	sll	r16,r18,r2
1010dde8:	0027883a 	mov	r19,zero
1010ddec:	003f1606 	br	1010da48 <__alt_data_end+0xfffeda48>
1010ddf0:	d9800215 	stw	r6,8(sp)
1010ddf4:	d9c00015 	stw	r7,0(sp)
1010ddf8:	da400115 	stw	r9,4(sp)
1010ddfc:	010ea380 	call	1010ea38 <__clzsi2>
1010de00:	10800804 	addi	r2,r2,32
1010de04:	da400117 	ldw	r9,4(sp)
1010de08:	d9c00017 	ldw	r7,0(sp)
1010de0c:	d9800217 	ldw	r6,8(sp)
1010de10:	003f0306 	br	1010da20 <__alt_data_end+0xfffeda20>
1010de14:	00c00044 	movi	r3,1
1010de18:	1887c83a 	sub	r3,r3,r2
1010de1c:	01000e04 	movi	r4,56
1010de20:	20feda16 	blt	r4,r3,1010d98c <__alt_data_end+0xfffed98c>
1010de24:	010007c4 	movi	r4,31
1010de28:	20c01b16 	blt	r4,r3,1010de98 <__muldf3+0x678>
1010de2c:	00800804 	movi	r2,32
1010de30:	10c5c83a 	sub	r2,r2,r3
1010de34:	888a983a 	sll	r5,r17,r2
1010de38:	40c8d83a 	srl	r4,r8,r3
1010de3c:	4084983a 	sll	r2,r8,r2
1010de40:	88e2d83a 	srl	r17,r17,r3
1010de44:	2906b03a 	or	r3,r5,r4
1010de48:	1004c03a 	cmpne	r2,r2,zero
1010de4c:	1886b03a 	or	r3,r3,r2
1010de50:	188001cc 	andi	r2,r3,7
1010de54:	10000726 	beq	r2,zero,1010de74 <__muldf3+0x654>
1010de58:	188003cc 	andi	r2,r3,15
1010de5c:	01000104 	movi	r4,4
1010de60:	11000426 	beq	r2,r4,1010de74 <__muldf3+0x654>
1010de64:	1805883a 	mov	r2,r3
1010de68:	10c00104 	addi	r3,r2,4
1010de6c:	1885803a 	cmpltu	r2,r3,r2
1010de70:	88a3883a 	add	r17,r17,r2
1010de74:	8880202c 	andhi	r2,r17,128
1010de78:	10001c26 	beq	r2,zero,1010deec <__muldf3+0x6cc>
1010de7c:	b029883a 	mov	r20,r22
1010de80:	00800044 	movi	r2,1
1010de84:	000b883a 	mov	r5,zero
1010de88:	0027883a 	mov	r19,zero
1010de8c:	003ec306 	br	1010d99c <__alt_data_end+0xfffed99c>
1010de90:	5809883a 	mov	r4,r11
1010de94:	003f9906 	br	1010dcfc <__alt_data_end+0xfffedcfc>
1010de98:	013ff844 	movi	r4,-31
1010de9c:	2085c83a 	sub	r2,r4,r2
1010dea0:	8888d83a 	srl	r4,r17,r2
1010dea4:	00800804 	movi	r2,32
1010dea8:	18801a26 	beq	r3,r2,1010df14 <__muldf3+0x6f4>
1010deac:	00801004 	movi	r2,64
1010deb0:	10c5c83a 	sub	r2,r2,r3
1010deb4:	8884983a 	sll	r2,r17,r2
1010deb8:	1204b03a 	or	r2,r2,r8
1010debc:	1004c03a 	cmpne	r2,r2,zero
1010dec0:	2084b03a 	or	r2,r4,r2
1010dec4:	144001cc 	andi	r17,r2,7
1010dec8:	88000d1e 	bne	r17,zero,1010df00 <__muldf3+0x6e0>
1010decc:	000b883a 	mov	r5,zero
1010ded0:	1026d0fa 	srli	r19,r2,3
1010ded4:	b029883a 	mov	r20,r22
1010ded8:	0005883a 	mov	r2,zero
1010dedc:	9c66b03a 	or	r19,r19,r17
1010dee0:	003eae06 	br	1010d99c <__alt_data_end+0xfffed99c>
1010dee4:	1007883a 	mov	r3,r2
1010dee8:	0023883a 	mov	r17,zero
1010deec:	880a927a 	slli	r5,r17,9
1010def0:	1805883a 	mov	r2,r3
1010def4:	8822977a 	slli	r17,r17,29
1010def8:	280ad33a 	srli	r5,r5,12
1010defc:	003ff406 	br	1010ded0 <__alt_data_end+0xfffeded0>
1010df00:	10c003cc 	andi	r3,r2,15
1010df04:	01000104 	movi	r4,4
1010df08:	193ff626 	beq	r3,r4,1010dee4 <__alt_data_end+0xfffedee4>
1010df0c:	0023883a 	mov	r17,zero
1010df10:	003fd506 	br	1010de68 <__alt_data_end+0xfffede68>
1010df14:	0005883a 	mov	r2,zero
1010df18:	003fe706 	br	1010deb8 <__alt_data_end+0xfffedeb8>
1010df1c:	00800434 	movhi	r2,16
1010df20:	89400234 	orhi	r5,r17,8
1010df24:	10bfffc4 	addi	r2,r2,-1
1010df28:	b029883a 	mov	r20,r22
1010df2c:	288a703a 	and	r5,r5,r2
1010df30:	4027883a 	mov	r19,r8
1010df34:	003eff06 	br	1010db34 <__alt_data_end+0xfffedb34>

1010df38 <__subdf3>:
1010df38:	02000434 	movhi	r8,16
1010df3c:	423fffc4 	addi	r8,r8,-1
1010df40:	defffb04 	addi	sp,sp,-20
1010df44:	2a14703a 	and	r10,r5,r8
1010df48:	3812d53a 	srli	r9,r7,20
1010df4c:	3a10703a 	and	r8,r7,r8
1010df50:	2006d77a 	srli	r3,r4,29
1010df54:	3004d77a 	srli	r2,r6,29
1010df58:	dc000015 	stw	r16,0(sp)
1010df5c:	501490fa 	slli	r10,r10,3
1010df60:	2820d53a 	srli	r16,r5,20
1010df64:	401090fa 	slli	r8,r8,3
1010df68:	dc800215 	stw	r18,8(sp)
1010df6c:	dc400115 	stw	r17,4(sp)
1010df70:	dfc00415 	stw	ra,16(sp)
1010df74:	202290fa 	slli	r17,r4,3
1010df78:	dcc00315 	stw	r19,12(sp)
1010df7c:	4a41ffcc 	andi	r9,r9,2047
1010df80:	0101ffc4 	movi	r4,2047
1010df84:	2824d7fa 	srli	r18,r5,31
1010df88:	8401ffcc 	andi	r16,r16,2047
1010df8c:	50c6b03a 	or	r3,r10,r3
1010df90:	380ed7fa 	srli	r7,r7,31
1010df94:	408ab03a 	or	r5,r8,r2
1010df98:	300c90fa 	slli	r6,r6,3
1010df9c:	49009626 	beq	r9,r4,1010e1f8 <__subdf3+0x2c0>
1010dfa0:	39c0005c 	xori	r7,r7,1
1010dfa4:	8245c83a 	sub	r2,r16,r9
1010dfa8:	3c807426 	beq	r7,r18,1010e17c <__subdf3+0x244>
1010dfac:	0080af0e 	bge	zero,r2,1010e26c <__subdf3+0x334>
1010dfb0:	48002a1e 	bne	r9,zero,1010e05c <__subdf3+0x124>
1010dfb4:	2988b03a 	or	r4,r5,r6
1010dfb8:	20009a1e 	bne	r4,zero,1010e224 <__subdf3+0x2ec>
1010dfbc:	888001cc 	andi	r2,r17,7
1010dfc0:	10000726 	beq	r2,zero,1010dfe0 <__subdf3+0xa8>
1010dfc4:	888003cc 	andi	r2,r17,15
1010dfc8:	01000104 	movi	r4,4
1010dfcc:	11000426 	beq	r2,r4,1010dfe0 <__subdf3+0xa8>
1010dfd0:	890b883a 	add	r5,r17,r4
1010dfd4:	2c63803a 	cmpltu	r17,r5,r17
1010dfd8:	1c47883a 	add	r3,r3,r17
1010dfdc:	2823883a 	mov	r17,r5
1010dfe0:	1880202c 	andhi	r2,r3,128
1010dfe4:	10005926 	beq	r2,zero,1010e14c <__subdf3+0x214>
1010dfe8:	84000044 	addi	r16,r16,1
1010dfec:	0081ffc4 	movi	r2,2047
1010dff0:	8080be26 	beq	r16,r2,1010e2ec <__subdf3+0x3b4>
1010dff4:	017fe034 	movhi	r5,65408
1010dff8:	297fffc4 	addi	r5,r5,-1
1010dffc:	1946703a 	and	r3,r3,r5
1010e000:	1804977a 	slli	r2,r3,29
1010e004:	1806927a 	slli	r3,r3,9
1010e008:	8822d0fa 	srli	r17,r17,3
1010e00c:	8401ffcc 	andi	r16,r16,2047
1010e010:	180ad33a 	srli	r5,r3,12
1010e014:	9100004c 	andi	r4,r18,1
1010e018:	1444b03a 	or	r2,r2,r17
1010e01c:	80c1ffcc 	andi	r3,r16,2047
1010e020:	1820953a 	slli	r16,r3,20
1010e024:	20c03fcc 	andi	r3,r4,255
1010e028:	180897fa 	slli	r4,r3,31
1010e02c:	00c00434 	movhi	r3,16
1010e030:	18ffffc4 	addi	r3,r3,-1
1010e034:	28c6703a 	and	r3,r5,r3
1010e038:	1c06b03a 	or	r3,r3,r16
1010e03c:	1906b03a 	or	r3,r3,r4
1010e040:	dfc00417 	ldw	ra,16(sp)
1010e044:	dcc00317 	ldw	r19,12(sp)
1010e048:	dc800217 	ldw	r18,8(sp)
1010e04c:	dc400117 	ldw	r17,4(sp)
1010e050:	dc000017 	ldw	r16,0(sp)
1010e054:	dec00504 	addi	sp,sp,20
1010e058:	f800283a 	ret
1010e05c:	0101ffc4 	movi	r4,2047
1010e060:	813fd626 	beq	r16,r4,1010dfbc <__alt_data_end+0xfffedfbc>
1010e064:	29402034 	orhi	r5,r5,128
1010e068:	01000e04 	movi	r4,56
1010e06c:	2080a316 	blt	r4,r2,1010e2fc <__subdf3+0x3c4>
1010e070:	010007c4 	movi	r4,31
1010e074:	2080c616 	blt	r4,r2,1010e390 <__subdf3+0x458>
1010e078:	01000804 	movi	r4,32
1010e07c:	2089c83a 	sub	r4,r4,r2
1010e080:	2910983a 	sll	r8,r5,r4
1010e084:	308ed83a 	srl	r7,r6,r2
1010e088:	3108983a 	sll	r4,r6,r4
1010e08c:	2884d83a 	srl	r2,r5,r2
1010e090:	41ccb03a 	or	r6,r8,r7
1010e094:	2008c03a 	cmpne	r4,r4,zero
1010e098:	310cb03a 	or	r6,r6,r4
1010e09c:	898dc83a 	sub	r6,r17,r6
1010e0a0:	89a3803a 	cmpltu	r17,r17,r6
1010e0a4:	1887c83a 	sub	r3,r3,r2
1010e0a8:	1c47c83a 	sub	r3,r3,r17
1010e0ac:	3023883a 	mov	r17,r6
1010e0b0:	1880202c 	andhi	r2,r3,128
1010e0b4:	10002326 	beq	r2,zero,1010e144 <__subdf3+0x20c>
1010e0b8:	04c02034 	movhi	r19,128
1010e0bc:	9cffffc4 	addi	r19,r19,-1
1010e0c0:	1ce6703a 	and	r19,r3,r19
1010e0c4:	98007a26 	beq	r19,zero,1010e2b0 <__subdf3+0x378>
1010e0c8:	9809883a 	mov	r4,r19
1010e0cc:	010ea380 	call	1010ea38 <__clzsi2>
1010e0d0:	113ffe04 	addi	r4,r2,-8
1010e0d4:	00c007c4 	movi	r3,31
1010e0d8:	19007b16 	blt	r3,r4,1010e2c8 <__subdf3+0x390>
1010e0dc:	00800804 	movi	r2,32
1010e0e0:	1105c83a 	sub	r2,r2,r4
1010e0e4:	8884d83a 	srl	r2,r17,r2
1010e0e8:	9906983a 	sll	r3,r19,r4
1010e0ec:	8922983a 	sll	r17,r17,r4
1010e0f0:	10c4b03a 	or	r2,r2,r3
1010e0f4:	24007816 	blt	r4,r16,1010e2d8 <__subdf3+0x3a0>
1010e0f8:	2421c83a 	sub	r16,r4,r16
1010e0fc:	80c00044 	addi	r3,r16,1
1010e100:	010007c4 	movi	r4,31
1010e104:	20c09516 	blt	r4,r3,1010e35c <__subdf3+0x424>
1010e108:	01400804 	movi	r5,32
1010e10c:	28cbc83a 	sub	r5,r5,r3
1010e110:	88c8d83a 	srl	r4,r17,r3
1010e114:	8962983a 	sll	r17,r17,r5
1010e118:	114a983a 	sll	r5,r2,r5
1010e11c:	10c6d83a 	srl	r3,r2,r3
1010e120:	8804c03a 	cmpne	r2,r17,zero
1010e124:	290ab03a 	or	r5,r5,r4
1010e128:	28a2b03a 	or	r17,r5,r2
1010e12c:	0021883a 	mov	r16,zero
1010e130:	003fa206 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e134:	2090b03a 	or	r8,r4,r2
1010e138:	40018e26 	beq	r8,zero,1010e774 <__subdf3+0x83c>
1010e13c:	1007883a 	mov	r3,r2
1010e140:	2023883a 	mov	r17,r4
1010e144:	888001cc 	andi	r2,r17,7
1010e148:	103f9e1e 	bne	r2,zero,1010dfc4 <__alt_data_end+0xfffedfc4>
1010e14c:	1804977a 	slli	r2,r3,29
1010e150:	8822d0fa 	srli	r17,r17,3
1010e154:	1810d0fa 	srli	r8,r3,3
1010e158:	9100004c 	andi	r4,r18,1
1010e15c:	1444b03a 	or	r2,r2,r17
1010e160:	00c1ffc4 	movi	r3,2047
1010e164:	80c02826 	beq	r16,r3,1010e208 <__subdf3+0x2d0>
1010e168:	01400434 	movhi	r5,16
1010e16c:	297fffc4 	addi	r5,r5,-1
1010e170:	80e0703a 	and	r16,r16,r3
1010e174:	414a703a 	and	r5,r8,r5
1010e178:	003fa806 	br	1010e01c <__alt_data_end+0xfffee01c>
1010e17c:	0080630e 	bge	zero,r2,1010e30c <__subdf3+0x3d4>
1010e180:	48003026 	beq	r9,zero,1010e244 <__subdf3+0x30c>
1010e184:	0101ffc4 	movi	r4,2047
1010e188:	813f8c26 	beq	r16,r4,1010dfbc <__alt_data_end+0xfffedfbc>
1010e18c:	29402034 	orhi	r5,r5,128
1010e190:	01000e04 	movi	r4,56
1010e194:	2080a90e 	bge	r4,r2,1010e43c <__subdf3+0x504>
1010e198:	298cb03a 	or	r6,r5,r6
1010e19c:	3012c03a 	cmpne	r9,r6,zero
1010e1a0:	0005883a 	mov	r2,zero
1010e1a4:	4c53883a 	add	r9,r9,r17
1010e1a8:	4c63803a 	cmpltu	r17,r9,r17
1010e1ac:	10c7883a 	add	r3,r2,r3
1010e1b0:	88c7883a 	add	r3,r17,r3
1010e1b4:	4823883a 	mov	r17,r9
1010e1b8:	1880202c 	andhi	r2,r3,128
1010e1bc:	1000d026 	beq	r2,zero,1010e500 <__subdf3+0x5c8>
1010e1c0:	84000044 	addi	r16,r16,1
1010e1c4:	0081ffc4 	movi	r2,2047
1010e1c8:	8080fe26 	beq	r16,r2,1010e5c4 <__subdf3+0x68c>
1010e1cc:	00bfe034 	movhi	r2,65408
1010e1d0:	10bfffc4 	addi	r2,r2,-1
1010e1d4:	1886703a 	and	r3,r3,r2
1010e1d8:	880ad07a 	srli	r5,r17,1
1010e1dc:	180497fa 	slli	r2,r3,31
1010e1e0:	8900004c 	andi	r4,r17,1
1010e1e4:	2922b03a 	or	r17,r5,r4
1010e1e8:	1806d07a 	srli	r3,r3,1
1010e1ec:	1462b03a 	or	r17,r2,r17
1010e1f0:	3825883a 	mov	r18,r7
1010e1f4:	003f7106 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e1f8:	2984b03a 	or	r2,r5,r6
1010e1fc:	103f6826 	beq	r2,zero,1010dfa0 <__alt_data_end+0xfffedfa0>
1010e200:	39c03fcc 	andi	r7,r7,255
1010e204:	003f6706 	br	1010dfa4 <__alt_data_end+0xfffedfa4>
1010e208:	4086b03a 	or	r3,r8,r2
1010e20c:	18015226 	beq	r3,zero,1010e758 <__subdf3+0x820>
1010e210:	00c00434 	movhi	r3,16
1010e214:	41400234 	orhi	r5,r8,8
1010e218:	18ffffc4 	addi	r3,r3,-1
1010e21c:	28ca703a 	and	r5,r5,r3
1010e220:	003f7e06 	br	1010e01c <__alt_data_end+0xfffee01c>
1010e224:	10bfffc4 	addi	r2,r2,-1
1010e228:	1000491e 	bne	r2,zero,1010e350 <__subdf3+0x418>
1010e22c:	898fc83a 	sub	r7,r17,r6
1010e230:	89e3803a 	cmpltu	r17,r17,r7
1010e234:	1947c83a 	sub	r3,r3,r5
1010e238:	1c47c83a 	sub	r3,r3,r17
1010e23c:	3823883a 	mov	r17,r7
1010e240:	003f9b06 	br	1010e0b0 <__alt_data_end+0xfffee0b0>
1010e244:	2988b03a 	or	r4,r5,r6
1010e248:	203f5c26 	beq	r4,zero,1010dfbc <__alt_data_end+0xfffedfbc>
1010e24c:	10bfffc4 	addi	r2,r2,-1
1010e250:	1000931e 	bne	r2,zero,1010e4a0 <__subdf3+0x568>
1010e254:	898d883a 	add	r6,r17,r6
1010e258:	3463803a 	cmpltu	r17,r6,r17
1010e25c:	1947883a 	add	r3,r3,r5
1010e260:	88c7883a 	add	r3,r17,r3
1010e264:	3023883a 	mov	r17,r6
1010e268:	003fd306 	br	1010e1b8 <__alt_data_end+0xfffee1b8>
1010e26c:	1000541e 	bne	r2,zero,1010e3c0 <__subdf3+0x488>
1010e270:	80800044 	addi	r2,r16,1
1010e274:	1081ffcc 	andi	r2,r2,2047
1010e278:	01000044 	movi	r4,1
1010e27c:	2080a20e 	bge	r4,r2,1010e508 <__subdf3+0x5d0>
1010e280:	8989c83a 	sub	r4,r17,r6
1010e284:	8905803a 	cmpltu	r2,r17,r4
1010e288:	1967c83a 	sub	r19,r3,r5
1010e28c:	98a7c83a 	sub	r19,r19,r2
1010e290:	9880202c 	andhi	r2,r19,128
1010e294:	10006326 	beq	r2,zero,1010e424 <__subdf3+0x4ec>
1010e298:	3463c83a 	sub	r17,r6,r17
1010e29c:	28c7c83a 	sub	r3,r5,r3
1010e2a0:	344d803a 	cmpltu	r6,r6,r17
1010e2a4:	19a7c83a 	sub	r19,r3,r6
1010e2a8:	3825883a 	mov	r18,r7
1010e2ac:	983f861e 	bne	r19,zero,1010e0c8 <__alt_data_end+0xfffee0c8>
1010e2b0:	8809883a 	mov	r4,r17
1010e2b4:	010ea380 	call	1010ea38 <__clzsi2>
1010e2b8:	10800804 	addi	r2,r2,32
1010e2bc:	113ffe04 	addi	r4,r2,-8
1010e2c0:	00c007c4 	movi	r3,31
1010e2c4:	193f850e 	bge	r3,r4,1010e0dc <__alt_data_end+0xfffee0dc>
1010e2c8:	10bff604 	addi	r2,r2,-40
1010e2cc:	8884983a 	sll	r2,r17,r2
1010e2d0:	0023883a 	mov	r17,zero
1010e2d4:	243f880e 	bge	r4,r16,1010e0f8 <__alt_data_end+0xfffee0f8>
1010e2d8:	00ffe034 	movhi	r3,65408
1010e2dc:	18ffffc4 	addi	r3,r3,-1
1010e2e0:	8121c83a 	sub	r16,r16,r4
1010e2e4:	10c6703a 	and	r3,r2,r3
1010e2e8:	003f3406 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e2ec:	9100004c 	andi	r4,r18,1
1010e2f0:	000b883a 	mov	r5,zero
1010e2f4:	0005883a 	mov	r2,zero
1010e2f8:	003f4806 	br	1010e01c <__alt_data_end+0xfffee01c>
1010e2fc:	298cb03a 	or	r6,r5,r6
1010e300:	300cc03a 	cmpne	r6,r6,zero
1010e304:	0005883a 	mov	r2,zero
1010e308:	003f6406 	br	1010e09c <__alt_data_end+0xfffee09c>
1010e30c:	10009a1e 	bne	r2,zero,1010e578 <__subdf3+0x640>
1010e310:	82400044 	addi	r9,r16,1
1010e314:	4881ffcc 	andi	r2,r9,2047
1010e318:	02800044 	movi	r10,1
1010e31c:	5080670e 	bge	r10,r2,1010e4bc <__subdf3+0x584>
1010e320:	0081ffc4 	movi	r2,2047
1010e324:	4880af26 	beq	r9,r2,1010e5e4 <__subdf3+0x6ac>
1010e328:	898d883a 	add	r6,r17,r6
1010e32c:	1945883a 	add	r2,r3,r5
1010e330:	3447803a 	cmpltu	r3,r6,r17
1010e334:	1887883a 	add	r3,r3,r2
1010e338:	182297fa 	slli	r17,r3,31
1010e33c:	300cd07a 	srli	r6,r6,1
1010e340:	1806d07a 	srli	r3,r3,1
1010e344:	4821883a 	mov	r16,r9
1010e348:	89a2b03a 	or	r17,r17,r6
1010e34c:	003f1b06 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e350:	0101ffc4 	movi	r4,2047
1010e354:	813f441e 	bne	r16,r4,1010e068 <__alt_data_end+0xfffee068>
1010e358:	003f1806 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e35c:	843ff844 	addi	r16,r16,-31
1010e360:	01400804 	movi	r5,32
1010e364:	1408d83a 	srl	r4,r2,r16
1010e368:	19405026 	beq	r3,r5,1010e4ac <__subdf3+0x574>
1010e36c:	01401004 	movi	r5,64
1010e370:	28c7c83a 	sub	r3,r5,r3
1010e374:	10c4983a 	sll	r2,r2,r3
1010e378:	88a2b03a 	or	r17,r17,r2
1010e37c:	8822c03a 	cmpne	r17,r17,zero
1010e380:	2462b03a 	or	r17,r4,r17
1010e384:	0007883a 	mov	r3,zero
1010e388:	0021883a 	mov	r16,zero
1010e38c:	003f6d06 	br	1010e144 <__alt_data_end+0xfffee144>
1010e390:	11fff804 	addi	r7,r2,-32
1010e394:	01000804 	movi	r4,32
1010e398:	29ced83a 	srl	r7,r5,r7
1010e39c:	11004526 	beq	r2,r4,1010e4b4 <__subdf3+0x57c>
1010e3a0:	01001004 	movi	r4,64
1010e3a4:	2089c83a 	sub	r4,r4,r2
1010e3a8:	2904983a 	sll	r2,r5,r4
1010e3ac:	118cb03a 	or	r6,r2,r6
1010e3b0:	300cc03a 	cmpne	r6,r6,zero
1010e3b4:	398cb03a 	or	r6,r7,r6
1010e3b8:	0005883a 	mov	r2,zero
1010e3bc:	003f3706 	br	1010e09c <__alt_data_end+0xfffee09c>
1010e3c0:	80002a26 	beq	r16,zero,1010e46c <__subdf3+0x534>
1010e3c4:	0101ffc4 	movi	r4,2047
1010e3c8:	49006626 	beq	r9,r4,1010e564 <__subdf3+0x62c>
1010e3cc:	0085c83a 	sub	r2,zero,r2
1010e3d0:	18c02034 	orhi	r3,r3,128
1010e3d4:	01000e04 	movi	r4,56
1010e3d8:	20807e16 	blt	r4,r2,1010e5d4 <__subdf3+0x69c>
1010e3dc:	010007c4 	movi	r4,31
1010e3e0:	2080e716 	blt	r4,r2,1010e780 <__subdf3+0x848>
1010e3e4:	01000804 	movi	r4,32
1010e3e8:	2089c83a 	sub	r4,r4,r2
1010e3ec:	1914983a 	sll	r10,r3,r4
1010e3f0:	8890d83a 	srl	r8,r17,r2
1010e3f4:	8908983a 	sll	r4,r17,r4
1010e3f8:	1884d83a 	srl	r2,r3,r2
1010e3fc:	5222b03a 	or	r17,r10,r8
1010e400:	2006c03a 	cmpne	r3,r4,zero
1010e404:	88e2b03a 	or	r17,r17,r3
1010e408:	3463c83a 	sub	r17,r6,r17
1010e40c:	2885c83a 	sub	r2,r5,r2
1010e410:	344d803a 	cmpltu	r6,r6,r17
1010e414:	1187c83a 	sub	r3,r2,r6
1010e418:	4821883a 	mov	r16,r9
1010e41c:	3825883a 	mov	r18,r7
1010e420:	003f2306 	br	1010e0b0 <__alt_data_end+0xfffee0b0>
1010e424:	24d0b03a 	or	r8,r4,r19
1010e428:	40001b1e 	bne	r8,zero,1010e498 <__subdf3+0x560>
1010e42c:	0005883a 	mov	r2,zero
1010e430:	0009883a 	mov	r4,zero
1010e434:	0021883a 	mov	r16,zero
1010e438:	003f4906 	br	1010e160 <__alt_data_end+0xfffee160>
1010e43c:	010007c4 	movi	r4,31
1010e440:	20803a16 	blt	r4,r2,1010e52c <__subdf3+0x5f4>
1010e444:	01000804 	movi	r4,32
1010e448:	2089c83a 	sub	r4,r4,r2
1010e44c:	2912983a 	sll	r9,r5,r4
1010e450:	3090d83a 	srl	r8,r6,r2
1010e454:	3108983a 	sll	r4,r6,r4
1010e458:	2884d83a 	srl	r2,r5,r2
1010e45c:	4a12b03a 	or	r9,r9,r8
1010e460:	2008c03a 	cmpne	r4,r4,zero
1010e464:	4912b03a 	or	r9,r9,r4
1010e468:	003f4e06 	br	1010e1a4 <__alt_data_end+0xfffee1a4>
1010e46c:	1c48b03a 	or	r4,r3,r17
1010e470:	20003c26 	beq	r4,zero,1010e564 <__subdf3+0x62c>
1010e474:	0084303a 	nor	r2,zero,r2
1010e478:	1000381e 	bne	r2,zero,1010e55c <__subdf3+0x624>
1010e47c:	3463c83a 	sub	r17,r6,r17
1010e480:	28c5c83a 	sub	r2,r5,r3
1010e484:	344d803a 	cmpltu	r6,r6,r17
1010e488:	1187c83a 	sub	r3,r2,r6
1010e48c:	4821883a 	mov	r16,r9
1010e490:	3825883a 	mov	r18,r7
1010e494:	003f0606 	br	1010e0b0 <__alt_data_end+0xfffee0b0>
1010e498:	2023883a 	mov	r17,r4
1010e49c:	003f0906 	br	1010e0c4 <__alt_data_end+0xfffee0c4>
1010e4a0:	0101ffc4 	movi	r4,2047
1010e4a4:	813f3a1e 	bne	r16,r4,1010e190 <__alt_data_end+0xfffee190>
1010e4a8:	003ec406 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e4ac:	0005883a 	mov	r2,zero
1010e4b0:	003fb106 	br	1010e378 <__alt_data_end+0xfffee378>
1010e4b4:	0005883a 	mov	r2,zero
1010e4b8:	003fbc06 	br	1010e3ac <__alt_data_end+0xfffee3ac>
1010e4bc:	1c44b03a 	or	r2,r3,r17
1010e4c0:	80008e1e 	bne	r16,zero,1010e6fc <__subdf3+0x7c4>
1010e4c4:	1000c826 	beq	r2,zero,1010e7e8 <__subdf3+0x8b0>
1010e4c8:	2984b03a 	or	r2,r5,r6
1010e4cc:	103ebb26 	beq	r2,zero,1010dfbc <__alt_data_end+0xfffedfbc>
1010e4d0:	8989883a 	add	r4,r17,r6
1010e4d4:	1945883a 	add	r2,r3,r5
1010e4d8:	2447803a 	cmpltu	r3,r4,r17
1010e4dc:	1887883a 	add	r3,r3,r2
1010e4e0:	1880202c 	andhi	r2,r3,128
1010e4e4:	2023883a 	mov	r17,r4
1010e4e8:	103f1626 	beq	r2,zero,1010e144 <__alt_data_end+0xfffee144>
1010e4ec:	00bfe034 	movhi	r2,65408
1010e4f0:	10bfffc4 	addi	r2,r2,-1
1010e4f4:	5021883a 	mov	r16,r10
1010e4f8:	1886703a 	and	r3,r3,r2
1010e4fc:	003eaf06 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e500:	3825883a 	mov	r18,r7
1010e504:	003f0f06 	br	1010e144 <__alt_data_end+0xfffee144>
1010e508:	1c44b03a 	or	r2,r3,r17
1010e50c:	8000251e 	bne	r16,zero,1010e5a4 <__subdf3+0x66c>
1010e510:	1000661e 	bne	r2,zero,1010e6ac <__subdf3+0x774>
1010e514:	2990b03a 	or	r8,r5,r6
1010e518:	40009626 	beq	r8,zero,1010e774 <__subdf3+0x83c>
1010e51c:	2807883a 	mov	r3,r5
1010e520:	3023883a 	mov	r17,r6
1010e524:	3825883a 	mov	r18,r7
1010e528:	003ea406 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e52c:	127ff804 	addi	r9,r2,-32
1010e530:	01000804 	movi	r4,32
1010e534:	2a52d83a 	srl	r9,r5,r9
1010e538:	11008c26 	beq	r2,r4,1010e76c <__subdf3+0x834>
1010e53c:	01001004 	movi	r4,64
1010e540:	2085c83a 	sub	r2,r4,r2
1010e544:	2884983a 	sll	r2,r5,r2
1010e548:	118cb03a 	or	r6,r2,r6
1010e54c:	300cc03a 	cmpne	r6,r6,zero
1010e550:	4992b03a 	or	r9,r9,r6
1010e554:	0005883a 	mov	r2,zero
1010e558:	003f1206 	br	1010e1a4 <__alt_data_end+0xfffee1a4>
1010e55c:	0101ffc4 	movi	r4,2047
1010e560:	493f9c1e 	bne	r9,r4,1010e3d4 <__alt_data_end+0xfffee3d4>
1010e564:	2807883a 	mov	r3,r5
1010e568:	3023883a 	mov	r17,r6
1010e56c:	4821883a 	mov	r16,r9
1010e570:	3825883a 	mov	r18,r7
1010e574:	003e9106 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e578:	80001f1e 	bne	r16,zero,1010e5f8 <__subdf3+0x6c0>
1010e57c:	1c48b03a 	or	r4,r3,r17
1010e580:	20005a26 	beq	r4,zero,1010e6ec <__subdf3+0x7b4>
1010e584:	0084303a 	nor	r2,zero,r2
1010e588:	1000561e 	bne	r2,zero,1010e6e4 <__subdf3+0x7ac>
1010e58c:	89a3883a 	add	r17,r17,r6
1010e590:	1945883a 	add	r2,r3,r5
1010e594:	898d803a 	cmpltu	r6,r17,r6
1010e598:	3087883a 	add	r3,r6,r2
1010e59c:	4821883a 	mov	r16,r9
1010e5a0:	003f0506 	br	1010e1b8 <__alt_data_end+0xfffee1b8>
1010e5a4:	10002b1e 	bne	r2,zero,1010e654 <__subdf3+0x71c>
1010e5a8:	2984b03a 	or	r2,r5,r6
1010e5ac:	10008026 	beq	r2,zero,1010e7b0 <__subdf3+0x878>
1010e5b0:	2807883a 	mov	r3,r5
1010e5b4:	3023883a 	mov	r17,r6
1010e5b8:	3825883a 	mov	r18,r7
1010e5bc:	0401ffc4 	movi	r16,2047
1010e5c0:	003e7e06 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e5c4:	3809883a 	mov	r4,r7
1010e5c8:	0011883a 	mov	r8,zero
1010e5cc:	0005883a 	mov	r2,zero
1010e5d0:	003ee306 	br	1010e160 <__alt_data_end+0xfffee160>
1010e5d4:	1c62b03a 	or	r17,r3,r17
1010e5d8:	8822c03a 	cmpne	r17,r17,zero
1010e5dc:	0005883a 	mov	r2,zero
1010e5e0:	003f8906 	br	1010e408 <__alt_data_end+0xfffee408>
1010e5e4:	3809883a 	mov	r4,r7
1010e5e8:	4821883a 	mov	r16,r9
1010e5ec:	0011883a 	mov	r8,zero
1010e5f0:	0005883a 	mov	r2,zero
1010e5f4:	003eda06 	br	1010e160 <__alt_data_end+0xfffee160>
1010e5f8:	0101ffc4 	movi	r4,2047
1010e5fc:	49003b26 	beq	r9,r4,1010e6ec <__subdf3+0x7b4>
1010e600:	0085c83a 	sub	r2,zero,r2
1010e604:	18c02034 	orhi	r3,r3,128
1010e608:	01000e04 	movi	r4,56
1010e60c:	20806e16 	blt	r4,r2,1010e7c8 <__subdf3+0x890>
1010e610:	010007c4 	movi	r4,31
1010e614:	20807716 	blt	r4,r2,1010e7f4 <__subdf3+0x8bc>
1010e618:	01000804 	movi	r4,32
1010e61c:	2089c83a 	sub	r4,r4,r2
1010e620:	1914983a 	sll	r10,r3,r4
1010e624:	8890d83a 	srl	r8,r17,r2
1010e628:	8908983a 	sll	r4,r17,r4
1010e62c:	1884d83a 	srl	r2,r3,r2
1010e630:	5222b03a 	or	r17,r10,r8
1010e634:	2006c03a 	cmpne	r3,r4,zero
1010e638:	88e2b03a 	or	r17,r17,r3
1010e63c:	89a3883a 	add	r17,r17,r6
1010e640:	1145883a 	add	r2,r2,r5
1010e644:	898d803a 	cmpltu	r6,r17,r6
1010e648:	3087883a 	add	r3,r6,r2
1010e64c:	4821883a 	mov	r16,r9
1010e650:	003ed906 	br	1010e1b8 <__alt_data_end+0xfffee1b8>
1010e654:	2984b03a 	or	r2,r5,r6
1010e658:	10004226 	beq	r2,zero,1010e764 <__subdf3+0x82c>
1010e65c:	1808d0fa 	srli	r4,r3,3
1010e660:	8822d0fa 	srli	r17,r17,3
1010e664:	1806977a 	slli	r3,r3,29
1010e668:	2080022c 	andhi	r2,r4,8
1010e66c:	1c62b03a 	or	r17,r3,r17
1010e670:	10000826 	beq	r2,zero,1010e694 <__subdf3+0x75c>
1010e674:	2812d0fa 	srli	r9,r5,3
1010e678:	4880022c 	andhi	r2,r9,8
1010e67c:	1000051e 	bne	r2,zero,1010e694 <__subdf3+0x75c>
1010e680:	300cd0fa 	srli	r6,r6,3
1010e684:	2804977a 	slli	r2,r5,29
1010e688:	4809883a 	mov	r4,r9
1010e68c:	3825883a 	mov	r18,r7
1010e690:	11a2b03a 	or	r17,r2,r6
1010e694:	8806d77a 	srli	r3,r17,29
1010e698:	200890fa 	slli	r4,r4,3
1010e69c:	882290fa 	slli	r17,r17,3
1010e6a0:	0401ffc4 	movi	r16,2047
1010e6a4:	1906b03a 	or	r3,r3,r4
1010e6a8:	003e4406 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e6ac:	2984b03a 	or	r2,r5,r6
1010e6b0:	103e4226 	beq	r2,zero,1010dfbc <__alt_data_end+0xfffedfbc>
1010e6b4:	8989c83a 	sub	r4,r17,r6
1010e6b8:	8911803a 	cmpltu	r8,r17,r4
1010e6bc:	1945c83a 	sub	r2,r3,r5
1010e6c0:	1205c83a 	sub	r2,r2,r8
1010e6c4:	1200202c 	andhi	r8,r2,128
1010e6c8:	403e9a26 	beq	r8,zero,1010e134 <__alt_data_end+0xfffee134>
1010e6cc:	3463c83a 	sub	r17,r6,r17
1010e6d0:	28c5c83a 	sub	r2,r5,r3
1010e6d4:	344d803a 	cmpltu	r6,r6,r17
1010e6d8:	1187c83a 	sub	r3,r2,r6
1010e6dc:	3825883a 	mov	r18,r7
1010e6e0:	003e3606 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e6e4:	0101ffc4 	movi	r4,2047
1010e6e8:	493fc71e 	bne	r9,r4,1010e608 <__alt_data_end+0xfffee608>
1010e6ec:	2807883a 	mov	r3,r5
1010e6f0:	3023883a 	mov	r17,r6
1010e6f4:	4821883a 	mov	r16,r9
1010e6f8:	003e3006 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e6fc:	10003626 	beq	r2,zero,1010e7d8 <__subdf3+0x8a0>
1010e700:	2984b03a 	or	r2,r5,r6
1010e704:	10001726 	beq	r2,zero,1010e764 <__subdf3+0x82c>
1010e708:	1808d0fa 	srli	r4,r3,3
1010e70c:	8822d0fa 	srli	r17,r17,3
1010e710:	1806977a 	slli	r3,r3,29
1010e714:	2080022c 	andhi	r2,r4,8
1010e718:	1c62b03a 	or	r17,r3,r17
1010e71c:	10000726 	beq	r2,zero,1010e73c <__subdf3+0x804>
1010e720:	2812d0fa 	srli	r9,r5,3
1010e724:	4880022c 	andhi	r2,r9,8
1010e728:	1000041e 	bne	r2,zero,1010e73c <__subdf3+0x804>
1010e72c:	300cd0fa 	srli	r6,r6,3
1010e730:	2804977a 	slli	r2,r5,29
1010e734:	4809883a 	mov	r4,r9
1010e738:	11a2b03a 	or	r17,r2,r6
1010e73c:	8806d77a 	srli	r3,r17,29
1010e740:	200890fa 	slli	r4,r4,3
1010e744:	882290fa 	slli	r17,r17,3
1010e748:	3825883a 	mov	r18,r7
1010e74c:	1906b03a 	or	r3,r3,r4
1010e750:	0401ffc4 	movi	r16,2047
1010e754:	003e1906 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e758:	000b883a 	mov	r5,zero
1010e75c:	0005883a 	mov	r2,zero
1010e760:	003e2e06 	br	1010e01c <__alt_data_end+0xfffee01c>
1010e764:	0401ffc4 	movi	r16,2047
1010e768:	003e1406 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e76c:	0005883a 	mov	r2,zero
1010e770:	003f7506 	br	1010e548 <__alt_data_end+0xfffee548>
1010e774:	0005883a 	mov	r2,zero
1010e778:	0009883a 	mov	r4,zero
1010e77c:	003e7806 	br	1010e160 <__alt_data_end+0xfffee160>
1010e780:	123ff804 	addi	r8,r2,-32
1010e784:	01000804 	movi	r4,32
1010e788:	1a10d83a 	srl	r8,r3,r8
1010e78c:	11002526 	beq	r2,r4,1010e824 <__subdf3+0x8ec>
1010e790:	01001004 	movi	r4,64
1010e794:	2085c83a 	sub	r2,r4,r2
1010e798:	1884983a 	sll	r2,r3,r2
1010e79c:	1444b03a 	or	r2,r2,r17
1010e7a0:	1004c03a 	cmpne	r2,r2,zero
1010e7a4:	40a2b03a 	or	r17,r8,r2
1010e7a8:	0005883a 	mov	r2,zero
1010e7ac:	003f1606 	br	1010e408 <__alt_data_end+0xfffee408>
1010e7b0:	02000434 	movhi	r8,16
1010e7b4:	0009883a 	mov	r4,zero
1010e7b8:	423fffc4 	addi	r8,r8,-1
1010e7bc:	00bfffc4 	movi	r2,-1
1010e7c0:	0401ffc4 	movi	r16,2047
1010e7c4:	003e6606 	br	1010e160 <__alt_data_end+0xfffee160>
1010e7c8:	1c62b03a 	or	r17,r3,r17
1010e7cc:	8822c03a 	cmpne	r17,r17,zero
1010e7d0:	0005883a 	mov	r2,zero
1010e7d4:	003f9906 	br	1010e63c <__alt_data_end+0xfffee63c>
1010e7d8:	2807883a 	mov	r3,r5
1010e7dc:	3023883a 	mov	r17,r6
1010e7e0:	0401ffc4 	movi	r16,2047
1010e7e4:	003df506 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e7e8:	2807883a 	mov	r3,r5
1010e7ec:	3023883a 	mov	r17,r6
1010e7f0:	003df206 	br	1010dfbc <__alt_data_end+0xfffedfbc>
1010e7f4:	123ff804 	addi	r8,r2,-32
1010e7f8:	01000804 	movi	r4,32
1010e7fc:	1a10d83a 	srl	r8,r3,r8
1010e800:	11000a26 	beq	r2,r4,1010e82c <__subdf3+0x8f4>
1010e804:	01001004 	movi	r4,64
1010e808:	2085c83a 	sub	r2,r4,r2
1010e80c:	1884983a 	sll	r2,r3,r2
1010e810:	1444b03a 	or	r2,r2,r17
1010e814:	1004c03a 	cmpne	r2,r2,zero
1010e818:	40a2b03a 	or	r17,r8,r2
1010e81c:	0005883a 	mov	r2,zero
1010e820:	003f8606 	br	1010e63c <__alt_data_end+0xfffee63c>
1010e824:	0005883a 	mov	r2,zero
1010e828:	003fdc06 	br	1010e79c <__alt_data_end+0xfffee79c>
1010e82c:	0005883a 	mov	r2,zero
1010e830:	003ff706 	br	1010e810 <__alt_data_end+0xfffee810>

1010e834 <__fixdfsi>:
1010e834:	280cd53a 	srli	r6,r5,20
1010e838:	00c00434 	movhi	r3,16
1010e83c:	18ffffc4 	addi	r3,r3,-1
1010e840:	3181ffcc 	andi	r6,r6,2047
1010e844:	01c0ff84 	movi	r7,1022
1010e848:	28c6703a 	and	r3,r5,r3
1010e84c:	280ad7fa 	srli	r5,r5,31
1010e850:	3980120e 	bge	r7,r6,1010e89c <__fixdfsi+0x68>
1010e854:	00810744 	movi	r2,1053
1010e858:	11800c16 	blt	r2,r6,1010e88c <__fixdfsi+0x58>
1010e85c:	00810cc4 	movi	r2,1075
1010e860:	1185c83a 	sub	r2,r2,r6
1010e864:	01c007c4 	movi	r7,31
1010e868:	18c00434 	orhi	r3,r3,16
1010e86c:	38800d16 	blt	r7,r2,1010e8a4 <__fixdfsi+0x70>
1010e870:	31befb44 	addi	r6,r6,-1043
1010e874:	2084d83a 	srl	r2,r4,r2
1010e878:	1986983a 	sll	r3,r3,r6
1010e87c:	1884b03a 	or	r2,r3,r2
1010e880:	28000726 	beq	r5,zero,1010e8a0 <__fixdfsi+0x6c>
1010e884:	0085c83a 	sub	r2,zero,r2
1010e888:	f800283a 	ret
1010e88c:	00a00034 	movhi	r2,32768
1010e890:	10bfffc4 	addi	r2,r2,-1
1010e894:	2885883a 	add	r2,r5,r2
1010e898:	f800283a 	ret
1010e89c:	0005883a 	mov	r2,zero
1010e8a0:	f800283a 	ret
1010e8a4:	008104c4 	movi	r2,1043
1010e8a8:	1185c83a 	sub	r2,r2,r6
1010e8ac:	1884d83a 	srl	r2,r3,r2
1010e8b0:	003ff306 	br	1010e880 <__alt_data_end+0xfffee880>

1010e8b4 <__floatsidf>:
1010e8b4:	defffd04 	addi	sp,sp,-12
1010e8b8:	dfc00215 	stw	ra,8(sp)
1010e8bc:	dc400115 	stw	r17,4(sp)
1010e8c0:	dc000015 	stw	r16,0(sp)
1010e8c4:	20002b26 	beq	r4,zero,1010e974 <__floatsidf+0xc0>
1010e8c8:	2023883a 	mov	r17,r4
1010e8cc:	2020d7fa 	srli	r16,r4,31
1010e8d0:	20002d16 	blt	r4,zero,1010e988 <__floatsidf+0xd4>
1010e8d4:	8809883a 	mov	r4,r17
1010e8d8:	010ea380 	call	1010ea38 <__clzsi2>
1010e8dc:	01410784 	movi	r5,1054
1010e8e0:	288bc83a 	sub	r5,r5,r2
1010e8e4:	01010cc4 	movi	r4,1075
1010e8e8:	2149c83a 	sub	r4,r4,r5
1010e8ec:	00c007c4 	movi	r3,31
1010e8f0:	1900160e 	bge	r3,r4,1010e94c <__floatsidf+0x98>
1010e8f4:	00c104c4 	movi	r3,1043
1010e8f8:	1947c83a 	sub	r3,r3,r5
1010e8fc:	88c6983a 	sll	r3,r17,r3
1010e900:	00800434 	movhi	r2,16
1010e904:	10bfffc4 	addi	r2,r2,-1
1010e908:	1886703a 	and	r3,r3,r2
1010e90c:	2941ffcc 	andi	r5,r5,2047
1010e910:	800d883a 	mov	r6,r16
1010e914:	0005883a 	mov	r2,zero
1010e918:	280a953a 	slli	r5,r5,20
1010e91c:	31803fcc 	andi	r6,r6,255
1010e920:	01000434 	movhi	r4,16
1010e924:	300c97fa 	slli	r6,r6,31
1010e928:	213fffc4 	addi	r4,r4,-1
1010e92c:	1906703a 	and	r3,r3,r4
1010e930:	1946b03a 	or	r3,r3,r5
1010e934:	1986b03a 	or	r3,r3,r6
1010e938:	dfc00217 	ldw	ra,8(sp)
1010e93c:	dc400117 	ldw	r17,4(sp)
1010e940:	dc000017 	ldw	r16,0(sp)
1010e944:	dec00304 	addi	sp,sp,12
1010e948:	f800283a 	ret
1010e94c:	00c002c4 	movi	r3,11
1010e950:	1887c83a 	sub	r3,r3,r2
1010e954:	88c6d83a 	srl	r3,r17,r3
1010e958:	8904983a 	sll	r2,r17,r4
1010e95c:	01000434 	movhi	r4,16
1010e960:	213fffc4 	addi	r4,r4,-1
1010e964:	2941ffcc 	andi	r5,r5,2047
1010e968:	1906703a 	and	r3,r3,r4
1010e96c:	800d883a 	mov	r6,r16
1010e970:	003fe906 	br	1010e918 <__alt_data_end+0xfffee918>
1010e974:	000d883a 	mov	r6,zero
1010e978:	000b883a 	mov	r5,zero
1010e97c:	0007883a 	mov	r3,zero
1010e980:	0005883a 	mov	r2,zero
1010e984:	003fe406 	br	1010e918 <__alt_data_end+0xfffee918>
1010e988:	0123c83a 	sub	r17,zero,r4
1010e98c:	003fd106 	br	1010e8d4 <__alt_data_end+0xfffee8d4>

1010e990 <__floatunsidf>:
1010e990:	defffe04 	addi	sp,sp,-8
1010e994:	dc000015 	stw	r16,0(sp)
1010e998:	dfc00115 	stw	ra,4(sp)
1010e99c:	2021883a 	mov	r16,r4
1010e9a0:	20002226 	beq	r4,zero,1010ea2c <__floatunsidf+0x9c>
1010e9a4:	010ea380 	call	1010ea38 <__clzsi2>
1010e9a8:	01010784 	movi	r4,1054
1010e9ac:	2089c83a 	sub	r4,r4,r2
1010e9b0:	01810cc4 	movi	r6,1075
1010e9b4:	310dc83a 	sub	r6,r6,r4
1010e9b8:	00c007c4 	movi	r3,31
1010e9bc:	1980120e 	bge	r3,r6,1010ea08 <__floatunsidf+0x78>
1010e9c0:	00c104c4 	movi	r3,1043
1010e9c4:	1907c83a 	sub	r3,r3,r4
1010e9c8:	80ca983a 	sll	r5,r16,r3
1010e9cc:	00800434 	movhi	r2,16
1010e9d0:	10bfffc4 	addi	r2,r2,-1
1010e9d4:	2101ffcc 	andi	r4,r4,2047
1010e9d8:	0021883a 	mov	r16,zero
1010e9dc:	288a703a 	and	r5,r5,r2
1010e9e0:	2008953a 	slli	r4,r4,20
1010e9e4:	00c00434 	movhi	r3,16
1010e9e8:	18ffffc4 	addi	r3,r3,-1
1010e9ec:	28c6703a 	and	r3,r5,r3
1010e9f0:	8005883a 	mov	r2,r16
1010e9f4:	1906b03a 	or	r3,r3,r4
1010e9f8:	dfc00117 	ldw	ra,4(sp)
1010e9fc:	dc000017 	ldw	r16,0(sp)
1010ea00:	dec00204 	addi	sp,sp,8
1010ea04:	f800283a 	ret
1010ea08:	00c002c4 	movi	r3,11
1010ea0c:	188bc83a 	sub	r5,r3,r2
1010ea10:	814ad83a 	srl	r5,r16,r5
1010ea14:	00c00434 	movhi	r3,16
1010ea18:	18ffffc4 	addi	r3,r3,-1
1010ea1c:	81a0983a 	sll	r16,r16,r6
1010ea20:	2101ffcc 	andi	r4,r4,2047
1010ea24:	28ca703a 	and	r5,r5,r3
1010ea28:	003fed06 	br	1010e9e0 <__alt_data_end+0xfffee9e0>
1010ea2c:	0009883a 	mov	r4,zero
1010ea30:	000b883a 	mov	r5,zero
1010ea34:	003fea06 	br	1010e9e0 <__alt_data_end+0xfffee9e0>

1010ea38 <__clzsi2>:
1010ea38:	00bfffd4 	movui	r2,65535
1010ea3c:	11000536 	bltu	r2,r4,1010ea54 <__clzsi2+0x1c>
1010ea40:	00803fc4 	movi	r2,255
1010ea44:	11000f36 	bltu	r2,r4,1010ea84 <__clzsi2+0x4c>
1010ea48:	00800804 	movi	r2,32
1010ea4c:	0007883a 	mov	r3,zero
1010ea50:	00000506 	br	1010ea68 <__clzsi2+0x30>
1010ea54:	00804034 	movhi	r2,256
1010ea58:	10bfffc4 	addi	r2,r2,-1
1010ea5c:	11000c2e 	bgeu	r2,r4,1010ea90 <__clzsi2+0x58>
1010ea60:	00800204 	movi	r2,8
1010ea64:	00c00604 	movi	r3,24
1010ea68:	20c8d83a 	srl	r4,r4,r3
1010ea6c:	00c40474 	movhi	r3,4113
1010ea70:	18c70a04 	addi	r3,r3,7208
1010ea74:	1909883a 	add	r4,r3,r4
1010ea78:	20c00003 	ldbu	r3,0(r4)
1010ea7c:	10c5c83a 	sub	r2,r2,r3
1010ea80:	f800283a 	ret
1010ea84:	00800604 	movi	r2,24
1010ea88:	00c00204 	movi	r3,8
1010ea8c:	003ff606 	br	1010ea68 <__alt_data_end+0xfffeea68>
1010ea90:	00800404 	movi	r2,16
1010ea94:	1007883a 	mov	r3,r2
1010ea98:	003ff306 	br	1010ea68 <__alt_data_end+0xfffeea68>

1010ea9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ea9c:	defffe04 	addi	sp,sp,-8
1010eaa0:	dfc00115 	stw	ra,4(sp)
1010eaa4:	df000015 	stw	fp,0(sp)
1010eaa8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eaac:	00840474 	movhi	r2,4113
1010eab0:	108e1a04 	addi	r2,r2,14440
1010eab4:	10800017 	ldw	r2,0(r2)
1010eab8:	10000526 	beq	r2,zero,1010ead0 <alt_get_errno+0x34>
1010eabc:	00840474 	movhi	r2,4113
1010eac0:	108e1a04 	addi	r2,r2,14440
1010eac4:	10800017 	ldw	r2,0(r2)
1010eac8:	103ee83a 	callr	r2
1010eacc:	00000206 	br	1010ead8 <alt_get_errno+0x3c>
1010ead0:	00840474 	movhi	r2,4113
1010ead4:	10950804 	addi	r2,r2,21536
}
1010ead8:	e037883a 	mov	sp,fp
1010eadc:	dfc00117 	ldw	ra,4(sp)
1010eae0:	df000017 	ldw	fp,0(sp)
1010eae4:	dec00204 	addi	sp,sp,8
1010eae8:	f800283a 	ret

1010eaec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010eaec:	defffb04 	addi	sp,sp,-20
1010eaf0:	dfc00415 	stw	ra,16(sp)
1010eaf4:	df000315 	stw	fp,12(sp)
1010eaf8:	df000304 	addi	fp,sp,12
1010eafc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010eb00:	e0bfff17 	ldw	r2,-4(fp)
1010eb04:	10000616 	blt	r2,zero,1010eb20 <close+0x34>
1010eb08:	e0bfff17 	ldw	r2,-4(fp)
1010eb0c:	10c00324 	muli	r3,r2,12
1010eb10:	00840474 	movhi	r2,4113
1010eb14:	10898d04 	addi	r2,r2,9780
1010eb18:	1885883a 	add	r2,r3,r2
1010eb1c:	00000106 	br	1010eb24 <close+0x38>
1010eb20:	0005883a 	mov	r2,zero
1010eb24:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010eb28:	e0bffd17 	ldw	r2,-12(fp)
1010eb2c:	10001926 	beq	r2,zero,1010eb94 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010eb30:	e0bffd17 	ldw	r2,-12(fp)
1010eb34:	10800017 	ldw	r2,0(r2)
1010eb38:	10800417 	ldw	r2,16(r2)
1010eb3c:	10000626 	beq	r2,zero,1010eb58 <close+0x6c>
1010eb40:	e0bffd17 	ldw	r2,-12(fp)
1010eb44:	10800017 	ldw	r2,0(r2)
1010eb48:	10800417 	ldw	r2,16(r2)
1010eb4c:	e13ffd17 	ldw	r4,-12(fp)
1010eb50:	103ee83a 	callr	r2
1010eb54:	00000106 	br	1010eb5c <close+0x70>
1010eb58:	0005883a 	mov	r2,zero
1010eb5c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010eb60:	e13fff17 	ldw	r4,-4(fp)
1010eb64:	010f4700 	call	1010f470 <alt_release_fd>
    if (rval < 0)
1010eb68:	e0bffe17 	ldw	r2,-8(fp)
1010eb6c:	1000070e 	bge	r2,zero,1010eb8c <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010eb70:	010ea9c0 	call	1010ea9c <alt_get_errno>
1010eb74:	1007883a 	mov	r3,r2
1010eb78:	e0bffe17 	ldw	r2,-8(fp)
1010eb7c:	0085c83a 	sub	r2,zero,r2
1010eb80:	18800015 	stw	r2,0(r3)
      return -1;
1010eb84:	00bfffc4 	movi	r2,-1
1010eb88:	00000706 	br	1010eba8 <close+0xbc>
    }
    return 0;
1010eb8c:	0005883a 	mov	r2,zero
1010eb90:	00000506 	br	1010eba8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010eb94:	010ea9c0 	call	1010ea9c <alt_get_errno>
1010eb98:	1007883a 	mov	r3,r2
1010eb9c:	00801444 	movi	r2,81
1010eba0:	18800015 	stw	r2,0(r3)
    return -1;
1010eba4:	00bfffc4 	movi	r2,-1
  }
}
1010eba8:	e037883a 	mov	sp,fp
1010ebac:	dfc00117 	ldw	ra,4(sp)
1010ebb0:	df000017 	ldw	fp,0(sp)
1010ebb4:	dec00204 	addi	sp,sp,8
1010ebb8:	f800283a 	ret

1010ebbc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010ebbc:	defffc04 	addi	sp,sp,-16
1010ebc0:	df000315 	stw	fp,12(sp)
1010ebc4:	df000304 	addi	fp,sp,12
1010ebc8:	e13ffd15 	stw	r4,-12(fp)
1010ebcc:	e17ffe15 	stw	r5,-8(fp)
1010ebd0:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010ebd4:	e0bfff17 	ldw	r2,-4(fp)
}
1010ebd8:	e037883a 	mov	sp,fp
1010ebdc:	df000017 	ldw	fp,0(sp)
1010ebe0:	dec00104 	addi	sp,sp,4
1010ebe4:	f800283a 	ret

1010ebe8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ebe8:	defffe04 	addi	sp,sp,-8
1010ebec:	dfc00115 	stw	ra,4(sp)
1010ebf0:	df000015 	stw	fp,0(sp)
1010ebf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ebf8:	00840474 	movhi	r2,4113
1010ebfc:	108e1a04 	addi	r2,r2,14440
1010ec00:	10800017 	ldw	r2,0(r2)
1010ec04:	10000526 	beq	r2,zero,1010ec1c <alt_get_errno+0x34>
1010ec08:	00840474 	movhi	r2,4113
1010ec0c:	108e1a04 	addi	r2,r2,14440
1010ec10:	10800017 	ldw	r2,0(r2)
1010ec14:	103ee83a 	callr	r2
1010ec18:	00000206 	br	1010ec24 <alt_get_errno+0x3c>
1010ec1c:	00840474 	movhi	r2,4113
1010ec20:	10950804 	addi	r2,r2,21536
}
1010ec24:	e037883a 	mov	sp,fp
1010ec28:	dfc00117 	ldw	ra,4(sp)
1010ec2c:	df000017 	ldw	fp,0(sp)
1010ec30:	dec00204 	addi	sp,sp,8
1010ec34:	f800283a 	ret

1010ec38 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010ec38:	defffb04 	addi	sp,sp,-20
1010ec3c:	dfc00415 	stw	ra,16(sp)
1010ec40:	df000315 	stw	fp,12(sp)
1010ec44:	df000304 	addi	fp,sp,12
1010ec48:	e13ffe15 	stw	r4,-8(fp)
1010ec4c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ec50:	e0bffe17 	ldw	r2,-8(fp)
1010ec54:	10000616 	blt	r2,zero,1010ec70 <fstat+0x38>
1010ec58:	e0bffe17 	ldw	r2,-8(fp)
1010ec5c:	10c00324 	muli	r3,r2,12
1010ec60:	00840474 	movhi	r2,4113
1010ec64:	10898d04 	addi	r2,r2,9780
1010ec68:	1885883a 	add	r2,r3,r2
1010ec6c:	00000106 	br	1010ec74 <fstat+0x3c>
1010ec70:	0005883a 	mov	r2,zero
1010ec74:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010ec78:	e0bffd17 	ldw	r2,-12(fp)
1010ec7c:	10001026 	beq	r2,zero,1010ecc0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010ec80:	e0bffd17 	ldw	r2,-12(fp)
1010ec84:	10800017 	ldw	r2,0(r2)
1010ec88:	10800817 	ldw	r2,32(r2)
1010ec8c:	10000726 	beq	r2,zero,1010ecac <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010ec90:	e0bffd17 	ldw	r2,-12(fp)
1010ec94:	10800017 	ldw	r2,0(r2)
1010ec98:	10800817 	ldw	r2,32(r2)
1010ec9c:	e17fff17 	ldw	r5,-4(fp)
1010eca0:	e13ffd17 	ldw	r4,-12(fp)
1010eca4:	103ee83a 	callr	r2
1010eca8:	00000a06 	br	1010ecd4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010ecac:	e0bfff17 	ldw	r2,-4(fp)
1010ecb0:	00c80004 	movi	r3,8192
1010ecb4:	10c00115 	stw	r3,4(r2)
      return 0;
1010ecb8:	0005883a 	mov	r2,zero
1010ecbc:	00000506 	br	1010ecd4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010ecc0:	010ebe80 	call	1010ebe8 <alt_get_errno>
1010ecc4:	1007883a 	mov	r3,r2
1010ecc8:	00801444 	movi	r2,81
1010eccc:	18800015 	stw	r2,0(r3)
    return -1;
1010ecd0:	00bfffc4 	movi	r2,-1
  }
}
1010ecd4:	e037883a 	mov	sp,fp
1010ecd8:	dfc00117 	ldw	ra,4(sp)
1010ecdc:	df000017 	ldw	fp,0(sp)
1010ece0:	dec00204 	addi	sp,sp,8
1010ece4:	f800283a 	ret

1010ece8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ece8:	defffe04 	addi	sp,sp,-8
1010ecec:	dfc00115 	stw	ra,4(sp)
1010ecf0:	df000015 	stw	fp,0(sp)
1010ecf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ecf8:	00840474 	movhi	r2,4113
1010ecfc:	108e1a04 	addi	r2,r2,14440
1010ed00:	10800017 	ldw	r2,0(r2)
1010ed04:	10000526 	beq	r2,zero,1010ed1c <alt_get_errno+0x34>
1010ed08:	00840474 	movhi	r2,4113
1010ed0c:	108e1a04 	addi	r2,r2,14440
1010ed10:	10800017 	ldw	r2,0(r2)
1010ed14:	103ee83a 	callr	r2
1010ed18:	00000206 	br	1010ed24 <alt_get_errno+0x3c>
1010ed1c:	00840474 	movhi	r2,4113
1010ed20:	10950804 	addi	r2,r2,21536
}
1010ed24:	e037883a 	mov	sp,fp
1010ed28:	dfc00117 	ldw	ra,4(sp)
1010ed2c:	df000017 	ldw	fp,0(sp)
1010ed30:	dec00204 	addi	sp,sp,8
1010ed34:	f800283a 	ret

1010ed38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010ed38:	deffed04 	addi	sp,sp,-76
1010ed3c:	dfc01215 	stw	ra,72(sp)
1010ed40:	df001115 	stw	fp,68(sp)
1010ed44:	df001104 	addi	fp,sp,68
1010ed48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ed4c:	e0bfff17 	ldw	r2,-4(fp)
1010ed50:	10000616 	blt	r2,zero,1010ed6c <isatty+0x34>
1010ed54:	e0bfff17 	ldw	r2,-4(fp)
1010ed58:	10c00324 	muli	r3,r2,12
1010ed5c:	00840474 	movhi	r2,4113
1010ed60:	10898d04 	addi	r2,r2,9780
1010ed64:	1885883a 	add	r2,r3,r2
1010ed68:	00000106 	br	1010ed70 <isatty+0x38>
1010ed6c:	0005883a 	mov	r2,zero
1010ed70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010ed74:	e0bfef17 	ldw	r2,-68(fp)
1010ed78:	10000e26 	beq	r2,zero,1010edb4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010ed7c:	e0bfef17 	ldw	r2,-68(fp)
1010ed80:	10800017 	ldw	r2,0(r2)
1010ed84:	10800817 	ldw	r2,32(r2)
1010ed88:	1000021e 	bne	r2,zero,1010ed94 <isatty+0x5c>
    {
      return 1;
1010ed8c:	00800044 	movi	r2,1
1010ed90:	00000d06 	br	1010edc8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010ed94:	e0bff004 	addi	r2,fp,-64
1010ed98:	100b883a 	mov	r5,r2
1010ed9c:	e13fff17 	ldw	r4,-4(fp)
1010eda0:	010ec380 	call	1010ec38 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010eda4:	e0bff117 	ldw	r2,-60(fp)
1010eda8:	10880020 	cmpeqi	r2,r2,8192
1010edac:	10803fcc 	andi	r2,r2,255
1010edb0:	00000506 	br	1010edc8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010edb4:	010ece80 	call	1010ece8 <alt_get_errno>
1010edb8:	1007883a 	mov	r3,r2
1010edbc:	00801444 	movi	r2,81
1010edc0:	18800015 	stw	r2,0(r3)
    return 0;
1010edc4:	0005883a 	mov	r2,zero
  }
}
1010edc8:	e037883a 	mov	sp,fp
1010edcc:	dfc00117 	ldw	ra,4(sp)
1010edd0:	df000017 	ldw	fp,0(sp)
1010edd4:	dec00204 	addi	sp,sp,8
1010edd8:	f800283a 	ret

1010eddc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010eddc:	defffc04 	addi	sp,sp,-16
1010ede0:	df000315 	stw	fp,12(sp)
1010ede4:	df000304 	addi	fp,sp,12
1010ede8:	e13ffd15 	stw	r4,-12(fp)
1010edec:	e17ffe15 	stw	r5,-8(fp)
1010edf0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010edf4:	e0fffe17 	ldw	r3,-8(fp)
1010edf8:	e0bffd17 	ldw	r2,-12(fp)
1010edfc:	18800c26 	beq	r3,r2,1010ee30 <alt_load_section+0x54>
  {
    while( to != end )
1010ee00:	00000806 	br	1010ee24 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010ee04:	e0bffe17 	ldw	r2,-8(fp)
1010ee08:	10c00104 	addi	r3,r2,4
1010ee0c:	e0fffe15 	stw	r3,-8(fp)
1010ee10:	e0fffd17 	ldw	r3,-12(fp)
1010ee14:	19000104 	addi	r4,r3,4
1010ee18:	e13ffd15 	stw	r4,-12(fp)
1010ee1c:	18c00017 	ldw	r3,0(r3)
1010ee20:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010ee24:	e0fffe17 	ldw	r3,-8(fp)
1010ee28:	e0bfff17 	ldw	r2,-4(fp)
1010ee2c:	18bff51e 	bne	r3,r2,1010ee04 <__alt_data_end+0xfffeee04>
    {
      *to++ = *from++;
    }
  }
}
1010ee30:	0001883a 	nop
1010ee34:	e037883a 	mov	sp,fp
1010ee38:	df000017 	ldw	fp,0(sp)
1010ee3c:	dec00104 	addi	sp,sp,4
1010ee40:	f800283a 	ret

1010ee44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010ee44:	defffe04 	addi	sp,sp,-8
1010ee48:	dfc00115 	stw	ra,4(sp)
1010ee4c:	df000015 	stw	fp,0(sp)
1010ee50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010ee54:	01840474 	movhi	r6,4113
1010ee58:	318e3104 	addi	r6,r6,14532
1010ee5c:	01440474 	movhi	r5,4113
1010ee60:	29475a04 	addi	r5,r5,7528
1010ee64:	01040474 	movhi	r4,4113
1010ee68:	210e3104 	addi	r4,r4,14532
1010ee6c:	010eddc0 	call	1010eddc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010ee70:	01840434 	movhi	r6,4112
1010ee74:	31809104 	addi	r6,r6,580
1010ee78:	01440434 	movhi	r5,4112
1010ee7c:	29400804 	addi	r5,r5,32
1010ee80:	01040434 	movhi	r4,4112
1010ee84:	21000804 	addi	r4,r4,32
1010ee88:	010eddc0 	call	1010eddc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010ee8c:	01840474 	movhi	r6,4113
1010ee90:	31875a04 	addi	r6,r6,7528
1010ee94:	01440474 	movhi	r5,4113
1010ee98:	29463e04 	addi	r5,r5,6392
1010ee9c:	01040474 	movhi	r4,4113
1010eea0:	21063e04 	addi	r4,r4,6392
1010eea4:	010eddc0 	call	1010eddc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010eea8:	01109540 	call	10110954 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010eeac:	0110e2c0 	call	10110e2c <alt_icache_flush_all>
}
1010eeb0:	0001883a 	nop
1010eeb4:	e037883a 	mov	sp,fp
1010eeb8:	dfc00117 	ldw	ra,4(sp)
1010eebc:	df000017 	ldw	fp,0(sp)
1010eec0:	dec00204 	addi	sp,sp,8
1010eec4:	f800283a 	ret

1010eec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010eec8:	defffe04 	addi	sp,sp,-8
1010eecc:	dfc00115 	stw	ra,4(sp)
1010eed0:	df000015 	stw	fp,0(sp)
1010eed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eed8:	00840474 	movhi	r2,4113
1010eedc:	108e1a04 	addi	r2,r2,14440
1010eee0:	10800017 	ldw	r2,0(r2)
1010eee4:	10000526 	beq	r2,zero,1010eefc <alt_get_errno+0x34>
1010eee8:	00840474 	movhi	r2,4113
1010eeec:	108e1a04 	addi	r2,r2,14440
1010eef0:	10800017 	ldw	r2,0(r2)
1010eef4:	103ee83a 	callr	r2
1010eef8:	00000206 	br	1010ef04 <alt_get_errno+0x3c>
1010eefc:	00840474 	movhi	r2,4113
1010ef00:	10950804 	addi	r2,r2,21536
}
1010ef04:	e037883a 	mov	sp,fp
1010ef08:	dfc00117 	ldw	ra,4(sp)
1010ef0c:	df000017 	ldw	fp,0(sp)
1010ef10:	dec00204 	addi	sp,sp,8
1010ef14:	f800283a 	ret

1010ef18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010ef18:	defff904 	addi	sp,sp,-28
1010ef1c:	dfc00615 	stw	ra,24(sp)
1010ef20:	df000515 	stw	fp,20(sp)
1010ef24:	df000504 	addi	fp,sp,20
1010ef28:	e13ffd15 	stw	r4,-12(fp)
1010ef2c:	e17ffe15 	stw	r5,-8(fp)
1010ef30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010ef34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ef38:	e0bffd17 	ldw	r2,-12(fp)
1010ef3c:	10000616 	blt	r2,zero,1010ef58 <lseek+0x40>
1010ef40:	e0bffd17 	ldw	r2,-12(fp)
1010ef44:	10c00324 	muli	r3,r2,12
1010ef48:	00840474 	movhi	r2,4113
1010ef4c:	10898d04 	addi	r2,r2,9780
1010ef50:	1885883a 	add	r2,r3,r2
1010ef54:	00000106 	br	1010ef5c <lseek+0x44>
1010ef58:	0005883a 	mov	r2,zero
1010ef5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010ef60:	e0bffc17 	ldw	r2,-16(fp)
1010ef64:	10001026 	beq	r2,zero,1010efa8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010ef68:	e0bffc17 	ldw	r2,-16(fp)
1010ef6c:	10800017 	ldw	r2,0(r2)
1010ef70:	10800717 	ldw	r2,28(r2)
1010ef74:	10000926 	beq	r2,zero,1010ef9c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010ef78:	e0bffc17 	ldw	r2,-16(fp)
1010ef7c:	10800017 	ldw	r2,0(r2)
1010ef80:	10800717 	ldw	r2,28(r2)
1010ef84:	e1bfff17 	ldw	r6,-4(fp)
1010ef88:	e17ffe17 	ldw	r5,-8(fp)
1010ef8c:	e13ffc17 	ldw	r4,-16(fp)
1010ef90:	103ee83a 	callr	r2
1010ef94:	e0bffb15 	stw	r2,-20(fp)
1010ef98:	00000506 	br	1010efb0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010ef9c:	00bfde84 	movi	r2,-134
1010efa0:	e0bffb15 	stw	r2,-20(fp)
1010efa4:	00000206 	br	1010efb0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010efa8:	00bfebc4 	movi	r2,-81
1010efac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010efb0:	e0bffb17 	ldw	r2,-20(fp)
1010efb4:	1000070e 	bge	r2,zero,1010efd4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010efb8:	010eec80 	call	1010eec8 <alt_get_errno>
1010efbc:	1007883a 	mov	r3,r2
1010efc0:	e0bffb17 	ldw	r2,-20(fp)
1010efc4:	0085c83a 	sub	r2,zero,r2
1010efc8:	18800015 	stw	r2,0(r3)
    rc = -1;
1010efcc:	00bfffc4 	movi	r2,-1
1010efd0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010efd4:	e0bffb17 	ldw	r2,-20(fp)
}
1010efd8:	e037883a 	mov	sp,fp
1010efdc:	dfc00117 	ldw	ra,4(sp)
1010efe0:	df000017 	ldw	fp,0(sp)
1010efe4:	dec00204 	addi	sp,sp,8
1010efe8:	f800283a 	ret

1010efec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010efec:	defffd04 	addi	sp,sp,-12
1010eff0:	dfc00215 	stw	ra,8(sp)
1010eff4:	df000115 	stw	fp,4(sp)
1010eff8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010effc:	0009883a 	mov	r4,zero
1010f000:	010f7340 	call	1010f734 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010f004:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010f008:	010f76c0 	call	1010f76c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010f00c:	01840474 	movhi	r6,4113
1010f010:	31874d04 	addi	r6,r6,7476
1010f014:	01440474 	movhi	r5,4113
1010f018:	29474d04 	addi	r5,r5,7476
1010f01c:	01040474 	movhi	r4,4113
1010f020:	21074d04 	addi	r4,r4,7476
1010f024:	01111f40 	call	101111f4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010f028:	0110a900 	call	10110a90 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010f02c:	01040474 	movhi	r4,4113
1010f030:	2102bc04 	addi	r4,r4,2800
1010f034:	01115640 	call	10111564 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010f038:	d0a70017 	ldw	r2,-25600(gp)
1010f03c:	d0e70117 	ldw	r3,-25596(gp)
1010f040:	d1270217 	ldw	r4,-25592(gp)
1010f044:	200d883a 	mov	r6,r4
1010f048:	180b883a 	mov	r5,r3
1010f04c:	1009883a 	mov	r4,r2
1010f050:	0100b440 	call	10100b44 <main>
1010f054:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010f058:	01000044 	movi	r4,1
1010f05c:	010eaec0 	call	1010eaec <close>
  exit (result);
1010f060:	e13fff17 	ldw	r4,-4(fp)
1010f064:	01115780 	call	10111578 <exit>

1010f068 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010f068:	defffe04 	addi	sp,sp,-8
1010f06c:	df000115 	stw	fp,4(sp)
1010f070:	df000104 	addi	fp,sp,4
1010f074:	e13fff15 	stw	r4,-4(fp)
}
1010f078:	0001883a 	nop
1010f07c:	e037883a 	mov	sp,fp
1010f080:	df000017 	ldw	fp,0(sp)
1010f084:	dec00104 	addi	sp,sp,4
1010f088:	f800283a 	ret

1010f08c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010f08c:	defffe04 	addi	sp,sp,-8
1010f090:	df000115 	stw	fp,4(sp)
1010f094:	df000104 	addi	fp,sp,4
1010f098:	e13fff15 	stw	r4,-4(fp)
}
1010f09c:	0001883a 	nop
1010f0a0:	e037883a 	mov	sp,fp
1010f0a4:	df000017 	ldw	fp,0(sp)
1010f0a8:	dec00104 	addi	sp,sp,4
1010f0ac:	f800283a 	ret

1010f0b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f0b0:	defffe04 	addi	sp,sp,-8
1010f0b4:	dfc00115 	stw	ra,4(sp)
1010f0b8:	df000015 	stw	fp,0(sp)
1010f0bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f0c0:	00840474 	movhi	r2,4113
1010f0c4:	108e1a04 	addi	r2,r2,14440
1010f0c8:	10800017 	ldw	r2,0(r2)
1010f0cc:	10000526 	beq	r2,zero,1010f0e4 <alt_get_errno+0x34>
1010f0d0:	00840474 	movhi	r2,4113
1010f0d4:	108e1a04 	addi	r2,r2,14440
1010f0d8:	10800017 	ldw	r2,0(r2)
1010f0dc:	103ee83a 	callr	r2
1010f0e0:	00000206 	br	1010f0ec <alt_get_errno+0x3c>
1010f0e4:	00840474 	movhi	r2,4113
1010f0e8:	10950804 	addi	r2,r2,21536
}
1010f0ec:	e037883a 	mov	sp,fp
1010f0f0:	dfc00117 	ldw	ra,4(sp)
1010f0f4:	df000017 	ldw	fp,0(sp)
1010f0f8:	dec00204 	addi	sp,sp,8
1010f0fc:	f800283a 	ret

1010f100 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010f100:	defffd04 	addi	sp,sp,-12
1010f104:	df000215 	stw	fp,8(sp)
1010f108:	df000204 	addi	fp,sp,8
1010f10c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010f110:	e0bfff17 	ldw	r2,-4(fp)
1010f114:	10800217 	ldw	r2,8(r2)
1010f118:	10d00034 	orhi	r3,r2,16384
1010f11c:	e0bfff17 	ldw	r2,-4(fp)
1010f120:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f124:	e03ffe15 	stw	zero,-8(fp)
1010f128:	00001d06 	br	1010f1a0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f12c:	00840474 	movhi	r2,4113
1010f130:	10898d04 	addi	r2,r2,9780
1010f134:	e0fffe17 	ldw	r3,-8(fp)
1010f138:	18c00324 	muli	r3,r3,12
1010f13c:	10c5883a 	add	r2,r2,r3
1010f140:	10c00017 	ldw	r3,0(r2)
1010f144:	e0bfff17 	ldw	r2,-4(fp)
1010f148:	10800017 	ldw	r2,0(r2)
1010f14c:	1880111e 	bne	r3,r2,1010f194 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f150:	00840474 	movhi	r2,4113
1010f154:	10898d04 	addi	r2,r2,9780
1010f158:	e0fffe17 	ldw	r3,-8(fp)
1010f15c:	18c00324 	muli	r3,r3,12
1010f160:	10c5883a 	add	r2,r2,r3
1010f164:	10800204 	addi	r2,r2,8
1010f168:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010f16c:	1000090e 	bge	r2,zero,1010f194 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010f170:	e0bffe17 	ldw	r2,-8(fp)
1010f174:	10c00324 	muli	r3,r2,12
1010f178:	00840474 	movhi	r2,4113
1010f17c:	10898d04 	addi	r2,r2,9780
1010f180:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010f184:	e0bfff17 	ldw	r2,-4(fp)
1010f188:	18800226 	beq	r3,r2,1010f194 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010f18c:	00bffcc4 	movi	r2,-13
1010f190:	00000a06 	br	1010f1bc <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010f194:	e0bffe17 	ldw	r2,-8(fp)
1010f198:	10800044 	addi	r2,r2,1
1010f19c:	e0bffe15 	stw	r2,-8(fp)
1010f1a0:	00840474 	movhi	r2,4113
1010f1a4:	108e1904 	addi	r2,r2,14436
1010f1a8:	10800017 	ldw	r2,0(r2)
1010f1ac:	1007883a 	mov	r3,r2
1010f1b0:	e0bffe17 	ldw	r2,-8(fp)
1010f1b4:	18bfdd2e 	bgeu	r3,r2,1010f12c <__alt_data_end+0xfffef12c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010f1b8:	0005883a 	mov	r2,zero
}
1010f1bc:	e037883a 	mov	sp,fp
1010f1c0:	df000017 	ldw	fp,0(sp)
1010f1c4:	dec00104 	addi	sp,sp,4
1010f1c8:	f800283a 	ret

1010f1cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010f1cc:	defff604 	addi	sp,sp,-40
1010f1d0:	dfc00915 	stw	ra,36(sp)
1010f1d4:	df000815 	stw	fp,32(sp)
1010f1d8:	df000804 	addi	fp,sp,32
1010f1dc:	e13ffd15 	stw	r4,-12(fp)
1010f1e0:	e17ffe15 	stw	r5,-8(fp)
1010f1e4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010f1e8:	00bfffc4 	movi	r2,-1
1010f1ec:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010f1f0:	00bffb44 	movi	r2,-19
1010f1f4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010f1f8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010f1fc:	01440474 	movhi	r5,4113
1010f200:	294e1704 	addi	r5,r5,14428
1010f204:	e13ffd17 	ldw	r4,-12(fp)
1010f208:	0110b500 	call	10110b50 <alt_find_dev>
1010f20c:	e0bff815 	stw	r2,-32(fp)
1010f210:	e0bff817 	ldw	r2,-32(fp)
1010f214:	1000051e 	bne	r2,zero,1010f22c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010f218:	e13ffd17 	ldw	r4,-12(fp)
1010f21c:	0110be00 	call	10110be0 <alt_find_file>
1010f220:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010f224:	00800044 	movi	r2,1
1010f228:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010f22c:	e0bff817 	ldw	r2,-32(fp)
1010f230:	10002926 	beq	r2,zero,1010f2d8 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010f234:	e13ff817 	ldw	r4,-32(fp)
1010f238:	0110d780 	call	10110d78 <alt_get_fd>
1010f23c:	e0bff915 	stw	r2,-28(fp)
1010f240:	e0bff917 	ldw	r2,-28(fp)
1010f244:	1000030e 	bge	r2,zero,1010f254 <open+0x88>
    {
      status = index;
1010f248:	e0bff917 	ldw	r2,-28(fp)
1010f24c:	e0bffa15 	stw	r2,-24(fp)
1010f250:	00002306 	br	1010f2e0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
1010f254:	e0bff917 	ldw	r2,-28(fp)
1010f258:	10c00324 	muli	r3,r2,12
1010f25c:	00840474 	movhi	r2,4113
1010f260:	10898d04 	addi	r2,r2,9780
1010f264:	1885883a 	add	r2,r3,r2
1010f268:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010f26c:	e0fffe17 	ldw	r3,-8(fp)
1010f270:	00900034 	movhi	r2,16384
1010f274:	10bfffc4 	addi	r2,r2,-1
1010f278:	1886703a 	and	r3,r3,r2
1010f27c:	e0bffc17 	ldw	r2,-16(fp)
1010f280:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010f284:	e0bffb17 	ldw	r2,-20(fp)
1010f288:	1000051e 	bne	r2,zero,1010f2a0 <open+0xd4>
1010f28c:	e13ffc17 	ldw	r4,-16(fp)
1010f290:	010f1000 	call	1010f100 <alt_file_locked>
1010f294:	e0bffa15 	stw	r2,-24(fp)
1010f298:	e0bffa17 	ldw	r2,-24(fp)
1010f29c:	10001016 	blt	r2,zero,1010f2e0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010f2a0:	e0bff817 	ldw	r2,-32(fp)
1010f2a4:	10800317 	ldw	r2,12(r2)
1010f2a8:	10000826 	beq	r2,zero,1010f2cc <open+0x100>
1010f2ac:	e0bff817 	ldw	r2,-32(fp)
1010f2b0:	10800317 	ldw	r2,12(r2)
1010f2b4:	e1ffff17 	ldw	r7,-4(fp)
1010f2b8:	e1bffe17 	ldw	r6,-8(fp)
1010f2bc:	e17ffd17 	ldw	r5,-12(fp)
1010f2c0:	e13ffc17 	ldw	r4,-16(fp)
1010f2c4:	103ee83a 	callr	r2
1010f2c8:	00000106 	br	1010f2d0 <open+0x104>
1010f2cc:	0005883a 	mov	r2,zero
1010f2d0:	e0bffa15 	stw	r2,-24(fp)
1010f2d4:	00000206 	br	1010f2e0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010f2d8:	00bffb44 	movi	r2,-19
1010f2dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010f2e0:	e0bffa17 	ldw	r2,-24(fp)
1010f2e4:	1000090e 	bge	r2,zero,1010f30c <open+0x140>
  {
    alt_release_fd (index);  
1010f2e8:	e13ff917 	ldw	r4,-28(fp)
1010f2ec:	010f4700 	call	1010f470 <alt_release_fd>
    ALT_ERRNO = -status;
1010f2f0:	010f0b00 	call	1010f0b0 <alt_get_errno>
1010f2f4:	1007883a 	mov	r3,r2
1010f2f8:	e0bffa17 	ldw	r2,-24(fp)
1010f2fc:	0085c83a 	sub	r2,zero,r2
1010f300:	18800015 	stw	r2,0(r3)
    return -1;
1010f304:	00bfffc4 	movi	r2,-1
1010f308:	00000106 	br	1010f310 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1010f30c:	e0bff917 	ldw	r2,-28(fp)
}
1010f310:	e037883a 	mov	sp,fp
1010f314:	dfc00117 	ldw	ra,4(sp)
1010f318:	df000017 	ldw	fp,0(sp)
1010f31c:	dec00204 	addi	sp,sp,8
1010f320:	f800283a 	ret

1010f324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f324:	defffe04 	addi	sp,sp,-8
1010f328:	dfc00115 	stw	ra,4(sp)
1010f32c:	df000015 	stw	fp,0(sp)
1010f330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f334:	00840474 	movhi	r2,4113
1010f338:	108e1a04 	addi	r2,r2,14440
1010f33c:	10800017 	ldw	r2,0(r2)
1010f340:	10000526 	beq	r2,zero,1010f358 <alt_get_errno+0x34>
1010f344:	00840474 	movhi	r2,4113
1010f348:	108e1a04 	addi	r2,r2,14440
1010f34c:	10800017 	ldw	r2,0(r2)
1010f350:	103ee83a 	callr	r2
1010f354:	00000206 	br	1010f360 <alt_get_errno+0x3c>
1010f358:	00840474 	movhi	r2,4113
1010f35c:	10950804 	addi	r2,r2,21536
}
1010f360:	e037883a 	mov	sp,fp
1010f364:	dfc00117 	ldw	ra,4(sp)
1010f368:	df000017 	ldw	fp,0(sp)
1010f36c:	dec00204 	addi	sp,sp,8
1010f370:	f800283a 	ret

1010f374 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010f374:	defff904 	addi	sp,sp,-28
1010f378:	dfc00615 	stw	ra,24(sp)
1010f37c:	df000515 	stw	fp,20(sp)
1010f380:	df000504 	addi	fp,sp,20
1010f384:	e13ffd15 	stw	r4,-12(fp)
1010f388:	e17ffe15 	stw	r5,-8(fp)
1010f38c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f390:	e0bffd17 	ldw	r2,-12(fp)
1010f394:	10000616 	blt	r2,zero,1010f3b0 <read+0x3c>
1010f398:	e0bffd17 	ldw	r2,-12(fp)
1010f39c:	10c00324 	muli	r3,r2,12
1010f3a0:	00840474 	movhi	r2,4113
1010f3a4:	10898d04 	addi	r2,r2,9780
1010f3a8:	1885883a 	add	r2,r3,r2
1010f3ac:	00000106 	br	1010f3b4 <read+0x40>
1010f3b0:	0005883a 	mov	r2,zero
1010f3b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f3b8:	e0bffb17 	ldw	r2,-20(fp)
1010f3bc:	10002226 	beq	r2,zero,1010f448 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f3c0:	e0bffb17 	ldw	r2,-20(fp)
1010f3c4:	10800217 	ldw	r2,8(r2)
1010f3c8:	108000cc 	andi	r2,r2,3
1010f3cc:	10800060 	cmpeqi	r2,r2,1
1010f3d0:	1000181e 	bne	r2,zero,1010f434 <read+0xc0>
        (fd->dev->read))
1010f3d4:	e0bffb17 	ldw	r2,-20(fp)
1010f3d8:	10800017 	ldw	r2,0(r2)
1010f3dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f3e0:	10001426 	beq	r2,zero,1010f434 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010f3e4:	e0bffb17 	ldw	r2,-20(fp)
1010f3e8:	10800017 	ldw	r2,0(r2)
1010f3ec:	10800517 	ldw	r2,20(r2)
1010f3f0:	e0ffff17 	ldw	r3,-4(fp)
1010f3f4:	180d883a 	mov	r6,r3
1010f3f8:	e17ffe17 	ldw	r5,-8(fp)
1010f3fc:	e13ffb17 	ldw	r4,-20(fp)
1010f400:	103ee83a 	callr	r2
1010f404:	e0bffc15 	stw	r2,-16(fp)
1010f408:	e0bffc17 	ldw	r2,-16(fp)
1010f40c:	1000070e 	bge	r2,zero,1010f42c <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010f410:	010f3240 	call	1010f324 <alt_get_errno>
1010f414:	1007883a 	mov	r3,r2
1010f418:	e0bffc17 	ldw	r2,-16(fp)
1010f41c:	0085c83a 	sub	r2,zero,r2
1010f420:	18800015 	stw	r2,0(r3)
          return -1;
1010f424:	00bfffc4 	movi	r2,-1
1010f428:	00000c06 	br	1010f45c <read+0xe8>
        }
        return rval;
1010f42c:	e0bffc17 	ldw	r2,-16(fp)
1010f430:	00000a06 	br	1010f45c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010f434:	010f3240 	call	1010f324 <alt_get_errno>
1010f438:	1007883a 	mov	r3,r2
1010f43c:	00800344 	movi	r2,13
1010f440:	18800015 	stw	r2,0(r3)
1010f444:	00000406 	br	1010f458 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010f448:	010f3240 	call	1010f324 <alt_get_errno>
1010f44c:	1007883a 	mov	r3,r2
1010f450:	00801444 	movi	r2,81
1010f454:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f458:	00bfffc4 	movi	r2,-1
}
1010f45c:	e037883a 	mov	sp,fp
1010f460:	dfc00117 	ldw	ra,4(sp)
1010f464:	df000017 	ldw	fp,0(sp)
1010f468:	dec00204 	addi	sp,sp,8
1010f46c:	f800283a 	ret

1010f470 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010f470:	defffe04 	addi	sp,sp,-8
1010f474:	df000115 	stw	fp,4(sp)
1010f478:	df000104 	addi	fp,sp,4
1010f47c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010f480:	e0bfff17 	ldw	r2,-4(fp)
1010f484:	108000d0 	cmplti	r2,r2,3
1010f488:	10000d1e 	bne	r2,zero,1010f4c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010f48c:	00840474 	movhi	r2,4113
1010f490:	10898d04 	addi	r2,r2,9780
1010f494:	e0ffff17 	ldw	r3,-4(fp)
1010f498:	18c00324 	muli	r3,r3,12
1010f49c:	10c5883a 	add	r2,r2,r3
1010f4a0:	10800204 	addi	r2,r2,8
1010f4a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010f4a8:	00840474 	movhi	r2,4113
1010f4ac:	10898d04 	addi	r2,r2,9780
1010f4b0:	e0ffff17 	ldw	r3,-4(fp)
1010f4b4:	18c00324 	muli	r3,r3,12
1010f4b8:	10c5883a 	add	r2,r2,r3
1010f4bc:	10000015 	stw	zero,0(r2)
  }
}
1010f4c0:	0001883a 	nop
1010f4c4:	e037883a 	mov	sp,fp
1010f4c8:	df000017 	ldw	fp,0(sp)
1010f4cc:	dec00104 	addi	sp,sp,4
1010f4d0:	f800283a 	ret

1010f4d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010f4d4:	defff904 	addi	sp,sp,-28
1010f4d8:	df000615 	stw	fp,24(sp)
1010f4dc:	df000604 	addi	fp,sp,24
1010f4e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f4e4:	0005303a 	rdctl	r2,status
1010f4e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f4ec:	e0fffe17 	ldw	r3,-8(fp)
1010f4f0:	00bfff84 	movi	r2,-2
1010f4f4:	1884703a 	and	r2,r3,r2
1010f4f8:	1001703a 	wrctl	status,r2
  
  return context;
1010f4fc:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010f500:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010f504:	d0a00c17 	ldw	r2,-32720(gp)
1010f508:	10c000c4 	addi	r3,r2,3
1010f50c:	00bfff04 	movi	r2,-4
1010f510:	1884703a 	and	r2,r3,r2
1010f514:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010f518:	d0e00c17 	ldw	r3,-32720(gp)
1010f51c:	e0bfff17 	ldw	r2,-4(fp)
1010f520:	1887883a 	add	r3,r3,r2
1010f524:	008404b4 	movhi	r2,4114
1010f528:	10800004 	addi	r2,r2,0
1010f52c:	10c0062e 	bgeu	r2,r3,1010f548 <sbrk+0x74>
1010f530:	e0bffb17 	ldw	r2,-20(fp)
1010f534:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f538:	e0bffa17 	ldw	r2,-24(fp)
1010f53c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010f540:	00bfffc4 	movi	r2,-1
1010f544:	00000b06 	br	1010f574 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010f548:	d0a00c17 	ldw	r2,-32720(gp)
1010f54c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010f550:	d0e00c17 	ldw	r3,-32720(gp)
1010f554:	e0bfff17 	ldw	r2,-4(fp)
1010f558:	1885883a 	add	r2,r3,r2
1010f55c:	d0a00c15 	stw	r2,-32720(gp)
1010f560:	e0bffb17 	ldw	r2,-20(fp)
1010f564:	e0bffc15 	stw	r2,-16(fp)
1010f568:	e0bffc17 	ldw	r2,-16(fp)
1010f56c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010f570:	e0bffd17 	ldw	r2,-12(fp)
} 
1010f574:	e037883a 	mov	sp,fp
1010f578:	df000017 	ldw	fp,0(sp)
1010f57c:	dec00104 	addi	sp,sp,4
1010f580:	f800283a 	ret

1010f584 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1010f584:	defffd04 	addi	sp,sp,-12
1010f588:	dfc00215 	stw	ra,8(sp)
1010f58c:	df000115 	stw	fp,4(sp)
1010f590:	df000104 	addi	fp,sp,4
1010f594:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1010f598:	e13fff17 	ldw	r4,-4(fp)
1010f59c:	01107fc0 	call	101107fc <alt_busy_sleep>
}
1010f5a0:	e037883a 	mov	sp,fp
1010f5a4:	dfc00117 	ldw	ra,4(sp)
1010f5a8:	df000017 	ldw	fp,0(sp)
1010f5ac:	dec00204 	addi	sp,sp,8
1010f5b0:	f800283a 	ret

1010f5b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f5b4:	defffe04 	addi	sp,sp,-8
1010f5b8:	dfc00115 	stw	ra,4(sp)
1010f5bc:	df000015 	stw	fp,0(sp)
1010f5c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f5c4:	00840474 	movhi	r2,4113
1010f5c8:	108e1a04 	addi	r2,r2,14440
1010f5cc:	10800017 	ldw	r2,0(r2)
1010f5d0:	10000526 	beq	r2,zero,1010f5e8 <alt_get_errno+0x34>
1010f5d4:	00840474 	movhi	r2,4113
1010f5d8:	108e1a04 	addi	r2,r2,14440
1010f5dc:	10800017 	ldw	r2,0(r2)
1010f5e0:	103ee83a 	callr	r2
1010f5e4:	00000206 	br	1010f5f0 <alt_get_errno+0x3c>
1010f5e8:	00840474 	movhi	r2,4113
1010f5ec:	10950804 	addi	r2,r2,21536
}
1010f5f0:	e037883a 	mov	sp,fp
1010f5f4:	dfc00117 	ldw	ra,4(sp)
1010f5f8:	df000017 	ldw	fp,0(sp)
1010f5fc:	dec00204 	addi	sp,sp,8
1010f600:	f800283a 	ret

1010f604 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010f604:	defff904 	addi	sp,sp,-28
1010f608:	dfc00615 	stw	ra,24(sp)
1010f60c:	df000515 	stw	fp,20(sp)
1010f610:	df000504 	addi	fp,sp,20
1010f614:	e13ffd15 	stw	r4,-12(fp)
1010f618:	e17ffe15 	stw	r5,-8(fp)
1010f61c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f620:	e0bffd17 	ldw	r2,-12(fp)
1010f624:	10000616 	blt	r2,zero,1010f640 <write+0x3c>
1010f628:	e0bffd17 	ldw	r2,-12(fp)
1010f62c:	10c00324 	muli	r3,r2,12
1010f630:	00840474 	movhi	r2,4113
1010f634:	10898d04 	addi	r2,r2,9780
1010f638:	1885883a 	add	r2,r3,r2
1010f63c:	00000106 	br	1010f644 <write+0x40>
1010f640:	0005883a 	mov	r2,zero
1010f644:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f648:	e0bffb17 	ldw	r2,-20(fp)
1010f64c:	10002126 	beq	r2,zero,1010f6d4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010f650:	e0bffb17 	ldw	r2,-20(fp)
1010f654:	10800217 	ldw	r2,8(r2)
1010f658:	108000cc 	andi	r2,r2,3
1010f65c:	10001826 	beq	r2,zero,1010f6c0 <write+0xbc>
1010f660:	e0bffb17 	ldw	r2,-20(fp)
1010f664:	10800017 	ldw	r2,0(r2)
1010f668:	10800617 	ldw	r2,24(r2)
1010f66c:	10001426 	beq	r2,zero,1010f6c0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010f670:	e0bffb17 	ldw	r2,-20(fp)
1010f674:	10800017 	ldw	r2,0(r2)
1010f678:	10800617 	ldw	r2,24(r2)
1010f67c:	e0ffff17 	ldw	r3,-4(fp)
1010f680:	180d883a 	mov	r6,r3
1010f684:	e17ffe17 	ldw	r5,-8(fp)
1010f688:	e13ffb17 	ldw	r4,-20(fp)
1010f68c:	103ee83a 	callr	r2
1010f690:	e0bffc15 	stw	r2,-16(fp)
1010f694:	e0bffc17 	ldw	r2,-16(fp)
1010f698:	1000070e 	bge	r2,zero,1010f6b8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010f69c:	010f5b40 	call	1010f5b4 <alt_get_errno>
1010f6a0:	1007883a 	mov	r3,r2
1010f6a4:	e0bffc17 	ldw	r2,-16(fp)
1010f6a8:	0085c83a 	sub	r2,zero,r2
1010f6ac:	18800015 	stw	r2,0(r3)
        return -1;
1010f6b0:	00bfffc4 	movi	r2,-1
1010f6b4:	00000c06 	br	1010f6e8 <write+0xe4>
      }
      return rval;
1010f6b8:	e0bffc17 	ldw	r2,-16(fp)
1010f6bc:	00000a06 	br	1010f6e8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010f6c0:	010f5b40 	call	1010f5b4 <alt_get_errno>
1010f6c4:	1007883a 	mov	r3,r2
1010f6c8:	00800344 	movi	r2,13
1010f6cc:	18800015 	stw	r2,0(r3)
1010f6d0:	00000406 	br	1010f6e4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010f6d4:	010f5b40 	call	1010f5b4 <alt_get_errno>
1010f6d8:	1007883a 	mov	r3,r2
1010f6dc:	00801444 	movi	r2,81
1010f6e0:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f6e4:	00bfffc4 	movi	r2,-1
}
1010f6e8:	e037883a 	mov	sp,fp
1010f6ec:	dfc00117 	ldw	ra,4(sp)
1010f6f0:	df000017 	ldw	fp,0(sp)
1010f6f4:	dec00204 	addi	sp,sp,8
1010f6f8:	f800283a 	ret

1010f6fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010f6fc:	defffd04 	addi	sp,sp,-12
1010f700:	dfc00215 	stw	ra,8(sp)
1010f704:	df000115 	stw	fp,4(sp)
1010f708:	df000104 	addi	fp,sp,4
1010f70c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010f710:	01440474 	movhi	r5,4113
1010f714:	294e1704 	addi	r5,r5,14428
1010f718:	e13fff17 	ldw	r4,-4(fp)
1010f71c:	01109ec0 	call	101109ec <alt_dev_llist_insert>
}
1010f720:	e037883a 	mov	sp,fp
1010f724:	dfc00117 	ldw	ra,4(sp)
1010f728:	df000017 	ldw	fp,0(sp)
1010f72c:	dec00204 	addi	sp,sp,8
1010f730:	f800283a 	ret

1010f734 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010f734:	defffd04 	addi	sp,sp,-12
1010f738:	dfc00215 	stw	ra,8(sp)
1010f73c:	df000115 	stw	fp,4(sp)
1010f740:	df000104 	addi	fp,sp,4
1010f744:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010f748:	01114140 	call	10111414 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010f74c:	00800044 	movi	r2,1
1010f750:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010f754:	0001883a 	nop
1010f758:	e037883a 	mov	sp,fp
1010f75c:	dfc00117 	ldw	ra,4(sp)
1010f760:	df000017 	ldw	fp,0(sp)
1010f764:	dec00204 	addi	sp,sp,8
1010f768:	f800283a 	ret

1010f76c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010f76c:	defffe04 	addi	sp,sp,-8
1010f770:	dfc00115 	stw	ra,4(sp)
1010f774:	df000015 	stw	fp,0(sp)
1010f778:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010f77c:	000d883a 	mov	r6,zero
1010f780:	000b883a 	mov	r5,zero
1010f784:	01040474 	movhi	r4,4113
1010f788:	2109f704 	addi	r4,r4,10204
1010f78c:	010f9240 	call	1010f924 <altera_avalon_jtag_uart_init>
1010f790:	01040474 	movhi	r4,4113
1010f794:	2109ed04 	addi	r4,r4,10164
1010f798:	010f6fc0 	call	1010f6fc <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010f79c:	01040474 	movhi	r4,4113
1010f7a0:	210e0504 	addi	r4,r4,14356
1010f7a4:	0110cf40 	call	10110cf4 <alt_fs_reg>
}
1010f7a8:	0001883a 	nop
1010f7ac:	e037883a 	mov	sp,fp
1010f7b0:	dfc00117 	ldw	ra,4(sp)
1010f7b4:	df000017 	ldw	fp,0(sp)
1010f7b8:	dec00204 	addi	sp,sp,8
1010f7bc:	f800283a 	ret

1010f7c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f7c0:	defffa04 	addi	sp,sp,-24
1010f7c4:	dfc00515 	stw	ra,20(sp)
1010f7c8:	df000415 	stw	fp,16(sp)
1010f7cc:	df000404 	addi	fp,sp,16
1010f7d0:	e13ffd15 	stw	r4,-12(fp)
1010f7d4:	e17ffe15 	stw	r5,-8(fp)
1010f7d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f7dc:	e0bffd17 	ldw	r2,-12(fp)
1010f7e0:	10800017 	ldw	r2,0(r2)
1010f7e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f7e8:	e0bffc17 	ldw	r2,-16(fp)
1010f7ec:	10c00a04 	addi	r3,r2,40
1010f7f0:	e0bffd17 	ldw	r2,-12(fp)
1010f7f4:	10800217 	ldw	r2,8(r2)
1010f7f8:	100f883a 	mov	r7,r2
1010f7fc:	e1bfff17 	ldw	r6,-4(fp)
1010f800:	e17ffe17 	ldw	r5,-8(fp)
1010f804:	1809883a 	mov	r4,r3
1010f808:	010fdf80 	call	1010fdf8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f80c:	e037883a 	mov	sp,fp
1010f810:	dfc00117 	ldw	ra,4(sp)
1010f814:	df000017 	ldw	fp,0(sp)
1010f818:	dec00204 	addi	sp,sp,8
1010f81c:	f800283a 	ret

1010f820 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f820:	defffa04 	addi	sp,sp,-24
1010f824:	dfc00515 	stw	ra,20(sp)
1010f828:	df000415 	stw	fp,16(sp)
1010f82c:	df000404 	addi	fp,sp,16
1010f830:	e13ffd15 	stw	r4,-12(fp)
1010f834:	e17ffe15 	stw	r5,-8(fp)
1010f838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f83c:	e0bffd17 	ldw	r2,-12(fp)
1010f840:	10800017 	ldw	r2,0(r2)
1010f844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f848:	e0bffc17 	ldw	r2,-16(fp)
1010f84c:	10c00a04 	addi	r3,r2,40
1010f850:	e0bffd17 	ldw	r2,-12(fp)
1010f854:	10800217 	ldw	r2,8(r2)
1010f858:	100f883a 	mov	r7,r2
1010f85c:	e1bfff17 	ldw	r6,-4(fp)
1010f860:	e17ffe17 	ldw	r5,-8(fp)
1010f864:	1809883a 	mov	r4,r3
1010f868:	01100140 	call	10110014 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f86c:	e037883a 	mov	sp,fp
1010f870:	dfc00117 	ldw	ra,4(sp)
1010f874:	df000017 	ldw	fp,0(sp)
1010f878:	dec00204 	addi	sp,sp,8
1010f87c:	f800283a 	ret

1010f880 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f880:	defffc04 	addi	sp,sp,-16
1010f884:	dfc00315 	stw	ra,12(sp)
1010f888:	df000215 	stw	fp,8(sp)
1010f88c:	df000204 	addi	fp,sp,8
1010f890:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f894:	e0bfff17 	ldw	r2,-4(fp)
1010f898:	10800017 	ldw	r2,0(r2)
1010f89c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f8a0:	e0bffe17 	ldw	r2,-8(fp)
1010f8a4:	10c00a04 	addi	r3,r2,40
1010f8a8:	e0bfff17 	ldw	r2,-4(fp)
1010f8ac:	10800217 	ldw	r2,8(r2)
1010f8b0:	100b883a 	mov	r5,r2
1010f8b4:	1809883a 	mov	r4,r3
1010f8b8:	010fca00 	call	1010fca0 <altera_avalon_jtag_uart_close>
}
1010f8bc:	e037883a 	mov	sp,fp
1010f8c0:	dfc00117 	ldw	ra,4(sp)
1010f8c4:	df000017 	ldw	fp,0(sp)
1010f8c8:	dec00204 	addi	sp,sp,8
1010f8cc:	f800283a 	ret

1010f8d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f8d0:	defffa04 	addi	sp,sp,-24
1010f8d4:	dfc00515 	stw	ra,20(sp)
1010f8d8:	df000415 	stw	fp,16(sp)
1010f8dc:	df000404 	addi	fp,sp,16
1010f8e0:	e13ffd15 	stw	r4,-12(fp)
1010f8e4:	e17ffe15 	stw	r5,-8(fp)
1010f8e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f8ec:	e0bffd17 	ldw	r2,-12(fp)
1010f8f0:	10800017 	ldw	r2,0(r2)
1010f8f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f8f8:	e0bffc17 	ldw	r2,-16(fp)
1010f8fc:	10800a04 	addi	r2,r2,40
1010f900:	e1bfff17 	ldw	r6,-4(fp)
1010f904:	e17ffe17 	ldw	r5,-8(fp)
1010f908:	1009883a 	mov	r4,r2
1010f90c:	010fd080 	call	1010fd08 <altera_avalon_jtag_uart_ioctl>
}
1010f910:	e037883a 	mov	sp,fp
1010f914:	dfc00117 	ldw	ra,4(sp)
1010f918:	df000017 	ldw	fp,0(sp)
1010f91c:	dec00204 	addi	sp,sp,8
1010f920:	f800283a 	ret

1010f924 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f924:	defffa04 	addi	sp,sp,-24
1010f928:	dfc00515 	stw	ra,20(sp)
1010f92c:	df000415 	stw	fp,16(sp)
1010f930:	df000404 	addi	fp,sp,16
1010f934:	e13ffd15 	stw	r4,-12(fp)
1010f938:	e17ffe15 	stw	r5,-8(fp)
1010f93c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f940:	e0bffd17 	ldw	r2,-12(fp)
1010f944:	00c00044 	movi	r3,1
1010f948:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f94c:	e0bffd17 	ldw	r2,-12(fp)
1010f950:	10800017 	ldw	r2,0(r2)
1010f954:	10800104 	addi	r2,r2,4
1010f958:	1007883a 	mov	r3,r2
1010f95c:	e0bffd17 	ldw	r2,-12(fp)
1010f960:	10800817 	ldw	r2,32(r2)
1010f964:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f968:	e0bffe17 	ldw	r2,-8(fp)
1010f96c:	e0ffff17 	ldw	r3,-4(fp)
1010f970:	d8000015 	stw	zero,0(sp)
1010f974:	e1fffd17 	ldw	r7,-12(fp)
1010f978:	01840474 	movhi	r6,4113
1010f97c:	31be7b04 	addi	r6,r6,-1556
1010f980:	180b883a 	mov	r5,r3
1010f984:	1009883a 	mov	r4,r2
1010f988:	0110e600 	call	10110e60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f98c:	e0bffd17 	ldw	r2,-12(fp)
1010f990:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f994:	e0bffd17 	ldw	r2,-12(fp)
1010f998:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f99c:	00840474 	movhi	r2,4113
1010f9a0:	10951304 	addi	r2,r2,21580
1010f9a4:	10800017 	ldw	r2,0(r2)
1010f9a8:	e1fffd17 	ldw	r7,-12(fp)
1010f9ac:	01840474 	movhi	r6,4113
1010f9b0:	31befe04 	addi	r6,r6,-1032
1010f9b4:	100b883a 	mov	r5,r2
1010f9b8:	1809883a 	mov	r4,r3
1010f9bc:	01106bc0 	call	101106bc <alt_alarm_start>
1010f9c0:	1000040e 	bge	r2,zero,1010f9d4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f9c4:	e0fffd17 	ldw	r3,-12(fp)
1010f9c8:	00a00034 	movhi	r2,32768
1010f9cc:	10bfffc4 	addi	r2,r2,-1
1010f9d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f9d4:	0001883a 	nop
1010f9d8:	e037883a 	mov	sp,fp
1010f9dc:	dfc00117 	ldw	ra,4(sp)
1010f9e0:	df000017 	ldw	fp,0(sp)
1010f9e4:	dec00204 	addi	sp,sp,8
1010f9e8:	f800283a 	ret

1010f9ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f9ec:	defff804 	addi	sp,sp,-32
1010f9f0:	df000715 	stw	fp,28(sp)
1010f9f4:	df000704 	addi	fp,sp,28
1010f9f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f9fc:	e0bfff17 	ldw	r2,-4(fp)
1010fa00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010fa04:	e0bffb17 	ldw	r2,-20(fp)
1010fa08:	10800017 	ldw	r2,0(r2)
1010fa0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010fa10:	e0bffc17 	ldw	r2,-16(fp)
1010fa14:	10800104 	addi	r2,r2,4
1010fa18:	10800037 	ldwio	r2,0(r2)
1010fa1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010fa20:	e0bffd17 	ldw	r2,-12(fp)
1010fa24:	1080c00c 	andi	r2,r2,768
1010fa28:	10006d26 	beq	r2,zero,1010fbe0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010fa2c:	e0bffd17 	ldw	r2,-12(fp)
1010fa30:	1080400c 	andi	r2,r2,256
1010fa34:	10003526 	beq	r2,zero,1010fb0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010fa38:	00800074 	movhi	r2,1
1010fa3c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fa40:	e0bffb17 	ldw	r2,-20(fp)
1010fa44:	10800a17 	ldw	r2,40(r2)
1010fa48:	10800044 	addi	r2,r2,1
1010fa4c:	1081ffcc 	andi	r2,r2,2047
1010fa50:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010fa54:	e0bffb17 	ldw	r2,-20(fp)
1010fa58:	10c00b17 	ldw	r3,44(r2)
1010fa5c:	e0bffe17 	ldw	r2,-8(fp)
1010fa60:	18801526 	beq	r3,r2,1010fab8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010fa64:	e0bffc17 	ldw	r2,-16(fp)
1010fa68:	10800037 	ldwio	r2,0(r2)
1010fa6c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010fa70:	e0bff917 	ldw	r2,-28(fp)
1010fa74:	10a0000c 	andi	r2,r2,32768
1010fa78:	10001126 	beq	r2,zero,1010fac0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010fa7c:	e0bffb17 	ldw	r2,-20(fp)
1010fa80:	10800a17 	ldw	r2,40(r2)
1010fa84:	e0fff917 	ldw	r3,-28(fp)
1010fa88:	1809883a 	mov	r4,r3
1010fa8c:	e0fffb17 	ldw	r3,-20(fp)
1010fa90:	1885883a 	add	r2,r3,r2
1010fa94:	10800e04 	addi	r2,r2,56
1010fa98:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fa9c:	e0bffb17 	ldw	r2,-20(fp)
1010faa0:	10800a17 	ldw	r2,40(r2)
1010faa4:	10800044 	addi	r2,r2,1
1010faa8:	10c1ffcc 	andi	r3,r2,2047
1010faac:	e0bffb17 	ldw	r2,-20(fp)
1010fab0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010fab4:	003fe206 	br	1010fa40 <__alt_data_end+0xfffefa40>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010fab8:	0001883a 	nop
1010fabc:	00000106 	br	1010fac4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010fac0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010fac4:	e0bff917 	ldw	r2,-28(fp)
1010fac8:	10bfffec 	andhi	r2,r2,65535
1010facc:	10000f26 	beq	r2,zero,1010fb0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010fad0:	e0bffb17 	ldw	r2,-20(fp)
1010fad4:	10c00817 	ldw	r3,32(r2)
1010fad8:	00bfff84 	movi	r2,-2
1010fadc:	1886703a 	and	r3,r3,r2
1010fae0:	e0bffb17 	ldw	r2,-20(fp)
1010fae4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010fae8:	e0bffc17 	ldw	r2,-16(fp)
1010faec:	10800104 	addi	r2,r2,4
1010faf0:	1007883a 	mov	r3,r2
1010faf4:	e0bffb17 	ldw	r2,-20(fp)
1010faf8:	10800817 	ldw	r2,32(r2)
1010fafc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010fb00:	e0bffc17 	ldw	r2,-16(fp)
1010fb04:	10800104 	addi	r2,r2,4
1010fb08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010fb0c:	e0bffd17 	ldw	r2,-12(fp)
1010fb10:	1080800c 	andi	r2,r2,512
1010fb14:	103fbe26 	beq	r2,zero,1010fa10 <__alt_data_end+0xfffefa10>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010fb18:	e0bffd17 	ldw	r2,-12(fp)
1010fb1c:	1004d43a 	srli	r2,r2,16
1010fb20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010fb24:	00001406 	br	1010fb78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010fb28:	e0bffc17 	ldw	r2,-16(fp)
1010fb2c:	e0fffb17 	ldw	r3,-20(fp)
1010fb30:	18c00d17 	ldw	r3,52(r3)
1010fb34:	e13ffb17 	ldw	r4,-20(fp)
1010fb38:	20c7883a 	add	r3,r4,r3
1010fb3c:	18c20e04 	addi	r3,r3,2104
1010fb40:	18c00003 	ldbu	r3,0(r3)
1010fb44:	18c03fcc 	andi	r3,r3,255
1010fb48:	18c0201c 	xori	r3,r3,128
1010fb4c:	18ffe004 	addi	r3,r3,-128
1010fb50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fb54:	e0bffb17 	ldw	r2,-20(fp)
1010fb58:	10800d17 	ldw	r2,52(r2)
1010fb5c:	10800044 	addi	r2,r2,1
1010fb60:	10c1ffcc 	andi	r3,r2,2047
1010fb64:	e0bffb17 	ldw	r2,-20(fp)
1010fb68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010fb6c:	e0bffa17 	ldw	r2,-24(fp)
1010fb70:	10bfffc4 	addi	r2,r2,-1
1010fb74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010fb78:	e0bffa17 	ldw	r2,-24(fp)
1010fb7c:	10000526 	beq	r2,zero,1010fb94 <altera_avalon_jtag_uart_irq+0x1a8>
1010fb80:	e0bffb17 	ldw	r2,-20(fp)
1010fb84:	10c00d17 	ldw	r3,52(r2)
1010fb88:	e0bffb17 	ldw	r2,-20(fp)
1010fb8c:	10800c17 	ldw	r2,48(r2)
1010fb90:	18bfe51e 	bne	r3,r2,1010fb28 <__alt_data_end+0xfffefb28>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010fb94:	e0bffa17 	ldw	r2,-24(fp)
1010fb98:	103f9d26 	beq	r2,zero,1010fa10 <__alt_data_end+0xfffefa10>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010fb9c:	e0bffb17 	ldw	r2,-20(fp)
1010fba0:	10c00817 	ldw	r3,32(r2)
1010fba4:	00bfff44 	movi	r2,-3
1010fba8:	1886703a 	and	r3,r3,r2
1010fbac:	e0bffb17 	ldw	r2,-20(fp)
1010fbb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fbb4:	e0bffb17 	ldw	r2,-20(fp)
1010fbb8:	10800017 	ldw	r2,0(r2)
1010fbbc:	10800104 	addi	r2,r2,4
1010fbc0:	1007883a 	mov	r3,r2
1010fbc4:	e0bffb17 	ldw	r2,-20(fp)
1010fbc8:	10800817 	ldw	r2,32(r2)
1010fbcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010fbd0:	e0bffc17 	ldw	r2,-16(fp)
1010fbd4:	10800104 	addi	r2,r2,4
1010fbd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010fbdc:	003f8c06 	br	1010fa10 <__alt_data_end+0xfffefa10>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010fbe0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010fbe4:	0001883a 	nop
1010fbe8:	e037883a 	mov	sp,fp
1010fbec:	df000017 	ldw	fp,0(sp)
1010fbf0:	dec00104 	addi	sp,sp,4
1010fbf4:	f800283a 	ret

1010fbf8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010fbf8:	defff804 	addi	sp,sp,-32
1010fbfc:	df000715 	stw	fp,28(sp)
1010fc00:	df000704 	addi	fp,sp,28
1010fc04:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010fc08:	e0bffb17 	ldw	r2,-20(fp)
1010fc0c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010fc10:	e0bff917 	ldw	r2,-28(fp)
1010fc14:	10800017 	ldw	r2,0(r2)
1010fc18:	10800104 	addi	r2,r2,4
1010fc1c:	10800037 	ldwio	r2,0(r2)
1010fc20:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010fc24:	e0bffa17 	ldw	r2,-24(fp)
1010fc28:	1081000c 	andi	r2,r2,1024
1010fc2c:	10000b26 	beq	r2,zero,1010fc5c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010fc30:	e0bff917 	ldw	r2,-28(fp)
1010fc34:	10800017 	ldw	r2,0(r2)
1010fc38:	10800104 	addi	r2,r2,4
1010fc3c:	1007883a 	mov	r3,r2
1010fc40:	e0bff917 	ldw	r2,-28(fp)
1010fc44:	10800817 	ldw	r2,32(r2)
1010fc48:	10810014 	ori	r2,r2,1024
1010fc4c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010fc50:	e0bff917 	ldw	r2,-28(fp)
1010fc54:	10000915 	stw	zero,36(r2)
1010fc58:	00000a06 	br	1010fc84 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010fc5c:	e0bff917 	ldw	r2,-28(fp)
1010fc60:	10c00917 	ldw	r3,36(r2)
1010fc64:	00a00034 	movhi	r2,32768
1010fc68:	10bfff04 	addi	r2,r2,-4
1010fc6c:	10c00536 	bltu	r2,r3,1010fc84 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010fc70:	e0bff917 	ldw	r2,-28(fp)
1010fc74:	10800917 	ldw	r2,36(r2)
1010fc78:	10c00044 	addi	r3,r2,1
1010fc7c:	e0bff917 	ldw	r2,-28(fp)
1010fc80:	10c00915 	stw	r3,36(r2)
1010fc84:	00840474 	movhi	r2,4113
1010fc88:	10951304 	addi	r2,r2,21580
1010fc8c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010fc90:	e037883a 	mov	sp,fp
1010fc94:	df000017 	ldw	fp,0(sp)
1010fc98:	dec00104 	addi	sp,sp,4
1010fc9c:	f800283a 	ret

1010fca0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010fca0:	defffd04 	addi	sp,sp,-12
1010fca4:	df000215 	stw	fp,8(sp)
1010fca8:	df000204 	addi	fp,sp,8
1010fcac:	e13ffe15 	stw	r4,-8(fp)
1010fcb0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010fcb4:	00000506 	br	1010fccc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010fcb8:	e0bfff17 	ldw	r2,-4(fp)
1010fcbc:	1090000c 	andi	r2,r2,16384
1010fcc0:	10000226 	beq	r2,zero,1010fccc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010fcc4:	00bffd44 	movi	r2,-11
1010fcc8:	00000b06 	br	1010fcf8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010fccc:	e0bffe17 	ldw	r2,-8(fp)
1010fcd0:	10c00d17 	ldw	r3,52(r2)
1010fcd4:	e0bffe17 	ldw	r2,-8(fp)
1010fcd8:	10800c17 	ldw	r2,48(r2)
1010fcdc:	18800526 	beq	r3,r2,1010fcf4 <altera_avalon_jtag_uart_close+0x54>
1010fce0:	e0bffe17 	ldw	r2,-8(fp)
1010fce4:	10c00917 	ldw	r3,36(r2)
1010fce8:	e0bffe17 	ldw	r2,-8(fp)
1010fcec:	10800117 	ldw	r2,4(r2)
1010fcf0:	18bff136 	bltu	r3,r2,1010fcb8 <__alt_data_end+0xfffefcb8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010fcf4:	0005883a 	mov	r2,zero
}
1010fcf8:	e037883a 	mov	sp,fp
1010fcfc:	df000017 	ldw	fp,0(sp)
1010fd00:	dec00104 	addi	sp,sp,4
1010fd04:	f800283a 	ret

1010fd08 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010fd08:	defffa04 	addi	sp,sp,-24
1010fd0c:	df000515 	stw	fp,20(sp)
1010fd10:	df000504 	addi	fp,sp,20
1010fd14:	e13ffd15 	stw	r4,-12(fp)
1010fd18:	e17ffe15 	stw	r5,-8(fp)
1010fd1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010fd20:	00bff9c4 	movi	r2,-25
1010fd24:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010fd28:	e0bffe17 	ldw	r2,-8(fp)
1010fd2c:	10da8060 	cmpeqi	r3,r2,27137
1010fd30:	1800031e 	bne	r3,zero,1010fd40 <altera_avalon_jtag_uart_ioctl+0x38>
1010fd34:	109a80a0 	cmpeqi	r2,r2,27138
1010fd38:	1000181e 	bne	r2,zero,1010fd9c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010fd3c:	00002906 	br	1010fde4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010fd40:	e0bffd17 	ldw	r2,-12(fp)
1010fd44:	10c00117 	ldw	r3,4(r2)
1010fd48:	00a00034 	movhi	r2,32768
1010fd4c:	10bfffc4 	addi	r2,r2,-1
1010fd50:	18802126 	beq	r3,r2,1010fdd8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010fd54:	e0bfff17 	ldw	r2,-4(fp)
1010fd58:	10800017 	ldw	r2,0(r2)
1010fd5c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010fd60:	e0bffc17 	ldw	r2,-16(fp)
1010fd64:	10800090 	cmplti	r2,r2,2
1010fd68:	1000061e 	bne	r2,zero,1010fd84 <altera_avalon_jtag_uart_ioctl+0x7c>
1010fd6c:	e0fffc17 	ldw	r3,-16(fp)
1010fd70:	00a00034 	movhi	r2,32768
1010fd74:	10bfffc4 	addi	r2,r2,-1
1010fd78:	18800226 	beq	r3,r2,1010fd84 <altera_avalon_jtag_uart_ioctl+0x7c>
1010fd7c:	e0bffc17 	ldw	r2,-16(fp)
1010fd80:	00000206 	br	1010fd8c <altera_avalon_jtag_uart_ioctl+0x84>
1010fd84:	00a00034 	movhi	r2,32768
1010fd88:	10bfff84 	addi	r2,r2,-2
1010fd8c:	e0fffd17 	ldw	r3,-12(fp)
1010fd90:	18800115 	stw	r2,4(r3)
      rc = 0;
1010fd94:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010fd98:	00000f06 	br	1010fdd8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010fd9c:	e0bffd17 	ldw	r2,-12(fp)
1010fda0:	10c00117 	ldw	r3,4(r2)
1010fda4:	00a00034 	movhi	r2,32768
1010fda8:	10bfffc4 	addi	r2,r2,-1
1010fdac:	18800c26 	beq	r3,r2,1010fde0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010fdb0:	e0bffd17 	ldw	r2,-12(fp)
1010fdb4:	10c00917 	ldw	r3,36(r2)
1010fdb8:	e0bffd17 	ldw	r2,-12(fp)
1010fdbc:	10800117 	ldw	r2,4(r2)
1010fdc0:	1885803a 	cmpltu	r2,r3,r2
1010fdc4:	10c03fcc 	andi	r3,r2,255
1010fdc8:	e0bfff17 	ldw	r2,-4(fp)
1010fdcc:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010fdd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010fdd4:	00000206 	br	1010fde0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010fdd8:	0001883a 	nop
1010fddc:	00000106 	br	1010fde4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010fde0:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010fde4:	e0bffb17 	ldw	r2,-20(fp)
}
1010fde8:	e037883a 	mov	sp,fp
1010fdec:	df000017 	ldw	fp,0(sp)
1010fdf0:	dec00104 	addi	sp,sp,4
1010fdf4:	f800283a 	ret

1010fdf8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010fdf8:	defff304 	addi	sp,sp,-52
1010fdfc:	dfc00c15 	stw	ra,48(sp)
1010fe00:	df000b15 	stw	fp,44(sp)
1010fe04:	df000b04 	addi	fp,sp,44
1010fe08:	e13ffc15 	stw	r4,-16(fp)
1010fe0c:	e17ffd15 	stw	r5,-12(fp)
1010fe10:	e1bffe15 	stw	r6,-8(fp)
1010fe14:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010fe18:	e0bffd17 	ldw	r2,-12(fp)
1010fe1c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010fe20:	00004706 	br	1010ff40 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010fe24:	e0bffc17 	ldw	r2,-16(fp)
1010fe28:	10800a17 	ldw	r2,40(r2)
1010fe2c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010fe30:	e0bffc17 	ldw	r2,-16(fp)
1010fe34:	10800b17 	ldw	r2,44(r2)
1010fe38:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010fe3c:	e0fff717 	ldw	r3,-36(fp)
1010fe40:	e0bff817 	ldw	r2,-32(fp)
1010fe44:	18800536 	bltu	r3,r2,1010fe5c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010fe48:	e0fff717 	ldw	r3,-36(fp)
1010fe4c:	e0bff817 	ldw	r2,-32(fp)
1010fe50:	1885c83a 	sub	r2,r3,r2
1010fe54:	e0bff615 	stw	r2,-40(fp)
1010fe58:	00000406 	br	1010fe6c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010fe5c:	00c20004 	movi	r3,2048
1010fe60:	e0bff817 	ldw	r2,-32(fp)
1010fe64:	1885c83a 	sub	r2,r3,r2
1010fe68:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010fe6c:	e0bff617 	ldw	r2,-40(fp)
1010fe70:	10001e26 	beq	r2,zero,1010feec <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010fe74:	e0fffe17 	ldw	r3,-8(fp)
1010fe78:	e0bff617 	ldw	r2,-40(fp)
1010fe7c:	1880022e 	bgeu	r3,r2,1010fe88 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010fe80:	e0bffe17 	ldw	r2,-8(fp)
1010fe84:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010fe88:	e0bffc17 	ldw	r2,-16(fp)
1010fe8c:	10c00e04 	addi	r3,r2,56
1010fe90:	e0bff817 	ldw	r2,-32(fp)
1010fe94:	1885883a 	add	r2,r3,r2
1010fe98:	e1bff617 	ldw	r6,-40(fp)
1010fe9c:	100b883a 	mov	r5,r2
1010fea0:	e13ff517 	ldw	r4,-44(fp)
1010fea4:	010837c0 	call	1010837c <memcpy>
      ptr   += n;
1010fea8:	e0fff517 	ldw	r3,-44(fp)
1010feac:	e0bff617 	ldw	r2,-40(fp)
1010feb0:	1885883a 	add	r2,r3,r2
1010feb4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010feb8:	e0fffe17 	ldw	r3,-8(fp)
1010febc:	e0bff617 	ldw	r2,-40(fp)
1010fec0:	1885c83a 	sub	r2,r3,r2
1010fec4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fec8:	e0fff817 	ldw	r3,-32(fp)
1010fecc:	e0bff617 	ldw	r2,-40(fp)
1010fed0:	1885883a 	add	r2,r3,r2
1010fed4:	10c1ffcc 	andi	r3,r2,2047
1010fed8:	e0bffc17 	ldw	r2,-16(fp)
1010fedc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010fee0:	e0bffe17 	ldw	r2,-8(fp)
1010fee4:	00bfcf16 	blt	zero,r2,1010fe24 <__alt_data_end+0xfffefe24>
1010fee8:	00000106 	br	1010fef0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010feec:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010fef0:	e0fff517 	ldw	r3,-44(fp)
1010fef4:	e0bffd17 	ldw	r2,-12(fp)
1010fef8:	1880141e 	bne	r3,r2,1010ff4c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010fefc:	e0bfff17 	ldw	r2,-4(fp)
1010ff00:	1090000c 	andi	r2,r2,16384
1010ff04:	1000131e 	bne	r2,zero,1010ff54 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010ff08:	0001883a 	nop
1010ff0c:	e0bffc17 	ldw	r2,-16(fp)
1010ff10:	10c00a17 	ldw	r3,40(r2)
1010ff14:	e0bff717 	ldw	r2,-36(fp)
1010ff18:	1880051e 	bne	r3,r2,1010ff30 <altera_avalon_jtag_uart_read+0x138>
1010ff1c:	e0bffc17 	ldw	r2,-16(fp)
1010ff20:	10c00917 	ldw	r3,36(r2)
1010ff24:	e0bffc17 	ldw	r2,-16(fp)
1010ff28:	10800117 	ldw	r2,4(r2)
1010ff2c:	18bff736 	bltu	r3,r2,1010ff0c <__alt_data_end+0xfffeff0c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010ff30:	e0bffc17 	ldw	r2,-16(fp)
1010ff34:	10c00a17 	ldw	r3,40(r2)
1010ff38:	e0bff717 	ldw	r2,-36(fp)
1010ff3c:	18800726 	beq	r3,r2,1010ff5c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010ff40:	e0bffe17 	ldw	r2,-8(fp)
1010ff44:	00bfb716 	blt	zero,r2,1010fe24 <__alt_data_end+0xfffefe24>
1010ff48:	00000506 	br	1010ff60 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010ff4c:	0001883a 	nop
1010ff50:	00000306 	br	1010ff60 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010ff54:	0001883a 	nop
1010ff58:	00000106 	br	1010ff60 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010ff5c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010ff60:	e0fff517 	ldw	r3,-44(fp)
1010ff64:	e0bffd17 	ldw	r2,-12(fp)
1010ff68:	18801826 	beq	r3,r2,1010ffcc <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ff6c:	0005303a 	rdctl	r2,status
1010ff70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ff74:	e0fffb17 	ldw	r3,-20(fp)
1010ff78:	00bfff84 	movi	r2,-2
1010ff7c:	1884703a 	and	r2,r3,r2
1010ff80:	1001703a 	wrctl	status,r2
  
  return context;
1010ff84:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010ff88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010ff8c:	e0bffc17 	ldw	r2,-16(fp)
1010ff90:	10800817 	ldw	r2,32(r2)
1010ff94:	10c00054 	ori	r3,r2,1
1010ff98:	e0bffc17 	ldw	r2,-16(fp)
1010ff9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010ffa0:	e0bffc17 	ldw	r2,-16(fp)
1010ffa4:	10800017 	ldw	r2,0(r2)
1010ffa8:	10800104 	addi	r2,r2,4
1010ffac:	1007883a 	mov	r3,r2
1010ffb0:	e0bffc17 	ldw	r2,-16(fp)
1010ffb4:	10800817 	ldw	r2,32(r2)
1010ffb8:	18800035 	stwio	r2,0(r3)
1010ffbc:	e0bffa17 	ldw	r2,-24(fp)
1010ffc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ffc4:	e0bff917 	ldw	r2,-28(fp)
1010ffc8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010ffcc:	e0fff517 	ldw	r3,-44(fp)
1010ffd0:	e0bffd17 	ldw	r2,-12(fp)
1010ffd4:	18800426 	beq	r3,r2,1010ffe8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010ffd8:	e0fff517 	ldw	r3,-44(fp)
1010ffdc:	e0bffd17 	ldw	r2,-12(fp)
1010ffe0:	1885c83a 	sub	r2,r3,r2
1010ffe4:	00000606 	br	10110000 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010ffe8:	e0bfff17 	ldw	r2,-4(fp)
1010ffec:	1090000c 	andi	r2,r2,16384
1010fff0:	10000226 	beq	r2,zero,1010fffc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010fff4:	00bffd44 	movi	r2,-11
1010fff8:	00000106 	br	10110000 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010fffc:	00bffec4 	movi	r2,-5
}
10110000:	e037883a 	mov	sp,fp
10110004:	dfc00117 	ldw	ra,4(sp)
10110008:	df000017 	ldw	fp,0(sp)
1011000c:	dec00204 	addi	sp,sp,8
10110010:	f800283a 	ret

10110014 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10110014:	defff304 	addi	sp,sp,-52
10110018:	dfc00c15 	stw	ra,48(sp)
1011001c:	df000b15 	stw	fp,44(sp)
10110020:	df000b04 	addi	fp,sp,44
10110024:	e13ffc15 	stw	r4,-16(fp)
10110028:	e17ffd15 	stw	r5,-12(fp)
1011002c:	e1bffe15 	stw	r6,-8(fp)
10110030:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10110034:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10110038:	e0bffd17 	ldw	r2,-12(fp)
1011003c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10110040:	00003706 	br	10110120 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10110044:	e0bffc17 	ldw	r2,-16(fp)
10110048:	10800c17 	ldw	r2,48(r2)
1011004c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10110050:	e0bffc17 	ldw	r2,-16(fp)
10110054:	10800d17 	ldw	r2,52(r2)
10110058:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1011005c:	e0fff917 	ldw	r3,-28(fp)
10110060:	e0bff517 	ldw	r2,-44(fp)
10110064:	1880062e 	bgeu	r3,r2,10110080 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10110068:	e0fff517 	ldw	r3,-44(fp)
1011006c:	e0bff917 	ldw	r2,-28(fp)
10110070:	1885c83a 	sub	r2,r3,r2
10110074:	10bfffc4 	addi	r2,r2,-1
10110078:	e0bff615 	stw	r2,-40(fp)
1011007c:	00000b06 	br	101100ac <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10110080:	e0bff517 	ldw	r2,-44(fp)
10110084:	10000526 	beq	r2,zero,1011009c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10110088:	00c20004 	movi	r3,2048
1011008c:	e0bff917 	ldw	r2,-28(fp)
10110090:	1885c83a 	sub	r2,r3,r2
10110094:	e0bff615 	stw	r2,-40(fp)
10110098:	00000406 	br	101100ac <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1011009c:	00c1ffc4 	movi	r3,2047
101100a0:	e0bff917 	ldw	r2,-28(fp)
101100a4:	1885c83a 	sub	r2,r3,r2
101100a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
101100ac:	e0bff617 	ldw	r2,-40(fp)
101100b0:	10001e26 	beq	r2,zero,1011012c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
101100b4:	e0fffe17 	ldw	r3,-8(fp)
101100b8:	e0bff617 	ldw	r2,-40(fp)
101100bc:	1880022e 	bgeu	r3,r2,101100c8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
101100c0:	e0bffe17 	ldw	r2,-8(fp)
101100c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
101100c8:	e0bffc17 	ldw	r2,-16(fp)
101100cc:	10c20e04 	addi	r3,r2,2104
101100d0:	e0bff917 	ldw	r2,-28(fp)
101100d4:	1885883a 	add	r2,r3,r2
101100d8:	e1bff617 	ldw	r6,-40(fp)
101100dc:	e17ffd17 	ldw	r5,-12(fp)
101100e0:	1009883a 	mov	r4,r2
101100e4:	010837c0 	call	1010837c <memcpy>
      ptr   += n;
101100e8:	e0fffd17 	ldw	r3,-12(fp)
101100ec:	e0bff617 	ldw	r2,-40(fp)
101100f0:	1885883a 	add	r2,r3,r2
101100f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
101100f8:	e0fffe17 	ldw	r3,-8(fp)
101100fc:	e0bff617 	ldw	r2,-40(fp)
10110100:	1885c83a 	sub	r2,r3,r2
10110104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10110108:	e0fff917 	ldw	r3,-28(fp)
1011010c:	e0bff617 	ldw	r2,-40(fp)
10110110:	1885883a 	add	r2,r3,r2
10110114:	10c1ffcc 	andi	r3,r2,2047
10110118:	e0bffc17 	ldw	r2,-16(fp)
1011011c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10110120:	e0bffe17 	ldw	r2,-8(fp)
10110124:	00bfc716 	blt	zero,r2,10110044 <__alt_data_end+0xffff0044>
10110128:	00000106 	br	10110130 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1011012c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110130:	0005303a 	rdctl	r2,status
10110134:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110138:	e0fffb17 	ldw	r3,-20(fp)
1011013c:	00bfff84 	movi	r2,-2
10110140:	1884703a 	and	r2,r3,r2
10110144:	1001703a 	wrctl	status,r2
  
  return context;
10110148:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1011014c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10110150:	e0bffc17 	ldw	r2,-16(fp)
10110154:	10800817 	ldw	r2,32(r2)
10110158:	10c00094 	ori	r3,r2,2
1011015c:	e0bffc17 	ldw	r2,-16(fp)
10110160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10110164:	e0bffc17 	ldw	r2,-16(fp)
10110168:	10800017 	ldw	r2,0(r2)
1011016c:	10800104 	addi	r2,r2,4
10110170:	1007883a 	mov	r3,r2
10110174:	e0bffc17 	ldw	r2,-16(fp)
10110178:	10800817 	ldw	r2,32(r2)
1011017c:	18800035 	stwio	r2,0(r3)
10110180:	e0bffa17 	ldw	r2,-24(fp)
10110184:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110188:	e0bff817 	ldw	r2,-32(fp)
1011018c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10110190:	e0bffe17 	ldw	r2,-8(fp)
10110194:	0080100e 	bge	zero,r2,101101d8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10110198:	e0bfff17 	ldw	r2,-4(fp)
1011019c:	1090000c 	andi	r2,r2,16384
101101a0:	1000101e 	bne	r2,zero,101101e4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
101101a4:	0001883a 	nop
101101a8:	e0bffc17 	ldw	r2,-16(fp)
101101ac:	10c00d17 	ldw	r3,52(r2)
101101b0:	e0bff517 	ldw	r2,-44(fp)
101101b4:	1880051e 	bne	r3,r2,101101cc <altera_avalon_jtag_uart_write+0x1b8>
101101b8:	e0bffc17 	ldw	r2,-16(fp)
101101bc:	10c00917 	ldw	r3,36(r2)
101101c0:	e0bffc17 	ldw	r2,-16(fp)
101101c4:	10800117 	ldw	r2,4(r2)
101101c8:	18bff736 	bltu	r3,r2,101101a8 <__alt_data_end+0xffff01a8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
101101cc:	e0bffc17 	ldw	r2,-16(fp)
101101d0:	10800917 	ldw	r2,36(r2)
101101d4:	1000051e 	bne	r2,zero,101101ec <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
101101d8:	e0bffe17 	ldw	r2,-8(fp)
101101dc:	00bfd016 	blt	zero,r2,10110120 <__alt_data_end+0xffff0120>
101101e0:	00000306 	br	101101f0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
101101e4:	0001883a 	nop
101101e8:	00000106 	br	101101f0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
101101ec:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
101101f0:	e0fffd17 	ldw	r3,-12(fp)
101101f4:	e0bff717 	ldw	r2,-36(fp)
101101f8:	18800426 	beq	r3,r2,1011020c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
101101fc:	e0fffd17 	ldw	r3,-12(fp)
10110200:	e0bff717 	ldw	r2,-36(fp)
10110204:	1885c83a 	sub	r2,r3,r2
10110208:	00000606 	br	10110224 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1011020c:	e0bfff17 	ldw	r2,-4(fp)
10110210:	1090000c 	andi	r2,r2,16384
10110214:	10000226 	beq	r2,zero,10110220 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10110218:	00bffd44 	movi	r2,-11
1011021c:	00000106 	br	10110224 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10110220:	00bffec4 	movi	r2,-5
}
10110224:	e037883a 	mov	sp,fp
10110228:	dfc00117 	ldw	ra,4(sp)
1011022c:	df000017 	ldw	fp,0(sp)
10110230:	dec00204 	addi	sp,sp,8
10110234:	f800283a 	ret

10110238 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10110238:	defff404 	addi	sp,sp,-48
1011023c:	df000b15 	stw	fp,44(sp)
10110240:	df000b04 	addi	fp,sp,44
10110244:	e13ffc15 	stw	r4,-16(fp)
10110248:	e17ffd15 	stw	r5,-12(fp)
1011024c:	e1bffe15 	stw	r6,-8(fp)
10110250:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10110254:	e0bffc17 	ldw	r2,-16(fp)
10110258:	10800017 	ldw	r2,0(r2)
1011025c:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10110260:	e0bff517 	ldw	r2,-44(fp)
10110264:	10800217 	ldw	r2,8(r2)
10110268:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1011026c:	e0bff617 	ldw	r2,-40(fp)
10110270:	10bfffc4 	addi	r2,r2,-1
10110274:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10110278:	e0bffb17 	ldw	r2,-20(fp)
1011027c:	10800044 	addi	r2,r2,1
10110280:	e0bffb15 	stw	r2,-20(fp)
10110284:	e0bffb17 	ldw	r2,-20(fp)
10110288:	10800003 	ldbu	r2,0(r2)
1011028c:	10803fcc 	andi	r2,r2,255
10110290:	1080201c 	xori	r2,r2,128
10110294:	10bfe004 	addi	r2,r2,-128
10110298:	103ff71e 	bne	r2,zero,10110278 <__alt_data_end+0xffff0278>
    ;

  return ptr - string;
1011029c:	e0fffb17 	ldw	r3,-20(fp)
101102a0:	e0bff617 	ldw	r2,-40(fp)
101102a4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
101102a8:	10800044 	addi	r2,r2,1
101102ac:	1007883a 	mov	r3,r2
101102b0:	e0bffd17 	ldw	r2,-12(fp)
101102b4:	10c5883a 	add	r2,r2,r3
101102b8:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
101102bc:	d0a00d04 	addi	r2,gp,-32716
101102c0:	1007883a 	mov	r3,r2
  r4 = (int)name;
101102c4:	e0bffd17 	ldw	r2,-12(fp)
101102c8:	1009883a 	mov	r4,r2
  r5 = flags;
101102cc:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
101102d0:	e1bfff17 	ldw	r6,-4(fp)
101102d4:	e0bffd17 	ldw	r2,-12(fp)
101102d8:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
101102dc:	e0bff917 	ldw	r2,-28(fp)
101102e0:	10bfffc4 	addi	r2,r2,-1
101102e4:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
101102e8:	e0bffa17 	ldw	r2,-24(fp)
101102ec:	10800044 	addi	r2,r2,1
101102f0:	e0bffa15 	stw	r2,-24(fp)
101102f4:	e0bffa17 	ldw	r2,-24(fp)
101102f8:	10800003 	ldbu	r2,0(r2)
101102fc:	10803fcc 	andi	r2,r2,255
10110300:	1080201c 	xori	r2,r2,128
10110304:	10bfe004 	addi	r2,r2,-128
10110308:	103ff71e 	bne	r2,zero,101102e8 <__alt_data_end+0xffff02e8>
    ;

  return ptr - string;
1011030c:	e1fffa17 	ldw	r7,-24(fp)
10110310:	e0bff917 	ldw	r2,-28(fp)
10110314:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10110318:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1011031c:	003da07a 	break	1

  handle = (void *)r2;
10110320:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10110324:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10110328:	e0bff817 	ldw	r2,-32(fp)
1011032c:	1000031e 	bne	r2,zero,1011033c <alt_hostfs_open+0x104>
    fd->priv = handle;
10110330:	e0bffc17 	ldw	r2,-16(fp)
10110334:	e0fff717 	ldw	r3,-36(fp)
10110338:	10c00115 	stw	r3,4(r2)

  return -error;
1011033c:	e0bff817 	ldw	r2,-32(fp)
10110340:	0085c83a 	sub	r2,zero,r2
}
10110344:	e037883a 	mov	sp,fp
10110348:	df000017 	ldw	fp,0(sp)
1011034c:	dec00104 	addi	sp,sp,4
10110350:	f800283a 	ret

10110354 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10110354:	defffd04 	addi	sp,sp,-12
10110358:	df000215 	stw	fp,8(sp)
1011035c:	df000204 	addi	fp,sp,8
10110360:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10110364:	d0a01004 	addi	r2,gp,-32704
10110368:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1011036c:	e0bfff17 	ldw	r2,-4(fp)
10110370:	10800117 	ldw	r2,4(r2)
10110374:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10110378:	003da07a 	break	1

  error = r3;
1011037c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10110380:	e0bffe17 	ldw	r2,-8(fp)
10110384:	0085c83a 	sub	r2,zero,r2
}
10110388:	e037883a 	mov	sp,fp
1011038c:	df000017 	ldw	fp,0(sp)
10110390:	dec00104 	addi	sp,sp,4
10110394:	f800283a 	ret

10110398 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10110398:	defffa04 	addi	sp,sp,-24
1011039c:	df000515 	stw	fp,20(sp)
101103a0:	df000504 	addi	fp,sp,20
101103a4:	e13ffd15 	stw	r4,-12(fp)
101103a8:	e17ffe15 	stw	r5,-8(fp)
101103ac:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
101103b0:	d0a01304 	addi	r2,gp,-32692
101103b4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101103b8:	e0bffd17 	ldw	r2,-12(fp)
101103bc:	10800117 	ldw	r2,4(r2)
101103c0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
101103c4:	e0bffe17 	ldw	r2,-8(fp)
101103c8:	100b883a 	mov	r5,r2
  r6 = len;
101103cc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101103d0:	003da07a 	break	1

  rc = r2;
101103d4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101103d8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101103dc:	e0bffc17 	ldw	r2,-16(fp)
101103e0:	10000326 	beq	r2,zero,101103f0 <alt_hostfs_read+0x58>
101103e4:	e0bffc17 	ldw	r2,-16(fp)
101103e8:	0085c83a 	sub	r2,zero,r2
101103ec:	00000106 	br	101103f4 <alt_hostfs_read+0x5c>
101103f0:	e0bffb17 	ldw	r2,-20(fp)
}
101103f4:	e037883a 	mov	sp,fp
101103f8:	df000017 	ldw	fp,0(sp)
101103fc:	dec00104 	addi	sp,sp,4
10110400:	f800283a 	ret

10110404 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10110404:	defffa04 	addi	sp,sp,-24
10110408:	df000515 	stw	fp,20(sp)
1011040c:	df000504 	addi	fp,sp,20
10110410:	e13ffd15 	stw	r4,-12(fp)
10110414:	e17ffe15 	stw	r5,-8(fp)
10110418:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1011041c:	d0a01604 	addi	r2,gp,-32680
10110420:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10110424:	e0bffd17 	ldw	r2,-12(fp)
10110428:	10800117 	ldw	r2,4(r2)
1011042c:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10110430:	e0bffe17 	ldw	r2,-8(fp)
10110434:	100b883a 	mov	r5,r2
  r6 = len;
10110438:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1011043c:	003da07a 	break	1

  rc = r2;
10110440:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10110444:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10110448:	e0bffc17 	ldw	r2,-16(fp)
1011044c:	10000326 	beq	r2,zero,1011045c <alt_hostfs_write+0x58>
10110450:	e0bffc17 	ldw	r2,-16(fp)
10110454:	0085c83a 	sub	r2,zero,r2
10110458:	00000106 	br	10110460 <alt_hostfs_write+0x5c>
1011045c:	e0bffb17 	ldw	r2,-20(fp)
}
10110460:	e037883a 	mov	sp,fp
10110464:	df000017 	ldw	fp,0(sp)
10110468:	dec00104 	addi	sp,sp,4
1011046c:	f800283a 	ret

10110470 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10110470:	defffa04 	addi	sp,sp,-24
10110474:	df000515 	stw	fp,20(sp)
10110478:	df000504 	addi	fp,sp,20
1011047c:	e13ffd15 	stw	r4,-12(fp)
10110480:	e17ffe15 	stw	r5,-8(fp)
10110484:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10110488:	d0a01904 	addi	r2,gp,-32668
1011048c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10110490:	e0bffd17 	ldw	r2,-12(fp)
10110494:	10800117 	ldw	r2,4(r2)
10110498:	1009883a 	mov	r4,r2
  r5 = ptr;
1011049c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
101104a0:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101104a4:	003da07a 	break	1

  rc = r2;
101104a8:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101104ac:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101104b0:	e0bffc17 	ldw	r2,-16(fp)
101104b4:	10000326 	beq	r2,zero,101104c4 <alt_hostfs_seek+0x54>
101104b8:	e0bffc17 	ldw	r2,-16(fp)
101104bc:	0085c83a 	sub	r2,zero,r2
101104c0:	00000106 	br	101104c8 <alt_hostfs_seek+0x58>
101104c4:	e0bffb17 	ldw	r2,-20(fp)
}
101104c8:	e037883a 	mov	sp,fp
101104cc:	df000017 	ldw	fp,0(sp)
101104d0:	dec00104 	addi	sp,sp,4
101104d4:	f800283a 	ret

101104d8 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
101104d8:	deffe904 	addi	sp,sp,-92
101104dc:	df001615 	stw	fp,88(sp)
101104e0:	df001604 	addi	fp,sp,88
101104e4:	e13ffe15 	stw	r4,-8(fp)
101104e8:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
101104ec:	d0a01c04 	addi	r2,gp,-32656
101104f0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101104f4:	e0bffe17 	ldw	r2,-8(fp)
101104f8:	10800117 	ldw	r2,4(r2)
101104fc:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10110500:	e0bfee04 	addi	r2,fp,-72
10110504:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10110508:	003da07a 	break	1

  rc = r2;
1011050c:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10110510:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10110514:	e0bfec17 	ldw	r2,-80(fp)
10110518:	1000621e 	bne	r2,zero,101106a4 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1011051c:	e0bfee04 	addi	r2,fp,-72
10110520:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10110524:	e0bfea17 	ldw	r2,-88(fp)
10110528:	10801004 	addi	r2,r2,64
1011052c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10110530:	00001606 	br	1011058c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10110534:	e0bfea17 	ldw	r2,-88(fp)
10110538:	10800017 	ldw	r2,0(r2)
1011053c:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10110540:	e0bfea17 	ldw	r2,-88(fp)
10110544:	10800017 	ldw	r2,0(r2)
10110548:	10803fec 	andhi	r2,r2,255
1011054c:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10110550:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10110554:	e0bfea17 	ldw	r2,-88(fp)
10110558:	10800017 	ldw	r2,0(r2)
1011055c:	10bfc00c 	andi	r2,r2,65280
10110560:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10110564:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10110568:	e0bfea17 	ldw	r2,-88(fp)
1011056c:	10800017 	ldw	r2,0(r2)
10110570:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10110574:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10110578:	e0bfea17 	ldw	r2,-88(fp)
1011057c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10110580:	e0bfea17 	ldw	r2,-88(fp)
10110584:	10800104 	addi	r2,r2,4
10110588:	e0bfea15 	stw	r2,-88(fp)
1011058c:	e0ffea17 	ldw	r3,-88(fp)
10110590:	e0bfed17 	ldw	r2,-76(fp)
10110594:	18bfe736 	bltu	r3,r2,10110534 <__alt_data_end+0xffff0534>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10110598:	e0bfff17 	ldw	r2,-4(fp)
1011059c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
101105a0:	e0bfea17 	ldw	r2,-88(fp)
101105a4:	10800f04 	addi	r2,r2,60
101105a8:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
101105ac:	00000506 	br	101105c4 <alt_hostfs_fstat+0xec>
      *ptr = 0;
101105b0:	e0bfea17 	ldw	r2,-88(fp)
101105b4:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
101105b8:	e0bfea17 	ldw	r2,-88(fp)
101105bc:	10800104 	addi	r2,r2,4
101105c0:	e0bfea15 	stw	r2,-88(fp)
101105c4:	e0ffea17 	ldw	r3,-88(fp)
101105c8:	e0bfed17 	ldw	r2,-76(fp)
101105cc:	18bff836 	bltu	r3,r2,101105b0 <__alt_data_end+0xffff05b0>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
101105d0:	e0bfee17 	ldw	r2,-72(fp)
101105d4:	1007883a 	mov	r3,r2
101105d8:	e0bfff17 	ldw	r2,-4(fp)
101105dc:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101105e0:	e0bfef17 	ldw	r2,-68(fp)
101105e4:	1007883a 	mov	r3,r2
101105e8:	e0bfff17 	ldw	r2,-4(fp)
101105ec:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101105f0:	e0fff017 	ldw	r3,-64(fp)
101105f4:	e0bfff17 	ldw	r2,-4(fp)
101105f8:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101105fc:	e0bff117 	ldw	r2,-60(fp)
10110600:	1007883a 	mov	r3,r2
10110604:	e0bfff17 	ldw	r2,-4(fp)
10110608:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1011060c:	e0bff217 	ldw	r2,-56(fp)
10110610:	1007883a 	mov	r3,r2
10110614:	e0bfff17 	ldw	r2,-4(fp)
10110618:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1011061c:	e0bff317 	ldw	r2,-52(fp)
10110620:	1007883a 	mov	r3,r2
10110624:	e0bfff17 	ldw	r2,-4(fp)
10110628:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1011062c:	e0bff417 	ldw	r2,-48(fp)
10110630:	1007883a 	mov	r3,r2
10110634:	e0bfff17 	ldw	r2,-4(fp)
10110638:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1011063c:	e0bff617 	ldw	r2,-40(fp)
10110640:	1007883a 	mov	r3,r2
10110644:	e0bfff17 	ldw	r2,-4(fp)
10110648:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1011064c:	e0bffb17 	ldw	r2,-20(fp)
10110650:	1007883a 	mov	r3,r2
10110654:	e0bfff17 	ldw	r2,-4(fp)
10110658:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1011065c:	e0bffc17 	ldw	r2,-16(fp)
10110660:	1007883a 	mov	r3,r2
10110664:	e0bfff17 	ldw	r2,-4(fp)
10110668:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1011066c:	e0bffd17 	ldw	r2,-12(fp)
10110670:	1007883a 	mov	r3,r2
10110674:	e0bfff17 	ldw	r2,-4(fp)
10110678:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1011067c:	e0bff817 	ldw	r2,-32(fp)
10110680:	1007883a 	mov	r3,r2
10110684:	e0bfff17 	ldw	r2,-4(fp)
10110688:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1011068c:	e0bffa17 	ldw	r2,-24(fp)
10110690:	1007883a 	mov	r3,r2
10110694:	e0bfff17 	ldw	r2,-4(fp)
10110698:	10c00c15 	stw	r3,48(r2)

    return rc;
1011069c:	e0bfeb17 	ldw	r2,-84(fp)
101106a0:	00000206 	br	101106ac <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
101106a4:	e0bfec17 	ldw	r2,-80(fp)
101106a8:	0085c83a 	sub	r2,zero,r2
}
101106ac:	e037883a 	mov	sp,fp
101106b0:	df000017 	ldw	fp,0(sp)
101106b4:	dec00104 	addi	sp,sp,4
101106b8:	f800283a 	ret

101106bc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
101106bc:	defff504 	addi	sp,sp,-44
101106c0:	df000a15 	stw	fp,40(sp)
101106c4:	df000a04 	addi	fp,sp,40
101106c8:	e13ffc15 	stw	r4,-16(fp)
101106cc:	e17ffd15 	stw	r5,-12(fp)
101106d0:	e1bffe15 	stw	r6,-8(fp)
101106d4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101106d8:	e03ff615 	stw	zero,-40(fp)
101106dc:	00840474 	movhi	r2,4113
101106e0:	10951304 	addi	r2,r2,21580
101106e4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
101106e8:	10003f26 	beq	r2,zero,101107e8 <alt_alarm_start+0x12c>
  {
    if (alarm)
101106ec:	e0bffc17 	ldw	r2,-16(fp)
101106f0:	10003b26 	beq	r2,zero,101107e0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
101106f4:	e0bffc17 	ldw	r2,-16(fp)
101106f8:	e0fffe17 	ldw	r3,-8(fp)
101106fc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10110700:	e0bffc17 	ldw	r2,-16(fp)
10110704:	e0ffff17 	ldw	r3,-4(fp)
10110708:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011070c:	0005303a 	rdctl	r2,status
10110710:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110714:	e0fff917 	ldw	r3,-28(fp)
10110718:	00bfff84 	movi	r2,-2
1011071c:	1884703a 	and	r2,r3,r2
10110720:	1001703a 	wrctl	status,r2
  
  return context;
10110724:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10110728:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1011072c:	00840474 	movhi	r2,4113
10110730:	10951404 	addi	r2,r2,21584
10110734:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10110738:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1011073c:	e0fffd17 	ldw	r3,-12(fp)
10110740:	e0bff617 	ldw	r2,-40(fp)
10110744:	1885883a 	add	r2,r3,r2
10110748:	10c00044 	addi	r3,r2,1
1011074c:	e0bffc17 	ldw	r2,-16(fp)
10110750:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10110754:	e0bffc17 	ldw	r2,-16(fp)
10110758:	10c00217 	ldw	r3,8(r2)
1011075c:	e0bff617 	ldw	r2,-40(fp)
10110760:	1880042e 	bgeu	r3,r2,10110774 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10110764:	e0bffc17 	ldw	r2,-16(fp)
10110768:	00c00044 	movi	r3,1
1011076c:	10c00405 	stb	r3,16(r2)
10110770:	00000206 	br	1011077c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10110774:	e0bffc17 	ldw	r2,-16(fp)
10110778:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1011077c:	e0fffc17 	ldw	r3,-16(fp)
10110780:	00840474 	movhi	r2,4113
10110784:	108e2f04 	addi	r2,r2,14524
10110788:	e0bffa15 	stw	r2,-24(fp)
1011078c:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110790:	e0bffb17 	ldw	r2,-20(fp)
10110794:	e0fffa17 	ldw	r3,-24(fp)
10110798:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1011079c:	e0bffa17 	ldw	r2,-24(fp)
101107a0:	10c00017 	ldw	r3,0(r2)
101107a4:	e0bffb17 	ldw	r2,-20(fp)
101107a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101107ac:	e0bffa17 	ldw	r2,-24(fp)
101107b0:	10800017 	ldw	r2,0(r2)
101107b4:	e0fffb17 	ldw	r3,-20(fp)
101107b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101107bc:	e0bffa17 	ldw	r2,-24(fp)
101107c0:	e0fffb17 	ldw	r3,-20(fp)
101107c4:	10c00015 	stw	r3,0(r2)
101107c8:	e0bff817 	ldw	r2,-32(fp)
101107cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101107d0:	e0bff717 	ldw	r2,-36(fp)
101107d4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101107d8:	0005883a 	mov	r2,zero
101107dc:	00000306 	br	101107ec <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
101107e0:	00bffa84 	movi	r2,-22
101107e4:	00000106 	br	101107ec <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
101107e8:	00bfde84 	movi	r2,-134
  }
}
101107ec:	e037883a 	mov	sp,fp
101107f0:	df000017 	ldw	fp,0(sp)
101107f4:	dec00104 	addi	sp,sp,4
101107f8:	f800283a 	ret

101107fc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
101107fc:	defffa04 	addi	sp,sp,-24
10110800:	dfc00515 	stw	ra,20(sp)
10110804:	df000415 	stw	fp,16(sp)
10110808:	df000404 	addi	fp,sp,16
1011080c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10110810:	008000c4 	movi	r2,3
10110814:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10110818:	e0fffd17 	ldw	r3,-12(fp)
1011081c:	008003f4 	movhi	r2,15
10110820:	10909004 	addi	r2,r2,16960
10110824:	1885383a 	mul	r2,r3,r2
10110828:	100b883a 	mov	r5,r2
1011082c:	0100bef4 	movhi	r4,763
10110830:	213c2004 	addi	r4,r4,-3968
10110834:	01019a00 	call	101019a0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10110838:	100b883a 	mov	r5,r2
1011083c:	01200034 	movhi	r4,32768
10110840:	213fffc4 	addi	r4,r4,-1
10110844:	01019a00 	call	101019a0 <__udivsi3>
10110848:	100b883a 	mov	r5,r2
1011084c:	e13fff17 	ldw	r4,-4(fp)
10110850:	01019a00 	call	101019a0 <__udivsi3>
10110854:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10110858:	e0bffe17 	ldw	r2,-8(fp)
1011085c:	10002a26 	beq	r2,zero,10110908 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10110860:	e03ffc15 	stw	zero,-16(fp)
10110864:	00001706 	br	101108c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10110868:	00a00034 	movhi	r2,32768
1011086c:	10bfffc4 	addi	r2,r2,-1
10110870:	10bfffc4 	addi	r2,r2,-1
10110874:	103ffe1e 	bne	r2,zero,10110870 <__alt_data_end+0xffff0870>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10110878:	e0fffd17 	ldw	r3,-12(fp)
1011087c:	008003f4 	movhi	r2,15
10110880:	10909004 	addi	r2,r2,16960
10110884:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10110888:	100b883a 	mov	r5,r2
1011088c:	0100bef4 	movhi	r4,763
10110890:	213c2004 	addi	r4,r4,-3968
10110894:	01019a00 	call	101019a0 <__udivsi3>
10110898:	100b883a 	mov	r5,r2
1011089c:	01200034 	movhi	r4,32768
101108a0:	213fffc4 	addi	r4,r4,-1
101108a4:	01019a00 	call	101019a0 <__udivsi3>
101108a8:	1007883a 	mov	r3,r2
101108ac:	e0bfff17 	ldw	r2,-4(fp)
101108b0:	10c5c83a 	sub	r2,r2,r3
101108b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
101108b8:	e0bffc17 	ldw	r2,-16(fp)
101108bc:	10800044 	addi	r2,r2,1
101108c0:	e0bffc15 	stw	r2,-16(fp)
101108c4:	e0fffc17 	ldw	r3,-16(fp)
101108c8:	e0bffe17 	ldw	r2,-8(fp)
101108cc:	18bfe616 	blt	r3,r2,10110868 <__alt_data_end+0xffff0868>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101108d0:	e0fffd17 	ldw	r3,-12(fp)
101108d4:	008003f4 	movhi	r2,15
101108d8:	10909004 	addi	r2,r2,16960
101108dc:	1885383a 	mul	r2,r3,r2
101108e0:	100b883a 	mov	r5,r2
101108e4:	0100bef4 	movhi	r4,763
101108e8:	213c2004 	addi	r4,r4,-3968
101108ec:	01019a00 	call	101019a0 <__udivsi3>
101108f0:	1007883a 	mov	r3,r2
101108f4:	e0bfff17 	ldw	r2,-4(fp)
101108f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101108fc:	10bfffc4 	addi	r2,r2,-1
10110900:	103ffe1e 	bne	r2,zero,101108fc <__alt_data_end+0xffff08fc>
10110904:	00000d06 	br	1011093c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10110908:	e0fffd17 	ldw	r3,-12(fp)
1011090c:	008003f4 	movhi	r2,15
10110910:	10909004 	addi	r2,r2,16960
10110914:	1885383a 	mul	r2,r3,r2
10110918:	100b883a 	mov	r5,r2
1011091c:	0100bef4 	movhi	r4,763
10110920:	213c2004 	addi	r4,r4,-3968
10110924:	01019a00 	call	101019a0 <__udivsi3>
10110928:	1007883a 	mov	r3,r2
1011092c:	e0bfff17 	ldw	r2,-4(fp)
10110930:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10110934:	10bfffc4 	addi	r2,r2,-1
10110938:	00bffe16 	blt	zero,r2,10110934 <__alt_data_end+0xffff0934>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
1011093c:	0005883a 	mov	r2,zero
}
10110940:	e037883a 	mov	sp,fp
10110944:	dfc00117 	ldw	ra,4(sp)
10110948:	df000017 	ldw	fp,0(sp)
1011094c:	dec00204 	addi	sp,sp,8
10110950:	f800283a 	ret

10110954 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10110954:	defffe04 	addi	sp,sp,-8
10110958:	df000115 	stw	fp,4(sp)
1011095c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110960:	e03fff15 	stw	zero,-4(fp)
10110964:	00000506 	br	1011097c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10110968:	e0bfff17 	ldw	r2,-4(fp)
1011096c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110970:	e0bfff17 	ldw	r2,-4(fp)
10110974:	10800804 	addi	r2,r2,32
10110978:	e0bfff15 	stw	r2,-4(fp)
1011097c:	e0bfff17 	ldw	r2,-4(fp)
10110980:	10820030 	cmpltui	r2,r2,2048
10110984:	103ff81e 	bne	r2,zero,10110968 <__alt_data_end+0xffff0968>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10110988:	0001883a 	nop
1011098c:	e037883a 	mov	sp,fp
10110990:	df000017 	ldw	fp,0(sp)
10110994:	dec00104 	addi	sp,sp,4
10110998:	f800283a 	ret

1011099c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1011099c:	defffe04 	addi	sp,sp,-8
101109a0:	dfc00115 	stw	ra,4(sp)
101109a4:	df000015 	stw	fp,0(sp)
101109a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101109ac:	00840474 	movhi	r2,4113
101109b0:	108e1a04 	addi	r2,r2,14440
101109b4:	10800017 	ldw	r2,0(r2)
101109b8:	10000526 	beq	r2,zero,101109d0 <alt_get_errno+0x34>
101109bc:	00840474 	movhi	r2,4113
101109c0:	108e1a04 	addi	r2,r2,14440
101109c4:	10800017 	ldw	r2,0(r2)
101109c8:	103ee83a 	callr	r2
101109cc:	00000206 	br	101109d8 <alt_get_errno+0x3c>
101109d0:	00840474 	movhi	r2,4113
101109d4:	10950804 	addi	r2,r2,21536
}
101109d8:	e037883a 	mov	sp,fp
101109dc:	dfc00117 	ldw	ra,4(sp)
101109e0:	df000017 	ldw	fp,0(sp)
101109e4:	dec00204 	addi	sp,sp,8
101109e8:	f800283a 	ret

101109ec <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101109ec:	defffa04 	addi	sp,sp,-24
101109f0:	dfc00515 	stw	ra,20(sp)
101109f4:	df000415 	stw	fp,16(sp)
101109f8:	df000404 	addi	fp,sp,16
101109fc:	e13ffe15 	stw	r4,-8(fp)
10110a00:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10110a04:	e0bffe17 	ldw	r2,-8(fp)
10110a08:	10000326 	beq	r2,zero,10110a18 <alt_dev_llist_insert+0x2c>
10110a0c:	e0bffe17 	ldw	r2,-8(fp)
10110a10:	10800217 	ldw	r2,8(r2)
10110a14:	1000061e 	bne	r2,zero,10110a30 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10110a18:	011099c0 	call	1011099c <alt_get_errno>
10110a1c:	1007883a 	mov	r3,r2
10110a20:	00800584 	movi	r2,22
10110a24:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10110a28:	00bffa84 	movi	r2,-22
10110a2c:	00001306 	br	10110a7c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10110a30:	e0bffe17 	ldw	r2,-8(fp)
10110a34:	e0ffff17 	ldw	r3,-4(fp)
10110a38:	e0fffc15 	stw	r3,-16(fp)
10110a3c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110a40:	e0bffd17 	ldw	r2,-12(fp)
10110a44:	e0fffc17 	ldw	r3,-16(fp)
10110a48:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110a4c:	e0bffc17 	ldw	r2,-16(fp)
10110a50:	10c00017 	ldw	r3,0(r2)
10110a54:	e0bffd17 	ldw	r2,-12(fp)
10110a58:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110a5c:	e0bffc17 	ldw	r2,-16(fp)
10110a60:	10800017 	ldw	r2,0(r2)
10110a64:	e0fffd17 	ldw	r3,-12(fp)
10110a68:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110a6c:	e0bffc17 	ldw	r2,-16(fp)
10110a70:	e0fffd17 	ldw	r3,-12(fp)
10110a74:	10c00015 	stw	r3,0(r2)

  return 0;  
10110a78:	0005883a 	mov	r2,zero
}
10110a7c:	e037883a 	mov	sp,fp
10110a80:	dfc00117 	ldw	ra,4(sp)
10110a84:	df000017 	ldw	fp,0(sp)
10110a88:	dec00204 	addi	sp,sp,8
10110a8c:	f800283a 	ret

10110a90 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10110a90:	defffd04 	addi	sp,sp,-12
10110a94:	dfc00215 	stw	ra,8(sp)
10110a98:	df000115 	stw	fp,4(sp)
10110a9c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110aa0:	00840474 	movhi	r2,4113
10110aa4:	10863d04 	addi	r2,r2,6388
10110aa8:	e0bfff15 	stw	r2,-4(fp)
10110aac:	00000606 	br	10110ac8 <_do_ctors+0x38>
        (*ctor) (); 
10110ab0:	e0bfff17 	ldw	r2,-4(fp)
10110ab4:	10800017 	ldw	r2,0(r2)
10110ab8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110abc:	e0bfff17 	ldw	r2,-4(fp)
10110ac0:	10bfff04 	addi	r2,r2,-4
10110ac4:	e0bfff15 	stw	r2,-4(fp)
10110ac8:	e0ffff17 	ldw	r3,-4(fp)
10110acc:	00840474 	movhi	r2,4113
10110ad0:	10863e04 	addi	r2,r2,6392
10110ad4:	18bff62e 	bgeu	r3,r2,10110ab0 <__alt_data_end+0xffff0ab0>
        (*ctor) (); 
}
10110ad8:	0001883a 	nop
10110adc:	e037883a 	mov	sp,fp
10110ae0:	dfc00117 	ldw	ra,4(sp)
10110ae4:	df000017 	ldw	fp,0(sp)
10110ae8:	dec00204 	addi	sp,sp,8
10110aec:	f800283a 	ret

10110af0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10110af0:	defffd04 	addi	sp,sp,-12
10110af4:	dfc00215 	stw	ra,8(sp)
10110af8:	df000115 	stw	fp,4(sp)
10110afc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110b00:	00840474 	movhi	r2,4113
10110b04:	10863d04 	addi	r2,r2,6388
10110b08:	e0bfff15 	stw	r2,-4(fp)
10110b0c:	00000606 	br	10110b28 <_do_dtors+0x38>
        (*dtor) (); 
10110b10:	e0bfff17 	ldw	r2,-4(fp)
10110b14:	10800017 	ldw	r2,0(r2)
10110b18:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110b1c:	e0bfff17 	ldw	r2,-4(fp)
10110b20:	10bfff04 	addi	r2,r2,-4
10110b24:	e0bfff15 	stw	r2,-4(fp)
10110b28:	e0ffff17 	ldw	r3,-4(fp)
10110b2c:	00840474 	movhi	r2,4113
10110b30:	10863e04 	addi	r2,r2,6392
10110b34:	18bff62e 	bgeu	r3,r2,10110b10 <__alt_data_end+0xffff0b10>
        (*dtor) (); 
}
10110b38:	0001883a 	nop
10110b3c:	e037883a 	mov	sp,fp
10110b40:	dfc00117 	ldw	ra,4(sp)
10110b44:	df000017 	ldw	fp,0(sp)
10110b48:	dec00204 	addi	sp,sp,8
10110b4c:	f800283a 	ret

10110b50 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10110b50:	defffa04 	addi	sp,sp,-24
10110b54:	dfc00515 	stw	ra,20(sp)
10110b58:	df000415 	stw	fp,16(sp)
10110b5c:	df000404 	addi	fp,sp,16
10110b60:	e13ffe15 	stw	r4,-8(fp)
10110b64:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10110b68:	e0bfff17 	ldw	r2,-4(fp)
10110b6c:	10800017 	ldw	r2,0(r2)
10110b70:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10110b74:	e13ffe17 	ldw	r4,-8(fp)
10110b78:	0103da80 	call	10103da8 <strlen>
10110b7c:	10800044 	addi	r2,r2,1
10110b80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110b84:	00000d06 	br	10110bbc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10110b88:	e0bffc17 	ldw	r2,-16(fp)
10110b8c:	10800217 	ldw	r2,8(r2)
10110b90:	e0fffd17 	ldw	r3,-12(fp)
10110b94:	180d883a 	mov	r6,r3
10110b98:	e17ffe17 	ldw	r5,-8(fp)
10110b9c:	1009883a 	mov	r4,r2
10110ba0:	01115b00 	call	101115b0 <memcmp>
10110ba4:	1000021e 	bne	r2,zero,10110bb0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10110ba8:	e0bffc17 	ldw	r2,-16(fp)
10110bac:	00000706 	br	10110bcc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10110bb0:	e0bffc17 	ldw	r2,-16(fp)
10110bb4:	10800017 	ldw	r2,0(r2)
10110bb8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110bbc:	e0fffc17 	ldw	r3,-16(fp)
10110bc0:	e0bfff17 	ldw	r2,-4(fp)
10110bc4:	18bff01e 	bne	r3,r2,10110b88 <__alt_data_end+0xffff0b88>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10110bc8:	0005883a 	mov	r2,zero
}
10110bcc:	e037883a 	mov	sp,fp
10110bd0:	dfc00117 	ldw	ra,4(sp)
10110bd4:	df000017 	ldw	fp,0(sp)
10110bd8:	dec00204 	addi	sp,sp,8
10110bdc:	f800283a 	ret

10110be0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10110be0:	defffb04 	addi	sp,sp,-20
10110be4:	dfc00415 	stw	ra,16(sp)
10110be8:	df000315 	stw	fp,12(sp)
10110bec:	df000304 	addi	fp,sp,12
10110bf0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10110bf4:	00840474 	movhi	r2,4113
10110bf8:	108e1504 	addi	r2,r2,14420
10110bfc:	10800017 	ldw	r2,0(r2)
10110c00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110c04:	00003106 	br	10110ccc <alt_find_file+0xec>
  {
    len = strlen(next->name);
10110c08:	e0bffd17 	ldw	r2,-12(fp)
10110c0c:	10800217 	ldw	r2,8(r2)
10110c10:	1009883a 	mov	r4,r2
10110c14:	0103da80 	call	10103da8 <strlen>
10110c18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10110c1c:	e0bffd17 	ldw	r2,-12(fp)
10110c20:	10c00217 	ldw	r3,8(r2)
10110c24:	e0bffe17 	ldw	r2,-8(fp)
10110c28:	10bfffc4 	addi	r2,r2,-1
10110c2c:	1885883a 	add	r2,r3,r2
10110c30:	10800003 	ldbu	r2,0(r2)
10110c34:	10803fcc 	andi	r2,r2,255
10110c38:	1080201c 	xori	r2,r2,128
10110c3c:	10bfe004 	addi	r2,r2,-128
10110c40:	10800bd8 	cmpnei	r2,r2,47
10110c44:	1000031e 	bne	r2,zero,10110c54 <alt_find_file+0x74>
    {
      len -= 1;
10110c48:	e0bffe17 	ldw	r2,-8(fp)
10110c4c:	10bfffc4 	addi	r2,r2,-1
10110c50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110c54:	e0bffe17 	ldw	r2,-8(fp)
10110c58:	e0ffff17 	ldw	r3,-4(fp)
10110c5c:	1885883a 	add	r2,r3,r2
10110c60:	10800003 	ldbu	r2,0(r2)
10110c64:	10803fcc 	andi	r2,r2,255
10110c68:	1080201c 	xori	r2,r2,128
10110c6c:	10bfe004 	addi	r2,r2,-128
10110c70:	10800be0 	cmpeqi	r2,r2,47
10110c74:	1000081e 	bne	r2,zero,10110c98 <alt_find_file+0xb8>
10110c78:	e0bffe17 	ldw	r2,-8(fp)
10110c7c:	e0ffff17 	ldw	r3,-4(fp)
10110c80:	1885883a 	add	r2,r3,r2
10110c84:	10800003 	ldbu	r2,0(r2)
10110c88:	10803fcc 	andi	r2,r2,255
10110c8c:	1080201c 	xori	r2,r2,128
10110c90:	10bfe004 	addi	r2,r2,-128
10110c94:	10000a1e 	bne	r2,zero,10110cc0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10110c98:	e0bffd17 	ldw	r2,-12(fp)
10110c9c:	10800217 	ldw	r2,8(r2)
10110ca0:	e0fffe17 	ldw	r3,-8(fp)
10110ca4:	180d883a 	mov	r6,r3
10110ca8:	e17fff17 	ldw	r5,-4(fp)
10110cac:	1009883a 	mov	r4,r2
10110cb0:	01115b00 	call	101115b0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110cb4:	1000021e 	bne	r2,zero,10110cc0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10110cb8:	e0bffd17 	ldw	r2,-12(fp)
10110cbc:	00000806 	br	10110ce0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10110cc0:	e0bffd17 	ldw	r2,-12(fp)
10110cc4:	10800017 	ldw	r2,0(r2)
10110cc8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110ccc:	e0fffd17 	ldw	r3,-12(fp)
10110cd0:	00840474 	movhi	r2,4113
10110cd4:	108e1504 	addi	r2,r2,14420
10110cd8:	18bfcb1e 	bne	r3,r2,10110c08 <__alt_data_end+0xffff0c08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10110cdc:	0005883a 	mov	r2,zero
}
10110ce0:	e037883a 	mov	sp,fp
10110ce4:	dfc00117 	ldw	ra,4(sp)
10110ce8:	df000017 	ldw	fp,0(sp)
10110cec:	dec00204 	addi	sp,sp,8
10110cf0:	f800283a 	ret

10110cf4 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
10110cf4:	defffc04 	addi	sp,sp,-16
10110cf8:	df000315 	stw	fp,12(sp)
10110cfc:	df000304 	addi	fp,sp,12
10110d00:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
10110d04:	e0bfff17 	ldw	r2,-4(fp)
10110d08:	10800217 	ldw	r2,8(r2)
10110d0c:	1000021e 	bne	r2,zero,10110d18 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10110d10:	00bffb44 	movi	r2,-19
10110d14:	00001406 	br	10110d68 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10110d18:	e0ffff17 	ldw	r3,-4(fp)
10110d1c:	00840474 	movhi	r2,4113
10110d20:	108e1504 	addi	r2,r2,14420
10110d24:	e0bffd15 	stw	r2,-12(fp)
10110d28:	e0fffe15 	stw	r3,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110d2c:	e0bffe17 	ldw	r2,-8(fp)
10110d30:	e0fffd17 	ldw	r3,-12(fp)
10110d34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110d38:	e0bffd17 	ldw	r2,-12(fp)
10110d3c:	10c00017 	ldw	r3,0(r2)
10110d40:	e0bffe17 	ldw	r2,-8(fp)
10110d44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110d48:	e0bffd17 	ldw	r2,-12(fp)
10110d4c:	10800017 	ldw	r2,0(r2)
10110d50:	e0fffe17 	ldw	r3,-8(fp)
10110d54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110d58:	e0bffd17 	ldw	r2,-12(fp)
10110d5c:	e0fffe17 	ldw	r3,-8(fp)
10110d60:	10c00015 	stw	r3,0(r2)

  return 0;
10110d64:	0005883a 	mov	r2,zero
} 
10110d68:	e037883a 	mov	sp,fp
10110d6c:	df000017 	ldw	fp,0(sp)
10110d70:	dec00104 	addi	sp,sp,4
10110d74:	f800283a 	ret

10110d78 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10110d78:	defffc04 	addi	sp,sp,-16
10110d7c:	df000315 	stw	fp,12(sp)
10110d80:	df000304 	addi	fp,sp,12
10110d84:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10110d88:	00bffa04 	movi	r2,-24
10110d8c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110d90:	e03ffd15 	stw	zero,-12(fp)
10110d94:	00001d06 	br	10110e0c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
10110d98:	00840474 	movhi	r2,4113
10110d9c:	10898d04 	addi	r2,r2,9780
10110da0:	e0fffd17 	ldw	r3,-12(fp)
10110da4:	18c00324 	muli	r3,r3,12
10110da8:	10c5883a 	add	r2,r2,r3
10110dac:	10800017 	ldw	r2,0(r2)
10110db0:	1000131e 	bne	r2,zero,10110e00 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
10110db4:	00840474 	movhi	r2,4113
10110db8:	10898d04 	addi	r2,r2,9780
10110dbc:	e0fffd17 	ldw	r3,-12(fp)
10110dc0:	18c00324 	muli	r3,r3,12
10110dc4:	10c5883a 	add	r2,r2,r3
10110dc8:	e0ffff17 	ldw	r3,-4(fp)
10110dcc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110dd0:	00840474 	movhi	r2,4113
10110dd4:	108e1904 	addi	r2,r2,14436
10110dd8:	10c00017 	ldw	r3,0(r2)
10110ddc:	e0bffd17 	ldw	r2,-12(fp)
10110de0:	1880040e 	bge	r3,r2,10110df4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
10110de4:	00840474 	movhi	r2,4113
10110de8:	108e1904 	addi	r2,r2,14436
10110dec:	e0fffd17 	ldw	r3,-12(fp)
10110df0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10110df4:	e0bffd17 	ldw	r2,-12(fp)
10110df8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110dfc:	00000606 	br	10110e18 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110e00:	e0bffd17 	ldw	r2,-12(fp)
10110e04:	10800044 	addi	r2,r2,1
10110e08:	e0bffd15 	stw	r2,-12(fp)
10110e0c:	e0bffd17 	ldw	r2,-12(fp)
10110e10:	10800810 	cmplti	r2,r2,32
10110e14:	103fe01e 	bne	r2,zero,10110d98 <__alt_data_end+0xffff0d98>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110e18:	e0bffe17 	ldw	r2,-8(fp)
}
10110e1c:	e037883a 	mov	sp,fp
10110e20:	df000017 	ldw	fp,0(sp)
10110e24:	dec00104 	addi	sp,sp,4
10110e28:	f800283a 	ret

10110e2c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10110e2c:	defffe04 	addi	sp,sp,-8
10110e30:	dfc00115 	stw	ra,4(sp)
10110e34:	df000015 	stw	fp,0(sp)
10110e38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10110e3c:	01440004 	movi	r5,4096
10110e40:	0009883a 	mov	r4,zero
10110e44:	01114380 	call	10111438 <alt_icache_flush>
#endif
}
10110e48:	0001883a 	nop
10110e4c:	e037883a 	mov	sp,fp
10110e50:	dfc00117 	ldw	ra,4(sp)
10110e54:	df000017 	ldw	fp,0(sp)
10110e58:	dec00204 	addi	sp,sp,8
10110e5c:	f800283a 	ret

10110e60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110e60:	defff904 	addi	sp,sp,-28
10110e64:	dfc00615 	stw	ra,24(sp)
10110e68:	df000515 	stw	fp,20(sp)
10110e6c:	df000504 	addi	fp,sp,20
10110e70:	e13ffc15 	stw	r4,-16(fp)
10110e74:	e17ffd15 	stw	r5,-12(fp)
10110e78:	e1bffe15 	stw	r6,-8(fp)
10110e7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10110e80:	e0800217 	ldw	r2,8(fp)
10110e84:	d8800015 	stw	r2,0(sp)
10110e88:	e1ffff17 	ldw	r7,-4(fp)
10110e8c:	e1bffe17 	ldw	r6,-8(fp)
10110e90:	e17ffd17 	ldw	r5,-12(fp)
10110e94:	e13ffc17 	ldw	r4,-16(fp)
10110e98:	01110400 	call	10111040 <alt_iic_isr_register>
}  
10110e9c:	e037883a 	mov	sp,fp
10110ea0:	dfc00117 	ldw	ra,4(sp)
10110ea4:	df000017 	ldw	fp,0(sp)
10110ea8:	dec00204 	addi	sp,sp,8
10110eac:	f800283a 	ret

10110eb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10110eb0:	defff904 	addi	sp,sp,-28
10110eb4:	df000615 	stw	fp,24(sp)
10110eb8:	df000604 	addi	fp,sp,24
10110ebc:	e13ffe15 	stw	r4,-8(fp)
10110ec0:	e17fff15 	stw	r5,-4(fp)
10110ec4:	e0bfff17 	ldw	r2,-4(fp)
10110ec8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110ecc:	0005303a 	rdctl	r2,status
10110ed0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110ed4:	e0fffb17 	ldw	r3,-20(fp)
10110ed8:	00bfff84 	movi	r2,-2
10110edc:	1884703a 	and	r2,r3,r2
10110ee0:	1001703a 	wrctl	status,r2
  
  return context;
10110ee4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110ee8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10110eec:	00c00044 	movi	r3,1
10110ef0:	e0bffa17 	ldw	r2,-24(fp)
10110ef4:	1884983a 	sll	r2,r3,r2
10110ef8:	1007883a 	mov	r3,r2
10110efc:	00840474 	movhi	r2,4113
10110f00:	10951204 	addi	r2,r2,21576
10110f04:	10800017 	ldw	r2,0(r2)
10110f08:	1886b03a 	or	r3,r3,r2
10110f0c:	00840474 	movhi	r2,4113
10110f10:	10951204 	addi	r2,r2,21576
10110f14:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110f18:	00840474 	movhi	r2,4113
10110f1c:	10951204 	addi	r2,r2,21576
10110f20:	10800017 	ldw	r2,0(r2)
10110f24:	100170fa 	wrctl	ienable,r2
10110f28:	e0bffc17 	ldw	r2,-16(fp)
10110f2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110f30:	e0bffd17 	ldw	r2,-12(fp)
10110f34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110f38:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10110f3c:	0001883a 	nop
}
10110f40:	e037883a 	mov	sp,fp
10110f44:	df000017 	ldw	fp,0(sp)
10110f48:	dec00104 	addi	sp,sp,4
10110f4c:	f800283a 	ret

10110f50 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110f50:	defff904 	addi	sp,sp,-28
10110f54:	df000615 	stw	fp,24(sp)
10110f58:	df000604 	addi	fp,sp,24
10110f5c:	e13ffe15 	stw	r4,-8(fp)
10110f60:	e17fff15 	stw	r5,-4(fp)
10110f64:	e0bfff17 	ldw	r2,-4(fp)
10110f68:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110f6c:	0005303a 	rdctl	r2,status
10110f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110f74:	e0fffb17 	ldw	r3,-20(fp)
10110f78:	00bfff84 	movi	r2,-2
10110f7c:	1884703a 	and	r2,r3,r2
10110f80:	1001703a 	wrctl	status,r2
  
  return context;
10110f84:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110f88:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10110f8c:	00c00044 	movi	r3,1
10110f90:	e0bffa17 	ldw	r2,-24(fp)
10110f94:	1884983a 	sll	r2,r3,r2
10110f98:	0084303a 	nor	r2,zero,r2
10110f9c:	1007883a 	mov	r3,r2
10110fa0:	00840474 	movhi	r2,4113
10110fa4:	10951204 	addi	r2,r2,21576
10110fa8:	10800017 	ldw	r2,0(r2)
10110fac:	1886703a 	and	r3,r3,r2
10110fb0:	00840474 	movhi	r2,4113
10110fb4:	10951204 	addi	r2,r2,21576
10110fb8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110fbc:	00840474 	movhi	r2,4113
10110fc0:	10951204 	addi	r2,r2,21576
10110fc4:	10800017 	ldw	r2,0(r2)
10110fc8:	100170fa 	wrctl	ienable,r2
10110fcc:	e0bffc17 	ldw	r2,-16(fp)
10110fd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110fd4:	e0bffd17 	ldw	r2,-12(fp)
10110fd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110fdc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10110fe0:	0001883a 	nop
}
10110fe4:	e037883a 	mov	sp,fp
10110fe8:	df000017 	ldw	fp,0(sp)
10110fec:	dec00104 	addi	sp,sp,4
10110ff0:	f800283a 	ret

10110ff4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10110ff4:	defffc04 	addi	sp,sp,-16
10110ff8:	df000315 	stw	fp,12(sp)
10110ffc:	df000304 	addi	fp,sp,12
10111000:	e13ffe15 	stw	r4,-8(fp)
10111004:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10111008:	000530fa 	rdctl	r2,ienable
1011100c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10111010:	00c00044 	movi	r3,1
10111014:	e0bfff17 	ldw	r2,-4(fp)
10111018:	1884983a 	sll	r2,r3,r2
1011101c:	1007883a 	mov	r3,r2
10111020:	e0bffd17 	ldw	r2,-12(fp)
10111024:	1884703a 	and	r2,r3,r2
10111028:	1004c03a 	cmpne	r2,r2,zero
1011102c:	10803fcc 	andi	r2,r2,255
}
10111030:	e037883a 	mov	sp,fp
10111034:	df000017 	ldw	fp,0(sp)
10111038:	dec00104 	addi	sp,sp,4
1011103c:	f800283a 	ret

10111040 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10111040:	defff504 	addi	sp,sp,-44
10111044:	dfc00a15 	stw	ra,40(sp)
10111048:	df000915 	stw	fp,36(sp)
1011104c:	df000904 	addi	fp,sp,36
10111050:	e13ffc15 	stw	r4,-16(fp)
10111054:	e17ffd15 	stw	r5,-12(fp)
10111058:	e1bffe15 	stw	r6,-8(fp)
1011105c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10111060:	00bffa84 	movi	r2,-22
10111064:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10111068:	e0bffd17 	ldw	r2,-12(fp)
1011106c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10111070:	e0bff817 	ldw	r2,-32(fp)
10111074:	10800808 	cmpgei	r2,r2,32
10111078:	1000271e 	bne	r2,zero,10111118 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011107c:	0005303a 	rdctl	r2,status
10111080:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111084:	e0fffb17 	ldw	r3,-20(fp)
10111088:	00bfff84 	movi	r2,-2
1011108c:	1884703a 	and	r2,r3,r2
10111090:	1001703a 	wrctl	status,r2
  
  return context;
10111094:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10111098:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1011109c:	00840474 	movhi	r2,4113
101110a0:	10952004 	addi	r2,r2,21632
101110a4:	e0fff817 	ldw	r3,-32(fp)
101110a8:	180690fa 	slli	r3,r3,3
101110ac:	10c5883a 	add	r2,r2,r3
101110b0:	e0fffe17 	ldw	r3,-8(fp)
101110b4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
101110b8:	00840474 	movhi	r2,4113
101110bc:	10952004 	addi	r2,r2,21632
101110c0:	e0fff817 	ldw	r3,-32(fp)
101110c4:	180690fa 	slli	r3,r3,3
101110c8:	10c5883a 	add	r2,r2,r3
101110cc:	10800104 	addi	r2,r2,4
101110d0:	e0ffff17 	ldw	r3,-4(fp)
101110d4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101110d8:	e0bffe17 	ldw	r2,-8(fp)
101110dc:	10000526 	beq	r2,zero,101110f4 <alt_iic_isr_register+0xb4>
101110e0:	e0bff817 	ldw	r2,-32(fp)
101110e4:	100b883a 	mov	r5,r2
101110e8:	e13ffc17 	ldw	r4,-16(fp)
101110ec:	0110eb00 	call	10110eb0 <alt_ic_irq_enable>
101110f0:	00000406 	br	10111104 <alt_iic_isr_register+0xc4>
101110f4:	e0bff817 	ldw	r2,-32(fp)
101110f8:	100b883a 	mov	r5,r2
101110fc:	e13ffc17 	ldw	r4,-16(fp)
10111100:	0110f500 	call	10110f50 <alt_ic_irq_disable>
10111104:	e0bff715 	stw	r2,-36(fp)
10111108:	e0bffa17 	ldw	r2,-24(fp)
1011110c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10111110:	e0bff917 	ldw	r2,-28(fp)
10111114:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10111118:	e0bff717 	ldw	r2,-36(fp)
}
1011111c:	e037883a 	mov	sp,fp
10111120:	dfc00117 	ldw	ra,4(sp)
10111124:	df000017 	ldw	fp,0(sp)
10111128:	dec00204 	addi	sp,sp,8
1011112c:	f800283a 	ret

10111130 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10111130:	defff904 	addi	sp,sp,-28
10111134:	dfc00615 	stw	ra,24(sp)
10111138:	df000515 	stw	fp,20(sp)
1011113c:	df000504 	addi	fp,sp,20
10111140:	e13ffc15 	stw	r4,-16(fp)
10111144:	e17ffd15 	stw	r5,-12(fp)
10111148:	e1bffe15 	stw	r6,-8(fp)
1011114c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10111150:	e1bfff17 	ldw	r6,-4(fp)
10111154:	e17ffe17 	ldw	r5,-8(fp)
10111158:	e13ffd17 	ldw	r4,-12(fp)
1011115c:	010f1cc0 	call	1010f1cc <open>
10111160:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10111164:	e0bffb17 	ldw	r2,-20(fp)
10111168:	10001c16 	blt	r2,zero,101111dc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1011116c:	00840474 	movhi	r2,4113
10111170:	10898d04 	addi	r2,r2,9780
10111174:	e0fffb17 	ldw	r3,-20(fp)
10111178:	18c00324 	muli	r3,r3,12
1011117c:	10c5883a 	add	r2,r2,r3
10111180:	10c00017 	ldw	r3,0(r2)
10111184:	e0bffc17 	ldw	r2,-16(fp)
10111188:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1011118c:	00840474 	movhi	r2,4113
10111190:	10898d04 	addi	r2,r2,9780
10111194:	e0fffb17 	ldw	r3,-20(fp)
10111198:	18c00324 	muli	r3,r3,12
1011119c:	10c5883a 	add	r2,r2,r3
101111a0:	10800104 	addi	r2,r2,4
101111a4:	10c00017 	ldw	r3,0(r2)
101111a8:	e0bffc17 	ldw	r2,-16(fp)
101111ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
101111b0:	00840474 	movhi	r2,4113
101111b4:	10898d04 	addi	r2,r2,9780
101111b8:	e0fffb17 	ldw	r3,-20(fp)
101111bc:	18c00324 	muli	r3,r3,12
101111c0:	10c5883a 	add	r2,r2,r3
101111c4:	10800204 	addi	r2,r2,8
101111c8:	10c00017 	ldw	r3,0(r2)
101111cc:	e0bffc17 	ldw	r2,-16(fp)
101111d0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101111d4:	e13ffb17 	ldw	r4,-20(fp)
101111d8:	010f4700 	call	1010f470 <alt_release_fd>
  }
} 
101111dc:	0001883a 	nop
101111e0:	e037883a 	mov	sp,fp
101111e4:	dfc00117 	ldw	ra,4(sp)
101111e8:	df000017 	ldw	fp,0(sp)
101111ec:	dec00204 	addi	sp,sp,8
101111f0:	f800283a 	ret

101111f4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101111f4:	defffb04 	addi	sp,sp,-20
101111f8:	dfc00415 	stw	ra,16(sp)
101111fc:	df000315 	stw	fp,12(sp)
10111200:	df000304 	addi	fp,sp,12
10111204:	e13ffd15 	stw	r4,-12(fp)
10111208:	e17ffe15 	stw	r5,-8(fp)
1011120c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10111210:	01c07fc4 	movi	r7,511
10111214:	01800044 	movi	r6,1
10111218:	e17ffd17 	ldw	r5,-12(fp)
1011121c:	01040474 	movhi	r4,4113
10111220:	21099004 	addi	r4,r4,9792
10111224:	01111300 	call	10111130 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10111228:	01c07fc4 	movi	r7,511
1011122c:	000d883a 	mov	r6,zero
10111230:	e17ffe17 	ldw	r5,-8(fp)
10111234:	01040474 	movhi	r4,4113
10111238:	21098d04 	addi	r4,r4,9780
1011123c:	01111300 	call	10111130 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10111240:	01c07fc4 	movi	r7,511
10111244:	01800044 	movi	r6,1
10111248:	e17fff17 	ldw	r5,-4(fp)
1011124c:	01040474 	movhi	r4,4113
10111250:	21099304 	addi	r4,r4,9804
10111254:	01111300 	call	10111130 <alt_open_fd>
}  
10111258:	0001883a 	nop
1011125c:	e037883a 	mov	sp,fp
10111260:	dfc00117 	ldw	ra,4(sp)
10111264:	df000017 	ldw	fp,0(sp)
10111268:	dec00204 	addi	sp,sp,8
1011126c:	f800283a 	ret

10111270 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10111270:	defffa04 	addi	sp,sp,-24
10111274:	df000515 	stw	fp,20(sp)
10111278:	df000504 	addi	fp,sp,20
1011127c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10111280:	0005303a 	rdctl	r2,status
10111284:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10111288:	e0fffc17 	ldw	r3,-16(fp)
1011128c:	00bfff84 	movi	r2,-2
10111290:	1884703a 	and	r2,r3,r2
10111294:	1001703a 	wrctl	status,r2
  
  return context;
10111298:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1011129c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
101112a0:	e0bfff17 	ldw	r2,-4(fp)
101112a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
101112a8:	e0bffd17 	ldw	r2,-12(fp)
101112ac:	10800017 	ldw	r2,0(r2)
101112b0:	e0fffd17 	ldw	r3,-12(fp)
101112b4:	18c00117 	ldw	r3,4(r3)
101112b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101112bc:	e0bffd17 	ldw	r2,-12(fp)
101112c0:	10800117 	ldw	r2,4(r2)
101112c4:	e0fffd17 	ldw	r3,-12(fp)
101112c8:	18c00017 	ldw	r3,0(r3)
101112cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101112d0:	e0bffd17 	ldw	r2,-12(fp)
101112d4:	e0fffd17 	ldw	r3,-12(fp)
101112d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101112dc:	e0bffd17 	ldw	r2,-12(fp)
101112e0:	e0fffd17 	ldw	r3,-12(fp)
101112e4:	10c00015 	stw	r3,0(r2)
101112e8:	e0bffb17 	ldw	r2,-20(fp)
101112ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101112f0:	e0bffe17 	ldw	r2,-8(fp)
101112f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
101112f8:	0001883a 	nop
101112fc:	e037883a 	mov	sp,fp
10111300:	df000017 	ldw	fp,0(sp)
10111304:	dec00104 	addi	sp,sp,4
10111308:	f800283a 	ret

1011130c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1011130c:	defffb04 	addi	sp,sp,-20
10111310:	dfc00415 	stw	ra,16(sp)
10111314:	df000315 	stw	fp,12(sp)
10111318:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1011131c:	d0a02017 	ldw	r2,-32640(gp)
10111320:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10111324:	d0a70517 	ldw	r2,-25580(gp)
10111328:	10800044 	addi	r2,r2,1
1011132c:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10111330:	00002e06 	br	101113ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10111334:	e0bffd17 	ldw	r2,-12(fp)
10111338:	10800017 	ldw	r2,0(r2)
1011133c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10111340:	e0bffd17 	ldw	r2,-12(fp)
10111344:	10800403 	ldbu	r2,16(r2)
10111348:	10803fcc 	andi	r2,r2,255
1011134c:	10000426 	beq	r2,zero,10111360 <alt_tick+0x54>
10111350:	d0a70517 	ldw	r2,-25580(gp)
10111354:	1000021e 	bne	r2,zero,10111360 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10111358:	e0bffd17 	ldw	r2,-12(fp)
1011135c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10111360:	e0bffd17 	ldw	r2,-12(fp)
10111364:	10800217 	ldw	r2,8(r2)
10111368:	d0e70517 	ldw	r3,-25580(gp)
1011136c:	18801d36 	bltu	r3,r2,101113e4 <alt_tick+0xd8>
10111370:	e0bffd17 	ldw	r2,-12(fp)
10111374:	10800403 	ldbu	r2,16(r2)
10111378:	10803fcc 	andi	r2,r2,255
1011137c:	1000191e 	bne	r2,zero,101113e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10111380:	e0bffd17 	ldw	r2,-12(fp)
10111384:	10800317 	ldw	r2,12(r2)
10111388:	e0fffd17 	ldw	r3,-12(fp)
1011138c:	18c00517 	ldw	r3,20(r3)
10111390:	1809883a 	mov	r4,r3
10111394:	103ee83a 	callr	r2
10111398:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1011139c:	e0bfff17 	ldw	r2,-4(fp)
101113a0:	1000031e 	bne	r2,zero,101113b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
101113a4:	e13ffd17 	ldw	r4,-12(fp)
101113a8:	01112700 	call	10111270 <alt_alarm_stop>
101113ac:	00000d06 	br	101113e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
101113b0:	e0bffd17 	ldw	r2,-12(fp)
101113b4:	10c00217 	ldw	r3,8(r2)
101113b8:	e0bfff17 	ldw	r2,-4(fp)
101113bc:	1887883a 	add	r3,r3,r2
101113c0:	e0bffd17 	ldw	r2,-12(fp)
101113c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101113c8:	e0bffd17 	ldw	r2,-12(fp)
101113cc:	10c00217 	ldw	r3,8(r2)
101113d0:	d0a70517 	ldw	r2,-25580(gp)
101113d4:	1880032e 	bgeu	r3,r2,101113e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
101113d8:	e0bffd17 	ldw	r2,-12(fp)
101113dc:	00c00044 	movi	r3,1
101113e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
101113e4:	e0bffe17 	ldw	r2,-8(fp)
101113e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
101113ec:	e0fffd17 	ldw	r3,-12(fp)
101113f0:	d0a02004 	addi	r2,gp,-32640
101113f4:	18bfcf1e 	bne	r3,r2,10111334 <__alt_data_end+0xffff1334>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
101113f8:	0001883a 	nop
}
101113fc:	0001883a 	nop
10111400:	e037883a 	mov	sp,fp
10111404:	dfc00117 	ldw	ra,4(sp)
10111408:	df000017 	ldw	fp,0(sp)
1011140c:	dec00204 	addi	sp,sp,8
10111410:	f800283a 	ret

10111414 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10111414:	deffff04 	addi	sp,sp,-4
10111418:	df000015 	stw	fp,0(sp)
1011141c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10111420:	000170fa 	wrctl	ienable,zero
}
10111424:	0001883a 	nop
10111428:	e037883a 	mov	sp,fp
1011142c:	df000017 	ldw	fp,0(sp)
10111430:	dec00104 	addi	sp,sp,4
10111434:	f800283a 	ret

10111438 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10111438:	defffb04 	addi	sp,sp,-20
1011143c:	df000415 	stw	fp,16(sp)
10111440:	df000404 	addi	fp,sp,16
10111444:	e13ffe15 	stw	r4,-8(fp)
10111448:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
1011144c:	e0bfff17 	ldw	r2,-4(fp)
10111450:	10840070 	cmpltui	r2,r2,4097
10111454:	1000021e 	bne	r2,zero,10111460 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10111458:	00840004 	movi	r2,4096
1011145c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10111460:	e0fffe17 	ldw	r3,-8(fp)
10111464:	e0bfff17 	ldw	r2,-4(fp)
10111468:	1885883a 	add	r2,r3,r2
1011146c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10111470:	e0bffe17 	ldw	r2,-8(fp)
10111474:	e0bffc15 	stw	r2,-16(fp)
10111478:	00000506 	br	10111490 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
1011147c:	e0bffc17 	ldw	r2,-16(fp)
10111480:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10111484:	e0bffc17 	ldw	r2,-16(fp)
10111488:	10800804 	addi	r2,r2,32
1011148c:	e0bffc15 	stw	r2,-16(fp)
10111490:	e0fffc17 	ldw	r3,-16(fp)
10111494:	e0bffd17 	ldw	r2,-12(fp)
10111498:	18bff836 	bltu	r3,r2,1011147c <__alt_data_end+0xffff147c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
1011149c:	e0bffe17 	ldw	r2,-8(fp)
101114a0:	108007cc 	andi	r2,r2,31
101114a4:	10000226 	beq	r2,zero,101114b0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
101114a8:	e0bffc17 	ldw	r2,-16(fp)
101114ac:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
101114b0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
101114b4:	0001883a 	nop
101114b8:	e037883a 	mov	sp,fp
101114bc:	df000017 	ldw	fp,0(sp)
101114c0:	dec00104 	addi	sp,sp,4
101114c4:	f800283a 	ret

101114c8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101114c8:	defffe04 	addi	sp,sp,-8
101114cc:	df000115 	stw	fp,4(sp)
101114d0:	df000104 	addi	fp,sp,4
101114d4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
101114d8:	e0bfff17 	ldw	r2,-4(fp)
101114dc:	10bffe84 	addi	r2,r2,-6
101114e0:	10c00428 	cmpgeui	r3,r2,16
101114e4:	18001a1e 	bne	r3,zero,10111550 <alt_exception_cause_generated_bad_addr+0x88>
101114e8:	100690ba 	slli	r3,r2,2
101114ec:	00840474 	movhi	r2,4113
101114f0:	10854004 	addi	r2,r2,5376
101114f4:	1885883a 	add	r2,r3,r2
101114f8:	10800017 	ldw	r2,0(r2)
101114fc:	1000683a 	jmp	r2
10111500:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111504:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111508:	10111550 	cmplti	zero,r2,17493
1011150c:	10111550 	cmplti	zero,r2,17493
10111510:	10111550 	cmplti	zero,r2,17493
10111514:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111518:	10111548 	cmpgei	zero,r2,17493
1011151c:	10111550 	cmplti	zero,r2,17493
10111520:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111524:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111528:	10111550 	cmplti	zero,r2,17493
1011152c:	10111540 	call	11011154 <__alt_data_end+0xef1154>
10111530:	10111548 	cmpgei	zero,r2,17493
10111534:	10111550 	cmplti	zero,r2,17493
10111538:	10111550 	cmplti	zero,r2,17493
1011153c:	10111540 	call	11011154 <__alt_data_end+0xef1154>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10111540:	00800044 	movi	r2,1
10111544:	00000306 	br	10111554 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10111548:	0005883a 	mov	r2,zero
1011154c:	00000106 	br	10111554 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10111550:	0005883a 	mov	r2,zero
  }
}
10111554:	e037883a 	mov	sp,fp
10111558:	df000017 	ldw	fp,0(sp)
1011155c:	dec00104 	addi	sp,sp,4
10111560:	f800283a 	ret

10111564 <atexit>:
10111564:	200b883a 	mov	r5,r4
10111568:	000f883a 	mov	r7,zero
1011156c:	000d883a 	mov	r6,zero
10111570:	0009883a 	mov	r4,zero
10111574:	011162c1 	jmpi	1011162c <__register_exitproc>

10111578 <exit>:
10111578:	defffe04 	addi	sp,sp,-8
1011157c:	000b883a 	mov	r5,zero
10111580:	dc000015 	stw	r16,0(sp)
10111584:	dfc00115 	stw	ra,4(sp)
10111588:	2021883a 	mov	r16,r4
1011158c:	01117440 	call	10111744 <__call_exitprocs>
10111590:	00840474 	movhi	r2,4113
10111594:	108e0f04 	addi	r2,r2,14396
10111598:	11000017 	ldw	r4,0(r2)
1011159c:	20800f17 	ldw	r2,60(r4)
101115a0:	10000126 	beq	r2,zero,101115a8 <exit+0x30>
101115a4:	103ee83a 	callr	r2
101115a8:	8009883a 	mov	r4,r16
101115ac:	01118c40 	call	101118c4 <_exit>

101115b0 <memcmp>:
101115b0:	01c000c4 	movi	r7,3
101115b4:	3980192e 	bgeu	r7,r6,1011161c <memcmp+0x6c>
101115b8:	2144b03a 	or	r2,r4,r5
101115bc:	11c4703a 	and	r2,r2,r7
101115c0:	10000f26 	beq	r2,zero,10111600 <memcmp+0x50>
101115c4:	20800003 	ldbu	r2,0(r4)
101115c8:	28c00003 	ldbu	r3,0(r5)
101115cc:	10c0151e 	bne	r2,r3,10111624 <memcmp+0x74>
101115d0:	31bfff84 	addi	r6,r6,-2
101115d4:	01ffffc4 	movi	r7,-1
101115d8:	00000406 	br	101115ec <memcmp+0x3c>
101115dc:	20800003 	ldbu	r2,0(r4)
101115e0:	28c00003 	ldbu	r3,0(r5)
101115e4:	31bfffc4 	addi	r6,r6,-1
101115e8:	10c00e1e 	bne	r2,r3,10111624 <memcmp+0x74>
101115ec:	21000044 	addi	r4,r4,1
101115f0:	29400044 	addi	r5,r5,1
101115f4:	31fff91e 	bne	r6,r7,101115dc <__alt_data_end+0xffff15dc>
101115f8:	0005883a 	mov	r2,zero
101115fc:	f800283a 	ret
10111600:	20c00017 	ldw	r3,0(r4)
10111604:	28800017 	ldw	r2,0(r5)
10111608:	18bfee1e 	bne	r3,r2,101115c4 <__alt_data_end+0xffff15c4>
1011160c:	31bfff04 	addi	r6,r6,-4
10111610:	21000104 	addi	r4,r4,4
10111614:	29400104 	addi	r5,r5,4
10111618:	39bff936 	bltu	r7,r6,10111600 <__alt_data_end+0xffff1600>
1011161c:	303fe91e 	bne	r6,zero,101115c4 <__alt_data_end+0xffff15c4>
10111620:	003ff506 	br	101115f8 <__alt_data_end+0xffff15f8>
10111624:	10c5c83a 	sub	r2,r2,r3
10111628:	f800283a 	ret

1011162c <__register_exitproc>:
1011162c:	defffa04 	addi	sp,sp,-24
10111630:	dc000315 	stw	r16,12(sp)
10111634:	04040474 	movhi	r16,4113
10111638:	840e0f04 	addi	r16,r16,14396
1011163c:	80c00017 	ldw	r3,0(r16)
10111640:	dc400415 	stw	r17,16(sp)
10111644:	dfc00515 	stw	ra,20(sp)
10111648:	18805217 	ldw	r2,328(r3)
1011164c:	2023883a 	mov	r17,r4
10111650:	10003726 	beq	r2,zero,10111730 <__register_exitproc+0x104>
10111654:	10c00117 	ldw	r3,4(r2)
10111658:	010007c4 	movi	r4,31
1011165c:	20c00e16 	blt	r4,r3,10111698 <__register_exitproc+0x6c>
10111660:	1a000044 	addi	r8,r3,1
10111664:	8800221e 	bne	r17,zero,101116f0 <__register_exitproc+0xc4>
10111668:	18c00084 	addi	r3,r3,2
1011166c:	18c7883a 	add	r3,r3,r3
10111670:	18c7883a 	add	r3,r3,r3
10111674:	12000115 	stw	r8,4(r2)
10111678:	10c7883a 	add	r3,r2,r3
1011167c:	19400015 	stw	r5,0(r3)
10111680:	0005883a 	mov	r2,zero
10111684:	dfc00517 	ldw	ra,20(sp)
10111688:	dc400417 	ldw	r17,16(sp)
1011168c:	dc000317 	ldw	r16,12(sp)
10111690:	dec00604 	addi	sp,sp,24
10111694:	f800283a 	ret
10111698:	00800034 	movhi	r2,0
1011169c:	10800004 	addi	r2,r2,0
101116a0:	10002626 	beq	r2,zero,1011173c <__register_exitproc+0x110>
101116a4:	01006404 	movi	r4,400
101116a8:	d9400015 	stw	r5,0(sp)
101116ac:	d9800115 	stw	r6,4(sp)
101116b0:	d9c00215 	stw	r7,8(sp)
101116b4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101116b8:	d9400017 	ldw	r5,0(sp)
101116bc:	d9800117 	ldw	r6,4(sp)
101116c0:	d9c00217 	ldw	r7,8(sp)
101116c4:	10001d26 	beq	r2,zero,1011173c <__register_exitproc+0x110>
101116c8:	81000017 	ldw	r4,0(r16)
101116cc:	10000115 	stw	zero,4(r2)
101116d0:	02000044 	movi	r8,1
101116d4:	22405217 	ldw	r9,328(r4)
101116d8:	0007883a 	mov	r3,zero
101116dc:	12400015 	stw	r9,0(r2)
101116e0:	20805215 	stw	r2,328(r4)
101116e4:	10006215 	stw	zero,392(r2)
101116e8:	10006315 	stw	zero,396(r2)
101116ec:	883fde26 	beq	r17,zero,10111668 <__alt_data_end+0xffff1668>
101116f0:	18c9883a 	add	r4,r3,r3
101116f4:	2109883a 	add	r4,r4,r4
101116f8:	1109883a 	add	r4,r2,r4
101116fc:	21802215 	stw	r6,136(r4)
10111700:	01800044 	movi	r6,1
10111704:	12406217 	ldw	r9,392(r2)
10111708:	30cc983a 	sll	r6,r6,r3
1011170c:	4992b03a 	or	r9,r9,r6
10111710:	12406215 	stw	r9,392(r2)
10111714:	21c04215 	stw	r7,264(r4)
10111718:	01000084 	movi	r4,2
1011171c:	893fd21e 	bne	r17,r4,10111668 <__alt_data_end+0xffff1668>
10111720:	11006317 	ldw	r4,396(r2)
10111724:	218cb03a 	or	r6,r4,r6
10111728:	11806315 	stw	r6,396(r2)
1011172c:	003fce06 	br	10111668 <__alt_data_end+0xffff1668>
10111730:	18805304 	addi	r2,r3,332
10111734:	18805215 	stw	r2,328(r3)
10111738:	003fc606 	br	10111654 <__alt_data_end+0xffff1654>
1011173c:	00bfffc4 	movi	r2,-1
10111740:	003fd006 	br	10111684 <__alt_data_end+0xffff1684>

10111744 <__call_exitprocs>:
10111744:	defff504 	addi	sp,sp,-44
10111748:	df000915 	stw	fp,36(sp)
1011174c:	dd400615 	stw	r21,24(sp)
10111750:	dc800315 	stw	r18,12(sp)
10111754:	dfc00a15 	stw	ra,40(sp)
10111758:	ddc00815 	stw	r23,32(sp)
1011175c:	dd800715 	stw	r22,28(sp)
10111760:	dd000515 	stw	r20,20(sp)
10111764:	dcc00415 	stw	r19,16(sp)
10111768:	dc400215 	stw	r17,8(sp)
1011176c:	dc000115 	stw	r16,4(sp)
10111770:	d9000015 	stw	r4,0(sp)
10111774:	2839883a 	mov	fp,r5
10111778:	04800044 	movi	r18,1
1011177c:	057fffc4 	movi	r21,-1
10111780:	00840474 	movhi	r2,4113
10111784:	108e0f04 	addi	r2,r2,14396
10111788:	12000017 	ldw	r8,0(r2)
1011178c:	45005217 	ldw	r20,328(r8)
10111790:	44c05204 	addi	r19,r8,328
10111794:	a0001c26 	beq	r20,zero,10111808 <__call_exitprocs+0xc4>
10111798:	a0800117 	ldw	r2,4(r20)
1011179c:	15ffffc4 	addi	r23,r2,-1
101117a0:	b8000d16 	blt	r23,zero,101117d8 <__call_exitprocs+0x94>
101117a4:	14000044 	addi	r16,r2,1
101117a8:	8421883a 	add	r16,r16,r16
101117ac:	8421883a 	add	r16,r16,r16
101117b0:	84402004 	addi	r17,r16,128
101117b4:	a463883a 	add	r17,r20,r17
101117b8:	a421883a 	add	r16,r20,r16
101117bc:	e0001e26 	beq	fp,zero,10111838 <__call_exitprocs+0xf4>
101117c0:	80804017 	ldw	r2,256(r16)
101117c4:	e0801c26 	beq	fp,r2,10111838 <__call_exitprocs+0xf4>
101117c8:	bdffffc4 	addi	r23,r23,-1
101117cc:	843fff04 	addi	r16,r16,-4
101117d0:	8c7fff04 	addi	r17,r17,-4
101117d4:	bd7ff91e 	bne	r23,r21,101117bc <__alt_data_end+0xffff17bc>
101117d8:	00800034 	movhi	r2,0
101117dc:	10800004 	addi	r2,r2,0
101117e0:	10000926 	beq	r2,zero,10111808 <__call_exitprocs+0xc4>
101117e4:	a0800117 	ldw	r2,4(r20)
101117e8:	1000301e 	bne	r2,zero,101118ac <__call_exitprocs+0x168>
101117ec:	a0800017 	ldw	r2,0(r20)
101117f0:	10003226 	beq	r2,zero,101118bc <__call_exitprocs+0x178>
101117f4:	a009883a 	mov	r4,r20
101117f8:	98800015 	stw	r2,0(r19)
101117fc:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10111800:	9d000017 	ldw	r20,0(r19)
10111804:	a03fe41e 	bne	r20,zero,10111798 <__alt_data_end+0xffff1798>
10111808:	dfc00a17 	ldw	ra,40(sp)
1011180c:	df000917 	ldw	fp,36(sp)
10111810:	ddc00817 	ldw	r23,32(sp)
10111814:	dd800717 	ldw	r22,28(sp)
10111818:	dd400617 	ldw	r21,24(sp)
1011181c:	dd000517 	ldw	r20,20(sp)
10111820:	dcc00417 	ldw	r19,16(sp)
10111824:	dc800317 	ldw	r18,12(sp)
10111828:	dc400217 	ldw	r17,8(sp)
1011182c:	dc000117 	ldw	r16,4(sp)
10111830:	dec00b04 	addi	sp,sp,44
10111834:	f800283a 	ret
10111838:	a0800117 	ldw	r2,4(r20)
1011183c:	80c00017 	ldw	r3,0(r16)
10111840:	10bfffc4 	addi	r2,r2,-1
10111844:	15c01426 	beq	r2,r23,10111898 <__call_exitprocs+0x154>
10111848:	80000015 	stw	zero,0(r16)
1011184c:	183fde26 	beq	r3,zero,101117c8 <__alt_data_end+0xffff17c8>
10111850:	95c8983a 	sll	r4,r18,r23
10111854:	a0806217 	ldw	r2,392(r20)
10111858:	a5800117 	ldw	r22,4(r20)
1011185c:	2084703a 	and	r2,r4,r2
10111860:	10000b26 	beq	r2,zero,10111890 <__call_exitprocs+0x14c>
10111864:	a0806317 	ldw	r2,396(r20)
10111868:	2088703a 	and	r4,r4,r2
1011186c:	20000c1e 	bne	r4,zero,101118a0 <__call_exitprocs+0x15c>
10111870:	89400017 	ldw	r5,0(r17)
10111874:	d9000017 	ldw	r4,0(sp)
10111878:	183ee83a 	callr	r3
1011187c:	a0800117 	ldw	r2,4(r20)
10111880:	15bfbf1e 	bne	r2,r22,10111780 <__alt_data_end+0xffff1780>
10111884:	98800017 	ldw	r2,0(r19)
10111888:	153fcf26 	beq	r2,r20,101117c8 <__alt_data_end+0xffff17c8>
1011188c:	003fbc06 	br	10111780 <__alt_data_end+0xffff1780>
10111890:	183ee83a 	callr	r3
10111894:	003ff906 	br	1011187c <__alt_data_end+0xffff187c>
10111898:	a5c00115 	stw	r23,4(r20)
1011189c:	003feb06 	br	1011184c <__alt_data_end+0xffff184c>
101118a0:	89000017 	ldw	r4,0(r17)
101118a4:	183ee83a 	callr	r3
101118a8:	003ff406 	br	1011187c <__alt_data_end+0xffff187c>
101118ac:	a0800017 	ldw	r2,0(r20)
101118b0:	a027883a 	mov	r19,r20
101118b4:	1029883a 	mov	r20,r2
101118b8:	003fb606 	br	10111794 <__alt_data_end+0xffff1794>
101118bc:	0005883a 	mov	r2,zero
101118c0:	003ffb06 	br	101118b0 <__alt_data_end+0xffff18b0>

101118c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101118c4:	defffd04 	addi	sp,sp,-12
101118c8:	df000215 	stw	fp,8(sp)
101118cc:	df000204 	addi	fp,sp,8
101118d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101118d4:	0001883a 	nop
101118d8:	e0bfff17 	ldw	r2,-4(fp)
101118dc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101118e0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101118e4:	10000226 	beq	r2,zero,101118f0 <_exit+0x2c>
    ALT_SIM_FAIL();
101118e8:	002af070 	cmpltui	zero,zero,43969
101118ec:	00000106 	br	101118f4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101118f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101118f4:	003fff06 	br	101118f4 <__alt_data_end+0xffff18f4>
