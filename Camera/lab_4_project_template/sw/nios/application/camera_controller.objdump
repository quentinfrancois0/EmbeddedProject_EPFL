
camera_controller.elf:     file format elf32-littlenios2
camera_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x000112e4 memsz 0x000112e4 flags r-x
    LOAD off    0x00012304 vaddr 0x10111304 paddr 0x10112df0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000148dc vaddr 0x101148dc paddr 0x101148dc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010da4  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000031c  10110fe8  10110fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10111304  10112df0  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  101148dc  101148dc  000148dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10114a3c  10114a3c  00013df0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013df0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ff8  00000000  00000000  00013e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000283e5  00000000  00000000  00014e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a141  00000000  00000000  0003d1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c98a  00000000  00000000  00047336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026c0  00000000  00000000  00053cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d7c  00000000  00000000  00056380  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018673  00000000  00000000  0005a0fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00072770  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001988  00000000  00000000  000727d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00077802  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00077805  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00077811  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00077812  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00077813  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007781e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00077829  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00077834  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  0007783e  2**0
                  CONTENTS, READONLY
 26 .jdi          000049d7  00000000  00000000  00077883  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     002b16be  00000000  00000000  0007c25a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
10110fe8 l    d  .rodata	00000000 .rodata
10111304 l    d  .rwdata	00000000 .rwdata
101148dc l    d  .bss	00000000 .bss
10114a3c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Temp/EmbeddedProject_EPFL/Camera/lab_4_project_template/sw/nios/camera_controller_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008a4 l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000c8 write_frame_line_blank_reg
101005f4 l     F .text	000000cc write_line_line_blank_reg
101006c0 l     F .text	000000c8 write_line_frame_blank_reg
10100788 l     F .text	0000002c read_frame_width_reg
101007b4 l     F .text	00000030 read_frame_height_reg
101007e4 l     F .text	00000030 read_frame_frame_blank_reg
10100814 l     F .text	00000030 read_frame_line_blank_reg
10100844 l     F .text	00000030 read_line_line_blank_reg
10100874 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
10100cc0 l     F .text	00000034 i2c_usleep
10100cf4 l     F .text	00000044 wait_end_of_transfer
10100d38 l     F .text	00000070 set_data_control
10100da8 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10101a2c l     F .text	00000008 __fp_unlock
10101a40 l     F .text	0000019c __sinit.part.1
10101bdc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
10111304 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
1010362c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1011104e l     O .rodata	00000010 zeroes.4404
10105bc0 l     F .text	000000bc __sbprintf
1011105e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10105e84 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
10111b50 l     O .rwdata	00000020 lc_ctype_charset
10111b30 l     O .rwdata	00000020 lc_message_charset
10111b70 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
1011108c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10109934 l     F .text	000000fc __sprint_r.part.0
101111c0 l     O .rodata	00000010 blanks.4348
101111b0 l     O .rodata	00000010 zeroes.4349
1010aec0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010e6a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e7c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e7ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e8ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010e9e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010eacc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010ecb4 l     F .text	00000050 alt_get_errno
1010ed04 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010ef28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112de0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1010f1b8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010f300 l     F .text	00000038 alt_dev_reg
10111d50 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f5e4 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010f7f0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10110110 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110820 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10114910 g     O .bss	00000004 alt_instruction_exception_handler
10109010 g     F .text	00000074 _mprec_log10
101090fc g     F .text	0000008c __any_on
10107c74 g     F .text	00000054 _isatty_r
10111098 g     O .rodata	00000028 __mprec_tinytens
1010ebf0 g     F .text	0000007c alt_main
1011493c g     O .bss	00000100 alt_irq
10107da4 g     F .text	00000060 _lseek_r
10112df0 g       *ABS*	00000000 __flash_rwdata_start
1010770c g     F .text	000000ac __sflags
1010d1cc g     F .text	00000088 .hidden __eqdf2
10114a3c g       *ABS*	00000000 __alt_heap_start
101035f0 g     F .text	0000003c printf
1010b3a0 g     F .text	0000009c _wcrtomb_r
10103948 g     F .text	0000005c __sseek
10101d7c g     F .text	00000010 __sinit
1010b248 g     F .text	00000140 __swbuf_r
10107cc8 g     F .text	0000007c _setlocale_r
10101be4 g     F .text	00000068 __sfmoreglue
1010ec90 g     F .text	00000024 __malloc_unlock
10108030 g     F .text	0000015c memmove
10101d64 g     F .text	00000018 _cleanup
1010818c g     F .text	000000a8 _Balloc
1010d254 g     F .text	000000dc .hidden __gtdf2
10110b04 g     F .text	00000024 altera_nios2_gen2_irq_init
10100f1c g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
1010278c g     F .text	0000005c _fstat_r
101148dc g     O .bss	00000004 errno
101038c4 g     F .text	00000008 __seofread
101148fc g     O .bss	00000004 alt_argv
1011adb0 g       *ABS*	00000000 _gp
1010f188 g     F .text	00000030 usleep
10111bd0 g     O .rwdata	00000180 alt_fd_list
101102c4 g     F .text	00000090 alt_find_dev
10107ee8 g     F .text	00000148 memcpy
10101a34 g     F .text	0000000c _cleanup_r
1010e4b8 g     F .text	000000dc .hidden __floatsidf
10101190 g     F .text	00000194 i2c_write_array
101108e4 g     F .text	0000007c alt_io_redirect
1010d330 g     F .text	000000f4 .hidden __ltdf2
10110fe8 g       *ABS*	00000000 __DTOR_END__
10110bb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
1010974c g     F .text	00000074 __fpclassifyd
10108f6c g     F .text	000000a4 __ratio
1010aea4 g     F .text	0000001c __vfiprintf_internal
1010f9f0 g     F .text	0000021c altera_avalon_jtag_uart_read
101035c0 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009cc g     F .text	00000108 cmos_sensor_output_generator_configure
101015c4 g     F .text	00000064 .hidden __udivsi3
1010e93c g     F .text	000000a4 isatty
101110e8 g     O .rodata	000000c8 __mprec_tens
10107d44 g     F .text	0000000c __locale_charset
10110b28 g     F .text	00000090 alt_icache_flush
101148e8 g     O .bss	00000004 __malloc_top_pad
10112dc0 g     O .rwdata	00000004 __mb_cur_max
10107d74 g     F .text	0000000c _localeconv_r
10108598 g     F .text	0000003c __i2b
101077b8 g     F .text	000004bc __sfvwrite_r
1010381c g     F .text	00000054 _sbrk_r
10109188 g     F .text	00000060 _read_r
10112dd8 g     O .rwdata	00000004 alt_max_fd
10101680 g     F .text	000000f0 _fclose_r
101019fc g     F .text	00000030 fflush
101148e4 g     O .bss	00000004 __malloc_max_sbrked_mem
1010c038 g     F .text	000008ac .hidden __adddf3
10108d14 g     F .text	0000010c __b2d
1010bb00 g     F .text	00000538 .hidden __umoddi3
1010eb1c g     F .text	000000d4 lseek
10112db0 g     O .rwdata	00000004 _global_impure_ptr
101091e8 g     F .text	00000564 _realloc_r
10114a3c g       *ABS*	00000000 __bss_end
10110730 g     F .text	000000f0 alt_iic_isr_register
101109fc g     F .text	00000108 alt_tick
1010b588 g     F .text	00000578 .hidden __udivdi3
1010b1a4 g     F .text	00000024 _fputwc_r
101110c0 g     O .rodata	00000028 __mprec_bigtens
1010837c g     F .text	00000104 __s2b
1010e594 g     F .text	000000a8 .hidden __floatunsidf
10108a54 g     F .text	00000060 __mcmp
10101d9c g     F .text	00000018 __fp_lock_all
101106e4 g     F .text	0000004c alt_ic_irq_enabled
10110960 g     F .text	0000009c alt_alarm_stop
10100b0c g     F .text	00000038 cmos_sensor_output_generator_stop
10114904 g     O .bss	00000004 alt_irq_active
1010232c g     F .text	00000444 _fseeko_r
101000fc g     F .exceptions	000000d4 alt_irq_handler
10111ba8 g     O .rwdata	00000028 alt_dev_null
101100c8 g     F .text	00000048 alt_dcache_flush_all
10108480 g     F .text	00000068 __hi0bits
1010e438 g     F .text	00000080 .hidden __fixdfsi
10100ad4 g     F .text	00000038 cmos_sensor_output_generator_start
10112df0 g       *ABS*	00000000 __ram_rwdata_end
10112dd0 g     O .rwdata	00000008 alt_dev_list
1010f208 g     F .text	000000f8 write
10111304 g       *ABS*	00000000 __ram_rodata_end
1010e83c g     F .text	000000b0 fstat
10100e0c g     F .text	0000002c i2c_inst
1010d330 g     F .text	000000f4 .hidden __ledf2
101087cc g     F .text	00000140 __pow5mult
10109a48 g     F .text	0000145c ___vfiprintf_internal_r
101148f4 g     O .bss	00000004 __nlocale_changed
10101628 g     F .text	00000058 .hidden __umodsi3
10114a3c g       *ABS*	00000000 end
10102770 g     F .text	0000001c fseeko
10102310 g     F .text	0000001c fseek
1010f51c g     F .text	000000c8 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
10110fe8 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010e63c g     F .text	00000064 .hidden __clzsi2
1010fc0c g     F .text	00000224 altera_avalon_jtag_uart_write
10101d8c g     F .text	00000004 __sfp_lock_acquire
10107e04 g     F .text	000000e4 memchr
101039ac g     F .text	000021f8 ___vfprintf_internal_r
10101ffc g     F .text	00000310 _free_r
101008d8 g     F .text	00000078 cmos_sensor_output_generator_inst
10107d50 g     F .text	00000010 __locale_mb_cur_max
10110e34 g     F .text	00000180 __call_exitprocs
101148f0 g     O .bss	00000004 __mlocale_changed
10112db8 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
10114908 g     O .bss	00000004 _alt_tick_rate
1010890c g     F .text	00000148 __lshift
1011490c g     O .bss	00000004 _alt_nticks
1010ef78 g     F .text	000000fc read
1010f370 g     F .text	00000048 alt_sys_init
10103560 g     F .text	00000060 _open_r
10100e9c g     F .text	00000080 i2c_configure
10110d1c g     F .text	00000118 __register_exitproc
101085d4 g     F .text	000001f8 __multiply
1010f898 g     F .text	00000068 altera_avalon_jtag_uart_close
10111304 g       *ABS*	00000000 __ram_rwdata_start
10110fe8 g       *ABS*	00000000 __ram_rodata_start
10114914 g     O .bss	00000028 __malloc_current_mallinfo
10108e20 g     F .text	0000014c __d2b
1010f3b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10110468 g     F .text	000000b4 alt_get_fd
1010ff70 g     F .text	00000158 alt_busy_sleep
10105e30 g     F .text	00000054 _close_r
10110ca0 g     F .text	0000007c memcmp
1010f478 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10114a3c g       *ABS*	00000000 __alt_stack_base
1010f4c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102970 g     F .text	000000cc _fwrite_r
10105cdc g     F .text	00000154 __swsetup_r
1010c8e4 g     F .text	000008e8 .hidden __divdf3
10101c4c g     F .text	00000118 __sfp
10109084 g     F .text	00000078 __copybits
10111728 g     O .rwdata	00000408 __malloc_av_
10101d98 g     F .text	00000004 __sinit_lock_release
1010d424 g     F .text	00000718 .hidden __muldf3
10103870 g     F .text	00000054 __sread
10110354 g     F .text	00000114 alt_find_file
10110160 g     F .text	000000a4 alt_dev_llist_insert
1010ec6c g     F .text	00000024 __malloc_lock
1010f0d8 g     F .text	000000b0 sbrk
101019a0 g     F .text	0000005c _fflush_r
1010af7c g     F .text	000000c4 _calloc_r
10101ec0 g     F .text	00000018 fopen
101148dc g       *ABS*	00000000 __bss_start
10103438 g     F .text	00000128 memset
10100b44 g     F .text	0000017c main
10114900 g     O .bss	00000004 alt_envp
101148e0 g     O .bss	00000004 __malloc_max_total_mem
1010f418 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10101048 g     F .text	00000148 i2c_read
1010b388 g     F .text	00000018 __swbuf
101039a4 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10101770 g     F .text	00000014 fclose
10106084 g     F .text	00001688 _dtoa_r
10102c2c g     F .text	0000080c _malloc_r
1010b4fc g     F .text	00000030 __ascii_wctomb
10112ddc g     O .rwdata	00000004 alt_errno
101027e8 g     F .text	000000c4 _fwalk
101014cc g     F .text	00000084 .hidden __divsi3
10101ed8 g     F .text	00000124 _malloc_trim_r
10110fe8 g       *ABS*	00000000 __CTOR_END__
101097c0 g     F .text	000000dc strcmp
10110fe8 g       *ABS*	00000000 __flash_rodata_start
10110fe8 g       *ABS*	00000000 __DTOR_LIST__
1010d1cc g     F .text	00000088 .hidden __nedf2
1010f338 g     F .text	00000038 alt_irq_init
1010f074 g     F .text	00000064 alt_release_fd
101111d0 g     O .rodata	00000100 .hidden __clz_tab
101148ec g     O .bss	00000004 _PathLocale
10110c54 g     F .text	00000014 atexit
10105c7c g     F .text	00000060 _write_r
10107d80 g     F .text	00000018 setlocale
10112db4 g     O .rwdata	00000004 _impure_ptr
101148f8 g     O .bss	00000004 alt_argc
10101784 g     F .text	0000021c __sflush_r
10110264 g     F .text	00000060 _do_dtors
10107d6c g     F .text	00000008 __locale_cjk_lang
1010230c g     F .text	00000004 _fseek_r
10100e38 g     F .text	00000064 i2c_init
10103648 g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
10108cb0 g     F .text	00000064 __ulp
10101db4 g     F .text	00000018 __fp_unlock_all
10112dc8 g     O .rwdata	00000008 alt_fs_list
10100020 g       *ABS*	00000000 __ram_exceptions_start
10107d98 g     F .text	0000000c localeconv
10110550 g     F .text	00000050 alt_ic_isr_register
10102a3c g     F .text	00000034 fwrite
10112df0 g       *ABS*	00000000 _edata
10114a3c g       *ABS*	00000000 _end
1010b040 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100950 g     F .text	0000007c cmos_sensor_output_generator_init
1010f900 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10110640 g     F .text	000000a4 alt_ic_irq_disable
101038cc g     F .text	0000007c __swrite
10112dbc g     O .rwdata	00000004 __malloc_trim_threshold
10107d60 g     F .text	0000000c __locale_msgcharset
10110c68 g     F .text	00000038 exit
101028ac g     F .text	000000c4 _fwalk_reent
10108ab4 g     F .text	000001fc __mdiff
10101550 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10101d90 g     F .text	00000004 __sfp_lock_release
10101dcc g     F .text	000000f4 _fopen_r
10110fb4 g     F .text	00000034 _exit
1010fe30 g     F .text	00000140 alt_alarm_start
10102a70 g     F .text	000001bc __smakebuf_r
10101324 g     F .text	000001a8 i2c_read_array
1010989c g     F .text	00000098 strlen
1010edd0 g     F .text	00000158 open
1010d254 g     F .text	000000dc .hidden __gedf2
10112dc4 g     O .rwdata	00000004 __wctomb
10109a30 g     F .text	00000018 __sprint_r
1011051c g     F .text	00000034 alt_icache_flush_all
10112de4 g     O .rwdata	00000004 alt_priority_mask
101105a0 g     F .text	000000a0 alt_ic_irq_enable
10105ba4 g     F .text	0000001c __vfprintf_internal
1010b52c g     F .text	0000005c _wctomb_r
1010db3c g     F .text	000008fc .hidden __subdf3
101084e8 g     F .text	000000b0 __lo0bits
10112de8 g     O .rwdata	00000008 alt_alarm_list
10110204 g     F .text	00000060 _do_ctors
1010b43c g     F .text	000000c0 wcrtomb
1010e6f0 g     F .text	000000d0 close
1010ea48 g     F .text	00000084 alt_load
1010b1c8 g     F .text	00000080 fputwc
10101d94 g     F .text	00000004 __sinit_lock_acquire
1010825c g     F .text	00000120 __multadd
10108234 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__reset-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10924f04 	addi	r2,r2,18748
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10924f04 	addi	r2,r2,18748
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a6d817 	ldw	r2,-25760(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a6d817 	ldw	r2,-25760(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6ab6c14 	ori	gp,gp,44464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10923714 	ori	r2,r2,18652

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d28f14 	ori	r3,r3,19004

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010ea480 	call	1010ea48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010ebf00 	call	1010ebf0 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	1004c03a 	cmpne	r2,r2,zero
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008a40 	call	101008a4 <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	1004c03a 	cmpne	r2,r2,zero
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008a40 	call	101008a4 <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	1004c03a 	cmpne	r2,r2,zero
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008a40 	call	101008a4 <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	00800044 	movi	r2,1
10100568:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
1010056c:	e0bfff17 	ldw	r2,-4(fp)
10100570:	e0fffc17 	ldw	r3,-16(fp)
10100574:	1885403a 	cmpgeu	r2,r3,r2
10100578:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010057c:	e0bffd03 	ldbu	r2,-12(fp)
10100580:	10000826 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
10100584:	e0bffd43 	ldbu	r2,-11(fp)
10100588:	10000626 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010058c:	e13ffe17 	ldw	r4,-8(fp)
10100590:	01008a40 	call	101008a4 <is_idle>
10100594:	10803fcc 	andi	r2,r2,255
10100598:	10000226 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010059c:	00800044 	movi	r2,1
101005a0:	00000106 	br	101005a8 <write_frame_line_blank_reg+0x7c>
101005a4:	0005883a 	mov	r2,zero
101005a8:	e0bffd85 	stb	r2,-10(fp)
101005ac:	e0bffd83 	ldbu	r2,-10(fp)
101005b0:	1080004c 	andi	r2,r2,1
101005b4:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005b8:	e0bffd83 	ldbu	r2,-10(fp)
101005bc:	10000726 	beq	r2,zero,101005dc <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c0:	e0bffe17 	ldw	r2,-8(fp)
101005c4:	10800017 	ldw	r2,0(r2)
101005c8:	10800304 	addi	r2,r2,12
101005cc:	e0ffff17 	ldw	r3,-4(fp)
101005d0:	10c00035 	stwio	r3,0(r2)
        return true;
101005d4:	00800044 	movi	r2,1
101005d8:	00000106 	br	101005e0 <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
101005dc:	0005883a 	mov	r2,zero
    }
}
101005e0:	e037883a 	mov	sp,fp
101005e4:	dfc00117 	ldw	ra,4(sp)
101005e8:	df000017 	ldw	fp,0(sp)
101005ec:	dec00204 	addi	sp,sp,8
101005f0:	f800283a 	ret

101005f4 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f4:	defffa04 	addi	sp,sp,-24
101005f8:	dfc00515 	stw	ra,20(sp)
101005fc:	df000415 	stw	fp,16(sp)
10100600:	df000404 	addi	fp,sp,16
10100604:	e13ffe15 	stw	r4,-8(fp)
10100608:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
1010060c:	e0bffe17 	ldw	r2,-8(fp)
10100610:	10c00217 	ldw	r3,8(r2)
10100614:	e0bffe17 	ldw	r2,-8(fp)
10100618:	10800317 	ldw	r2,12(r2)
1010061c:	100b883a 	mov	r5,r2
10100620:	1809883a 	mov	r4,r3
10100624:	01002900 	call	10100290 <max>
10100628:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
1010062c:	e0bfff17 	ldw	r2,-4(fp)
10100630:	1004c03a 	cmpne	r2,r2,zero
10100634:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
10100638:	e0bfff17 	ldw	r2,-4(fp)
1010063c:	e0fffc17 	ldw	r3,-16(fp)
10100640:	1885403a 	cmpgeu	r2,r3,r2
10100644:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100648:	e0bffd03 	ldbu	r2,-12(fp)
1010064c:	10000826 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100650:	e0bffd43 	ldbu	r2,-11(fp)
10100654:	10000626 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100658:	e13ffe17 	ldw	r4,-8(fp)
1010065c:	01008a40 	call	101008a4 <is_idle>
10100660:	10803fcc 	andi	r2,r2,255
10100664:	10000226 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100668:	00800044 	movi	r2,1
1010066c:	00000106 	br	10100674 <write_line_line_blank_reg+0x80>
10100670:	0005883a 	mov	r2,zero
10100674:	e0bffd85 	stb	r2,-10(fp)
10100678:	e0bffd83 	ldbu	r2,-10(fp)
1010067c:	1080004c 	andi	r2,r2,1
10100680:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100684:	e0bffd83 	ldbu	r2,-10(fp)
10100688:	10000726 	beq	r2,zero,101006a8 <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
1010068c:	e0bffe17 	ldw	r2,-8(fp)
10100690:	10800017 	ldw	r2,0(r2)
10100694:	10800404 	addi	r2,r2,16
10100698:	e0ffff17 	ldw	r3,-4(fp)
1010069c:	10c00035 	stwio	r3,0(r2)
        return true;
101006a0:	00800044 	movi	r2,1
101006a4:	00000106 	br	101006ac <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006a8:	0005883a 	mov	r2,zero
    }
}
101006ac:	e037883a 	mov	sp,fp
101006b0:	dfc00117 	ldw	ra,4(sp)
101006b4:	df000017 	ldw	fp,0(sp)
101006b8:	dec00204 	addi	sp,sp,8
101006bc:	f800283a 	ret

101006c0 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c0:	defffa04 	addi	sp,sp,-24
101006c4:	dfc00515 	stw	ra,20(sp)
101006c8:	df000415 	stw	fp,16(sp)
101006cc:	df000404 	addi	fp,sp,16
101006d0:	e13ffe15 	stw	r4,-8(fp)
101006d4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006d8:	e0bffe17 	ldw	r2,-8(fp)
101006dc:	10c00217 	ldw	r3,8(r2)
101006e0:	e0bffe17 	ldw	r2,-8(fp)
101006e4:	10800317 	ldw	r2,12(r2)
101006e8:	100b883a 	mov	r5,r2
101006ec:	1809883a 	mov	r4,r3
101006f0:	01002900 	call	10100290 <max>
101006f4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006f8:	00800044 	movi	r2,1
101006fc:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100700:	e0bfff17 	ldw	r2,-4(fp)
10100704:	e0fffc17 	ldw	r3,-16(fp)
10100708:	1885403a 	cmpgeu	r2,r3,r2
1010070c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100710:	e0bffd03 	ldbu	r2,-12(fp)
10100714:	10000826 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100718:	e0bffd43 	ldbu	r2,-11(fp)
1010071c:	10000626 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100720:	e13ffe17 	ldw	r4,-8(fp)
10100724:	01008a40 	call	101008a4 <is_idle>
10100728:	10803fcc 	andi	r2,r2,255
1010072c:	10000226 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100730:	00800044 	movi	r2,1
10100734:	00000106 	br	1010073c <write_line_frame_blank_reg+0x7c>
10100738:	0005883a 	mov	r2,zero
1010073c:	e0bffd85 	stb	r2,-10(fp)
10100740:	e0bffd83 	ldbu	r2,-10(fp)
10100744:	1080004c 	andi	r2,r2,1
10100748:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010074c:	e0bffd83 	ldbu	r2,-10(fp)
10100750:	10000726 	beq	r2,zero,10100770 <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
10100754:	e0bffe17 	ldw	r2,-8(fp)
10100758:	10800017 	ldw	r2,0(r2)
1010075c:	10800504 	addi	r2,r2,20
10100760:	e0ffff17 	ldw	r3,-4(fp)
10100764:	10c00035 	stwio	r3,0(r2)
        return true;
10100768:	00800044 	movi	r2,1
1010076c:	00000106 	br	10100774 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
10100770:	0005883a 	mov	r2,zero
    }
}
10100774:	e037883a 	mov	sp,fp
10100778:	dfc00117 	ldw	ra,4(sp)
1010077c:	df000017 	ldw	fp,0(sp)
10100780:	dec00204 	addi	sp,sp,8
10100784:	f800283a 	ret

10100788 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100788:	defffe04 	addi	sp,sp,-8
1010078c:	df000115 	stw	fp,4(sp)
10100790:	df000104 	addi	fp,sp,4
10100794:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
10100798:	e0bfff17 	ldw	r2,-4(fp)
1010079c:	10800017 	ldw	r2,0(r2)
101007a0:	10800037 	ldwio	r2,0(r2)
}
101007a4:	e037883a 	mov	sp,fp
101007a8:	df000017 	ldw	fp,0(sp)
101007ac:	dec00104 	addi	sp,sp,4
101007b0:	f800283a 	ret

101007b4 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007b4:	defffe04 	addi	sp,sp,-8
101007b8:	df000115 	stw	fp,4(sp)
101007bc:	df000104 	addi	fp,sp,4
101007c0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007c4:	e0bfff17 	ldw	r2,-4(fp)
101007c8:	10800017 	ldw	r2,0(r2)
101007cc:	10800104 	addi	r2,r2,4
101007d0:	10800037 	ldwio	r2,0(r2)
}
101007d4:	e037883a 	mov	sp,fp
101007d8:	df000017 	ldw	fp,0(sp)
101007dc:	dec00104 	addi	sp,sp,4
101007e0:	f800283a 	ret

101007e4 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007e4:	defffe04 	addi	sp,sp,-8
101007e8:	df000115 	stw	fp,4(sp)
101007ec:	df000104 	addi	fp,sp,4
101007f0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007f4:	e0bfff17 	ldw	r2,-4(fp)
101007f8:	10800017 	ldw	r2,0(r2)
101007fc:	10800204 	addi	r2,r2,8
10100800:	10800037 	ldwio	r2,0(r2)
}
10100804:	e037883a 	mov	sp,fp
10100808:	df000017 	ldw	fp,0(sp)
1010080c:	dec00104 	addi	sp,sp,4
10100810:	f800283a 	ret

10100814 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100814:	defffe04 	addi	sp,sp,-8
10100818:	df000115 	stw	fp,4(sp)
1010081c:	df000104 	addi	fp,sp,4
10100820:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
10100824:	e0bfff17 	ldw	r2,-4(fp)
10100828:	10800017 	ldw	r2,0(r2)
1010082c:	10800304 	addi	r2,r2,12
10100830:	10800037 	ldwio	r2,0(r2)
}
10100834:	e037883a 	mov	sp,fp
10100838:	df000017 	ldw	fp,0(sp)
1010083c:	dec00104 	addi	sp,sp,4
10100840:	f800283a 	ret

10100844 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100844:	defffe04 	addi	sp,sp,-8
10100848:	df000115 	stw	fp,4(sp)
1010084c:	df000104 	addi	fp,sp,4
10100850:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	10800017 	ldw	r2,0(r2)
1010085c:	10800404 	addi	r2,r2,16
10100860:	10800037 	ldwio	r2,0(r2)
}
10100864:	e037883a 	mov	sp,fp
10100868:	df000017 	ldw	fp,0(sp)
1010086c:	dec00104 	addi	sp,sp,4
10100870:	f800283a 	ret

10100874 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100874:	defffe04 	addi	sp,sp,-8
10100878:	df000115 	stw	fp,4(sp)
1010087c:	df000104 	addi	fp,sp,4
10100880:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
10100884:	e0bfff17 	ldw	r2,-4(fp)
10100888:	10800017 	ldw	r2,0(r2)
1010088c:	10800504 	addi	r2,r2,20
10100890:	10800037 	ldwio	r2,0(r2)
}
10100894:	e037883a 	mov	sp,fp
10100898:	df000017 	ldw	fp,0(sp)
1010089c:	dec00104 	addi	sp,sp,4
101008a0:	f800283a 	ret

101008a4 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008a4:	defffe04 	addi	sp,sp,-8
101008a8:	df000115 	stw	fp,4(sp)
101008ac:	df000104 	addi	fp,sp,4
101008b0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008b4:	e0bfff17 	ldw	r2,-4(fp)
101008b8:	10800017 	ldw	r2,0(r2)
101008bc:	10800704 	addi	r2,r2,28
101008c0:	10800037 	ldwio	r2,0(r2)
101008c4:	10800060 	cmpeqi	r2,r2,1
}
101008c8:	e037883a 	mov	sp,fp
101008cc:	df000017 	ldw	fp,0(sp)
101008d0:	dec00104 	addi	sp,sp,4
101008d4:	f800283a 	ret

101008d8 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008d8:	defff704 	addi	sp,sp,-36
101008dc:	df000815 	stw	fp,32(sp)
101008e0:	df000804 	addi	fp,sp,32
101008e4:	e13ffc15 	stw	r4,-16(fp)
101008e8:	e17ffd15 	stw	r5,-12(fp)
101008ec:	3005883a 	mov	r2,r6
101008f0:	e1ffff15 	stw	r7,-4(fp)
101008f4:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
101008f8:	e0bffd17 	ldw	r2,-12(fp)
101008fc:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100900:	e0bffe03 	ldbu	r2,-8(fp)
10100904:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100908:	e0bfff17 	ldw	r2,-4(fp)
1010090c:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100910:	e0800117 	ldw	r2,4(fp)
10100914:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100918:	e0bffc17 	ldw	r2,-16(fp)
1010091c:	e0fff817 	ldw	r3,-32(fp)
10100920:	10c00015 	stw	r3,0(r2)
10100924:	e0fff917 	ldw	r3,-28(fp)
10100928:	10c00115 	stw	r3,4(r2)
1010092c:	e0fffa17 	ldw	r3,-24(fp)
10100930:	10c00215 	stw	r3,8(r2)
10100934:	e0fffb17 	ldw	r3,-20(fp)
10100938:	10c00315 	stw	r3,12(r2)
}
1010093c:	e0bffc17 	ldw	r2,-16(fp)
10100940:	e037883a 	mov	sp,fp
10100944:	df000017 	ldw	fp,0(sp)
10100948:	dec00104 	addi	sp,sp,4
1010094c:	f800283a 	ret

10100950 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100950:	defffd04 	addi	sp,sp,-12
10100954:	dfc00215 	stw	ra,8(sp)
10100958:	df000115 	stw	fp,4(sp)
1010095c:	df000104 	addi	fp,sp,4
10100960:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
10100964:	e13fff17 	ldw	r4,-4(fp)
10100968:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
1010096c:	01400044 	movi	r5,1
10100970:	e13fff17 	ldw	r4,-4(fp)
10100974:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100978:	01400044 	movi	r5,1
1010097c:	e13fff17 	ldw	r4,-4(fp)
10100980:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
10100984:	01400044 	movi	r5,1
10100988:	e13fff17 	ldw	r4,-4(fp)
1010098c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100990:	000b883a 	mov	r5,zero
10100994:	e13fff17 	ldw	r4,-4(fp)
10100998:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
1010099c:	01400044 	movi	r5,1
101009a0:	e13fff17 	ldw	r4,-4(fp)
101009a4:	01005f40 	call	101005f4 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009a8:	000b883a 	mov	r5,zero
101009ac:	e13fff17 	ldw	r4,-4(fp)
101009b0:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
}
101009b4:	0001883a 	nop
101009b8:	e037883a 	mov	sp,fp
101009bc:	dfc00117 	ldw	ra,4(sp)
101009c0:	df000017 	ldw	fp,0(sp)
101009c4:	dec00204 	addi	sp,sp,8
101009c8:	f800283a 	ret

101009cc <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009cc:	defff904 	addi	sp,sp,-28
101009d0:	dfc00615 	stw	ra,24(sp)
101009d4:	df000515 	stw	fp,20(sp)
101009d8:	df000504 	addi	fp,sp,20
101009dc:	e13ffc15 	stw	r4,-16(fp)
101009e0:	e17ffd15 	stw	r5,-12(fp)
101009e4:	e1bffe15 	stw	r6,-8(fp)
101009e8:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009ec:	00800044 	movi	r2,1
101009f0:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009f4:	e13ffc17 	ldw	r4,-16(fp)
101009f8:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
101009fc:	e17ffd17 	ldw	r5,-12(fp)
10100a00:	e13ffc17 	ldw	r4,-16(fp)
10100a04:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a08:	e0fffb03 	ldbu	r3,-20(fp)
10100a0c:	10803fcc 	andi	r2,r2,255
10100a10:	1884703a 	and	r2,r3,r2
10100a14:	1004c03a 	cmpne	r2,r2,zero
10100a18:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a1c:	e17ffe17 	ldw	r5,-8(fp)
10100a20:	e13ffc17 	ldw	r4,-16(fp)
10100a24:	01003940 	call	10100394 <write_frame_height_reg>
10100a28:	e0fffb03 	ldbu	r3,-20(fp)
10100a2c:	10803fcc 	andi	r2,r2,255
10100a30:	1884703a 	and	r2,r3,r2
10100a34:	1004c03a 	cmpne	r2,r2,zero
10100a38:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a3c:	e17fff17 	ldw	r5,-4(fp)
10100a40:	e13ffc17 	ldw	r4,-16(fp)
10100a44:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a48:	e0fffb03 	ldbu	r3,-20(fp)
10100a4c:	10803fcc 	andi	r2,r2,255
10100a50:	1884703a 	and	r2,r3,r2
10100a54:	1004c03a 	cmpne	r2,r2,zero
10100a58:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a5c:	e1400217 	ldw	r5,8(fp)
10100a60:	e13ffc17 	ldw	r4,-16(fp)
10100a64:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a68:	e0fffb03 	ldbu	r3,-20(fp)
10100a6c:	10803fcc 	andi	r2,r2,255
10100a70:	1884703a 	and	r2,r3,r2
10100a74:	1004c03a 	cmpne	r2,r2,zero
10100a78:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a7c:	e1400317 	ldw	r5,12(fp)
10100a80:	e13ffc17 	ldw	r4,-16(fp)
10100a84:	01005f40 	call	101005f4 <write_line_line_blank_reg>
10100a88:	e0fffb03 	ldbu	r3,-20(fp)
10100a8c:	10803fcc 	andi	r2,r2,255
10100a90:	1884703a 	and	r2,r3,r2
10100a94:	1004c03a 	cmpne	r2,r2,zero
10100a98:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100a9c:	e1400417 	ldw	r5,16(fp)
10100aa0:	e13ffc17 	ldw	r4,-16(fp)
10100aa4:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
10100aa8:	e0fffb03 	ldbu	r3,-20(fp)
10100aac:	10803fcc 	andi	r2,r2,255
10100ab0:	1884703a 	and	r2,r3,r2
10100ab4:	1004c03a 	cmpne	r2,r2,zero
10100ab8:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100abc:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac0:	e037883a 	mov	sp,fp
10100ac4:	dfc00117 	ldw	ra,4(sp)
10100ac8:	df000017 	ldw	fp,0(sp)
10100acc:	dec00204 	addi	sp,sp,8
10100ad0:	f800283a 	ret

10100ad4 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100ad4:	defffe04 	addi	sp,sp,-8
10100ad8:	df000115 	stw	fp,4(sp)
10100adc:	df000104 	addi	fp,sp,4
10100ae0:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100ae4:	e0bfff17 	ldw	r2,-4(fp)
10100ae8:	10800017 	ldw	r2,0(r2)
10100aec:	10800604 	addi	r2,r2,24
10100af0:	00c00044 	movi	r3,1
10100af4:	10c00035 	stwio	r3,0(r2)
}
10100af8:	0001883a 	nop
10100afc:	e037883a 	mov	sp,fp
10100b00:	df000017 	ldw	fp,0(sp)
10100b04:	dec00104 	addi	sp,sp,4
10100b08:	f800283a 	ret

10100b0c <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b0c:	defffe04 	addi	sp,sp,-8
10100b10:	df000115 	stw	fp,4(sp)
10100b14:	df000104 	addi	fp,sp,4
10100b18:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b1c:	e0bfff17 	ldw	r2,-4(fp)
10100b20:	10800017 	ldw	r2,0(r2)
10100b24:	10800604 	addi	r2,r2,24
10100b28:	0007883a 	mov	r3,zero
10100b2c:	10c00035 	stwio	r3,0(r2)
}
10100b30:	0001883a 	nop
10100b34:	e037883a 	mov	sp,fp
10100b38:	df000017 	ldw	fp,0(sp)
10100b3c:	dec00104 	addi	sp,sp,4
10100b40:	f800283a 	ret

10100b44 <main>:
#define ONE_KB (1024)

#define HPS_0_BRIDGES_SPAN 2*(10) /* address_span_expander span from system.h 320*240*2 bytes */

int main()
{
10100b44:	defff604 	addi	sp,sp,-40
10100b48:	dfc00915 	stw	ra,36(sp)
10100b4c:	df000815 	stw	fp,32(sp)
10100b50:	df000804 	addi	fp,sp,32
	//CAMERA INITIALISATION
	cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100b54:	e0fffc04 	addi	r3,fp,-16
10100b58:	00810e04 	movi	r2,1080
10100b5c:	d8800015 	stw	r2,0(sp)
10100b60:	01c1e004 	movi	r7,1920
10100b64:	01800304 	movi	r6,12
10100b68:	01440034 	movhi	r5,4096
10100b6c:	29420804 	addi	r5,r5,2080
10100b70:	1809883a 	mov	r4,r3
10100b74:	01008d80 	call	101008d8 <cmos_sensor_output_generator_inst>
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
	cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100b78:	e0bffc04 	addi	r2,fp,-16
10100b7c:	1009883a 	mov	r4,r2
10100b80:	01009500 	call	10100950 <cmos_sensor_output_generator_init>
	cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100b84:	e0bffc04 	addi	r2,fp,-16
10100b88:	1009883a 	mov	r4,r2
10100b8c:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>
	cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100b90:	e0fffc04 	addi	r3,fp,-16
10100b94:	d8000215 	stw	zero,8(sp)
10100b98:	00800044 	movi	r2,1
10100b9c:	d8800115 	stw	r2,4(sp)
10100ba0:	d8000015 	stw	zero,0(sp)
10100ba4:	01c00044 	movi	r7,1
10100ba8:	01807804 	movi	r6,480
10100bac:	0140a004 	movi	r5,640
10100bb0:	1809883a 	mov	r4,r3
10100bb4:	01009cc0 	call	101009cc <cmos_sensor_output_generator_configure>
										   480,
										   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
										   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
										   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
										   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
	cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100bb8:	e0bffc04 	addi	r2,fp,-16
10100bbc:	1009883a 	mov	r4,r2
10100bc0:	0100ad40 	call	10100ad4 <cmos_sensor_output_generator_start>

	//CAMERA CONTROLLER INITIALISATION
	//Start Address
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x01, 0x00);
10100bc4:	0007883a 	mov	r3,zero
10100bc8:	00840034 	movhi	r2,4096
10100bcc:	10820504 	addi	r2,r2,2068
10100bd0:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x02, 0x00);
10100bd4:	0007883a 	mov	r3,zero
10100bd8:	00840034 	movhi	r2,4096
10100bdc:	10820604 	addi	r2,r2,2072
10100be0:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x03, 0x00);
10100be4:	0007883a 	mov	r3,zero
10100be8:	00840034 	movhi	r2,4096
10100bec:	10820704 	addi	r2,r2,2076
10100bf0:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x04, 0x00);
10100bf4:	0007883a 	mov	r3,zero
10100bf8:	00840034 	movhi	r2,4096
10100bfc:	10820804 	addi	r2,r2,2080
10100c00:	10c00035 	stwio	r3,0(r2)
	//Length = 320*240*16 = 0x0012C000
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x05, 0x00);
10100c04:	0007883a 	mov	r3,zero
10100c08:	00840034 	movhi	r2,4096
10100c0c:	10820904 	addi	r2,r2,2084
10100c10:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x06, 0xC0);
10100c14:	00c03004 	movi	r3,192
10100c18:	00840034 	movhi	r2,4096
10100c1c:	10820a04 	addi	r2,r2,2088
10100c20:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x07, 0x12);
10100c24:	00c00484 	movi	r3,18
10100c28:	00840034 	movhi	r2,4096
10100c2c:	10820b04 	addi	r2,r2,2092
10100c30:	10c00035 	stwio	r3,0(r2)
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x08, 0x00);
10100c34:	0007883a 	mov	r3,zero
10100c38:	00840034 	movhi	r2,4096
10100c3c:	10820c04 	addi	r2,r2,2096
10100c40:	10c00035 	stwio	r3,0(r2)
	//Status
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x09, 0x00);
10100c44:	0007883a 	mov	r3,zero
10100c48:	00840034 	movhi	r2,4096
10100c4c:	10820d04 	addi	r2,r2,2100
10100c50:	10c00035 	stwio	r3,0(r2)
	//Start
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x00, 0x01);
10100c54:	00c00044 	movi	r3,1
10100c58:	00840034 	movhi	r2,4096
10100c5c:	10820404 	addi	r2,r2,2064
10100c60:	10c00035 	stwio	r3,0(r2)

	//usleep(1000);

	//READ THE IMAGE IN THE MEMORY
	FILE* test;
	test = fopen("/mnt/host/test.txt","w");
10100c64:	01440474 	movhi	r5,4113
10100c68:	2943fa04 	addi	r5,r5,4072
10100c6c:	01040474 	movhi	r4,4113
10100c70:	2103fb04 	addi	r4,r4,4076
10100c74:	0101ec00 	call	10101ec0 <fopen>
10100c78:	e0bffb15 	stw	r2,-20(fp)

			fprintf(test, "%" PRIu16 " ", readdata);
	}
	*/

	fprintf(test, "blabla");
10100c7c:	e1fffb17 	ldw	r7,-20(fp)
10100c80:	01800184 	movi	r6,6
10100c84:	01400044 	movi	r5,1
10100c88:	01040474 	movhi	r4,4113
10100c8c:	21040004 	addi	r4,r4,4096
10100c90:	0102a3c0 	call	10102a3c <fwrite>
	printf("blabla");
10100c94:	01040474 	movhi	r4,4113
10100c98:	21040004 	addi	r4,r4,4096
10100c9c:	01035f00 	call	101035f0 <printf>

	fclose(test);
10100ca0:	e13ffb17 	ldw	r4,-20(fp)
10100ca4:	01017700 	call	10101770 <fclose>

	return EXIT_SUCCESS;
10100ca8:	0005883a 	mov	r2,zero
}
10100cac:	e037883a 	mov	sp,fp
10100cb0:	dfc00117 	ldw	ra,4(sp)
10100cb4:	df000017 	ldw	fp,0(sp)
10100cb8:	dec00204 	addi	sp,sp,8
10100cbc:	f800283a 	ret

10100cc0 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
10100cc0:	defffd04 	addi	sp,sp,-12
10100cc4:	dfc00215 	stw	ra,8(sp)
10100cc8:	df000115 	stw	fp,4(sp)
10100ccc:	df000104 	addi	fp,sp,4
10100cd0:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10100cd4:	e13fff17 	ldw	r4,-4(fp)
10100cd8:	010f1880 	call	1010f188 <usleep>
#endif
}
10100cdc:	0001883a 	nop
10100ce0:	e037883a 	mov	sp,fp
10100ce4:	dfc00117 	ldw	ra,4(sp)
10100ce8:	df000017 	ldw	fp,0(sp)
10100cec:	dec00204 	addi	sp,sp,8
10100cf0:	f800283a 	ret

10100cf4 <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
10100cf4:	defffe04 	addi	sp,sp,-8
10100cf8:	df000115 	stw	fp,4(sp)
10100cfc:	df000104 	addi	fp,sp,4
10100d00:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
10100d04:	0001883a 	nop
10100d08:	e0bfff17 	ldw	r2,-4(fp)
10100d0c:	10800017 	ldw	r2,0(r2)
10100d10:	10800084 	addi	r2,r2,2
10100d14:	10800023 	ldbuio	r2,0(r2)
10100d18:	10803fcc 	andi	r2,r2,255
10100d1c:	1080020c 	andi	r2,r2,8
10100d20:	103ff91e 	bne	r2,zero,10100d08 <__alt_data_end+0xfffe0d08>
}
10100d24:	0001883a 	nop
10100d28:	e037883a 	mov	sp,fp
10100d2c:	df000017 	ldw	fp,0(sp)
10100d30:	dec00104 	addi	sp,sp,4
10100d34:	f800283a 	ret

10100d38 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
10100d38:	defffb04 	addi	sp,sp,-20
10100d3c:	dfc00415 	stw	ra,16(sp)
10100d40:	df000315 	stw	fp,12(sp)
10100d44:	df000304 	addi	fp,sp,12
10100d48:	e13ffd15 	stw	r4,-12(fp)
10100d4c:	2807883a 	mov	r3,r5
10100d50:	3005883a 	mov	r2,r6
10100d54:	e0fffe05 	stb	r3,-8(fp)
10100d58:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10100d5c:	e13ffd17 	ldw	r4,-12(fp)
10100d60:	0100cf40 	call	10100cf4 <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
10100d64:	e0bffd17 	ldw	r2,-12(fp)
10100d68:	10800017 	ldw	r2,0(r2)
10100d6c:	e0fffe03 	ldbu	r3,-8(fp)
10100d70:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10100d74:	e0bffd17 	ldw	r2,-12(fp)
10100d78:	10800017 	ldw	r2,0(r2)
10100d7c:	10800044 	addi	r2,r2,1
10100d80:	e0ffff03 	ldbu	r3,-4(fp)
10100d84:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100d88:	e13ffd17 	ldw	r4,-12(fp)
10100d8c:	0100cf40 	call	10100cf4 <wait_end_of_transfer>
}
10100d90:	0001883a 	nop
10100d94:	e037883a 	mov	sp,fp
10100d98:	dfc00117 	ldw	ra,4(sp)
10100d9c:	df000017 	ldw	fp,0(sp)
10100da0:	dec00204 	addi	sp,sp,8
10100da4:	f800283a 	ret

10100da8 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10100da8:	defffc04 	addi	sp,sp,-16
10100dac:	dfc00315 	stw	ra,12(sp)
10100db0:	df000215 	stw	fp,8(sp)
10100db4:	df000204 	addi	fp,sp,8
10100db8:	e13ffe15 	stw	r4,-8(fp)
10100dbc:	2805883a 	mov	r2,r5
10100dc0:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10100dc4:	e13ffe17 	ldw	r4,-8(fp)
10100dc8:	0100cf40 	call	10100cf4 <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
10100dcc:	e0bffe17 	ldw	r2,-8(fp)
10100dd0:	10800017 	ldw	r2,0(r2)
10100dd4:	10800044 	addi	r2,r2,1
10100dd8:	e0ffff03 	ldbu	r3,-4(fp)
10100ddc:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100de0:	e13ffe17 	ldw	r4,-8(fp)
10100de4:	0100cf40 	call	10100cf4 <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10100de8:	e0bffe17 	ldw	r2,-8(fp)
10100dec:	10800017 	ldw	r2,0(r2)
10100df0:	10800023 	ldbuio	r2,0(r2)
10100df4:	10803fcc 	andi	r2,r2,255
}
10100df8:	e037883a 	mov	sp,fp
10100dfc:	dfc00117 	ldw	ra,4(sp)
10100e00:	df000017 	ldw	fp,0(sp)
10100e04:	dec00204 	addi	sp,sp,8
10100e08:	f800283a 	ret

10100e0c <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
10100e0c:	defffd04 	addi	sp,sp,-12
10100e10:	df000215 	stw	fp,8(sp)
10100e14:	df000204 	addi	fp,sp,8
10100e18:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
10100e1c:	e0bfff17 	ldw	r2,-4(fp)
10100e20:	e0bffe15 	stw	r2,-8(fp)

    return dev;
10100e24:	e0bffe17 	ldw	r2,-8(fp)
}
10100e28:	e037883a 	mov	sp,fp
10100e2c:	df000017 	ldw	fp,0(sp)
10100e30:	dec00104 	addi	sp,sp,4
10100e34:	f800283a 	ret

10100e38 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
10100e38:	defffb04 	addi	sp,sp,-20
10100e3c:	dfc00415 	stw	ra,16(sp)
10100e40:	df000315 	stw	fp,12(sp)
10100e44:	dc000215 	stw	r16,8(sp)
10100e48:	df000304 	addi	fp,sp,12
10100e4c:	e13ffd15 	stw	r4,-12(fp)
10100e50:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10100e54:	e0bffd17 	ldw	r2,-12(fp)
10100e58:	10800017 	ldw	r2,0(r2)
10100e5c:	140000c4 	addi	r16,r2,3
10100e60:	e0bffe17 	ldw	r2,-8(fp)
10100e64:	014001b4 	movhi	r5,6
10100e68:	2946a004 	addi	r5,r5,6784
10100e6c:	1009883a 	mov	r4,r2
10100e70:	01015c40 	call	101015c4 <__udivsi3>
10100e74:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10100e78:	0104e204 	movi	r4,5000
10100e7c:	0100cc00 	call	10100cc0 <i2c_usleep>
}
10100e80:	0001883a 	nop
10100e84:	e6ffff04 	addi	sp,fp,-4
10100e88:	dfc00217 	ldw	ra,8(sp)
10100e8c:	df000117 	ldw	fp,4(sp)
10100e90:	dc000017 	ldw	r16,0(sp)
10100e94:	dec00304 	addi	sp,sp,12
10100e98:	f800283a 	ret

10100e9c <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
10100e9c:	defffc04 	addi	sp,sp,-16
10100ea0:	df000315 	stw	fp,12(sp)
10100ea4:	df000304 	addi	fp,sp,12
10100ea8:	e13ffe15 	stw	r4,-8(fp)
10100eac:	2805883a 	mov	r2,r5
10100eb0:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
10100eb4:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10100eb8:	e0bfff03 	ldbu	r2,-4(fp)
10100ebc:	10000426 	beq	r2,zero,10100ed0 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10100ec0:	e0bffd17 	ldw	r2,-12(fp)
10100ec4:	10800814 	ori	r2,r2,32
10100ec8:	e0bffd15 	stw	r2,-12(fp)
10100ecc:	00000406 	br	10100ee0 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10100ed0:	e0fffd17 	ldw	r3,-12(fp)
10100ed4:	00bff7c4 	movi	r2,-33
10100ed8:	1884703a 	and	r2,r3,r2
10100edc:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100ee0:	e0bffe17 	ldw	r2,-8(fp)
10100ee4:	10800017 	ldw	r2,0(r2)
10100ee8:	10800044 	addi	r2,r2,1
10100eec:	00c00084 	movi	r3,2
10100ef0:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
10100ef4:	e0bffe17 	ldw	r2,-8(fp)
10100ef8:	10800017 	ldw	r2,0(r2)
10100efc:	10800044 	addi	r2,r2,1
10100f00:	e0fffd17 	ldw	r3,-12(fp)
10100f04:	10c00025 	stbio	r3,0(r2)
}
10100f08:	0001883a 	nop
10100f0c:	e037883a 	mov	sp,fp
10100f10:	df000017 	ldw	fp,0(sp)
10100f14:	dec00104 	addi	sp,sp,4
10100f18:	f800283a 	ret

10100f1c <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
10100f1c:	defffa04 	addi	sp,sp,-24
10100f20:	dfc00515 	stw	ra,20(sp)
10100f24:	df000415 	stw	fp,16(sp)
10100f28:	df000404 	addi	fp,sp,16
10100f2c:	e13ffc15 	stw	r4,-16(fp)
10100f30:	2809883a 	mov	r4,r5
10100f34:	3007883a 	mov	r3,r6
10100f38:	3805883a 	mov	r2,r7
10100f3c:	e13ffd05 	stb	r4,-12(fp)
10100f40:	e0fffe05 	stb	r3,-8(fp)
10100f44:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100f48:	e0bffd03 	ldbu	r2,-12(fp)
10100f4c:	10803f8c 	andi	r2,r2,254
10100f50:	01800504 	movi	r6,20
10100f54:	100b883a 	mov	r5,r2
10100f58:	e13ffc17 	ldw	r4,-16(fp)
10100f5c:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100f60:	e0bffc17 	ldw	r2,-16(fp)
10100f64:	10800017 	ldw	r2,0(r2)
10100f68:	10800084 	addi	r2,r2,2
10100f6c:	10800023 	ldbuio	r2,0(r2)
10100f70:	10803fcc 	andi	r2,r2,255
10100f74:	1080004c 	andi	r2,r2,1
10100f78:	10000726 	beq	r2,zero,10100f98 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100f7c:	e0bffc17 	ldw	r2,-16(fp)
10100f80:	10800017 	ldw	r2,0(r2)
10100f84:	10800044 	addi	r2,r2,1
10100f88:	00c00084 	movi	r3,2
10100f8c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10100f90:	00800044 	movi	r2,1
10100f94:	00002706 	br	10101034 <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10100f98:	e0bffe03 	ldbu	r2,-8(fp)
10100f9c:	01800404 	movi	r6,16
10100fa0:	100b883a 	mov	r5,r2
10100fa4:	e13ffc17 	ldw	r4,-16(fp)
10100fa8:	0100d380 	call	10100d38 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100fac:	e0bffc17 	ldw	r2,-16(fp)
10100fb0:	10800017 	ldw	r2,0(r2)
10100fb4:	10800084 	addi	r2,r2,2
10100fb8:	10800023 	ldbuio	r2,0(r2)
10100fbc:	10803fcc 	andi	r2,r2,255
10100fc0:	1080004c 	andi	r2,r2,1
10100fc4:	10000726 	beq	r2,zero,10100fe4 <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10100fc8:	e0bffc17 	ldw	r2,-16(fp)
10100fcc:	10800017 	ldw	r2,0(r2)
10100fd0:	10800044 	addi	r2,r2,1
10100fd4:	00c00084 	movi	r3,2
10100fd8:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10100fdc:	00800084 	movi	r2,2
10100fe0:	00001406 	br	10101034 <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10100fe4:	e0bfff03 	ldbu	r2,-4(fp)
10100fe8:	01800484 	movi	r6,18
10100fec:	100b883a 	mov	r5,r2
10100ff0:	e13ffc17 	ldw	r4,-16(fp)
10100ff4:	0100d380 	call	10100d38 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10100ff8:	e0bffc17 	ldw	r2,-16(fp)
10100ffc:	10800017 	ldw	r2,0(r2)
10101000:	10800084 	addi	r2,r2,2
10101004:	10800023 	ldbuio	r2,0(r2)
10101008:	10803fcc 	andi	r2,r2,255
1010100c:	1080004c 	andi	r2,r2,1
10101010:	10000726 	beq	r2,zero,10101030 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101014:	e0bffc17 	ldw	r2,-16(fp)
10101018:	10800017 	ldw	r2,0(r2)
1010101c:	10800044 	addi	r2,r2,1
10101020:	00c00084 	movi	r3,2
10101024:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101028:	00800084 	movi	r2,2
1010102c:	00000106 	br	10101034 <i2c_write+0x118>
    }

    return I2C_SUCCESS;
10101030:	0005883a 	mov	r2,zero
}
10101034:	e037883a 	mov	sp,fp
10101038:	dfc00117 	ldw	ra,4(sp)
1010103c:	df000017 	ldw	fp,0(sp)
10101040:	dec00204 	addi	sp,sp,8
10101044:	f800283a 	ret

10101048 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
10101048:	defffa04 	addi	sp,sp,-24
1010104c:	dfc00515 	stw	ra,20(sp)
10101050:	df000415 	stw	fp,16(sp)
10101054:	df000404 	addi	fp,sp,16
10101058:	e13ffc15 	stw	r4,-16(fp)
1010105c:	2807883a 	mov	r3,r5
10101060:	3005883a 	mov	r2,r6
10101064:	e1ffff15 	stw	r7,-4(fp)
10101068:	e0fffd05 	stb	r3,-12(fp)
1010106c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101070:	e0bffd03 	ldbu	r2,-12(fp)
10101074:	10803f8c 	andi	r2,r2,254
10101078:	01800504 	movi	r6,20
1010107c:	100b883a 	mov	r5,r2
10101080:	e13ffc17 	ldw	r4,-16(fp)
10101084:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101088:	e0bffc17 	ldw	r2,-16(fp)
1010108c:	10800017 	ldw	r2,0(r2)
10101090:	10800084 	addi	r2,r2,2
10101094:	10800023 	ldbuio	r2,0(r2)
10101098:	10803fcc 	andi	r2,r2,255
1010109c:	1080004c 	andi	r2,r2,1
101010a0:	10000726 	beq	r2,zero,101010c0 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101010a4:	e0bffc17 	ldw	r2,-16(fp)
101010a8:	10800017 	ldw	r2,0(r2)
101010ac:	10800044 	addi	r2,r2,1
101010b0:	00c00084 	movi	r3,2
101010b4:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101010b8:	00800044 	movi	r2,1
101010bc:	00002f06 	br	1010117c <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
101010c0:	e0bffe03 	ldbu	r2,-8(fp)
101010c4:	01800404 	movi	r6,16
101010c8:	100b883a 	mov	r5,r2
101010cc:	e13ffc17 	ldw	r4,-16(fp)
101010d0:	0100d380 	call	10100d38 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101010d4:	e0bffc17 	ldw	r2,-16(fp)
101010d8:	10800017 	ldw	r2,0(r2)
101010dc:	10800084 	addi	r2,r2,2
101010e0:	10800023 	ldbuio	r2,0(r2)
101010e4:	10803fcc 	andi	r2,r2,255
101010e8:	1080004c 	andi	r2,r2,1
101010ec:	10000726 	beq	r2,zero,1010110c <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101010f0:	e0bffc17 	ldw	r2,-16(fp)
101010f4:	10800017 	ldw	r2,0(r2)
101010f8:	10800044 	addi	r2,r2,1
101010fc:	00c00084 	movi	r3,2
10101100:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101104:	00800084 	movi	r2,2
10101108:	00001c06 	br	1010117c <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
1010110c:	e0bffd03 	ldbu	r2,-12(fp)
10101110:	10800054 	ori	r2,r2,1
10101114:	10803fcc 	andi	r2,r2,255
10101118:	01800504 	movi	r6,20
1010111c:	100b883a 	mov	r5,r2
10101120:	e13ffc17 	ldw	r4,-16(fp)
10101124:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101128:	e0bffc17 	ldw	r2,-16(fp)
1010112c:	10800017 	ldw	r2,0(r2)
10101130:	10800084 	addi	r2,r2,2
10101134:	10800023 	ldbuio	r2,0(r2)
10101138:	10803fcc 	andi	r2,r2,255
1010113c:	1080004c 	andi	r2,r2,1
10101140:	10000726 	beq	r2,zero,10101160 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101144:	e0bffc17 	ldw	r2,-16(fp)
10101148:	10800017 	ldw	r2,0(r2)
1010114c:	10800044 	addi	r2,r2,1
10101150:	00c00084 	movi	r3,2
10101154:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101158:	00800044 	movi	r2,1
1010115c:	00000706 	br	1010117c <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101160:	014002c4 	movi	r5,11
10101164:	e13ffc17 	ldw	r4,-16(fp)
10101168:	0100da80 	call	10100da8 <get_data_set_control>
1010116c:	1007883a 	mov	r3,r2
10101170:	e0bfff17 	ldw	r2,-4(fp)
10101174:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10101178:	0005883a 	mov	r2,zero
}
1010117c:	e037883a 	mov	sp,fp
10101180:	dfc00117 	ldw	ra,4(sp)
10101184:	df000017 	ldw	fp,0(sp)
10101188:	dec00204 	addi	sp,sp,8
1010118c:	f800283a 	ret

10101190 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10101190:	defff904 	addi	sp,sp,-28
10101194:	dfc00615 	stw	ra,24(sp)
10101198:	df000515 	stw	fp,20(sp)
1010119c:	df000504 	addi	fp,sp,20
101011a0:	e13ffc15 	stw	r4,-16(fp)
101011a4:	2807883a 	mov	r3,r5
101011a8:	3005883a 	mov	r2,r6
101011ac:	e1ffff15 	stw	r7,-4(fp)
101011b0:	e0fffd05 	stb	r3,-12(fp)
101011b4:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101011b8:	e0bffd03 	ldbu	r2,-12(fp)
101011bc:	10803f8c 	andi	r2,r2,254
101011c0:	01800504 	movi	r6,20
101011c4:	100b883a 	mov	r5,r2
101011c8:	e13ffc17 	ldw	r4,-16(fp)
101011cc:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101011d0:	e0bffc17 	ldw	r2,-16(fp)
101011d4:	10800017 	ldw	r2,0(r2)
101011d8:	10800084 	addi	r2,r2,2
101011dc:	10800023 	ldbuio	r2,0(r2)
101011e0:	10803fcc 	andi	r2,r2,255
101011e4:	1080004c 	andi	r2,r2,1
101011e8:	10000726 	beq	r2,zero,10101208 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101011ec:	e0bffc17 	ldw	r2,-16(fp)
101011f0:	10800017 	ldw	r2,0(r2)
101011f4:	10800044 	addi	r2,r2,1
101011f8:	00c00084 	movi	r3,2
101011fc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101200:	00800044 	movi	r2,1
10101204:	00004206 	br	10101310 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101208:	e0bffe03 	ldbu	r2,-8(fp)
1010120c:	01800404 	movi	r6,16
10101210:	100b883a 	mov	r5,r2
10101214:	e13ffc17 	ldw	r4,-16(fp)
10101218:	0100d380 	call	10100d38 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010121c:	e0bffc17 	ldw	r2,-16(fp)
10101220:	10800017 	ldw	r2,0(r2)
10101224:	10800084 	addi	r2,r2,2
10101228:	10800023 	ldbuio	r2,0(r2)
1010122c:	10803fcc 	andi	r2,r2,255
10101230:	1080004c 	andi	r2,r2,1
10101234:	10000726 	beq	r2,zero,10101254 <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101238:	e0bffc17 	ldw	r2,-16(fp)
1010123c:	10800017 	ldw	r2,0(r2)
10101240:	10800044 	addi	r2,r2,1
10101244:	00c00084 	movi	r3,2
10101248:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
1010124c:	00800084 	movi	r2,2
10101250:	00002f06 	br	10101310 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
10101254:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
10101258:	e03ffb15 	stw	zero,-20(fp)
1010125c:	00002806 	br	10101300 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
10101260:	e0800217 	ldw	r2,8(fp)
10101264:	10bfffc4 	addi	r2,r2,-1
10101268:	e0fffb17 	ldw	r3,-20(fp)
1010126c:	18800a2e 	bgeu	r3,r2,10101298 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10101270:	e0ffff17 	ldw	r3,-4(fp)
10101274:	e0bffb17 	ldw	r2,-20(fp)
10101278:	1885883a 	add	r2,r3,r2
1010127c:	10800003 	ldbu	r2,0(r2)
10101280:	10803fcc 	andi	r2,r2,255
10101284:	01800404 	movi	r6,16
10101288:	100b883a 	mov	r5,r2
1010128c:	e13ffc17 	ldw	r4,-16(fp)
10101290:	0100d380 	call	10100d38 <set_data_control>
10101294:	00000906 	br	101012bc <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101298:	e0ffff17 	ldw	r3,-4(fp)
1010129c:	e0bffb17 	ldw	r2,-20(fp)
101012a0:	1885883a 	add	r2,r3,r2
101012a4:	10800003 	ldbu	r2,0(r2)
101012a8:	10803fcc 	andi	r2,r2,255
101012ac:	01800484 	movi	r6,18
101012b0:	100b883a 	mov	r5,r2
101012b4:	e13ffc17 	ldw	r4,-16(fp)
101012b8:	0100d380 	call	10100d38 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101012bc:	e0bffc17 	ldw	r2,-16(fp)
101012c0:	10800017 	ldw	r2,0(r2)
101012c4:	10800084 	addi	r2,r2,2
101012c8:	10800023 	ldbuio	r2,0(r2)
101012cc:	10803fcc 	andi	r2,r2,255
101012d0:	1080004c 	andi	r2,r2,1
101012d4:	10000726 	beq	r2,zero,101012f4 <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101012d8:	e0bffc17 	ldw	r2,-16(fp)
101012dc:	10800017 	ldw	r2,0(r2)
101012e0:	10800044 	addi	r2,r2,1
101012e4:	00c00084 	movi	r3,2
101012e8:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
101012ec:	00800084 	movi	r2,2
101012f0:	00000706 	br	10101310 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
101012f4:	e0bffb17 	ldw	r2,-20(fp)
101012f8:	10800044 	addi	r2,r2,1
101012fc:	e0bffb15 	stw	r2,-20(fp)
10101300:	e0fffb17 	ldw	r3,-20(fp)
10101304:	e0800217 	ldw	r2,8(fp)
10101308:	18bfd536 	bltu	r3,r2,10101260 <__alt_data_end+0xfffe1260>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
1010130c:	0005883a 	mov	r2,zero
}
10101310:	e037883a 	mov	sp,fp
10101314:	dfc00117 	ldw	ra,4(sp)
10101318:	df000017 	ldw	fp,0(sp)
1010131c:	dec00204 	addi	sp,sp,8
10101320:	f800283a 	ret

10101324 <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10101324:	defff804 	addi	sp,sp,-32
10101328:	dfc00715 	stw	ra,28(sp)
1010132c:	df000615 	stw	fp,24(sp)
10101330:	dc000515 	stw	r16,20(sp)
10101334:	df000604 	addi	fp,sp,24
10101338:	e13ffb15 	stw	r4,-20(fp)
1010133c:	2807883a 	mov	r3,r5
10101340:	3005883a 	mov	r2,r6
10101344:	e1fffe15 	stw	r7,-8(fp)
10101348:	e0fffc05 	stb	r3,-16(fp)
1010134c:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101350:	e0bffc03 	ldbu	r2,-16(fp)
10101354:	10803f8c 	andi	r2,r2,254
10101358:	01800504 	movi	r6,20
1010135c:	100b883a 	mov	r5,r2
10101360:	e13ffb17 	ldw	r4,-20(fp)
10101364:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101368:	e0bffb17 	ldw	r2,-20(fp)
1010136c:	10800017 	ldw	r2,0(r2)
10101370:	10800084 	addi	r2,r2,2
10101374:	10800023 	ldbuio	r2,0(r2)
10101378:	10803fcc 	andi	r2,r2,255
1010137c:	1080004c 	andi	r2,r2,1
10101380:	10000726 	beq	r2,zero,101013a0 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101384:	e0bffb17 	ldw	r2,-20(fp)
10101388:	10800017 	ldw	r2,0(r2)
1010138c:	10800044 	addi	r2,r2,1
10101390:	00c00084 	movi	r3,2
10101394:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101398:	00800044 	movi	r2,1
1010139c:	00004506 	br	101014b4 <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
101013a0:	e0bffd03 	ldbu	r2,-12(fp)
101013a4:	01800404 	movi	r6,16
101013a8:	100b883a 	mov	r5,r2
101013ac:	e13ffb17 	ldw	r4,-20(fp)
101013b0:	0100d380 	call	10100d38 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101013b4:	e0bffb17 	ldw	r2,-20(fp)
101013b8:	10800017 	ldw	r2,0(r2)
101013bc:	10800084 	addi	r2,r2,2
101013c0:	10800023 	ldbuio	r2,0(r2)
101013c4:	10803fcc 	andi	r2,r2,255
101013c8:	1080004c 	andi	r2,r2,1
101013cc:	10000726 	beq	r2,zero,101013ec <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101013d0:	e0bffb17 	ldw	r2,-20(fp)
101013d4:	10800017 	ldw	r2,0(r2)
101013d8:	10800044 	addi	r2,r2,1
101013dc:	00c00084 	movi	r3,2
101013e0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101013e4:	00800084 	movi	r2,2
101013e8:	00003206 	br	101014b4 <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101013ec:	e0bffc03 	ldbu	r2,-16(fp)
101013f0:	10800054 	ori	r2,r2,1
101013f4:	10803fcc 	andi	r2,r2,255
101013f8:	01800504 	movi	r6,20
101013fc:	100b883a 	mov	r5,r2
10101400:	e13ffb17 	ldw	r4,-20(fp)
10101404:	0100d380 	call	10100d38 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101408:	e0bffb17 	ldw	r2,-20(fp)
1010140c:	10800017 	ldw	r2,0(r2)
10101410:	10800084 	addi	r2,r2,2
10101414:	10800023 	ldbuio	r2,0(r2)
10101418:	10803fcc 	andi	r2,r2,255
1010141c:	1080004c 	andi	r2,r2,1
10101420:	10000726 	beq	r2,zero,10101440 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101424:	e0bffb17 	ldw	r2,-20(fp)
10101428:	10800017 	ldw	r2,0(r2)
1010142c:	10800044 	addi	r2,r2,1
10101430:	00c00084 	movi	r3,2
10101434:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101438:	00800044 	movi	r2,1
1010143c:	00001d06 	br	101014b4 <i2c_read_array+0x190>
    }

    unsigned int i = 0;
10101440:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
10101444:	e03ffa15 	stw	zero,-24(fp)
10101448:	00001606 	br	101014a4 <i2c_read_array+0x180>
        if (i < size - 1) {
1010144c:	e0800217 	ldw	r2,8(fp)
10101450:	10bfffc4 	addi	r2,r2,-1
10101454:	e0fffa17 	ldw	r3,-24(fp)
10101458:	1880082e 	bgeu	r3,r2,1010147c <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
1010145c:	e0fffe17 	ldw	r3,-8(fp)
10101460:	e0bffa17 	ldw	r2,-24(fp)
10101464:	18a1883a 	add	r16,r3,r2
10101468:	01400204 	movi	r5,8
1010146c:	e13ffb17 	ldw	r4,-20(fp)
10101470:	0100da80 	call	10100da8 <get_data_set_control>
10101474:	80800005 	stb	r2,0(r16)
10101478:	00000706 	br	10101498 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
1010147c:	e0fffe17 	ldw	r3,-8(fp)
10101480:	e0bffa17 	ldw	r2,-24(fp)
10101484:	18a1883a 	add	r16,r3,r2
10101488:	014002c4 	movi	r5,11
1010148c:	e13ffb17 	ldw	r4,-20(fp)
10101490:	0100da80 	call	10100da8 <get_data_set_control>
10101494:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101498:	e0bffa17 	ldw	r2,-24(fp)
1010149c:	10800044 	addi	r2,r2,1
101014a0:	e0bffa15 	stw	r2,-24(fp)
101014a4:	e0fffa17 	ldw	r3,-24(fp)
101014a8:	e0800217 	ldw	r2,8(fp)
101014ac:	18bfe736 	bltu	r3,r2,1010144c <__alt_data_end+0xfffe144c>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
101014b0:	0005883a 	mov	r2,zero
}
101014b4:	e6ffff04 	addi	sp,fp,-4
101014b8:	dfc00217 	ldw	ra,8(sp)
101014bc:	df000117 	ldw	fp,4(sp)
101014c0:	dc000017 	ldw	r16,0(sp)
101014c4:	dec00304 	addi	sp,sp,12
101014c8:	f800283a 	ret

101014cc <__divsi3>:
101014cc:	20001b16 	blt	r4,zero,1010153c <__divsi3+0x70>
101014d0:	000f883a 	mov	r7,zero
101014d4:	28001616 	blt	r5,zero,10101530 <__divsi3+0x64>
101014d8:	200d883a 	mov	r6,r4
101014dc:	29001a2e 	bgeu	r5,r4,10101548 <__divsi3+0x7c>
101014e0:	00800804 	movi	r2,32
101014e4:	00c00044 	movi	r3,1
101014e8:	00000106 	br	101014f0 <__divsi3+0x24>
101014ec:	10000d26 	beq	r2,zero,10101524 <__divsi3+0x58>
101014f0:	294b883a 	add	r5,r5,r5
101014f4:	10bfffc4 	addi	r2,r2,-1
101014f8:	18c7883a 	add	r3,r3,r3
101014fc:	293ffb36 	bltu	r5,r4,101014ec <__alt_data_end+0xfffe14ec>
10101500:	0005883a 	mov	r2,zero
10101504:	18000726 	beq	r3,zero,10101524 <__divsi3+0x58>
10101508:	0005883a 	mov	r2,zero
1010150c:	31400236 	bltu	r6,r5,10101518 <__divsi3+0x4c>
10101510:	314dc83a 	sub	r6,r6,r5
10101514:	10c4b03a 	or	r2,r2,r3
10101518:	1806d07a 	srli	r3,r3,1
1010151c:	280ad07a 	srli	r5,r5,1
10101520:	183ffa1e 	bne	r3,zero,1010150c <__alt_data_end+0xfffe150c>
10101524:	38000126 	beq	r7,zero,1010152c <__divsi3+0x60>
10101528:	0085c83a 	sub	r2,zero,r2
1010152c:	f800283a 	ret
10101530:	014bc83a 	sub	r5,zero,r5
10101534:	39c0005c 	xori	r7,r7,1
10101538:	003fe706 	br	101014d8 <__alt_data_end+0xfffe14d8>
1010153c:	0109c83a 	sub	r4,zero,r4
10101540:	01c00044 	movi	r7,1
10101544:	003fe306 	br	101014d4 <__alt_data_end+0xfffe14d4>
10101548:	00c00044 	movi	r3,1
1010154c:	003fee06 	br	10101508 <__alt_data_end+0xfffe1508>

10101550 <__modsi3>:
10101550:	20001716 	blt	r4,zero,101015b0 <__modsi3+0x60>
10101554:	000f883a 	mov	r7,zero
10101558:	2005883a 	mov	r2,r4
1010155c:	28001216 	blt	r5,zero,101015a8 <__modsi3+0x58>
10101560:	2900162e 	bgeu	r5,r4,101015bc <__modsi3+0x6c>
10101564:	01800804 	movi	r6,32
10101568:	00c00044 	movi	r3,1
1010156c:	00000106 	br	10101574 <__modsi3+0x24>
10101570:	30000a26 	beq	r6,zero,1010159c <__modsi3+0x4c>
10101574:	294b883a 	add	r5,r5,r5
10101578:	31bfffc4 	addi	r6,r6,-1
1010157c:	18c7883a 	add	r3,r3,r3
10101580:	293ffb36 	bltu	r5,r4,10101570 <__alt_data_end+0xfffe1570>
10101584:	18000526 	beq	r3,zero,1010159c <__modsi3+0x4c>
10101588:	1806d07a 	srli	r3,r3,1
1010158c:	11400136 	bltu	r2,r5,10101594 <__modsi3+0x44>
10101590:	1145c83a 	sub	r2,r2,r5
10101594:	280ad07a 	srli	r5,r5,1
10101598:	183ffb1e 	bne	r3,zero,10101588 <__alt_data_end+0xfffe1588>
1010159c:	38000126 	beq	r7,zero,101015a4 <__modsi3+0x54>
101015a0:	0085c83a 	sub	r2,zero,r2
101015a4:	f800283a 	ret
101015a8:	014bc83a 	sub	r5,zero,r5
101015ac:	003fec06 	br	10101560 <__alt_data_end+0xfffe1560>
101015b0:	0109c83a 	sub	r4,zero,r4
101015b4:	01c00044 	movi	r7,1
101015b8:	003fe706 	br	10101558 <__alt_data_end+0xfffe1558>
101015bc:	00c00044 	movi	r3,1
101015c0:	003ff106 	br	10101588 <__alt_data_end+0xfffe1588>

101015c4 <__udivsi3>:
101015c4:	200d883a 	mov	r6,r4
101015c8:	2900152e 	bgeu	r5,r4,10101620 <__udivsi3+0x5c>
101015cc:	28001416 	blt	r5,zero,10101620 <__udivsi3+0x5c>
101015d0:	00800804 	movi	r2,32
101015d4:	00c00044 	movi	r3,1
101015d8:	00000206 	br	101015e4 <__udivsi3+0x20>
101015dc:	10000e26 	beq	r2,zero,10101618 <__udivsi3+0x54>
101015e0:	28000516 	blt	r5,zero,101015f8 <__udivsi3+0x34>
101015e4:	294b883a 	add	r5,r5,r5
101015e8:	10bfffc4 	addi	r2,r2,-1
101015ec:	18c7883a 	add	r3,r3,r3
101015f0:	293ffa36 	bltu	r5,r4,101015dc <__alt_data_end+0xfffe15dc>
101015f4:	18000826 	beq	r3,zero,10101618 <__udivsi3+0x54>
101015f8:	0005883a 	mov	r2,zero
101015fc:	31400236 	bltu	r6,r5,10101608 <__udivsi3+0x44>
10101600:	314dc83a 	sub	r6,r6,r5
10101604:	10c4b03a 	or	r2,r2,r3
10101608:	1806d07a 	srli	r3,r3,1
1010160c:	280ad07a 	srli	r5,r5,1
10101610:	183ffa1e 	bne	r3,zero,101015fc <__alt_data_end+0xfffe15fc>
10101614:	f800283a 	ret
10101618:	0005883a 	mov	r2,zero
1010161c:	f800283a 	ret
10101620:	00c00044 	movi	r3,1
10101624:	003ff406 	br	101015f8 <__alt_data_end+0xfffe15f8>

10101628 <__umodsi3>:
10101628:	2005883a 	mov	r2,r4
1010162c:	2900122e 	bgeu	r5,r4,10101678 <__umodsi3+0x50>
10101630:	28001116 	blt	r5,zero,10101678 <__umodsi3+0x50>
10101634:	01800804 	movi	r6,32
10101638:	00c00044 	movi	r3,1
1010163c:	00000206 	br	10101648 <__umodsi3+0x20>
10101640:	30000c26 	beq	r6,zero,10101674 <__umodsi3+0x4c>
10101644:	28000516 	blt	r5,zero,1010165c <__umodsi3+0x34>
10101648:	294b883a 	add	r5,r5,r5
1010164c:	31bfffc4 	addi	r6,r6,-1
10101650:	18c7883a 	add	r3,r3,r3
10101654:	293ffa36 	bltu	r5,r4,10101640 <__alt_data_end+0xfffe1640>
10101658:	18000626 	beq	r3,zero,10101674 <__umodsi3+0x4c>
1010165c:	1806d07a 	srli	r3,r3,1
10101660:	11400136 	bltu	r2,r5,10101668 <__umodsi3+0x40>
10101664:	1145c83a 	sub	r2,r2,r5
10101668:	280ad07a 	srli	r5,r5,1
1010166c:	183ffb1e 	bne	r3,zero,1010165c <__alt_data_end+0xfffe165c>
10101670:	f800283a 	ret
10101674:	f800283a 	ret
10101678:	00c00044 	movi	r3,1
1010167c:	003ff706 	br	1010165c <__alt_data_end+0xfffe165c>

10101680 <_fclose_r>:
10101680:	28003926 	beq	r5,zero,10101768 <_fclose_r+0xe8>
10101684:	defffc04 	addi	sp,sp,-16
10101688:	dc400115 	stw	r17,4(sp)
1010168c:	dc000015 	stw	r16,0(sp)
10101690:	dfc00315 	stw	ra,12(sp)
10101694:	dc800215 	stw	r18,8(sp)
10101698:	2023883a 	mov	r17,r4
1010169c:	2821883a 	mov	r16,r5
101016a0:	20000226 	beq	r4,zero,101016ac <_fclose_r+0x2c>
101016a4:	20800e17 	ldw	r2,56(r4)
101016a8:	10002726 	beq	r2,zero,10101748 <_fclose_r+0xc8>
101016ac:	8080030f 	ldh	r2,12(r16)
101016b0:	1000071e 	bne	r2,zero,101016d0 <_fclose_r+0x50>
101016b4:	0005883a 	mov	r2,zero
101016b8:	dfc00317 	ldw	ra,12(sp)
101016bc:	dc800217 	ldw	r18,8(sp)
101016c0:	dc400117 	ldw	r17,4(sp)
101016c4:	dc000017 	ldw	r16,0(sp)
101016c8:	dec00404 	addi	sp,sp,16
101016cc:	f800283a 	ret
101016d0:	800b883a 	mov	r5,r16
101016d4:	8809883a 	mov	r4,r17
101016d8:	01017840 	call	10101784 <__sflush_r>
101016dc:	1025883a 	mov	r18,r2
101016e0:	80800b17 	ldw	r2,44(r16)
101016e4:	10000426 	beq	r2,zero,101016f8 <_fclose_r+0x78>
101016e8:	81400717 	ldw	r5,28(r16)
101016ec:	8809883a 	mov	r4,r17
101016f0:	103ee83a 	callr	r2
101016f4:	10001616 	blt	r2,zero,10101750 <_fclose_r+0xd0>
101016f8:	8080030b 	ldhu	r2,12(r16)
101016fc:	1080200c 	andi	r2,r2,128
10101700:	1000151e 	bne	r2,zero,10101758 <_fclose_r+0xd8>
10101704:	81400c17 	ldw	r5,48(r16)
10101708:	28000526 	beq	r5,zero,10101720 <_fclose_r+0xa0>
1010170c:	80801004 	addi	r2,r16,64
10101710:	28800226 	beq	r5,r2,1010171c <_fclose_r+0x9c>
10101714:	8809883a 	mov	r4,r17
10101718:	0101ffc0 	call	10101ffc <_free_r>
1010171c:	80000c15 	stw	zero,48(r16)
10101720:	81401117 	ldw	r5,68(r16)
10101724:	28000326 	beq	r5,zero,10101734 <_fclose_r+0xb4>
10101728:	8809883a 	mov	r4,r17
1010172c:	0101ffc0 	call	10101ffc <_free_r>
10101730:	80001115 	stw	zero,68(r16)
10101734:	0101d8c0 	call	10101d8c <__sfp_lock_acquire>
10101738:	8000030d 	sth	zero,12(r16)
1010173c:	0101d900 	call	10101d90 <__sfp_lock_release>
10101740:	9005883a 	mov	r2,r18
10101744:	003fdc06 	br	101016b8 <__alt_data_end+0xfffe16b8>
10101748:	0101d7c0 	call	10101d7c <__sinit>
1010174c:	003fd706 	br	101016ac <__alt_data_end+0xfffe16ac>
10101750:	04bfffc4 	movi	r18,-1
10101754:	003fe806 	br	101016f8 <__alt_data_end+0xfffe16f8>
10101758:	81400417 	ldw	r5,16(r16)
1010175c:	8809883a 	mov	r4,r17
10101760:	0101ffc0 	call	10101ffc <_free_r>
10101764:	003fe706 	br	10101704 <__alt_data_end+0xfffe1704>
10101768:	0005883a 	mov	r2,zero
1010176c:	f800283a 	ret

10101770 <fclose>:
10101770:	00840474 	movhi	r2,4113
10101774:	108b6d04 	addi	r2,r2,11700
10101778:	200b883a 	mov	r5,r4
1010177c:	11000017 	ldw	r4,0(r2)
10101780:	01016801 	jmpi	10101680 <_fclose_r>

10101784 <__sflush_r>:
10101784:	2880030b 	ldhu	r2,12(r5)
10101788:	defffb04 	addi	sp,sp,-20
1010178c:	dcc00315 	stw	r19,12(sp)
10101790:	dc400115 	stw	r17,4(sp)
10101794:	dfc00415 	stw	ra,16(sp)
10101798:	dc800215 	stw	r18,8(sp)
1010179c:	dc000015 	stw	r16,0(sp)
101017a0:	10c0020c 	andi	r3,r2,8
101017a4:	2823883a 	mov	r17,r5
101017a8:	2027883a 	mov	r19,r4
101017ac:	1800311e 	bne	r3,zero,10101874 <__sflush_r+0xf0>
101017b0:	28c00117 	ldw	r3,4(r5)
101017b4:	10820014 	ori	r2,r2,2048
101017b8:	2880030d 	sth	r2,12(r5)
101017bc:	00c04b0e 	bge	zero,r3,101018ec <__sflush_r+0x168>
101017c0:	8a000a17 	ldw	r8,40(r17)
101017c4:	40002326 	beq	r8,zero,10101854 <__sflush_r+0xd0>
101017c8:	9c000017 	ldw	r16,0(r19)
101017cc:	10c4000c 	andi	r3,r2,4096
101017d0:	98000015 	stw	zero,0(r19)
101017d4:	18004826 	beq	r3,zero,101018f8 <__sflush_r+0x174>
101017d8:	89801417 	ldw	r6,80(r17)
101017dc:	10c0010c 	andi	r3,r2,4
101017e0:	18000626 	beq	r3,zero,101017fc <__sflush_r+0x78>
101017e4:	88c00117 	ldw	r3,4(r17)
101017e8:	88800c17 	ldw	r2,48(r17)
101017ec:	30cdc83a 	sub	r6,r6,r3
101017f0:	10000226 	beq	r2,zero,101017fc <__sflush_r+0x78>
101017f4:	88800f17 	ldw	r2,60(r17)
101017f8:	308dc83a 	sub	r6,r6,r2
101017fc:	89400717 	ldw	r5,28(r17)
10101800:	000f883a 	mov	r7,zero
10101804:	9809883a 	mov	r4,r19
10101808:	403ee83a 	callr	r8
1010180c:	00ffffc4 	movi	r3,-1
10101810:	10c04426 	beq	r2,r3,10101924 <__sflush_r+0x1a0>
10101814:	88c0030b 	ldhu	r3,12(r17)
10101818:	89000417 	ldw	r4,16(r17)
1010181c:	88000115 	stw	zero,4(r17)
10101820:	197dffcc 	andi	r5,r3,63487
10101824:	8940030d 	sth	r5,12(r17)
10101828:	89000015 	stw	r4,0(r17)
1010182c:	18c4000c 	andi	r3,r3,4096
10101830:	18002c1e 	bne	r3,zero,101018e4 <__sflush_r+0x160>
10101834:	89400c17 	ldw	r5,48(r17)
10101838:	9c000015 	stw	r16,0(r19)
1010183c:	28000526 	beq	r5,zero,10101854 <__sflush_r+0xd0>
10101840:	88801004 	addi	r2,r17,64
10101844:	28800226 	beq	r5,r2,10101850 <__sflush_r+0xcc>
10101848:	9809883a 	mov	r4,r19
1010184c:	0101ffc0 	call	10101ffc <_free_r>
10101850:	88000c15 	stw	zero,48(r17)
10101854:	0005883a 	mov	r2,zero
10101858:	dfc00417 	ldw	ra,16(sp)
1010185c:	dcc00317 	ldw	r19,12(sp)
10101860:	dc800217 	ldw	r18,8(sp)
10101864:	dc400117 	ldw	r17,4(sp)
10101868:	dc000017 	ldw	r16,0(sp)
1010186c:	dec00504 	addi	sp,sp,20
10101870:	f800283a 	ret
10101874:	2c800417 	ldw	r18,16(r5)
10101878:	903ff626 	beq	r18,zero,10101854 <__alt_data_end+0xfffe1854>
1010187c:	2c000017 	ldw	r16,0(r5)
10101880:	108000cc 	andi	r2,r2,3
10101884:	2c800015 	stw	r18,0(r5)
10101888:	84a1c83a 	sub	r16,r16,r18
1010188c:	1000131e 	bne	r2,zero,101018dc <__sflush_r+0x158>
10101890:	28800517 	ldw	r2,20(r5)
10101894:	88800215 	stw	r2,8(r17)
10101898:	04000316 	blt	zero,r16,101018a8 <__sflush_r+0x124>
1010189c:	003fed06 	br	10101854 <__alt_data_end+0xfffe1854>
101018a0:	90a5883a 	add	r18,r18,r2
101018a4:	043feb0e 	bge	zero,r16,10101854 <__alt_data_end+0xfffe1854>
101018a8:	88800917 	ldw	r2,36(r17)
101018ac:	89400717 	ldw	r5,28(r17)
101018b0:	800f883a 	mov	r7,r16
101018b4:	900d883a 	mov	r6,r18
101018b8:	9809883a 	mov	r4,r19
101018bc:	103ee83a 	callr	r2
101018c0:	80a1c83a 	sub	r16,r16,r2
101018c4:	00bff616 	blt	zero,r2,101018a0 <__alt_data_end+0xfffe18a0>
101018c8:	88c0030b 	ldhu	r3,12(r17)
101018cc:	00bfffc4 	movi	r2,-1
101018d0:	18c01014 	ori	r3,r3,64
101018d4:	88c0030d 	sth	r3,12(r17)
101018d8:	003fdf06 	br	10101858 <__alt_data_end+0xfffe1858>
101018dc:	0005883a 	mov	r2,zero
101018e0:	003fec06 	br	10101894 <__alt_data_end+0xfffe1894>
101018e4:	88801415 	stw	r2,80(r17)
101018e8:	003fd206 	br	10101834 <__alt_data_end+0xfffe1834>
101018ec:	28c00f17 	ldw	r3,60(r5)
101018f0:	00ffb316 	blt	zero,r3,101017c0 <__alt_data_end+0xfffe17c0>
101018f4:	003fd706 	br	10101854 <__alt_data_end+0xfffe1854>
101018f8:	89400717 	ldw	r5,28(r17)
101018fc:	000d883a 	mov	r6,zero
10101900:	01c00044 	movi	r7,1
10101904:	9809883a 	mov	r4,r19
10101908:	403ee83a 	callr	r8
1010190c:	100d883a 	mov	r6,r2
10101910:	00bfffc4 	movi	r2,-1
10101914:	30801426 	beq	r6,r2,10101968 <__sflush_r+0x1e4>
10101918:	8880030b 	ldhu	r2,12(r17)
1010191c:	8a000a17 	ldw	r8,40(r17)
10101920:	003fae06 	br	101017dc <__alt_data_end+0xfffe17dc>
10101924:	98c00017 	ldw	r3,0(r19)
10101928:	183fba26 	beq	r3,zero,10101814 <__alt_data_end+0xfffe1814>
1010192c:	01000744 	movi	r4,29
10101930:	19000626 	beq	r3,r4,1010194c <__sflush_r+0x1c8>
10101934:	01000584 	movi	r4,22
10101938:	19000426 	beq	r3,r4,1010194c <__sflush_r+0x1c8>
1010193c:	88c0030b 	ldhu	r3,12(r17)
10101940:	18c01014 	ori	r3,r3,64
10101944:	88c0030d 	sth	r3,12(r17)
10101948:	003fc306 	br	10101858 <__alt_data_end+0xfffe1858>
1010194c:	8880030b 	ldhu	r2,12(r17)
10101950:	88c00417 	ldw	r3,16(r17)
10101954:	88000115 	stw	zero,4(r17)
10101958:	10bdffcc 	andi	r2,r2,63487
1010195c:	8880030d 	sth	r2,12(r17)
10101960:	88c00015 	stw	r3,0(r17)
10101964:	003fb306 	br	10101834 <__alt_data_end+0xfffe1834>
10101968:	98800017 	ldw	r2,0(r19)
1010196c:	103fea26 	beq	r2,zero,10101918 <__alt_data_end+0xfffe1918>
10101970:	00c00744 	movi	r3,29
10101974:	10c00226 	beq	r2,r3,10101980 <__sflush_r+0x1fc>
10101978:	00c00584 	movi	r3,22
1010197c:	10c0031e 	bne	r2,r3,1010198c <__sflush_r+0x208>
10101980:	9c000015 	stw	r16,0(r19)
10101984:	0005883a 	mov	r2,zero
10101988:	003fb306 	br	10101858 <__alt_data_end+0xfffe1858>
1010198c:	88c0030b 	ldhu	r3,12(r17)
10101990:	3005883a 	mov	r2,r6
10101994:	18c01014 	ori	r3,r3,64
10101998:	88c0030d 	sth	r3,12(r17)
1010199c:	003fae06 	br	10101858 <__alt_data_end+0xfffe1858>

101019a0 <_fflush_r>:
101019a0:	defffd04 	addi	sp,sp,-12
101019a4:	dc000115 	stw	r16,4(sp)
101019a8:	dfc00215 	stw	ra,8(sp)
101019ac:	2021883a 	mov	r16,r4
101019b0:	20000226 	beq	r4,zero,101019bc <_fflush_r+0x1c>
101019b4:	20800e17 	ldw	r2,56(r4)
101019b8:	10000c26 	beq	r2,zero,101019ec <_fflush_r+0x4c>
101019bc:	2880030f 	ldh	r2,12(r5)
101019c0:	1000051e 	bne	r2,zero,101019d8 <_fflush_r+0x38>
101019c4:	0005883a 	mov	r2,zero
101019c8:	dfc00217 	ldw	ra,8(sp)
101019cc:	dc000117 	ldw	r16,4(sp)
101019d0:	dec00304 	addi	sp,sp,12
101019d4:	f800283a 	ret
101019d8:	8009883a 	mov	r4,r16
101019dc:	dfc00217 	ldw	ra,8(sp)
101019e0:	dc000117 	ldw	r16,4(sp)
101019e4:	dec00304 	addi	sp,sp,12
101019e8:	01017841 	jmpi	10101784 <__sflush_r>
101019ec:	d9400015 	stw	r5,0(sp)
101019f0:	0101d7c0 	call	10101d7c <__sinit>
101019f4:	d9400017 	ldw	r5,0(sp)
101019f8:	003ff006 	br	101019bc <__alt_data_end+0xfffe19bc>

101019fc <fflush>:
101019fc:	20000526 	beq	r4,zero,10101a14 <fflush+0x18>
10101a00:	00840474 	movhi	r2,4113
10101a04:	108b6d04 	addi	r2,r2,11700
10101a08:	200b883a 	mov	r5,r4
10101a0c:	11000017 	ldw	r4,0(r2)
10101a10:	01019a01 	jmpi	101019a0 <_fflush_r>
10101a14:	00840474 	movhi	r2,4113
10101a18:	108b6c04 	addi	r2,r2,11696
10101a1c:	11000017 	ldw	r4,0(r2)
10101a20:	01440434 	movhi	r5,4112
10101a24:	29466804 	addi	r5,r5,6560
10101a28:	01028ac1 	jmpi	101028ac <_fwalk_reent>

10101a2c <__fp_unlock>:
10101a2c:	0005883a 	mov	r2,zero
10101a30:	f800283a 	ret

10101a34 <_cleanup_r>:
10101a34:	01440434 	movhi	r5,4112
10101a38:	2945a004 	addi	r5,r5,5760
10101a3c:	01028ac1 	jmpi	101028ac <_fwalk_reent>

10101a40 <__sinit.part.1>:
10101a40:	defff704 	addi	sp,sp,-36
10101a44:	00c40434 	movhi	r3,4112
10101a48:	dfc00815 	stw	ra,32(sp)
10101a4c:	ddc00715 	stw	r23,28(sp)
10101a50:	dd800615 	stw	r22,24(sp)
10101a54:	dd400515 	stw	r21,20(sp)
10101a58:	dd000415 	stw	r20,16(sp)
10101a5c:	dcc00315 	stw	r19,12(sp)
10101a60:	dc800215 	stw	r18,8(sp)
10101a64:	dc400115 	stw	r17,4(sp)
10101a68:	dc000015 	stw	r16,0(sp)
10101a6c:	18c68d04 	addi	r3,r3,6708
10101a70:	24000117 	ldw	r16,4(r4)
10101a74:	20c00f15 	stw	r3,60(r4)
10101a78:	2080bb04 	addi	r2,r4,748
10101a7c:	00c000c4 	movi	r3,3
10101a80:	20c0b915 	stw	r3,740(r4)
10101a84:	2080ba15 	stw	r2,744(r4)
10101a88:	2000b815 	stw	zero,736(r4)
10101a8c:	05c00204 	movi	r23,8
10101a90:	00800104 	movi	r2,4
10101a94:	2025883a 	mov	r18,r4
10101a98:	b80d883a 	mov	r6,r23
10101a9c:	81001704 	addi	r4,r16,92
10101aa0:	000b883a 	mov	r5,zero
10101aa4:	80000015 	stw	zero,0(r16)
10101aa8:	80000115 	stw	zero,4(r16)
10101aac:	80000215 	stw	zero,8(r16)
10101ab0:	8080030d 	sth	r2,12(r16)
10101ab4:	80001915 	stw	zero,100(r16)
10101ab8:	8000038d 	sth	zero,14(r16)
10101abc:	80000415 	stw	zero,16(r16)
10101ac0:	80000515 	stw	zero,20(r16)
10101ac4:	80000615 	stw	zero,24(r16)
10101ac8:	01034380 	call	10103438 <memset>
10101acc:	05840434 	movhi	r22,4112
10101ad0:	94400217 	ldw	r17,8(r18)
10101ad4:	05440434 	movhi	r21,4112
10101ad8:	05040434 	movhi	r20,4112
10101adc:	04c40434 	movhi	r19,4112
10101ae0:	b58e1c04 	addi	r22,r22,14448
10101ae4:	ad4e3304 	addi	r21,r21,14540
10101ae8:	a50e5204 	addi	r20,r20,14664
10101aec:	9cce6904 	addi	r19,r19,14756
10101af0:	85800815 	stw	r22,32(r16)
10101af4:	85400915 	stw	r21,36(r16)
10101af8:	85000a15 	stw	r20,40(r16)
10101afc:	84c00b15 	stw	r19,44(r16)
10101b00:	84000715 	stw	r16,28(r16)
10101b04:	00800284 	movi	r2,10
10101b08:	8880030d 	sth	r2,12(r17)
10101b0c:	00800044 	movi	r2,1
10101b10:	b80d883a 	mov	r6,r23
10101b14:	89001704 	addi	r4,r17,92
10101b18:	000b883a 	mov	r5,zero
10101b1c:	88000015 	stw	zero,0(r17)
10101b20:	88000115 	stw	zero,4(r17)
10101b24:	88000215 	stw	zero,8(r17)
10101b28:	88001915 	stw	zero,100(r17)
10101b2c:	8880038d 	sth	r2,14(r17)
10101b30:	88000415 	stw	zero,16(r17)
10101b34:	88000515 	stw	zero,20(r17)
10101b38:	88000615 	stw	zero,24(r17)
10101b3c:	01034380 	call	10103438 <memset>
10101b40:	94000317 	ldw	r16,12(r18)
10101b44:	00800484 	movi	r2,18
10101b48:	8c400715 	stw	r17,28(r17)
10101b4c:	8d800815 	stw	r22,32(r17)
10101b50:	8d400915 	stw	r21,36(r17)
10101b54:	8d000a15 	stw	r20,40(r17)
10101b58:	8cc00b15 	stw	r19,44(r17)
10101b5c:	8080030d 	sth	r2,12(r16)
10101b60:	00800084 	movi	r2,2
10101b64:	80000015 	stw	zero,0(r16)
10101b68:	80000115 	stw	zero,4(r16)
10101b6c:	80000215 	stw	zero,8(r16)
10101b70:	80001915 	stw	zero,100(r16)
10101b74:	8080038d 	sth	r2,14(r16)
10101b78:	80000415 	stw	zero,16(r16)
10101b7c:	80000515 	stw	zero,20(r16)
10101b80:	80000615 	stw	zero,24(r16)
10101b84:	b80d883a 	mov	r6,r23
10101b88:	000b883a 	mov	r5,zero
10101b8c:	81001704 	addi	r4,r16,92
10101b90:	01034380 	call	10103438 <memset>
10101b94:	00800044 	movi	r2,1
10101b98:	84000715 	stw	r16,28(r16)
10101b9c:	85800815 	stw	r22,32(r16)
10101ba0:	85400915 	stw	r21,36(r16)
10101ba4:	85000a15 	stw	r20,40(r16)
10101ba8:	84c00b15 	stw	r19,44(r16)
10101bac:	90800e15 	stw	r2,56(r18)
10101bb0:	dfc00817 	ldw	ra,32(sp)
10101bb4:	ddc00717 	ldw	r23,28(sp)
10101bb8:	dd800617 	ldw	r22,24(sp)
10101bbc:	dd400517 	ldw	r21,20(sp)
10101bc0:	dd000417 	ldw	r20,16(sp)
10101bc4:	dcc00317 	ldw	r19,12(sp)
10101bc8:	dc800217 	ldw	r18,8(sp)
10101bcc:	dc400117 	ldw	r17,4(sp)
10101bd0:	dc000017 	ldw	r16,0(sp)
10101bd4:	dec00904 	addi	sp,sp,36
10101bd8:	f800283a 	ret

10101bdc <__fp_lock>:
10101bdc:	0005883a 	mov	r2,zero
10101be0:	f800283a 	ret

10101be4 <__sfmoreglue>:
10101be4:	defffc04 	addi	sp,sp,-16
10101be8:	dc400115 	stw	r17,4(sp)
10101bec:	2c7fffc4 	addi	r17,r5,-1
10101bf0:	8c401a24 	muli	r17,r17,104
10101bf4:	dc800215 	stw	r18,8(sp)
10101bf8:	2825883a 	mov	r18,r5
10101bfc:	89401d04 	addi	r5,r17,116
10101c00:	dc000015 	stw	r16,0(sp)
10101c04:	dfc00315 	stw	ra,12(sp)
10101c08:	0102c2c0 	call	10102c2c <_malloc_r>
10101c0c:	1021883a 	mov	r16,r2
10101c10:	10000726 	beq	r2,zero,10101c30 <__sfmoreglue+0x4c>
10101c14:	11000304 	addi	r4,r2,12
10101c18:	10000015 	stw	zero,0(r2)
10101c1c:	14800115 	stw	r18,4(r2)
10101c20:	11000215 	stw	r4,8(r2)
10101c24:	89801a04 	addi	r6,r17,104
10101c28:	000b883a 	mov	r5,zero
10101c2c:	01034380 	call	10103438 <memset>
10101c30:	8005883a 	mov	r2,r16
10101c34:	dfc00317 	ldw	ra,12(sp)
10101c38:	dc800217 	ldw	r18,8(sp)
10101c3c:	dc400117 	ldw	r17,4(sp)
10101c40:	dc000017 	ldw	r16,0(sp)
10101c44:	dec00404 	addi	sp,sp,16
10101c48:	f800283a 	ret

10101c4c <__sfp>:
10101c4c:	defffb04 	addi	sp,sp,-20
10101c50:	dc000015 	stw	r16,0(sp)
10101c54:	04040474 	movhi	r16,4113
10101c58:	840b6c04 	addi	r16,r16,11696
10101c5c:	dcc00315 	stw	r19,12(sp)
10101c60:	2027883a 	mov	r19,r4
10101c64:	81000017 	ldw	r4,0(r16)
10101c68:	dfc00415 	stw	ra,16(sp)
10101c6c:	dc800215 	stw	r18,8(sp)
10101c70:	20800e17 	ldw	r2,56(r4)
10101c74:	dc400115 	stw	r17,4(sp)
10101c78:	1000021e 	bne	r2,zero,10101c84 <__sfp+0x38>
10101c7c:	0101a400 	call	10101a40 <__sinit.part.1>
10101c80:	81000017 	ldw	r4,0(r16)
10101c84:	2480b804 	addi	r18,r4,736
10101c88:	047fffc4 	movi	r17,-1
10101c8c:	91000117 	ldw	r4,4(r18)
10101c90:	94000217 	ldw	r16,8(r18)
10101c94:	213fffc4 	addi	r4,r4,-1
10101c98:	20000a16 	blt	r4,zero,10101cc4 <__sfp+0x78>
10101c9c:	8080030f 	ldh	r2,12(r16)
10101ca0:	10000c26 	beq	r2,zero,10101cd4 <__sfp+0x88>
10101ca4:	80c01d04 	addi	r3,r16,116
10101ca8:	00000206 	br	10101cb4 <__sfp+0x68>
10101cac:	18bfe60f 	ldh	r2,-104(r3)
10101cb0:	10000826 	beq	r2,zero,10101cd4 <__sfp+0x88>
10101cb4:	213fffc4 	addi	r4,r4,-1
10101cb8:	1c3ffd04 	addi	r16,r3,-12
10101cbc:	18c01a04 	addi	r3,r3,104
10101cc0:	247ffa1e 	bne	r4,r17,10101cac <__alt_data_end+0xfffe1cac>
10101cc4:	90800017 	ldw	r2,0(r18)
10101cc8:	10001d26 	beq	r2,zero,10101d40 <__sfp+0xf4>
10101ccc:	1025883a 	mov	r18,r2
10101cd0:	003fee06 	br	10101c8c <__alt_data_end+0xfffe1c8c>
10101cd4:	00bfffc4 	movi	r2,-1
10101cd8:	8080038d 	sth	r2,14(r16)
10101cdc:	00800044 	movi	r2,1
10101ce0:	8080030d 	sth	r2,12(r16)
10101ce4:	80001915 	stw	zero,100(r16)
10101ce8:	80000015 	stw	zero,0(r16)
10101cec:	80000215 	stw	zero,8(r16)
10101cf0:	80000115 	stw	zero,4(r16)
10101cf4:	80000415 	stw	zero,16(r16)
10101cf8:	80000515 	stw	zero,20(r16)
10101cfc:	80000615 	stw	zero,24(r16)
10101d00:	01800204 	movi	r6,8
10101d04:	000b883a 	mov	r5,zero
10101d08:	81001704 	addi	r4,r16,92
10101d0c:	01034380 	call	10103438 <memset>
10101d10:	8005883a 	mov	r2,r16
10101d14:	80000c15 	stw	zero,48(r16)
10101d18:	80000d15 	stw	zero,52(r16)
10101d1c:	80001115 	stw	zero,68(r16)
10101d20:	80001215 	stw	zero,72(r16)
10101d24:	dfc00417 	ldw	ra,16(sp)
10101d28:	dcc00317 	ldw	r19,12(sp)
10101d2c:	dc800217 	ldw	r18,8(sp)
10101d30:	dc400117 	ldw	r17,4(sp)
10101d34:	dc000017 	ldw	r16,0(sp)
10101d38:	dec00504 	addi	sp,sp,20
10101d3c:	f800283a 	ret
10101d40:	01400104 	movi	r5,4
10101d44:	9809883a 	mov	r4,r19
10101d48:	0101be40 	call	10101be4 <__sfmoreglue>
10101d4c:	90800015 	stw	r2,0(r18)
10101d50:	103fde1e 	bne	r2,zero,10101ccc <__alt_data_end+0xfffe1ccc>
10101d54:	00800304 	movi	r2,12
10101d58:	98800015 	stw	r2,0(r19)
10101d5c:	0005883a 	mov	r2,zero
10101d60:	003ff006 	br	10101d24 <__alt_data_end+0xfffe1d24>

10101d64 <_cleanup>:
10101d64:	00840474 	movhi	r2,4113
10101d68:	108b6c04 	addi	r2,r2,11696
10101d6c:	11000017 	ldw	r4,0(r2)
10101d70:	01440434 	movhi	r5,4112
10101d74:	2945a004 	addi	r5,r5,5760
10101d78:	01028ac1 	jmpi	101028ac <_fwalk_reent>

10101d7c <__sinit>:
10101d7c:	20800e17 	ldw	r2,56(r4)
10101d80:	10000126 	beq	r2,zero,10101d88 <__sinit+0xc>
10101d84:	f800283a 	ret
10101d88:	0101a401 	jmpi	10101a40 <__sinit.part.1>

10101d8c <__sfp_lock_acquire>:
10101d8c:	f800283a 	ret

10101d90 <__sfp_lock_release>:
10101d90:	f800283a 	ret

10101d94 <__sinit_lock_acquire>:
10101d94:	f800283a 	ret

10101d98 <__sinit_lock_release>:
10101d98:	f800283a 	ret

10101d9c <__fp_lock_all>:
10101d9c:	00840474 	movhi	r2,4113
10101da0:	108b6d04 	addi	r2,r2,11700
10101da4:	11000017 	ldw	r4,0(r2)
10101da8:	01440434 	movhi	r5,4112
10101dac:	2946f704 	addi	r5,r5,7132
10101db0:	01027e81 	jmpi	101027e8 <_fwalk>

10101db4 <__fp_unlock_all>:
10101db4:	00840474 	movhi	r2,4113
10101db8:	108b6d04 	addi	r2,r2,11700
10101dbc:	11000017 	ldw	r4,0(r2)
10101dc0:	01440434 	movhi	r5,4112
10101dc4:	29468b04 	addi	r5,r5,6700
10101dc8:	01027e81 	jmpi	101027e8 <_fwalk>

10101dcc <_fopen_r>:
10101dcc:	defffa04 	addi	sp,sp,-24
10101dd0:	3005883a 	mov	r2,r6
10101dd4:	dcc00415 	stw	r19,16(sp)
10101dd8:	d80d883a 	mov	r6,sp
10101ddc:	2827883a 	mov	r19,r5
10101de0:	100b883a 	mov	r5,r2
10101de4:	dc800315 	stw	r18,12(sp)
10101de8:	dfc00515 	stw	ra,20(sp)
10101dec:	dc400215 	stw	r17,8(sp)
10101df0:	dc000115 	stw	r16,4(sp)
10101df4:	2025883a 	mov	r18,r4
10101df8:	010770c0 	call	1010770c <__sflags>
10101dfc:	10002726 	beq	r2,zero,10101e9c <_fopen_r+0xd0>
10101e00:	9009883a 	mov	r4,r18
10101e04:	1023883a 	mov	r17,r2
10101e08:	0101c4c0 	call	10101c4c <__sfp>
10101e0c:	1021883a 	mov	r16,r2
10101e10:	10002226 	beq	r2,zero,10101e9c <_fopen_r+0xd0>
10101e14:	d9800017 	ldw	r6,0(sp)
10101e18:	01c06d84 	movi	r7,438
10101e1c:	980b883a 	mov	r5,r19
10101e20:	9009883a 	mov	r4,r18
10101e24:	01035600 	call	10103560 <_open_r>
10101e28:	10001916 	blt	r2,zero,10101e90 <_fopen_r+0xc4>
10101e2c:	8080038d 	sth	r2,14(r16)
10101e30:	00840434 	movhi	r2,4112
10101e34:	108e1c04 	addi	r2,r2,14448
10101e38:	80800815 	stw	r2,32(r16)
10101e3c:	00840434 	movhi	r2,4112
10101e40:	108e3304 	addi	r2,r2,14540
10101e44:	80800915 	stw	r2,36(r16)
10101e48:	00840434 	movhi	r2,4112
10101e4c:	108e5204 	addi	r2,r2,14664
10101e50:	80800a15 	stw	r2,40(r16)
10101e54:	00840434 	movhi	r2,4112
10101e58:	108e6904 	addi	r2,r2,14756
10101e5c:	8440030d 	sth	r17,12(r16)
10101e60:	84000715 	stw	r16,28(r16)
10101e64:	80800b15 	stw	r2,44(r16)
10101e68:	8c40400c 	andi	r17,r17,256
10101e6c:	88000d1e 	bne	r17,zero,10101ea4 <_fopen_r+0xd8>
10101e70:	8005883a 	mov	r2,r16
10101e74:	dfc00517 	ldw	ra,20(sp)
10101e78:	dcc00417 	ldw	r19,16(sp)
10101e7c:	dc800317 	ldw	r18,12(sp)
10101e80:	dc400217 	ldw	r17,8(sp)
10101e84:	dc000117 	ldw	r16,4(sp)
10101e88:	dec00604 	addi	sp,sp,24
10101e8c:	f800283a 	ret
10101e90:	0101d8c0 	call	10101d8c <__sfp_lock_acquire>
10101e94:	8000030d 	sth	zero,12(r16)
10101e98:	0101d900 	call	10101d90 <__sfp_lock_release>
10101e9c:	0005883a 	mov	r2,zero
10101ea0:	003ff406 	br	10101e74 <__alt_data_end+0xfffe1e74>
10101ea4:	01c00084 	movi	r7,2
10101ea8:	000d883a 	mov	r6,zero
10101eac:	800b883a 	mov	r5,r16
10101eb0:	9009883a 	mov	r4,r18
10101eb4:	010230c0 	call	1010230c <_fseek_r>
10101eb8:	8005883a 	mov	r2,r16
10101ebc:	003fed06 	br	10101e74 <__alt_data_end+0xfffe1e74>

10101ec0 <fopen>:
10101ec0:	00840474 	movhi	r2,4113
10101ec4:	108b6d04 	addi	r2,r2,11700
10101ec8:	280d883a 	mov	r6,r5
10101ecc:	200b883a 	mov	r5,r4
10101ed0:	11000017 	ldw	r4,0(r2)
10101ed4:	0101dcc1 	jmpi	10101dcc <_fopen_r>

10101ed8 <_malloc_trim_r>:
10101ed8:	defffb04 	addi	sp,sp,-20
10101edc:	dcc00315 	stw	r19,12(sp)
10101ee0:	04c40474 	movhi	r19,4113
10101ee4:	dc800215 	stw	r18,8(sp)
10101ee8:	dc400115 	stw	r17,4(sp)
10101eec:	dc000015 	stw	r16,0(sp)
10101ef0:	dfc00415 	stw	ra,16(sp)
10101ef4:	2821883a 	mov	r16,r5
10101ef8:	9cc5ca04 	addi	r19,r19,5928
10101efc:	2025883a 	mov	r18,r4
10101f00:	010ec6c0 	call	1010ec6c <__malloc_lock>
10101f04:	98800217 	ldw	r2,8(r19)
10101f08:	14400117 	ldw	r17,4(r2)
10101f0c:	00bfff04 	movi	r2,-4
10101f10:	88a2703a 	and	r17,r17,r2
10101f14:	8c21c83a 	sub	r16,r17,r16
10101f18:	8403fbc4 	addi	r16,r16,4079
10101f1c:	8020d33a 	srli	r16,r16,12
10101f20:	0083ffc4 	movi	r2,4095
10101f24:	843fffc4 	addi	r16,r16,-1
10101f28:	8020933a 	slli	r16,r16,12
10101f2c:	1400060e 	bge	r2,r16,10101f48 <_malloc_trim_r+0x70>
10101f30:	000b883a 	mov	r5,zero
10101f34:	9009883a 	mov	r4,r18
10101f38:	010381c0 	call	1010381c <_sbrk_r>
10101f3c:	98c00217 	ldw	r3,8(r19)
10101f40:	1c47883a 	add	r3,r3,r17
10101f44:	10c00a26 	beq	r2,r3,10101f70 <_malloc_trim_r+0x98>
10101f48:	9009883a 	mov	r4,r18
10101f4c:	010ec900 	call	1010ec90 <__malloc_unlock>
10101f50:	0005883a 	mov	r2,zero
10101f54:	dfc00417 	ldw	ra,16(sp)
10101f58:	dcc00317 	ldw	r19,12(sp)
10101f5c:	dc800217 	ldw	r18,8(sp)
10101f60:	dc400117 	ldw	r17,4(sp)
10101f64:	dc000017 	ldw	r16,0(sp)
10101f68:	dec00504 	addi	sp,sp,20
10101f6c:	f800283a 	ret
10101f70:	040bc83a 	sub	r5,zero,r16
10101f74:	9009883a 	mov	r4,r18
10101f78:	010381c0 	call	1010381c <_sbrk_r>
10101f7c:	00ffffc4 	movi	r3,-1
10101f80:	10c00d26 	beq	r2,r3,10101fb8 <_malloc_trim_r+0xe0>
10101f84:	00c40474 	movhi	r3,4113
10101f88:	18d24504 	addi	r3,r3,18708
10101f8c:	18800017 	ldw	r2,0(r3)
10101f90:	99000217 	ldw	r4,8(r19)
10101f94:	8c23c83a 	sub	r17,r17,r16
10101f98:	8c400054 	ori	r17,r17,1
10101f9c:	1421c83a 	sub	r16,r2,r16
10101fa0:	24400115 	stw	r17,4(r4)
10101fa4:	9009883a 	mov	r4,r18
10101fa8:	1c000015 	stw	r16,0(r3)
10101fac:	010ec900 	call	1010ec90 <__malloc_unlock>
10101fb0:	00800044 	movi	r2,1
10101fb4:	003fe706 	br	10101f54 <__alt_data_end+0xfffe1f54>
10101fb8:	000b883a 	mov	r5,zero
10101fbc:	9009883a 	mov	r4,r18
10101fc0:	010381c0 	call	1010381c <_sbrk_r>
10101fc4:	99000217 	ldw	r4,8(r19)
10101fc8:	014003c4 	movi	r5,15
10101fcc:	1107c83a 	sub	r3,r2,r4
10101fd0:	28ffdd0e 	bge	r5,r3,10101f48 <__alt_data_end+0xfffe1f48>
10101fd4:	01440474 	movhi	r5,4113
10101fd8:	294b6e04 	addi	r5,r5,11704
10101fdc:	29400017 	ldw	r5,0(r5)
10101fe0:	18c00054 	ori	r3,r3,1
10101fe4:	20c00115 	stw	r3,4(r4)
10101fe8:	00c40474 	movhi	r3,4113
10101fec:	1145c83a 	sub	r2,r2,r5
10101ff0:	18d24504 	addi	r3,r3,18708
10101ff4:	18800015 	stw	r2,0(r3)
10101ff8:	003fd306 	br	10101f48 <__alt_data_end+0xfffe1f48>

10101ffc <_free_r>:
10101ffc:	28004126 	beq	r5,zero,10102104 <_free_r+0x108>
10102000:	defffd04 	addi	sp,sp,-12
10102004:	dc400115 	stw	r17,4(sp)
10102008:	dc000015 	stw	r16,0(sp)
1010200c:	2023883a 	mov	r17,r4
10102010:	2821883a 	mov	r16,r5
10102014:	dfc00215 	stw	ra,8(sp)
10102018:	010ec6c0 	call	1010ec6c <__malloc_lock>
1010201c:	81ffff17 	ldw	r7,-4(r16)
10102020:	00bfff84 	movi	r2,-2
10102024:	01040474 	movhi	r4,4113
10102028:	81bffe04 	addi	r6,r16,-8
1010202c:	3884703a 	and	r2,r7,r2
10102030:	2105ca04 	addi	r4,r4,5928
10102034:	308b883a 	add	r5,r6,r2
10102038:	2a400117 	ldw	r9,4(r5)
1010203c:	22000217 	ldw	r8,8(r4)
10102040:	00ffff04 	movi	r3,-4
10102044:	48c6703a 	and	r3,r9,r3
10102048:	2a005726 	beq	r5,r8,101021a8 <_free_r+0x1ac>
1010204c:	28c00115 	stw	r3,4(r5)
10102050:	39c0004c 	andi	r7,r7,1
10102054:	3800091e 	bne	r7,zero,1010207c <_free_r+0x80>
10102058:	823ffe17 	ldw	r8,-8(r16)
1010205c:	22400204 	addi	r9,r4,8
10102060:	320dc83a 	sub	r6,r6,r8
10102064:	31c00217 	ldw	r7,8(r6)
10102068:	1205883a 	add	r2,r2,r8
1010206c:	3a406526 	beq	r7,r9,10102204 <_free_r+0x208>
10102070:	32000317 	ldw	r8,12(r6)
10102074:	3a000315 	stw	r8,12(r7)
10102078:	41c00215 	stw	r7,8(r8)
1010207c:	28cf883a 	add	r7,r5,r3
10102080:	39c00117 	ldw	r7,4(r7)
10102084:	39c0004c 	andi	r7,r7,1
10102088:	38003a26 	beq	r7,zero,10102174 <_free_r+0x178>
1010208c:	10c00054 	ori	r3,r2,1
10102090:	30c00115 	stw	r3,4(r6)
10102094:	3087883a 	add	r3,r6,r2
10102098:	18800015 	stw	r2,0(r3)
1010209c:	00c07fc4 	movi	r3,511
101020a0:	18801936 	bltu	r3,r2,10102108 <_free_r+0x10c>
101020a4:	1004d0fa 	srli	r2,r2,3
101020a8:	01c00044 	movi	r7,1
101020ac:	21400117 	ldw	r5,4(r4)
101020b0:	10c00044 	addi	r3,r2,1
101020b4:	18c7883a 	add	r3,r3,r3
101020b8:	1005d0ba 	srai	r2,r2,2
101020bc:	18c7883a 	add	r3,r3,r3
101020c0:	18c7883a 	add	r3,r3,r3
101020c4:	1907883a 	add	r3,r3,r4
101020c8:	3884983a 	sll	r2,r7,r2
101020cc:	19c00017 	ldw	r7,0(r3)
101020d0:	1a3ffe04 	addi	r8,r3,-8
101020d4:	1144b03a 	or	r2,r2,r5
101020d8:	32000315 	stw	r8,12(r6)
101020dc:	31c00215 	stw	r7,8(r6)
101020e0:	20800115 	stw	r2,4(r4)
101020e4:	19800015 	stw	r6,0(r3)
101020e8:	39800315 	stw	r6,12(r7)
101020ec:	8809883a 	mov	r4,r17
101020f0:	dfc00217 	ldw	ra,8(sp)
101020f4:	dc400117 	ldw	r17,4(sp)
101020f8:	dc000017 	ldw	r16,0(sp)
101020fc:	dec00304 	addi	sp,sp,12
10102100:	010ec901 	jmpi	1010ec90 <__malloc_unlock>
10102104:	f800283a 	ret
10102108:	100ad27a 	srli	r5,r2,9
1010210c:	00c00104 	movi	r3,4
10102110:	19404a36 	bltu	r3,r5,1010223c <_free_r+0x240>
10102114:	100ad1ba 	srli	r5,r2,6
10102118:	28c00e44 	addi	r3,r5,57
1010211c:	18c7883a 	add	r3,r3,r3
10102120:	29400e04 	addi	r5,r5,56
10102124:	18c7883a 	add	r3,r3,r3
10102128:	18c7883a 	add	r3,r3,r3
1010212c:	1909883a 	add	r4,r3,r4
10102130:	20c00017 	ldw	r3,0(r4)
10102134:	01c40474 	movhi	r7,4113
10102138:	213ffe04 	addi	r4,r4,-8
1010213c:	39c5ca04 	addi	r7,r7,5928
10102140:	20c04426 	beq	r4,r3,10102254 <_free_r+0x258>
10102144:	01ffff04 	movi	r7,-4
10102148:	19400117 	ldw	r5,4(r3)
1010214c:	29ca703a 	and	r5,r5,r7
10102150:	1140022e 	bgeu	r2,r5,1010215c <_free_r+0x160>
10102154:	18c00217 	ldw	r3,8(r3)
10102158:	20fffb1e 	bne	r4,r3,10102148 <__alt_data_end+0xfffe2148>
1010215c:	19000317 	ldw	r4,12(r3)
10102160:	31000315 	stw	r4,12(r6)
10102164:	30c00215 	stw	r3,8(r6)
10102168:	21800215 	stw	r6,8(r4)
1010216c:	19800315 	stw	r6,12(r3)
10102170:	003fde06 	br	101020ec <__alt_data_end+0xfffe20ec>
10102174:	29c00217 	ldw	r7,8(r5)
10102178:	10c5883a 	add	r2,r2,r3
1010217c:	00c40474 	movhi	r3,4113
10102180:	18c5cc04 	addi	r3,r3,5936
10102184:	38c03b26 	beq	r7,r3,10102274 <_free_r+0x278>
10102188:	2a000317 	ldw	r8,12(r5)
1010218c:	11400054 	ori	r5,r2,1
10102190:	3087883a 	add	r3,r6,r2
10102194:	3a000315 	stw	r8,12(r7)
10102198:	41c00215 	stw	r7,8(r8)
1010219c:	31400115 	stw	r5,4(r6)
101021a0:	18800015 	stw	r2,0(r3)
101021a4:	003fbd06 	br	1010209c <__alt_data_end+0xfffe209c>
101021a8:	39c0004c 	andi	r7,r7,1
101021ac:	10c5883a 	add	r2,r2,r3
101021b0:	3800071e 	bne	r7,zero,101021d0 <_free_r+0x1d4>
101021b4:	81fffe17 	ldw	r7,-8(r16)
101021b8:	31cdc83a 	sub	r6,r6,r7
101021bc:	30c00317 	ldw	r3,12(r6)
101021c0:	31400217 	ldw	r5,8(r6)
101021c4:	11c5883a 	add	r2,r2,r7
101021c8:	28c00315 	stw	r3,12(r5)
101021cc:	19400215 	stw	r5,8(r3)
101021d0:	10c00054 	ori	r3,r2,1
101021d4:	30c00115 	stw	r3,4(r6)
101021d8:	00c40474 	movhi	r3,4113
101021dc:	18cb6f04 	addi	r3,r3,11708
101021e0:	18c00017 	ldw	r3,0(r3)
101021e4:	21800215 	stw	r6,8(r4)
101021e8:	10ffc036 	bltu	r2,r3,101020ec <__alt_data_end+0xfffe20ec>
101021ec:	00840474 	movhi	r2,4113
101021f0:	10923a04 	addi	r2,r2,18664
101021f4:	11400017 	ldw	r5,0(r2)
101021f8:	8809883a 	mov	r4,r17
101021fc:	0101ed80 	call	10101ed8 <_malloc_trim_r>
10102200:	003fba06 	br	101020ec <__alt_data_end+0xfffe20ec>
10102204:	28c9883a 	add	r4,r5,r3
10102208:	21000117 	ldw	r4,4(r4)
1010220c:	2100004c 	andi	r4,r4,1
10102210:	2000391e 	bne	r4,zero,101022f8 <_free_r+0x2fc>
10102214:	29c00217 	ldw	r7,8(r5)
10102218:	29000317 	ldw	r4,12(r5)
1010221c:	1885883a 	add	r2,r3,r2
10102220:	10c00054 	ori	r3,r2,1
10102224:	39000315 	stw	r4,12(r7)
10102228:	21c00215 	stw	r7,8(r4)
1010222c:	30c00115 	stw	r3,4(r6)
10102230:	308d883a 	add	r6,r6,r2
10102234:	30800015 	stw	r2,0(r6)
10102238:	003fac06 	br	101020ec <__alt_data_end+0xfffe20ec>
1010223c:	00c00504 	movi	r3,20
10102240:	19401536 	bltu	r3,r5,10102298 <_free_r+0x29c>
10102244:	28c01704 	addi	r3,r5,92
10102248:	18c7883a 	add	r3,r3,r3
1010224c:	294016c4 	addi	r5,r5,91
10102250:	003fb406 	br	10102124 <__alt_data_end+0xfffe2124>
10102254:	280bd0ba 	srai	r5,r5,2
10102258:	00c00044 	movi	r3,1
1010225c:	38800117 	ldw	r2,4(r7)
10102260:	194a983a 	sll	r5,r3,r5
10102264:	2007883a 	mov	r3,r4
10102268:	2884b03a 	or	r2,r5,r2
1010226c:	38800115 	stw	r2,4(r7)
10102270:	003fbb06 	br	10102160 <__alt_data_end+0xfffe2160>
10102274:	21800515 	stw	r6,20(r4)
10102278:	21800415 	stw	r6,16(r4)
1010227c:	10c00054 	ori	r3,r2,1
10102280:	31c00315 	stw	r7,12(r6)
10102284:	31c00215 	stw	r7,8(r6)
10102288:	30c00115 	stw	r3,4(r6)
1010228c:	308d883a 	add	r6,r6,r2
10102290:	30800015 	stw	r2,0(r6)
10102294:	003f9506 	br	101020ec <__alt_data_end+0xfffe20ec>
10102298:	00c01504 	movi	r3,84
1010229c:	19400536 	bltu	r3,r5,101022b4 <_free_r+0x2b8>
101022a0:	100ad33a 	srli	r5,r2,12
101022a4:	28c01bc4 	addi	r3,r5,111
101022a8:	18c7883a 	add	r3,r3,r3
101022ac:	29401b84 	addi	r5,r5,110
101022b0:	003f9c06 	br	10102124 <__alt_data_end+0xfffe2124>
101022b4:	00c05504 	movi	r3,340
101022b8:	19400536 	bltu	r3,r5,101022d0 <_free_r+0x2d4>
101022bc:	100ad3fa 	srli	r5,r2,15
101022c0:	28c01e04 	addi	r3,r5,120
101022c4:	18c7883a 	add	r3,r3,r3
101022c8:	29401dc4 	addi	r5,r5,119
101022cc:	003f9506 	br	10102124 <__alt_data_end+0xfffe2124>
101022d0:	00c15504 	movi	r3,1364
101022d4:	19400536 	bltu	r3,r5,101022ec <_free_r+0x2f0>
101022d8:	100ad4ba 	srli	r5,r2,18
101022dc:	28c01f44 	addi	r3,r5,125
101022e0:	18c7883a 	add	r3,r3,r3
101022e4:	29401f04 	addi	r5,r5,124
101022e8:	003f8e06 	br	10102124 <__alt_data_end+0xfffe2124>
101022ec:	00c03f84 	movi	r3,254
101022f0:	01401f84 	movi	r5,126
101022f4:	003f8b06 	br	10102124 <__alt_data_end+0xfffe2124>
101022f8:	10c00054 	ori	r3,r2,1
101022fc:	30c00115 	stw	r3,4(r6)
10102300:	308d883a 	add	r6,r6,r2
10102304:	30800015 	stw	r2,0(r6)
10102308:	003f7806 	br	101020ec <__alt_data_end+0xfffe20ec>

1010230c <_fseek_r>:
1010230c:	010232c1 	jmpi	1010232c <_fseeko_r>

10102310 <fseek>:
10102310:	00840474 	movhi	r2,4113
10102314:	108b6d04 	addi	r2,r2,11700
10102318:	300f883a 	mov	r7,r6
1010231c:	280d883a 	mov	r6,r5
10102320:	200b883a 	mov	r5,r4
10102324:	11000017 	ldw	r4,0(r2)
10102328:	010232c1 	jmpi	1010232c <_fseeko_r>

1010232c <_fseeko_r>:
1010232c:	deffe804 	addi	sp,sp,-96
10102330:	dd401415 	stw	r21,80(sp)
10102334:	dc801115 	stw	r18,68(sp)
10102338:	dc401015 	stw	r17,64(sp)
1010233c:	dc000f15 	stw	r16,60(sp)
10102340:	dfc01715 	stw	ra,92(sp)
10102344:	ddc01615 	stw	r23,88(sp)
10102348:	dd801515 	stw	r22,84(sp)
1010234c:	dd001315 	stw	r20,76(sp)
10102350:	dcc01215 	stw	r19,72(sp)
10102354:	2023883a 	mov	r17,r4
10102358:	2821883a 	mov	r16,r5
1010235c:	302b883a 	mov	r21,r6
10102360:	3825883a 	mov	r18,r7
10102364:	20000226 	beq	r4,zero,10102370 <_fseeko_r+0x44>
10102368:	20800e17 	ldw	r2,56(r4)
1010236c:	10005a26 	beq	r2,zero,101024d8 <_fseeko_r+0x1ac>
10102370:	8080030b 	ldhu	r2,12(r16)
10102374:	00c04204 	movi	r3,264
10102378:	1080420c 	andi	r2,r2,264
1010237c:	10c05b26 	beq	r2,r3,101024ec <_fseeko_r+0x1c0>
10102380:	85000a17 	ldw	r20,40(r16)
10102384:	a000f626 	beq	r20,zero,10102760 <_fseeko_r+0x434>
10102388:	00800044 	movi	r2,1
1010238c:	90803e26 	beq	r18,r2,10102488 <_fseeko_r+0x15c>
10102390:	00800084 	movi	r2,2
10102394:	90801026 	beq	r18,r2,101023d8 <_fseeko_r+0xac>
10102398:	90000f26 	beq	r18,zero,101023d8 <_fseeko_r+0xac>
1010239c:	00800584 	movi	r2,22
101023a0:	88800015 	stw	r2,0(r17)
101023a4:	04ffffc4 	movi	r19,-1
101023a8:	9805883a 	mov	r2,r19
101023ac:	dfc01717 	ldw	ra,92(sp)
101023b0:	ddc01617 	ldw	r23,88(sp)
101023b4:	dd801517 	ldw	r22,84(sp)
101023b8:	dd401417 	ldw	r21,80(sp)
101023bc:	dd001317 	ldw	r20,76(sp)
101023c0:	dcc01217 	ldw	r19,72(sp)
101023c4:	dc801117 	ldw	r18,68(sp)
101023c8:	dc401017 	ldw	r17,64(sp)
101023cc:	dc000f17 	ldw	r16,60(sp)
101023d0:	dec01804 	addi	sp,sp,96
101023d4:	f800283a 	ret
101023d8:	80800417 	ldw	r2,16(r16)
101023dc:	002f883a 	mov	r23,zero
101023e0:	0027883a 	mov	r19,zero
101023e4:	1000cb26 	beq	r2,zero,10102714 <_fseeko_r+0x3e8>
101023e8:	8080030b 	ldhu	r2,12(r16)
101023ec:	10c2068c 	andi	r3,r2,2074
101023f0:	1800071e 	bne	r3,zero,10102410 <_fseeko_r+0xe4>
101023f4:	10c1000c 	andi	r3,r2,1024
101023f8:	1800451e 	bne	r3,zero,10102510 <_fseeko_r+0x1e4>
101023fc:	00c40434 	movhi	r3,4112
10102400:	18ce5204 	addi	r3,r3,14664
10102404:	a0c0b726 	beq	r20,r3,101026e4 <_fseeko_r+0x3b8>
10102408:	10820014 	ori	r2,r2,2048
1010240c:	8080030d 	sth	r2,12(r16)
10102410:	800b883a 	mov	r5,r16
10102414:	8809883a 	mov	r4,r17
10102418:	01019a00 	call	101019a0 <_fflush_r>
1010241c:	1027883a 	mov	r19,r2
10102420:	103fe01e 	bne	r2,zero,101023a4 <__alt_data_end+0xfffe23a4>
10102424:	81400717 	ldw	r5,28(r16)
10102428:	900f883a 	mov	r7,r18
1010242c:	a80d883a 	mov	r6,r21
10102430:	8809883a 	mov	r4,r17
10102434:	a03ee83a 	callr	r20
10102438:	00ffffc4 	movi	r3,-1
1010243c:	10ffd926 	beq	r2,r3,101023a4 <__alt_data_end+0xfffe23a4>
10102440:	81400c17 	ldw	r5,48(r16)
10102444:	28000526 	beq	r5,zero,1010245c <_fseeko_r+0x130>
10102448:	80801004 	addi	r2,r16,64
1010244c:	28800226 	beq	r5,r2,10102458 <_fseeko_r+0x12c>
10102450:	8809883a 	mov	r4,r17
10102454:	0101ffc0 	call	10101ffc <_free_r>
10102458:	80000c15 	stw	zero,48(r16)
1010245c:	8080030b 	ldhu	r2,12(r16)
10102460:	80c00417 	ldw	r3,16(r16)
10102464:	80000115 	stw	zero,4(r16)
10102468:	10bdf7cc 	andi	r2,r2,63455
1010246c:	80c00015 	stw	r3,0(r16)
10102470:	8080030d 	sth	r2,12(r16)
10102474:	01800204 	movi	r6,8
10102478:	000b883a 	mov	r5,zero
1010247c:	81001704 	addi	r4,r16,92
10102480:	01034380 	call	10103438 <memset>
10102484:	003fc806 	br	101023a8 <__alt_data_end+0xfffe23a8>
10102488:	800b883a 	mov	r5,r16
1010248c:	8809883a 	mov	r4,r17
10102490:	01019a00 	call	101019a0 <_fflush_r>
10102494:	8080030b 	ldhu	r2,12(r16)
10102498:	10c4000c 	andi	r3,r2,4096
1010249c:	18008726 	beq	r3,zero,101026bc <_fseeko_r+0x390>
101024a0:	84c01417 	ldw	r19,80(r16)
101024a4:	10c0010c 	andi	r3,r2,4
101024a8:	1800431e 	bne	r3,zero,101025b8 <_fseeko_r+0x28c>
101024ac:	1080020c 	andi	r2,r2,8
101024b0:	10008026 	beq	r2,zero,101026b4 <_fseeko_r+0x388>
101024b4:	80c00017 	ldw	r3,0(r16)
101024b8:	80800417 	ldw	r2,16(r16)
101024bc:	18000226 	beq	r3,zero,101024c8 <_fseeko_r+0x19c>
101024c0:	1887c83a 	sub	r3,r3,r2
101024c4:	98e7883a 	add	r19,r19,r3
101024c8:	aceb883a 	add	r21,r21,r19
101024cc:	05c00044 	movi	r23,1
101024d0:	0025883a 	mov	r18,zero
101024d4:	003fc306 	br	101023e4 <__alt_data_end+0xfffe23e4>
101024d8:	0101d7c0 	call	10101d7c <__sinit>
101024dc:	8080030b 	ldhu	r2,12(r16)
101024e0:	00c04204 	movi	r3,264
101024e4:	1080420c 	andi	r2,r2,264
101024e8:	10ffa51e 	bne	r2,r3,10102380 <__alt_data_end+0xfffe2380>
101024ec:	800b883a 	mov	r5,r16
101024f0:	8809883a 	mov	r4,r17
101024f4:	01019a00 	call	101019a0 <_fflush_r>
101024f8:	003fa106 	br	10102380 <__alt_data_end+0xfffe2380>
101024fc:	8080030b 	ldhu	r2,12(r16)
10102500:	00c10004 	movi	r3,1024
10102504:	80c01315 	stw	r3,76(r16)
10102508:	10c4b03a 	or	r2,r2,r3
1010250c:	8080030d 	sth	r2,12(r16)
10102510:	9000311e 	bne	r18,zero,101025d8 <_fseeko_r+0x2ac>
10102514:	a82d883a 	mov	r22,r21
10102518:	b800371e 	bne	r23,zero,101025f8 <_fseeko_r+0x2cc>
1010251c:	8080030b 	ldhu	r2,12(r16)
10102520:	1084000c 	andi	r2,r2,4096
10102524:	10007f26 	beq	r2,zero,10102724 <_fseeko_r+0x3f8>
10102528:	80801417 	ldw	r2,80(r16)
1010252c:	81800117 	ldw	r6,4(r16)
10102530:	81400c17 	ldw	r5,48(r16)
10102534:	11a7c83a 	sub	r19,r2,r6
10102538:	28008226 	beq	r5,zero,10102744 <_fseeko_r+0x418>
1010253c:	81c00f17 	ldw	r7,60(r16)
10102540:	99e7c83a 	sub	r19,r19,r7
10102544:	81000e17 	ldw	r4,56(r16)
10102548:	80800417 	ldw	r2,16(r16)
1010254c:	99a7883a 	add	r19,r19,r6
10102550:	2087c83a 	sub	r3,r4,r2
10102554:	98e7c83a 	sub	r19,r19,r3
10102558:	38c7883a 	add	r3,r7,r3
1010255c:	b4c02b16 	blt	r22,r19,1010260c <_fseeko_r+0x2e0>
10102560:	98c9883a 	add	r4,r19,r3
10102564:	b100292e 	bgeu	r22,r4,1010260c <_fseeko_r+0x2e0>
10102568:	b4e7c83a 	sub	r19,r22,r19
1010256c:	14c5883a 	add	r2,r2,r19
10102570:	1ce7c83a 	sub	r19,r3,r19
10102574:	80800015 	stw	r2,0(r16)
10102578:	84c00115 	stw	r19,4(r16)
1010257c:	28000526 	beq	r5,zero,10102594 <_fseeko_r+0x268>
10102580:	80801004 	addi	r2,r16,64
10102584:	28800226 	beq	r5,r2,10102590 <_fseeko_r+0x264>
10102588:	8809883a 	mov	r4,r17
1010258c:	0101ffc0 	call	10101ffc <_free_r>
10102590:	80000c15 	stw	zero,48(r16)
10102594:	8080030b 	ldhu	r2,12(r16)
10102598:	01800204 	movi	r6,8
1010259c:	000b883a 	mov	r5,zero
101025a0:	10bff7cc 	andi	r2,r2,65503
101025a4:	8080030d 	sth	r2,12(r16)
101025a8:	81001704 	addi	r4,r16,92
101025ac:	01034380 	call	10103438 <memset>
101025b0:	0027883a 	mov	r19,zero
101025b4:	003f7c06 	br	101023a8 <__alt_data_end+0xfffe23a8>
101025b8:	80c00117 	ldw	r3,4(r16)
101025bc:	80800c17 	ldw	r2,48(r16)
101025c0:	98e7c83a 	sub	r19,r19,r3
101025c4:	10003b26 	beq	r2,zero,101026b4 <_fseeko_r+0x388>
101025c8:	80c00f17 	ldw	r3,60(r16)
101025cc:	80800417 	ldw	r2,16(r16)
101025d0:	98e7c83a 	sub	r19,r19,r3
101025d4:	003fbc06 	br	101024c8 <__alt_data_end+0xfffe24c8>
101025d8:	8140038f 	ldh	r5,14(r16)
101025dc:	d80d883a 	mov	r6,sp
101025e0:	8809883a 	mov	r4,r17
101025e4:	010278c0 	call	1010278c <_fstat_r>
101025e8:	103f891e 	bne	r2,zero,10102410 <__alt_data_end+0xfffe2410>
101025ec:	dd800417 	ldw	r22,16(sp)
101025f0:	adad883a 	add	r22,r21,r22
101025f4:	b83fc926 	beq	r23,zero,1010251c <__alt_data_end+0xfffe251c>
101025f8:	81400c17 	ldw	r5,48(r16)
101025fc:	81800117 	ldw	r6,4(r16)
10102600:	28005026 	beq	r5,zero,10102744 <_fseeko_r+0x418>
10102604:	81c00f17 	ldw	r7,60(r16)
10102608:	003fce06 	br	10102544 <__alt_data_end+0xfffe2544>
1010260c:	84c01317 	ldw	r19,76(r16)
10102610:	81400717 	ldw	r5,28(r16)
10102614:	000f883a 	mov	r7,zero
10102618:	04e7c83a 	sub	r19,zero,r19
1010261c:	9da6703a 	and	r19,r19,r22
10102620:	980d883a 	mov	r6,r19
10102624:	8809883a 	mov	r4,r17
10102628:	a03ee83a 	callr	r20
1010262c:	00ffffc4 	movi	r3,-1
10102630:	10ff7726 	beq	r2,r3,10102410 <__alt_data_end+0xfffe2410>
10102634:	80800417 	ldw	r2,16(r16)
10102638:	81400c17 	ldw	r5,48(r16)
1010263c:	80000115 	stw	zero,4(r16)
10102640:	80800015 	stw	r2,0(r16)
10102644:	28000526 	beq	r5,zero,1010265c <_fseeko_r+0x330>
10102648:	80801004 	addi	r2,r16,64
1010264c:	28800226 	beq	r5,r2,10102658 <_fseeko_r+0x32c>
10102650:	8809883a 	mov	r4,r17
10102654:	0101ffc0 	call	10101ffc <_free_r>
10102658:	80000c15 	stw	zero,48(r16)
1010265c:	8080030b 	ldhu	r2,12(r16)
10102660:	b4e7c83a 	sub	r19,r22,r19
10102664:	10bff7cc 	andi	r2,r2,65503
10102668:	8080030d 	sth	r2,12(r16)
1010266c:	98000b26 	beq	r19,zero,1010269c <_fseeko_r+0x370>
10102670:	800b883a 	mov	r5,r16
10102674:	8809883a 	mov	r4,r17
10102678:	01036480 	call	10103648 <__srefill_r>
1010267c:	103f641e 	bne	r2,zero,10102410 <__alt_data_end+0xfffe2410>
10102680:	80800117 	ldw	r2,4(r16)
10102684:	14ff6236 	bltu	r2,r19,10102410 <__alt_data_end+0xfffe2410>
10102688:	80c00017 	ldw	r3,0(r16)
1010268c:	14c5c83a 	sub	r2,r2,r19
10102690:	80800115 	stw	r2,4(r16)
10102694:	1ce7883a 	add	r19,r3,r19
10102698:	84c00015 	stw	r19,0(r16)
1010269c:	01800204 	movi	r6,8
101026a0:	000b883a 	mov	r5,zero
101026a4:	81001704 	addi	r4,r16,92
101026a8:	01034380 	call	10103438 <memset>
101026ac:	0027883a 	mov	r19,zero
101026b0:	003f3d06 	br	101023a8 <__alt_data_end+0xfffe23a8>
101026b4:	80800417 	ldw	r2,16(r16)
101026b8:	003f8306 	br	101024c8 <__alt_data_end+0xfffe24c8>
101026bc:	81400717 	ldw	r5,28(r16)
101026c0:	900f883a 	mov	r7,r18
101026c4:	000d883a 	mov	r6,zero
101026c8:	8809883a 	mov	r4,r17
101026cc:	a03ee83a 	callr	r20
101026d0:	1027883a 	mov	r19,r2
101026d4:	00bfffc4 	movi	r2,-1
101026d8:	98bf3226 	beq	r19,r2,101023a4 <__alt_data_end+0xfffe23a4>
101026dc:	8080030b 	ldhu	r2,12(r16)
101026e0:	003f7006 	br	101024a4 <__alt_data_end+0xfffe24a4>
101026e4:	8140038f 	ldh	r5,14(r16)
101026e8:	283f4716 	blt	r5,zero,10102408 <__alt_data_end+0xfffe2408>
101026ec:	d80d883a 	mov	r6,sp
101026f0:	8809883a 	mov	r4,r17
101026f4:	010278c0 	call	1010278c <_fstat_r>
101026f8:	1000041e 	bne	r2,zero,1010270c <_fseeko_r+0x3e0>
101026fc:	d8800117 	ldw	r2,4(sp)
10102700:	00e00014 	movui	r3,32768
10102704:	10bc000c 	andi	r2,r2,61440
10102708:	10ff7c26 	beq	r2,r3,101024fc <__alt_data_end+0xfffe24fc>
1010270c:	8080030b 	ldhu	r2,12(r16)
10102710:	003f3d06 	br	10102408 <__alt_data_end+0xfffe2408>
10102714:	800b883a 	mov	r5,r16
10102718:	8809883a 	mov	r4,r17
1010271c:	0102a700 	call	10102a70 <__smakebuf_r>
10102720:	003f3106 	br	101023e8 <__alt_data_end+0xfffe23e8>
10102724:	81400717 	ldw	r5,28(r16)
10102728:	01c00044 	movi	r7,1
1010272c:	000d883a 	mov	r6,zero
10102730:	8809883a 	mov	r4,r17
10102734:	a03ee83a 	callr	r20
10102738:	00ffffc4 	movi	r3,-1
1010273c:	10ff7b1e 	bne	r2,r3,1010252c <__alt_data_end+0xfffe252c>
10102740:	003f3306 	br	10102410 <__alt_data_end+0xfffe2410>
10102744:	80c00017 	ldw	r3,0(r16)
10102748:	80800417 	ldw	r2,16(r16)
1010274c:	000b883a 	mov	r5,zero
10102750:	1887c83a 	sub	r3,r3,r2
10102754:	98e7c83a 	sub	r19,r19,r3
10102758:	30c7883a 	add	r3,r6,r3
1010275c:	003f7f06 	br	1010255c <__alt_data_end+0xfffe255c>
10102760:	00800744 	movi	r2,29
10102764:	88800015 	stw	r2,0(r17)
10102768:	04ffffc4 	movi	r19,-1
1010276c:	003f0e06 	br	101023a8 <__alt_data_end+0xfffe23a8>

10102770 <fseeko>:
10102770:	00840474 	movhi	r2,4113
10102774:	108b6d04 	addi	r2,r2,11700
10102778:	300f883a 	mov	r7,r6
1010277c:	280d883a 	mov	r6,r5
10102780:	200b883a 	mov	r5,r4
10102784:	11000017 	ldw	r4,0(r2)
10102788:	010232c1 	jmpi	1010232c <_fseeko_r>

1010278c <_fstat_r>:
1010278c:	defffd04 	addi	sp,sp,-12
10102790:	2805883a 	mov	r2,r5
10102794:	dc000015 	stw	r16,0(sp)
10102798:	04040474 	movhi	r16,4113
1010279c:	dc400115 	stw	r17,4(sp)
101027a0:	84123704 	addi	r16,r16,18652
101027a4:	2023883a 	mov	r17,r4
101027a8:	300b883a 	mov	r5,r6
101027ac:	1009883a 	mov	r4,r2
101027b0:	dfc00215 	stw	ra,8(sp)
101027b4:	80000015 	stw	zero,0(r16)
101027b8:	010e83c0 	call	1010e83c <fstat>
101027bc:	00ffffc4 	movi	r3,-1
101027c0:	10c00526 	beq	r2,r3,101027d8 <_fstat_r+0x4c>
101027c4:	dfc00217 	ldw	ra,8(sp)
101027c8:	dc400117 	ldw	r17,4(sp)
101027cc:	dc000017 	ldw	r16,0(sp)
101027d0:	dec00304 	addi	sp,sp,12
101027d4:	f800283a 	ret
101027d8:	80c00017 	ldw	r3,0(r16)
101027dc:	183ff926 	beq	r3,zero,101027c4 <__alt_data_end+0xfffe27c4>
101027e0:	88c00015 	stw	r3,0(r17)
101027e4:	003ff706 	br	101027c4 <__alt_data_end+0xfffe27c4>

101027e8 <_fwalk>:
101027e8:	defff704 	addi	sp,sp,-36
101027ec:	dd000415 	stw	r20,16(sp)
101027f0:	dfc00815 	stw	ra,32(sp)
101027f4:	ddc00715 	stw	r23,28(sp)
101027f8:	dd800615 	stw	r22,24(sp)
101027fc:	dd400515 	stw	r21,20(sp)
10102800:	dcc00315 	stw	r19,12(sp)
10102804:	dc800215 	stw	r18,8(sp)
10102808:	dc400115 	stw	r17,4(sp)
1010280c:	dc000015 	stw	r16,0(sp)
10102810:	2500b804 	addi	r20,r4,736
10102814:	a0002326 	beq	r20,zero,101028a4 <_fwalk+0xbc>
10102818:	282b883a 	mov	r21,r5
1010281c:	002f883a 	mov	r23,zero
10102820:	05800044 	movi	r22,1
10102824:	04ffffc4 	movi	r19,-1
10102828:	a4400117 	ldw	r17,4(r20)
1010282c:	a4800217 	ldw	r18,8(r20)
10102830:	8c7fffc4 	addi	r17,r17,-1
10102834:	88000d16 	blt	r17,zero,1010286c <_fwalk+0x84>
10102838:	94000304 	addi	r16,r18,12
1010283c:	94800384 	addi	r18,r18,14
10102840:	8080000b 	ldhu	r2,0(r16)
10102844:	8c7fffc4 	addi	r17,r17,-1
10102848:	813ffd04 	addi	r4,r16,-12
1010284c:	b080042e 	bgeu	r22,r2,10102860 <_fwalk+0x78>
10102850:	9080000f 	ldh	r2,0(r18)
10102854:	14c00226 	beq	r2,r19,10102860 <_fwalk+0x78>
10102858:	a83ee83a 	callr	r21
1010285c:	b8aeb03a 	or	r23,r23,r2
10102860:	84001a04 	addi	r16,r16,104
10102864:	94801a04 	addi	r18,r18,104
10102868:	8cfff51e 	bne	r17,r19,10102840 <__alt_data_end+0xfffe2840>
1010286c:	a5000017 	ldw	r20,0(r20)
10102870:	a03fed1e 	bne	r20,zero,10102828 <__alt_data_end+0xfffe2828>
10102874:	b805883a 	mov	r2,r23
10102878:	dfc00817 	ldw	ra,32(sp)
1010287c:	ddc00717 	ldw	r23,28(sp)
10102880:	dd800617 	ldw	r22,24(sp)
10102884:	dd400517 	ldw	r21,20(sp)
10102888:	dd000417 	ldw	r20,16(sp)
1010288c:	dcc00317 	ldw	r19,12(sp)
10102890:	dc800217 	ldw	r18,8(sp)
10102894:	dc400117 	ldw	r17,4(sp)
10102898:	dc000017 	ldw	r16,0(sp)
1010289c:	dec00904 	addi	sp,sp,36
101028a0:	f800283a 	ret
101028a4:	002f883a 	mov	r23,zero
101028a8:	003ff206 	br	10102874 <__alt_data_end+0xfffe2874>

101028ac <_fwalk_reent>:
101028ac:	defff704 	addi	sp,sp,-36
101028b0:	dd000415 	stw	r20,16(sp)
101028b4:	dfc00815 	stw	ra,32(sp)
101028b8:	ddc00715 	stw	r23,28(sp)
101028bc:	dd800615 	stw	r22,24(sp)
101028c0:	dd400515 	stw	r21,20(sp)
101028c4:	dcc00315 	stw	r19,12(sp)
101028c8:	dc800215 	stw	r18,8(sp)
101028cc:	dc400115 	stw	r17,4(sp)
101028d0:	dc000015 	stw	r16,0(sp)
101028d4:	2500b804 	addi	r20,r4,736
101028d8:	a0002326 	beq	r20,zero,10102968 <_fwalk_reent+0xbc>
101028dc:	282b883a 	mov	r21,r5
101028e0:	2027883a 	mov	r19,r4
101028e4:	002f883a 	mov	r23,zero
101028e8:	05800044 	movi	r22,1
101028ec:	04bfffc4 	movi	r18,-1
101028f0:	a4400117 	ldw	r17,4(r20)
101028f4:	a4000217 	ldw	r16,8(r20)
101028f8:	8c7fffc4 	addi	r17,r17,-1
101028fc:	88000c16 	blt	r17,zero,10102930 <_fwalk_reent+0x84>
10102900:	84000304 	addi	r16,r16,12
10102904:	8080000b 	ldhu	r2,0(r16)
10102908:	8c7fffc4 	addi	r17,r17,-1
1010290c:	817ffd04 	addi	r5,r16,-12
10102910:	b080052e 	bgeu	r22,r2,10102928 <_fwalk_reent+0x7c>
10102914:	8080008f 	ldh	r2,2(r16)
10102918:	9809883a 	mov	r4,r19
1010291c:	14800226 	beq	r2,r18,10102928 <_fwalk_reent+0x7c>
10102920:	a83ee83a 	callr	r21
10102924:	b8aeb03a 	or	r23,r23,r2
10102928:	84001a04 	addi	r16,r16,104
1010292c:	8cbff51e 	bne	r17,r18,10102904 <__alt_data_end+0xfffe2904>
10102930:	a5000017 	ldw	r20,0(r20)
10102934:	a03fee1e 	bne	r20,zero,101028f0 <__alt_data_end+0xfffe28f0>
10102938:	b805883a 	mov	r2,r23
1010293c:	dfc00817 	ldw	ra,32(sp)
10102940:	ddc00717 	ldw	r23,28(sp)
10102944:	dd800617 	ldw	r22,24(sp)
10102948:	dd400517 	ldw	r21,20(sp)
1010294c:	dd000417 	ldw	r20,16(sp)
10102950:	dcc00317 	ldw	r19,12(sp)
10102954:	dc800217 	ldw	r18,8(sp)
10102958:	dc400117 	ldw	r17,4(sp)
1010295c:	dc000017 	ldw	r16,0(sp)
10102960:	dec00904 	addi	sp,sp,36
10102964:	f800283a 	ret
10102968:	002f883a 	mov	r23,zero
1010296c:	003ff206 	br	10102938 <__alt_data_end+0xfffe2938>

10102970 <_fwrite_r>:
10102970:	defff504 	addi	sp,sp,-44
10102974:	dc800815 	stw	r18,32(sp)
10102978:	39a5383a 	mul	r18,r7,r6
1010297c:	d8800304 	addi	r2,sp,12
10102980:	d8800015 	stw	r2,0(sp)
10102984:	00800044 	movi	r2,1
10102988:	dcc00915 	stw	r19,36(sp)
1010298c:	dc400715 	stw	r17,28(sp)
10102990:	dc000615 	stw	r16,24(sp)
10102994:	d9400315 	stw	r5,12(sp)
10102998:	dfc00a15 	stw	ra,40(sp)
1010299c:	dc800415 	stw	r18,16(sp)
101029a0:	dc800215 	stw	r18,8(sp)
101029a4:	d8800115 	stw	r2,4(sp)
101029a8:	3027883a 	mov	r19,r6
101029ac:	3821883a 	mov	r16,r7
101029b0:	2023883a 	mov	r17,r4
101029b4:	d9400b17 	ldw	r5,44(sp)
101029b8:	20000226 	beq	r4,zero,101029c4 <_fwrite_r+0x54>
101029bc:	20800e17 	ldw	r2,56(r4)
101029c0:	10001a26 	beq	r2,zero,10102a2c <_fwrite_r+0xbc>
101029c4:	2880030b 	ldhu	r2,12(r5)
101029c8:	10c8000c 	andi	r3,r2,8192
101029cc:	1800061e 	bne	r3,zero,101029e8 <_fwrite_r+0x78>
101029d0:	29001917 	ldw	r4,100(r5)
101029d4:	00f7ffc4 	movi	r3,-8193
101029d8:	10880014 	ori	r2,r2,8192
101029dc:	20c6703a 	and	r3,r4,r3
101029e0:	2880030d 	sth	r2,12(r5)
101029e4:	28c01915 	stw	r3,100(r5)
101029e8:	d80d883a 	mov	r6,sp
101029ec:	8809883a 	mov	r4,r17
101029f0:	01077b80 	call	101077b8 <__sfvwrite_r>
101029f4:	10000b26 	beq	r2,zero,10102a24 <_fwrite_r+0xb4>
101029f8:	d9000217 	ldw	r4,8(sp)
101029fc:	980b883a 	mov	r5,r19
10102a00:	9109c83a 	sub	r4,r18,r4
10102a04:	01015c40 	call	101015c4 <__udivsi3>
10102a08:	dfc00a17 	ldw	ra,40(sp)
10102a0c:	dcc00917 	ldw	r19,36(sp)
10102a10:	dc800817 	ldw	r18,32(sp)
10102a14:	dc400717 	ldw	r17,28(sp)
10102a18:	dc000617 	ldw	r16,24(sp)
10102a1c:	dec00b04 	addi	sp,sp,44
10102a20:	f800283a 	ret
10102a24:	8005883a 	mov	r2,r16
10102a28:	003ff706 	br	10102a08 <__alt_data_end+0xfffe2a08>
10102a2c:	d9400515 	stw	r5,20(sp)
10102a30:	0101d7c0 	call	10101d7c <__sinit>
10102a34:	d9400517 	ldw	r5,20(sp)
10102a38:	003fe206 	br	101029c4 <__alt_data_end+0xfffe29c4>

10102a3c <fwrite>:
10102a3c:	defffe04 	addi	sp,sp,-8
10102a40:	00840474 	movhi	r2,4113
10102a44:	d9c00015 	stw	r7,0(sp)
10102a48:	108b6d04 	addi	r2,r2,11700
10102a4c:	300f883a 	mov	r7,r6
10102a50:	280d883a 	mov	r6,r5
10102a54:	200b883a 	mov	r5,r4
10102a58:	11000017 	ldw	r4,0(r2)
10102a5c:	dfc00115 	stw	ra,4(sp)
10102a60:	01029700 	call	10102970 <_fwrite_r>
10102a64:	dfc00117 	ldw	ra,4(sp)
10102a68:	dec00204 	addi	sp,sp,8
10102a6c:	f800283a 	ret

10102a70 <__smakebuf_r>:
10102a70:	2880030b 	ldhu	r2,12(r5)
10102a74:	10c0008c 	andi	r3,r2,2
10102a78:	1800411e 	bne	r3,zero,10102b80 <__smakebuf_r+0x110>
10102a7c:	deffec04 	addi	sp,sp,-80
10102a80:	dc000f15 	stw	r16,60(sp)
10102a84:	2821883a 	mov	r16,r5
10102a88:	2940038f 	ldh	r5,14(r5)
10102a8c:	dc401015 	stw	r17,64(sp)
10102a90:	dfc01315 	stw	ra,76(sp)
10102a94:	dcc01215 	stw	r19,72(sp)
10102a98:	dc801115 	stw	r18,68(sp)
10102a9c:	2023883a 	mov	r17,r4
10102aa0:	28001c16 	blt	r5,zero,10102b14 <__smakebuf_r+0xa4>
10102aa4:	d80d883a 	mov	r6,sp
10102aa8:	010278c0 	call	1010278c <_fstat_r>
10102aac:	10001816 	blt	r2,zero,10102b10 <__smakebuf_r+0xa0>
10102ab0:	d8800117 	ldw	r2,4(sp)
10102ab4:	00e00014 	movui	r3,32768
10102ab8:	10bc000c 	andi	r2,r2,61440
10102abc:	14c80020 	cmpeqi	r19,r2,8192
10102ac0:	10c03726 	beq	r2,r3,10102ba0 <__smakebuf_r+0x130>
10102ac4:	80c0030b 	ldhu	r3,12(r16)
10102ac8:	18c20014 	ori	r3,r3,2048
10102acc:	80c0030d 	sth	r3,12(r16)
10102ad0:	00c80004 	movi	r3,8192
10102ad4:	10c0521e 	bne	r2,r3,10102c20 <__smakebuf_r+0x1b0>
10102ad8:	8140038f 	ldh	r5,14(r16)
10102adc:	8809883a 	mov	r4,r17
10102ae0:	0107c740 	call	10107c74 <_isatty_r>
10102ae4:	10004c26 	beq	r2,zero,10102c18 <__smakebuf_r+0x1a8>
10102ae8:	8080030b 	ldhu	r2,12(r16)
10102aec:	80c010c4 	addi	r3,r16,67
10102af0:	80c00015 	stw	r3,0(r16)
10102af4:	10800054 	ori	r2,r2,1
10102af8:	8080030d 	sth	r2,12(r16)
10102afc:	00800044 	movi	r2,1
10102b00:	80c00415 	stw	r3,16(r16)
10102b04:	80800515 	stw	r2,20(r16)
10102b08:	04810004 	movi	r18,1024
10102b0c:	00000706 	br	10102b2c <__smakebuf_r+0xbc>
10102b10:	8080030b 	ldhu	r2,12(r16)
10102b14:	10c0200c 	andi	r3,r2,128
10102b18:	18001f1e 	bne	r3,zero,10102b98 <__smakebuf_r+0x128>
10102b1c:	04810004 	movi	r18,1024
10102b20:	10820014 	ori	r2,r2,2048
10102b24:	8080030d 	sth	r2,12(r16)
10102b28:	0027883a 	mov	r19,zero
10102b2c:	900b883a 	mov	r5,r18
10102b30:	8809883a 	mov	r4,r17
10102b34:	0102c2c0 	call	10102c2c <_malloc_r>
10102b38:	10002c26 	beq	r2,zero,10102bec <__smakebuf_r+0x17c>
10102b3c:	80c0030b 	ldhu	r3,12(r16)
10102b40:	01040434 	movhi	r4,4112
10102b44:	21068d04 	addi	r4,r4,6708
10102b48:	89000f15 	stw	r4,60(r17)
10102b4c:	18c02014 	ori	r3,r3,128
10102b50:	80c0030d 	sth	r3,12(r16)
10102b54:	80800015 	stw	r2,0(r16)
10102b58:	80800415 	stw	r2,16(r16)
10102b5c:	84800515 	stw	r18,20(r16)
10102b60:	98001a1e 	bne	r19,zero,10102bcc <__smakebuf_r+0x15c>
10102b64:	dfc01317 	ldw	ra,76(sp)
10102b68:	dcc01217 	ldw	r19,72(sp)
10102b6c:	dc801117 	ldw	r18,68(sp)
10102b70:	dc401017 	ldw	r17,64(sp)
10102b74:	dc000f17 	ldw	r16,60(sp)
10102b78:	dec01404 	addi	sp,sp,80
10102b7c:	f800283a 	ret
10102b80:	288010c4 	addi	r2,r5,67
10102b84:	28800015 	stw	r2,0(r5)
10102b88:	28800415 	stw	r2,16(r5)
10102b8c:	00800044 	movi	r2,1
10102b90:	28800515 	stw	r2,20(r5)
10102b94:	f800283a 	ret
10102b98:	04801004 	movi	r18,64
10102b9c:	003fe006 	br	10102b20 <__alt_data_end+0xfffe2b20>
10102ba0:	81000a17 	ldw	r4,40(r16)
10102ba4:	00c40434 	movhi	r3,4112
10102ba8:	18ce5204 	addi	r3,r3,14664
10102bac:	20ffc51e 	bne	r4,r3,10102ac4 <__alt_data_end+0xfffe2ac4>
10102bb0:	8080030b 	ldhu	r2,12(r16)
10102bb4:	04810004 	movi	r18,1024
10102bb8:	84801315 	stw	r18,76(r16)
10102bbc:	1484b03a 	or	r2,r2,r18
10102bc0:	8080030d 	sth	r2,12(r16)
10102bc4:	0027883a 	mov	r19,zero
10102bc8:	003fd806 	br	10102b2c <__alt_data_end+0xfffe2b2c>
10102bcc:	8140038f 	ldh	r5,14(r16)
10102bd0:	8809883a 	mov	r4,r17
10102bd4:	0107c740 	call	10107c74 <_isatty_r>
10102bd8:	103fe226 	beq	r2,zero,10102b64 <__alt_data_end+0xfffe2b64>
10102bdc:	8080030b 	ldhu	r2,12(r16)
10102be0:	10800054 	ori	r2,r2,1
10102be4:	8080030d 	sth	r2,12(r16)
10102be8:	003fde06 	br	10102b64 <__alt_data_end+0xfffe2b64>
10102bec:	8080030b 	ldhu	r2,12(r16)
10102bf0:	10c0800c 	andi	r3,r2,512
10102bf4:	183fdb1e 	bne	r3,zero,10102b64 <__alt_data_end+0xfffe2b64>
10102bf8:	10800094 	ori	r2,r2,2
10102bfc:	80c010c4 	addi	r3,r16,67
10102c00:	8080030d 	sth	r2,12(r16)
10102c04:	00800044 	movi	r2,1
10102c08:	80c00015 	stw	r3,0(r16)
10102c0c:	80c00415 	stw	r3,16(r16)
10102c10:	80800515 	stw	r2,20(r16)
10102c14:	003fd306 	br	10102b64 <__alt_data_end+0xfffe2b64>
10102c18:	04810004 	movi	r18,1024
10102c1c:	003fc306 	br	10102b2c <__alt_data_end+0xfffe2b2c>
10102c20:	0027883a 	mov	r19,zero
10102c24:	04810004 	movi	r18,1024
10102c28:	003fc006 	br	10102b2c <__alt_data_end+0xfffe2b2c>

10102c2c <_malloc_r>:
10102c2c:	defff504 	addi	sp,sp,-44
10102c30:	dc800315 	stw	r18,12(sp)
10102c34:	dfc00a15 	stw	ra,40(sp)
10102c38:	df000915 	stw	fp,36(sp)
10102c3c:	ddc00815 	stw	r23,32(sp)
10102c40:	dd800715 	stw	r22,28(sp)
10102c44:	dd400615 	stw	r21,24(sp)
10102c48:	dd000515 	stw	r20,20(sp)
10102c4c:	dcc00415 	stw	r19,16(sp)
10102c50:	dc400215 	stw	r17,8(sp)
10102c54:	dc000115 	stw	r16,4(sp)
10102c58:	288002c4 	addi	r2,r5,11
10102c5c:	00c00584 	movi	r3,22
10102c60:	2025883a 	mov	r18,r4
10102c64:	18807f2e 	bgeu	r3,r2,10102e64 <_malloc_r+0x238>
10102c68:	047ffe04 	movi	r17,-8
10102c6c:	1462703a 	and	r17,r2,r17
10102c70:	8800a316 	blt	r17,zero,10102f00 <_malloc_r+0x2d4>
10102c74:	8940a236 	bltu	r17,r5,10102f00 <_malloc_r+0x2d4>
10102c78:	010ec6c0 	call	1010ec6c <__malloc_lock>
10102c7c:	00807dc4 	movi	r2,503
10102c80:	1441e92e 	bgeu	r2,r17,10103428 <_malloc_r+0x7fc>
10102c84:	8804d27a 	srli	r2,r17,9
10102c88:	1000a126 	beq	r2,zero,10102f10 <_malloc_r+0x2e4>
10102c8c:	00c00104 	movi	r3,4
10102c90:	18811e36 	bltu	r3,r2,1010310c <_malloc_r+0x4e0>
10102c94:	8804d1ba 	srli	r2,r17,6
10102c98:	12000e44 	addi	r8,r2,57
10102c9c:	11c00e04 	addi	r7,r2,56
10102ca0:	4209883a 	add	r4,r8,r8
10102ca4:	04c40474 	movhi	r19,4113
10102ca8:	2109883a 	add	r4,r4,r4
10102cac:	9cc5ca04 	addi	r19,r19,5928
10102cb0:	2109883a 	add	r4,r4,r4
10102cb4:	9909883a 	add	r4,r19,r4
10102cb8:	24000117 	ldw	r16,4(r4)
10102cbc:	213ffe04 	addi	r4,r4,-8
10102cc0:	24009726 	beq	r4,r16,10102f20 <_malloc_r+0x2f4>
10102cc4:	80800117 	ldw	r2,4(r16)
10102cc8:	01bfff04 	movi	r6,-4
10102ccc:	014003c4 	movi	r5,15
10102cd0:	1184703a 	and	r2,r2,r6
10102cd4:	1447c83a 	sub	r3,r2,r17
10102cd8:	28c00716 	blt	r5,r3,10102cf8 <_malloc_r+0xcc>
10102cdc:	1800920e 	bge	r3,zero,10102f28 <_malloc_r+0x2fc>
10102ce0:	84000317 	ldw	r16,12(r16)
10102ce4:	24008e26 	beq	r4,r16,10102f20 <_malloc_r+0x2f4>
10102ce8:	80800117 	ldw	r2,4(r16)
10102cec:	1184703a 	and	r2,r2,r6
10102cf0:	1447c83a 	sub	r3,r2,r17
10102cf4:	28fff90e 	bge	r5,r3,10102cdc <__alt_data_end+0xfffe2cdc>
10102cf8:	3809883a 	mov	r4,r7
10102cfc:	01840474 	movhi	r6,4113
10102d00:	9c000417 	ldw	r16,16(r19)
10102d04:	3185ca04 	addi	r6,r6,5928
10102d08:	32000204 	addi	r8,r6,8
10102d0c:	82013426 	beq	r16,r8,101031e0 <_malloc_r+0x5b4>
10102d10:	80c00117 	ldw	r3,4(r16)
10102d14:	00bfff04 	movi	r2,-4
10102d18:	188e703a 	and	r7,r3,r2
10102d1c:	3c45c83a 	sub	r2,r7,r17
10102d20:	00c003c4 	movi	r3,15
10102d24:	18811f16 	blt	r3,r2,101031a4 <_malloc_r+0x578>
10102d28:	32000515 	stw	r8,20(r6)
10102d2c:	32000415 	stw	r8,16(r6)
10102d30:	10007f0e 	bge	r2,zero,10102f30 <_malloc_r+0x304>
10102d34:	00807fc4 	movi	r2,511
10102d38:	11c0fd36 	bltu	r2,r7,10103130 <_malloc_r+0x504>
10102d3c:	3806d0fa 	srli	r3,r7,3
10102d40:	01c00044 	movi	r7,1
10102d44:	30800117 	ldw	r2,4(r6)
10102d48:	19400044 	addi	r5,r3,1
10102d4c:	294b883a 	add	r5,r5,r5
10102d50:	1807d0ba 	srai	r3,r3,2
10102d54:	294b883a 	add	r5,r5,r5
10102d58:	294b883a 	add	r5,r5,r5
10102d5c:	298b883a 	add	r5,r5,r6
10102d60:	38c6983a 	sll	r3,r7,r3
10102d64:	29c00017 	ldw	r7,0(r5)
10102d68:	2a7ffe04 	addi	r9,r5,-8
10102d6c:	1886b03a 	or	r3,r3,r2
10102d70:	82400315 	stw	r9,12(r16)
10102d74:	81c00215 	stw	r7,8(r16)
10102d78:	30c00115 	stw	r3,4(r6)
10102d7c:	2c000015 	stw	r16,0(r5)
10102d80:	3c000315 	stw	r16,12(r7)
10102d84:	2005d0ba 	srai	r2,r4,2
10102d88:	01400044 	movi	r5,1
10102d8c:	288a983a 	sll	r5,r5,r2
10102d90:	19406f36 	bltu	r3,r5,10102f50 <_malloc_r+0x324>
10102d94:	28c4703a 	and	r2,r5,r3
10102d98:	10000a1e 	bne	r2,zero,10102dc4 <_malloc_r+0x198>
10102d9c:	00bfff04 	movi	r2,-4
10102da0:	294b883a 	add	r5,r5,r5
10102da4:	2088703a 	and	r4,r4,r2
10102da8:	28c4703a 	and	r2,r5,r3
10102dac:	21000104 	addi	r4,r4,4
10102db0:	1000041e 	bne	r2,zero,10102dc4 <_malloc_r+0x198>
10102db4:	294b883a 	add	r5,r5,r5
10102db8:	28c4703a 	and	r2,r5,r3
10102dbc:	21000104 	addi	r4,r4,4
10102dc0:	103ffc26 	beq	r2,zero,10102db4 <__alt_data_end+0xfffe2db4>
10102dc4:	02bfff04 	movi	r10,-4
10102dc8:	024003c4 	movi	r9,15
10102dcc:	21800044 	addi	r6,r4,1
10102dd0:	318d883a 	add	r6,r6,r6
10102dd4:	318d883a 	add	r6,r6,r6
10102dd8:	318d883a 	add	r6,r6,r6
10102ddc:	998d883a 	add	r6,r19,r6
10102de0:	333ffe04 	addi	r12,r6,-8
10102de4:	2017883a 	mov	r11,r4
10102de8:	31800104 	addi	r6,r6,4
10102dec:	34000017 	ldw	r16,0(r6)
10102df0:	31fffd04 	addi	r7,r6,-12
10102df4:	81c0041e 	bne	r16,r7,10102e08 <_malloc_r+0x1dc>
10102df8:	0000fb06 	br	101031e8 <_malloc_r+0x5bc>
10102dfc:	1801030e 	bge	r3,zero,1010320c <_malloc_r+0x5e0>
10102e00:	84000317 	ldw	r16,12(r16)
10102e04:	81c0f826 	beq	r16,r7,101031e8 <_malloc_r+0x5bc>
10102e08:	80800117 	ldw	r2,4(r16)
10102e0c:	1284703a 	and	r2,r2,r10
10102e10:	1447c83a 	sub	r3,r2,r17
10102e14:	48fff90e 	bge	r9,r3,10102dfc <__alt_data_end+0xfffe2dfc>
10102e18:	80800317 	ldw	r2,12(r16)
10102e1c:	81000217 	ldw	r4,8(r16)
10102e20:	89400054 	ori	r5,r17,1
10102e24:	81400115 	stw	r5,4(r16)
10102e28:	20800315 	stw	r2,12(r4)
10102e2c:	11000215 	stw	r4,8(r2)
10102e30:	8463883a 	add	r17,r16,r17
10102e34:	9c400515 	stw	r17,20(r19)
10102e38:	9c400415 	stw	r17,16(r19)
10102e3c:	18800054 	ori	r2,r3,1
10102e40:	88800115 	stw	r2,4(r17)
10102e44:	8a000315 	stw	r8,12(r17)
10102e48:	8a000215 	stw	r8,8(r17)
10102e4c:	88e3883a 	add	r17,r17,r3
10102e50:	88c00015 	stw	r3,0(r17)
10102e54:	9009883a 	mov	r4,r18
10102e58:	010ec900 	call	1010ec90 <__malloc_unlock>
10102e5c:	80800204 	addi	r2,r16,8
10102e60:	00001b06 	br	10102ed0 <_malloc_r+0x2a4>
10102e64:	04400404 	movi	r17,16
10102e68:	89402536 	bltu	r17,r5,10102f00 <_malloc_r+0x2d4>
10102e6c:	010ec6c0 	call	1010ec6c <__malloc_lock>
10102e70:	00800184 	movi	r2,6
10102e74:	01000084 	movi	r4,2
10102e78:	04c40474 	movhi	r19,4113
10102e7c:	1085883a 	add	r2,r2,r2
10102e80:	9cc5ca04 	addi	r19,r19,5928
10102e84:	1085883a 	add	r2,r2,r2
10102e88:	9885883a 	add	r2,r19,r2
10102e8c:	14000117 	ldw	r16,4(r2)
10102e90:	10fffe04 	addi	r3,r2,-8
10102e94:	80c0d926 	beq	r16,r3,101031fc <_malloc_r+0x5d0>
10102e98:	80c00117 	ldw	r3,4(r16)
10102e9c:	81000317 	ldw	r4,12(r16)
10102ea0:	00bfff04 	movi	r2,-4
10102ea4:	1884703a 	and	r2,r3,r2
10102ea8:	81400217 	ldw	r5,8(r16)
10102eac:	8085883a 	add	r2,r16,r2
10102eb0:	10c00117 	ldw	r3,4(r2)
10102eb4:	29000315 	stw	r4,12(r5)
10102eb8:	21400215 	stw	r5,8(r4)
10102ebc:	18c00054 	ori	r3,r3,1
10102ec0:	10c00115 	stw	r3,4(r2)
10102ec4:	9009883a 	mov	r4,r18
10102ec8:	010ec900 	call	1010ec90 <__malloc_unlock>
10102ecc:	80800204 	addi	r2,r16,8
10102ed0:	dfc00a17 	ldw	ra,40(sp)
10102ed4:	df000917 	ldw	fp,36(sp)
10102ed8:	ddc00817 	ldw	r23,32(sp)
10102edc:	dd800717 	ldw	r22,28(sp)
10102ee0:	dd400617 	ldw	r21,24(sp)
10102ee4:	dd000517 	ldw	r20,20(sp)
10102ee8:	dcc00417 	ldw	r19,16(sp)
10102eec:	dc800317 	ldw	r18,12(sp)
10102ef0:	dc400217 	ldw	r17,8(sp)
10102ef4:	dc000117 	ldw	r16,4(sp)
10102ef8:	dec00b04 	addi	sp,sp,44
10102efc:	f800283a 	ret
10102f00:	00800304 	movi	r2,12
10102f04:	90800015 	stw	r2,0(r18)
10102f08:	0005883a 	mov	r2,zero
10102f0c:	003ff006 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
10102f10:	01002004 	movi	r4,128
10102f14:	02001004 	movi	r8,64
10102f18:	01c00fc4 	movi	r7,63
10102f1c:	003f6106 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
10102f20:	4009883a 	mov	r4,r8
10102f24:	003f7506 	br	10102cfc <__alt_data_end+0xfffe2cfc>
10102f28:	81000317 	ldw	r4,12(r16)
10102f2c:	003fde06 	br	10102ea8 <__alt_data_end+0xfffe2ea8>
10102f30:	81c5883a 	add	r2,r16,r7
10102f34:	11400117 	ldw	r5,4(r2)
10102f38:	9009883a 	mov	r4,r18
10102f3c:	29400054 	ori	r5,r5,1
10102f40:	11400115 	stw	r5,4(r2)
10102f44:	010ec900 	call	1010ec90 <__malloc_unlock>
10102f48:	80800204 	addi	r2,r16,8
10102f4c:	003fe006 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
10102f50:	9c000217 	ldw	r16,8(r19)
10102f54:	00bfff04 	movi	r2,-4
10102f58:	85800117 	ldw	r22,4(r16)
10102f5c:	b0ac703a 	and	r22,r22,r2
10102f60:	b4400336 	bltu	r22,r17,10102f70 <_malloc_r+0x344>
10102f64:	b445c83a 	sub	r2,r22,r17
10102f68:	00c003c4 	movi	r3,15
10102f6c:	18805d16 	blt	r3,r2,101030e4 <_malloc_r+0x4b8>
10102f70:	05c40474 	movhi	r23,4113
10102f74:	00840474 	movhi	r2,4113
10102f78:	10923a04 	addi	r2,r2,18664
10102f7c:	bdcb6e04 	addi	r23,r23,11704
10102f80:	15400017 	ldw	r21,0(r2)
10102f84:	b8c00017 	ldw	r3,0(r23)
10102f88:	00bfffc4 	movi	r2,-1
10102f8c:	858d883a 	add	r6,r16,r22
10102f90:	8d6b883a 	add	r21,r17,r21
10102f94:	1880ea26 	beq	r3,r2,10103340 <_malloc_r+0x714>
10102f98:	ad4403c4 	addi	r21,r21,4111
10102f9c:	00bc0004 	movi	r2,-4096
10102fa0:	a8aa703a 	and	r21,r21,r2
10102fa4:	a80b883a 	mov	r5,r21
10102fa8:	9009883a 	mov	r4,r18
10102fac:	d9800015 	stw	r6,0(sp)
10102fb0:	010381c0 	call	1010381c <_sbrk_r>
10102fb4:	1029883a 	mov	r20,r2
10102fb8:	00bfffc4 	movi	r2,-1
10102fbc:	d9800017 	ldw	r6,0(sp)
10102fc0:	a080e826 	beq	r20,r2,10103364 <_malloc_r+0x738>
10102fc4:	a180a636 	bltu	r20,r6,10103260 <_malloc_r+0x634>
10102fc8:	07040474 	movhi	fp,4113
10102fcc:	e7124504 	addi	fp,fp,18708
10102fd0:	e0800017 	ldw	r2,0(fp)
10102fd4:	a887883a 	add	r3,r21,r2
10102fd8:	e0c00015 	stw	r3,0(fp)
10102fdc:	3500e626 	beq	r6,r20,10103378 <_malloc_r+0x74c>
10102fe0:	b9000017 	ldw	r4,0(r23)
10102fe4:	00bfffc4 	movi	r2,-1
10102fe8:	2080ee26 	beq	r4,r2,101033a4 <_malloc_r+0x778>
10102fec:	a185c83a 	sub	r2,r20,r6
10102ff0:	10c5883a 	add	r2,r2,r3
10102ff4:	e0800015 	stw	r2,0(fp)
10102ff8:	a0c001cc 	andi	r3,r20,7
10102ffc:	1800bc26 	beq	r3,zero,101032f0 <_malloc_r+0x6c4>
10103000:	a0e9c83a 	sub	r20,r20,r3
10103004:	00840204 	movi	r2,4104
10103008:	a5000204 	addi	r20,r20,8
1010300c:	10c7c83a 	sub	r3,r2,r3
10103010:	a545883a 	add	r2,r20,r21
10103014:	1083ffcc 	andi	r2,r2,4095
10103018:	18abc83a 	sub	r21,r3,r2
1010301c:	a80b883a 	mov	r5,r21
10103020:	9009883a 	mov	r4,r18
10103024:	010381c0 	call	1010381c <_sbrk_r>
10103028:	00ffffc4 	movi	r3,-1
1010302c:	10c0e126 	beq	r2,r3,101033b4 <_malloc_r+0x788>
10103030:	1505c83a 	sub	r2,r2,r20
10103034:	1545883a 	add	r2,r2,r21
10103038:	10800054 	ori	r2,r2,1
1010303c:	e0c00017 	ldw	r3,0(fp)
10103040:	9d000215 	stw	r20,8(r19)
10103044:	a0800115 	stw	r2,4(r20)
10103048:	a8c7883a 	add	r3,r21,r3
1010304c:	e0c00015 	stw	r3,0(fp)
10103050:	84c00e26 	beq	r16,r19,1010308c <_malloc_r+0x460>
10103054:	018003c4 	movi	r6,15
10103058:	3580a72e 	bgeu	r6,r22,101032f8 <_malloc_r+0x6cc>
1010305c:	81400117 	ldw	r5,4(r16)
10103060:	013ffe04 	movi	r4,-8
10103064:	b0bffd04 	addi	r2,r22,-12
10103068:	1104703a 	and	r2,r2,r4
1010306c:	2900004c 	andi	r4,r5,1
10103070:	2088b03a 	or	r4,r4,r2
10103074:	81000115 	stw	r4,4(r16)
10103078:	01400144 	movi	r5,5
1010307c:	8089883a 	add	r4,r16,r2
10103080:	21400115 	stw	r5,4(r4)
10103084:	21400215 	stw	r5,8(r4)
10103088:	3080cd36 	bltu	r6,r2,101033c0 <_malloc_r+0x794>
1010308c:	00840474 	movhi	r2,4113
10103090:	10923904 	addi	r2,r2,18660
10103094:	11000017 	ldw	r4,0(r2)
10103098:	20c0012e 	bgeu	r4,r3,101030a0 <_malloc_r+0x474>
1010309c:	10c00015 	stw	r3,0(r2)
101030a0:	00840474 	movhi	r2,4113
101030a4:	10923804 	addi	r2,r2,18656
101030a8:	11000017 	ldw	r4,0(r2)
101030ac:	9c000217 	ldw	r16,8(r19)
101030b0:	20c0012e 	bgeu	r4,r3,101030b8 <_malloc_r+0x48c>
101030b4:	10c00015 	stw	r3,0(r2)
101030b8:	80c00117 	ldw	r3,4(r16)
101030bc:	00bfff04 	movi	r2,-4
101030c0:	1886703a 	and	r3,r3,r2
101030c4:	1c45c83a 	sub	r2,r3,r17
101030c8:	1c400236 	bltu	r3,r17,101030d4 <_malloc_r+0x4a8>
101030cc:	00c003c4 	movi	r3,15
101030d0:	18800416 	blt	r3,r2,101030e4 <_malloc_r+0x4b8>
101030d4:	9009883a 	mov	r4,r18
101030d8:	010ec900 	call	1010ec90 <__malloc_unlock>
101030dc:	0005883a 	mov	r2,zero
101030e0:	003f7b06 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
101030e4:	88c00054 	ori	r3,r17,1
101030e8:	80c00115 	stw	r3,4(r16)
101030ec:	8463883a 	add	r17,r16,r17
101030f0:	10800054 	ori	r2,r2,1
101030f4:	9c400215 	stw	r17,8(r19)
101030f8:	88800115 	stw	r2,4(r17)
101030fc:	9009883a 	mov	r4,r18
10103100:	010ec900 	call	1010ec90 <__malloc_unlock>
10103104:	80800204 	addi	r2,r16,8
10103108:	003f7106 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
1010310c:	00c00504 	movi	r3,20
10103110:	18804a2e 	bgeu	r3,r2,1010323c <_malloc_r+0x610>
10103114:	00c01504 	movi	r3,84
10103118:	18806e36 	bltu	r3,r2,101032d4 <_malloc_r+0x6a8>
1010311c:	8804d33a 	srli	r2,r17,12
10103120:	12001bc4 	addi	r8,r2,111
10103124:	11c01b84 	addi	r7,r2,110
10103128:	4209883a 	add	r4,r8,r8
1010312c:	003edd06 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
10103130:	3804d27a 	srli	r2,r7,9
10103134:	00c00104 	movi	r3,4
10103138:	1880442e 	bgeu	r3,r2,1010324c <_malloc_r+0x620>
1010313c:	00c00504 	movi	r3,20
10103140:	18808136 	bltu	r3,r2,10103348 <_malloc_r+0x71c>
10103144:	11401704 	addi	r5,r2,92
10103148:	10c016c4 	addi	r3,r2,91
1010314c:	294b883a 	add	r5,r5,r5
10103150:	294b883a 	add	r5,r5,r5
10103154:	294b883a 	add	r5,r5,r5
10103158:	994b883a 	add	r5,r19,r5
1010315c:	28800017 	ldw	r2,0(r5)
10103160:	01840474 	movhi	r6,4113
10103164:	297ffe04 	addi	r5,r5,-8
10103168:	3185ca04 	addi	r6,r6,5928
1010316c:	28806526 	beq	r5,r2,10103304 <_malloc_r+0x6d8>
10103170:	01bfff04 	movi	r6,-4
10103174:	10c00117 	ldw	r3,4(r2)
10103178:	1986703a 	and	r3,r3,r6
1010317c:	38c0022e 	bgeu	r7,r3,10103188 <_malloc_r+0x55c>
10103180:	10800217 	ldw	r2,8(r2)
10103184:	28bffb1e 	bne	r5,r2,10103174 <__alt_data_end+0xfffe3174>
10103188:	11400317 	ldw	r5,12(r2)
1010318c:	98c00117 	ldw	r3,4(r19)
10103190:	81400315 	stw	r5,12(r16)
10103194:	80800215 	stw	r2,8(r16)
10103198:	2c000215 	stw	r16,8(r5)
1010319c:	14000315 	stw	r16,12(r2)
101031a0:	003ef806 	br	10102d84 <__alt_data_end+0xfffe2d84>
101031a4:	88c00054 	ori	r3,r17,1
101031a8:	80c00115 	stw	r3,4(r16)
101031ac:	8463883a 	add	r17,r16,r17
101031b0:	34400515 	stw	r17,20(r6)
101031b4:	34400415 	stw	r17,16(r6)
101031b8:	10c00054 	ori	r3,r2,1
101031bc:	8a000315 	stw	r8,12(r17)
101031c0:	8a000215 	stw	r8,8(r17)
101031c4:	88c00115 	stw	r3,4(r17)
101031c8:	88a3883a 	add	r17,r17,r2
101031cc:	88800015 	stw	r2,0(r17)
101031d0:	9009883a 	mov	r4,r18
101031d4:	010ec900 	call	1010ec90 <__malloc_unlock>
101031d8:	80800204 	addi	r2,r16,8
101031dc:	003f3c06 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
101031e0:	30c00117 	ldw	r3,4(r6)
101031e4:	003ee706 	br	10102d84 <__alt_data_end+0xfffe2d84>
101031e8:	5ac00044 	addi	r11,r11,1
101031ec:	588000cc 	andi	r2,r11,3
101031f0:	31800204 	addi	r6,r6,8
101031f4:	103efd1e 	bne	r2,zero,10102dec <__alt_data_end+0xfffe2dec>
101031f8:	00002406 	br	1010328c <_malloc_r+0x660>
101031fc:	14000317 	ldw	r16,12(r2)
10103200:	143f251e 	bne	r2,r16,10102e98 <__alt_data_end+0xfffe2e98>
10103204:	21000084 	addi	r4,r4,2
10103208:	003ebc06 	br	10102cfc <__alt_data_end+0xfffe2cfc>
1010320c:	8085883a 	add	r2,r16,r2
10103210:	10c00117 	ldw	r3,4(r2)
10103214:	81000317 	ldw	r4,12(r16)
10103218:	81400217 	ldw	r5,8(r16)
1010321c:	18c00054 	ori	r3,r3,1
10103220:	10c00115 	stw	r3,4(r2)
10103224:	29000315 	stw	r4,12(r5)
10103228:	21400215 	stw	r5,8(r4)
1010322c:	9009883a 	mov	r4,r18
10103230:	010ec900 	call	1010ec90 <__malloc_unlock>
10103234:	80800204 	addi	r2,r16,8
10103238:	003f2506 	br	10102ed0 <__alt_data_end+0xfffe2ed0>
1010323c:	12001704 	addi	r8,r2,92
10103240:	11c016c4 	addi	r7,r2,91
10103244:	4209883a 	add	r4,r8,r8
10103248:	003e9606 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
1010324c:	3804d1ba 	srli	r2,r7,6
10103250:	11400e44 	addi	r5,r2,57
10103254:	10c00e04 	addi	r3,r2,56
10103258:	294b883a 	add	r5,r5,r5
1010325c:	003fbc06 	br	10103150 <__alt_data_end+0xfffe3150>
10103260:	84ff5926 	beq	r16,r19,10102fc8 <__alt_data_end+0xfffe2fc8>
10103264:	00840474 	movhi	r2,4113
10103268:	1085ca04 	addi	r2,r2,5928
1010326c:	14000217 	ldw	r16,8(r2)
10103270:	00bfff04 	movi	r2,-4
10103274:	80c00117 	ldw	r3,4(r16)
10103278:	1886703a 	and	r3,r3,r2
1010327c:	003f9106 	br	101030c4 <__alt_data_end+0xfffe30c4>
10103280:	60800217 	ldw	r2,8(r12)
10103284:	213fffc4 	addi	r4,r4,-1
10103288:	1300651e 	bne	r2,r12,10103420 <_malloc_r+0x7f4>
1010328c:	208000cc 	andi	r2,r4,3
10103290:	633ffe04 	addi	r12,r12,-8
10103294:	103ffa1e 	bne	r2,zero,10103280 <__alt_data_end+0xfffe3280>
10103298:	98800117 	ldw	r2,4(r19)
1010329c:	0146303a 	nor	r3,zero,r5
101032a0:	1884703a 	and	r2,r3,r2
101032a4:	98800115 	stw	r2,4(r19)
101032a8:	294b883a 	add	r5,r5,r5
101032ac:	117f2836 	bltu	r2,r5,10102f50 <__alt_data_end+0xfffe2f50>
101032b0:	283f2726 	beq	r5,zero,10102f50 <__alt_data_end+0xfffe2f50>
101032b4:	2886703a 	and	r3,r5,r2
101032b8:	5809883a 	mov	r4,r11
101032bc:	183ec31e 	bne	r3,zero,10102dcc <__alt_data_end+0xfffe2dcc>
101032c0:	294b883a 	add	r5,r5,r5
101032c4:	2886703a 	and	r3,r5,r2
101032c8:	21000104 	addi	r4,r4,4
101032cc:	183ffc26 	beq	r3,zero,101032c0 <__alt_data_end+0xfffe32c0>
101032d0:	003ebe06 	br	10102dcc <__alt_data_end+0xfffe2dcc>
101032d4:	00c05504 	movi	r3,340
101032d8:	18801236 	bltu	r3,r2,10103324 <_malloc_r+0x6f8>
101032dc:	8804d3fa 	srli	r2,r17,15
101032e0:	12001e04 	addi	r8,r2,120
101032e4:	11c01dc4 	addi	r7,r2,119
101032e8:	4209883a 	add	r4,r8,r8
101032ec:	003e6d06 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
101032f0:	00c40004 	movi	r3,4096
101032f4:	003f4606 	br	10103010 <__alt_data_end+0xfffe3010>
101032f8:	00800044 	movi	r2,1
101032fc:	a0800115 	stw	r2,4(r20)
10103300:	003f7406 	br	101030d4 <__alt_data_end+0xfffe30d4>
10103304:	1805d0ba 	srai	r2,r3,2
10103308:	01c00044 	movi	r7,1
1010330c:	30c00117 	ldw	r3,4(r6)
10103310:	388e983a 	sll	r7,r7,r2
10103314:	2805883a 	mov	r2,r5
10103318:	38c6b03a 	or	r3,r7,r3
1010331c:	30c00115 	stw	r3,4(r6)
10103320:	003f9b06 	br	10103190 <__alt_data_end+0xfffe3190>
10103324:	00c15504 	movi	r3,1364
10103328:	18801a36 	bltu	r3,r2,10103394 <_malloc_r+0x768>
1010332c:	8804d4ba 	srli	r2,r17,18
10103330:	12001f44 	addi	r8,r2,125
10103334:	11c01f04 	addi	r7,r2,124
10103338:	4209883a 	add	r4,r8,r8
1010333c:	003e5906 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
10103340:	ad400404 	addi	r21,r21,16
10103344:	003f1706 	br	10102fa4 <__alt_data_end+0xfffe2fa4>
10103348:	00c01504 	movi	r3,84
1010334c:	18802336 	bltu	r3,r2,101033dc <_malloc_r+0x7b0>
10103350:	3804d33a 	srli	r2,r7,12
10103354:	11401bc4 	addi	r5,r2,111
10103358:	10c01b84 	addi	r3,r2,110
1010335c:	294b883a 	add	r5,r5,r5
10103360:	003f7b06 	br	10103150 <__alt_data_end+0xfffe3150>
10103364:	9c000217 	ldw	r16,8(r19)
10103368:	00bfff04 	movi	r2,-4
1010336c:	80c00117 	ldw	r3,4(r16)
10103370:	1886703a 	and	r3,r3,r2
10103374:	003f5306 	br	101030c4 <__alt_data_end+0xfffe30c4>
10103378:	3083ffcc 	andi	r2,r6,4095
1010337c:	103f181e 	bne	r2,zero,10102fe0 <__alt_data_end+0xfffe2fe0>
10103380:	99000217 	ldw	r4,8(r19)
10103384:	b545883a 	add	r2,r22,r21
10103388:	10800054 	ori	r2,r2,1
1010338c:	20800115 	stw	r2,4(r4)
10103390:	003f3e06 	br	1010308c <__alt_data_end+0xfffe308c>
10103394:	01003f84 	movi	r4,254
10103398:	02001fc4 	movi	r8,127
1010339c:	01c01f84 	movi	r7,126
101033a0:	003e4006 	br	10102ca4 <__alt_data_end+0xfffe2ca4>
101033a4:	00840474 	movhi	r2,4113
101033a8:	108b6e04 	addi	r2,r2,11704
101033ac:	15000015 	stw	r20,0(r2)
101033b0:	003f1106 	br	10102ff8 <__alt_data_end+0xfffe2ff8>
101033b4:	00800044 	movi	r2,1
101033b8:	002b883a 	mov	r21,zero
101033bc:	003f1f06 	br	1010303c <__alt_data_end+0xfffe303c>
101033c0:	81400204 	addi	r5,r16,8
101033c4:	9009883a 	mov	r4,r18
101033c8:	0101ffc0 	call	10101ffc <_free_r>
101033cc:	00840474 	movhi	r2,4113
101033d0:	10924504 	addi	r2,r2,18708
101033d4:	10c00017 	ldw	r3,0(r2)
101033d8:	003f2c06 	br	1010308c <__alt_data_end+0xfffe308c>
101033dc:	00c05504 	movi	r3,340
101033e0:	18800536 	bltu	r3,r2,101033f8 <_malloc_r+0x7cc>
101033e4:	3804d3fa 	srli	r2,r7,15
101033e8:	11401e04 	addi	r5,r2,120
101033ec:	10c01dc4 	addi	r3,r2,119
101033f0:	294b883a 	add	r5,r5,r5
101033f4:	003f5606 	br	10103150 <__alt_data_end+0xfffe3150>
101033f8:	00c15504 	movi	r3,1364
101033fc:	18800536 	bltu	r3,r2,10103414 <_malloc_r+0x7e8>
10103400:	3804d4ba 	srli	r2,r7,18
10103404:	11401f44 	addi	r5,r2,125
10103408:	10c01f04 	addi	r3,r2,124
1010340c:	294b883a 	add	r5,r5,r5
10103410:	003f4f06 	br	10103150 <__alt_data_end+0xfffe3150>
10103414:	01403f84 	movi	r5,254
10103418:	00c01f84 	movi	r3,126
1010341c:	003f4c06 	br	10103150 <__alt_data_end+0xfffe3150>
10103420:	98800117 	ldw	r2,4(r19)
10103424:	003fa006 	br	101032a8 <__alt_data_end+0xfffe32a8>
10103428:	8808d0fa 	srli	r4,r17,3
1010342c:	20800044 	addi	r2,r4,1
10103430:	1085883a 	add	r2,r2,r2
10103434:	003e9006 	br	10102e78 <__alt_data_end+0xfffe2e78>

10103438 <memset>:
10103438:	20c000cc 	andi	r3,r4,3
1010343c:	2005883a 	mov	r2,r4
10103440:	18004426 	beq	r3,zero,10103554 <memset+0x11c>
10103444:	31ffffc4 	addi	r7,r6,-1
10103448:	30004026 	beq	r6,zero,1010354c <memset+0x114>
1010344c:	2813883a 	mov	r9,r5
10103450:	200d883a 	mov	r6,r4
10103454:	2007883a 	mov	r3,r4
10103458:	00000406 	br	1010346c <memset+0x34>
1010345c:	3a3fffc4 	addi	r8,r7,-1
10103460:	31800044 	addi	r6,r6,1
10103464:	38003926 	beq	r7,zero,1010354c <memset+0x114>
10103468:	400f883a 	mov	r7,r8
1010346c:	18c00044 	addi	r3,r3,1
10103470:	32400005 	stb	r9,0(r6)
10103474:	1a0000cc 	andi	r8,r3,3
10103478:	403ff81e 	bne	r8,zero,1010345c <__alt_data_end+0xfffe345c>
1010347c:	010000c4 	movi	r4,3
10103480:	21c02d2e 	bgeu	r4,r7,10103538 <memset+0x100>
10103484:	29003fcc 	andi	r4,r5,255
10103488:	200c923a 	slli	r6,r4,8
1010348c:	3108b03a 	or	r4,r6,r4
10103490:	200c943a 	slli	r6,r4,16
10103494:	218cb03a 	or	r6,r4,r6
10103498:	010003c4 	movi	r4,15
1010349c:	21c0182e 	bgeu	r4,r7,10103500 <memset+0xc8>
101034a0:	3b3ffc04 	addi	r12,r7,-16
101034a4:	6018d13a 	srli	r12,r12,4
101034a8:	1a000104 	addi	r8,r3,4
101034ac:	1ac00204 	addi	r11,r3,8
101034b0:	6008913a 	slli	r4,r12,4
101034b4:	1a800304 	addi	r10,r3,12
101034b8:	1813883a 	mov	r9,r3
101034bc:	21000504 	addi	r4,r4,20
101034c0:	1909883a 	add	r4,r3,r4
101034c4:	49800015 	stw	r6,0(r9)
101034c8:	41800015 	stw	r6,0(r8)
101034cc:	59800015 	stw	r6,0(r11)
101034d0:	51800015 	stw	r6,0(r10)
101034d4:	42000404 	addi	r8,r8,16
101034d8:	4a400404 	addi	r9,r9,16
101034dc:	5ac00404 	addi	r11,r11,16
101034e0:	52800404 	addi	r10,r10,16
101034e4:	413ff71e 	bne	r8,r4,101034c4 <__alt_data_end+0xfffe34c4>
101034e8:	63000044 	addi	r12,r12,1
101034ec:	6018913a 	slli	r12,r12,4
101034f0:	39c003cc 	andi	r7,r7,15
101034f4:	010000c4 	movi	r4,3
101034f8:	1b07883a 	add	r3,r3,r12
101034fc:	21c00e2e 	bgeu	r4,r7,10103538 <memset+0x100>
10103500:	1813883a 	mov	r9,r3
10103504:	3811883a 	mov	r8,r7
10103508:	010000c4 	movi	r4,3
1010350c:	49800015 	stw	r6,0(r9)
10103510:	423fff04 	addi	r8,r8,-4
10103514:	4a400104 	addi	r9,r9,4
10103518:	223ffc36 	bltu	r4,r8,1010350c <__alt_data_end+0xfffe350c>
1010351c:	393fff04 	addi	r4,r7,-4
10103520:	2008d0ba 	srli	r4,r4,2
10103524:	39c000cc 	andi	r7,r7,3
10103528:	21000044 	addi	r4,r4,1
1010352c:	2109883a 	add	r4,r4,r4
10103530:	2109883a 	add	r4,r4,r4
10103534:	1907883a 	add	r3,r3,r4
10103538:	38000526 	beq	r7,zero,10103550 <memset+0x118>
1010353c:	19cf883a 	add	r7,r3,r7
10103540:	19400005 	stb	r5,0(r3)
10103544:	18c00044 	addi	r3,r3,1
10103548:	38fffd1e 	bne	r7,r3,10103540 <__alt_data_end+0xfffe3540>
1010354c:	f800283a 	ret
10103550:	f800283a 	ret
10103554:	2007883a 	mov	r3,r4
10103558:	300f883a 	mov	r7,r6
1010355c:	003fc706 	br	1010347c <__alt_data_end+0xfffe347c>

10103560 <_open_r>:
10103560:	defffd04 	addi	sp,sp,-12
10103564:	2805883a 	mov	r2,r5
10103568:	dc000015 	stw	r16,0(sp)
1010356c:	04040474 	movhi	r16,4113
10103570:	dc400115 	stw	r17,4(sp)
10103574:	300b883a 	mov	r5,r6
10103578:	84123704 	addi	r16,r16,18652
1010357c:	2023883a 	mov	r17,r4
10103580:	380d883a 	mov	r6,r7
10103584:	1009883a 	mov	r4,r2
10103588:	dfc00215 	stw	ra,8(sp)
1010358c:	80000015 	stw	zero,0(r16)
10103590:	010edd00 	call	1010edd0 <open>
10103594:	00ffffc4 	movi	r3,-1
10103598:	10c00526 	beq	r2,r3,101035b0 <_open_r+0x50>
1010359c:	dfc00217 	ldw	ra,8(sp)
101035a0:	dc400117 	ldw	r17,4(sp)
101035a4:	dc000017 	ldw	r16,0(sp)
101035a8:	dec00304 	addi	sp,sp,12
101035ac:	f800283a 	ret
101035b0:	80c00017 	ldw	r3,0(r16)
101035b4:	183ff926 	beq	r3,zero,1010359c <__alt_data_end+0xfffe359c>
101035b8:	88c00015 	stw	r3,0(r17)
101035bc:	003ff706 	br	1010359c <__alt_data_end+0xfffe359c>

101035c0 <_printf_r>:
101035c0:	defffd04 	addi	sp,sp,-12
101035c4:	2805883a 	mov	r2,r5
101035c8:	dfc00015 	stw	ra,0(sp)
101035cc:	d9800115 	stw	r6,4(sp)
101035d0:	d9c00215 	stw	r7,8(sp)
101035d4:	21400217 	ldw	r5,8(r4)
101035d8:	d9c00104 	addi	r7,sp,4
101035dc:	100d883a 	mov	r6,r2
101035e0:	01039ac0 	call	101039ac <___vfprintf_internal_r>
101035e4:	dfc00017 	ldw	ra,0(sp)
101035e8:	dec00304 	addi	sp,sp,12
101035ec:	f800283a 	ret

101035f0 <printf>:
101035f0:	defffc04 	addi	sp,sp,-16
101035f4:	dfc00015 	stw	ra,0(sp)
101035f8:	d9400115 	stw	r5,4(sp)
101035fc:	d9800215 	stw	r6,8(sp)
10103600:	d9c00315 	stw	r7,12(sp)
10103604:	00840474 	movhi	r2,4113
10103608:	108b6d04 	addi	r2,r2,11700
1010360c:	10800017 	ldw	r2,0(r2)
10103610:	200b883a 	mov	r5,r4
10103614:	d9800104 	addi	r6,sp,4
10103618:	11000217 	ldw	r4,8(r2)
1010361c:	0105ba40 	call	10105ba4 <__vfprintf_internal>
10103620:	dfc00017 	ldw	ra,0(sp)
10103624:	dec00404 	addi	sp,sp,16
10103628:	f800283a 	ret

1010362c <lflush>:
1010362c:	2080030b 	ldhu	r2,12(r4)
10103630:	00c00244 	movi	r3,9
10103634:	1080024c 	andi	r2,r2,9
10103638:	10c00226 	beq	r2,r3,10103644 <lflush+0x18>
1010363c:	0005883a 	mov	r2,zero
10103640:	f800283a 	ret
10103644:	01019fc1 	jmpi	101019fc <fflush>

10103648 <__srefill_r>:
10103648:	defffc04 	addi	sp,sp,-16
1010364c:	dc400115 	stw	r17,4(sp)
10103650:	dc000015 	stw	r16,0(sp)
10103654:	dfc00315 	stw	ra,12(sp)
10103658:	dc800215 	stw	r18,8(sp)
1010365c:	2023883a 	mov	r17,r4
10103660:	2821883a 	mov	r16,r5
10103664:	20000226 	beq	r4,zero,10103670 <__srefill_r+0x28>
10103668:	20800e17 	ldw	r2,56(r4)
1010366c:	10003c26 	beq	r2,zero,10103760 <__srefill_r+0x118>
10103670:	80c0030b 	ldhu	r3,12(r16)
10103674:	1908000c 	andi	r4,r3,8192
10103678:	1805883a 	mov	r2,r3
1010367c:	2000071e 	bne	r4,zero,1010369c <__srefill_r+0x54>
10103680:	81001917 	ldw	r4,100(r16)
10103684:	18880014 	ori	r2,r3,8192
10103688:	00f7ffc4 	movi	r3,-8193
1010368c:	20c8703a 	and	r4,r4,r3
10103690:	8080030d 	sth	r2,12(r16)
10103694:	1007883a 	mov	r3,r2
10103698:	81001915 	stw	r4,100(r16)
1010369c:	80000115 	stw	zero,4(r16)
101036a0:	1100080c 	andi	r4,r2,32
101036a4:	2000571e 	bne	r4,zero,10103804 <__srefill_r+0x1bc>
101036a8:	1100010c 	andi	r4,r2,4
101036ac:	20001f26 	beq	r4,zero,1010372c <__srefill_r+0xe4>
101036b0:	81400c17 	ldw	r5,48(r16)
101036b4:	28000826 	beq	r5,zero,101036d8 <__srefill_r+0x90>
101036b8:	80801004 	addi	r2,r16,64
101036bc:	28800226 	beq	r5,r2,101036c8 <__srefill_r+0x80>
101036c0:	8809883a 	mov	r4,r17
101036c4:	0101ffc0 	call	10101ffc <_free_r>
101036c8:	80800f17 	ldw	r2,60(r16)
101036cc:	80000c15 	stw	zero,48(r16)
101036d0:	80800115 	stw	r2,4(r16)
101036d4:	1000391e 	bne	r2,zero,101037bc <__srefill_r+0x174>
101036d8:	80800417 	ldw	r2,16(r16)
101036dc:	10004b26 	beq	r2,zero,1010380c <__srefill_r+0x1c4>
101036e0:	8480030b 	ldhu	r18,12(r16)
101036e4:	908000cc 	andi	r2,r18,3
101036e8:	10001f1e 	bne	r2,zero,10103768 <__srefill_r+0x120>
101036ec:	81800417 	ldw	r6,16(r16)
101036f0:	80800817 	ldw	r2,32(r16)
101036f4:	81c00517 	ldw	r7,20(r16)
101036f8:	81400717 	ldw	r5,28(r16)
101036fc:	81800015 	stw	r6,0(r16)
10103700:	8809883a 	mov	r4,r17
10103704:	103ee83a 	callr	r2
10103708:	80800115 	stw	r2,4(r16)
1010370c:	00800e0e 	bge	zero,r2,10103748 <__srefill_r+0x100>
10103710:	0005883a 	mov	r2,zero
10103714:	dfc00317 	ldw	ra,12(sp)
10103718:	dc800217 	ldw	r18,8(sp)
1010371c:	dc400117 	ldw	r17,4(sp)
10103720:	dc000017 	ldw	r16,0(sp)
10103724:	dec00404 	addi	sp,sp,16
10103728:	f800283a 	ret
1010372c:	1100040c 	andi	r4,r2,16
10103730:	20003026 	beq	r4,zero,101037f4 <__srefill_r+0x1ac>
10103734:	1080020c 	andi	r2,r2,8
10103738:	1000241e 	bne	r2,zero,101037cc <__srefill_r+0x184>
1010373c:	18c00114 	ori	r3,r3,4
10103740:	80c0030d 	sth	r3,12(r16)
10103744:	003fe406 	br	101036d8 <__alt_data_end+0xfffe36d8>
10103748:	80c0030b 	ldhu	r3,12(r16)
1010374c:	1000161e 	bne	r2,zero,101037a8 <__srefill_r+0x160>
10103750:	18c00814 	ori	r3,r3,32
10103754:	00bfffc4 	movi	r2,-1
10103758:	80c0030d 	sth	r3,12(r16)
1010375c:	003fed06 	br	10103714 <__alt_data_end+0xfffe3714>
10103760:	0101d7c0 	call	10101d7c <__sinit>
10103764:	003fc206 	br	10103670 <__alt_data_end+0xfffe3670>
10103768:	00840474 	movhi	r2,4113
1010376c:	108b6c04 	addi	r2,r2,11696
10103770:	11000017 	ldw	r4,0(r2)
10103774:	01440434 	movhi	r5,4112
10103778:	00800044 	movi	r2,1
1010377c:	294d8b04 	addi	r5,r5,13868
10103780:	8080030d 	sth	r2,12(r16)
10103784:	01027e80 	call	101027e8 <_fwalk>
10103788:	00800244 	movi	r2,9
1010378c:	8480030d 	sth	r18,12(r16)
10103790:	9480024c 	andi	r18,r18,9
10103794:	90bfd51e 	bne	r18,r2,101036ec <__alt_data_end+0xfffe36ec>
10103798:	800b883a 	mov	r5,r16
1010379c:	8809883a 	mov	r4,r17
101037a0:	01017840 	call	10101784 <__sflush_r>
101037a4:	003fd106 	br	101036ec <__alt_data_end+0xfffe36ec>
101037a8:	18c01014 	ori	r3,r3,64
101037ac:	80000115 	stw	zero,4(r16)
101037b0:	00bfffc4 	movi	r2,-1
101037b4:	80c0030d 	sth	r3,12(r16)
101037b8:	003fd606 	br	10103714 <__alt_data_end+0xfffe3714>
101037bc:	80c00e17 	ldw	r3,56(r16)
101037c0:	0005883a 	mov	r2,zero
101037c4:	80c00015 	stw	r3,0(r16)
101037c8:	003fd206 	br	10103714 <__alt_data_end+0xfffe3714>
101037cc:	800b883a 	mov	r5,r16
101037d0:	8809883a 	mov	r4,r17
101037d4:	01019a00 	call	101019a0 <_fflush_r>
101037d8:	10000a1e 	bne	r2,zero,10103804 <__srefill_r+0x1bc>
101037dc:	8080030b 	ldhu	r2,12(r16)
101037e0:	00fffdc4 	movi	r3,-9
101037e4:	80000215 	stw	zero,8(r16)
101037e8:	1886703a 	and	r3,r3,r2
101037ec:	80000615 	stw	zero,24(r16)
101037f0:	003fd206 	br	1010373c <__alt_data_end+0xfffe373c>
101037f4:	00800244 	movi	r2,9
101037f8:	88800015 	stw	r2,0(r17)
101037fc:	18c01014 	ori	r3,r3,64
10103800:	80c0030d 	sth	r3,12(r16)
10103804:	00bfffc4 	movi	r2,-1
10103808:	003fc206 	br	10103714 <__alt_data_end+0xfffe3714>
1010380c:	800b883a 	mov	r5,r16
10103810:	8809883a 	mov	r4,r17
10103814:	0102a700 	call	10102a70 <__smakebuf_r>
10103818:	003fb106 	br	101036e0 <__alt_data_end+0xfffe36e0>

1010381c <_sbrk_r>:
1010381c:	defffd04 	addi	sp,sp,-12
10103820:	dc000015 	stw	r16,0(sp)
10103824:	04040474 	movhi	r16,4113
10103828:	dc400115 	stw	r17,4(sp)
1010382c:	84123704 	addi	r16,r16,18652
10103830:	2023883a 	mov	r17,r4
10103834:	2809883a 	mov	r4,r5
10103838:	dfc00215 	stw	ra,8(sp)
1010383c:	80000015 	stw	zero,0(r16)
10103840:	010f0d80 	call	1010f0d8 <sbrk>
10103844:	00ffffc4 	movi	r3,-1
10103848:	10c00526 	beq	r2,r3,10103860 <_sbrk_r+0x44>
1010384c:	dfc00217 	ldw	ra,8(sp)
10103850:	dc400117 	ldw	r17,4(sp)
10103854:	dc000017 	ldw	r16,0(sp)
10103858:	dec00304 	addi	sp,sp,12
1010385c:	f800283a 	ret
10103860:	80c00017 	ldw	r3,0(r16)
10103864:	183ff926 	beq	r3,zero,1010384c <__alt_data_end+0xfffe384c>
10103868:	88c00015 	stw	r3,0(r17)
1010386c:	003ff706 	br	1010384c <__alt_data_end+0xfffe384c>

10103870 <__sread>:
10103870:	defffe04 	addi	sp,sp,-8
10103874:	dc000015 	stw	r16,0(sp)
10103878:	2821883a 	mov	r16,r5
1010387c:	2940038f 	ldh	r5,14(r5)
10103880:	dfc00115 	stw	ra,4(sp)
10103884:	01091880 	call	10109188 <_read_r>
10103888:	10000716 	blt	r2,zero,101038a8 <__sread+0x38>
1010388c:	80c01417 	ldw	r3,80(r16)
10103890:	1887883a 	add	r3,r3,r2
10103894:	80c01415 	stw	r3,80(r16)
10103898:	dfc00117 	ldw	ra,4(sp)
1010389c:	dc000017 	ldw	r16,0(sp)
101038a0:	dec00204 	addi	sp,sp,8
101038a4:	f800283a 	ret
101038a8:	80c0030b 	ldhu	r3,12(r16)
101038ac:	18fbffcc 	andi	r3,r3,61439
101038b0:	80c0030d 	sth	r3,12(r16)
101038b4:	dfc00117 	ldw	ra,4(sp)
101038b8:	dc000017 	ldw	r16,0(sp)
101038bc:	dec00204 	addi	sp,sp,8
101038c0:	f800283a 	ret

101038c4 <__seofread>:
101038c4:	0005883a 	mov	r2,zero
101038c8:	f800283a 	ret

101038cc <__swrite>:
101038cc:	2880030b 	ldhu	r2,12(r5)
101038d0:	defffb04 	addi	sp,sp,-20
101038d4:	dcc00315 	stw	r19,12(sp)
101038d8:	dc800215 	stw	r18,8(sp)
101038dc:	dc400115 	stw	r17,4(sp)
101038e0:	dc000015 	stw	r16,0(sp)
101038e4:	dfc00415 	stw	ra,16(sp)
101038e8:	10c0400c 	andi	r3,r2,256
101038ec:	2821883a 	mov	r16,r5
101038f0:	2023883a 	mov	r17,r4
101038f4:	3025883a 	mov	r18,r6
101038f8:	3827883a 	mov	r19,r7
101038fc:	18000526 	beq	r3,zero,10103914 <__swrite+0x48>
10103900:	2940038f 	ldh	r5,14(r5)
10103904:	01c00084 	movi	r7,2
10103908:	000d883a 	mov	r6,zero
1010390c:	0107da40 	call	10107da4 <_lseek_r>
10103910:	8080030b 	ldhu	r2,12(r16)
10103914:	8140038f 	ldh	r5,14(r16)
10103918:	10bbffcc 	andi	r2,r2,61439
1010391c:	980f883a 	mov	r7,r19
10103920:	900d883a 	mov	r6,r18
10103924:	8809883a 	mov	r4,r17
10103928:	8080030d 	sth	r2,12(r16)
1010392c:	dfc00417 	ldw	ra,16(sp)
10103930:	dcc00317 	ldw	r19,12(sp)
10103934:	dc800217 	ldw	r18,8(sp)
10103938:	dc400117 	ldw	r17,4(sp)
1010393c:	dc000017 	ldw	r16,0(sp)
10103940:	dec00504 	addi	sp,sp,20
10103944:	0105c7c1 	jmpi	10105c7c <_write_r>

10103948 <__sseek>:
10103948:	defffe04 	addi	sp,sp,-8
1010394c:	dc000015 	stw	r16,0(sp)
10103950:	2821883a 	mov	r16,r5
10103954:	2940038f 	ldh	r5,14(r5)
10103958:	dfc00115 	stw	ra,4(sp)
1010395c:	0107da40 	call	10107da4 <_lseek_r>
10103960:	00ffffc4 	movi	r3,-1
10103964:	10c00826 	beq	r2,r3,10103988 <__sseek+0x40>
10103968:	80c0030b 	ldhu	r3,12(r16)
1010396c:	80801415 	stw	r2,80(r16)
10103970:	18c40014 	ori	r3,r3,4096
10103974:	80c0030d 	sth	r3,12(r16)
10103978:	dfc00117 	ldw	ra,4(sp)
1010397c:	dc000017 	ldw	r16,0(sp)
10103980:	dec00204 	addi	sp,sp,8
10103984:	f800283a 	ret
10103988:	80c0030b 	ldhu	r3,12(r16)
1010398c:	18fbffcc 	andi	r3,r3,61439
10103990:	80c0030d 	sth	r3,12(r16)
10103994:	dfc00117 	ldw	ra,4(sp)
10103998:	dc000017 	ldw	r16,0(sp)
1010399c:	dec00204 	addi	sp,sp,8
101039a0:	f800283a 	ret

101039a4 <__sclose>:
101039a4:	2940038f 	ldh	r5,14(r5)
101039a8:	0105e301 	jmpi	10105e30 <_close_r>

101039ac <___vfprintf_internal_r>:
101039ac:	deffb804 	addi	sp,sp,-288
101039b0:	dfc04715 	stw	ra,284(sp)
101039b4:	ddc04515 	stw	r23,276(sp)
101039b8:	dd404315 	stw	r21,268(sp)
101039bc:	d9002c15 	stw	r4,176(sp)
101039c0:	282f883a 	mov	r23,r5
101039c4:	302b883a 	mov	r21,r6
101039c8:	d9c02d15 	stw	r7,180(sp)
101039cc:	df004615 	stw	fp,280(sp)
101039d0:	dd804415 	stw	r22,272(sp)
101039d4:	dd004215 	stw	r20,264(sp)
101039d8:	dcc04115 	stw	r19,260(sp)
101039dc:	dc804015 	stw	r18,256(sp)
101039e0:	dc403f15 	stw	r17,252(sp)
101039e4:	dc003e15 	stw	r16,248(sp)
101039e8:	0107d740 	call	10107d74 <_localeconv_r>
101039ec:	10800017 	ldw	r2,0(r2)
101039f0:	1009883a 	mov	r4,r2
101039f4:	d8803415 	stw	r2,208(sp)
101039f8:	010989c0 	call	1010989c <strlen>
101039fc:	d8803715 	stw	r2,220(sp)
10103a00:	d8802c17 	ldw	r2,176(sp)
10103a04:	10000226 	beq	r2,zero,10103a10 <___vfprintf_internal_r+0x64>
10103a08:	10800e17 	ldw	r2,56(r2)
10103a0c:	1000f926 	beq	r2,zero,10103df4 <___vfprintf_internal_r+0x448>
10103a10:	b880030b 	ldhu	r2,12(r23)
10103a14:	10c8000c 	andi	r3,r2,8192
10103a18:	1800061e 	bne	r3,zero,10103a34 <___vfprintf_internal_r+0x88>
10103a1c:	b9001917 	ldw	r4,100(r23)
10103a20:	00f7ffc4 	movi	r3,-8193
10103a24:	10880014 	ori	r2,r2,8192
10103a28:	20c6703a 	and	r3,r4,r3
10103a2c:	b880030d 	sth	r2,12(r23)
10103a30:	b8c01915 	stw	r3,100(r23)
10103a34:	10c0020c 	andi	r3,r2,8
10103a38:	1800c126 	beq	r3,zero,10103d40 <___vfprintf_internal_r+0x394>
10103a3c:	b8c00417 	ldw	r3,16(r23)
10103a40:	1800bf26 	beq	r3,zero,10103d40 <___vfprintf_internal_r+0x394>
10103a44:	1080068c 	andi	r2,r2,26
10103a48:	00c00284 	movi	r3,10
10103a4c:	10c0c426 	beq	r2,r3,10103d60 <___vfprintf_internal_r+0x3b4>
10103a50:	d8c00404 	addi	r3,sp,16
10103a54:	05040474 	movhi	r20,4113
10103a58:	d9001e04 	addi	r4,sp,120
10103a5c:	a5041384 	addi	r20,r20,4174
10103a60:	d8c01e15 	stw	r3,120(sp)
10103a64:	d8002015 	stw	zero,128(sp)
10103a68:	d8001f15 	stw	zero,124(sp)
10103a6c:	d8003315 	stw	zero,204(sp)
10103a70:	d8003615 	stw	zero,216(sp)
10103a74:	d8003815 	stw	zero,224(sp)
10103a78:	1811883a 	mov	r8,r3
10103a7c:	d8003915 	stw	zero,228(sp)
10103a80:	d8003a15 	stw	zero,232(sp)
10103a84:	d8002f15 	stw	zero,188(sp)
10103a88:	d9002815 	stw	r4,160(sp)
10103a8c:	a8800007 	ldb	r2,0(r21)
10103a90:	10027b26 	beq	r2,zero,10104480 <___vfprintf_internal_r+0xad4>
10103a94:	00c00944 	movi	r3,37
10103a98:	a821883a 	mov	r16,r21
10103a9c:	10c0021e 	bne	r2,r3,10103aa8 <___vfprintf_internal_r+0xfc>
10103aa0:	00001406 	br	10103af4 <___vfprintf_internal_r+0x148>
10103aa4:	10c00326 	beq	r2,r3,10103ab4 <___vfprintf_internal_r+0x108>
10103aa8:	84000044 	addi	r16,r16,1
10103aac:	80800007 	ldb	r2,0(r16)
10103ab0:	103ffc1e 	bne	r2,zero,10103aa4 <__alt_data_end+0xfffe3aa4>
10103ab4:	8563c83a 	sub	r17,r16,r21
10103ab8:	88000e26 	beq	r17,zero,10103af4 <___vfprintf_internal_r+0x148>
10103abc:	d8c02017 	ldw	r3,128(sp)
10103ac0:	d8801f17 	ldw	r2,124(sp)
10103ac4:	45400015 	stw	r21,0(r8)
10103ac8:	1c47883a 	add	r3,r3,r17
10103acc:	10800044 	addi	r2,r2,1
10103ad0:	d8c02015 	stw	r3,128(sp)
10103ad4:	44400115 	stw	r17,4(r8)
10103ad8:	d8801f15 	stw	r2,124(sp)
10103adc:	00c001c4 	movi	r3,7
10103ae0:	1880a716 	blt	r3,r2,10103d80 <___vfprintf_internal_r+0x3d4>
10103ae4:	42000204 	addi	r8,r8,8
10103ae8:	d9402f17 	ldw	r5,188(sp)
10103aec:	2c4b883a 	add	r5,r5,r17
10103af0:	d9402f15 	stw	r5,188(sp)
10103af4:	80800007 	ldb	r2,0(r16)
10103af8:	1000a826 	beq	r2,zero,10103d9c <___vfprintf_internal_r+0x3f0>
10103afc:	84400047 	ldb	r17,1(r16)
10103b00:	00bfffc4 	movi	r2,-1
10103b04:	85400044 	addi	r21,r16,1
10103b08:	d8002785 	stb	zero,158(sp)
10103b0c:	0007883a 	mov	r3,zero
10103b10:	000f883a 	mov	r7,zero
10103b14:	d8802915 	stw	r2,164(sp)
10103b18:	d8003115 	stw	zero,196(sp)
10103b1c:	0025883a 	mov	r18,zero
10103b20:	01401604 	movi	r5,88
10103b24:	01800244 	movi	r6,9
10103b28:	02800a84 	movi	r10,42
10103b2c:	02401b04 	movi	r9,108
10103b30:	ad400044 	addi	r21,r21,1
10103b34:	88bff804 	addi	r2,r17,-32
10103b38:	28830436 	bltu	r5,r2,1010474c <___vfprintf_internal_r+0xda0>
10103b3c:	100490ba 	slli	r2,r2,2
10103b40:	01040434 	movhi	r4,4112
10103b44:	210ed504 	addi	r4,r4,15188
10103b48:	1105883a 	add	r2,r2,r4
10103b4c:	10800017 	ldw	r2,0(r2)
10103b50:	1000683a 	jmp	r2
10103b54:	1010466c 	andhi	zero,r2,16665
10103b58:	1010474c 	andi	zero,r2,16669
10103b5c:	1010474c 	andi	zero,r2,16669
10103b60:	1010468c 	andi	zero,r2,16666
10103b64:	1010474c 	andi	zero,r2,16669
10103b68:	1010474c 	andi	zero,r2,16669
10103b6c:	1010474c 	andi	zero,r2,16669
10103b70:	1010474c 	andi	zero,r2,16669
10103b74:	1010474c 	andi	zero,r2,16669
10103b78:	1010474c 	andi	zero,r2,16669
10103b7c:	10103e00 	call	110103e0 <__alt_data_end+0xef03e0>
10103b80:	101045a8 	cmpgeui	zero,r2,16662
10103b84:	1010474c 	andi	zero,r2,16669
10103b88:	10103cc8 	cmpgei	zero,r2,16627
10103b8c:	10103e28 	cmpgeui	zero,r2,16632
10103b90:	1010474c 	andi	zero,r2,16669
10103b94:	10103e68 	cmpgeui	zero,r2,16633
10103b98:	10103e74 	orhi	zero,r2,16633
10103b9c:	10103e74 	orhi	zero,r2,16633
10103ba0:	10103e74 	orhi	zero,r2,16633
10103ba4:	10103e74 	orhi	zero,r2,16633
10103ba8:	10103e74 	orhi	zero,r2,16633
10103bac:	10103e74 	orhi	zero,r2,16633
10103bb0:	10103e74 	orhi	zero,r2,16633
10103bb4:	10103e74 	orhi	zero,r2,16633
10103bb8:	10103e74 	orhi	zero,r2,16633
10103bbc:	1010474c 	andi	zero,r2,16669
10103bc0:	1010474c 	andi	zero,r2,16669
10103bc4:	1010474c 	andi	zero,r2,16669
10103bc8:	1010474c 	andi	zero,r2,16669
10103bcc:	1010474c 	andi	zero,r2,16669
10103bd0:	1010474c 	andi	zero,r2,16669
10103bd4:	1010474c 	andi	zero,r2,16669
10103bd8:	1010474c 	andi	zero,r2,16669
10103bdc:	1010474c 	andi	zero,r2,16669
10103be0:	1010474c 	andi	zero,r2,16669
10103be4:	10103ea8 	cmpgeui	zero,r2,16634
10103be8:	10103f64 	muli	zero,r2,16637
10103bec:	1010474c 	andi	zero,r2,16669
10103bf0:	10103f64 	muli	zero,r2,16637
10103bf4:	1010474c 	andi	zero,r2,16669
10103bf8:	1010474c 	andi	zero,r2,16669
10103bfc:	1010474c 	andi	zero,r2,16669
10103c00:	1010474c 	andi	zero,r2,16669
10103c04:	10104004 	addi	zero,r2,16640
10103c08:	1010474c 	andi	zero,r2,16669
10103c0c:	1010474c 	andi	zero,r2,16669
10103c10:	10104010 	cmplti	zero,r2,16640
10103c14:	1010474c 	andi	zero,r2,16669
10103c18:	1010474c 	andi	zero,r2,16669
10103c1c:	1010474c 	andi	zero,r2,16669
10103c20:	1010474c 	andi	zero,r2,16669
10103c24:	1010474c 	andi	zero,r2,16669
10103c28:	10104488 	cmpgei	zero,r2,16658
10103c2c:	1010474c 	andi	zero,r2,16669
10103c30:	1010474c 	andi	zero,r2,16669
10103c34:	101044e8 	cmpgeui	zero,r2,16659
10103c38:	1010474c 	andi	zero,r2,16669
10103c3c:	1010474c 	andi	zero,r2,16669
10103c40:	1010474c 	andi	zero,r2,16669
10103c44:	1010474c 	andi	zero,r2,16669
10103c48:	1010474c 	andi	zero,r2,16669
10103c4c:	1010474c 	andi	zero,r2,16669
10103c50:	1010474c 	andi	zero,r2,16669
10103c54:	1010474c 	andi	zero,r2,16669
10103c58:	1010474c 	andi	zero,r2,16669
10103c5c:	1010474c 	andi	zero,r2,16669
10103c60:	101046f8 	rdprs	zero,r2,16667
10103c64:	10104698 	cmpnei	zero,r2,16666
10103c68:	10103f64 	muli	zero,r2,16637
10103c6c:	10103f64 	muli	zero,r2,16637
10103c70:	10103f64 	muli	zero,r2,16637
10103c74:	101046a8 	cmpgeui	zero,r2,16666
10103c78:	10104698 	cmpnei	zero,r2,16666
10103c7c:	1010474c 	andi	zero,r2,16669
10103c80:	1010474c 	andi	zero,r2,16669
10103c84:	101046b4 	orhi	zero,r2,16666
10103c88:	1010474c 	andi	zero,r2,16669
10103c8c:	101046c4 	addi	zero,r2,16667
10103c90:	10104598 	cmpnei	zero,r2,16662
10103c94:	10103cd4 	ori	zero,r2,16627
10103c98:	101045b8 	rdprs	zero,r2,16662
10103c9c:	1010474c 	andi	zero,r2,16669
10103ca0:	101045c4 	addi	zero,r2,16663
10103ca4:	1010474c 	andi	zero,r2,16669
10103ca8:	10104620 	cmpeqi	zero,r2,16664
10103cac:	1010474c 	andi	zero,r2,16669
10103cb0:	1010474c 	andi	zero,r2,16669
10103cb4:	10104630 	cmpltui	zero,r2,16664
10103cb8:	d9003117 	ldw	r4,196(sp)
10103cbc:	d8802d15 	stw	r2,180(sp)
10103cc0:	0109c83a 	sub	r4,zero,r4
10103cc4:	d9003115 	stw	r4,196(sp)
10103cc8:	94800114 	ori	r18,r18,4
10103ccc:	ac400007 	ldb	r17,0(r21)
10103cd0:	003f9706 	br	10103b30 <__alt_data_end+0xfffe3b30>
10103cd4:	00800c04 	movi	r2,48
10103cd8:	d9002d17 	ldw	r4,180(sp)
10103cdc:	d9402917 	ldw	r5,164(sp)
10103ce0:	d8802705 	stb	r2,156(sp)
10103ce4:	00801e04 	movi	r2,120
10103ce8:	d8802745 	stb	r2,157(sp)
10103cec:	d8002785 	stb	zero,158(sp)
10103cf0:	20c00104 	addi	r3,r4,4
10103cf4:	24c00017 	ldw	r19,0(r4)
10103cf8:	002d883a 	mov	r22,zero
10103cfc:	90800094 	ori	r2,r18,2
10103d00:	28029a16 	blt	r5,zero,1010476c <___vfprintf_internal_r+0xdc0>
10103d04:	00bfdfc4 	movi	r2,-129
10103d08:	90a4703a 	and	r18,r18,r2
10103d0c:	d8c02d15 	stw	r3,180(sp)
10103d10:	94800094 	ori	r18,r18,2
10103d14:	9802871e 	bne	r19,zero,10104734 <___vfprintf_internal_r+0xd88>
10103d18:	00840474 	movhi	r2,4113
10103d1c:	10840c04 	addi	r2,r2,4144
10103d20:	d8803915 	stw	r2,228(sp)
10103d24:	04401e04 	movi	r17,120
10103d28:	d8802917 	ldw	r2,164(sp)
10103d2c:	0039883a 	mov	fp,zero
10103d30:	1001e926 	beq	r2,zero,101044d8 <___vfprintf_internal_r+0xb2c>
10103d34:	0027883a 	mov	r19,zero
10103d38:	002d883a 	mov	r22,zero
10103d3c:	00020506 	br	10104554 <___vfprintf_internal_r+0xba8>
10103d40:	d9002c17 	ldw	r4,176(sp)
10103d44:	b80b883a 	mov	r5,r23
10103d48:	0105cdc0 	call	10105cdc <__swsetup_r>
10103d4c:	1005ac1e 	bne	r2,zero,10105400 <___vfprintf_internal_r+0x1a54>
10103d50:	b880030b 	ldhu	r2,12(r23)
10103d54:	00c00284 	movi	r3,10
10103d58:	1080068c 	andi	r2,r2,26
10103d5c:	10ff3c1e 	bne	r2,r3,10103a50 <__alt_data_end+0xfffe3a50>
10103d60:	b880038f 	ldh	r2,14(r23)
10103d64:	103f3a16 	blt	r2,zero,10103a50 <__alt_data_end+0xfffe3a50>
10103d68:	d9c02d17 	ldw	r7,180(sp)
10103d6c:	d9002c17 	ldw	r4,176(sp)
10103d70:	a80d883a 	mov	r6,r21
10103d74:	b80b883a 	mov	r5,r23
10103d78:	0105bc00 	call	10105bc0 <__sbprintf>
10103d7c:	00001106 	br	10103dc4 <___vfprintf_internal_r+0x418>
10103d80:	d9002c17 	ldw	r4,176(sp)
10103d84:	d9801e04 	addi	r6,sp,120
10103d88:	b80b883a 	mov	r5,r23
10103d8c:	0109a300 	call	10109a30 <__sprint_r>
10103d90:	1000081e 	bne	r2,zero,10103db4 <___vfprintf_internal_r+0x408>
10103d94:	da000404 	addi	r8,sp,16
10103d98:	003f5306 	br	10103ae8 <__alt_data_end+0xfffe3ae8>
10103d9c:	d8802017 	ldw	r2,128(sp)
10103da0:	10000426 	beq	r2,zero,10103db4 <___vfprintf_internal_r+0x408>
10103da4:	d9002c17 	ldw	r4,176(sp)
10103da8:	d9801e04 	addi	r6,sp,120
10103dac:	b80b883a 	mov	r5,r23
10103db0:	0109a300 	call	10109a30 <__sprint_r>
10103db4:	b880030b 	ldhu	r2,12(r23)
10103db8:	1080100c 	andi	r2,r2,64
10103dbc:	1005901e 	bne	r2,zero,10105400 <___vfprintf_internal_r+0x1a54>
10103dc0:	d8802f17 	ldw	r2,188(sp)
10103dc4:	dfc04717 	ldw	ra,284(sp)
10103dc8:	df004617 	ldw	fp,280(sp)
10103dcc:	ddc04517 	ldw	r23,276(sp)
10103dd0:	dd804417 	ldw	r22,272(sp)
10103dd4:	dd404317 	ldw	r21,268(sp)
10103dd8:	dd004217 	ldw	r20,264(sp)
10103ddc:	dcc04117 	ldw	r19,260(sp)
10103de0:	dc804017 	ldw	r18,256(sp)
10103de4:	dc403f17 	ldw	r17,252(sp)
10103de8:	dc003e17 	ldw	r16,248(sp)
10103dec:	dec04804 	addi	sp,sp,288
10103df0:	f800283a 	ret
10103df4:	d9002c17 	ldw	r4,176(sp)
10103df8:	0101d7c0 	call	10101d7c <__sinit>
10103dfc:	003f0406 	br	10103a10 <__alt_data_end+0xfffe3a10>
10103e00:	d8802d17 	ldw	r2,180(sp)
10103e04:	d9002d17 	ldw	r4,180(sp)
10103e08:	10800017 	ldw	r2,0(r2)
10103e0c:	d8803115 	stw	r2,196(sp)
10103e10:	20800104 	addi	r2,r4,4
10103e14:	d9003117 	ldw	r4,196(sp)
10103e18:	203fa716 	blt	r4,zero,10103cb8 <__alt_data_end+0xfffe3cb8>
10103e1c:	d8802d15 	stw	r2,180(sp)
10103e20:	ac400007 	ldb	r17,0(r21)
10103e24:	003f4206 	br	10103b30 <__alt_data_end+0xfffe3b30>
10103e28:	ac400007 	ldb	r17,0(r21)
10103e2c:	aac00044 	addi	r11,r21,1
10103e30:	8a872826 	beq	r17,r10,10105ad4 <___vfprintf_internal_r+0x2128>
10103e34:	88bff404 	addi	r2,r17,-48
10103e38:	0009883a 	mov	r4,zero
10103e3c:	30867d36 	bltu	r6,r2,10105834 <___vfprintf_internal_r+0x1e88>
10103e40:	5c400007 	ldb	r17,0(r11)
10103e44:	210002a4 	muli	r4,r4,10
10103e48:	5d400044 	addi	r21,r11,1
10103e4c:	a817883a 	mov	r11,r21
10103e50:	2089883a 	add	r4,r4,r2
10103e54:	88bff404 	addi	r2,r17,-48
10103e58:	30bff92e 	bgeu	r6,r2,10103e40 <__alt_data_end+0xfffe3e40>
10103e5c:	2005c916 	blt	r4,zero,10105584 <___vfprintf_internal_r+0x1bd8>
10103e60:	d9002915 	stw	r4,164(sp)
10103e64:	003f3306 	br	10103b34 <__alt_data_end+0xfffe3b34>
10103e68:	94802014 	ori	r18,r18,128
10103e6c:	ac400007 	ldb	r17,0(r21)
10103e70:	003f2f06 	br	10103b30 <__alt_data_end+0xfffe3b30>
10103e74:	a809883a 	mov	r4,r21
10103e78:	d8003115 	stw	zero,196(sp)
10103e7c:	88bff404 	addi	r2,r17,-48
10103e80:	0017883a 	mov	r11,zero
10103e84:	24400007 	ldb	r17,0(r4)
10103e88:	5ac002a4 	muli	r11,r11,10
10103e8c:	ad400044 	addi	r21,r21,1
10103e90:	a809883a 	mov	r4,r21
10103e94:	12d7883a 	add	r11,r2,r11
10103e98:	88bff404 	addi	r2,r17,-48
10103e9c:	30bff92e 	bgeu	r6,r2,10103e84 <__alt_data_end+0xfffe3e84>
10103ea0:	dac03115 	stw	r11,196(sp)
10103ea4:	003f2306 	br	10103b34 <__alt_data_end+0xfffe3b34>
10103ea8:	18c03fcc 	andi	r3,r3,255
10103eac:	18072b1e 	bne	r3,zero,10105b5c <___vfprintf_internal_r+0x21b0>
10103eb0:	94800414 	ori	r18,r18,16
10103eb4:	9080080c 	andi	r2,r18,32
10103eb8:	10037b26 	beq	r2,zero,10104ca8 <___vfprintf_internal_r+0x12fc>
10103ebc:	d9402d17 	ldw	r5,180(sp)
10103ec0:	28800117 	ldw	r2,4(r5)
10103ec4:	2cc00017 	ldw	r19,0(r5)
10103ec8:	29400204 	addi	r5,r5,8
10103ecc:	d9402d15 	stw	r5,180(sp)
10103ed0:	102d883a 	mov	r22,r2
10103ed4:	10044b16 	blt	r2,zero,10105004 <___vfprintf_internal_r+0x1658>
10103ed8:	d9402917 	ldw	r5,164(sp)
10103edc:	df002783 	ldbu	fp,158(sp)
10103ee0:	2803bc16 	blt	r5,zero,10104dd4 <___vfprintf_internal_r+0x1428>
10103ee4:	00ffdfc4 	movi	r3,-129
10103ee8:	9d84b03a 	or	r2,r19,r22
10103eec:	90e4703a 	and	r18,r18,r3
10103ef0:	10017726 	beq	r2,zero,101044d0 <___vfprintf_internal_r+0xb24>
10103ef4:	b0038326 	beq	r22,zero,10104d04 <___vfprintf_internal_r+0x1358>
10103ef8:	dc402a15 	stw	r17,168(sp)
10103efc:	dc001e04 	addi	r16,sp,120
10103f00:	b023883a 	mov	r17,r22
10103f04:	402d883a 	mov	r22,r8
10103f08:	9809883a 	mov	r4,r19
10103f0c:	880b883a 	mov	r5,r17
10103f10:	01800284 	movi	r6,10
10103f14:	000f883a 	mov	r7,zero
10103f18:	010bb000 	call	1010bb00 <__umoddi3>
10103f1c:	10800c04 	addi	r2,r2,48
10103f20:	843fffc4 	addi	r16,r16,-1
10103f24:	9809883a 	mov	r4,r19
10103f28:	880b883a 	mov	r5,r17
10103f2c:	80800005 	stb	r2,0(r16)
10103f30:	01800284 	movi	r6,10
10103f34:	000f883a 	mov	r7,zero
10103f38:	010b5880 	call	1010b588 <__udivdi3>
10103f3c:	1027883a 	mov	r19,r2
10103f40:	10c4b03a 	or	r2,r2,r3
10103f44:	1823883a 	mov	r17,r3
10103f48:	103fef1e 	bne	r2,zero,10103f08 <__alt_data_end+0xfffe3f08>
10103f4c:	d8c02817 	ldw	r3,160(sp)
10103f50:	dc402a17 	ldw	r17,168(sp)
10103f54:	b011883a 	mov	r8,r22
10103f58:	1c07c83a 	sub	r3,r3,r16
10103f5c:	d8c02e15 	stw	r3,184(sp)
10103f60:	00005906 	br	101040c8 <___vfprintf_internal_r+0x71c>
10103f64:	18c03fcc 	andi	r3,r3,255
10103f68:	1806fa1e 	bne	r3,zero,10105b54 <___vfprintf_internal_r+0x21a8>
10103f6c:	9080020c 	andi	r2,r18,8
10103f70:	10048a26 	beq	r2,zero,1010519c <___vfprintf_internal_r+0x17f0>
10103f74:	d8c02d17 	ldw	r3,180(sp)
10103f78:	d9002d17 	ldw	r4,180(sp)
10103f7c:	d9402d17 	ldw	r5,180(sp)
10103f80:	18c00017 	ldw	r3,0(r3)
10103f84:	21000117 	ldw	r4,4(r4)
10103f88:	29400204 	addi	r5,r5,8
10103f8c:	d8c03615 	stw	r3,216(sp)
10103f90:	d9003815 	stw	r4,224(sp)
10103f94:	d9402d15 	stw	r5,180(sp)
10103f98:	d9003617 	ldw	r4,216(sp)
10103f9c:	d9403817 	ldw	r5,224(sp)
10103fa0:	da003d15 	stw	r8,244(sp)
10103fa4:	04000044 	movi	r16,1
10103fa8:	010974c0 	call	1010974c <__fpclassifyd>
10103fac:	da003d17 	ldw	r8,244(sp)
10103fb0:	14041f1e 	bne	r2,r16,10105030 <___vfprintf_internal_r+0x1684>
10103fb4:	d9003617 	ldw	r4,216(sp)
10103fb8:	d9403817 	ldw	r5,224(sp)
10103fbc:	000d883a 	mov	r6,zero
10103fc0:	000f883a 	mov	r7,zero
10103fc4:	010d3300 	call	1010d330 <__ledf2>
10103fc8:	da003d17 	ldw	r8,244(sp)
10103fcc:	1005be16 	blt	r2,zero,101056c8 <___vfprintf_internal_r+0x1d1c>
10103fd0:	df002783 	ldbu	fp,158(sp)
10103fd4:	008011c4 	movi	r2,71
10103fd8:	1445330e 	bge	r2,r17,101054a8 <___vfprintf_internal_r+0x1afc>
10103fdc:	04040474 	movhi	r16,4113
10103fe0:	84040404 	addi	r16,r16,4112
10103fe4:	00c000c4 	movi	r3,3
10103fe8:	00bfdfc4 	movi	r2,-129
10103fec:	d8c02a15 	stw	r3,168(sp)
10103ff0:	90a4703a 	and	r18,r18,r2
10103ff4:	d8c02e15 	stw	r3,184(sp)
10103ff8:	d8002915 	stw	zero,164(sp)
10103ffc:	d8003215 	stw	zero,200(sp)
10104000:	00003706 	br	101040e0 <___vfprintf_internal_r+0x734>
10104004:	94800214 	ori	r18,r18,8
10104008:	ac400007 	ldb	r17,0(r21)
1010400c:	003ec806 	br	10103b30 <__alt_data_end+0xfffe3b30>
10104010:	18c03fcc 	andi	r3,r3,255
10104014:	1806db1e 	bne	r3,zero,10105b84 <___vfprintf_internal_r+0x21d8>
10104018:	94800414 	ori	r18,r18,16
1010401c:	9080080c 	andi	r2,r18,32
10104020:	1002d826 	beq	r2,zero,10104b84 <___vfprintf_internal_r+0x11d8>
10104024:	d9402d17 	ldw	r5,180(sp)
10104028:	d8c02917 	ldw	r3,164(sp)
1010402c:	d8002785 	stb	zero,158(sp)
10104030:	28800204 	addi	r2,r5,8
10104034:	2cc00017 	ldw	r19,0(r5)
10104038:	2d800117 	ldw	r22,4(r5)
1010403c:	18048f16 	blt	r3,zero,1010527c <___vfprintf_internal_r+0x18d0>
10104040:	013fdfc4 	movi	r4,-129
10104044:	9d86b03a 	or	r3,r19,r22
10104048:	d8802d15 	stw	r2,180(sp)
1010404c:	9124703a 	and	r18,r18,r4
10104050:	1802d91e 	bne	r3,zero,10104bb8 <___vfprintf_internal_r+0x120c>
10104054:	d8c02917 	ldw	r3,164(sp)
10104058:	0039883a 	mov	fp,zero
1010405c:	1805c326 	beq	r3,zero,1010576c <___vfprintf_internal_r+0x1dc0>
10104060:	0027883a 	mov	r19,zero
10104064:	002d883a 	mov	r22,zero
10104068:	dc001e04 	addi	r16,sp,120
1010406c:	9806d0fa 	srli	r3,r19,3
10104070:	b008977a 	slli	r4,r22,29
10104074:	b02cd0fa 	srli	r22,r22,3
10104078:	9cc001cc 	andi	r19,r19,7
1010407c:	98800c04 	addi	r2,r19,48
10104080:	843fffc4 	addi	r16,r16,-1
10104084:	20e6b03a 	or	r19,r4,r3
10104088:	80800005 	stb	r2,0(r16)
1010408c:	9d86b03a 	or	r3,r19,r22
10104090:	183ff61e 	bne	r3,zero,1010406c <__alt_data_end+0xfffe406c>
10104094:	90c0004c 	andi	r3,r18,1
10104098:	18013b26 	beq	r3,zero,10104588 <___vfprintf_internal_r+0xbdc>
1010409c:	10803fcc 	andi	r2,r2,255
101040a0:	1080201c 	xori	r2,r2,128
101040a4:	10bfe004 	addi	r2,r2,-128
101040a8:	00c00c04 	movi	r3,48
101040ac:	10c13626 	beq	r2,r3,10104588 <___vfprintf_internal_r+0xbdc>
101040b0:	80ffffc5 	stb	r3,-1(r16)
101040b4:	d8c02817 	ldw	r3,160(sp)
101040b8:	80bfffc4 	addi	r2,r16,-1
101040bc:	1021883a 	mov	r16,r2
101040c0:	1887c83a 	sub	r3,r3,r2
101040c4:	d8c02e15 	stw	r3,184(sp)
101040c8:	d8802e17 	ldw	r2,184(sp)
101040cc:	d9002917 	ldw	r4,164(sp)
101040d0:	1100010e 	bge	r2,r4,101040d8 <___vfprintf_internal_r+0x72c>
101040d4:	2005883a 	mov	r2,r4
101040d8:	d8802a15 	stw	r2,168(sp)
101040dc:	d8003215 	stw	zero,200(sp)
101040e0:	e7003fcc 	andi	fp,fp,255
101040e4:	e700201c 	xori	fp,fp,128
101040e8:	e73fe004 	addi	fp,fp,-128
101040ec:	e0000326 	beq	fp,zero,101040fc <___vfprintf_internal_r+0x750>
101040f0:	d8c02a17 	ldw	r3,168(sp)
101040f4:	18c00044 	addi	r3,r3,1
101040f8:	d8c02a15 	stw	r3,168(sp)
101040fc:	90c0008c 	andi	r3,r18,2
10104100:	d8c02b15 	stw	r3,172(sp)
10104104:	18000326 	beq	r3,zero,10104114 <___vfprintf_internal_r+0x768>
10104108:	d8c02a17 	ldw	r3,168(sp)
1010410c:	18c00084 	addi	r3,r3,2
10104110:	d8c02a15 	stw	r3,168(sp)
10104114:	90c0210c 	andi	r3,r18,132
10104118:	d8c03015 	stw	r3,192(sp)
1010411c:	1801a31e 	bne	r3,zero,101047ac <___vfprintf_internal_r+0xe00>
10104120:	d9003117 	ldw	r4,196(sp)
10104124:	d8c02a17 	ldw	r3,168(sp)
10104128:	20e7c83a 	sub	r19,r4,r3
1010412c:	04c19f0e 	bge	zero,r19,101047ac <___vfprintf_internal_r+0xe00>
10104130:	02400404 	movi	r9,16
10104134:	d8c02017 	ldw	r3,128(sp)
10104138:	d8801f17 	ldw	r2,124(sp)
1010413c:	4cc50d0e 	bge	r9,r19,10105574 <___vfprintf_internal_r+0x1bc8>
10104140:	01440474 	movhi	r5,4113
10104144:	29441784 	addi	r5,r5,4190
10104148:	dc403b15 	stw	r17,236(sp)
1010414c:	d9403515 	stw	r5,212(sp)
10104150:	9823883a 	mov	r17,r19
10104154:	482d883a 	mov	r22,r9
10104158:	9027883a 	mov	r19,r18
1010415c:	070001c4 	movi	fp,7
10104160:	8025883a 	mov	r18,r16
10104164:	dc002c17 	ldw	r16,176(sp)
10104168:	00000306 	br	10104178 <___vfprintf_internal_r+0x7cc>
1010416c:	8c7ffc04 	addi	r17,r17,-16
10104170:	42000204 	addi	r8,r8,8
10104174:	b440130e 	bge	r22,r17,101041c4 <___vfprintf_internal_r+0x818>
10104178:	01040474 	movhi	r4,4113
1010417c:	18c00404 	addi	r3,r3,16
10104180:	10800044 	addi	r2,r2,1
10104184:	21041784 	addi	r4,r4,4190
10104188:	41000015 	stw	r4,0(r8)
1010418c:	45800115 	stw	r22,4(r8)
10104190:	d8c02015 	stw	r3,128(sp)
10104194:	d8801f15 	stw	r2,124(sp)
10104198:	e0bff40e 	bge	fp,r2,1010416c <__alt_data_end+0xfffe416c>
1010419c:	d9801e04 	addi	r6,sp,120
101041a0:	b80b883a 	mov	r5,r23
101041a4:	8009883a 	mov	r4,r16
101041a8:	0109a300 	call	10109a30 <__sprint_r>
101041ac:	103f011e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101041b0:	8c7ffc04 	addi	r17,r17,-16
101041b4:	d8c02017 	ldw	r3,128(sp)
101041b8:	d8801f17 	ldw	r2,124(sp)
101041bc:	da000404 	addi	r8,sp,16
101041c0:	b47fed16 	blt	r22,r17,10104178 <__alt_data_end+0xfffe4178>
101041c4:	9021883a 	mov	r16,r18
101041c8:	9825883a 	mov	r18,r19
101041cc:	8827883a 	mov	r19,r17
101041d0:	dc403b17 	ldw	r17,236(sp)
101041d4:	d9403517 	ldw	r5,212(sp)
101041d8:	98c7883a 	add	r3,r19,r3
101041dc:	10800044 	addi	r2,r2,1
101041e0:	41400015 	stw	r5,0(r8)
101041e4:	44c00115 	stw	r19,4(r8)
101041e8:	d8c02015 	stw	r3,128(sp)
101041ec:	d8801f15 	stw	r2,124(sp)
101041f0:	010001c4 	movi	r4,7
101041f4:	2082a316 	blt	r4,r2,10104c84 <___vfprintf_internal_r+0x12d8>
101041f8:	df002787 	ldb	fp,158(sp)
101041fc:	42000204 	addi	r8,r8,8
10104200:	e0000c26 	beq	fp,zero,10104234 <___vfprintf_internal_r+0x888>
10104204:	d8801f17 	ldw	r2,124(sp)
10104208:	d9002784 	addi	r4,sp,158
1010420c:	18c00044 	addi	r3,r3,1
10104210:	10800044 	addi	r2,r2,1
10104214:	41000015 	stw	r4,0(r8)
10104218:	01000044 	movi	r4,1
1010421c:	41000115 	stw	r4,4(r8)
10104220:	d8c02015 	stw	r3,128(sp)
10104224:	d8801f15 	stw	r2,124(sp)
10104228:	010001c4 	movi	r4,7
1010422c:	20823c16 	blt	r4,r2,10104b20 <___vfprintf_internal_r+0x1174>
10104230:	42000204 	addi	r8,r8,8
10104234:	d8802b17 	ldw	r2,172(sp)
10104238:	10000c26 	beq	r2,zero,1010426c <___vfprintf_internal_r+0x8c0>
1010423c:	d8801f17 	ldw	r2,124(sp)
10104240:	d9002704 	addi	r4,sp,156
10104244:	18c00084 	addi	r3,r3,2
10104248:	10800044 	addi	r2,r2,1
1010424c:	41000015 	stw	r4,0(r8)
10104250:	01000084 	movi	r4,2
10104254:	41000115 	stw	r4,4(r8)
10104258:	d8c02015 	stw	r3,128(sp)
1010425c:	d8801f15 	stw	r2,124(sp)
10104260:	010001c4 	movi	r4,7
10104264:	20823616 	blt	r4,r2,10104b40 <___vfprintf_internal_r+0x1194>
10104268:	42000204 	addi	r8,r8,8
1010426c:	d9003017 	ldw	r4,192(sp)
10104270:	00802004 	movi	r2,128
10104274:	20819926 	beq	r4,r2,101048dc <___vfprintf_internal_r+0xf30>
10104278:	d9402917 	ldw	r5,164(sp)
1010427c:	d8802e17 	ldw	r2,184(sp)
10104280:	28adc83a 	sub	r22,r5,r2
10104284:	0580310e 	bge	zero,r22,1010434c <___vfprintf_internal_r+0x9a0>
10104288:	07000404 	movi	fp,16
1010428c:	d8801f17 	ldw	r2,124(sp)
10104290:	e584140e 	bge	fp,r22,101052e4 <___vfprintf_internal_r+0x1938>
10104294:	01440474 	movhi	r5,4113
10104298:	29441384 	addi	r5,r5,4174
1010429c:	dc402915 	stw	r17,164(sp)
101042a0:	d9402b15 	stw	r5,172(sp)
101042a4:	b023883a 	mov	r17,r22
101042a8:	04c001c4 	movi	r19,7
101042ac:	a82d883a 	mov	r22,r21
101042b0:	902b883a 	mov	r21,r18
101042b4:	8025883a 	mov	r18,r16
101042b8:	dc002c17 	ldw	r16,176(sp)
101042bc:	00000306 	br	101042cc <___vfprintf_internal_r+0x920>
101042c0:	8c7ffc04 	addi	r17,r17,-16
101042c4:	42000204 	addi	r8,r8,8
101042c8:	e440110e 	bge	fp,r17,10104310 <___vfprintf_internal_r+0x964>
101042cc:	18c00404 	addi	r3,r3,16
101042d0:	10800044 	addi	r2,r2,1
101042d4:	45000015 	stw	r20,0(r8)
101042d8:	47000115 	stw	fp,4(r8)
101042dc:	d8c02015 	stw	r3,128(sp)
101042e0:	d8801f15 	stw	r2,124(sp)
101042e4:	98bff60e 	bge	r19,r2,101042c0 <__alt_data_end+0xfffe42c0>
101042e8:	d9801e04 	addi	r6,sp,120
101042ec:	b80b883a 	mov	r5,r23
101042f0:	8009883a 	mov	r4,r16
101042f4:	0109a300 	call	10109a30 <__sprint_r>
101042f8:	103eae1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101042fc:	8c7ffc04 	addi	r17,r17,-16
10104300:	d8c02017 	ldw	r3,128(sp)
10104304:	d8801f17 	ldw	r2,124(sp)
10104308:	da000404 	addi	r8,sp,16
1010430c:	e47fef16 	blt	fp,r17,101042cc <__alt_data_end+0xfffe42cc>
10104310:	9021883a 	mov	r16,r18
10104314:	a825883a 	mov	r18,r21
10104318:	b02b883a 	mov	r21,r22
1010431c:	882d883a 	mov	r22,r17
10104320:	dc402917 	ldw	r17,164(sp)
10104324:	d9002b17 	ldw	r4,172(sp)
10104328:	1d87883a 	add	r3,r3,r22
1010432c:	10800044 	addi	r2,r2,1
10104330:	41000015 	stw	r4,0(r8)
10104334:	45800115 	stw	r22,4(r8)
10104338:	d8c02015 	stw	r3,128(sp)
1010433c:	d8801f15 	stw	r2,124(sp)
10104340:	010001c4 	movi	r4,7
10104344:	2081ee16 	blt	r4,r2,10104b00 <___vfprintf_internal_r+0x1154>
10104348:	42000204 	addi	r8,r8,8
1010434c:	9080400c 	andi	r2,r18,256
10104350:	1001181e 	bne	r2,zero,101047b4 <___vfprintf_internal_r+0xe08>
10104354:	d9402e17 	ldw	r5,184(sp)
10104358:	d8801f17 	ldw	r2,124(sp)
1010435c:	44000015 	stw	r16,0(r8)
10104360:	1947883a 	add	r3,r3,r5
10104364:	10800044 	addi	r2,r2,1
10104368:	41400115 	stw	r5,4(r8)
1010436c:	d8c02015 	stw	r3,128(sp)
10104370:	d8801f15 	stw	r2,124(sp)
10104374:	010001c4 	movi	r4,7
10104378:	2081d316 	blt	r4,r2,10104ac8 <___vfprintf_internal_r+0x111c>
1010437c:	42000204 	addi	r8,r8,8
10104380:	9480010c 	andi	r18,r18,4
10104384:	90003226 	beq	r18,zero,10104450 <___vfprintf_internal_r+0xaa4>
10104388:	d9403117 	ldw	r5,196(sp)
1010438c:	d8802a17 	ldw	r2,168(sp)
10104390:	28a1c83a 	sub	r16,r5,r2
10104394:	04002e0e 	bge	zero,r16,10104450 <___vfprintf_internal_r+0xaa4>
10104398:	04400404 	movi	r17,16
1010439c:	d8801f17 	ldw	r2,124(sp)
101043a0:	8c04a20e 	bge	r17,r16,1010562c <___vfprintf_internal_r+0x1c80>
101043a4:	01440474 	movhi	r5,4113
101043a8:	29441784 	addi	r5,r5,4190
101043ac:	d9403515 	stw	r5,212(sp)
101043b0:	048001c4 	movi	r18,7
101043b4:	dcc02c17 	ldw	r19,176(sp)
101043b8:	00000306 	br	101043c8 <___vfprintf_internal_r+0xa1c>
101043bc:	843ffc04 	addi	r16,r16,-16
101043c0:	42000204 	addi	r8,r8,8
101043c4:	8c00130e 	bge	r17,r16,10104414 <___vfprintf_internal_r+0xa68>
101043c8:	01040474 	movhi	r4,4113
101043cc:	18c00404 	addi	r3,r3,16
101043d0:	10800044 	addi	r2,r2,1
101043d4:	21041784 	addi	r4,r4,4190
101043d8:	41000015 	stw	r4,0(r8)
101043dc:	44400115 	stw	r17,4(r8)
101043e0:	d8c02015 	stw	r3,128(sp)
101043e4:	d8801f15 	stw	r2,124(sp)
101043e8:	90bff40e 	bge	r18,r2,101043bc <__alt_data_end+0xfffe43bc>
101043ec:	d9801e04 	addi	r6,sp,120
101043f0:	b80b883a 	mov	r5,r23
101043f4:	9809883a 	mov	r4,r19
101043f8:	0109a300 	call	10109a30 <__sprint_r>
101043fc:	103e6d1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104400:	843ffc04 	addi	r16,r16,-16
10104404:	d8c02017 	ldw	r3,128(sp)
10104408:	d8801f17 	ldw	r2,124(sp)
1010440c:	da000404 	addi	r8,sp,16
10104410:	8c3fed16 	blt	r17,r16,101043c8 <__alt_data_end+0xfffe43c8>
10104414:	d9403517 	ldw	r5,212(sp)
10104418:	1c07883a 	add	r3,r3,r16
1010441c:	10800044 	addi	r2,r2,1
10104420:	41400015 	stw	r5,0(r8)
10104424:	44000115 	stw	r16,4(r8)
10104428:	d8c02015 	stw	r3,128(sp)
1010442c:	d8801f15 	stw	r2,124(sp)
10104430:	010001c4 	movi	r4,7
10104434:	2080060e 	bge	r4,r2,10104450 <___vfprintf_internal_r+0xaa4>
10104438:	d9002c17 	ldw	r4,176(sp)
1010443c:	d9801e04 	addi	r6,sp,120
10104440:	b80b883a 	mov	r5,r23
10104444:	0109a300 	call	10109a30 <__sprint_r>
10104448:	103e5a1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
1010444c:	d8c02017 	ldw	r3,128(sp)
10104450:	d8803117 	ldw	r2,196(sp)
10104454:	d9002a17 	ldw	r4,168(sp)
10104458:	1100010e 	bge	r2,r4,10104460 <___vfprintf_internal_r+0xab4>
1010445c:	2005883a 	mov	r2,r4
10104460:	d9402f17 	ldw	r5,188(sp)
10104464:	288b883a 	add	r5,r5,r2
10104468:	d9402f15 	stw	r5,188(sp)
1010446c:	18019e1e 	bne	r3,zero,10104ae8 <___vfprintf_internal_r+0x113c>
10104470:	a8800007 	ldb	r2,0(r21)
10104474:	d8001f15 	stw	zero,124(sp)
10104478:	da000404 	addi	r8,sp,16
1010447c:	103d851e 	bne	r2,zero,10103a94 <__alt_data_end+0xfffe3a94>
10104480:	a821883a 	mov	r16,r21
10104484:	003d9b06 	br	10103af4 <__alt_data_end+0xfffe3af4>
10104488:	18c03fcc 	andi	r3,r3,255
1010448c:	1805c11e 	bne	r3,zero,10105b94 <___vfprintf_internal_r+0x21e8>
10104490:	94800414 	ori	r18,r18,16
10104494:	9080080c 	andi	r2,r18,32
10104498:	10020c26 	beq	r2,zero,10104ccc <___vfprintf_internal_r+0x1320>
1010449c:	d8802d17 	ldw	r2,180(sp)
101044a0:	d9002917 	ldw	r4,164(sp)
101044a4:	d8002785 	stb	zero,158(sp)
101044a8:	10c00204 	addi	r3,r2,8
101044ac:	14c00017 	ldw	r19,0(r2)
101044b0:	15800117 	ldw	r22,4(r2)
101044b4:	20040f16 	blt	r4,zero,101054f4 <___vfprintf_internal_r+0x1b48>
101044b8:	013fdfc4 	movi	r4,-129
101044bc:	9d84b03a 	or	r2,r19,r22
101044c0:	d8c02d15 	stw	r3,180(sp)
101044c4:	9124703a 	and	r18,r18,r4
101044c8:	0039883a 	mov	fp,zero
101044cc:	103e891e 	bne	r2,zero,10103ef4 <__alt_data_end+0xfffe3ef4>
101044d0:	d9002917 	ldw	r4,164(sp)
101044d4:	2002c11e 	bne	r4,zero,10104fdc <___vfprintf_internal_r+0x1630>
101044d8:	d8002915 	stw	zero,164(sp)
101044dc:	d8002e15 	stw	zero,184(sp)
101044e0:	dc001e04 	addi	r16,sp,120
101044e4:	003ef806 	br	101040c8 <__alt_data_end+0xfffe40c8>
101044e8:	18c03fcc 	andi	r3,r3,255
101044ec:	18059d1e 	bne	r3,zero,10105b64 <___vfprintf_internal_r+0x21b8>
101044f0:	01440474 	movhi	r5,4113
101044f4:	29440704 	addi	r5,r5,4124
101044f8:	d9403915 	stw	r5,228(sp)
101044fc:	9080080c 	andi	r2,r18,32
10104500:	10005226 	beq	r2,zero,1010464c <___vfprintf_internal_r+0xca0>
10104504:	d8802d17 	ldw	r2,180(sp)
10104508:	14c00017 	ldw	r19,0(r2)
1010450c:	15800117 	ldw	r22,4(r2)
10104510:	10800204 	addi	r2,r2,8
10104514:	d8802d15 	stw	r2,180(sp)
10104518:	9080004c 	andi	r2,r18,1
1010451c:	10019026 	beq	r2,zero,10104b60 <___vfprintf_internal_r+0x11b4>
10104520:	9d84b03a 	or	r2,r19,r22
10104524:	10036926 	beq	r2,zero,101052cc <___vfprintf_internal_r+0x1920>
10104528:	d8c02917 	ldw	r3,164(sp)
1010452c:	00800c04 	movi	r2,48
10104530:	d8802705 	stb	r2,156(sp)
10104534:	dc402745 	stb	r17,157(sp)
10104538:	d8002785 	stb	zero,158(sp)
1010453c:	90800094 	ori	r2,r18,2
10104540:	18045d16 	blt	r3,zero,101056b8 <___vfprintf_internal_r+0x1d0c>
10104544:	00bfdfc4 	movi	r2,-129
10104548:	90a4703a 	and	r18,r18,r2
1010454c:	94800094 	ori	r18,r18,2
10104550:	0039883a 	mov	fp,zero
10104554:	d9003917 	ldw	r4,228(sp)
10104558:	dc001e04 	addi	r16,sp,120
1010455c:	988003cc 	andi	r2,r19,15
10104560:	b006973a 	slli	r3,r22,28
10104564:	2085883a 	add	r2,r4,r2
10104568:	9826d13a 	srli	r19,r19,4
1010456c:	10800003 	ldbu	r2,0(r2)
10104570:	b02cd13a 	srli	r22,r22,4
10104574:	843fffc4 	addi	r16,r16,-1
10104578:	1ce6b03a 	or	r19,r3,r19
1010457c:	80800005 	stb	r2,0(r16)
10104580:	9d84b03a 	or	r2,r19,r22
10104584:	103ff51e 	bne	r2,zero,1010455c <__alt_data_end+0xfffe455c>
10104588:	d8c02817 	ldw	r3,160(sp)
1010458c:	1c07c83a 	sub	r3,r3,r16
10104590:	d8c02e15 	stw	r3,184(sp)
10104594:	003ecc06 	br	101040c8 <__alt_data_end+0xfffe40c8>
10104598:	18c03fcc 	andi	r3,r3,255
1010459c:	183e9f26 	beq	r3,zero,1010401c <__alt_data_end+0xfffe401c>
101045a0:	d9c02785 	stb	r7,158(sp)
101045a4:	003e9d06 	br	1010401c <__alt_data_end+0xfffe401c>
101045a8:	00c00044 	movi	r3,1
101045ac:	01c00ac4 	movi	r7,43
101045b0:	ac400007 	ldb	r17,0(r21)
101045b4:	003d5e06 	br	10103b30 <__alt_data_end+0xfffe3b30>
101045b8:	94800814 	ori	r18,r18,32
101045bc:	ac400007 	ldb	r17,0(r21)
101045c0:	003d5b06 	br	10103b30 <__alt_data_end+0xfffe3b30>
101045c4:	d8c02d17 	ldw	r3,180(sp)
101045c8:	d8002785 	stb	zero,158(sp)
101045cc:	1c000017 	ldw	r16,0(r3)
101045d0:	1cc00104 	addi	r19,r3,4
101045d4:	80041926 	beq	r16,zero,1010563c <___vfprintf_internal_r+0x1c90>
101045d8:	d9002917 	ldw	r4,164(sp)
101045dc:	2003d016 	blt	r4,zero,10105520 <___vfprintf_internal_r+0x1b74>
101045e0:	200d883a 	mov	r6,r4
101045e4:	000b883a 	mov	r5,zero
101045e8:	8009883a 	mov	r4,r16
101045ec:	da003d15 	stw	r8,244(sp)
101045f0:	0107e040 	call	10107e04 <memchr>
101045f4:	da003d17 	ldw	r8,244(sp)
101045f8:	10045426 	beq	r2,zero,1010574c <___vfprintf_internal_r+0x1da0>
101045fc:	1405c83a 	sub	r2,r2,r16
10104600:	d8802e15 	stw	r2,184(sp)
10104604:	1003cc16 	blt	r2,zero,10105538 <___vfprintf_internal_r+0x1b8c>
10104608:	df002783 	ldbu	fp,158(sp)
1010460c:	d8802a15 	stw	r2,168(sp)
10104610:	dcc02d15 	stw	r19,180(sp)
10104614:	d8002915 	stw	zero,164(sp)
10104618:	d8003215 	stw	zero,200(sp)
1010461c:	003eb006 	br	101040e0 <__alt_data_end+0xfffe40e0>
10104620:	18c03fcc 	andi	r3,r3,255
10104624:	183f9b26 	beq	r3,zero,10104494 <__alt_data_end+0xfffe4494>
10104628:	d9c02785 	stb	r7,158(sp)
1010462c:	003f9906 	br	10104494 <__alt_data_end+0xfffe4494>
10104630:	18c03fcc 	andi	r3,r3,255
10104634:	1805551e 	bne	r3,zero,10105b8c <___vfprintf_internal_r+0x21e0>
10104638:	01440474 	movhi	r5,4113
1010463c:	29440c04 	addi	r5,r5,4144
10104640:	d9403915 	stw	r5,228(sp)
10104644:	9080080c 	andi	r2,r18,32
10104648:	103fae1e 	bne	r2,zero,10104504 <__alt_data_end+0xfffe4504>
1010464c:	9080040c 	andi	r2,r18,16
10104650:	1002de26 	beq	r2,zero,101051cc <___vfprintf_internal_r+0x1820>
10104654:	d8c02d17 	ldw	r3,180(sp)
10104658:	002d883a 	mov	r22,zero
1010465c:	1cc00017 	ldw	r19,0(r3)
10104660:	18c00104 	addi	r3,r3,4
10104664:	d8c02d15 	stw	r3,180(sp)
10104668:	003fab06 	br	10104518 <__alt_data_end+0xfffe4518>
1010466c:	38803fcc 	andi	r2,r7,255
10104670:	1080201c 	xori	r2,r2,128
10104674:	10bfe004 	addi	r2,r2,-128
10104678:	1002d21e 	bne	r2,zero,101051c4 <___vfprintf_internal_r+0x1818>
1010467c:	00c00044 	movi	r3,1
10104680:	01c00804 	movi	r7,32
10104684:	ac400007 	ldb	r17,0(r21)
10104688:	003d2906 	br	10103b30 <__alt_data_end+0xfffe3b30>
1010468c:	94800054 	ori	r18,r18,1
10104690:	ac400007 	ldb	r17,0(r21)
10104694:	003d2606 	br	10103b30 <__alt_data_end+0xfffe3b30>
10104698:	18c03fcc 	andi	r3,r3,255
1010469c:	183e0526 	beq	r3,zero,10103eb4 <__alt_data_end+0xfffe3eb4>
101046a0:	d9c02785 	stb	r7,158(sp)
101046a4:	003e0306 	br	10103eb4 <__alt_data_end+0xfffe3eb4>
101046a8:	94801014 	ori	r18,r18,64
101046ac:	ac400007 	ldb	r17,0(r21)
101046b0:	003d1f06 	br	10103b30 <__alt_data_end+0xfffe3b30>
101046b4:	ac400007 	ldb	r17,0(r21)
101046b8:	8a438726 	beq	r17,r9,101054d8 <___vfprintf_internal_r+0x1b2c>
101046bc:	94800414 	ori	r18,r18,16
101046c0:	003d1b06 	br	10103b30 <__alt_data_end+0xfffe3b30>
101046c4:	18c03fcc 	andi	r3,r3,255
101046c8:	1805341e 	bne	r3,zero,10105b9c <___vfprintf_internal_r+0x21f0>
101046cc:	9080080c 	andi	r2,r18,32
101046d0:	1002cd26 	beq	r2,zero,10105208 <___vfprintf_internal_r+0x185c>
101046d4:	d9402d17 	ldw	r5,180(sp)
101046d8:	d9002f17 	ldw	r4,188(sp)
101046dc:	28800017 	ldw	r2,0(r5)
101046e0:	2007d7fa 	srai	r3,r4,31
101046e4:	29400104 	addi	r5,r5,4
101046e8:	d9402d15 	stw	r5,180(sp)
101046ec:	11000015 	stw	r4,0(r2)
101046f0:	10c00115 	stw	r3,4(r2)
101046f4:	003ce506 	br	10103a8c <__alt_data_end+0xfffe3a8c>
101046f8:	d8c02d17 	ldw	r3,180(sp)
101046fc:	d9002d17 	ldw	r4,180(sp)
10104700:	d8002785 	stb	zero,158(sp)
10104704:	18800017 	ldw	r2,0(r3)
10104708:	21000104 	addi	r4,r4,4
1010470c:	00c00044 	movi	r3,1
10104710:	d8c02a15 	stw	r3,168(sp)
10104714:	d8801405 	stb	r2,80(sp)
10104718:	d9002d15 	stw	r4,180(sp)
1010471c:	d8c02e15 	stw	r3,184(sp)
10104720:	d8002915 	stw	zero,164(sp)
10104724:	d8003215 	stw	zero,200(sp)
10104728:	dc001404 	addi	r16,sp,80
1010472c:	0039883a 	mov	fp,zero
10104730:	003e7206 	br	101040fc <__alt_data_end+0xfffe40fc>
10104734:	01040474 	movhi	r4,4113
10104738:	21040c04 	addi	r4,r4,4144
1010473c:	0039883a 	mov	fp,zero
10104740:	d9003915 	stw	r4,228(sp)
10104744:	04401e04 	movi	r17,120
10104748:	003f8206 	br	10104554 <__alt_data_end+0xfffe4554>
1010474c:	18c03fcc 	andi	r3,r3,255
10104750:	1805061e 	bne	r3,zero,10105b6c <___vfprintf_internal_r+0x21c0>
10104754:	883d9126 	beq	r17,zero,10103d9c <__alt_data_end+0xfffe3d9c>
10104758:	00c00044 	movi	r3,1
1010475c:	d8c02a15 	stw	r3,168(sp)
10104760:	dc401405 	stb	r17,80(sp)
10104764:	d8002785 	stb	zero,158(sp)
10104768:	003fec06 	br	1010471c <__alt_data_end+0xfffe471c>
1010476c:	01440474 	movhi	r5,4113
10104770:	29440c04 	addi	r5,r5,4144
10104774:	d9403915 	stw	r5,228(sp)
10104778:	d8c02d15 	stw	r3,180(sp)
1010477c:	1025883a 	mov	r18,r2
10104780:	04401e04 	movi	r17,120
10104784:	9d84b03a 	or	r2,r19,r22
10104788:	1000fc1e 	bne	r2,zero,10104b7c <___vfprintf_internal_r+0x11d0>
1010478c:	0039883a 	mov	fp,zero
10104790:	00800084 	movi	r2,2
10104794:	10803fcc 	andi	r2,r2,255
10104798:	00c00044 	movi	r3,1
1010479c:	10c20f26 	beq	r2,r3,10104fdc <___vfprintf_internal_r+0x1630>
101047a0:	00c00084 	movi	r3,2
101047a4:	10fd6326 	beq	r2,r3,10103d34 <__alt_data_end+0xfffe3d34>
101047a8:	003e2d06 	br	10104060 <__alt_data_end+0xfffe4060>
101047ac:	d8c02017 	ldw	r3,128(sp)
101047b0:	003e9306 	br	10104200 <__alt_data_end+0xfffe4200>
101047b4:	00801944 	movi	r2,101
101047b8:	14407e0e 	bge	r2,r17,101049b4 <___vfprintf_internal_r+0x1008>
101047bc:	d9003617 	ldw	r4,216(sp)
101047c0:	d9403817 	ldw	r5,224(sp)
101047c4:	000d883a 	mov	r6,zero
101047c8:	000f883a 	mov	r7,zero
101047cc:	d8c03c15 	stw	r3,240(sp)
101047d0:	da003d15 	stw	r8,244(sp)
101047d4:	010d1cc0 	call	1010d1cc <__eqdf2>
101047d8:	d8c03c17 	ldw	r3,240(sp)
101047dc:	da003d17 	ldw	r8,244(sp)
101047e0:	1000f71e 	bne	r2,zero,10104bc0 <___vfprintf_internal_r+0x1214>
101047e4:	d8801f17 	ldw	r2,124(sp)
101047e8:	01040474 	movhi	r4,4113
101047ec:	21041304 	addi	r4,r4,4172
101047f0:	18c00044 	addi	r3,r3,1
101047f4:	10800044 	addi	r2,r2,1
101047f8:	41000015 	stw	r4,0(r8)
101047fc:	01000044 	movi	r4,1
10104800:	41000115 	stw	r4,4(r8)
10104804:	d8c02015 	stw	r3,128(sp)
10104808:	d8801f15 	stw	r2,124(sp)
1010480c:	010001c4 	movi	r4,7
10104810:	2082b816 	blt	r4,r2,101052f4 <___vfprintf_internal_r+0x1948>
10104814:	42000204 	addi	r8,r8,8
10104818:	d8802617 	ldw	r2,152(sp)
1010481c:	d9403317 	ldw	r5,204(sp)
10104820:	11400216 	blt	r2,r5,1010482c <___vfprintf_internal_r+0xe80>
10104824:	9080004c 	andi	r2,r18,1
10104828:	103ed526 	beq	r2,zero,10104380 <__alt_data_end+0xfffe4380>
1010482c:	d8803717 	ldw	r2,220(sp)
10104830:	d9003417 	ldw	r4,208(sp)
10104834:	d9403717 	ldw	r5,220(sp)
10104838:	1887883a 	add	r3,r3,r2
1010483c:	d8801f17 	ldw	r2,124(sp)
10104840:	41000015 	stw	r4,0(r8)
10104844:	41400115 	stw	r5,4(r8)
10104848:	10800044 	addi	r2,r2,1
1010484c:	d8c02015 	stw	r3,128(sp)
10104850:	d8801f15 	stw	r2,124(sp)
10104854:	010001c4 	movi	r4,7
10104858:	20832916 	blt	r4,r2,10105500 <___vfprintf_internal_r+0x1b54>
1010485c:	42000204 	addi	r8,r8,8
10104860:	d8803317 	ldw	r2,204(sp)
10104864:	143fffc4 	addi	r16,r2,-1
10104868:	043ec50e 	bge	zero,r16,10104380 <__alt_data_end+0xfffe4380>
1010486c:	04400404 	movi	r17,16
10104870:	d8801f17 	ldw	r2,124(sp)
10104874:	8c00880e 	bge	r17,r16,10104a98 <___vfprintf_internal_r+0x10ec>
10104878:	01440474 	movhi	r5,4113
1010487c:	29441384 	addi	r5,r5,4174
10104880:	d9402b15 	stw	r5,172(sp)
10104884:	058001c4 	movi	r22,7
10104888:	dcc02c17 	ldw	r19,176(sp)
1010488c:	00000306 	br	1010489c <___vfprintf_internal_r+0xef0>
10104890:	42000204 	addi	r8,r8,8
10104894:	843ffc04 	addi	r16,r16,-16
10104898:	8c00820e 	bge	r17,r16,10104aa4 <___vfprintf_internal_r+0x10f8>
1010489c:	18c00404 	addi	r3,r3,16
101048a0:	10800044 	addi	r2,r2,1
101048a4:	45000015 	stw	r20,0(r8)
101048a8:	44400115 	stw	r17,4(r8)
101048ac:	d8c02015 	stw	r3,128(sp)
101048b0:	d8801f15 	stw	r2,124(sp)
101048b4:	b0bff60e 	bge	r22,r2,10104890 <__alt_data_end+0xfffe4890>
101048b8:	d9801e04 	addi	r6,sp,120
101048bc:	b80b883a 	mov	r5,r23
101048c0:	9809883a 	mov	r4,r19
101048c4:	0109a300 	call	10109a30 <__sprint_r>
101048c8:	103d3a1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101048cc:	d8c02017 	ldw	r3,128(sp)
101048d0:	d8801f17 	ldw	r2,124(sp)
101048d4:	da000404 	addi	r8,sp,16
101048d8:	003fee06 	br	10104894 <__alt_data_end+0xfffe4894>
101048dc:	d9403117 	ldw	r5,196(sp)
101048e0:	d8802a17 	ldw	r2,168(sp)
101048e4:	28adc83a 	sub	r22,r5,r2
101048e8:	05be630e 	bge	zero,r22,10104278 <__alt_data_end+0xfffe4278>
101048ec:	07000404 	movi	fp,16
101048f0:	d8801f17 	ldw	r2,124(sp)
101048f4:	e5838f0e 	bge	fp,r22,10105734 <___vfprintf_internal_r+0x1d88>
101048f8:	01440474 	movhi	r5,4113
101048fc:	29441384 	addi	r5,r5,4174
10104900:	dc403015 	stw	r17,192(sp)
10104904:	d9402b15 	stw	r5,172(sp)
10104908:	b023883a 	mov	r17,r22
1010490c:	04c001c4 	movi	r19,7
10104910:	a82d883a 	mov	r22,r21
10104914:	902b883a 	mov	r21,r18
10104918:	8025883a 	mov	r18,r16
1010491c:	dc002c17 	ldw	r16,176(sp)
10104920:	00000306 	br	10104930 <___vfprintf_internal_r+0xf84>
10104924:	8c7ffc04 	addi	r17,r17,-16
10104928:	42000204 	addi	r8,r8,8
1010492c:	e440110e 	bge	fp,r17,10104974 <___vfprintf_internal_r+0xfc8>
10104930:	18c00404 	addi	r3,r3,16
10104934:	10800044 	addi	r2,r2,1
10104938:	45000015 	stw	r20,0(r8)
1010493c:	47000115 	stw	fp,4(r8)
10104940:	d8c02015 	stw	r3,128(sp)
10104944:	d8801f15 	stw	r2,124(sp)
10104948:	98bff60e 	bge	r19,r2,10104924 <__alt_data_end+0xfffe4924>
1010494c:	d9801e04 	addi	r6,sp,120
10104950:	b80b883a 	mov	r5,r23
10104954:	8009883a 	mov	r4,r16
10104958:	0109a300 	call	10109a30 <__sprint_r>
1010495c:	103d151e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104960:	8c7ffc04 	addi	r17,r17,-16
10104964:	d8c02017 	ldw	r3,128(sp)
10104968:	d8801f17 	ldw	r2,124(sp)
1010496c:	da000404 	addi	r8,sp,16
10104970:	e47fef16 	blt	fp,r17,10104930 <__alt_data_end+0xfffe4930>
10104974:	9021883a 	mov	r16,r18
10104978:	a825883a 	mov	r18,r21
1010497c:	b02b883a 	mov	r21,r22
10104980:	882d883a 	mov	r22,r17
10104984:	dc403017 	ldw	r17,192(sp)
10104988:	d9002b17 	ldw	r4,172(sp)
1010498c:	1d87883a 	add	r3,r3,r22
10104990:	10800044 	addi	r2,r2,1
10104994:	41000015 	stw	r4,0(r8)
10104998:	45800115 	stw	r22,4(r8)
1010499c:	d8c02015 	stw	r3,128(sp)
101049a0:	d8801f15 	stw	r2,124(sp)
101049a4:	010001c4 	movi	r4,7
101049a8:	20818e16 	blt	r4,r2,10104fe4 <___vfprintf_internal_r+0x1638>
101049ac:	42000204 	addi	r8,r8,8
101049b0:	003e3106 	br	10104278 <__alt_data_end+0xfffe4278>
101049b4:	d9403317 	ldw	r5,204(sp)
101049b8:	00800044 	movi	r2,1
101049bc:	18c00044 	addi	r3,r3,1
101049c0:	1141530e 	bge	r2,r5,10104f10 <___vfprintf_internal_r+0x1564>
101049c4:	dc401f17 	ldw	r17,124(sp)
101049c8:	00800044 	movi	r2,1
101049cc:	40800115 	stw	r2,4(r8)
101049d0:	8c400044 	addi	r17,r17,1
101049d4:	44000015 	stw	r16,0(r8)
101049d8:	d8c02015 	stw	r3,128(sp)
101049dc:	dc401f15 	stw	r17,124(sp)
101049e0:	008001c4 	movi	r2,7
101049e4:	14416b16 	blt	r2,r17,10104f94 <___vfprintf_internal_r+0x15e8>
101049e8:	42000204 	addi	r8,r8,8
101049ec:	d8803717 	ldw	r2,220(sp)
101049f0:	d9003417 	ldw	r4,208(sp)
101049f4:	8c400044 	addi	r17,r17,1
101049f8:	10c7883a 	add	r3,r2,r3
101049fc:	40800115 	stw	r2,4(r8)
10104a00:	41000015 	stw	r4,0(r8)
10104a04:	d8c02015 	stw	r3,128(sp)
10104a08:	dc401f15 	stw	r17,124(sp)
10104a0c:	008001c4 	movi	r2,7
10104a10:	14416916 	blt	r2,r17,10104fb8 <___vfprintf_internal_r+0x160c>
10104a14:	45800204 	addi	r22,r8,8
10104a18:	d9003617 	ldw	r4,216(sp)
10104a1c:	d9403817 	ldw	r5,224(sp)
10104a20:	000d883a 	mov	r6,zero
10104a24:	000f883a 	mov	r7,zero
10104a28:	d8c03c15 	stw	r3,240(sp)
10104a2c:	010d1cc0 	call	1010d1cc <__eqdf2>
10104a30:	d8c03c17 	ldw	r3,240(sp)
10104a34:	1000bc26 	beq	r2,zero,10104d28 <___vfprintf_internal_r+0x137c>
10104a38:	d9403317 	ldw	r5,204(sp)
10104a3c:	84000044 	addi	r16,r16,1
10104a40:	8c400044 	addi	r17,r17,1
10104a44:	28bfffc4 	addi	r2,r5,-1
10104a48:	1887883a 	add	r3,r3,r2
10104a4c:	b0800115 	stw	r2,4(r22)
10104a50:	b4000015 	stw	r16,0(r22)
10104a54:	d8c02015 	stw	r3,128(sp)
10104a58:	dc401f15 	stw	r17,124(sp)
10104a5c:	008001c4 	movi	r2,7
10104a60:	14414316 	blt	r2,r17,10104f70 <___vfprintf_internal_r+0x15c4>
10104a64:	b5800204 	addi	r22,r22,8
10104a68:	d9003a17 	ldw	r4,232(sp)
10104a6c:	df0022c4 	addi	fp,sp,139
10104a70:	8c400044 	addi	r17,r17,1
10104a74:	20c7883a 	add	r3,r4,r3
10104a78:	b7000015 	stw	fp,0(r22)
10104a7c:	b1000115 	stw	r4,4(r22)
10104a80:	d8c02015 	stw	r3,128(sp)
10104a84:	dc401f15 	stw	r17,124(sp)
10104a88:	008001c4 	movi	r2,7
10104a8c:	14400e16 	blt	r2,r17,10104ac8 <___vfprintf_internal_r+0x111c>
10104a90:	b2000204 	addi	r8,r22,8
10104a94:	003e3a06 	br	10104380 <__alt_data_end+0xfffe4380>
10104a98:	01040474 	movhi	r4,4113
10104a9c:	21041384 	addi	r4,r4,4174
10104aa0:	d9002b15 	stw	r4,172(sp)
10104aa4:	d9002b17 	ldw	r4,172(sp)
10104aa8:	1c07883a 	add	r3,r3,r16
10104aac:	44000115 	stw	r16,4(r8)
10104ab0:	41000015 	stw	r4,0(r8)
10104ab4:	10800044 	addi	r2,r2,1
10104ab8:	d8c02015 	stw	r3,128(sp)
10104abc:	d8801f15 	stw	r2,124(sp)
10104ac0:	010001c4 	movi	r4,7
10104ac4:	20be2d0e 	bge	r4,r2,1010437c <__alt_data_end+0xfffe437c>
10104ac8:	d9002c17 	ldw	r4,176(sp)
10104acc:	d9801e04 	addi	r6,sp,120
10104ad0:	b80b883a 	mov	r5,r23
10104ad4:	0109a300 	call	10109a30 <__sprint_r>
10104ad8:	103cb61e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104adc:	d8c02017 	ldw	r3,128(sp)
10104ae0:	da000404 	addi	r8,sp,16
10104ae4:	003e2606 	br	10104380 <__alt_data_end+0xfffe4380>
10104ae8:	d9002c17 	ldw	r4,176(sp)
10104aec:	d9801e04 	addi	r6,sp,120
10104af0:	b80b883a 	mov	r5,r23
10104af4:	0109a300 	call	10109a30 <__sprint_r>
10104af8:	103e5d26 	beq	r2,zero,10104470 <__alt_data_end+0xfffe4470>
10104afc:	003cad06 	br	10103db4 <__alt_data_end+0xfffe3db4>
10104b00:	d9002c17 	ldw	r4,176(sp)
10104b04:	d9801e04 	addi	r6,sp,120
10104b08:	b80b883a 	mov	r5,r23
10104b0c:	0109a300 	call	10109a30 <__sprint_r>
10104b10:	103ca81e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104b14:	d8c02017 	ldw	r3,128(sp)
10104b18:	da000404 	addi	r8,sp,16
10104b1c:	003e0b06 	br	1010434c <__alt_data_end+0xfffe434c>
10104b20:	d9002c17 	ldw	r4,176(sp)
10104b24:	d9801e04 	addi	r6,sp,120
10104b28:	b80b883a 	mov	r5,r23
10104b2c:	0109a300 	call	10109a30 <__sprint_r>
10104b30:	103ca01e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104b34:	d8c02017 	ldw	r3,128(sp)
10104b38:	da000404 	addi	r8,sp,16
10104b3c:	003dbd06 	br	10104234 <__alt_data_end+0xfffe4234>
10104b40:	d9002c17 	ldw	r4,176(sp)
10104b44:	d9801e04 	addi	r6,sp,120
10104b48:	b80b883a 	mov	r5,r23
10104b4c:	0109a300 	call	10109a30 <__sprint_r>
10104b50:	103c981e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104b54:	d8c02017 	ldw	r3,128(sp)
10104b58:	da000404 	addi	r8,sp,16
10104b5c:	003dc306 	br	1010426c <__alt_data_end+0xfffe426c>
10104b60:	d8802917 	ldw	r2,164(sp)
10104b64:	d8002785 	stb	zero,158(sp)
10104b68:	103f0616 	blt	r2,zero,10104784 <__alt_data_end+0xfffe4784>
10104b6c:	00ffdfc4 	movi	r3,-129
10104b70:	9d84b03a 	or	r2,r19,r22
10104b74:	90e4703a 	and	r18,r18,r3
10104b78:	103c6b26 	beq	r2,zero,10103d28 <__alt_data_end+0xfffe3d28>
10104b7c:	0039883a 	mov	fp,zero
10104b80:	003e7406 	br	10104554 <__alt_data_end+0xfffe4554>
10104b84:	9080040c 	andi	r2,r18,16
10104b88:	1001b326 	beq	r2,zero,10105258 <___vfprintf_internal_r+0x18ac>
10104b8c:	d9002d17 	ldw	r4,180(sp)
10104b90:	d9402917 	ldw	r5,164(sp)
10104b94:	d8002785 	stb	zero,158(sp)
10104b98:	20800104 	addi	r2,r4,4
10104b9c:	24c00017 	ldw	r19,0(r4)
10104ba0:	002d883a 	mov	r22,zero
10104ba4:	2801b516 	blt	r5,zero,1010527c <___vfprintf_internal_r+0x18d0>
10104ba8:	00ffdfc4 	movi	r3,-129
10104bac:	d8802d15 	stw	r2,180(sp)
10104bb0:	90e4703a 	and	r18,r18,r3
10104bb4:	983d2726 	beq	r19,zero,10104054 <__alt_data_end+0xfffe4054>
10104bb8:	0039883a 	mov	fp,zero
10104bbc:	003d2a06 	br	10104068 <__alt_data_end+0xfffe4068>
10104bc0:	dc402617 	ldw	r17,152(sp)
10104bc4:	0441d30e 	bge	zero,r17,10105314 <___vfprintf_internal_r+0x1968>
10104bc8:	dc403217 	ldw	r17,200(sp)
10104bcc:	d8803317 	ldw	r2,204(sp)
10104bd0:	1440010e 	bge	r2,r17,10104bd8 <___vfprintf_internal_r+0x122c>
10104bd4:	1023883a 	mov	r17,r2
10104bd8:	04400a0e 	bge	zero,r17,10104c04 <___vfprintf_internal_r+0x1258>
10104bdc:	d8801f17 	ldw	r2,124(sp)
10104be0:	1c47883a 	add	r3,r3,r17
10104be4:	44000015 	stw	r16,0(r8)
10104be8:	10800044 	addi	r2,r2,1
10104bec:	44400115 	stw	r17,4(r8)
10104bf0:	d8c02015 	stw	r3,128(sp)
10104bf4:	d8801f15 	stw	r2,124(sp)
10104bf8:	010001c4 	movi	r4,7
10104bfc:	20826516 	blt	r4,r2,10105594 <___vfprintf_internal_r+0x1be8>
10104c00:	42000204 	addi	r8,r8,8
10104c04:	88026116 	blt	r17,zero,1010558c <___vfprintf_internal_r+0x1be0>
10104c08:	d9003217 	ldw	r4,200(sp)
10104c0c:	2463c83a 	sub	r17,r4,r17
10104c10:	04407b0e 	bge	zero,r17,10104e00 <___vfprintf_internal_r+0x1454>
10104c14:	05800404 	movi	r22,16
10104c18:	d8801f17 	ldw	r2,124(sp)
10104c1c:	b4419d0e 	bge	r22,r17,10105294 <___vfprintf_internal_r+0x18e8>
10104c20:	01040474 	movhi	r4,4113
10104c24:	21041384 	addi	r4,r4,4174
10104c28:	d9002b15 	stw	r4,172(sp)
10104c2c:	070001c4 	movi	fp,7
10104c30:	dcc02c17 	ldw	r19,176(sp)
10104c34:	00000306 	br	10104c44 <___vfprintf_internal_r+0x1298>
10104c38:	42000204 	addi	r8,r8,8
10104c3c:	8c7ffc04 	addi	r17,r17,-16
10104c40:	b441970e 	bge	r22,r17,101052a0 <___vfprintf_internal_r+0x18f4>
10104c44:	18c00404 	addi	r3,r3,16
10104c48:	10800044 	addi	r2,r2,1
10104c4c:	45000015 	stw	r20,0(r8)
10104c50:	45800115 	stw	r22,4(r8)
10104c54:	d8c02015 	stw	r3,128(sp)
10104c58:	d8801f15 	stw	r2,124(sp)
10104c5c:	e0bff60e 	bge	fp,r2,10104c38 <__alt_data_end+0xfffe4c38>
10104c60:	d9801e04 	addi	r6,sp,120
10104c64:	b80b883a 	mov	r5,r23
10104c68:	9809883a 	mov	r4,r19
10104c6c:	0109a300 	call	10109a30 <__sprint_r>
10104c70:	103c501e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104c74:	d8c02017 	ldw	r3,128(sp)
10104c78:	d8801f17 	ldw	r2,124(sp)
10104c7c:	da000404 	addi	r8,sp,16
10104c80:	003fee06 	br	10104c3c <__alt_data_end+0xfffe4c3c>
10104c84:	d9002c17 	ldw	r4,176(sp)
10104c88:	d9801e04 	addi	r6,sp,120
10104c8c:	b80b883a 	mov	r5,r23
10104c90:	0109a300 	call	10109a30 <__sprint_r>
10104c94:	103c471e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104c98:	d8c02017 	ldw	r3,128(sp)
10104c9c:	df002787 	ldb	fp,158(sp)
10104ca0:	da000404 	addi	r8,sp,16
10104ca4:	003d5606 	br	10104200 <__alt_data_end+0xfffe4200>
10104ca8:	9080040c 	andi	r2,r18,16
10104cac:	10016126 	beq	r2,zero,10105234 <___vfprintf_internal_r+0x1888>
10104cb0:	d8802d17 	ldw	r2,180(sp)
10104cb4:	14c00017 	ldw	r19,0(r2)
10104cb8:	10800104 	addi	r2,r2,4
10104cbc:	d8802d15 	stw	r2,180(sp)
10104cc0:	982dd7fa 	srai	r22,r19,31
10104cc4:	b005883a 	mov	r2,r22
10104cc8:	003c8206 	br	10103ed4 <__alt_data_end+0xfffe3ed4>
10104ccc:	9080040c 	andi	r2,r18,16
10104cd0:	10003526 	beq	r2,zero,10104da8 <___vfprintf_internal_r+0x13fc>
10104cd4:	d9402d17 	ldw	r5,180(sp)
10104cd8:	d8c02917 	ldw	r3,164(sp)
10104cdc:	d8002785 	stb	zero,158(sp)
10104ce0:	28800104 	addi	r2,r5,4
10104ce4:	2cc00017 	ldw	r19,0(r5)
10104ce8:	002d883a 	mov	r22,zero
10104cec:	18003716 	blt	r3,zero,10104dcc <___vfprintf_internal_r+0x1420>
10104cf0:	00ffdfc4 	movi	r3,-129
10104cf4:	d8802d15 	stw	r2,180(sp)
10104cf8:	90e4703a 	and	r18,r18,r3
10104cfc:	0039883a 	mov	fp,zero
10104d00:	983df326 	beq	r19,zero,101044d0 <__alt_data_end+0xfffe44d0>
10104d04:	00800244 	movi	r2,9
10104d08:	14fc7b36 	bltu	r2,r19,10103ef8 <__alt_data_end+0xfffe3ef8>
10104d0c:	d8c02817 	ldw	r3,160(sp)
10104d10:	dc001dc4 	addi	r16,sp,119
10104d14:	9cc00c04 	addi	r19,r19,48
10104d18:	1c07c83a 	sub	r3,r3,r16
10104d1c:	dcc01dc5 	stb	r19,119(sp)
10104d20:	d8c02e15 	stw	r3,184(sp)
10104d24:	003ce806 	br	101040c8 <__alt_data_end+0xfffe40c8>
10104d28:	d8803317 	ldw	r2,204(sp)
10104d2c:	143fffc4 	addi	r16,r2,-1
10104d30:	043f4d0e 	bge	zero,r16,10104a68 <__alt_data_end+0xfffe4a68>
10104d34:	07000404 	movi	fp,16
10104d38:	e400810e 	bge	fp,r16,10104f40 <___vfprintf_internal_r+0x1594>
10104d3c:	01440474 	movhi	r5,4113
10104d40:	29441384 	addi	r5,r5,4174
10104d44:	d9402b15 	stw	r5,172(sp)
10104d48:	01c001c4 	movi	r7,7
10104d4c:	dcc02c17 	ldw	r19,176(sp)
10104d50:	00000306 	br	10104d60 <___vfprintf_internal_r+0x13b4>
10104d54:	b5800204 	addi	r22,r22,8
10104d58:	843ffc04 	addi	r16,r16,-16
10104d5c:	e4007b0e 	bge	fp,r16,10104f4c <___vfprintf_internal_r+0x15a0>
10104d60:	18c00404 	addi	r3,r3,16
10104d64:	8c400044 	addi	r17,r17,1
10104d68:	b5000015 	stw	r20,0(r22)
10104d6c:	b7000115 	stw	fp,4(r22)
10104d70:	d8c02015 	stw	r3,128(sp)
10104d74:	dc401f15 	stw	r17,124(sp)
10104d78:	3c7ff60e 	bge	r7,r17,10104d54 <__alt_data_end+0xfffe4d54>
10104d7c:	d9801e04 	addi	r6,sp,120
10104d80:	b80b883a 	mov	r5,r23
10104d84:	9809883a 	mov	r4,r19
10104d88:	d9c03c15 	stw	r7,240(sp)
10104d8c:	0109a300 	call	10109a30 <__sprint_r>
10104d90:	d9c03c17 	ldw	r7,240(sp)
10104d94:	103c071e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104d98:	d8c02017 	ldw	r3,128(sp)
10104d9c:	dc401f17 	ldw	r17,124(sp)
10104da0:	dd800404 	addi	r22,sp,16
10104da4:	003fec06 	br	10104d58 <__alt_data_end+0xfffe4d58>
10104da8:	9080100c 	andi	r2,r18,64
10104dac:	d8002785 	stb	zero,158(sp)
10104db0:	10010e26 	beq	r2,zero,101051ec <___vfprintf_internal_r+0x1840>
10104db4:	d9002d17 	ldw	r4,180(sp)
10104db8:	d9402917 	ldw	r5,164(sp)
10104dbc:	002d883a 	mov	r22,zero
10104dc0:	20800104 	addi	r2,r4,4
10104dc4:	24c0000b 	ldhu	r19,0(r4)
10104dc8:	283fc90e 	bge	r5,zero,10104cf0 <__alt_data_end+0xfffe4cf0>
10104dcc:	d8802d15 	stw	r2,180(sp)
10104dd0:	0039883a 	mov	fp,zero
10104dd4:	9d84b03a 	or	r2,r19,r22
10104dd8:	103c461e 	bne	r2,zero,10103ef4 <__alt_data_end+0xfffe3ef4>
10104ddc:	00800044 	movi	r2,1
10104de0:	003e6c06 	br	10104794 <__alt_data_end+0xfffe4794>
10104de4:	d9002c17 	ldw	r4,176(sp)
10104de8:	d9801e04 	addi	r6,sp,120
10104dec:	b80b883a 	mov	r5,r23
10104df0:	0109a300 	call	10109a30 <__sprint_r>
10104df4:	103bef1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104df8:	d8c02017 	ldw	r3,128(sp)
10104dfc:	da000404 	addi	r8,sp,16
10104e00:	d9003217 	ldw	r4,200(sp)
10104e04:	d8802617 	ldw	r2,152(sp)
10104e08:	d9403317 	ldw	r5,204(sp)
10104e0c:	8123883a 	add	r17,r16,r4
10104e10:	11400216 	blt	r2,r5,10104e1c <___vfprintf_internal_r+0x1470>
10104e14:	9100004c 	andi	r4,r18,1
10104e18:	20000d26 	beq	r4,zero,10104e50 <___vfprintf_internal_r+0x14a4>
10104e1c:	d9003717 	ldw	r4,220(sp)
10104e20:	d9403417 	ldw	r5,208(sp)
10104e24:	1907883a 	add	r3,r3,r4
10104e28:	d9001f17 	ldw	r4,124(sp)
10104e2c:	41400015 	stw	r5,0(r8)
10104e30:	d9403717 	ldw	r5,220(sp)
10104e34:	21000044 	addi	r4,r4,1
10104e38:	d8c02015 	stw	r3,128(sp)
10104e3c:	41400115 	stw	r5,4(r8)
10104e40:	d9001f15 	stw	r4,124(sp)
10104e44:	014001c4 	movi	r5,7
10104e48:	2901e816 	blt	r5,r4,101055ec <___vfprintf_internal_r+0x1c40>
10104e4c:	42000204 	addi	r8,r8,8
10104e50:	d9003317 	ldw	r4,204(sp)
10104e54:	8121883a 	add	r16,r16,r4
10104e58:	2085c83a 	sub	r2,r4,r2
10104e5c:	8461c83a 	sub	r16,r16,r17
10104e60:	1400010e 	bge	r2,r16,10104e68 <___vfprintf_internal_r+0x14bc>
10104e64:	1021883a 	mov	r16,r2
10104e68:	04000a0e 	bge	zero,r16,10104e94 <___vfprintf_internal_r+0x14e8>
10104e6c:	d9001f17 	ldw	r4,124(sp)
10104e70:	1c07883a 	add	r3,r3,r16
10104e74:	44400015 	stw	r17,0(r8)
10104e78:	21000044 	addi	r4,r4,1
10104e7c:	44000115 	stw	r16,4(r8)
10104e80:	d8c02015 	stw	r3,128(sp)
10104e84:	d9001f15 	stw	r4,124(sp)
10104e88:	014001c4 	movi	r5,7
10104e8c:	2901fb16 	blt	r5,r4,1010567c <___vfprintf_internal_r+0x1cd0>
10104e90:	42000204 	addi	r8,r8,8
10104e94:	8001f716 	blt	r16,zero,10105674 <___vfprintf_internal_r+0x1cc8>
10104e98:	1421c83a 	sub	r16,r2,r16
10104e9c:	043d380e 	bge	zero,r16,10104380 <__alt_data_end+0xfffe4380>
10104ea0:	04400404 	movi	r17,16
10104ea4:	d8801f17 	ldw	r2,124(sp)
10104ea8:	8c3efb0e 	bge	r17,r16,10104a98 <__alt_data_end+0xfffe4a98>
10104eac:	01440474 	movhi	r5,4113
10104eb0:	29441384 	addi	r5,r5,4174
10104eb4:	d9402b15 	stw	r5,172(sp)
10104eb8:	058001c4 	movi	r22,7
10104ebc:	dcc02c17 	ldw	r19,176(sp)
10104ec0:	00000306 	br	10104ed0 <___vfprintf_internal_r+0x1524>
10104ec4:	42000204 	addi	r8,r8,8
10104ec8:	843ffc04 	addi	r16,r16,-16
10104ecc:	8c3ef50e 	bge	r17,r16,10104aa4 <__alt_data_end+0xfffe4aa4>
10104ed0:	18c00404 	addi	r3,r3,16
10104ed4:	10800044 	addi	r2,r2,1
10104ed8:	45000015 	stw	r20,0(r8)
10104edc:	44400115 	stw	r17,4(r8)
10104ee0:	d8c02015 	stw	r3,128(sp)
10104ee4:	d8801f15 	stw	r2,124(sp)
10104ee8:	b0bff60e 	bge	r22,r2,10104ec4 <__alt_data_end+0xfffe4ec4>
10104eec:	d9801e04 	addi	r6,sp,120
10104ef0:	b80b883a 	mov	r5,r23
10104ef4:	9809883a 	mov	r4,r19
10104ef8:	0109a300 	call	10109a30 <__sprint_r>
10104efc:	103bad1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104f00:	d8c02017 	ldw	r3,128(sp)
10104f04:	d8801f17 	ldw	r2,124(sp)
10104f08:	da000404 	addi	r8,sp,16
10104f0c:	003fee06 	br	10104ec8 <__alt_data_end+0xfffe4ec8>
10104f10:	9088703a 	and	r4,r18,r2
10104f14:	203eab1e 	bne	r4,zero,101049c4 <__alt_data_end+0xfffe49c4>
10104f18:	dc401f17 	ldw	r17,124(sp)
10104f1c:	40800115 	stw	r2,4(r8)
10104f20:	44000015 	stw	r16,0(r8)
10104f24:	8c400044 	addi	r17,r17,1
10104f28:	d8c02015 	stw	r3,128(sp)
10104f2c:	dc401f15 	stw	r17,124(sp)
10104f30:	008001c4 	movi	r2,7
10104f34:	14400e16 	blt	r2,r17,10104f70 <___vfprintf_internal_r+0x15c4>
10104f38:	45800204 	addi	r22,r8,8
10104f3c:	003eca06 	br	10104a68 <__alt_data_end+0xfffe4a68>
10104f40:	01040474 	movhi	r4,4113
10104f44:	21041384 	addi	r4,r4,4174
10104f48:	d9002b15 	stw	r4,172(sp)
10104f4c:	d8802b17 	ldw	r2,172(sp)
10104f50:	1c07883a 	add	r3,r3,r16
10104f54:	8c400044 	addi	r17,r17,1
10104f58:	b0800015 	stw	r2,0(r22)
10104f5c:	b4000115 	stw	r16,4(r22)
10104f60:	d8c02015 	stw	r3,128(sp)
10104f64:	dc401f15 	stw	r17,124(sp)
10104f68:	008001c4 	movi	r2,7
10104f6c:	147ebd0e 	bge	r2,r17,10104a64 <__alt_data_end+0xfffe4a64>
10104f70:	d9002c17 	ldw	r4,176(sp)
10104f74:	d9801e04 	addi	r6,sp,120
10104f78:	b80b883a 	mov	r5,r23
10104f7c:	0109a300 	call	10109a30 <__sprint_r>
10104f80:	103b8c1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104f84:	d8c02017 	ldw	r3,128(sp)
10104f88:	dc401f17 	ldw	r17,124(sp)
10104f8c:	dd800404 	addi	r22,sp,16
10104f90:	003eb506 	br	10104a68 <__alt_data_end+0xfffe4a68>
10104f94:	d9002c17 	ldw	r4,176(sp)
10104f98:	d9801e04 	addi	r6,sp,120
10104f9c:	b80b883a 	mov	r5,r23
10104fa0:	0109a300 	call	10109a30 <__sprint_r>
10104fa4:	103b831e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104fa8:	d8c02017 	ldw	r3,128(sp)
10104fac:	dc401f17 	ldw	r17,124(sp)
10104fb0:	da000404 	addi	r8,sp,16
10104fb4:	003e8d06 	br	101049ec <__alt_data_end+0xfffe49ec>
10104fb8:	d9002c17 	ldw	r4,176(sp)
10104fbc:	d9801e04 	addi	r6,sp,120
10104fc0:	b80b883a 	mov	r5,r23
10104fc4:	0109a300 	call	10109a30 <__sprint_r>
10104fc8:	103b7a1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104fcc:	d8c02017 	ldw	r3,128(sp)
10104fd0:	dc401f17 	ldw	r17,124(sp)
10104fd4:	dd800404 	addi	r22,sp,16
10104fd8:	003e8f06 	br	10104a18 <__alt_data_end+0xfffe4a18>
10104fdc:	0027883a 	mov	r19,zero
10104fe0:	003f4a06 	br	10104d0c <__alt_data_end+0xfffe4d0c>
10104fe4:	d9002c17 	ldw	r4,176(sp)
10104fe8:	d9801e04 	addi	r6,sp,120
10104fec:	b80b883a 	mov	r5,r23
10104ff0:	0109a300 	call	10109a30 <__sprint_r>
10104ff4:	103b6f1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10104ff8:	d8c02017 	ldw	r3,128(sp)
10104ffc:	da000404 	addi	r8,sp,16
10105000:	003c9d06 	br	10104278 <__alt_data_end+0xfffe4278>
10105004:	04e7c83a 	sub	r19,zero,r19
10105008:	9804c03a 	cmpne	r2,r19,zero
1010500c:	05adc83a 	sub	r22,zero,r22
10105010:	b0adc83a 	sub	r22,r22,r2
10105014:	d8802917 	ldw	r2,164(sp)
10105018:	07000b44 	movi	fp,45
1010501c:	df002785 	stb	fp,158(sp)
10105020:	10017b16 	blt	r2,zero,10105610 <___vfprintf_internal_r+0x1c64>
10105024:	00bfdfc4 	movi	r2,-129
10105028:	90a4703a 	and	r18,r18,r2
1010502c:	003bb106 	br	10103ef4 <__alt_data_end+0xfffe3ef4>
10105030:	d9003617 	ldw	r4,216(sp)
10105034:	d9403817 	ldw	r5,224(sp)
10105038:	da003d15 	stw	r8,244(sp)
1010503c:	010974c0 	call	1010974c <__fpclassifyd>
10105040:	da003d17 	ldw	r8,244(sp)
10105044:	1000f026 	beq	r2,zero,10105408 <___vfprintf_internal_r+0x1a5c>
10105048:	d9002917 	ldw	r4,164(sp)
1010504c:	05bff7c4 	movi	r22,-33
10105050:	00bfffc4 	movi	r2,-1
10105054:	8dac703a 	and	r22,r17,r22
10105058:	20820026 	beq	r4,r2,1010585c <___vfprintf_internal_r+0x1eb0>
1010505c:	008011c4 	movi	r2,71
10105060:	b081f726 	beq	r22,r2,10105840 <___vfprintf_internal_r+0x1e94>
10105064:	d9003817 	ldw	r4,224(sp)
10105068:	90c04014 	ori	r3,r18,256
1010506c:	d8c02b15 	stw	r3,172(sp)
10105070:	20021516 	blt	r4,zero,101058c8 <___vfprintf_internal_r+0x1f1c>
10105074:	dcc03817 	ldw	r19,224(sp)
10105078:	d8002a05 	stb	zero,168(sp)
1010507c:	00801984 	movi	r2,102
10105080:	8881f926 	beq	r17,r2,10105868 <___vfprintf_internal_r+0x1ebc>
10105084:	00801184 	movi	r2,70
10105088:	88821c26 	beq	r17,r2,101058fc <___vfprintf_internal_r+0x1f50>
1010508c:	00801144 	movi	r2,69
10105090:	b081ef26 	beq	r22,r2,10105850 <___vfprintf_internal_r+0x1ea4>
10105094:	d8c02917 	ldw	r3,164(sp)
10105098:	d8802104 	addi	r2,sp,132
1010509c:	d8800315 	stw	r2,12(sp)
101050a0:	d9403617 	ldw	r5,216(sp)
101050a4:	d8802504 	addi	r2,sp,148
101050a8:	d9002c17 	ldw	r4,176(sp)
101050ac:	d8800215 	stw	r2,8(sp)
101050b0:	d8802604 	addi	r2,sp,152
101050b4:	d8c00015 	stw	r3,0(sp)
101050b8:	d8800115 	stw	r2,4(sp)
101050bc:	01c00084 	movi	r7,2
101050c0:	980d883a 	mov	r6,r19
101050c4:	d8c03c15 	stw	r3,240(sp)
101050c8:	da003d15 	stw	r8,244(sp)
101050cc:	01060840 	call	10106084 <_dtoa_r>
101050d0:	1021883a 	mov	r16,r2
101050d4:	008019c4 	movi	r2,103
101050d8:	d8c03c17 	ldw	r3,240(sp)
101050dc:	da003d17 	ldw	r8,244(sp)
101050e0:	88817126 	beq	r17,r2,101056a8 <___vfprintf_internal_r+0x1cfc>
101050e4:	008011c4 	movi	r2,71
101050e8:	88829226 	beq	r17,r2,10105b34 <___vfprintf_internal_r+0x2188>
101050ec:	80f9883a 	add	fp,r16,r3
101050f0:	d9003617 	ldw	r4,216(sp)
101050f4:	000d883a 	mov	r6,zero
101050f8:	000f883a 	mov	r7,zero
101050fc:	980b883a 	mov	r5,r19
10105100:	da003d15 	stw	r8,244(sp)
10105104:	010d1cc0 	call	1010d1cc <__eqdf2>
10105108:	da003d17 	ldw	r8,244(sp)
1010510c:	10018d26 	beq	r2,zero,10105744 <___vfprintf_internal_r+0x1d98>
10105110:	d8802117 	ldw	r2,132(sp)
10105114:	1700062e 	bgeu	r2,fp,10105130 <___vfprintf_internal_r+0x1784>
10105118:	01000c04 	movi	r4,48
1010511c:	10c00044 	addi	r3,r2,1
10105120:	d8c02115 	stw	r3,132(sp)
10105124:	11000005 	stb	r4,0(r2)
10105128:	d8802117 	ldw	r2,132(sp)
1010512c:	173ffb36 	bltu	r2,fp,1010511c <__alt_data_end+0xfffe511c>
10105130:	1405c83a 	sub	r2,r2,r16
10105134:	d8803315 	stw	r2,204(sp)
10105138:	008011c4 	movi	r2,71
1010513c:	b0817626 	beq	r22,r2,10105718 <___vfprintf_internal_r+0x1d6c>
10105140:	00801944 	movi	r2,101
10105144:	1442810e 	bge	r2,r17,10105b4c <___vfprintf_internal_r+0x21a0>
10105148:	d8c02617 	ldw	r3,152(sp)
1010514c:	00801984 	movi	r2,102
10105150:	d8c03215 	stw	r3,200(sp)
10105154:	8881fe26 	beq	r17,r2,10105950 <___vfprintf_internal_r+0x1fa4>
10105158:	d8c03217 	ldw	r3,200(sp)
1010515c:	d9003317 	ldw	r4,204(sp)
10105160:	1901dd16 	blt	r3,r4,101058d8 <___vfprintf_internal_r+0x1f2c>
10105164:	9480004c 	andi	r18,r18,1
10105168:	90022b1e 	bne	r18,zero,10105a18 <___vfprintf_internal_r+0x206c>
1010516c:	1805883a 	mov	r2,r3
10105170:	18028016 	blt	r3,zero,10105b74 <___vfprintf_internal_r+0x21c8>
10105174:	d8c03217 	ldw	r3,200(sp)
10105178:	044019c4 	movi	r17,103
1010517c:	d8c02e15 	stw	r3,184(sp)
10105180:	df002a07 	ldb	fp,168(sp)
10105184:	e001531e 	bne	fp,zero,101056d4 <___vfprintf_internal_r+0x1d28>
10105188:	df002783 	ldbu	fp,158(sp)
1010518c:	d8802a15 	stw	r2,168(sp)
10105190:	dc802b17 	ldw	r18,172(sp)
10105194:	d8002915 	stw	zero,164(sp)
10105198:	003bd106 	br	101040e0 <__alt_data_end+0xfffe40e0>
1010519c:	d8802d17 	ldw	r2,180(sp)
101051a0:	d8c02d17 	ldw	r3,180(sp)
101051a4:	d9002d17 	ldw	r4,180(sp)
101051a8:	10800017 	ldw	r2,0(r2)
101051ac:	18c00117 	ldw	r3,4(r3)
101051b0:	21000204 	addi	r4,r4,8
101051b4:	d8803615 	stw	r2,216(sp)
101051b8:	d8c03815 	stw	r3,224(sp)
101051bc:	d9002d15 	stw	r4,180(sp)
101051c0:	003b7506 	br	10103f98 <__alt_data_end+0xfffe3f98>
101051c4:	ac400007 	ldb	r17,0(r21)
101051c8:	003a5906 	br	10103b30 <__alt_data_end+0xfffe3b30>
101051cc:	9080100c 	andi	r2,r18,64
101051d0:	1000a826 	beq	r2,zero,10105474 <___vfprintf_internal_r+0x1ac8>
101051d4:	d9002d17 	ldw	r4,180(sp)
101051d8:	002d883a 	mov	r22,zero
101051dc:	24c0000b 	ldhu	r19,0(r4)
101051e0:	21000104 	addi	r4,r4,4
101051e4:	d9002d15 	stw	r4,180(sp)
101051e8:	003ccb06 	br	10104518 <__alt_data_end+0xfffe4518>
101051ec:	d8c02d17 	ldw	r3,180(sp)
101051f0:	d9002917 	ldw	r4,164(sp)
101051f4:	002d883a 	mov	r22,zero
101051f8:	18800104 	addi	r2,r3,4
101051fc:	1cc00017 	ldw	r19,0(r3)
10105200:	203ebb0e 	bge	r4,zero,10104cf0 <__alt_data_end+0xfffe4cf0>
10105204:	003ef106 	br	10104dcc <__alt_data_end+0xfffe4dcc>
10105208:	9080040c 	andi	r2,r18,16
1010520c:	1000921e 	bne	r2,zero,10105458 <___vfprintf_internal_r+0x1aac>
10105210:	9480100c 	andi	r18,r18,64
10105214:	90013926 	beq	r18,zero,101056fc <___vfprintf_internal_r+0x1d50>
10105218:	d9002d17 	ldw	r4,180(sp)
1010521c:	d9402f17 	ldw	r5,188(sp)
10105220:	20800017 	ldw	r2,0(r4)
10105224:	21000104 	addi	r4,r4,4
10105228:	d9002d15 	stw	r4,180(sp)
1010522c:	1140000d 	sth	r5,0(r2)
10105230:	003a1606 	br	10103a8c <__alt_data_end+0xfffe3a8c>
10105234:	9080100c 	andi	r2,r18,64
10105238:	10008026 	beq	r2,zero,1010543c <___vfprintf_internal_r+0x1a90>
1010523c:	d8c02d17 	ldw	r3,180(sp)
10105240:	1cc0000f 	ldh	r19,0(r3)
10105244:	18c00104 	addi	r3,r3,4
10105248:	d8c02d15 	stw	r3,180(sp)
1010524c:	982dd7fa 	srai	r22,r19,31
10105250:	b005883a 	mov	r2,r22
10105254:	003b1f06 	br	10103ed4 <__alt_data_end+0xfffe3ed4>
10105258:	9080100c 	andi	r2,r18,64
1010525c:	d8002785 	stb	zero,158(sp)
10105260:	10008a1e 	bne	r2,zero,1010548c <___vfprintf_internal_r+0x1ae0>
10105264:	d9402d17 	ldw	r5,180(sp)
10105268:	d8c02917 	ldw	r3,164(sp)
1010526c:	002d883a 	mov	r22,zero
10105270:	28800104 	addi	r2,r5,4
10105274:	2cc00017 	ldw	r19,0(r5)
10105278:	183e4b0e 	bge	r3,zero,10104ba8 <__alt_data_end+0xfffe4ba8>
1010527c:	9d86b03a 	or	r3,r19,r22
10105280:	d8802d15 	stw	r2,180(sp)
10105284:	183e4c1e 	bne	r3,zero,10104bb8 <__alt_data_end+0xfffe4bb8>
10105288:	0039883a 	mov	fp,zero
1010528c:	0005883a 	mov	r2,zero
10105290:	003d4006 	br	10104794 <__alt_data_end+0xfffe4794>
10105294:	01440474 	movhi	r5,4113
10105298:	29441384 	addi	r5,r5,4174
1010529c:	d9402b15 	stw	r5,172(sp)
101052a0:	d9402b17 	ldw	r5,172(sp)
101052a4:	1c47883a 	add	r3,r3,r17
101052a8:	10800044 	addi	r2,r2,1
101052ac:	41400015 	stw	r5,0(r8)
101052b0:	44400115 	stw	r17,4(r8)
101052b4:	d8c02015 	stw	r3,128(sp)
101052b8:	d8801f15 	stw	r2,124(sp)
101052bc:	010001c4 	movi	r4,7
101052c0:	20bec816 	blt	r4,r2,10104de4 <__alt_data_end+0xfffe4de4>
101052c4:	42000204 	addi	r8,r8,8
101052c8:	003ecd06 	br	10104e00 <__alt_data_end+0xfffe4e00>
101052cc:	d9002917 	ldw	r4,164(sp)
101052d0:	d8002785 	stb	zero,158(sp)
101052d4:	203d2d16 	blt	r4,zero,1010478c <__alt_data_end+0xfffe478c>
101052d8:	00bfdfc4 	movi	r2,-129
101052dc:	90a4703a 	and	r18,r18,r2
101052e0:	003a9106 	br	10103d28 <__alt_data_end+0xfffe3d28>
101052e4:	01040474 	movhi	r4,4113
101052e8:	21041384 	addi	r4,r4,4174
101052ec:	d9002b15 	stw	r4,172(sp)
101052f0:	003c0c06 	br	10104324 <__alt_data_end+0xfffe4324>
101052f4:	d9002c17 	ldw	r4,176(sp)
101052f8:	d9801e04 	addi	r6,sp,120
101052fc:	b80b883a 	mov	r5,r23
10105300:	0109a300 	call	10109a30 <__sprint_r>
10105304:	103aab1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105308:	d8c02017 	ldw	r3,128(sp)
1010530c:	da000404 	addi	r8,sp,16
10105310:	003d4106 	br	10104818 <__alt_data_end+0xfffe4818>
10105314:	d8801f17 	ldw	r2,124(sp)
10105318:	01440474 	movhi	r5,4113
1010531c:	01000044 	movi	r4,1
10105320:	18c00044 	addi	r3,r3,1
10105324:	10800044 	addi	r2,r2,1
10105328:	29441304 	addi	r5,r5,4172
1010532c:	41000115 	stw	r4,4(r8)
10105330:	41400015 	stw	r5,0(r8)
10105334:	d8c02015 	stw	r3,128(sp)
10105338:	d8801f15 	stw	r2,124(sp)
1010533c:	010001c4 	movi	r4,7
10105340:	20805c16 	blt	r4,r2,101054b4 <___vfprintf_internal_r+0x1b08>
10105344:	42000204 	addi	r8,r8,8
10105348:	8800041e 	bne	r17,zero,1010535c <___vfprintf_internal_r+0x19b0>
1010534c:	d8803317 	ldw	r2,204(sp)
10105350:	1000021e 	bne	r2,zero,1010535c <___vfprintf_internal_r+0x19b0>
10105354:	9080004c 	andi	r2,r18,1
10105358:	103c0926 	beq	r2,zero,10104380 <__alt_data_end+0xfffe4380>
1010535c:	d9003717 	ldw	r4,220(sp)
10105360:	d8801f17 	ldw	r2,124(sp)
10105364:	d9403417 	ldw	r5,208(sp)
10105368:	20c7883a 	add	r3,r4,r3
1010536c:	10800044 	addi	r2,r2,1
10105370:	41000115 	stw	r4,4(r8)
10105374:	41400015 	stw	r5,0(r8)
10105378:	d8c02015 	stw	r3,128(sp)
1010537c:	d8801f15 	stw	r2,124(sp)
10105380:	010001c4 	movi	r4,7
10105384:	20812116 	blt	r4,r2,1010580c <___vfprintf_internal_r+0x1e60>
10105388:	42000204 	addi	r8,r8,8
1010538c:	0463c83a 	sub	r17,zero,r17
10105390:	0440730e 	bge	zero,r17,10105560 <___vfprintf_internal_r+0x1bb4>
10105394:	05800404 	movi	r22,16
10105398:	b440860e 	bge	r22,r17,101055b4 <___vfprintf_internal_r+0x1c08>
1010539c:	01440474 	movhi	r5,4113
101053a0:	29441384 	addi	r5,r5,4174
101053a4:	d9402b15 	stw	r5,172(sp)
101053a8:	070001c4 	movi	fp,7
101053ac:	dcc02c17 	ldw	r19,176(sp)
101053b0:	00000306 	br	101053c0 <___vfprintf_internal_r+0x1a14>
101053b4:	42000204 	addi	r8,r8,8
101053b8:	8c7ffc04 	addi	r17,r17,-16
101053bc:	b440800e 	bge	r22,r17,101055c0 <___vfprintf_internal_r+0x1c14>
101053c0:	18c00404 	addi	r3,r3,16
101053c4:	10800044 	addi	r2,r2,1
101053c8:	45000015 	stw	r20,0(r8)
101053cc:	45800115 	stw	r22,4(r8)
101053d0:	d8c02015 	stw	r3,128(sp)
101053d4:	d8801f15 	stw	r2,124(sp)
101053d8:	e0bff60e 	bge	fp,r2,101053b4 <__alt_data_end+0xfffe53b4>
101053dc:	d9801e04 	addi	r6,sp,120
101053e0:	b80b883a 	mov	r5,r23
101053e4:	9809883a 	mov	r4,r19
101053e8:	0109a300 	call	10109a30 <__sprint_r>
101053ec:	103a711e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101053f0:	d8c02017 	ldw	r3,128(sp)
101053f4:	d8801f17 	ldw	r2,124(sp)
101053f8:	da000404 	addi	r8,sp,16
101053fc:	003fee06 	br	101053b8 <__alt_data_end+0xfffe53b8>
10105400:	00bfffc4 	movi	r2,-1
10105404:	003a6f06 	br	10103dc4 <__alt_data_end+0xfffe3dc4>
10105408:	008011c4 	movi	r2,71
1010540c:	1440b816 	blt	r2,r17,101056f0 <___vfprintf_internal_r+0x1d44>
10105410:	04040474 	movhi	r16,4113
10105414:	84040504 	addi	r16,r16,4116
10105418:	00c000c4 	movi	r3,3
1010541c:	00bfdfc4 	movi	r2,-129
10105420:	d8c02a15 	stw	r3,168(sp)
10105424:	90a4703a 	and	r18,r18,r2
10105428:	df002783 	ldbu	fp,158(sp)
1010542c:	d8c02e15 	stw	r3,184(sp)
10105430:	d8002915 	stw	zero,164(sp)
10105434:	d8003215 	stw	zero,200(sp)
10105438:	003b2906 	br	101040e0 <__alt_data_end+0xfffe40e0>
1010543c:	d9002d17 	ldw	r4,180(sp)
10105440:	24c00017 	ldw	r19,0(r4)
10105444:	21000104 	addi	r4,r4,4
10105448:	d9002d15 	stw	r4,180(sp)
1010544c:	982dd7fa 	srai	r22,r19,31
10105450:	b005883a 	mov	r2,r22
10105454:	003a9f06 	br	10103ed4 <__alt_data_end+0xfffe3ed4>
10105458:	d9402d17 	ldw	r5,180(sp)
1010545c:	d8c02f17 	ldw	r3,188(sp)
10105460:	28800017 	ldw	r2,0(r5)
10105464:	29400104 	addi	r5,r5,4
10105468:	d9402d15 	stw	r5,180(sp)
1010546c:	10c00015 	stw	r3,0(r2)
10105470:	00398606 	br	10103a8c <__alt_data_end+0xfffe3a8c>
10105474:	d9402d17 	ldw	r5,180(sp)
10105478:	002d883a 	mov	r22,zero
1010547c:	2cc00017 	ldw	r19,0(r5)
10105480:	29400104 	addi	r5,r5,4
10105484:	d9402d15 	stw	r5,180(sp)
10105488:	003c2306 	br	10104518 <__alt_data_end+0xfffe4518>
1010548c:	d8c02d17 	ldw	r3,180(sp)
10105490:	d9002917 	ldw	r4,164(sp)
10105494:	002d883a 	mov	r22,zero
10105498:	18800104 	addi	r2,r3,4
1010549c:	1cc0000b 	ldhu	r19,0(r3)
101054a0:	203dc10e 	bge	r4,zero,10104ba8 <__alt_data_end+0xfffe4ba8>
101054a4:	003f7506 	br	1010527c <__alt_data_end+0xfffe527c>
101054a8:	04040474 	movhi	r16,4113
101054ac:	84040304 	addi	r16,r16,4108
101054b0:	003acc06 	br	10103fe4 <__alt_data_end+0xfffe3fe4>
101054b4:	d9002c17 	ldw	r4,176(sp)
101054b8:	d9801e04 	addi	r6,sp,120
101054bc:	b80b883a 	mov	r5,r23
101054c0:	0109a300 	call	10109a30 <__sprint_r>
101054c4:	103a3b1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101054c8:	dc402617 	ldw	r17,152(sp)
101054cc:	d8c02017 	ldw	r3,128(sp)
101054d0:	da000404 	addi	r8,sp,16
101054d4:	003f9c06 	br	10105348 <__alt_data_end+0xfffe5348>
101054d8:	ac400043 	ldbu	r17,1(r21)
101054dc:	94800814 	ori	r18,r18,32
101054e0:	ad400044 	addi	r21,r21,1
101054e4:	8c403fcc 	andi	r17,r17,255
101054e8:	8c40201c 	xori	r17,r17,128
101054ec:	8c7fe004 	addi	r17,r17,-128
101054f0:	00398f06 	br	10103b30 <__alt_data_end+0xfffe3b30>
101054f4:	d8c02d15 	stw	r3,180(sp)
101054f8:	0039883a 	mov	fp,zero
101054fc:	003e3506 	br	10104dd4 <__alt_data_end+0xfffe4dd4>
10105500:	d9002c17 	ldw	r4,176(sp)
10105504:	d9801e04 	addi	r6,sp,120
10105508:	b80b883a 	mov	r5,r23
1010550c:	0109a300 	call	10109a30 <__sprint_r>
10105510:	103a281e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105514:	d8c02017 	ldw	r3,128(sp)
10105518:	da000404 	addi	r8,sp,16
1010551c:	003cd006 	br	10104860 <__alt_data_end+0xfffe4860>
10105520:	8009883a 	mov	r4,r16
10105524:	da003d15 	stw	r8,244(sp)
10105528:	010989c0 	call	1010989c <strlen>
1010552c:	d8802e15 	stw	r2,184(sp)
10105530:	da003d17 	ldw	r8,244(sp)
10105534:	103c340e 	bge	r2,zero,10104608 <__alt_data_end+0xfffe4608>
10105538:	0005883a 	mov	r2,zero
1010553c:	003c3206 	br	10104608 <__alt_data_end+0xfffe4608>
10105540:	d9002c17 	ldw	r4,176(sp)
10105544:	d9801e04 	addi	r6,sp,120
10105548:	b80b883a 	mov	r5,r23
1010554c:	0109a300 	call	10109a30 <__sprint_r>
10105550:	103a181e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105554:	d8c02017 	ldw	r3,128(sp)
10105558:	d8801f17 	ldw	r2,124(sp)
1010555c:	da000404 	addi	r8,sp,16
10105560:	d9403317 	ldw	r5,204(sp)
10105564:	10800044 	addi	r2,r2,1
10105568:	44000015 	stw	r16,0(r8)
1010556c:	28c7883a 	add	r3,r5,r3
10105570:	003b7d06 	br	10104368 <__alt_data_end+0xfffe4368>
10105574:	01040474 	movhi	r4,4113
10105578:	21041784 	addi	r4,r4,4190
1010557c:	d9003515 	stw	r4,212(sp)
10105580:	003b1406 	br	101041d4 <__alt_data_end+0xfffe41d4>
10105584:	013fffc4 	movi	r4,-1
10105588:	003a3506 	br	10103e60 <__alt_data_end+0xfffe3e60>
1010558c:	0023883a 	mov	r17,zero
10105590:	003d9d06 	br	10104c08 <__alt_data_end+0xfffe4c08>
10105594:	d9002c17 	ldw	r4,176(sp)
10105598:	d9801e04 	addi	r6,sp,120
1010559c:	b80b883a 	mov	r5,r23
101055a0:	0109a300 	call	10109a30 <__sprint_r>
101055a4:	103a031e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
101055a8:	d8c02017 	ldw	r3,128(sp)
101055ac:	da000404 	addi	r8,sp,16
101055b0:	003d9406 	br	10104c04 <__alt_data_end+0xfffe4c04>
101055b4:	01040474 	movhi	r4,4113
101055b8:	21041384 	addi	r4,r4,4174
101055bc:	d9002b15 	stw	r4,172(sp)
101055c0:	d9002b17 	ldw	r4,172(sp)
101055c4:	1c47883a 	add	r3,r3,r17
101055c8:	10800044 	addi	r2,r2,1
101055cc:	41000015 	stw	r4,0(r8)
101055d0:	44400115 	stw	r17,4(r8)
101055d4:	d8c02015 	stw	r3,128(sp)
101055d8:	d8801f15 	stw	r2,124(sp)
101055dc:	010001c4 	movi	r4,7
101055e0:	20bfd716 	blt	r4,r2,10105540 <__alt_data_end+0xfffe5540>
101055e4:	42000204 	addi	r8,r8,8
101055e8:	003fdd06 	br	10105560 <__alt_data_end+0xfffe5560>
101055ec:	d9002c17 	ldw	r4,176(sp)
101055f0:	d9801e04 	addi	r6,sp,120
101055f4:	b80b883a 	mov	r5,r23
101055f8:	0109a300 	call	10109a30 <__sprint_r>
101055fc:	1039ed1e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105600:	d8802617 	ldw	r2,152(sp)
10105604:	d8c02017 	ldw	r3,128(sp)
10105608:	da000404 	addi	r8,sp,16
1010560c:	003e1006 	br	10104e50 <__alt_data_end+0xfffe4e50>
10105610:	00800044 	movi	r2,1
10105614:	10803fcc 	andi	r2,r2,255
10105618:	00c00044 	movi	r3,1
1010561c:	10fa3526 	beq	r2,r3,10103ef4 <__alt_data_end+0xfffe3ef4>
10105620:	00c00084 	movi	r3,2
10105624:	10fbcb26 	beq	r2,r3,10104554 <__alt_data_end+0xfffe4554>
10105628:	003a8f06 	br	10104068 <__alt_data_end+0xfffe4068>
1010562c:	01040474 	movhi	r4,4113
10105630:	21041784 	addi	r4,r4,4190
10105634:	d9003515 	stw	r4,212(sp)
10105638:	003b7606 	br	10104414 <__alt_data_end+0xfffe4414>
1010563c:	d8802917 	ldw	r2,164(sp)
10105640:	00c00184 	movi	r3,6
10105644:	1880012e 	bgeu	r3,r2,1010564c <___vfprintf_internal_r+0x1ca0>
10105648:	1805883a 	mov	r2,r3
1010564c:	d8802e15 	stw	r2,184(sp)
10105650:	1000ef16 	blt	r2,zero,10105a10 <___vfprintf_internal_r+0x2064>
10105654:	04040474 	movhi	r16,4113
10105658:	d8802a15 	stw	r2,168(sp)
1010565c:	dcc02d15 	stw	r19,180(sp)
10105660:	d8002915 	stw	zero,164(sp)
10105664:	d8003215 	stw	zero,200(sp)
10105668:	84041104 	addi	r16,r16,4164
1010566c:	0039883a 	mov	fp,zero
10105670:	003aa206 	br	101040fc <__alt_data_end+0xfffe40fc>
10105674:	0021883a 	mov	r16,zero
10105678:	003e0706 	br	10104e98 <__alt_data_end+0xfffe4e98>
1010567c:	d9002c17 	ldw	r4,176(sp)
10105680:	d9801e04 	addi	r6,sp,120
10105684:	b80b883a 	mov	r5,r23
10105688:	0109a300 	call	10109a30 <__sprint_r>
1010568c:	1039c91e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105690:	d8802617 	ldw	r2,152(sp)
10105694:	d9403317 	ldw	r5,204(sp)
10105698:	d8c02017 	ldw	r3,128(sp)
1010569c:	da000404 	addi	r8,sp,16
101056a0:	2885c83a 	sub	r2,r5,r2
101056a4:	003dfb06 	br	10104e94 <__alt_data_end+0xfffe4e94>
101056a8:	9080004c 	andi	r2,r18,1
101056ac:	103e8f1e 	bne	r2,zero,101050ec <__alt_data_end+0xfffe50ec>
101056b0:	d8802117 	ldw	r2,132(sp)
101056b4:	003e9e06 	br	10105130 <__alt_data_end+0xfffe5130>
101056b8:	1025883a 	mov	r18,r2
101056bc:	0039883a 	mov	fp,zero
101056c0:	00800084 	movi	r2,2
101056c4:	003fd306 	br	10105614 <__alt_data_end+0xfffe5614>
101056c8:	07000b44 	movi	fp,45
101056cc:	df002785 	stb	fp,158(sp)
101056d0:	003a4006 	br	10103fd4 <__alt_data_end+0xfffe3fd4>
101056d4:	00c00b44 	movi	r3,45
101056d8:	d8c02785 	stb	r3,158(sp)
101056dc:	d8802a15 	stw	r2,168(sp)
101056e0:	dc802b17 	ldw	r18,172(sp)
101056e4:	d8002915 	stw	zero,164(sp)
101056e8:	07000b44 	movi	fp,45
101056ec:	003a8006 	br	101040f0 <__alt_data_end+0xfffe40f0>
101056f0:	04040474 	movhi	r16,4113
101056f4:	84040604 	addi	r16,r16,4120
101056f8:	003f4706 	br	10105418 <__alt_data_end+0xfffe5418>
101056fc:	d8c02d17 	ldw	r3,180(sp)
10105700:	d9002f17 	ldw	r4,188(sp)
10105704:	18800017 	ldw	r2,0(r3)
10105708:	18c00104 	addi	r3,r3,4
1010570c:	d8c02d15 	stw	r3,180(sp)
10105710:	11000015 	stw	r4,0(r2)
10105714:	0038dd06 	br	10103a8c <__alt_data_end+0xfffe3a8c>
10105718:	dd802617 	ldw	r22,152(sp)
1010571c:	00bfff44 	movi	r2,-3
10105720:	b0801c16 	blt	r22,r2,10105794 <___vfprintf_internal_r+0x1de8>
10105724:	d9402917 	ldw	r5,164(sp)
10105728:	2d801a16 	blt	r5,r22,10105794 <___vfprintf_internal_r+0x1de8>
1010572c:	dd803215 	stw	r22,200(sp)
10105730:	003e8906 	br	10105158 <__alt_data_end+0xfffe5158>
10105734:	01040474 	movhi	r4,4113
10105738:	21041384 	addi	r4,r4,4174
1010573c:	d9002b15 	stw	r4,172(sp)
10105740:	003c9106 	br	10104988 <__alt_data_end+0xfffe4988>
10105744:	e005883a 	mov	r2,fp
10105748:	003e7906 	br	10105130 <__alt_data_end+0xfffe5130>
1010574c:	d9402917 	ldw	r5,164(sp)
10105750:	df002783 	ldbu	fp,158(sp)
10105754:	dcc02d15 	stw	r19,180(sp)
10105758:	d9402a15 	stw	r5,168(sp)
1010575c:	d9402e15 	stw	r5,184(sp)
10105760:	d8002915 	stw	zero,164(sp)
10105764:	d8003215 	stw	zero,200(sp)
10105768:	003a5d06 	br	101040e0 <__alt_data_end+0xfffe40e0>
1010576c:	9080004c 	andi	r2,r18,1
10105770:	0039883a 	mov	fp,zero
10105774:	10000426 	beq	r2,zero,10105788 <___vfprintf_internal_r+0x1ddc>
10105778:	00800c04 	movi	r2,48
1010577c:	dc001dc4 	addi	r16,sp,119
10105780:	d8801dc5 	stb	r2,119(sp)
10105784:	003b8006 	br	10104588 <__alt_data_end+0xfffe4588>
10105788:	d8002e15 	stw	zero,184(sp)
1010578c:	dc001e04 	addi	r16,sp,120
10105790:	003a4d06 	br	101040c8 <__alt_data_end+0xfffe40c8>
10105794:	8c7fff84 	addi	r17,r17,-2
10105798:	b5bfffc4 	addi	r22,r22,-1
1010579c:	dd802615 	stw	r22,152(sp)
101057a0:	dc4022c5 	stb	r17,139(sp)
101057a4:	b000bf16 	blt	r22,zero,10105aa4 <___vfprintf_internal_r+0x20f8>
101057a8:	00800ac4 	movi	r2,43
101057ac:	d8802305 	stb	r2,140(sp)
101057b0:	00800244 	movi	r2,9
101057b4:	15807016 	blt	r2,r22,10105978 <___vfprintf_internal_r+0x1fcc>
101057b8:	00800c04 	movi	r2,48
101057bc:	b5800c04 	addi	r22,r22,48
101057c0:	d8802345 	stb	r2,141(sp)
101057c4:	dd802385 	stb	r22,142(sp)
101057c8:	d88023c4 	addi	r2,sp,143
101057cc:	df0022c4 	addi	fp,sp,139
101057d0:	d8c03317 	ldw	r3,204(sp)
101057d4:	1739c83a 	sub	fp,r2,fp
101057d8:	d9003317 	ldw	r4,204(sp)
101057dc:	e0c7883a 	add	r3,fp,r3
101057e0:	df003a15 	stw	fp,232(sp)
101057e4:	d8c02e15 	stw	r3,184(sp)
101057e8:	00800044 	movi	r2,1
101057ec:	1100b30e 	bge	r2,r4,10105abc <___vfprintf_internal_r+0x2110>
101057f0:	d8c02e17 	ldw	r3,184(sp)
101057f4:	18c00044 	addi	r3,r3,1
101057f8:	d8c02e15 	stw	r3,184(sp)
101057fc:	1805883a 	mov	r2,r3
10105800:	1800ac16 	blt	r3,zero,10105ab4 <___vfprintf_internal_r+0x2108>
10105804:	d8003215 	stw	zero,200(sp)
10105808:	003e5d06 	br	10105180 <__alt_data_end+0xfffe5180>
1010580c:	d9002c17 	ldw	r4,176(sp)
10105810:	d9801e04 	addi	r6,sp,120
10105814:	b80b883a 	mov	r5,r23
10105818:	0109a300 	call	10109a30 <__sprint_r>
1010581c:	1039651e 	bne	r2,zero,10103db4 <__alt_data_end+0xfffe3db4>
10105820:	dc402617 	ldw	r17,152(sp)
10105824:	d8c02017 	ldw	r3,128(sp)
10105828:	d8801f17 	ldw	r2,124(sp)
1010582c:	da000404 	addi	r8,sp,16
10105830:	003ed606 	br	1010538c <__alt_data_end+0xfffe538c>
10105834:	582b883a 	mov	r21,r11
10105838:	d8002915 	stw	zero,164(sp)
1010583c:	0038bd06 	br	10103b34 <__alt_data_end+0xfffe3b34>
10105840:	d8802917 	ldw	r2,164(sp)
10105844:	103e071e 	bne	r2,zero,10105064 <__alt_data_end+0xfffe5064>
10105848:	dc002915 	stw	r16,164(sp)
1010584c:	003e0506 	br	10105064 <__alt_data_end+0xfffe5064>
10105850:	d9002917 	ldw	r4,164(sp)
10105854:	20c00044 	addi	r3,r4,1
10105858:	003e0f06 	br	10105098 <__alt_data_end+0xfffe5098>
1010585c:	01400184 	movi	r5,6
10105860:	d9402915 	stw	r5,164(sp)
10105864:	003dff06 	br	10105064 <__alt_data_end+0xfffe5064>
10105868:	d8802104 	addi	r2,sp,132
1010586c:	d8800315 	stw	r2,12(sp)
10105870:	d8802504 	addi	r2,sp,148
10105874:	d8800215 	stw	r2,8(sp)
10105878:	d8802604 	addi	r2,sp,152
1010587c:	d8800115 	stw	r2,4(sp)
10105880:	d8802917 	ldw	r2,164(sp)
10105884:	d9403617 	ldw	r5,216(sp)
10105888:	d9002c17 	ldw	r4,176(sp)
1010588c:	d8800015 	stw	r2,0(sp)
10105890:	01c000c4 	movi	r7,3
10105894:	980d883a 	mov	r6,r19
10105898:	da003d15 	stw	r8,244(sp)
1010589c:	01060840 	call	10106084 <_dtoa_r>
101058a0:	d8c02917 	ldw	r3,164(sp)
101058a4:	da003d17 	ldw	r8,244(sp)
101058a8:	1021883a 	mov	r16,r2
101058ac:	10f9883a 	add	fp,r2,r3
101058b0:	81000007 	ldb	r4,0(r16)
101058b4:	00800c04 	movi	r2,48
101058b8:	20805e26 	beq	r4,r2,10105a34 <___vfprintf_internal_r+0x2088>
101058bc:	d8c02617 	ldw	r3,152(sp)
101058c0:	e0f9883a 	add	fp,fp,r3
101058c4:	003e0a06 	br	101050f0 <__alt_data_end+0xfffe50f0>
101058c8:	00c00b44 	movi	r3,45
101058cc:	24e0003c 	xorhi	r19,r4,32768
101058d0:	d8c02a05 	stb	r3,168(sp)
101058d4:	003de906 	br	1010507c <__alt_data_end+0xfffe507c>
101058d8:	d8c03217 	ldw	r3,200(sp)
101058dc:	00c07a0e 	bge	zero,r3,10105ac8 <___vfprintf_internal_r+0x211c>
101058e0:	00800044 	movi	r2,1
101058e4:	d9003317 	ldw	r4,204(sp)
101058e8:	1105883a 	add	r2,r2,r4
101058ec:	d8802e15 	stw	r2,184(sp)
101058f0:	10004e16 	blt	r2,zero,10105a2c <___vfprintf_internal_r+0x2080>
101058f4:	044019c4 	movi	r17,103
101058f8:	003e2106 	br	10105180 <__alt_data_end+0xfffe5180>
101058fc:	d9002917 	ldw	r4,164(sp)
10105900:	d8802104 	addi	r2,sp,132
10105904:	d8800315 	stw	r2,12(sp)
10105908:	d9000015 	stw	r4,0(sp)
1010590c:	d8802504 	addi	r2,sp,148
10105910:	d9403617 	ldw	r5,216(sp)
10105914:	d9002c17 	ldw	r4,176(sp)
10105918:	d8800215 	stw	r2,8(sp)
1010591c:	d8802604 	addi	r2,sp,152
10105920:	d8800115 	stw	r2,4(sp)
10105924:	01c000c4 	movi	r7,3
10105928:	980d883a 	mov	r6,r19
1010592c:	da003d15 	stw	r8,244(sp)
10105930:	01060840 	call	10106084 <_dtoa_r>
10105934:	d8c02917 	ldw	r3,164(sp)
10105938:	da003d17 	ldw	r8,244(sp)
1010593c:	1021883a 	mov	r16,r2
10105940:	00801184 	movi	r2,70
10105944:	80f9883a 	add	fp,r16,r3
10105948:	88bfd926 	beq	r17,r2,101058b0 <__alt_data_end+0xfffe58b0>
1010594c:	003de806 	br	101050f0 <__alt_data_end+0xfffe50f0>
10105950:	d9002917 	ldw	r4,164(sp)
10105954:	00c04d0e 	bge	zero,r3,10105a8c <___vfprintf_internal_r+0x20e0>
10105958:	2000441e 	bne	r4,zero,10105a6c <___vfprintf_internal_r+0x20c0>
1010595c:	9480004c 	andi	r18,r18,1
10105960:	9000421e 	bne	r18,zero,10105a6c <___vfprintf_internal_r+0x20c0>
10105964:	1805883a 	mov	r2,r3
10105968:	18007016 	blt	r3,zero,10105b2c <___vfprintf_internal_r+0x2180>
1010596c:	d8c03217 	ldw	r3,200(sp)
10105970:	d8c02e15 	stw	r3,184(sp)
10105974:	003e0206 	br	10105180 <__alt_data_end+0xfffe5180>
10105978:	df0022c4 	addi	fp,sp,139
1010597c:	dc002915 	stw	r16,164(sp)
10105980:	4027883a 	mov	r19,r8
10105984:	e021883a 	mov	r16,fp
10105988:	b009883a 	mov	r4,r22
1010598c:	01400284 	movi	r5,10
10105990:	01015500 	call	10101550 <__modsi3>
10105994:	10800c04 	addi	r2,r2,48
10105998:	843fffc4 	addi	r16,r16,-1
1010599c:	b009883a 	mov	r4,r22
101059a0:	01400284 	movi	r5,10
101059a4:	80800005 	stb	r2,0(r16)
101059a8:	01014cc0 	call	101014cc <__divsi3>
101059ac:	102d883a 	mov	r22,r2
101059b0:	00800244 	movi	r2,9
101059b4:	15bff416 	blt	r2,r22,10105988 <__alt_data_end+0xfffe5988>
101059b8:	9811883a 	mov	r8,r19
101059bc:	b0800c04 	addi	r2,r22,48
101059c0:	8027883a 	mov	r19,r16
101059c4:	997fffc4 	addi	r5,r19,-1
101059c8:	98bfffc5 	stb	r2,-1(r19)
101059cc:	dc002917 	ldw	r16,164(sp)
101059d0:	2f006a2e 	bgeu	r5,fp,10105b7c <___vfprintf_internal_r+0x21d0>
101059d4:	d9c02384 	addi	r7,sp,142
101059d8:	3ccfc83a 	sub	r7,r7,r19
101059dc:	d9002344 	addi	r4,sp,141
101059e0:	e1cf883a 	add	r7,fp,r7
101059e4:	00000106 	br	101059ec <___vfprintf_internal_r+0x2040>
101059e8:	28800003 	ldbu	r2,0(r5)
101059ec:	20800005 	stb	r2,0(r4)
101059f0:	21000044 	addi	r4,r4,1
101059f4:	29400044 	addi	r5,r5,1
101059f8:	393ffb1e 	bne	r7,r4,101059e8 <__alt_data_end+0xfffe59e8>
101059fc:	d8802304 	addi	r2,sp,140
10105a00:	14c5c83a 	sub	r2,r2,r19
10105a04:	d8c02344 	addi	r3,sp,141
10105a08:	1885883a 	add	r2,r3,r2
10105a0c:	003f7006 	br	101057d0 <__alt_data_end+0xfffe57d0>
10105a10:	0005883a 	mov	r2,zero
10105a14:	003f0f06 	br	10105654 <__alt_data_end+0xfffe5654>
10105a18:	d8c03217 	ldw	r3,200(sp)
10105a1c:	18c00044 	addi	r3,r3,1
10105a20:	d8c02e15 	stw	r3,184(sp)
10105a24:	1805883a 	mov	r2,r3
10105a28:	183fb20e 	bge	r3,zero,101058f4 <__alt_data_end+0xfffe58f4>
10105a2c:	0005883a 	mov	r2,zero
10105a30:	003fb006 	br	101058f4 <__alt_data_end+0xfffe58f4>
10105a34:	d9003617 	ldw	r4,216(sp)
10105a38:	000d883a 	mov	r6,zero
10105a3c:	000f883a 	mov	r7,zero
10105a40:	980b883a 	mov	r5,r19
10105a44:	d8c03c15 	stw	r3,240(sp)
10105a48:	da003d15 	stw	r8,244(sp)
10105a4c:	010d1cc0 	call	1010d1cc <__eqdf2>
10105a50:	d8c03c17 	ldw	r3,240(sp)
10105a54:	da003d17 	ldw	r8,244(sp)
10105a58:	103f9826 	beq	r2,zero,101058bc <__alt_data_end+0xfffe58bc>
10105a5c:	00800044 	movi	r2,1
10105a60:	10c7c83a 	sub	r3,r2,r3
10105a64:	d8c02615 	stw	r3,152(sp)
10105a68:	003f9506 	br	101058c0 <__alt_data_end+0xfffe58c0>
10105a6c:	d9002917 	ldw	r4,164(sp)
10105a70:	d8c03217 	ldw	r3,200(sp)
10105a74:	20800044 	addi	r2,r4,1
10105a78:	1885883a 	add	r2,r3,r2
10105a7c:	d8802e15 	stw	r2,184(sp)
10105a80:	103dbf0e 	bge	r2,zero,10105180 <__alt_data_end+0xfffe5180>
10105a84:	0005883a 	mov	r2,zero
10105a88:	003dbd06 	br	10105180 <__alt_data_end+0xfffe5180>
10105a8c:	2000211e 	bne	r4,zero,10105b14 <___vfprintf_internal_r+0x2168>
10105a90:	9480004c 	andi	r18,r18,1
10105a94:	90001f1e 	bne	r18,zero,10105b14 <___vfprintf_internal_r+0x2168>
10105a98:	00800044 	movi	r2,1
10105a9c:	d8802e15 	stw	r2,184(sp)
10105aa0:	003db706 	br	10105180 <__alt_data_end+0xfffe5180>
10105aa4:	00800b44 	movi	r2,45
10105aa8:	05adc83a 	sub	r22,zero,r22
10105aac:	d8802305 	stb	r2,140(sp)
10105ab0:	003f3f06 	br	101057b0 <__alt_data_end+0xfffe57b0>
10105ab4:	0005883a 	mov	r2,zero
10105ab8:	003f5206 	br	10105804 <__alt_data_end+0xfffe5804>
10105abc:	90a4703a 	and	r18,r18,r2
10105ac0:	903f4e26 	beq	r18,zero,101057fc <__alt_data_end+0xfffe57fc>
10105ac4:	003f4a06 	br	101057f0 <__alt_data_end+0xfffe57f0>
10105ac8:	00800084 	movi	r2,2
10105acc:	10c5c83a 	sub	r2,r2,r3
10105ad0:	003f8406 	br	101058e4 <__alt_data_end+0xfffe58e4>
10105ad4:	d8802d17 	ldw	r2,180(sp)
10105ad8:	d9002d17 	ldw	r4,180(sp)
10105adc:	ac400043 	ldbu	r17,1(r21)
10105ae0:	10800017 	ldw	r2,0(r2)
10105ae4:	582b883a 	mov	r21,r11
10105ae8:	d8802915 	stw	r2,164(sp)
10105aec:	20800104 	addi	r2,r4,4
10105af0:	d9002917 	ldw	r4,164(sp)
10105af4:	d8802d15 	stw	r2,180(sp)
10105af8:	203e7a0e 	bge	r4,zero,101054e4 <__alt_data_end+0xfffe54e4>
10105afc:	8c403fcc 	andi	r17,r17,255
10105b00:	00bfffc4 	movi	r2,-1
10105b04:	8c40201c 	xori	r17,r17,128
10105b08:	d8802915 	stw	r2,164(sp)
10105b0c:	8c7fe004 	addi	r17,r17,-128
10105b10:	00380706 	br	10103b30 <__alt_data_end+0xfffe3b30>
10105b14:	d8c02917 	ldw	r3,164(sp)
10105b18:	18c00084 	addi	r3,r3,2
10105b1c:	d8c02e15 	stw	r3,184(sp)
10105b20:	1805883a 	mov	r2,r3
10105b24:	183d960e 	bge	r3,zero,10105180 <__alt_data_end+0xfffe5180>
10105b28:	003fd606 	br	10105a84 <__alt_data_end+0xfffe5a84>
10105b2c:	0005883a 	mov	r2,zero
10105b30:	003f8e06 	br	1010596c <__alt_data_end+0xfffe596c>
10105b34:	9080004c 	andi	r2,r18,1
10105b38:	103f811e 	bne	r2,zero,10105940 <__alt_data_end+0xfffe5940>
10105b3c:	d8802117 	ldw	r2,132(sp)
10105b40:	1405c83a 	sub	r2,r2,r16
10105b44:	d8803315 	stw	r2,204(sp)
10105b48:	b47ef326 	beq	r22,r17,10105718 <__alt_data_end+0xfffe5718>
10105b4c:	dd802617 	ldw	r22,152(sp)
10105b50:	003f1106 	br	10105798 <__alt_data_end+0xfffe5798>
10105b54:	d9c02785 	stb	r7,158(sp)
10105b58:	00390406 	br	10103f6c <__alt_data_end+0xfffe3f6c>
10105b5c:	d9c02785 	stb	r7,158(sp)
10105b60:	0038d306 	br	10103eb0 <__alt_data_end+0xfffe3eb0>
10105b64:	d9c02785 	stb	r7,158(sp)
10105b68:	003a6106 	br	101044f0 <__alt_data_end+0xfffe44f0>
10105b6c:	d9c02785 	stb	r7,158(sp)
10105b70:	003af806 	br	10104754 <__alt_data_end+0xfffe4754>
10105b74:	0005883a 	mov	r2,zero
10105b78:	003d7e06 	br	10105174 <__alt_data_end+0xfffe5174>
10105b7c:	d8802344 	addi	r2,sp,141
10105b80:	003f1306 	br	101057d0 <__alt_data_end+0xfffe57d0>
10105b84:	d9c02785 	stb	r7,158(sp)
10105b88:	00392306 	br	10104018 <__alt_data_end+0xfffe4018>
10105b8c:	d9c02785 	stb	r7,158(sp)
10105b90:	003aa906 	br	10104638 <__alt_data_end+0xfffe4638>
10105b94:	d9c02785 	stb	r7,158(sp)
10105b98:	003a3d06 	br	10104490 <__alt_data_end+0xfffe4490>
10105b9c:	d9c02785 	stb	r7,158(sp)
10105ba0:	003aca06 	br	101046cc <__alt_data_end+0xfffe46cc>

10105ba4 <__vfprintf_internal>:
10105ba4:	00840474 	movhi	r2,4113
10105ba8:	108b6d04 	addi	r2,r2,11700
10105bac:	300f883a 	mov	r7,r6
10105bb0:	280d883a 	mov	r6,r5
10105bb4:	200b883a 	mov	r5,r4
10105bb8:	11000017 	ldw	r4,0(r2)
10105bbc:	01039ac1 	jmpi	101039ac <___vfprintf_internal_r>

10105bc0 <__sbprintf>:
10105bc0:	2880030b 	ldhu	r2,12(r5)
10105bc4:	2ac01917 	ldw	r11,100(r5)
10105bc8:	2a80038b 	ldhu	r10,14(r5)
10105bcc:	2a400717 	ldw	r9,28(r5)
10105bd0:	2a000917 	ldw	r8,36(r5)
10105bd4:	defee204 	addi	sp,sp,-1144
10105bd8:	00c10004 	movi	r3,1024
10105bdc:	dc011a15 	stw	r16,1128(sp)
10105be0:	10bfff4c 	andi	r2,r2,65533
10105be4:	2821883a 	mov	r16,r5
10105be8:	d8cb883a 	add	r5,sp,r3
10105bec:	dc811c15 	stw	r18,1136(sp)
10105bf0:	dc411b15 	stw	r17,1132(sp)
10105bf4:	dfc11d15 	stw	ra,1140(sp)
10105bf8:	2025883a 	mov	r18,r4
10105bfc:	d881030d 	sth	r2,1036(sp)
10105c00:	dac11915 	stw	r11,1124(sp)
10105c04:	da81038d 	sth	r10,1038(sp)
10105c08:	da410715 	stw	r9,1052(sp)
10105c0c:	da010915 	stw	r8,1060(sp)
10105c10:	dec10015 	stw	sp,1024(sp)
10105c14:	dec10415 	stw	sp,1040(sp)
10105c18:	d8c10215 	stw	r3,1032(sp)
10105c1c:	d8c10515 	stw	r3,1044(sp)
10105c20:	d8010615 	stw	zero,1048(sp)
10105c24:	01039ac0 	call	101039ac <___vfprintf_internal_r>
10105c28:	1023883a 	mov	r17,r2
10105c2c:	10000416 	blt	r2,zero,10105c40 <__sbprintf+0x80>
10105c30:	d9410004 	addi	r5,sp,1024
10105c34:	9009883a 	mov	r4,r18
10105c38:	01019a00 	call	101019a0 <_fflush_r>
10105c3c:	10000d1e 	bne	r2,zero,10105c74 <__sbprintf+0xb4>
10105c40:	d881030b 	ldhu	r2,1036(sp)
10105c44:	1080100c 	andi	r2,r2,64
10105c48:	10000326 	beq	r2,zero,10105c58 <__sbprintf+0x98>
10105c4c:	8080030b 	ldhu	r2,12(r16)
10105c50:	10801014 	ori	r2,r2,64
10105c54:	8080030d 	sth	r2,12(r16)
10105c58:	8805883a 	mov	r2,r17
10105c5c:	dfc11d17 	ldw	ra,1140(sp)
10105c60:	dc811c17 	ldw	r18,1136(sp)
10105c64:	dc411b17 	ldw	r17,1132(sp)
10105c68:	dc011a17 	ldw	r16,1128(sp)
10105c6c:	dec11e04 	addi	sp,sp,1144
10105c70:	f800283a 	ret
10105c74:	047fffc4 	movi	r17,-1
10105c78:	003ff106 	br	10105c40 <__alt_data_end+0xfffe5c40>

10105c7c <_write_r>:
10105c7c:	defffd04 	addi	sp,sp,-12
10105c80:	2805883a 	mov	r2,r5
10105c84:	dc000015 	stw	r16,0(sp)
10105c88:	04040474 	movhi	r16,4113
10105c8c:	dc400115 	stw	r17,4(sp)
10105c90:	300b883a 	mov	r5,r6
10105c94:	84123704 	addi	r16,r16,18652
10105c98:	2023883a 	mov	r17,r4
10105c9c:	380d883a 	mov	r6,r7
10105ca0:	1009883a 	mov	r4,r2
10105ca4:	dfc00215 	stw	ra,8(sp)
10105ca8:	80000015 	stw	zero,0(r16)
10105cac:	010f2080 	call	1010f208 <write>
10105cb0:	00ffffc4 	movi	r3,-1
10105cb4:	10c00526 	beq	r2,r3,10105ccc <_write_r+0x50>
10105cb8:	dfc00217 	ldw	ra,8(sp)
10105cbc:	dc400117 	ldw	r17,4(sp)
10105cc0:	dc000017 	ldw	r16,0(sp)
10105cc4:	dec00304 	addi	sp,sp,12
10105cc8:	f800283a 	ret
10105ccc:	80c00017 	ldw	r3,0(r16)
10105cd0:	183ff926 	beq	r3,zero,10105cb8 <__alt_data_end+0xfffe5cb8>
10105cd4:	88c00015 	stw	r3,0(r17)
10105cd8:	003ff706 	br	10105cb8 <__alt_data_end+0xfffe5cb8>

10105cdc <__swsetup_r>:
10105cdc:	00840474 	movhi	r2,4113
10105ce0:	defffd04 	addi	sp,sp,-12
10105ce4:	108b6d04 	addi	r2,r2,11700
10105ce8:	dc400115 	stw	r17,4(sp)
10105cec:	2023883a 	mov	r17,r4
10105cf0:	11000017 	ldw	r4,0(r2)
10105cf4:	dc000015 	stw	r16,0(sp)
10105cf8:	dfc00215 	stw	ra,8(sp)
10105cfc:	2821883a 	mov	r16,r5
10105d00:	20000226 	beq	r4,zero,10105d0c <__swsetup_r+0x30>
10105d04:	20800e17 	ldw	r2,56(r4)
10105d08:	10003126 	beq	r2,zero,10105dd0 <__swsetup_r+0xf4>
10105d0c:	8080030b 	ldhu	r2,12(r16)
10105d10:	10c0020c 	andi	r3,r2,8
10105d14:	1009883a 	mov	r4,r2
10105d18:	18000f26 	beq	r3,zero,10105d58 <__swsetup_r+0x7c>
10105d1c:	80c00417 	ldw	r3,16(r16)
10105d20:	18001526 	beq	r3,zero,10105d78 <__swsetup_r+0x9c>
10105d24:	1100004c 	andi	r4,r2,1
10105d28:	20001c1e 	bne	r4,zero,10105d9c <__swsetup_r+0xc0>
10105d2c:	1080008c 	andi	r2,r2,2
10105d30:	1000291e 	bne	r2,zero,10105dd8 <__swsetup_r+0xfc>
10105d34:	80800517 	ldw	r2,20(r16)
10105d38:	80800215 	stw	r2,8(r16)
10105d3c:	18001c26 	beq	r3,zero,10105db0 <__swsetup_r+0xd4>
10105d40:	0005883a 	mov	r2,zero
10105d44:	dfc00217 	ldw	ra,8(sp)
10105d48:	dc400117 	ldw	r17,4(sp)
10105d4c:	dc000017 	ldw	r16,0(sp)
10105d50:	dec00304 	addi	sp,sp,12
10105d54:	f800283a 	ret
10105d58:	2080040c 	andi	r2,r4,16
10105d5c:	10002e26 	beq	r2,zero,10105e18 <__swsetup_r+0x13c>
10105d60:	2080010c 	andi	r2,r4,4
10105d64:	10001e1e 	bne	r2,zero,10105de0 <__swsetup_r+0x104>
10105d68:	80c00417 	ldw	r3,16(r16)
10105d6c:	20800214 	ori	r2,r4,8
10105d70:	8080030d 	sth	r2,12(r16)
10105d74:	183feb1e 	bne	r3,zero,10105d24 <__alt_data_end+0xfffe5d24>
10105d78:	1100a00c 	andi	r4,r2,640
10105d7c:	01408004 	movi	r5,512
10105d80:	217fe826 	beq	r4,r5,10105d24 <__alt_data_end+0xfffe5d24>
10105d84:	800b883a 	mov	r5,r16
10105d88:	8809883a 	mov	r4,r17
10105d8c:	0102a700 	call	10102a70 <__smakebuf_r>
10105d90:	8080030b 	ldhu	r2,12(r16)
10105d94:	80c00417 	ldw	r3,16(r16)
10105d98:	003fe206 	br	10105d24 <__alt_data_end+0xfffe5d24>
10105d9c:	80800517 	ldw	r2,20(r16)
10105da0:	80000215 	stw	zero,8(r16)
10105da4:	0085c83a 	sub	r2,zero,r2
10105da8:	80800615 	stw	r2,24(r16)
10105dac:	183fe41e 	bne	r3,zero,10105d40 <__alt_data_end+0xfffe5d40>
10105db0:	80c0030b 	ldhu	r3,12(r16)
10105db4:	0005883a 	mov	r2,zero
10105db8:	1900200c 	andi	r4,r3,128
10105dbc:	203fe126 	beq	r4,zero,10105d44 <__alt_data_end+0xfffe5d44>
10105dc0:	18c01014 	ori	r3,r3,64
10105dc4:	80c0030d 	sth	r3,12(r16)
10105dc8:	00bfffc4 	movi	r2,-1
10105dcc:	003fdd06 	br	10105d44 <__alt_data_end+0xfffe5d44>
10105dd0:	0101d7c0 	call	10101d7c <__sinit>
10105dd4:	003fcd06 	br	10105d0c <__alt_data_end+0xfffe5d0c>
10105dd8:	0005883a 	mov	r2,zero
10105ddc:	003fd606 	br	10105d38 <__alt_data_end+0xfffe5d38>
10105de0:	81400c17 	ldw	r5,48(r16)
10105de4:	28000626 	beq	r5,zero,10105e00 <__swsetup_r+0x124>
10105de8:	80801004 	addi	r2,r16,64
10105dec:	28800326 	beq	r5,r2,10105dfc <__swsetup_r+0x120>
10105df0:	8809883a 	mov	r4,r17
10105df4:	0101ffc0 	call	10101ffc <_free_r>
10105df8:	8100030b 	ldhu	r4,12(r16)
10105dfc:	80000c15 	stw	zero,48(r16)
10105e00:	80c00417 	ldw	r3,16(r16)
10105e04:	00bff6c4 	movi	r2,-37
10105e08:	1108703a 	and	r4,r2,r4
10105e0c:	80000115 	stw	zero,4(r16)
10105e10:	80c00015 	stw	r3,0(r16)
10105e14:	003fd506 	br	10105d6c <__alt_data_end+0xfffe5d6c>
10105e18:	00800244 	movi	r2,9
10105e1c:	88800015 	stw	r2,0(r17)
10105e20:	20801014 	ori	r2,r4,64
10105e24:	8080030d 	sth	r2,12(r16)
10105e28:	00bfffc4 	movi	r2,-1
10105e2c:	003fc506 	br	10105d44 <__alt_data_end+0xfffe5d44>

10105e30 <_close_r>:
10105e30:	defffd04 	addi	sp,sp,-12
10105e34:	dc000015 	stw	r16,0(sp)
10105e38:	04040474 	movhi	r16,4113
10105e3c:	dc400115 	stw	r17,4(sp)
10105e40:	84123704 	addi	r16,r16,18652
10105e44:	2023883a 	mov	r17,r4
10105e48:	2809883a 	mov	r4,r5
10105e4c:	dfc00215 	stw	ra,8(sp)
10105e50:	80000015 	stw	zero,0(r16)
10105e54:	010e6f00 	call	1010e6f0 <close>
10105e58:	00ffffc4 	movi	r3,-1
10105e5c:	10c00526 	beq	r2,r3,10105e74 <_close_r+0x44>
10105e60:	dfc00217 	ldw	ra,8(sp)
10105e64:	dc400117 	ldw	r17,4(sp)
10105e68:	dc000017 	ldw	r16,0(sp)
10105e6c:	dec00304 	addi	sp,sp,12
10105e70:	f800283a 	ret
10105e74:	80c00017 	ldw	r3,0(r16)
10105e78:	183ff926 	beq	r3,zero,10105e60 <__alt_data_end+0xfffe5e60>
10105e7c:	88c00015 	stw	r3,0(r17)
10105e80:	003ff706 	br	10105e60 <__alt_data_end+0xfffe5e60>

10105e84 <quorem>:
10105e84:	defff704 	addi	sp,sp,-36
10105e88:	dc800215 	stw	r18,8(sp)
10105e8c:	20800417 	ldw	r2,16(r4)
10105e90:	2c800417 	ldw	r18,16(r5)
10105e94:	dfc00815 	stw	ra,32(sp)
10105e98:	ddc00715 	stw	r23,28(sp)
10105e9c:	dd800615 	stw	r22,24(sp)
10105ea0:	dd400515 	stw	r21,20(sp)
10105ea4:	dd000415 	stw	r20,16(sp)
10105ea8:	dcc00315 	stw	r19,12(sp)
10105eac:	dc400115 	stw	r17,4(sp)
10105eb0:	dc000015 	stw	r16,0(sp)
10105eb4:	14807116 	blt	r2,r18,1010607c <quorem+0x1f8>
10105eb8:	94bfffc4 	addi	r18,r18,-1
10105ebc:	94ad883a 	add	r22,r18,r18
10105ec0:	b5ad883a 	add	r22,r22,r22
10105ec4:	2c400504 	addi	r17,r5,20
10105ec8:	8da9883a 	add	r20,r17,r22
10105ecc:	25400504 	addi	r21,r4,20
10105ed0:	282f883a 	mov	r23,r5
10105ed4:	adad883a 	add	r22,r21,r22
10105ed8:	a1400017 	ldw	r5,0(r20)
10105edc:	2021883a 	mov	r16,r4
10105ee0:	b1000017 	ldw	r4,0(r22)
10105ee4:	29400044 	addi	r5,r5,1
10105ee8:	01015c40 	call	101015c4 <__udivsi3>
10105eec:	1027883a 	mov	r19,r2
10105ef0:	10002c26 	beq	r2,zero,10105fa4 <quorem+0x120>
10105ef4:	a813883a 	mov	r9,r21
10105ef8:	880b883a 	mov	r5,r17
10105efc:	0009883a 	mov	r4,zero
10105f00:	000d883a 	mov	r6,zero
10105f04:	2a000017 	ldw	r8,0(r5)
10105f08:	49c00017 	ldw	r7,0(r9)
10105f0c:	29400104 	addi	r5,r5,4
10105f10:	40bfffcc 	andi	r2,r8,65535
10105f14:	14c5383a 	mul	r2,r2,r19
10105f18:	4010d43a 	srli	r8,r8,16
10105f1c:	38ffffcc 	andi	r3,r7,65535
10105f20:	1105883a 	add	r2,r2,r4
10105f24:	1008d43a 	srli	r4,r2,16
10105f28:	44d1383a 	mul	r8,r8,r19
10105f2c:	198d883a 	add	r6,r3,r6
10105f30:	10ffffcc 	andi	r3,r2,65535
10105f34:	30c7c83a 	sub	r3,r6,r3
10105f38:	380ed43a 	srli	r7,r7,16
10105f3c:	4105883a 	add	r2,r8,r4
10105f40:	180dd43a 	srai	r6,r3,16
10105f44:	113fffcc 	andi	r4,r2,65535
10105f48:	390fc83a 	sub	r7,r7,r4
10105f4c:	398d883a 	add	r6,r7,r6
10105f50:	300e943a 	slli	r7,r6,16
10105f54:	18ffffcc 	andi	r3,r3,65535
10105f58:	1008d43a 	srli	r4,r2,16
10105f5c:	38ceb03a 	or	r7,r7,r3
10105f60:	49c00015 	stw	r7,0(r9)
10105f64:	300dd43a 	srai	r6,r6,16
10105f68:	4a400104 	addi	r9,r9,4
10105f6c:	a17fe52e 	bgeu	r20,r5,10105f04 <__alt_data_end+0xfffe5f04>
10105f70:	b0800017 	ldw	r2,0(r22)
10105f74:	10000b1e 	bne	r2,zero,10105fa4 <quorem+0x120>
10105f78:	b0bfff04 	addi	r2,r22,-4
10105f7c:	a880082e 	bgeu	r21,r2,10105fa0 <quorem+0x11c>
10105f80:	b0ffff17 	ldw	r3,-4(r22)
10105f84:	18000326 	beq	r3,zero,10105f94 <quorem+0x110>
10105f88:	00000506 	br	10105fa0 <quorem+0x11c>
10105f8c:	10c00017 	ldw	r3,0(r2)
10105f90:	1800031e 	bne	r3,zero,10105fa0 <quorem+0x11c>
10105f94:	10bfff04 	addi	r2,r2,-4
10105f98:	94bfffc4 	addi	r18,r18,-1
10105f9c:	a8bffb36 	bltu	r21,r2,10105f8c <__alt_data_end+0xfffe5f8c>
10105fa0:	84800415 	stw	r18,16(r16)
10105fa4:	b80b883a 	mov	r5,r23
10105fa8:	8009883a 	mov	r4,r16
10105fac:	0108a540 	call	10108a54 <__mcmp>
10105fb0:	10002616 	blt	r2,zero,1010604c <quorem+0x1c8>
10105fb4:	9cc00044 	addi	r19,r19,1
10105fb8:	a805883a 	mov	r2,r21
10105fbc:	000b883a 	mov	r5,zero
10105fc0:	11000017 	ldw	r4,0(r2)
10105fc4:	89800017 	ldw	r6,0(r17)
10105fc8:	10800104 	addi	r2,r2,4
10105fcc:	20ffffcc 	andi	r3,r4,65535
10105fd0:	194b883a 	add	r5,r3,r5
10105fd4:	30ffffcc 	andi	r3,r6,65535
10105fd8:	28c7c83a 	sub	r3,r5,r3
10105fdc:	300cd43a 	srli	r6,r6,16
10105fe0:	2008d43a 	srli	r4,r4,16
10105fe4:	180bd43a 	srai	r5,r3,16
10105fe8:	18ffffcc 	andi	r3,r3,65535
10105fec:	2189c83a 	sub	r4,r4,r6
10105ff0:	2149883a 	add	r4,r4,r5
10105ff4:	200c943a 	slli	r6,r4,16
10105ff8:	8c400104 	addi	r17,r17,4
10105ffc:	200bd43a 	srai	r5,r4,16
10106000:	30c6b03a 	or	r3,r6,r3
10106004:	10ffff15 	stw	r3,-4(r2)
10106008:	a47fed2e 	bgeu	r20,r17,10105fc0 <__alt_data_end+0xfffe5fc0>
1010600c:	9485883a 	add	r2,r18,r18
10106010:	1085883a 	add	r2,r2,r2
10106014:	a887883a 	add	r3,r21,r2
10106018:	18800017 	ldw	r2,0(r3)
1010601c:	10000b1e 	bne	r2,zero,1010604c <quorem+0x1c8>
10106020:	18bfff04 	addi	r2,r3,-4
10106024:	a880082e 	bgeu	r21,r2,10106048 <quorem+0x1c4>
10106028:	18ffff17 	ldw	r3,-4(r3)
1010602c:	18000326 	beq	r3,zero,1010603c <quorem+0x1b8>
10106030:	00000506 	br	10106048 <quorem+0x1c4>
10106034:	10c00017 	ldw	r3,0(r2)
10106038:	1800031e 	bne	r3,zero,10106048 <quorem+0x1c4>
1010603c:	10bfff04 	addi	r2,r2,-4
10106040:	94bfffc4 	addi	r18,r18,-1
10106044:	a8bffb36 	bltu	r21,r2,10106034 <__alt_data_end+0xfffe6034>
10106048:	84800415 	stw	r18,16(r16)
1010604c:	9805883a 	mov	r2,r19
10106050:	dfc00817 	ldw	ra,32(sp)
10106054:	ddc00717 	ldw	r23,28(sp)
10106058:	dd800617 	ldw	r22,24(sp)
1010605c:	dd400517 	ldw	r21,20(sp)
10106060:	dd000417 	ldw	r20,16(sp)
10106064:	dcc00317 	ldw	r19,12(sp)
10106068:	dc800217 	ldw	r18,8(sp)
1010606c:	dc400117 	ldw	r17,4(sp)
10106070:	dc000017 	ldw	r16,0(sp)
10106074:	dec00904 	addi	sp,sp,36
10106078:	f800283a 	ret
1010607c:	0005883a 	mov	r2,zero
10106080:	003ff306 	br	10106050 <__alt_data_end+0xfffe6050>

10106084 <_dtoa_r>:
10106084:	20801017 	ldw	r2,64(r4)
10106088:	deffde04 	addi	sp,sp,-136
1010608c:	df002015 	stw	fp,128(sp)
10106090:	dcc01b15 	stw	r19,108(sp)
10106094:	dc801a15 	stw	r18,104(sp)
10106098:	dc401915 	stw	r17,100(sp)
1010609c:	dc001815 	stw	r16,96(sp)
101060a0:	dfc02115 	stw	ra,132(sp)
101060a4:	ddc01f15 	stw	r23,124(sp)
101060a8:	dd801e15 	stw	r22,120(sp)
101060ac:	dd401d15 	stw	r21,116(sp)
101060b0:	dd001c15 	stw	r20,112(sp)
101060b4:	d9c00315 	stw	r7,12(sp)
101060b8:	2039883a 	mov	fp,r4
101060bc:	3023883a 	mov	r17,r6
101060c0:	2825883a 	mov	r18,r5
101060c4:	dc002417 	ldw	r16,144(sp)
101060c8:	3027883a 	mov	r19,r6
101060cc:	10000826 	beq	r2,zero,101060f0 <_dtoa_r+0x6c>
101060d0:	21801117 	ldw	r6,68(r4)
101060d4:	00c00044 	movi	r3,1
101060d8:	100b883a 	mov	r5,r2
101060dc:	1986983a 	sll	r3,r3,r6
101060e0:	11800115 	stw	r6,4(r2)
101060e4:	10c00215 	stw	r3,8(r2)
101060e8:	01082340 	call	10108234 <_Bfree>
101060ec:	e0001015 	stw	zero,64(fp)
101060f0:	88002e16 	blt	r17,zero,101061ac <_dtoa_r+0x128>
101060f4:	80000015 	stw	zero,0(r16)
101060f8:	889ffc2c 	andhi	r2,r17,32752
101060fc:	00dffc34 	movhi	r3,32752
10106100:	10c01c26 	beq	r2,r3,10106174 <_dtoa_r+0xf0>
10106104:	000d883a 	mov	r6,zero
10106108:	000f883a 	mov	r7,zero
1010610c:	9009883a 	mov	r4,r18
10106110:	980b883a 	mov	r5,r19
10106114:	010d1cc0 	call	1010d1cc <__eqdf2>
10106118:	10002b1e 	bne	r2,zero,101061c8 <_dtoa_r+0x144>
1010611c:	d9c02317 	ldw	r7,140(sp)
10106120:	00800044 	movi	r2,1
10106124:	38800015 	stw	r2,0(r7)
10106128:	d8802517 	ldw	r2,148(sp)
1010612c:	10019e26 	beq	r2,zero,101067a8 <_dtoa_r+0x724>
10106130:	d8c02517 	ldw	r3,148(sp)
10106134:	00840474 	movhi	r2,4113
10106138:	10841344 	addi	r2,r2,4173
1010613c:	18800015 	stw	r2,0(r3)
10106140:	10bfffc4 	addi	r2,r2,-1
10106144:	dfc02117 	ldw	ra,132(sp)
10106148:	df002017 	ldw	fp,128(sp)
1010614c:	ddc01f17 	ldw	r23,124(sp)
10106150:	dd801e17 	ldw	r22,120(sp)
10106154:	dd401d17 	ldw	r21,116(sp)
10106158:	dd001c17 	ldw	r20,112(sp)
1010615c:	dcc01b17 	ldw	r19,108(sp)
10106160:	dc801a17 	ldw	r18,104(sp)
10106164:	dc401917 	ldw	r17,100(sp)
10106168:	dc001817 	ldw	r16,96(sp)
1010616c:	dec02204 	addi	sp,sp,136
10106170:	f800283a 	ret
10106174:	d8c02317 	ldw	r3,140(sp)
10106178:	0089c3c4 	movi	r2,9999
1010617c:	18800015 	stw	r2,0(r3)
10106180:	90017726 	beq	r18,zero,10106760 <_dtoa_r+0x6dc>
10106184:	00840474 	movhi	r2,4113
10106188:	10841f04 	addi	r2,r2,4220
1010618c:	d9002517 	ldw	r4,148(sp)
10106190:	203fec26 	beq	r4,zero,10106144 <__alt_data_end+0xfffe6144>
10106194:	10c000c7 	ldb	r3,3(r2)
10106198:	1801781e 	bne	r3,zero,1010677c <_dtoa_r+0x6f8>
1010619c:	10c000c4 	addi	r3,r2,3
101061a0:	d9802517 	ldw	r6,148(sp)
101061a4:	30c00015 	stw	r3,0(r6)
101061a8:	003fe606 	br	10106144 <__alt_data_end+0xfffe6144>
101061ac:	04e00034 	movhi	r19,32768
101061b0:	9cffffc4 	addi	r19,r19,-1
101061b4:	00800044 	movi	r2,1
101061b8:	8ce6703a 	and	r19,r17,r19
101061bc:	80800015 	stw	r2,0(r16)
101061c0:	9823883a 	mov	r17,r19
101061c4:	003fcc06 	br	101060f8 <__alt_data_end+0xfffe60f8>
101061c8:	d8800204 	addi	r2,sp,8
101061cc:	d8800015 	stw	r2,0(sp)
101061d0:	d9c00104 	addi	r7,sp,4
101061d4:	900b883a 	mov	r5,r18
101061d8:	980d883a 	mov	r6,r19
101061dc:	e009883a 	mov	r4,fp
101061e0:	8820d53a 	srli	r16,r17,20
101061e4:	0108e200 	call	10108e20 <__d2b>
101061e8:	d8800915 	stw	r2,36(sp)
101061ec:	8001651e 	bne	r16,zero,10106784 <_dtoa_r+0x700>
101061f0:	dd800217 	ldw	r22,8(sp)
101061f4:	dc000117 	ldw	r16,4(sp)
101061f8:	00800804 	movi	r2,32
101061fc:	b421883a 	add	r16,r22,r16
10106200:	80c10c84 	addi	r3,r16,1074
10106204:	10c2d10e 	bge	r2,r3,10106d4c <_dtoa_r+0xcc8>
10106208:	00801004 	movi	r2,64
1010620c:	81010484 	addi	r4,r16,1042
10106210:	10c7c83a 	sub	r3,r2,r3
10106214:	9108d83a 	srl	r4,r18,r4
10106218:	88e2983a 	sll	r17,r17,r3
1010621c:	2448b03a 	or	r4,r4,r17
10106220:	010e5940 	call	1010e594 <__floatunsidf>
10106224:	017f8434 	movhi	r5,65040
10106228:	01800044 	movi	r6,1
1010622c:	1009883a 	mov	r4,r2
10106230:	194b883a 	add	r5,r3,r5
10106234:	843fffc4 	addi	r16,r16,-1
10106238:	d9801115 	stw	r6,68(sp)
1010623c:	000d883a 	mov	r6,zero
10106240:	01cffe34 	movhi	r7,16376
10106244:	010db3c0 	call	1010db3c <__subdf3>
10106248:	0198dbf4 	movhi	r6,25455
1010624c:	01cff4f4 	movhi	r7,16339
10106250:	3190d844 	addi	r6,r6,17249
10106254:	39e1e9c4 	addi	r7,r7,-30809
10106258:	1009883a 	mov	r4,r2
1010625c:	180b883a 	mov	r5,r3
10106260:	010d4240 	call	1010d424 <__muldf3>
10106264:	01a2d874 	movhi	r6,35681
10106268:	01cff1f4 	movhi	r7,16327
1010626c:	31b22cc4 	addi	r6,r6,-14157
10106270:	39e28a04 	addi	r7,r7,-30168
10106274:	180b883a 	mov	r5,r3
10106278:	1009883a 	mov	r4,r2
1010627c:	010c0380 	call	1010c038 <__adddf3>
10106280:	8009883a 	mov	r4,r16
10106284:	1029883a 	mov	r20,r2
10106288:	1823883a 	mov	r17,r3
1010628c:	010e4b80 	call	1010e4b8 <__floatsidf>
10106290:	019427f4 	movhi	r6,20639
10106294:	01cff4f4 	movhi	r7,16339
10106298:	319e7ec4 	addi	r6,r6,31227
1010629c:	39d104c4 	addi	r7,r7,17427
101062a0:	1009883a 	mov	r4,r2
101062a4:	180b883a 	mov	r5,r3
101062a8:	010d4240 	call	1010d424 <__muldf3>
101062ac:	100d883a 	mov	r6,r2
101062b0:	180f883a 	mov	r7,r3
101062b4:	a009883a 	mov	r4,r20
101062b8:	880b883a 	mov	r5,r17
101062bc:	010c0380 	call	1010c038 <__adddf3>
101062c0:	1009883a 	mov	r4,r2
101062c4:	180b883a 	mov	r5,r3
101062c8:	1029883a 	mov	r20,r2
101062cc:	1823883a 	mov	r17,r3
101062d0:	010e4380 	call	1010e438 <__fixdfsi>
101062d4:	000d883a 	mov	r6,zero
101062d8:	000f883a 	mov	r7,zero
101062dc:	a009883a 	mov	r4,r20
101062e0:	880b883a 	mov	r5,r17
101062e4:	d8800515 	stw	r2,20(sp)
101062e8:	010d3300 	call	1010d330 <__ledf2>
101062ec:	10028716 	blt	r2,zero,10106d0c <_dtoa_r+0xc88>
101062f0:	d8c00517 	ldw	r3,20(sp)
101062f4:	00800584 	movi	r2,22
101062f8:	10c27536 	bltu	r2,r3,10106cd0 <_dtoa_r+0xc4c>
101062fc:	180490fa 	slli	r2,r3,3
10106300:	00c40474 	movhi	r3,4113
10106304:	18c43a04 	addi	r3,r3,4328
10106308:	1885883a 	add	r2,r3,r2
1010630c:	11000017 	ldw	r4,0(r2)
10106310:	11400117 	ldw	r5,4(r2)
10106314:	900d883a 	mov	r6,r18
10106318:	980f883a 	mov	r7,r19
1010631c:	010d2540 	call	1010d254 <__gedf2>
10106320:	00828d0e 	bge	zero,r2,10106d58 <_dtoa_r+0xcd4>
10106324:	d9000517 	ldw	r4,20(sp)
10106328:	d8000e15 	stw	zero,56(sp)
1010632c:	213fffc4 	addi	r4,r4,-1
10106330:	d9000515 	stw	r4,20(sp)
10106334:	b42dc83a 	sub	r22,r22,r16
10106338:	b5bfffc4 	addi	r22,r22,-1
1010633c:	b0026f16 	blt	r22,zero,10106cfc <_dtoa_r+0xc78>
10106340:	d8000815 	stw	zero,32(sp)
10106344:	d9c00517 	ldw	r7,20(sp)
10106348:	38026416 	blt	r7,zero,10106cdc <_dtoa_r+0xc58>
1010634c:	b1ed883a 	add	r22,r22,r7
10106350:	d9c00d15 	stw	r7,52(sp)
10106354:	d8000a15 	stw	zero,40(sp)
10106358:	d9800317 	ldw	r6,12(sp)
1010635c:	00800244 	movi	r2,9
10106360:	11811436 	bltu	r2,r6,101067b4 <_dtoa_r+0x730>
10106364:	00800144 	movi	r2,5
10106368:	1184e10e 	bge	r2,r6,101076f0 <_dtoa_r+0x166c>
1010636c:	31bfff04 	addi	r6,r6,-4
10106370:	d9800315 	stw	r6,12(sp)
10106374:	0023883a 	mov	r17,zero
10106378:	d9800317 	ldw	r6,12(sp)
1010637c:	008000c4 	movi	r2,3
10106380:	30836726 	beq	r6,r2,10107120 <_dtoa_r+0x109c>
10106384:	1183410e 	bge	r2,r6,1010708c <_dtoa_r+0x1008>
10106388:	d9c00317 	ldw	r7,12(sp)
1010638c:	00800104 	movi	r2,4
10106390:	38827c26 	beq	r7,r2,10106d84 <_dtoa_r+0xd00>
10106394:	00800144 	movi	r2,5
10106398:	3884c41e 	bne	r7,r2,101076ac <_dtoa_r+0x1628>
1010639c:	00800044 	movi	r2,1
101063a0:	d8800b15 	stw	r2,44(sp)
101063a4:	d8c00517 	ldw	r3,20(sp)
101063a8:	d9002217 	ldw	r4,136(sp)
101063ac:	1907883a 	add	r3,r3,r4
101063b0:	19800044 	addi	r6,r3,1
101063b4:	d8c00c15 	stw	r3,48(sp)
101063b8:	d9800615 	stw	r6,24(sp)
101063bc:	0183a40e 	bge	zero,r6,10107250 <_dtoa_r+0x11cc>
101063c0:	d9800617 	ldw	r6,24(sp)
101063c4:	3021883a 	mov	r16,r6
101063c8:	e0001115 	stw	zero,68(fp)
101063cc:	008005c4 	movi	r2,23
101063d0:	1184c92e 	bgeu	r2,r6,101076f8 <_dtoa_r+0x1674>
101063d4:	00c00044 	movi	r3,1
101063d8:	00800104 	movi	r2,4
101063dc:	1085883a 	add	r2,r2,r2
101063e0:	11000504 	addi	r4,r2,20
101063e4:	180b883a 	mov	r5,r3
101063e8:	18c00044 	addi	r3,r3,1
101063ec:	313ffb2e 	bgeu	r6,r4,101063dc <__alt_data_end+0xfffe63dc>
101063f0:	e1401115 	stw	r5,68(fp)
101063f4:	e009883a 	mov	r4,fp
101063f8:	010818c0 	call	1010818c <_Balloc>
101063fc:	d8800715 	stw	r2,28(sp)
10106400:	e0801015 	stw	r2,64(fp)
10106404:	00800384 	movi	r2,14
10106408:	1400f736 	bltu	r2,r16,101067e8 <_dtoa_r+0x764>
1010640c:	8800f626 	beq	r17,zero,101067e8 <_dtoa_r+0x764>
10106410:	d9c00517 	ldw	r7,20(sp)
10106414:	01c39a0e 	bge	zero,r7,10107280 <_dtoa_r+0x11fc>
10106418:	388003cc 	andi	r2,r7,15
1010641c:	100490fa 	slli	r2,r2,3
10106420:	382bd13a 	srai	r21,r7,4
10106424:	00c40474 	movhi	r3,4113
10106428:	18c43a04 	addi	r3,r3,4328
1010642c:	1885883a 	add	r2,r3,r2
10106430:	a8c0040c 	andi	r3,r21,16
10106434:	12400017 	ldw	r9,0(r2)
10106438:	12000117 	ldw	r8,4(r2)
1010643c:	18037926 	beq	r3,zero,10107224 <_dtoa_r+0x11a0>
10106440:	00840474 	movhi	r2,4113
10106444:	10843004 	addi	r2,r2,4288
10106448:	11800817 	ldw	r6,32(r2)
1010644c:	11c00917 	ldw	r7,36(r2)
10106450:	9009883a 	mov	r4,r18
10106454:	980b883a 	mov	r5,r19
10106458:	da001715 	stw	r8,92(sp)
1010645c:	da401615 	stw	r9,88(sp)
10106460:	010c8e40 	call	1010c8e4 <__divdf3>
10106464:	da001717 	ldw	r8,92(sp)
10106468:	da401617 	ldw	r9,88(sp)
1010646c:	ad4003cc 	andi	r21,r21,15
10106470:	040000c4 	movi	r16,3
10106474:	1023883a 	mov	r17,r2
10106478:	1829883a 	mov	r20,r3
1010647c:	a8001126 	beq	r21,zero,101064c4 <_dtoa_r+0x440>
10106480:	05c40474 	movhi	r23,4113
10106484:	bdc43004 	addi	r23,r23,4288
10106488:	4805883a 	mov	r2,r9
1010648c:	4007883a 	mov	r3,r8
10106490:	a980004c 	andi	r6,r21,1
10106494:	1009883a 	mov	r4,r2
10106498:	a82bd07a 	srai	r21,r21,1
1010649c:	180b883a 	mov	r5,r3
101064a0:	30000426 	beq	r6,zero,101064b4 <_dtoa_r+0x430>
101064a4:	b9800017 	ldw	r6,0(r23)
101064a8:	b9c00117 	ldw	r7,4(r23)
101064ac:	84000044 	addi	r16,r16,1
101064b0:	010d4240 	call	1010d424 <__muldf3>
101064b4:	bdc00204 	addi	r23,r23,8
101064b8:	a83ff51e 	bne	r21,zero,10106490 <__alt_data_end+0xfffe6490>
101064bc:	1013883a 	mov	r9,r2
101064c0:	1811883a 	mov	r8,r3
101064c4:	480d883a 	mov	r6,r9
101064c8:	400f883a 	mov	r7,r8
101064cc:	8809883a 	mov	r4,r17
101064d0:	a00b883a 	mov	r5,r20
101064d4:	010c8e40 	call	1010c8e4 <__divdf3>
101064d8:	d8800f15 	stw	r2,60(sp)
101064dc:	d8c01015 	stw	r3,64(sp)
101064e0:	d8c00e17 	ldw	r3,56(sp)
101064e4:	18000626 	beq	r3,zero,10106500 <_dtoa_r+0x47c>
101064e8:	d9000f17 	ldw	r4,60(sp)
101064ec:	d9401017 	ldw	r5,64(sp)
101064f0:	000d883a 	mov	r6,zero
101064f4:	01cffc34 	movhi	r7,16368
101064f8:	010d3300 	call	1010d330 <__ledf2>
101064fc:	10040b16 	blt	r2,zero,1010752c <_dtoa_r+0x14a8>
10106500:	8009883a 	mov	r4,r16
10106504:	010e4b80 	call	1010e4b8 <__floatsidf>
10106508:	d9800f17 	ldw	r6,60(sp)
1010650c:	d9c01017 	ldw	r7,64(sp)
10106510:	1009883a 	mov	r4,r2
10106514:	180b883a 	mov	r5,r3
10106518:	010d4240 	call	1010d424 <__muldf3>
1010651c:	000d883a 	mov	r6,zero
10106520:	01d00734 	movhi	r7,16412
10106524:	1009883a 	mov	r4,r2
10106528:	180b883a 	mov	r5,r3
1010652c:	010c0380 	call	1010c038 <__adddf3>
10106530:	1021883a 	mov	r16,r2
10106534:	d8800617 	ldw	r2,24(sp)
10106538:	047f3034 	movhi	r17,64704
1010653c:	1c63883a 	add	r17,r3,r17
10106540:	10031826 	beq	r2,zero,101071a4 <_dtoa_r+0x1120>
10106544:	d8c00517 	ldw	r3,20(sp)
10106548:	db000617 	ldw	r12,24(sp)
1010654c:	d8c01315 	stw	r3,76(sp)
10106550:	d9000b17 	ldw	r4,44(sp)
10106554:	20038f26 	beq	r4,zero,10107394 <_dtoa_r+0x1310>
10106558:	60bfffc4 	addi	r2,r12,-1
1010655c:	100490fa 	slli	r2,r2,3
10106560:	00c40474 	movhi	r3,4113
10106564:	18c43a04 	addi	r3,r3,4328
10106568:	1885883a 	add	r2,r3,r2
1010656c:	11800017 	ldw	r6,0(r2)
10106570:	11c00117 	ldw	r7,4(r2)
10106574:	d8800717 	ldw	r2,28(sp)
10106578:	0009883a 	mov	r4,zero
1010657c:	014ff834 	movhi	r5,16352
10106580:	db001615 	stw	r12,88(sp)
10106584:	15c00044 	addi	r23,r2,1
10106588:	010c8e40 	call	1010c8e4 <__divdf3>
1010658c:	800d883a 	mov	r6,r16
10106590:	880f883a 	mov	r7,r17
10106594:	1009883a 	mov	r4,r2
10106598:	180b883a 	mov	r5,r3
1010659c:	010db3c0 	call	1010db3c <__subdf3>
101065a0:	d9401017 	ldw	r5,64(sp)
101065a4:	d9000f17 	ldw	r4,60(sp)
101065a8:	102b883a 	mov	r21,r2
101065ac:	d8c01215 	stw	r3,72(sp)
101065b0:	010e4380 	call	1010e438 <__fixdfsi>
101065b4:	1009883a 	mov	r4,r2
101065b8:	1029883a 	mov	r20,r2
101065bc:	010e4b80 	call	1010e4b8 <__floatsidf>
101065c0:	d9000f17 	ldw	r4,60(sp)
101065c4:	d9401017 	ldw	r5,64(sp)
101065c8:	100d883a 	mov	r6,r2
101065cc:	180f883a 	mov	r7,r3
101065d0:	010db3c0 	call	1010db3c <__subdf3>
101065d4:	1823883a 	mov	r17,r3
101065d8:	d8c00717 	ldw	r3,28(sp)
101065dc:	d9401217 	ldw	r5,72(sp)
101065e0:	a2000c04 	addi	r8,r20,48
101065e4:	1021883a 	mov	r16,r2
101065e8:	1a000005 	stb	r8,0(r3)
101065ec:	800d883a 	mov	r6,r16
101065f0:	880f883a 	mov	r7,r17
101065f4:	a809883a 	mov	r4,r21
101065f8:	4029883a 	mov	r20,r8
101065fc:	010d2540 	call	1010d254 <__gedf2>
10106600:	00841d16 	blt	zero,r2,10107678 <_dtoa_r+0x15f4>
10106604:	800d883a 	mov	r6,r16
10106608:	880f883a 	mov	r7,r17
1010660c:	0009883a 	mov	r4,zero
10106610:	014ffc34 	movhi	r5,16368
10106614:	010db3c0 	call	1010db3c <__subdf3>
10106618:	d9401217 	ldw	r5,72(sp)
1010661c:	100d883a 	mov	r6,r2
10106620:	180f883a 	mov	r7,r3
10106624:	a809883a 	mov	r4,r21
10106628:	010d2540 	call	1010d254 <__gedf2>
1010662c:	db001617 	ldw	r12,88(sp)
10106630:	00840e16 	blt	zero,r2,1010766c <_dtoa_r+0x15e8>
10106634:	00800044 	movi	r2,1
10106638:	13006b0e 	bge	r2,r12,101067e8 <_dtoa_r+0x764>
1010663c:	d9000717 	ldw	r4,28(sp)
10106640:	dd800f15 	stw	r22,60(sp)
10106644:	dcc01015 	stw	r19,64(sp)
10106648:	2319883a 	add	r12,r4,r12
1010664c:	dcc01217 	ldw	r19,72(sp)
10106650:	602d883a 	mov	r22,r12
10106654:	dc801215 	stw	r18,72(sp)
10106658:	b825883a 	mov	r18,r23
1010665c:	00000906 	br	10106684 <_dtoa_r+0x600>
10106660:	010db3c0 	call	1010db3c <__subdf3>
10106664:	a80d883a 	mov	r6,r21
10106668:	980f883a 	mov	r7,r19
1010666c:	1009883a 	mov	r4,r2
10106670:	180b883a 	mov	r5,r3
10106674:	010d3300 	call	1010d330 <__ledf2>
10106678:	1003e816 	blt	r2,zero,1010761c <_dtoa_r+0x1598>
1010667c:	b825883a 	mov	r18,r23
10106680:	bd83e926 	beq	r23,r22,10107628 <_dtoa_r+0x15a4>
10106684:	a809883a 	mov	r4,r21
10106688:	980b883a 	mov	r5,r19
1010668c:	000d883a 	mov	r6,zero
10106690:	01d00934 	movhi	r7,16420
10106694:	010d4240 	call	1010d424 <__muldf3>
10106698:	000d883a 	mov	r6,zero
1010669c:	01d00934 	movhi	r7,16420
101066a0:	8009883a 	mov	r4,r16
101066a4:	880b883a 	mov	r5,r17
101066a8:	102b883a 	mov	r21,r2
101066ac:	1827883a 	mov	r19,r3
101066b0:	010d4240 	call	1010d424 <__muldf3>
101066b4:	180b883a 	mov	r5,r3
101066b8:	1009883a 	mov	r4,r2
101066bc:	1821883a 	mov	r16,r3
101066c0:	1023883a 	mov	r17,r2
101066c4:	010e4380 	call	1010e438 <__fixdfsi>
101066c8:	1009883a 	mov	r4,r2
101066cc:	1029883a 	mov	r20,r2
101066d0:	010e4b80 	call	1010e4b8 <__floatsidf>
101066d4:	8809883a 	mov	r4,r17
101066d8:	800b883a 	mov	r5,r16
101066dc:	100d883a 	mov	r6,r2
101066e0:	180f883a 	mov	r7,r3
101066e4:	010db3c0 	call	1010db3c <__subdf3>
101066e8:	a5000c04 	addi	r20,r20,48
101066ec:	a80d883a 	mov	r6,r21
101066f0:	980f883a 	mov	r7,r19
101066f4:	1009883a 	mov	r4,r2
101066f8:	180b883a 	mov	r5,r3
101066fc:	95000005 	stb	r20,0(r18)
10106700:	1021883a 	mov	r16,r2
10106704:	1823883a 	mov	r17,r3
10106708:	010d3300 	call	1010d330 <__ledf2>
1010670c:	bdc00044 	addi	r23,r23,1
10106710:	800d883a 	mov	r6,r16
10106714:	880f883a 	mov	r7,r17
10106718:	0009883a 	mov	r4,zero
1010671c:	014ffc34 	movhi	r5,16368
10106720:	103fcf0e 	bge	r2,zero,10106660 <__alt_data_end+0xfffe6660>
10106724:	d8c01317 	ldw	r3,76(sp)
10106728:	d8c00515 	stw	r3,20(sp)
1010672c:	d9400917 	ldw	r5,36(sp)
10106730:	e009883a 	mov	r4,fp
10106734:	01082340 	call	10108234 <_Bfree>
10106738:	d9000517 	ldw	r4,20(sp)
1010673c:	d9802317 	ldw	r6,140(sp)
10106740:	d9c02517 	ldw	r7,148(sp)
10106744:	b8000005 	stb	zero,0(r23)
10106748:	20800044 	addi	r2,r4,1
1010674c:	30800015 	stw	r2,0(r6)
10106750:	3802aa26 	beq	r7,zero,101071fc <_dtoa_r+0x1178>
10106754:	3dc00015 	stw	r23,0(r7)
10106758:	d8800717 	ldw	r2,28(sp)
1010675c:	003e7906 	br	10106144 <__alt_data_end+0xfffe6144>
10106760:	00800434 	movhi	r2,16
10106764:	10bfffc4 	addi	r2,r2,-1
10106768:	88a2703a 	and	r17,r17,r2
1010676c:	883e851e 	bne	r17,zero,10106184 <__alt_data_end+0xfffe6184>
10106770:	00840474 	movhi	r2,4113
10106774:	10841c04 	addi	r2,r2,4208
10106778:	003e8406 	br	1010618c <__alt_data_end+0xfffe618c>
1010677c:	10c00204 	addi	r3,r2,8
10106780:	003e8706 	br	101061a0 <__alt_data_end+0xfffe61a0>
10106784:	01400434 	movhi	r5,16
10106788:	297fffc4 	addi	r5,r5,-1
1010678c:	994a703a 	and	r5,r19,r5
10106790:	9009883a 	mov	r4,r18
10106794:	843f0044 	addi	r16,r16,-1023
10106798:	294ffc34 	orhi	r5,r5,16368
1010679c:	dd800217 	ldw	r22,8(sp)
101067a0:	d8001115 	stw	zero,68(sp)
101067a4:	003ea506 	br	1010623c <__alt_data_end+0xfffe623c>
101067a8:	00840474 	movhi	r2,4113
101067ac:	10841304 	addi	r2,r2,4172
101067b0:	003e6406 	br	10106144 <__alt_data_end+0xfffe6144>
101067b4:	e0001115 	stw	zero,68(fp)
101067b8:	000b883a 	mov	r5,zero
101067bc:	e009883a 	mov	r4,fp
101067c0:	010818c0 	call	1010818c <_Balloc>
101067c4:	01bfffc4 	movi	r6,-1
101067c8:	01c00044 	movi	r7,1
101067cc:	d8800715 	stw	r2,28(sp)
101067d0:	d9800c15 	stw	r6,48(sp)
101067d4:	e0801015 	stw	r2,64(fp)
101067d8:	d8000315 	stw	zero,12(sp)
101067dc:	d9c00b15 	stw	r7,44(sp)
101067e0:	d9800615 	stw	r6,24(sp)
101067e4:	d8002215 	stw	zero,136(sp)
101067e8:	d8800117 	ldw	r2,4(sp)
101067ec:	10008916 	blt	r2,zero,10106a14 <_dtoa_r+0x990>
101067f0:	d9000517 	ldw	r4,20(sp)
101067f4:	00c00384 	movi	r3,14
101067f8:	19008616 	blt	r3,r4,10106a14 <_dtoa_r+0x990>
101067fc:	200490fa 	slli	r2,r4,3
10106800:	00c40474 	movhi	r3,4113
10106804:	d9802217 	ldw	r6,136(sp)
10106808:	18c43a04 	addi	r3,r3,4328
1010680c:	1885883a 	add	r2,r3,r2
10106810:	14000017 	ldw	r16,0(r2)
10106814:	14400117 	ldw	r17,4(r2)
10106818:	30016316 	blt	r6,zero,10106da8 <_dtoa_r+0xd24>
1010681c:	800d883a 	mov	r6,r16
10106820:	880f883a 	mov	r7,r17
10106824:	9009883a 	mov	r4,r18
10106828:	980b883a 	mov	r5,r19
1010682c:	010c8e40 	call	1010c8e4 <__divdf3>
10106830:	180b883a 	mov	r5,r3
10106834:	1009883a 	mov	r4,r2
10106838:	010e4380 	call	1010e438 <__fixdfsi>
1010683c:	1009883a 	mov	r4,r2
10106840:	102b883a 	mov	r21,r2
10106844:	010e4b80 	call	1010e4b8 <__floatsidf>
10106848:	800d883a 	mov	r6,r16
1010684c:	880f883a 	mov	r7,r17
10106850:	1009883a 	mov	r4,r2
10106854:	180b883a 	mov	r5,r3
10106858:	010d4240 	call	1010d424 <__muldf3>
1010685c:	100d883a 	mov	r6,r2
10106860:	180f883a 	mov	r7,r3
10106864:	9009883a 	mov	r4,r18
10106868:	980b883a 	mov	r5,r19
1010686c:	010db3c0 	call	1010db3c <__subdf3>
10106870:	d9c00717 	ldw	r7,28(sp)
10106874:	1009883a 	mov	r4,r2
10106878:	a8800c04 	addi	r2,r21,48
1010687c:	38800005 	stb	r2,0(r7)
10106880:	3dc00044 	addi	r23,r7,1
10106884:	d9c00617 	ldw	r7,24(sp)
10106888:	01800044 	movi	r6,1
1010688c:	180b883a 	mov	r5,r3
10106890:	2005883a 	mov	r2,r4
10106894:	39803826 	beq	r7,r6,10106978 <_dtoa_r+0x8f4>
10106898:	000d883a 	mov	r6,zero
1010689c:	01d00934 	movhi	r7,16420
101068a0:	010d4240 	call	1010d424 <__muldf3>
101068a4:	000d883a 	mov	r6,zero
101068a8:	000f883a 	mov	r7,zero
101068ac:	1009883a 	mov	r4,r2
101068b0:	180b883a 	mov	r5,r3
101068b4:	1025883a 	mov	r18,r2
101068b8:	1827883a 	mov	r19,r3
101068bc:	010d1cc0 	call	1010d1cc <__eqdf2>
101068c0:	103f9a26 	beq	r2,zero,1010672c <__alt_data_end+0xfffe672c>
101068c4:	d9c00617 	ldw	r7,24(sp)
101068c8:	d8c00717 	ldw	r3,28(sp)
101068cc:	b829883a 	mov	r20,r23
101068d0:	38bfffc4 	addi	r2,r7,-1
101068d4:	18ad883a 	add	r22,r3,r2
101068d8:	00000a06 	br	10106904 <_dtoa_r+0x880>
101068dc:	010d4240 	call	1010d424 <__muldf3>
101068e0:	000d883a 	mov	r6,zero
101068e4:	000f883a 	mov	r7,zero
101068e8:	1009883a 	mov	r4,r2
101068ec:	180b883a 	mov	r5,r3
101068f0:	1025883a 	mov	r18,r2
101068f4:	1827883a 	mov	r19,r3
101068f8:	b829883a 	mov	r20,r23
101068fc:	010d1cc0 	call	1010d1cc <__eqdf2>
10106900:	103f8a26 	beq	r2,zero,1010672c <__alt_data_end+0xfffe672c>
10106904:	800d883a 	mov	r6,r16
10106908:	880f883a 	mov	r7,r17
1010690c:	9009883a 	mov	r4,r18
10106910:	980b883a 	mov	r5,r19
10106914:	010c8e40 	call	1010c8e4 <__divdf3>
10106918:	180b883a 	mov	r5,r3
1010691c:	1009883a 	mov	r4,r2
10106920:	010e4380 	call	1010e438 <__fixdfsi>
10106924:	1009883a 	mov	r4,r2
10106928:	102b883a 	mov	r21,r2
1010692c:	010e4b80 	call	1010e4b8 <__floatsidf>
10106930:	800d883a 	mov	r6,r16
10106934:	880f883a 	mov	r7,r17
10106938:	1009883a 	mov	r4,r2
1010693c:	180b883a 	mov	r5,r3
10106940:	010d4240 	call	1010d424 <__muldf3>
10106944:	100d883a 	mov	r6,r2
10106948:	180f883a 	mov	r7,r3
1010694c:	9009883a 	mov	r4,r18
10106950:	980b883a 	mov	r5,r19
10106954:	010db3c0 	call	1010db3c <__subdf3>
10106958:	aa000c04 	addi	r8,r21,48
1010695c:	a2000005 	stb	r8,0(r20)
10106960:	000d883a 	mov	r6,zero
10106964:	01d00934 	movhi	r7,16420
10106968:	1009883a 	mov	r4,r2
1010696c:	180b883a 	mov	r5,r3
10106970:	a5c00044 	addi	r23,r20,1
10106974:	b53fd91e 	bne	r22,r20,101068dc <__alt_data_end+0xfffe68dc>
10106978:	100d883a 	mov	r6,r2
1010697c:	180f883a 	mov	r7,r3
10106980:	1009883a 	mov	r4,r2
10106984:	180b883a 	mov	r5,r3
10106988:	010c0380 	call	1010c038 <__adddf3>
1010698c:	100d883a 	mov	r6,r2
10106990:	180f883a 	mov	r7,r3
10106994:	8009883a 	mov	r4,r16
10106998:	880b883a 	mov	r5,r17
1010699c:	1027883a 	mov	r19,r2
101069a0:	1825883a 	mov	r18,r3
101069a4:	010d3300 	call	1010d330 <__ledf2>
101069a8:	10000816 	blt	r2,zero,101069cc <_dtoa_r+0x948>
101069ac:	980d883a 	mov	r6,r19
101069b0:	900f883a 	mov	r7,r18
101069b4:	8009883a 	mov	r4,r16
101069b8:	880b883a 	mov	r5,r17
101069bc:	010d1cc0 	call	1010d1cc <__eqdf2>
101069c0:	103f5a1e 	bne	r2,zero,1010672c <__alt_data_end+0xfffe672c>
101069c4:	ad40004c 	andi	r21,r21,1
101069c8:	a83f5826 	beq	r21,zero,1010672c <__alt_data_end+0xfffe672c>
101069cc:	bd3fffc3 	ldbu	r20,-1(r23)
101069d0:	b8bfffc4 	addi	r2,r23,-1
101069d4:	1007883a 	mov	r3,r2
101069d8:	01400e44 	movi	r5,57
101069dc:	d9800717 	ldw	r6,28(sp)
101069e0:	00000506 	br	101069f8 <_dtoa_r+0x974>
101069e4:	18ffffc4 	addi	r3,r3,-1
101069e8:	11824726 	beq	r2,r6,10107308 <_dtoa_r+0x1284>
101069ec:	1d000003 	ldbu	r20,0(r3)
101069f0:	102f883a 	mov	r23,r2
101069f4:	10bfffc4 	addi	r2,r2,-1
101069f8:	a1003fcc 	andi	r4,r20,255
101069fc:	2100201c 	xori	r4,r4,128
10106a00:	213fe004 	addi	r4,r4,-128
10106a04:	217ff726 	beq	r4,r5,101069e4 <__alt_data_end+0xfffe69e4>
10106a08:	a2000044 	addi	r8,r20,1
10106a0c:	12000005 	stb	r8,0(r2)
10106a10:	003f4606 	br	1010672c <__alt_data_end+0xfffe672c>
10106a14:	d9000b17 	ldw	r4,44(sp)
10106a18:	2000c826 	beq	r4,zero,10106d3c <_dtoa_r+0xcb8>
10106a1c:	d9800317 	ldw	r6,12(sp)
10106a20:	00c00044 	movi	r3,1
10106a24:	1980f90e 	bge	r3,r6,10106e0c <_dtoa_r+0xd88>
10106a28:	d8800617 	ldw	r2,24(sp)
10106a2c:	d8c00a17 	ldw	r3,40(sp)
10106a30:	157fffc4 	addi	r21,r2,-1
10106a34:	1d41f316 	blt	r3,r21,10107204 <_dtoa_r+0x1180>
10106a38:	1d6bc83a 	sub	r21,r3,r21
10106a3c:	d9c00617 	ldw	r7,24(sp)
10106a40:	3802aa16 	blt	r7,zero,101074ec <_dtoa_r+0x1468>
10106a44:	dd000817 	ldw	r20,32(sp)
10106a48:	d8800617 	ldw	r2,24(sp)
10106a4c:	d8c00817 	ldw	r3,32(sp)
10106a50:	01400044 	movi	r5,1
10106a54:	e009883a 	mov	r4,fp
10106a58:	1887883a 	add	r3,r3,r2
10106a5c:	d8c00815 	stw	r3,32(sp)
10106a60:	b0ad883a 	add	r22,r22,r2
10106a64:	01085980 	call	10108598 <__i2b>
10106a68:	1023883a 	mov	r17,r2
10106a6c:	a0000826 	beq	r20,zero,10106a90 <_dtoa_r+0xa0c>
10106a70:	0580070e 	bge	zero,r22,10106a90 <_dtoa_r+0xa0c>
10106a74:	a005883a 	mov	r2,r20
10106a78:	b500b916 	blt	r22,r20,10106d60 <_dtoa_r+0xcdc>
10106a7c:	d9000817 	ldw	r4,32(sp)
10106a80:	a0a9c83a 	sub	r20,r20,r2
10106a84:	b0adc83a 	sub	r22,r22,r2
10106a88:	2089c83a 	sub	r4,r4,r2
10106a8c:	d9000815 	stw	r4,32(sp)
10106a90:	d9800a17 	ldw	r6,40(sp)
10106a94:	0181810e 	bge	zero,r6,1010709c <_dtoa_r+0x1018>
10106a98:	d9c00b17 	ldw	r7,44(sp)
10106a9c:	3800b326 	beq	r7,zero,10106d6c <_dtoa_r+0xce8>
10106aa0:	a800b226 	beq	r21,zero,10106d6c <_dtoa_r+0xce8>
10106aa4:	880b883a 	mov	r5,r17
10106aa8:	a80d883a 	mov	r6,r21
10106aac:	e009883a 	mov	r4,fp
10106ab0:	01087cc0 	call	101087cc <__pow5mult>
10106ab4:	d9800917 	ldw	r6,36(sp)
10106ab8:	100b883a 	mov	r5,r2
10106abc:	e009883a 	mov	r4,fp
10106ac0:	1023883a 	mov	r17,r2
10106ac4:	01085d40 	call	101085d4 <__multiply>
10106ac8:	1021883a 	mov	r16,r2
10106acc:	d8800a17 	ldw	r2,40(sp)
10106ad0:	d9400917 	ldw	r5,36(sp)
10106ad4:	e009883a 	mov	r4,fp
10106ad8:	1545c83a 	sub	r2,r2,r21
10106adc:	d8800a15 	stw	r2,40(sp)
10106ae0:	01082340 	call	10108234 <_Bfree>
10106ae4:	d8c00a17 	ldw	r3,40(sp)
10106ae8:	18009f1e 	bne	r3,zero,10106d68 <_dtoa_r+0xce4>
10106aec:	05c00044 	movi	r23,1
10106af0:	e009883a 	mov	r4,fp
10106af4:	b80b883a 	mov	r5,r23
10106af8:	01085980 	call	10108598 <__i2b>
10106afc:	d9000d17 	ldw	r4,52(sp)
10106b00:	102b883a 	mov	r21,r2
10106b04:	2000ce26 	beq	r4,zero,10106e40 <_dtoa_r+0xdbc>
10106b08:	200d883a 	mov	r6,r4
10106b0c:	100b883a 	mov	r5,r2
10106b10:	e009883a 	mov	r4,fp
10106b14:	01087cc0 	call	101087cc <__pow5mult>
10106b18:	d9800317 	ldw	r6,12(sp)
10106b1c:	102b883a 	mov	r21,r2
10106b20:	b981810e 	bge	r23,r6,10107128 <_dtoa_r+0x10a4>
10106b24:	0027883a 	mov	r19,zero
10106b28:	a8800417 	ldw	r2,16(r21)
10106b2c:	05c00804 	movi	r23,32
10106b30:	10800104 	addi	r2,r2,4
10106b34:	1085883a 	add	r2,r2,r2
10106b38:	1085883a 	add	r2,r2,r2
10106b3c:	a885883a 	add	r2,r21,r2
10106b40:	11000017 	ldw	r4,0(r2)
10106b44:	01084800 	call	10108480 <__hi0bits>
10106b48:	b885c83a 	sub	r2,r23,r2
10106b4c:	1585883a 	add	r2,r2,r22
10106b50:	108007cc 	andi	r2,r2,31
10106b54:	1000b326 	beq	r2,zero,10106e24 <_dtoa_r+0xda0>
10106b58:	00c00804 	movi	r3,32
10106b5c:	1887c83a 	sub	r3,r3,r2
10106b60:	01000104 	movi	r4,4
10106b64:	20c2cd0e 	bge	r4,r3,1010769c <_dtoa_r+0x1618>
10106b68:	00c00704 	movi	r3,28
10106b6c:	1885c83a 	sub	r2,r3,r2
10106b70:	d8c00817 	ldw	r3,32(sp)
10106b74:	a0a9883a 	add	r20,r20,r2
10106b78:	b0ad883a 	add	r22,r22,r2
10106b7c:	1887883a 	add	r3,r3,r2
10106b80:	d8c00815 	stw	r3,32(sp)
10106b84:	d9800817 	ldw	r6,32(sp)
10106b88:	0180040e 	bge	zero,r6,10106b9c <_dtoa_r+0xb18>
10106b8c:	800b883a 	mov	r5,r16
10106b90:	e009883a 	mov	r4,fp
10106b94:	010890c0 	call	1010890c <__lshift>
10106b98:	1021883a 	mov	r16,r2
10106b9c:	0580050e 	bge	zero,r22,10106bb4 <_dtoa_r+0xb30>
10106ba0:	a80b883a 	mov	r5,r21
10106ba4:	b00d883a 	mov	r6,r22
10106ba8:	e009883a 	mov	r4,fp
10106bac:	010890c0 	call	1010890c <__lshift>
10106bb0:	102b883a 	mov	r21,r2
10106bb4:	d9c00e17 	ldw	r7,56(sp)
10106bb8:	3801211e 	bne	r7,zero,10107040 <_dtoa_r+0xfbc>
10106bbc:	d9800617 	ldw	r6,24(sp)
10106bc0:	0181380e 	bge	zero,r6,101070a4 <_dtoa_r+0x1020>
10106bc4:	d8c00b17 	ldw	r3,44(sp)
10106bc8:	1800ab1e 	bne	r3,zero,10106e78 <_dtoa_r+0xdf4>
10106bcc:	dc800717 	ldw	r18,28(sp)
10106bd0:	dcc00617 	ldw	r19,24(sp)
10106bd4:	9029883a 	mov	r20,r18
10106bd8:	00000206 	br	10106be4 <_dtoa_r+0xb60>
10106bdc:	010825c0 	call	1010825c <__multadd>
10106be0:	1021883a 	mov	r16,r2
10106be4:	a80b883a 	mov	r5,r21
10106be8:	8009883a 	mov	r4,r16
10106bec:	0105e840 	call	10105e84 <quorem>
10106bf0:	10800c04 	addi	r2,r2,48
10106bf4:	90800005 	stb	r2,0(r18)
10106bf8:	94800044 	addi	r18,r18,1
10106bfc:	9507c83a 	sub	r3,r18,r20
10106c00:	000f883a 	mov	r7,zero
10106c04:	01800284 	movi	r6,10
10106c08:	800b883a 	mov	r5,r16
10106c0c:	e009883a 	mov	r4,fp
10106c10:	1cfff216 	blt	r3,r19,10106bdc <__alt_data_end+0xfffe6bdc>
10106c14:	1011883a 	mov	r8,r2
10106c18:	d8800617 	ldw	r2,24(sp)
10106c1c:	0082370e 	bge	zero,r2,101074fc <_dtoa_r+0x1478>
10106c20:	d9000717 	ldw	r4,28(sp)
10106c24:	0025883a 	mov	r18,zero
10106c28:	20af883a 	add	r23,r4,r2
10106c2c:	01800044 	movi	r6,1
10106c30:	800b883a 	mov	r5,r16
10106c34:	e009883a 	mov	r4,fp
10106c38:	da001715 	stw	r8,92(sp)
10106c3c:	010890c0 	call	1010890c <__lshift>
10106c40:	a80b883a 	mov	r5,r21
10106c44:	1009883a 	mov	r4,r2
10106c48:	d8800915 	stw	r2,36(sp)
10106c4c:	0108a540 	call	10108a54 <__mcmp>
10106c50:	da001717 	ldw	r8,92(sp)
10106c54:	0081800e 	bge	zero,r2,10107258 <_dtoa_r+0x11d4>
10106c58:	b93fffc3 	ldbu	r4,-1(r23)
10106c5c:	b8bfffc4 	addi	r2,r23,-1
10106c60:	1007883a 	mov	r3,r2
10106c64:	01800e44 	movi	r6,57
10106c68:	d9c00717 	ldw	r7,28(sp)
10106c6c:	00000506 	br	10106c84 <_dtoa_r+0xc00>
10106c70:	18ffffc4 	addi	r3,r3,-1
10106c74:	11c12326 	beq	r2,r7,10107104 <_dtoa_r+0x1080>
10106c78:	19000003 	ldbu	r4,0(r3)
10106c7c:	102f883a 	mov	r23,r2
10106c80:	10bfffc4 	addi	r2,r2,-1
10106c84:	21403fcc 	andi	r5,r4,255
10106c88:	2940201c 	xori	r5,r5,128
10106c8c:	297fe004 	addi	r5,r5,-128
10106c90:	29bff726 	beq	r5,r6,10106c70 <__alt_data_end+0xfffe6c70>
10106c94:	21000044 	addi	r4,r4,1
10106c98:	11000005 	stb	r4,0(r2)
10106c9c:	a80b883a 	mov	r5,r21
10106ca0:	e009883a 	mov	r4,fp
10106ca4:	01082340 	call	10108234 <_Bfree>
10106ca8:	883ea026 	beq	r17,zero,1010672c <__alt_data_end+0xfffe672c>
10106cac:	90000426 	beq	r18,zero,10106cc0 <_dtoa_r+0xc3c>
10106cb0:	94400326 	beq	r18,r17,10106cc0 <_dtoa_r+0xc3c>
10106cb4:	900b883a 	mov	r5,r18
10106cb8:	e009883a 	mov	r4,fp
10106cbc:	01082340 	call	10108234 <_Bfree>
10106cc0:	880b883a 	mov	r5,r17
10106cc4:	e009883a 	mov	r4,fp
10106cc8:	01082340 	call	10108234 <_Bfree>
10106ccc:	003e9706 	br	1010672c <__alt_data_end+0xfffe672c>
10106cd0:	01800044 	movi	r6,1
10106cd4:	d9800e15 	stw	r6,56(sp)
10106cd8:	003d9606 	br	10106334 <__alt_data_end+0xfffe6334>
10106cdc:	d8800817 	ldw	r2,32(sp)
10106ce0:	d8c00517 	ldw	r3,20(sp)
10106ce4:	d8000d15 	stw	zero,52(sp)
10106ce8:	10c5c83a 	sub	r2,r2,r3
10106cec:	00c9c83a 	sub	r4,zero,r3
10106cf0:	d8800815 	stw	r2,32(sp)
10106cf4:	d9000a15 	stw	r4,40(sp)
10106cf8:	003d9706 	br	10106358 <__alt_data_end+0xfffe6358>
10106cfc:	05adc83a 	sub	r22,zero,r22
10106d00:	dd800815 	stw	r22,32(sp)
10106d04:	002d883a 	mov	r22,zero
10106d08:	003d8e06 	br	10106344 <__alt_data_end+0xfffe6344>
10106d0c:	d9000517 	ldw	r4,20(sp)
10106d10:	010e4b80 	call	1010e4b8 <__floatsidf>
10106d14:	100d883a 	mov	r6,r2
10106d18:	180f883a 	mov	r7,r3
10106d1c:	a009883a 	mov	r4,r20
10106d20:	880b883a 	mov	r5,r17
10106d24:	010d1cc0 	call	1010d1cc <__eqdf2>
10106d28:	103d7126 	beq	r2,zero,101062f0 <__alt_data_end+0xfffe62f0>
10106d2c:	d9c00517 	ldw	r7,20(sp)
10106d30:	39ffffc4 	addi	r7,r7,-1
10106d34:	d9c00515 	stw	r7,20(sp)
10106d38:	003d6d06 	br	101062f0 <__alt_data_end+0xfffe62f0>
10106d3c:	dd400a17 	ldw	r21,40(sp)
10106d40:	dd000817 	ldw	r20,32(sp)
10106d44:	0023883a 	mov	r17,zero
10106d48:	003f4806 	br	10106a6c <__alt_data_end+0xfffe6a6c>
10106d4c:	10e3c83a 	sub	r17,r2,r3
10106d50:	9448983a 	sll	r4,r18,r17
10106d54:	003d3206 	br	10106220 <__alt_data_end+0xfffe6220>
10106d58:	d8000e15 	stw	zero,56(sp)
10106d5c:	003d7506 	br	10106334 <__alt_data_end+0xfffe6334>
10106d60:	b005883a 	mov	r2,r22
10106d64:	003f4506 	br	10106a7c <__alt_data_end+0xfffe6a7c>
10106d68:	dc000915 	stw	r16,36(sp)
10106d6c:	d9800a17 	ldw	r6,40(sp)
10106d70:	d9400917 	ldw	r5,36(sp)
10106d74:	e009883a 	mov	r4,fp
10106d78:	01087cc0 	call	101087cc <__pow5mult>
10106d7c:	1021883a 	mov	r16,r2
10106d80:	003f5a06 	br	10106aec <__alt_data_end+0xfffe6aec>
10106d84:	01c00044 	movi	r7,1
10106d88:	d9c00b15 	stw	r7,44(sp)
10106d8c:	d8802217 	ldw	r2,136(sp)
10106d90:	0081280e 	bge	zero,r2,10107234 <_dtoa_r+0x11b0>
10106d94:	100d883a 	mov	r6,r2
10106d98:	1021883a 	mov	r16,r2
10106d9c:	d8800c15 	stw	r2,48(sp)
10106da0:	d8800615 	stw	r2,24(sp)
10106da4:	003d8806 	br	101063c8 <__alt_data_end+0xfffe63c8>
10106da8:	d8800617 	ldw	r2,24(sp)
10106dac:	00be9b16 	blt	zero,r2,1010681c <__alt_data_end+0xfffe681c>
10106db0:	10010f1e 	bne	r2,zero,101071f0 <_dtoa_r+0x116c>
10106db4:	880b883a 	mov	r5,r17
10106db8:	000d883a 	mov	r6,zero
10106dbc:	01d00534 	movhi	r7,16404
10106dc0:	8009883a 	mov	r4,r16
10106dc4:	010d4240 	call	1010d424 <__muldf3>
10106dc8:	900d883a 	mov	r6,r18
10106dcc:	980f883a 	mov	r7,r19
10106dd0:	1009883a 	mov	r4,r2
10106dd4:	180b883a 	mov	r5,r3
10106dd8:	010d2540 	call	1010d254 <__gedf2>
10106ddc:	002b883a 	mov	r21,zero
10106de0:	0023883a 	mov	r17,zero
10106de4:	1000bf16 	blt	r2,zero,101070e4 <_dtoa_r+0x1060>
10106de8:	d9802217 	ldw	r6,136(sp)
10106dec:	ddc00717 	ldw	r23,28(sp)
10106df0:	018c303a 	nor	r6,zero,r6
10106df4:	d9800515 	stw	r6,20(sp)
10106df8:	a80b883a 	mov	r5,r21
10106dfc:	e009883a 	mov	r4,fp
10106e00:	01082340 	call	10108234 <_Bfree>
10106e04:	883e4926 	beq	r17,zero,1010672c <__alt_data_end+0xfffe672c>
10106e08:	003fad06 	br	10106cc0 <__alt_data_end+0xfffe6cc0>
10106e0c:	d9c01117 	ldw	r7,68(sp)
10106e10:	3801bc26 	beq	r7,zero,10107504 <_dtoa_r+0x1480>
10106e14:	10810cc4 	addi	r2,r2,1075
10106e18:	dd400a17 	ldw	r21,40(sp)
10106e1c:	dd000817 	ldw	r20,32(sp)
10106e20:	003f0a06 	br	10106a4c <__alt_data_end+0xfffe6a4c>
10106e24:	00800704 	movi	r2,28
10106e28:	d9000817 	ldw	r4,32(sp)
10106e2c:	a0a9883a 	add	r20,r20,r2
10106e30:	b0ad883a 	add	r22,r22,r2
10106e34:	2089883a 	add	r4,r4,r2
10106e38:	d9000815 	stw	r4,32(sp)
10106e3c:	003f5106 	br	10106b84 <__alt_data_end+0xfffe6b84>
10106e40:	d8c00317 	ldw	r3,12(sp)
10106e44:	b8c1fc0e 	bge	r23,r3,10107638 <_dtoa_r+0x15b4>
10106e48:	0027883a 	mov	r19,zero
10106e4c:	b805883a 	mov	r2,r23
10106e50:	003f3e06 	br	10106b4c <__alt_data_end+0xfffe6b4c>
10106e54:	880b883a 	mov	r5,r17
10106e58:	e009883a 	mov	r4,fp
10106e5c:	000f883a 	mov	r7,zero
10106e60:	01800284 	movi	r6,10
10106e64:	010825c0 	call	1010825c <__multadd>
10106e68:	d9000c17 	ldw	r4,48(sp)
10106e6c:	1023883a 	mov	r17,r2
10106e70:	0102040e 	bge	zero,r4,10107684 <_dtoa_r+0x1600>
10106e74:	d9000615 	stw	r4,24(sp)
10106e78:	0500050e 	bge	zero,r20,10106e90 <_dtoa_r+0xe0c>
10106e7c:	880b883a 	mov	r5,r17
10106e80:	a00d883a 	mov	r6,r20
10106e84:	e009883a 	mov	r4,fp
10106e88:	010890c0 	call	1010890c <__lshift>
10106e8c:	1023883a 	mov	r17,r2
10106e90:	9801241e 	bne	r19,zero,10107324 <_dtoa_r+0x12a0>
10106e94:	8829883a 	mov	r20,r17
10106e98:	d9000617 	ldw	r4,24(sp)
10106e9c:	dcc00717 	ldw	r19,28(sp)
10106ea0:	9480004c 	andi	r18,r18,1
10106ea4:	20bfffc4 	addi	r2,r4,-1
10106ea8:	9885883a 	add	r2,r19,r2
10106eac:	d8800415 	stw	r2,16(sp)
10106eb0:	dc800615 	stw	r18,24(sp)
10106eb4:	a80b883a 	mov	r5,r21
10106eb8:	8009883a 	mov	r4,r16
10106ebc:	0105e840 	call	10105e84 <quorem>
10106ec0:	880b883a 	mov	r5,r17
10106ec4:	8009883a 	mov	r4,r16
10106ec8:	102f883a 	mov	r23,r2
10106ecc:	0108a540 	call	10108a54 <__mcmp>
10106ed0:	a80b883a 	mov	r5,r21
10106ed4:	a00d883a 	mov	r6,r20
10106ed8:	e009883a 	mov	r4,fp
10106edc:	102d883a 	mov	r22,r2
10106ee0:	0108ab40 	call	10108ab4 <__mdiff>
10106ee4:	1007883a 	mov	r3,r2
10106ee8:	10800317 	ldw	r2,12(r2)
10106eec:	bc800c04 	addi	r18,r23,48
10106ef0:	180b883a 	mov	r5,r3
10106ef4:	10004e1e 	bne	r2,zero,10107030 <_dtoa_r+0xfac>
10106ef8:	8009883a 	mov	r4,r16
10106efc:	d8c01615 	stw	r3,88(sp)
10106f00:	0108a540 	call	10108a54 <__mcmp>
10106f04:	d8c01617 	ldw	r3,88(sp)
10106f08:	e009883a 	mov	r4,fp
10106f0c:	d8801615 	stw	r2,88(sp)
10106f10:	180b883a 	mov	r5,r3
10106f14:	01082340 	call	10108234 <_Bfree>
10106f18:	d8801617 	ldw	r2,88(sp)
10106f1c:	1000041e 	bne	r2,zero,10106f30 <_dtoa_r+0xeac>
10106f20:	d9800317 	ldw	r6,12(sp)
10106f24:	3000021e 	bne	r6,zero,10106f30 <_dtoa_r+0xeac>
10106f28:	d8c00617 	ldw	r3,24(sp)
10106f2c:	18003726 	beq	r3,zero,1010700c <_dtoa_r+0xf88>
10106f30:	b0002016 	blt	r22,zero,10106fb4 <_dtoa_r+0xf30>
10106f34:	b000041e 	bne	r22,zero,10106f48 <_dtoa_r+0xec4>
10106f38:	d9000317 	ldw	r4,12(sp)
10106f3c:	2000021e 	bne	r4,zero,10106f48 <_dtoa_r+0xec4>
10106f40:	d8c00617 	ldw	r3,24(sp)
10106f44:	18001b26 	beq	r3,zero,10106fb4 <_dtoa_r+0xf30>
10106f48:	00810716 	blt	zero,r2,10107368 <_dtoa_r+0x12e4>
10106f4c:	d8c00417 	ldw	r3,16(sp)
10106f50:	9d800044 	addi	r22,r19,1
10106f54:	9c800005 	stb	r18,0(r19)
10106f58:	b02f883a 	mov	r23,r22
10106f5c:	98c10626 	beq	r19,r3,10107378 <_dtoa_r+0x12f4>
10106f60:	800b883a 	mov	r5,r16
10106f64:	000f883a 	mov	r7,zero
10106f68:	01800284 	movi	r6,10
10106f6c:	e009883a 	mov	r4,fp
10106f70:	010825c0 	call	1010825c <__multadd>
10106f74:	1021883a 	mov	r16,r2
10106f78:	000f883a 	mov	r7,zero
10106f7c:	01800284 	movi	r6,10
10106f80:	880b883a 	mov	r5,r17
10106f84:	e009883a 	mov	r4,fp
10106f88:	8d002526 	beq	r17,r20,10107020 <_dtoa_r+0xf9c>
10106f8c:	010825c0 	call	1010825c <__multadd>
10106f90:	a00b883a 	mov	r5,r20
10106f94:	000f883a 	mov	r7,zero
10106f98:	01800284 	movi	r6,10
10106f9c:	e009883a 	mov	r4,fp
10106fa0:	1023883a 	mov	r17,r2
10106fa4:	010825c0 	call	1010825c <__multadd>
10106fa8:	1029883a 	mov	r20,r2
10106fac:	b027883a 	mov	r19,r22
10106fb0:	003fc006 	br	10106eb4 <__alt_data_end+0xfffe6eb4>
10106fb4:	9011883a 	mov	r8,r18
10106fb8:	00800e0e 	bge	zero,r2,10106ff4 <_dtoa_r+0xf70>
10106fbc:	800b883a 	mov	r5,r16
10106fc0:	01800044 	movi	r6,1
10106fc4:	e009883a 	mov	r4,fp
10106fc8:	da001715 	stw	r8,92(sp)
10106fcc:	010890c0 	call	1010890c <__lshift>
10106fd0:	a80b883a 	mov	r5,r21
10106fd4:	1009883a 	mov	r4,r2
10106fd8:	1021883a 	mov	r16,r2
10106fdc:	0108a540 	call	10108a54 <__mcmp>
10106fe0:	da001717 	ldw	r8,92(sp)
10106fe4:	0081960e 	bge	zero,r2,10107640 <_dtoa_r+0x15bc>
10106fe8:	00800e44 	movi	r2,57
10106fec:	40817026 	beq	r8,r2,101075b0 <_dtoa_r+0x152c>
10106ff0:	ba000c44 	addi	r8,r23,49
10106ff4:	8825883a 	mov	r18,r17
10106ff8:	9dc00044 	addi	r23,r19,1
10106ffc:	9a000005 	stb	r8,0(r19)
10107000:	a023883a 	mov	r17,r20
10107004:	dc000915 	stw	r16,36(sp)
10107008:	003f2406 	br	10106c9c <__alt_data_end+0xfffe6c9c>
1010700c:	00800e44 	movi	r2,57
10107010:	9011883a 	mov	r8,r18
10107014:	90816626 	beq	r18,r2,101075b0 <_dtoa_r+0x152c>
10107018:	05bff516 	blt	zero,r22,10106ff0 <__alt_data_end+0xfffe6ff0>
1010701c:	003ff506 	br	10106ff4 <__alt_data_end+0xfffe6ff4>
10107020:	010825c0 	call	1010825c <__multadd>
10107024:	1023883a 	mov	r17,r2
10107028:	1029883a 	mov	r20,r2
1010702c:	003fdf06 	br	10106fac <__alt_data_end+0xfffe6fac>
10107030:	e009883a 	mov	r4,fp
10107034:	01082340 	call	10108234 <_Bfree>
10107038:	00800044 	movi	r2,1
1010703c:	003fbc06 	br	10106f30 <__alt_data_end+0xfffe6f30>
10107040:	a80b883a 	mov	r5,r21
10107044:	8009883a 	mov	r4,r16
10107048:	0108a540 	call	10108a54 <__mcmp>
1010704c:	103edb0e 	bge	r2,zero,10106bbc <__alt_data_end+0xfffe6bbc>
10107050:	800b883a 	mov	r5,r16
10107054:	000f883a 	mov	r7,zero
10107058:	01800284 	movi	r6,10
1010705c:	e009883a 	mov	r4,fp
10107060:	010825c0 	call	1010825c <__multadd>
10107064:	1021883a 	mov	r16,r2
10107068:	d8800517 	ldw	r2,20(sp)
1010706c:	d8c00b17 	ldw	r3,44(sp)
10107070:	10bfffc4 	addi	r2,r2,-1
10107074:	d8800515 	stw	r2,20(sp)
10107078:	183f761e 	bne	r3,zero,10106e54 <__alt_data_end+0xfffe6e54>
1010707c:	d9000c17 	ldw	r4,48(sp)
10107080:	0101730e 	bge	zero,r4,10107650 <_dtoa_r+0x15cc>
10107084:	d9000615 	stw	r4,24(sp)
10107088:	003ed006 	br	10106bcc <__alt_data_end+0xfffe6bcc>
1010708c:	00800084 	movi	r2,2
10107090:	3081861e 	bne	r6,r2,101076ac <_dtoa_r+0x1628>
10107094:	d8000b15 	stw	zero,44(sp)
10107098:	003f3c06 	br	10106d8c <__alt_data_end+0xfffe6d8c>
1010709c:	dc000917 	ldw	r16,36(sp)
101070a0:	003e9206 	br	10106aec <__alt_data_end+0xfffe6aec>
101070a4:	d9c00317 	ldw	r7,12(sp)
101070a8:	00800084 	movi	r2,2
101070ac:	11fec50e 	bge	r2,r7,10106bc4 <__alt_data_end+0xfffe6bc4>
101070b0:	d9000617 	ldw	r4,24(sp)
101070b4:	20013c1e 	bne	r4,zero,101075a8 <_dtoa_r+0x1524>
101070b8:	a80b883a 	mov	r5,r21
101070bc:	000f883a 	mov	r7,zero
101070c0:	01800144 	movi	r6,5
101070c4:	e009883a 	mov	r4,fp
101070c8:	010825c0 	call	1010825c <__multadd>
101070cc:	100b883a 	mov	r5,r2
101070d0:	8009883a 	mov	r4,r16
101070d4:	102b883a 	mov	r21,r2
101070d8:	0108a540 	call	10108a54 <__mcmp>
101070dc:	dc000915 	stw	r16,36(sp)
101070e0:	00bf410e 	bge	zero,r2,10106de8 <__alt_data_end+0xfffe6de8>
101070e4:	d9c00717 	ldw	r7,28(sp)
101070e8:	00800c44 	movi	r2,49
101070ec:	38800005 	stb	r2,0(r7)
101070f0:	d8800517 	ldw	r2,20(sp)
101070f4:	3dc00044 	addi	r23,r7,1
101070f8:	10800044 	addi	r2,r2,1
101070fc:	d8800515 	stw	r2,20(sp)
10107100:	003f3d06 	br	10106df8 <__alt_data_end+0xfffe6df8>
10107104:	d9800517 	ldw	r6,20(sp)
10107108:	d9c00717 	ldw	r7,28(sp)
1010710c:	00800c44 	movi	r2,49
10107110:	31800044 	addi	r6,r6,1
10107114:	d9800515 	stw	r6,20(sp)
10107118:	38800005 	stb	r2,0(r7)
1010711c:	003edf06 	br	10106c9c <__alt_data_end+0xfffe6c9c>
10107120:	d8000b15 	stw	zero,44(sp)
10107124:	003c9f06 	br	101063a4 <__alt_data_end+0xfffe63a4>
10107128:	903e7e1e 	bne	r18,zero,10106b24 <__alt_data_end+0xfffe6b24>
1010712c:	00800434 	movhi	r2,16
10107130:	10bfffc4 	addi	r2,r2,-1
10107134:	9884703a 	and	r2,r19,r2
10107138:	1000ea1e 	bne	r2,zero,101074e4 <_dtoa_r+0x1460>
1010713c:	9cdffc2c 	andhi	r19,r19,32752
10107140:	9800e826 	beq	r19,zero,101074e4 <_dtoa_r+0x1460>
10107144:	d9c00817 	ldw	r7,32(sp)
10107148:	b5800044 	addi	r22,r22,1
1010714c:	04c00044 	movi	r19,1
10107150:	39c00044 	addi	r7,r7,1
10107154:	d9c00815 	stw	r7,32(sp)
10107158:	d8800d17 	ldw	r2,52(sp)
1010715c:	103e721e 	bne	r2,zero,10106b28 <__alt_data_end+0xfffe6b28>
10107160:	00800044 	movi	r2,1
10107164:	003e7906 	br	10106b4c <__alt_data_end+0xfffe6b4c>
10107168:	8009883a 	mov	r4,r16
1010716c:	010e4b80 	call	1010e4b8 <__floatsidf>
10107170:	d9800f17 	ldw	r6,60(sp)
10107174:	d9c01017 	ldw	r7,64(sp)
10107178:	1009883a 	mov	r4,r2
1010717c:	180b883a 	mov	r5,r3
10107180:	010d4240 	call	1010d424 <__muldf3>
10107184:	000d883a 	mov	r6,zero
10107188:	01d00734 	movhi	r7,16412
1010718c:	1009883a 	mov	r4,r2
10107190:	180b883a 	mov	r5,r3
10107194:	010c0380 	call	1010c038 <__adddf3>
10107198:	047f3034 	movhi	r17,64704
1010719c:	1021883a 	mov	r16,r2
101071a0:	1c63883a 	add	r17,r3,r17
101071a4:	d9000f17 	ldw	r4,60(sp)
101071a8:	d9401017 	ldw	r5,64(sp)
101071ac:	000d883a 	mov	r6,zero
101071b0:	01d00534 	movhi	r7,16404
101071b4:	010db3c0 	call	1010db3c <__subdf3>
101071b8:	800d883a 	mov	r6,r16
101071bc:	880f883a 	mov	r7,r17
101071c0:	1009883a 	mov	r4,r2
101071c4:	180b883a 	mov	r5,r3
101071c8:	102b883a 	mov	r21,r2
101071cc:	1829883a 	mov	r20,r3
101071d0:	010d2540 	call	1010d254 <__gedf2>
101071d4:	00806c16 	blt	zero,r2,10107388 <_dtoa_r+0x1304>
101071d8:	89e0003c 	xorhi	r7,r17,32768
101071dc:	800d883a 	mov	r6,r16
101071e0:	a809883a 	mov	r4,r21
101071e4:	a00b883a 	mov	r5,r20
101071e8:	010d3300 	call	1010d330 <__ledf2>
101071ec:	103d7e0e 	bge	r2,zero,101067e8 <__alt_data_end+0xfffe67e8>
101071f0:	002b883a 	mov	r21,zero
101071f4:	0023883a 	mov	r17,zero
101071f8:	003efb06 	br	10106de8 <__alt_data_end+0xfffe6de8>
101071fc:	d8800717 	ldw	r2,28(sp)
10107200:	003bd006 	br	10106144 <__alt_data_end+0xfffe6144>
10107204:	d9000a17 	ldw	r4,40(sp)
10107208:	d9800d17 	ldw	r6,52(sp)
1010720c:	dd400a15 	stw	r21,40(sp)
10107210:	a905c83a 	sub	r2,r21,r4
10107214:	308d883a 	add	r6,r6,r2
10107218:	d9800d15 	stw	r6,52(sp)
1010721c:	002b883a 	mov	r21,zero
10107220:	003e0606 	br	10106a3c <__alt_data_end+0xfffe6a3c>
10107224:	9023883a 	mov	r17,r18
10107228:	9829883a 	mov	r20,r19
1010722c:	04000084 	movi	r16,2
10107230:	003c9206 	br	1010647c <__alt_data_end+0xfffe647c>
10107234:	04000044 	movi	r16,1
10107238:	dc000c15 	stw	r16,48(sp)
1010723c:	dc000615 	stw	r16,24(sp)
10107240:	dc002215 	stw	r16,136(sp)
10107244:	e0001115 	stw	zero,68(fp)
10107248:	000b883a 	mov	r5,zero
1010724c:	003c6906 	br	101063f4 <__alt_data_end+0xfffe63f4>
10107250:	3021883a 	mov	r16,r6
10107254:	003ffb06 	br	10107244 <__alt_data_end+0xfffe7244>
10107258:	1000021e 	bne	r2,zero,10107264 <_dtoa_r+0x11e0>
1010725c:	4200004c 	andi	r8,r8,1
10107260:	403e7d1e 	bne	r8,zero,10106c58 <__alt_data_end+0xfffe6c58>
10107264:	01000c04 	movi	r4,48
10107268:	00000106 	br	10107270 <_dtoa_r+0x11ec>
1010726c:	102f883a 	mov	r23,r2
10107270:	b8bfffc4 	addi	r2,r23,-1
10107274:	10c00007 	ldb	r3,0(r2)
10107278:	193ffc26 	beq	r3,r4,1010726c <__alt_data_end+0xfffe726c>
1010727c:	003e8706 	br	10106c9c <__alt_data_end+0xfffe6c9c>
10107280:	d8800517 	ldw	r2,20(sp)
10107284:	00a3c83a 	sub	r17,zero,r2
10107288:	8800a426 	beq	r17,zero,1010751c <_dtoa_r+0x1498>
1010728c:	888003cc 	andi	r2,r17,15
10107290:	100490fa 	slli	r2,r2,3
10107294:	00c40474 	movhi	r3,4113
10107298:	18c43a04 	addi	r3,r3,4328
1010729c:	1885883a 	add	r2,r3,r2
101072a0:	11800017 	ldw	r6,0(r2)
101072a4:	11c00117 	ldw	r7,4(r2)
101072a8:	9009883a 	mov	r4,r18
101072ac:	980b883a 	mov	r5,r19
101072b0:	8823d13a 	srai	r17,r17,4
101072b4:	010d4240 	call	1010d424 <__muldf3>
101072b8:	d8800f15 	stw	r2,60(sp)
101072bc:	d8c01015 	stw	r3,64(sp)
101072c0:	8800e826 	beq	r17,zero,10107664 <_dtoa_r+0x15e0>
101072c4:	05040474 	movhi	r20,4113
101072c8:	a5043004 	addi	r20,r20,4288
101072cc:	04000084 	movi	r16,2
101072d0:	8980004c 	andi	r6,r17,1
101072d4:	1009883a 	mov	r4,r2
101072d8:	8823d07a 	srai	r17,r17,1
101072dc:	180b883a 	mov	r5,r3
101072e0:	30000426 	beq	r6,zero,101072f4 <_dtoa_r+0x1270>
101072e4:	a1800017 	ldw	r6,0(r20)
101072e8:	a1c00117 	ldw	r7,4(r20)
101072ec:	84000044 	addi	r16,r16,1
101072f0:	010d4240 	call	1010d424 <__muldf3>
101072f4:	a5000204 	addi	r20,r20,8
101072f8:	883ff51e 	bne	r17,zero,101072d0 <__alt_data_end+0xfffe72d0>
101072fc:	d8800f15 	stw	r2,60(sp)
10107300:	d8c01015 	stw	r3,64(sp)
10107304:	003c7606 	br	101064e0 <__alt_data_end+0xfffe64e0>
10107308:	00c00c04 	movi	r3,48
1010730c:	10c00005 	stb	r3,0(r2)
10107310:	d8c00517 	ldw	r3,20(sp)
10107314:	bd3fffc3 	ldbu	r20,-1(r23)
10107318:	18c00044 	addi	r3,r3,1
1010731c:	d8c00515 	stw	r3,20(sp)
10107320:	003db906 	br	10106a08 <__alt_data_end+0xfffe6a08>
10107324:	89400117 	ldw	r5,4(r17)
10107328:	e009883a 	mov	r4,fp
1010732c:	010818c0 	call	1010818c <_Balloc>
10107330:	89800417 	ldw	r6,16(r17)
10107334:	89400304 	addi	r5,r17,12
10107338:	11000304 	addi	r4,r2,12
1010733c:	31800084 	addi	r6,r6,2
10107340:	318d883a 	add	r6,r6,r6
10107344:	318d883a 	add	r6,r6,r6
10107348:	1027883a 	mov	r19,r2
1010734c:	0107ee80 	call	10107ee8 <memcpy>
10107350:	01800044 	movi	r6,1
10107354:	980b883a 	mov	r5,r19
10107358:	e009883a 	mov	r4,fp
1010735c:	010890c0 	call	1010890c <__lshift>
10107360:	1029883a 	mov	r20,r2
10107364:	003ecc06 	br	10106e98 <__alt_data_end+0xfffe6e98>
10107368:	00800e44 	movi	r2,57
1010736c:	90809026 	beq	r18,r2,101075b0 <_dtoa_r+0x152c>
10107370:	92000044 	addi	r8,r18,1
10107374:	003f1f06 	br	10106ff4 <__alt_data_end+0xfffe6ff4>
10107378:	9011883a 	mov	r8,r18
1010737c:	8825883a 	mov	r18,r17
10107380:	a023883a 	mov	r17,r20
10107384:	003e2906 	br	10106c2c <__alt_data_end+0xfffe6c2c>
10107388:	002b883a 	mov	r21,zero
1010738c:	0023883a 	mov	r17,zero
10107390:	003f5406 	br	101070e4 <__alt_data_end+0xfffe70e4>
10107394:	61bfffc4 	addi	r6,r12,-1
10107398:	300490fa 	slli	r2,r6,3
1010739c:	00c40474 	movhi	r3,4113
101073a0:	18c43a04 	addi	r3,r3,4328
101073a4:	1885883a 	add	r2,r3,r2
101073a8:	11000017 	ldw	r4,0(r2)
101073ac:	11400117 	ldw	r5,4(r2)
101073b0:	d8800717 	ldw	r2,28(sp)
101073b4:	880f883a 	mov	r7,r17
101073b8:	d9801215 	stw	r6,72(sp)
101073bc:	800d883a 	mov	r6,r16
101073c0:	db001615 	stw	r12,88(sp)
101073c4:	15c00044 	addi	r23,r2,1
101073c8:	010d4240 	call	1010d424 <__muldf3>
101073cc:	d9401017 	ldw	r5,64(sp)
101073d0:	d9000f17 	ldw	r4,60(sp)
101073d4:	d8c01515 	stw	r3,84(sp)
101073d8:	d8801415 	stw	r2,80(sp)
101073dc:	010e4380 	call	1010e438 <__fixdfsi>
101073e0:	1009883a 	mov	r4,r2
101073e4:	1021883a 	mov	r16,r2
101073e8:	010e4b80 	call	1010e4b8 <__floatsidf>
101073ec:	d9000f17 	ldw	r4,60(sp)
101073f0:	d9401017 	ldw	r5,64(sp)
101073f4:	100d883a 	mov	r6,r2
101073f8:	180f883a 	mov	r7,r3
101073fc:	010db3c0 	call	1010db3c <__subdf3>
10107400:	1829883a 	mov	r20,r3
10107404:	d8c00717 	ldw	r3,28(sp)
10107408:	84000c04 	addi	r16,r16,48
1010740c:	1023883a 	mov	r17,r2
10107410:	1c000005 	stb	r16,0(r3)
10107414:	db001617 	ldw	r12,88(sp)
10107418:	00800044 	movi	r2,1
1010741c:	60802226 	beq	r12,r2,101074a8 <_dtoa_r+0x1424>
10107420:	d9c00717 	ldw	r7,28(sp)
10107424:	8805883a 	mov	r2,r17
10107428:	b82b883a 	mov	r21,r23
1010742c:	3b19883a 	add	r12,r7,r12
10107430:	6023883a 	mov	r17,r12
10107434:	a007883a 	mov	r3,r20
10107438:	dc800f15 	stw	r18,60(sp)
1010743c:	000d883a 	mov	r6,zero
10107440:	01d00934 	movhi	r7,16420
10107444:	1009883a 	mov	r4,r2
10107448:	180b883a 	mov	r5,r3
1010744c:	010d4240 	call	1010d424 <__muldf3>
10107450:	180b883a 	mov	r5,r3
10107454:	1009883a 	mov	r4,r2
10107458:	1829883a 	mov	r20,r3
1010745c:	1025883a 	mov	r18,r2
10107460:	010e4380 	call	1010e438 <__fixdfsi>
10107464:	1009883a 	mov	r4,r2
10107468:	1021883a 	mov	r16,r2
1010746c:	010e4b80 	call	1010e4b8 <__floatsidf>
10107470:	100d883a 	mov	r6,r2
10107474:	180f883a 	mov	r7,r3
10107478:	9009883a 	mov	r4,r18
1010747c:	a00b883a 	mov	r5,r20
10107480:	84000c04 	addi	r16,r16,48
10107484:	010db3c0 	call	1010db3c <__subdf3>
10107488:	ad400044 	addi	r21,r21,1
1010748c:	ac3fffc5 	stb	r16,-1(r21)
10107490:	ac7fea1e 	bne	r21,r17,1010743c <__alt_data_end+0xfffe743c>
10107494:	1023883a 	mov	r17,r2
10107498:	d8801217 	ldw	r2,72(sp)
1010749c:	dc800f17 	ldw	r18,60(sp)
101074a0:	1829883a 	mov	r20,r3
101074a4:	b8af883a 	add	r23,r23,r2
101074a8:	d9001417 	ldw	r4,80(sp)
101074ac:	d9401517 	ldw	r5,84(sp)
101074b0:	000d883a 	mov	r6,zero
101074b4:	01cff834 	movhi	r7,16352
101074b8:	010c0380 	call	1010c038 <__adddf3>
101074bc:	880d883a 	mov	r6,r17
101074c0:	a00f883a 	mov	r7,r20
101074c4:	1009883a 	mov	r4,r2
101074c8:	180b883a 	mov	r5,r3
101074cc:	010d3300 	call	1010d330 <__ledf2>
101074d0:	10003e0e 	bge	r2,zero,101075cc <_dtoa_r+0x1548>
101074d4:	d9001317 	ldw	r4,76(sp)
101074d8:	bd3fffc3 	ldbu	r20,-1(r23)
101074dc:	d9000515 	stw	r4,20(sp)
101074e0:	003d3b06 	br	101069d0 <__alt_data_end+0xfffe69d0>
101074e4:	0027883a 	mov	r19,zero
101074e8:	003f1b06 	br	10107158 <__alt_data_end+0xfffe7158>
101074ec:	d8800817 	ldw	r2,32(sp)
101074f0:	11e9c83a 	sub	r20,r2,r7
101074f4:	0005883a 	mov	r2,zero
101074f8:	003d5406 	br	10106a4c <__alt_data_end+0xfffe6a4c>
101074fc:	00800044 	movi	r2,1
10107500:	003dc706 	br	10106c20 <__alt_data_end+0xfffe6c20>
10107504:	d8c00217 	ldw	r3,8(sp)
10107508:	00800d84 	movi	r2,54
1010750c:	dd400a17 	ldw	r21,40(sp)
10107510:	10c5c83a 	sub	r2,r2,r3
10107514:	dd000817 	ldw	r20,32(sp)
10107518:	003d4c06 	br	10106a4c <__alt_data_end+0xfffe6a4c>
1010751c:	dc800f15 	stw	r18,60(sp)
10107520:	dcc01015 	stw	r19,64(sp)
10107524:	04000084 	movi	r16,2
10107528:	003bed06 	br	101064e0 <__alt_data_end+0xfffe64e0>
1010752c:	d9000617 	ldw	r4,24(sp)
10107530:	203f0d26 	beq	r4,zero,10107168 <__alt_data_end+0xfffe7168>
10107534:	d9800c17 	ldw	r6,48(sp)
10107538:	01bcab0e 	bge	zero,r6,101067e8 <__alt_data_end+0xfffe67e8>
1010753c:	d9401017 	ldw	r5,64(sp)
10107540:	d9000f17 	ldw	r4,60(sp)
10107544:	000d883a 	mov	r6,zero
10107548:	01d00934 	movhi	r7,16420
1010754c:	010d4240 	call	1010d424 <__muldf3>
10107550:	81000044 	addi	r4,r16,1
10107554:	d8800f15 	stw	r2,60(sp)
10107558:	d8c01015 	stw	r3,64(sp)
1010755c:	010e4b80 	call	1010e4b8 <__floatsidf>
10107560:	d9800f17 	ldw	r6,60(sp)
10107564:	d9c01017 	ldw	r7,64(sp)
10107568:	1009883a 	mov	r4,r2
1010756c:	180b883a 	mov	r5,r3
10107570:	010d4240 	call	1010d424 <__muldf3>
10107574:	01d00734 	movhi	r7,16412
10107578:	000d883a 	mov	r6,zero
1010757c:	1009883a 	mov	r4,r2
10107580:	180b883a 	mov	r5,r3
10107584:	010c0380 	call	1010c038 <__adddf3>
10107588:	d9c00517 	ldw	r7,20(sp)
1010758c:	047f3034 	movhi	r17,64704
10107590:	1021883a 	mov	r16,r2
10107594:	39ffffc4 	addi	r7,r7,-1
10107598:	d9c01315 	stw	r7,76(sp)
1010759c:	1c63883a 	add	r17,r3,r17
101075a0:	db000c17 	ldw	r12,48(sp)
101075a4:	003bea06 	br	10106550 <__alt_data_end+0xfffe6550>
101075a8:	dc000915 	stw	r16,36(sp)
101075ac:	003e0e06 	br	10106de8 <__alt_data_end+0xfffe6de8>
101075b0:	01000e44 	movi	r4,57
101075b4:	8825883a 	mov	r18,r17
101075b8:	9dc00044 	addi	r23,r19,1
101075bc:	99000005 	stb	r4,0(r19)
101075c0:	a023883a 	mov	r17,r20
101075c4:	dc000915 	stw	r16,36(sp)
101075c8:	003da406 	br	10106c5c <__alt_data_end+0xfffe6c5c>
101075cc:	d9801417 	ldw	r6,80(sp)
101075d0:	d9c01517 	ldw	r7,84(sp)
101075d4:	0009883a 	mov	r4,zero
101075d8:	014ff834 	movhi	r5,16352
101075dc:	010db3c0 	call	1010db3c <__subdf3>
101075e0:	880d883a 	mov	r6,r17
101075e4:	a00f883a 	mov	r7,r20
101075e8:	1009883a 	mov	r4,r2
101075ec:	180b883a 	mov	r5,r3
101075f0:	010d2540 	call	1010d254 <__gedf2>
101075f4:	00bc7c0e 	bge	zero,r2,101067e8 <__alt_data_end+0xfffe67e8>
101075f8:	01000c04 	movi	r4,48
101075fc:	00000106 	br	10107604 <_dtoa_r+0x1580>
10107600:	102f883a 	mov	r23,r2
10107604:	b8bfffc4 	addi	r2,r23,-1
10107608:	10c00007 	ldb	r3,0(r2)
1010760c:	193ffc26 	beq	r3,r4,10107600 <__alt_data_end+0xfffe7600>
10107610:	d9801317 	ldw	r6,76(sp)
10107614:	d9800515 	stw	r6,20(sp)
10107618:	003c4406 	br	1010672c <__alt_data_end+0xfffe672c>
1010761c:	d9801317 	ldw	r6,76(sp)
10107620:	d9800515 	stw	r6,20(sp)
10107624:	003cea06 	br	101069d0 <__alt_data_end+0xfffe69d0>
10107628:	dd800f17 	ldw	r22,60(sp)
1010762c:	dcc01017 	ldw	r19,64(sp)
10107630:	dc801217 	ldw	r18,72(sp)
10107634:	003c6c06 	br	101067e8 <__alt_data_end+0xfffe67e8>
10107638:	903e031e 	bne	r18,zero,10106e48 <__alt_data_end+0xfffe6e48>
1010763c:	003ebb06 	br	1010712c <__alt_data_end+0xfffe712c>
10107640:	103e6c1e 	bne	r2,zero,10106ff4 <__alt_data_end+0xfffe6ff4>
10107644:	4080004c 	andi	r2,r8,1
10107648:	103e6a26 	beq	r2,zero,10106ff4 <__alt_data_end+0xfffe6ff4>
1010764c:	003e6606 	br	10106fe8 <__alt_data_end+0xfffe6fe8>
10107650:	d8c00317 	ldw	r3,12(sp)
10107654:	00800084 	movi	r2,2
10107658:	10c02916 	blt	r2,r3,10107700 <_dtoa_r+0x167c>
1010765c:	d9000c17 	ldw	r4,48(sp)
10107660:	003e8806 	br	10107084 <__alt_data_end+0xfffe7084>
10107664:	04000084 	movi	r16,2
10107668:	003b9d06 	br	101064e0 <__alt_data_end+0xfffe64e0>
1010766c:	d9001317 	ldw	r4,76(sp)
10107670:	d9000515 	stw	r4,20(sp)
10107674:	003cd606 	br	101069d0 <__alt_data_end+0xfffe69d0>
10107678:	d8801317 	ldw	r2,76(sp)
1010767c:	d8800515 	stw	r2,20(sp)
10107680:	003c2a06 	br	1010672c <__alt_data_end+0xfffe672c>
10107684:	d9800317 	ldw	r6,12(sp)
10107688:	00800084 	movi	r2,2
1010768c:	11801516 	blt	r2,r6,101076e4 <_dtoa_r+0x1660>
10107690:	d9c00c17 	ldw	r7,48(sp)
10107694:	d9c00615 	stw	r7,24(sp)
10107698:	003df706 	br	10106e78 <__alt_data_end+0xfffe6e78>
1010769c:	193d3926 	beq	r3,r4,10106b84 <__alt_data_end+0xfffe6b84>
101076a0:	00c00f04 	movi	r3,60
101076a4:	1885c83a 	sub	r2,r3,r2
101076a8:	003ddf06 	br	10106e28 <__alt_data_end+0xfffe6e28>
101076ac:	e009883a 	mov	r4,fp
101076b0:	e0001115 	stw	zero,68(fp)
101076b4:	000b883a 	mov	r5,zero
101076b8:	010818c0 	call	1010818c <_Balloc>
101076bc:	d8800715 	stw	r2,28(sp)
101076c0:	d8c00717 	ldw	r3,28(sp)
101076c4:	00bfffc4 	movi	r2,-1
101076c8:	01000044 	movi	r4,1
101076cc:	d8800c15 	stw	r2,48(sp)
101076d0:	e0c01015 	stw	r3,64(fp)
101076d4:	d9000b15 	stw	r4,44(sp)
101076d8:	d8800615 	stw	r2,24(sp)
101076dc:	d8002215 	stw	zero,136(sp)
101076e0:	003c4106 	br	101067e8 <__alt_data_end+0xfffe67e8>
101076e4:	d8c00c17 	ldw	r3,48(sp)
101076e8:	d8c00615 	stw	r3,24(sp)
101076ec:	003e7006 	br	101070b0 <__alt_data_end+0xfffe70b0>
101076f0:	04400044 	movi	r17,1
101076f4:	003b2006 	br	10106378 <__alt_data_end+0xfffe6378>
101076f8:	000b883a 	mov	r5,zero
101076fc:	003b3d06 	br	101063f4 <__alt_data_end+0xfffe63f4>
10107700:	d8800c17 	ldw	r2,48(sp)
10107704:	d8800615 	stw	r2,24(sp)
10107708:	003e6906 	br	101070b0 <__alt_data_end+0xfffe70b0>

1010770c <__sflags>:
1010770c:	28800007 	ldb	r2,0(r5)
10107710:	00c01c84 	movi	r3,114
10107714:	10c02426 	beq	r2,r3,101077a8 <__sflags+0x9c>
10107718:	00c01dc4 	movi	r3,119
1010771c:	10c01e26 	beq	r2,r3,10107798 <__sflags+0x8c>
10107720:	00c01844 	movi	r3,97
10107724:	10c00426 	beq	r2,r3,10107738 <__sflags+0x2c>
10107728:	00800584 	movi	r2,22
1010772c:	20800015 	stw	r2,0(r4)
10107730:	0005883a 	mov	r2,zero
10107734:	f800283a 	ret
10107738:	02c08204 	movi	r11,520
1010773c:	01000044 	movi	r4,1
10107740:	00804204 	movi	r2,264
10107744:	01c00ac4 	movi	r7,43
10107748:	02bff8c4 	movi	r10,-29
1010774c:	027fff04 	movi	r9,-4
10107750:	02001e04 	movi	r8,120
10107754:	29400044 	addi	r5,r5,1
10107758:	28c00007 	ldb	r3,0(r5)
1010775c:	18000626 	beq	r3,zero,10107778 <__sflags+0x6c>
10107760:	19c00826 	beq	r3,r7,10107784 <__sflags+0x78>
10107764:	1a3ffb1e 	bne	r3,r8,10107754 <__alt_data_end+0xfffe7754>
10107768:	29400044 	addi	r5,r5,1
1010776c:	28c00007 	ldb	r3,0(r5)
10107770:	21020014 	ori	r4,r4,2048
10107774:	183ffa1e 	bne	r3,zero,10107760 <__alt_data_end+0xfffe7760>
10107778:	22c8b03a 	or	r4,r4,r11
1010777c:	31000015 	stw	r4,0(r6)
10107780:	f800283a 	ret
10107784:	1284703a 	and	r2,r2,r10
10107788:	2248703a 	and	r4,r4,r9
1010778c:	10800414 	ori	r2,r2,16
10107790:	21000094 	ori	r4,r4,2
10107794:	003fef06 	br	10107754 <__alt_data_end+0xfffe7754>
10107798:	02c18004 	movi	r11,1536
1010779c:	01000044 	movi	r4,1
101077a0:	00800204 	movi	r2,8
101077a4:	003fe706 	br	10107744 <__alt_data_end+0xfffe7744>
101077a8:	0017883a 	mov	r11,zero
101077ac:	0009883a 	mov	r4,zero
101077b0:	00800104 	movi	r2,4
101077b4:	003fe306 	br	10107744 <__alt_data_end+0xfffe7744>

101077b8 <__sfvwrite_r>:
101077b8:	30800217 	ldw	r2,8(r6)
101077bc:	10006726 	beq	r2,zero,1010795c <__sfvwrite_r+0x1a4>
101077c0:	28c0030b 	ldhu	r3,12(r5)
101077c4:	defff404 	addi	sp,sp,-48
101077c8:	dd400715 	stw	r21,28(sp)
101077cc:	dd000615 	stw	r20,24(sp)
101077d0:	dc000215 	stw	r16,8(sp)
101077d4:	dfc00b15 	stw	ra,44(sp)
101077d8:	df000a15 	stw	fp,40(sp)
101077dc:	ddc00915 	stw	r23,36(sp)
101077e0:	dd800815 	stw	r22,32(sp)
101077e4:	dcc00515 	stw	r19,20(sp)
101077e8:	dc800415 	stw	r18,16(sp)
101077ec:	dc400315 	stw	r17,12(sp)
101077f0:	1880020c 	andi	r2,r3,8
101077f4:	2821883a 	mov	r16,r5
101077f8:	202b883a 	mov	r21,r4
101077fc:	3029883a 	mov	r20,r6
10107800:	10002726 	beq	r2,zero,101078a0 <__sfvwrite_r+0xe8>
10107804:	28800417 	ldw	r2,16(r5)
10107808:	10002526 	beq	r2,zero,101078a0 <__sfvwrite_r+0xe8>
1010780c:	1880008c 	andi	r2,r3,2
10107810:	a4400017 	ldw	r17,0(r20)
10107814:	10002a26 	beq	r2,zero,101078c0 <__sfvwrite_r+0x108>
10107818:	05a00034 	movhi	r22,32768
1010781c:	0027883a 	mov	r19,zero
10107820:	0025883a 	mov	r18,zero
10107824:	b5bf0004 	addi	r22,r22,-1024
10107828:	980d883a 	mov	r6,r19
1010782c:	a809883a 	mov	r4,r21
10107830:	90004626 	beq	r18,zero,1010794c <__sfvwrite_r+0x194>
10107834:	900f883a 	mov	r7,r18
10107838:	b480022e 	bgeu	r22,r18,10107844 <__sfvwrite_r+0x8c>
1010783c:	01e00034 	movhi	r7,32768
10107840:	39ff0004 	addi	r7,r7,-1024
10107844:	80800917 	ldw	r2,36(r16)
10107848:	81400717 	ldw	r5,28(r16)
1010784c:	103ee83a 	callr	r2
10107850:	0080570e 	bge	zero,r2,101079b0 <__sfvwrite_r+0x1f8>
10107854:	a0c00217 	ldw	r3,8(r20)
10107858:	98a7883a 	add	r19,r19,r2
1010785c:	90a5c83a 	sub	r18,r18,r2
10107860:	1885c83a 	sub	r2,r3,r2
10107864:	a0800215 	stw	r2,8(r20)
10107868:	103fef1e 	bne	r2,zero,10107828 <__alt_data_end+0xfffe7828>
1010786c:	0005883a 	mov	r2,zero
10107870:	dfc00b17 	ldw	ra,44(sp)
10107874:	df000a17 	ldw	fp,40(sp)
10107878:	ddc00917 	ldw	r23,36(sp)
1010787c:	dd800817 	ldw	r22,32(sp)
10107880:	dd400717 	ldw	r21,28(sp)
10107884:	dd000617 	ldw	r20,24(sp)
10107888:	dcc00517 	ldw	r19,20(sp)
1010788c:	dc800417 	ldw	r18,16(sp)
10107890:	dc400317 	ldw	r17,12(sp)
10107894:	dc000217 	ldw	r16,8(sp)
10107898:	dec00c04 	addi	sp,sp,48
1010789c:	f800283a 	ret
101078a0:	800b883a 	mov	r5,r16
101078a4:	a809883a 	mov	r4,r21
101078a8:	0105cdc0 	call	10105cdc <__swsetup_r>
101078ac:	1000eb1e 	bne	r2,zero,10107c5c <__sfvwrite_r+0x4a4>
101078b0:	80c0030b 	ldhu	r3,12(r16)
101078b4:	a4400017 	ldw	r17,0(r20)
101078b8:	1880008c 	andi	r2,r3,2
101078bc:	103fd61e 	bne	r2,zero,10107818 <__alt_data_end+0xfffe7818>
101078c0:	1880004c 	andi	r2,r3,1
101078c4:	10003f1e 	bne	r2,zero,101079c4 <__sfvwrite_r+0x20c>
101078c8:	0039883a 	mov	fp,zero
101078cc:	0025883a 	mov	r18,zero
101078d0:	90001a26 	beq	r18,zero,1010793c <__sfvwrite_r+0x184>
101078d4:	1880800c 	andi	r2,r3,512
101078d8:	84c00217 	ldw	r19,8(r16)
101078dc:	10002126 	beq	r2,zero,10107964 <__sfvwrite_r+0x1ac>
101078e0:	982f883a 	mov	r23,r19
101078e4:	94c09336 	bltu	r18,r19,10107b34 <__sfvwrite_r+0x37c>
101078e8:	1881200c 	andi	r2,r3,1152
101078ec:	10009e1e 	bne	r2,zero,10107b68 <__sfvwrite_r+0x3b0>
101078f0:	81000017 	ldw	r4,0(r16)
101078f4:	b80d883a 	mov	r6,r23
101078f8:	e00b883a 	mov	r5,fp
101078fc:	01080300 	call	10108030 <memmove>
10107900:	80c00217 	ldw	r3,8(r16)
10107904:	81000017 	ldw	r4,0(r16)
10107908:	9005883a 	mov	r2,r18
1010790c:	1ce7c83a 	sub	r19,r3,r19
10107910:	25cf883a 	add	r7,r4,r23
10107914:	84c00215 	stw	r19,8(r16)
10107918:	81c00015 	stw	r7,0(r16)
1010791c:	a0c00217 	ldw	r3,8(r20)
10107920:	e0b9883a 	add	fp,fp,r2
10107924:	90a5c83a 	sub	r18,r18,r2
10107928:	18a7c83a 	sub	r19,r3,r2
1010792c:	a4c00215 	stw	r19,8(r20)
10107930:	983fce26 	beq	r19,zero,1010786c <__alt_data_end+0xfffe786c>
10107934:	80c0030b 	ldhu	r3,12(r16)
10107938:	903fe61e 	bne	r18,zero,101078d4 <__alt_data_end+0xfffe78d4>
1010793c:	8f000017 	ldw	fp,0(r17)
10107940:	8c800117 	ldw	r18,4(r17)
10107944:	8c400204 	addi	r17,r17,8
10107948:	003fe106 	br	101078d0 <__alt_data_end+0xfffe78d0>
1010794c:	8cc00017 	ldw	r19,0(r17)
10107950:	8c800117 	ldw	r18,4(r17)
10107954:	8c400204 	addi	r17,r17,8
10107958:	003fb306 	br	10107828 <__alt_data_end+0xfffe7828>
1010795c:	0005883a 	mov	r2,zero
10107960:	f800283a 	ret
10107964:	81000017 	ldw	r4,0(r16)
10107968:	80800417 	ldw	r2,16(r16)
1010796c:	11005736 	bltu	r2,r4,10107acc <__sfvwrite_r+0x314>
10107970:	85c00517 	ldw	r23,20(r16)
10107974:	95c05536 	bltu	r18,r23,10107acc <__sfvwrite_r+0x314>
10107978:	00a00034 	movhi	r2,32768
1010797c:	10bfffc4 	addi	r2,r2,-1
10107980:	9009883a 	mov	r4,r18
10107984:	1480012e 	bgeu	r2,r18,1010798c <__sfvwrite_r+0x1d4>
10107988:	1009883a 	mov	r4,r2
1010798c:	b80b883a 	mov	r5,r23
10107990:	01014cc0 	call	101014cc <__divsi3>
10107994:	15cf383a 	mul	r7,r2,r23
10107998:	81400717 	ldw	r5,28(r16)
1010799c:	80800917 	ldw	r2,36(r16)
101079a0:	e00d883a 	mov	r6,fp
101079a4:	a809883a 	mov	r4,r21
101079a8:	103ee83a 	callr	r2
101079ac:	00bfdb16 	blt	zero,r2,1010791c <__alt_data_end+0xfffe791c>
101079b0:	8080030b 	ldhu	r2,12(r16)
101079b4:	10801014 	ori	r2,r2,64
101079b8:	8080030d 	sth	r2,12(r16)
101079bc:	00bfffc4 	movi	r2,-1
101079c0:	003fab06 	br	10107870 <__alt_data_end+0xfffe7870>
101079c4:	0027883a 	mov	r19,zero
101079c8:	0011883a 	mov	r8,zero
101079cc:	0039883a 	mov	fp,zero
101079d0:	0025883a 	mov	r18,zero
101079d4:	90001f26 	beq	r18,zero,10107a54 <__sfvwrite_r+0x29c>
101079d8:	40005a26 	beq	r8,zero,10107b44 <__sfvwrite_r+0x38c>
101079dc:	982d883a 	mov	r22,r19
101079e0:	94c0012e 	bgeu	r18,r19,101079e8 <__sfvwrite_r+0x230>
101079e4:	902d883a 	mov	r22,r18
101079e8:	81000017 	ldw	r4,0(r16)
101079ec:	80800417 	ldw	r2,16(r16)
101079f0:	b02f883a 	mov	r23,r22
101079f4:	81c00517 	ldw	r7,20(r16)
101079f8:	1100032e 	bgeu	r2,r4,10107a08 <__sfvwrite_r+0x250>
101079fc:	80c00217 	ldw	r3,8(r16)
10107a00:	38c7883a 	add	r3,r7,r3
10107a04:	1d801816 	blt	r3,r22,10107a68 <__sfvwrite_r+0x2b0>
10107a08:	b1c03e16 	blt	r22,r7,10107b04 <__sfvwrite_r+0x34c>
10107a0c:	80800917 	ldw	r2,36(r16)
10107a10:	81400717 	ldw	r5,28(r16)
10107a14:	e00d883a 	mov	r6,fp
10107a18:	da000115 	stw	r8,4(sp)
10107a1c:	a809883a 	mov	r4,r21
10107a20:	103ee83a 	callr	r2
10107a24:	102f883a 	mov	r23,r2
10107a28:	da000117 	ldw	r8,4(sp)
10107a2c:	00bfe00e 	bge	zero,r2,101079b0 <__alt_data_end+0xfffe79b0>
10107a30:	9de7c83a 	sub	r19,r19,r23
10107a34:	98001f26 	beq	r19,zero,10107ab4 <__sfvwrite_r+0x2fc>
10107a38:	a0800217 	ldw	r2,8(r20)
10107a3c:	e5f9883a 	add	fp,fp,r23
10107a40:	95e5c83a 	sub	r18,r18,r23
10107a44:	15efc83a 	sub	r23,r2,r23
10107a48:	a5c00215 	stw	r23,8(r20)
10107a4c:	b83f8726 	beq	r23,zero,1010786c <__alt_data_end+0xfffe786c>
10107a50:	903fe11e 	bne	r18,zero,101079d8 <__alt_data_end+0xfffe79d8>
10107a54:	8f000017 	ldw	fp,0(r17)
10107a58:	8c800117 	ldw	r18,4(r17)
10107a5c:	0011883a 	mov	r8,zero
10107a60:	8c400204 	addi	r17,r17,8
10107a64:	003fdb06 	br	101079d4 <__alt_data_end+0xfffe79d4>
10107a68:	180d883a 	mov	r6,r3
10107a6c:	e00b883a 	mov	r5,fp
10107a70:	da000115 	stw	r8,4(sp)
10107a74:	d8c00015 	stw	r3,0(sp)
10107a78:	01080300 	call	10108030 <memmove>
10107a7c:	d8c00017 	ldw	r3,0(sp)
10107a80:	80800017 	ldw	r2,0(r16)
10107a84:	800b883a 	mov	r5,r16
10107a88:	a809883a 	mov	r4,r21
10107a8c:	10c5883a 	add	r2,r2,r3
10107a90:	80800015 	stw	r2,0(r16)
10107a94:	d8c00015 	stw	r3,0(sp)
10107a98:	01019a00 	call	101019a0 <_fflush_r>
10107a9c:	d8c00017 	ldw	r3,0(sp)
10107aa0:	da000117 	ldw	r8,4(sp)
10107aa4:	103fc21e 	bne	r2,zero,101079b0 <__alt_data_end+0xfffe79b0>
10107aa8:	182f883a 	mov	r23,r3
10107aac:	9de7c83a 	sub	r19,r19,r23
10107ab0:	983fe11e 	bne	r19,zero,10107a38 <__alt_data_end+0xfffe7a38>
10107ab4:	800b883a 	mov	r5,r16
10107ab8:	a809883a 	mov	r4,r21
10107abc:	01019a00 	call	101019a0 <_fflush_r>
10107ac0:	103fbb1e 	bne	r2,zero,101079b0 <__alt_data_end+0xfffe79b0>
10107ac4:	0011883a 	mov	r8,zero
10107ac8:	003fdb06 	br	10107a38 <__alt_data_end+0xfffe7a38>
10107acc:	94c0012e 	bgeu	r18,r19,10107ad4 <__sfvwrite_r+0x31c>
10107ad0:	9027883a 	mov	r19,r18
10107ad4:	980d883a 	mov	r6,r19
10107ad8:	e00b883a 	mov	r5,fp
10107adc:	01080300 	call	10108030 <memmove>
10107ae0:	80800217 	ldw	r2,8(r16)
10107ae4:	80c00017 	ldw	r3,0(r16)
10107ae8:	14c5c83a 	sub	r2,r2,r19
10107aec:	1cc7883a 	add	r3,r3,r19
10107af0:	80800215 	stw	r2,8(r16)
10107af4:	80c00015 	stw	r3,0(r16)
10107af8:	10004326 	beq	r2,zero,10107c08 <__sfvwrite_r+0x450>
10107afc:	9805883a 	mov	r2,r19
10107b00:	003f8606 	br	1010791c <__alt_data_end+0xfffe791c>
10107b04:	b00d883a 	mov	r6,r22
10107b08:	e00b883a 	mov	r5,fp
10107b0c:	da000115 	stw	r8,4(sp)
10107b10:	01080300 	call	10108030 <memmove>
10107b14:	80800217 	ldw	r2,8(r16)
10107b18:	80c00017 	ldw	r3,0(r16)
10107b1c:	da000117 	ldw	r8,4(sp)
10107b20:	1585c83a 	sub	r2,r2,r22
10107b24:	1dad883a 	add	r22,r3,r22
10107b28:	80800215 	stw	r2,8(r16)
10107b2c:	85800015 	stw	r22,0(r16)
10107b30:	003fbf06 	br	10107a30 <__alt_data_end+0xfffe7a30>
10107b34:	81000017 	ldw	r4,0(r16)
10107b38:	9027883a 	mov	r19,r18
10107b3c:	902f883a 	mov	r23,r18
10107b40:	003f6c06 	br	101078f4 <__alt_data_end+0xfffe78f4>
10107b44:	900d883a 	mov	r6,r18
10107b48:	01400284 	movi	r5,10
10107b4c:	e009883a 	mov	r4,fp
10107b50:	0107e040 	call	10107e04 <memchr>
10107b54:	10003e26 	beq	r2,zero,10107c50 <__sfvwrite_r+0x498>
10107b58:	10800044 	addi	r2,r2,1
10107b5c:	1727c83a 	sub	r19,r2,fp
10107b60:	02000044 	movi	r8,1
10107b64:	003f9d06 	br	101079dc <__alt_data_end+0xfffe79dc>
10107b68:	80800517 	ldw	r2,20(r16)
10107b6c:	81400417 	ldw	r5,16(r16)
10107b70:	81c00017 	ldw	r7,0(r16)
10107b74:	10a7883a 	add	r19,r2,r2
10107b78:	9885883a 	add	r2,r19,r2
10107b7c:	1026d7fa 	srli	r19,r2,31
10107b80:	396dc83a 	sub	r22,r7,r5
10107b84:	b1000044 	addi	r4,r22,1
10107b88:	9885883a 	add	r2,r19,r2
10107b8c:	1027d07a 	srai	r19,r2,1
10107b90:	2485883a 	add	r2,r4,r18
10107b94:	980d883a 	mov	r6,r19
10107b98:	9880022e 	bgeu	r19,r2,10107ba4 <__sfvwrite_r+0x3ec>
10107b9c:	1027883a 	mov	r19,r2
10107ba0:	100d883a 	mov	r6,r2
10107ba4:	18c1000c 	andi	r3,r3,1024
10107ba8:	18001c26 	beq	r3,zero,10107c1c <__sfvwrite_r+0x464>
10107bac:	300b883a 	mov	r5,r6
10107bb0:	a809883a 	mov	r4,r21
10107bb4:	0102c2c0 	call	10102c2c <_malloc_r>
10107bb8:	102f883a 	mov	r23,r2
10107bbc:	10002926 	beq	r2,zero,10107c64 <__sfvwrite_r+0x4ac>
10107bc0:	81400417 	ldw	r5,16(r16)
10107bc4:	b00d883a 	mov	r6,r22
10107bc8:	1009883a 	mov	r4,r2
10107bcc:	0107ee80 	call	10107ee8 <memcpy>
10107bd0:	8080030b 	ldhu	r2,12(r16)
10107bd4:	00fedfc4 	movi	r3,-1153
10107bd8:	10c4703a 	and	r2,r2,r3
10107bdc:	10802014 	ori	r2,r2,128
10107be0:	8080030d 	sth	r2,12(r16)
10107be4:	bd89883a 	add	r4,r23,r22
10107be8:	9d8fc83a 	sub	r7,r19,r22
10107bec:	85c00415 	stw	r23,16(r16)
10107bf0:	84c00515 	stw	r19,20(r16)
10107bf4:	81000015 	stw	r4,0(r16)
10107bf8:	9027883a 	mov	r19,r18
10107bfc:	81c00215 	stw	r7,8(r16)
10107c00:	902f883a 	mov	r23,r18
10107c04:	003f3b06 	br	101078f4 <__alt_data_end+0xfffe78f4>
10107c08:	800b883a 	mov	r5,r16
10107c0c:	a809883a 	mov	r4,r21
10107c10:	01019a00 	call	101019a0 <_fflush_r>
10107c14:	103fb926 	beq	r2,zero,10107afc <__alt_data_end+0xfffe7afc>
10107c18:	003f6506 	br	101079b0 <__alt_data_end+0xfffe79b0>
10107c1c:	a809883a 	mov	r4,r21
10107c20:	01091e80 	call	101091e8 <_realloc_r>
10107c24:	102f883a 	mov	r23,r2
10107c28:	103fee1e 	bne	r2,zero,10107be4 <__alt_data_end+0xfffe7be4>
10107c2c:	81400417 	ldw	r5,16(r16)
10107c30:	a809883a 	mov	r4,r21
10107c34:	0101ffc0 	call	10101ffc <_free_r>
10107c38:	8080030b 	ldhu	r2,12(r16)
10107c3c:	00ffdfc4 	movi	r3,-129
10107c40:	1884703a 	and	r2,r3,r2
10107c44:	00c00304 	movi	r3,12
10107c48:	a8c00015 	stw	r3,0(r21)
10107c4c:	003f5906 	br	101079b4 <__alt_data_end+0xfffe79b4>
10107c50:	94c00044 	addi	r19,r18,1
10107c54:	02000044 	movi	r8,1
10107c58:	003f6006 	br	101079dc <__alt_data_end+0xfffe79dc>
10107c5c:	00bfffc4 	movi	r2,-1
10107c60:	003f0306 	br	10107870 <__alt_data_end+0xfffe7870>
10107c64:	00800304 	movi	r2,12
10107c68:	a8800015 	stw	r2,0(r21)
10107c6c:	8080030b 	ldhu	r2,12(r16)
10107c70:	003f5006 	br	101079b4 <__alt_data_end+0xfffe79b4>

10107c74 <_isatty_r>:
10107c74:	defffd04 	addi	sp,sp,-12
10107c78:	dc000015 	stw	r16,0(sp)
10107c7c:	04040474 	movhi	r16,4113
10107c80:	dc400115 	stw	r17,4(sp)
10107c84:	84123704 	addi	r16,r16,18652
10107c88:	2023883a 	mov	r17,r4
10107c8c:	2809883a 	mov	r4,r5
10107c90:	dfc00215 	stw	ra,8(sp)
10107c94:	80000015 	stw	zero,0(r16)
10107c98:	010e93c0 	call	1010e93c <isatty>
10107c9c:	00ffffc4 	movi	r3,-1
10107ca0:	10c00526 	beq	r2,r3,10107cb8 <_isatty_r+0x44>
10107ca4:	dfc00217 	ldw	ra,8(sp)
10107ca8:	dc400117 	ldw	r17,4(sp)
10107cac:	dc000017 	ldw	r16,0(sp)
10107cb0:	dec00304 	addi	sp,sp,12
10107cb4:	f800283a 	ret
10107cb8:	80c00017 	ldw	r3,0(r16)
10107cbc:	183ff926 	beq	r3,zero,10107ca4 <__alt_data_end+0xfffe7ca4>
10107cc0:	88c00015 	stw	r3,0(r17)
10107cc4:	003ff706 	br	10107ca4 <__alt_data_end+0xfffe7ca4>

10107cc8 <_setlocale_r>:
10107cc8:	30001b26 	beq	r6,zero,10107d38 <_setlocale_r+0x70>
10107ccc:	01440474 	movhi	r5,4113
10107cd0:	defffe04 	addi	sp,sp,-8
10107cd4:	29442004 	addi	r5,r5,4224
10107cd8:	3009883a 	mov	r4,r6
10107cdc:	dc000015 	stw	r16,0(sp)
10107ce0:	dfc00115 	stw	ra,4(sp)
10107ce4:	3021883a 	mov	r16,r6
10107ce8:	01097c00 	call	101097c0 <strcmp>
10107cec:	1000061e 	bne	r2,zero,10107d08 <_setlocale_r+0x40>
10107cf0:	00840474 	movhi	r2,4113
10107cf4:	10840204 	addi	r2,r2,4104
10107cf8:	dfc00117 	ldw	ra,4(sp)
10107cfc:	dc000017 	ldw	r16,0(sp)
10107d00:	dec00204 	addi	sp,sp,8
10107d04:	f800283a 	ret
10107d08:	01440474 	movhi	r5,4113
10107d0c:	29440204 	addi	r5,r5,4104
10107d10:	8009883a 	mov	r4,r16
10107d14:	01097c00 	call	101097c0 <strcmp>
10107d18:	103ff526 	beq	r2,zero,10107cf0 <__alt_data_end+0xfffe7cf0>
10107d1c:	01440474 	movhi	r5,4113
10107d20:	29440b04 	addi	r5,r5,4140
10107d24:	8009883a 	mov	r4,r16
10107d28:	01097c00 	call	101097c0 <strcmp>
10107d2c:	103ff026 	beq	r2,zero,10107cf0 <__alt_data_end+0xfffe7cf0>
10107d30:	0005883a 	mov	r2,zero
10107d34:	003ff006 	br	10107cf8 <__alt_data_end+0xfffe7cf8>
10107d38:	00840474 	movhi	r2,4113
10107d3c:	10840204 	addi	r2,r2,4104
10107d40:	f800283a 	ret

10107d44 <__locale_charset>:
10107d44:	00840474 	movhi	r2,4113
10107d48:	1086d404 	addi	r2,r2,6992
10107d4c:	f800283a 	ret

10107d50 <__locale_mb_cur_max>:
10107d50:	00840474 	movhi	r2,4113
10107d54:	108b7004 	addi	r2,r2,11712
10107d58:	10800017 	ldw	r2,0(r2)
10107d5c:	f800283a 	ret

10107d60 <__locale_msgcharset>:
10107d60:	00840474 	movhi	r2,4113
10107d64:	1086cc04 	addi	r2,r2,6960
10107d68:	f800283a 	ret

10107d6c <__locale_cjk_lang>:
10107d6c:	0005883a 	mov	r2,zero
10107d70:	f800283a 	ret

10107d74 <_localeconv_r>:
10107d74:	00840474 	movhi	r2,4113
10107d78:	1086dc04 	addi	r2,r2,7024
10107d7c:	f800283a 	ret

10107d80 <setlocale>:
10107d80:	00840474 	movhi	r2,4113
10107d84:	108b6d04 	addi	r2,r2,11700
10107d88:	280d883a 	mov	r6,r5
10107d8c:	200b883a 	mov	r5,r4
10107d90:	11000017 	ldw	r4,0(r2)
10107d94:	0107cc81 	jmpi	10107cc8 <_setlocale_r>

10107d98 <localeconv>:
10107d98:	00840474 	movhi	r2,4113
10107d9c:	1086dc04 	addi	r2,r2,7024
10107da0:	f800283a 	ret

10107da4 <_lseek_r>:
10107da4:	defffd04 	addi	sp,sp,-12
10107da8:	2805883a 	mov	r2,r5
10107dac:	dc000015 	stw	r16,0(sp)
10107db0:	04040474 	movhi	r16,4113
10107db4:	dc400115 	stw	r17,4(sp)
10107db8:	300b883a 	mov	r5,r6
10107dbc:	84123704 	addi	r16,r16,18652
10107dc0:	2023883a 	mov	r17,r4
10107dc4:	380d883a 	mov	r6,r7
10107dc8:	1009883a 	mov	r4,r2
10107dcc:	dfc00215 	stw	ra,8(sp)
10107dd0:	80000015 	stw	zero,0(r16)
10107dd4:	010eb1c0 	call	1010eb1c <lseek>
10107dd8:	00ffffc4 	movi	r3,-1
10107ddc:	10c00526 	beq	r2,r3,10107df4 <_lseek_r+0x50>
10107de0:	dfc00217 	ldw	ra,8(sp)
10107de4:	dc400117 	ldw	r17,4(sp)
10107de8:	dc000017 	ldw	r16,0(sp)
10107dec:	dec00304 	addi	sp,sp,12
10107df0:	f800283a 	ret
10107df4:	80c00017 	ldw	r3,0(r16)
10107df8:	183ff926 	beq	r3,zero,10107de0 <__alt_data_end+0xfffe7de0>
10107dfc:	88c00015 	stw	r3,0(r17)
10107e00:	003ff706 	br	10107de0 <__alt_data_end+0xfffe7de0>

10107e04 <memchr>:
10107e04:	208000cc 	andi	r2,r4,3
10107e08:	280f883a 	mov	r7,r5
10107e0c:	10003426 	beq	r2,zero,10107ee0 <memchr+0xdc>
10107e10:	30bfffc4 	addi	r2,r6,-1
10107e14:	30001a26 	beq	r6,zero,10107e80 <memchr+0x7c>
10107e18:	20c00003 	ldbu	r3,0(r4)
10107e1c:	29803fcc 	andi	r6,r5,255
10107e20:	30c0051e 	bne	r6,r3,10107e38 <memchr+0x34>
10107e24:	00001806 	br	10107e88 <memchr+0x84>
10107e28:	10001526 	beq	r2,zero,10107e80 <memchr+0x7c>
10107e2c:	20c00003 	ldbu	r3,0(r4)
10107e30:	10bfffc4 	addi	r2,r2,-1
10107e34:	30c01426 	beq	r6,r3,10107e88 <memchr+0x84>
10107e38:	21000044 	addi	r4,r4,1
10107e3c:	20c000cc 	andi	r3,r4,3
10107e40:	183ff91e 	bne	r3,zero,10107e28 <__alt_data_end+0xfffe7e28>
10107e44:	020000c4 	movi	r8,3
10107e48:	40801136 	bltu	r8,r2,10107e90 <memchr+0x8c>
10107e4c:	10000c26 	beq	r2,zero,10107e80 <memchr+0x7c>
10107e50:	20c00003 	ldbu	r3,0(r4)
10107e54:	29403fcc 	andi	r5,r5,255
10107e58:	28c00b26 	beq	r5,r3,10107e88 <memchr+0x84>
10107e5c:	20c00044 	addi	r3,r4,1
10107e60:	39803fcc 	andi	r6,r7,255
10107e64:	2089883a 	add	r4,r4,r2
10107e68:	00000306 	br	10107e78 <memchr+0x74>
10107e6c:	18c00044 	addi	r3,r3,1
10107e70:	197fffc3 	ldbu	r5,-1(r3)
10107e74:	31400526 	beq	r6,r5,10107e8c <memchr+0x88>
10107e78:	1805883a 	mov	r2,r3
10107e7c:	20fffb1e 	bne	r4,r3,10107e6c <__alt_data_end+0xfffe7e6c>
10107e80:	0005883a 	mov	r2,zero
10107e84:	f800283a 	ret
10107e88:	2005883a 	mov	r2,r4
10107e8c:	f800283a 	ret
10107e90:	28c03fcc 	andi	r3,r5,255
10107e94:	1812923a 	slli	r9,r3,8
10107e98:	02ffbff4 	movhi	r11,65279
10107e9c:	02a02074 	movhi	r10,32897
10107ea0:	48d2b03a 	or	r9,r9,r3
10107ea4:	4806943a 	slli	r3,r9,16
10107ea8:	5affbfc4 	addi	r11,r11,-257
10107eac:	52a02004 	addi	r10,r10,-32640
10107eb0:	48d2b03a 	or	r9,r9,r3
10107eb4:	20c00017 	ldw	r3,0(r4)
10107eb8:	48c6f03a 	xor	r3,r9,r3
10107ebc:	1acd883a 	add	r6,r3,r11
10107ec0:	00c6303a 	nor	r3,zero,r3
10107ec4:	30c6703a 	and	r3,r6,r3
10107ec8:	1a86703a 	and	r3,r3,r10
10107ecc:	183fe01e 	bne	r3,zero,10107e50 <__alt_data_end+0xfffe7e50>
10107ed0:	10bfff04 	addi	r2,r2,-4
10107ed4:	21000104 	addi	r4,r4,4
10107ed8:	40bff636 	bltu	r8,r2,10107eb4 <__alt_data_end+0xfffe7eb4>
10107edc:	003fdb06 	br	10107e4c <__alt_data_end+0xfffe7e4c>
10107ee0:	3005883a 	mov	r2,r6
10107ee4:	003fd706 	br	10107e44 <__alt_data_end+0xfffe7e44>

10107ee8 <memcpy>:
10107ee8:	defffd04 	addi	sp,sp,-12
10107eec:	dfc00215 	stw	ra,8(sp)
10107ef0:	dc400115 	stw	r17,4(sp)
10107ef4:	dc000015 	stw	r16,0(sp)
10107ef8:	00c003c4 	movi	r3,15
10107efc:	2005883a 	mov	r2,r4
10107f00:	1980452e 	bgeu	r3,r6,10108018 <memcpy+0x130>
10107f04:	2906b03a 	or	r3,r5,r4
10107f08:	18c000cc 	andi	r3,r3,3
10107f0c:	1800441e 	bne	r3,zero,10108020 <memcpy+0x138>
10107f10:	347ffc04 	addi	r17,r6,-16
10107f14:	8822d13a 	srli	r17,r17,4
10107f18:	28c00104 	addi	r3,r5,4
10107f1c:	23400104 	addi	r13,r4,4
10107f20:	8820913a 	slli	r16,r17,4
10107f24:	2b000204 	addi	r12,r5,8
10107f28:	22c00204 	addi	r11,r4,8
10107f2c:	84000504 	addi	r16,r16,20
10107f30:	2a800304 	addi	r10,r5,12
10107f34:	22400304 	addi	r9,r4,12
10107f38:	2c21883a 	add	r16,r5,r16
10107f3c:	2811883a 	mov	r8,r5
10107f40:	200f883a 	mov	r7,r4
10107f44:	41000017 	ldw	r4,0(r8)
10107f48:	1fc00017 	ldw	ra,0(r3)
10107f4c:	63c00017 	ldw	r15,0(r12)
10107f50:	39000015 	stw	r4,0(r7)
10107f54:	53800017 	ldw	r14,0(r10)
10107f58:	6fc00015 	stw	ra,0(r13)
10107f5c:	5bc00015 	stw	r15,0(r11)
10107f60:	4b800015 	stw	r14,0(r9)
10107f64:	18c00404 	addi	r3,r3,16
10107f68:	39c00404 	addi	r7,r7,16
10107f6c:	42000404 	addi	r8,r8,16
10107f70:	6b400404 	addi	r13,r13,16
10107f74:	63000404 	addi	r12,r12,16
10107f78:	5ac00404 	addi	r11,r11,16
10107f7c:	52800404 	addi	r10,r10,16
10107f80:	4a400404 	addi	r9,r9,16
10107f84:	1c3fef1e 	bne	r3,r16,10107f44 <__alt_data_end+0xfffe7f44>
10107f88:	89c00044 	addi	r7,r17,1
10107f8c:	380e913a 	slli	r7,r7,4
10107f90:	310003cc 	andi	r4,r6,15
10107f94:	02c000c4 	movi	r11,3
10107f98:	11c7883a 	add	r3,r2,r7
10107f9c:	29cb883a 	add	r5,r5,r7
10107fa0:	5900212e 	bgeu	r11,r4,10108028 <memcpy+0x140>
10107fa4:	1813883a 	mov	r9,r3
10107fa8:	2811883a 	mov	r8,r5
10107fac:	200f883a 	mov	r7,r4
10107fb0:	42800017 	ldw	r10,0(r8)
10107fb4:	4a400104 	addi	r9,r9,4
10107fb8:	39ffff04 	addi	r7,r7,-4
10107fbc:	4abfff15 	stw	r10,-4(r9)
10107fc0:	42000104 	addi	r8,r8,4
10107fc4:	59fffa36 	bltu	r11,r7,10107fb0 <__alt_data_end+0xfffe7fb0>
10107fc8:	213fff04 	addi	r4,r4,-4
10107fcc:	2008d0ba 	srli	r4,r4,2
10107fd0:	318000cc 	andi	r6,r6,3
10107fd4:	21000044 	addi	r4,r4,1
10107fd8:	2109883a 	add	r4,r4,r4
10107fdc:	2109883a 	add	r4,r4,r4
10107fe0:	1907883a 	add	r3,r3,r4
10107fe4:	290b883a 	add	r5,r5,r4
10107fe8:	30000626 	beq	r6,zero,10108004 <memcpy+0x11c>
10107fec:	198d883a 	add	r6,r3,r6
10107ff0:	29c00003 	ldbu	r7,0(r5)
10107ff4:	18c00044 	addi	r3,r3,1
10107ff8:	29400044 	addi	r5,r5,1
10107ffc:	19ffffc5 	stb	r7,-1(r3)
10108000:	19bffb1e 	bne	r3,r6,10107ff0 <__alt_data_end+0xfffe7ff0>
10108004:	dfc00217 	ldw	ra,8(sp)
10108008:	dc400117 	ldw	r17,4(sp)
1010800c:	dc000017 	ldw	r16,0(sp)
10108010:	dec00304 	addi	sp,sp,12
10108014:	f800283a 	ret
10108018:	2007883a 	mov	r3,r4
1010801c:	003ff206 	br	10107fe8 <__alt_data_end+0xfffe7fe8>
10108020:	2007883a 	mov	r3,r4
10108024:	003ff106 	br	10107fec <__alt_data_end+0xfffe7fec>
10108028:	200d883a 	mov	r6,r4
1010802c:	003fee06 	br	10107fe8 <__alt_data_end+0xfffe7fe8>

10108030 <memmove>:
10108030:	2005883a 	mov	r2,r4
10108034:	29000b2e 	bgeu	r5,r4,10108064 <memmove+0x34>
10108038:	298f883a 	add	r7,r5,r6
1010803c:	21c0092e 	bgeu	r4,r7,10108064 <memmove+0x34>
10108040:	2187883a 	add	r3,r4,r6
10108044:	198bc83a 	sub	r5,r3,r6
10108048:	30004826 	beq	r6,zero,1010816c <memmove+0x13c>
1010804c:	39ffffc4 	addi	r7,r7,-1
10108050:	39000003 	ldbu	r4,0(r7)
10108054:	18ffffc4 	addi	r3,r3,-1
10108058:	19000005 	stb	r4,0(r3)
1010805c:	28fffb1e 	bne	r5,r3,1010804c <__alt_data_end+0xfffe804c>
10108060:	f800283a 	ret
10108064:	00c003c4 	movi	r3,15
10108068:	1980412e 	bgeu	r3,r6,10108170 <memmove+0x140>
1010806c:	2886b03a 	or	r3,r5,r2
10108070:	18c000cc 	andi	r3,r3,3
10108074:	1800401e 	bne	r3,zero,10108178 <memmove+0x148>
10108078:	33fffc04 	addi	r15,r6,-16
1010807c:	781ed13a 	srli	r15,r15,4
10108080:	28c00104 	addi	r3,r5,4
10108084:	13400104 	addi	r13,r2,4
10108088:	781c913a 	slli	r14,r15,4
1010808c:	2b000204 	addi	r12,r5,8
10108090:	12c00204 	addi	r11,r2,8
10108094:	73800504 	addi	r14,r14,20
10108098:	2a800304 	addi	r10,r5,12
1010809c:	12400304 	addi	r9,r2,12
101080a0:	2b9d883a 	add	r14,r5,r14
101080a4:	2811883a 	mov	r8,r5
101080a8:	100f883a 	mov	r7,r2
101080ac:	41000017 	ldw	r4,0(r8)
101080b0:	39c00404 	addi	r7,r7,16
101080b4:	18c00404 	addi	r3,r3,16
101080b8:	393ffc15 	stw	r4,-16(r7)
101080bc:	193ffc17 	ldw	r4,-16(r3)
101080c0:	6b400404 	addi	r13,r13,16
101080c4:	5ac00404 	addi	r11,r11,16
101080c8:	693ffc15 	stw	r4,-16(r13)
101080cc:	61000017 	ldw	r4,0(r12)
101080d0:	4a400404 	addi	r9,r9,16
101080d4:	42000404 	addi	r8,r8,16
101080d8:	593ffc15 	stw	r4,-16(r11)
101080dc:	51000017 	ldw	r4,0(r10)
101080e0:	63000404 	addi	r12,r12,16
101080e4:	52800404 	addi	r10,r10,16
101080e8:	493ffc15 	stw	r4,-16(r9)
101080ec:	1bbfef1e 	bne	r3,r14,101080ac <__alt_data_end+0xfffe80ac>
101080f0:	79000044 	addi	r4,r15,1
101080f4:	2008913a 	slli	r4,r4,4
101080f8:	328003cc 	andi	r10,r6,15
101080fc:	02c000c4 	movi	r11,3
10108100:	1107883a 	add	r3,r2,r4
10108104:	290b883a 	add	r5,r5,r4
10108108:	5a801e2e 	bgeu	r11,r10,10108184 <memmove+0x154>
1010810c:	1813883a 	mov	r9,r3
10108110:	2811883a 	mov	r8,r5
10108114:	500f883a 	mov	r7,r10
10108118:	41000017 	ldw	r4,0(r8)
1010811c:	4a400104 	addi	r9,r9,4
10108120:	39ffff04 	addi	r7,r7,-4
10108124:	493fff15 	stw	r4,-4(r9)
10108128:	42000104 	addi	r8,r8,4
1010812c:	59fffa36 	bltu	r11,r7,10108118 <__alt_data_end+0xfffe8118>
10108130:	513fff04 	addi	r4,r10,-4
10108134:	2008d0ba 	srli	r4,r4,2
10108138:	318000cc 	andi	r6,r6,3
1010813c:	21000044 	addi	r4,r4,1
10108140:	2109883a 	add	r4,r4,r4
10108144:	2109883a 	add	r4,r4,r4
10108148:	1907883a 	add	r3,r3,r4
1010814c:	290b883a 	add	r5,r5,r4
10108150:	30000b26 	beq	r6,zero,10108180 <memmove+0x150>
10108154:	198d883a 	add	r6,r3,r6
10108158:	29c00003 	ldbu	r7,0(r5)
1010815c:	18c00044 	addi	r3,r3,1
10108160:	29400044 	addi	r5,r5,1
10108164:	19ffffc5 	stb	r7,-1(r3)
10108168:	19bffb1e 	bne	r3,r6,10108158 <__alt_data_end+0xfffe8158>
1010816c:	f800283a 	ret
10108170:	1007883a 	mov	r3,r2
10108174:	003ff606 	br	10108150 <__alt_data_end+0xfffe8150>
10108178:	1007883a 	mov	r3,r2
1010817c:	003ff506 	br	10108154 <__alt_data_end+0xfffe8154>
10108180:	f800283a 	ret
10108184:	500d883a 	mov	r6,r10
10108188:	003ff106 	br	10108150 <__alt_data_end+0xfffe8150>

1010818c <_Balloc>:
1010818c:	20801317 	ldw	r2,76(r4)
10108190:	defffc04 	addi	sp,sp,-16
10108194:	dc400115 	stw	r17,4(sp)
10108198:	dc000015 	stw	r16,0(sp)
1010819c:	dfc00315 	stw	ra,12(sp)
101081a0:	dc800215 	stw	r18,8(sp)
101081a4:	2023883a 	mov	r17,r4
101081a8:	2821883a 	mov	r16,r5
101081ac:	10000f26 	beq	r2,zero,101081ec <_Balloc+0x60>
101081b0:	8407883a 	add	r3,r16,r16
101081b4:	18c7883a 	add	r3,r3,r3
101081b8:	10c7883a 	add	r3,r2,r3
101081bc:	18800017 	ldw	r2,0(r3)
101081c0:	10001126 	beq	r2,zero,10108208 <_Balloc+0x7c>
101081c4:	11000017 	ldw	r4,0(r2)
101081c8:	19000015 	stw	r4,0(r3)
101081cc:	10000415 	stw	zero,16(r2)
101081d0:	10000315 	stw	zero,12(r2)
101081d4:	dfc00317 	ldw	ra,12(sp)
101081d8:	dc800217 	ldw	r18,8(sp)
101081dc:	dc400117 	ldw	r17,4(sp)
101081e0:	dc000017 	ldw	r16,0(sp)
101081e4:	dec00404 	addi	sp,sp,16
101081e8:	f800283a 	ret
101081ec:	01800844 	movi	r6,33
101081f0:	01400104 	movi	r5,4
101081f4:	010af7c0 	call	1010af7c <_calloc_r>
101081f8:	88801315 	stw	r2,76(r17)
101081fc:	103fec1e 	bne	r2,zero,101081b0 <__alt_data_end+0xfffe81b0>
10108200:	0005883a 	mov	r2,zero
10108204:	003ff306 	br	101081d4 <__alt_data_end+0xfffe81d4>
10108208:	01400044 	movi	r5,1
1010820c:	2c24983a 	sll	r18,r5,r16
10108210:	8809883a 	mov	r4,r17
10108214:	91800144 	addi	r6,r18,5
10108218:	318d883a 	add	r6,r6,r6
1010821c:	318d883a 	add	r6,r6,r6
10108220:	010af7c0 	call	1010af7c <_calloc_r>
10108224:	103ff626 	beq	r2,zero,10108200 <__alt_data_end+0xfffe8200>
10108228:	14000115 	stw	r16,4(r2)
1010822c:	14800215 	stw	r18,8(r2)
10108230:	003fe606 	br	101081cc <__alt_data_end+0xfffe81cc>

10108234 <_Bfree>:
10108234:	28000826 	beq	r5,zero,10108258 <_Bfree+0x24>
10108238:	28c00117 	ldw	r3,4(r5)
1010823c:	20801317 	ldw	r2,76(r4)
10108240:	18c7883a 	add	r3,r3,r3
10108244:	18c7883a 	add	r3,r3,r3
10108248:	10c5883a 	add	r2,r2,r3
1010824c:	10c00017 	ldw	r3,0(r2)
10108250:	28c00015 	stw	r3,0(r5)
10108254:	11400015 	stw	r5,0(r2)
10108258:	f800283a 	ret

1010825c <__multadd>:
1010825c:	defffa04 	addi	sp,sp,-24
10108260:	dc800315 	stw	r18,12(sp)
10108264:	dc400215 	stw	r17,8(sp)
10108268:	dc000115 	stw	r16,4(sp)
1010826c:	2823883a 	mov	r17,r5
10108270:	2c000417 	ldw	r16,16(r5)
10108274:	dfc00515 	stw	ra,20(sp)
10108278:	dcc00415 	stw	r19,16(sp)
1010827c:	2025883a 	mov	r18,r4
10108280:	29400504 	addi	r5,r5,20
10108284:	0011883a 	mov	r8,zero
10108288:	28c00017 	ldw	r3,0(r5)
1010828c:	29400104 	addi	r5,r5,4
10108290:	42000044 	addi	r8,r8,1
10108294:	18bfffcc 	andi	r2,r3,65535
10108298:	1185383a 	mul	r2,r2,r6
1010829c:	1806d43a 	srli	r3,r3,16
101082a0:	11cf883a 	add	r7,r2,r7
101082a4:	3808d43a 	srli	r4,r7,16
101082a8:	1987383a 	mul	r3,r3,r6
101082ac:	38bfffcc 	andi	r2,r7,65535
101082b0:	1907883a 	add	r3,r3,r4
101082b4:	1808943a 	slli	r4,r3,16
101082b8:	180ed43a 	srli	r7,r3,16
101082bc:	2085883a 	add	r2,r4,r2
101082c0:	28bfff15 	stw	r2,-4(r5)
101082c4:	443ff016 	blt	r8,r16,10108288 <__alt_data_end+0xfffe8288>
101082c8:	38000926 	beq	r7,zero,101082f0 <__multadd+0x94>
101082cc:	88800217 	ldw	r2,8(r17)
101082d0:	80800f0e 	bge	r16,r2,10108310 <__multadd+0xb4>
101082d4:	80800144 	addi	r2,r16,5
101082d8:	1085883a 	add	r2,r2,r2
101082dc:	1085883a 	add	r2,r2,r2
101082e0:	8885883a 	add	r2,r17,r2
101082e4:	11c00015 	stw	r7,0(r2)
101082e8:	84000044 	addi	r16,r16,1
101082ec:	8c000415 	stw	r16,16(r17)
101082f0:	8805883a 	mov	r2,r17
101082f4:	dfc00517 	ldw	ra,20(sp)
101082f8:	dcc00417 	ldw	r19,16(sp)
101082fc:	dc800317 	ldw	r18,12(sp)
10108300:	dc400217 	ldw	r17,8(sp)
10108304:	dc000117 	ldw	r16,4(sp)
10108308:	dec00604 	addi	sp,sp,24
1010830c:	f800283a 	ret
10108310:	89400117 	ldw	r5,4(r17)
10108314:	9009883a 	mov	r4,r18
10108318:	d9c00015 	stw	r7,0(sp)
1010831c:	29400044 	addi	r5,r5,1
10108320:	010818c0 	call	1010818c <_Balloc>
10108324:	89800417 	ldw	r6,16(r17)
10108328:	89400304 	addi	r5,r17,12
1010832c:	11000304 	addi	r4,r2,12
10108330:	31800084 	addi	r6,r6,2
10108334:	318d883a 	add	r6,r6,r6
10108338:	318d883a 	add	r6,r6,r6
1010833c:	1027883a 	mov	r19,r2
10108340:	0107ee80 	call	10107ee8 <memcpy>
10108344:	d9c00017 	ldw	r7,0(sp)
10108348:	88000a26 	beq	r17,zero,10108374 <__multadd+0x118>
1010834c:	88c00117 	ldw	r3,4(r17)
10108350:	90801317 	ldw	r2,76(r18)
10108354:	18c7883a 	add	r3,r3,r3
10108358:	18c7883a 	add	r3,r3,r3
1010835c:	10c5883a 	add	r2,r2,r3
10108360:	10c00017 	ldw	r3,0(r2)
10108364:	88c00015 	stw	r3,0(r17)
10108368:	14400015 	stw	r17,0(r2)
1010836c:	9823883a 	mov	r17,r19
10108370:	003fd806 	br	101082d4 <__alt_data_end+0xfffe82d4>
10108374:	9823883a 	mov	r17,r19
10108378:	003fd606 	br	101082d4 <__alt_data_end+0xfffe82d4>

1010837c <__s2b>:
1010837c:	defff904 	addi	sp,sp,-28
10108380:	dc400115 	stw	r17,4(sp)
10108384:	dc000015 	stw	r16,0(sp)
10108388:	2023883a 	mov	r17,r4
1010838c:	2821883a 	mov	r16,r5
10108390:	39000204 	addi	r4,r7,8
10108394:	01400244 	movi	r5,9
10108398:	dcc00315 	stw	r19,12(sp)
1010839c:	dc800215 	stw	r18,8(sp)
101083a0:	dfc00615 	stw	ra,24(sp)
101083a4:	dd400515 	stw	r21,20(sp)
101083a8:	dd000415 	stw	r20,16(sp)
101083ac:	3825883a 	mov	r18,r7
101083b0:	3027883a 	mov	r19,r6
101083b4:	01014cc0 	call	101014cc <__divsi3>
101083b8:	00c00044 	movi	r3,1
101083bc:	000b883a 	mov	r5,zero
101083c0:	1880030e 	bge	r3,r2,101083d0 <__s2b+0x54>
101083c4:	18c7883a 	add	r3,r3,r3
101083c8:	29400044 	addi	r5,r5,1
101083cc:	18bffd16 	blt	r3,r2,101083c4 <__alt_data_end+0xfffe83c4>
101083d0:	8809883a 	mov	r4,r17
101083d4:	010818c0 	call	1010818c <_Balloc>
101083d8:	d8c00717 	ldw	r3,28(sp)
101083dc:	10c00515 	stw	r3,20(r2)
101083e0:	00c00044 	movi	r3,1
101083e4:	10c00415 	stw	r3,16(r2)
101083e8:	00c00244 	movi	r3,9
101083ec:	1cc0210e 	bge	r3,r19,10108474 <__s2b+0xf8>
101083f0:	80eb883a 	add	r21,r16,r3
101083f4:	a829883a 	mov	r20,r21
101083f8:	84e1883a 	add	r16,r16,r19
101083fc:	a1c00007 	ldb	r7,0(r20)
10108400:	01800284 	movi	r6,10
10108404:	a5000044 	addi	r20,r20,1
10108408:	100b883a 	mov	r5,r2
1010840c:	39fff404 	addi	r7,r7,-48
10108410:	8809883a 	mov	r4,r17
10108414:	010825c0 	call	1010825c <__multadd>
10108418:	a43ff81e 	bne	r20,r16,101083fc <__alt_data_end+0xfffe83fc>
1010841c:	ace1883a 	add	r16,r21,r19
10108420:	843ffe04 	addi	r16,r16,-8
10108424:	9c800a0e 	bge	r19,r18,10108450 <__s2b+0xd4>
10108428:	94e5c83a 	sub	r18,r18,r19
1010842c:	84a5883a 	add	r18,r16,r18
10108430:	81c00007 	ldb	r7,0(r16)
10108434:	01800284 	movi	r6,10
10108438:	84000044 	addi	r16,r16,1
1010843c:	100b883a 	mov	r5,r2
10108440:	39fff404 	addi	r7,r7,-48
10108444:	8809883a 	mov	r4,r17
10108448:	010825c0 	call	1010825c <__multadd>
1010844c:	84bff81e 	bne	r16,r18,10108430 <__alt_data_end+0xfffe8430>
10108450:	dfc00617 	ldw	ra,24(sp)
10108454:	dd400517 	ldw	r21,20(sp)
10108458:	dd000417 	ldw	r20,16(sp)
1010845c:	dcc00317 	ldw	r19,12(sp)
10108460:	dc800217 	ldw	r18,8(sp)
10108464:	dc400117 	ldw	r17,4(sp)
10108468:	dc000017 	ldw	r16,0(sp)
1010846c:	dec00704 	addi	sp,sp,28
10108470:	f800283a 	ret
10108474:	84000284 	addi	r16,r16,10
10108478:	1827883a 	mov	r19,r3
1010847c:	003fe906 	br	10108424 <__alt_data_end+0xfffe8424>

10108480 <__hi0bits>:
10108480:	20bfffec 	andhi	r2,r4,65535
10108484:	1000141e 	bne	r2,zero,101084d8 <__hi0bits+0x58>
10108488:	2008943a 	slli	r4,r4,16
1010848c:	00800404 	movi	r2,16
10108490:	20ffc02c 	andhi	r3,r4,65280
10108494:	1800021e 	bne	r3,zero,101084a0 <__hi0bits+0x20>
10108498:	2008923a 	slli	r4,r4,8
1010849c:	10800204 	addi	r2,r2,8
101084a0:	20fc002c 	andhi	r3,r4,61440
101084a4:	1800021e 	bne	r3,zero,101084b0 <__hi0bits+0x30>
101084a8:	2008913a 	slli	r4,r4,4
101084ac:	10800104 	addi	r2,r2,4
101084b0:	20f0002c 	andhi	r3,r4,49152
101084b4:	1800031e 	bne	r3,zero,101084c4 <__hi0bits+0x44>
101084b8:	2109883a 	add	r4,r4,r4
101084bc:	10800084 	addi	r2,r2,2
101084c0:	2109883a 	add	r4,r4,r4
101084c4:	20000316 	blt	r4,zero,101084d4 <__hi0bits+0x54>
101084c8:	2110002c 	andhi	r4,r4,16384
101084cc:	2000041e 	bne	r4,zero,101084e0 <__hi0bits+0x60>
101084d0:	00800804 	movi	r2,32
101084d4:	f800283a 	ret
101084d8:	0005883a 	mov	r2,zero
101084dc:	003fec06 	br	10108490 <__alt_data_end+0xfffe8490>
101084e0:	10800044 	addi	r2,r2,1
101084e4:	f800283a 	ret

101084e8 <__lo0bits>:
101084e8:	20c00017 	ldw	r3,0(r4)
101084ec:	188001cc 	andi	r2,r3,7
101084f0:	10000826 	beq	r2,zero,10108514 <__lo0bits+0x2c>
101084f4:	1880004c 	andi	r2,r3,1
101084f8:	1000211e 	bne	r2,zero,10108580 <__lo0bits+0x98>
101084fc:	1880008c 	andi	r2,r3,2
10108500:	1000211e 	bne	r2,zero,10108588 <__lo0bits+0xa0>
10108504:	1806d0ba 	srli	r3,r3,2
10108508:	00800084 	movi	r2,2
1010850c:	20c00015 	stw	r3,0(r4)
10108510:	f800283a 	ret
10108514:	18bfffcc 	andi	r2,r3,65535
10108518:	10001326 	beq	r2,zero,10108568 <__lo0bits+0x80>
1010851c:	0005883a 	mov	r2,zero
10108520:	19403fcc 	andi	r5,r3,255
10108524:	2800021e 	bne	r5,zero,10108530 <__lo0bits+0x48>
10108528:	1806d23a 	srli	r3,r3,8
1010852c:	10800204 	addi	r2,r2,8
10108530:	194003cc 	andi	r5,r3,15
10108534:	2800021e 	bne	r5,zero,10108540 <__lo0bits+0x58>
10108538:	1806d13a 	srli	r3,r3,4
1010853c:	10800104 	addi	r2,r2,4
10108540:	194000cc 	andi	r5,r3,3
10108544:	2800021e 	bne	r5,zero,10108550 <__lo0bits+0x68>
10108548:	1806d0ba 	srli	r3,r3,2
1010854c:	10800084 	addi	r2,r2,2
10108550:	1940004c 	andi	r5,r3,1
10108554:	2800081e 	bne	r5,zero,10108578 <__lo0bits+0x90>
10108558:	1806d07a 	srli	r3,r3,1
1010855c:	1800051e 	bne	r3,zero,10108574 <__lo0bits+0x8c>
10108560:	00800804 	movi	r2,32
10108564:	f800283a 	ret
10108568:	1806d43a 	srli	r3,r3,16
1010856c:	00800404 	movi	r2,16
10108570:	003feb06 	br	10108520 <__alt_data_end+0xfffe8520>
10108574:	10800044 	addi	r2,r2,1
10108578:	20c00015 	stw	r3,0(r4)
1010857c:	f800283a 	ret
10108580:	0005883a 	mov	r2,zero
10108584:	f800283a 	ret
10108588:	1806d07a 	srli	r3,r3,1
1010858c:	00800044 	movi	r2,1
10108590:	20c00015 	stw	r3,0(r4)
10108594:	f800283a 	ret

10108598 <__i2b>:
10108598:	defffd04 	addi	sp,sp,-12
1010859c:	dc000015 	stw	r16,0(sp)
101085a0:	04000044 	movi	r16,1
101085a4:	dc400115 	stw	r17,4(sp)
101085a8:	2823883a 	mov	r17,r5
101085ac:	800b883a 	mov	r5,r16
101085b0:	dfc00215 	stw	ra,8(sp)
101085b4:	010818c0 	call	1010818c <_Balloc>
101085b8:	14400515 	stw	r17,20(r2)
101085bc:	14000415 	stw	r16,16(r2)
101085c0:	dfc00217 	ldw	ra,8(sp)
101085c4:	dc400117 	ldw	r17,4(sp)
101085c8:	dc000017 	ldw	r16,0(sp)
101085cc:	dec00304 	addi	sp,sp,12
101085d0:	f800283a 	ret

101085d4 <__multiply>:
101085d4:	defffa04 	addi	sp,sp,-24
101085d8:	dcc00315 	stw	r19,12(sp)
101085dc:	dc800215 	stw	r18,8(sp)
101085e0:	34c00417 	ldw	r19,16(r6)
101085e4:	2c800417 	ldw	r18,16(r5)
101085e8:	dd000415 	stw	r20,16(sp)
101085ec:	dc400115 	stw	r17,4(sp)
101085f0:	dfc00515 	stw	ra,20(sp)
101085f4:	dc000015 	stw	r16,0(sp)
101085f8:	2829883a 	mov	r20,r5
101085fc:	3023883a 	mov	r17,r6
10108600:	94c0050e 	bge	r18,r19,10108618 <__multiply+0x44>
10108604:	9007883a 	mov	r3,r18
10108608:	3029883a 	mov	r20,r6
1010860c:	9825883a 	mov	r18,r19
10108610:	2823883a 	mov	r17,r5
10108614:	1827883a 	mov	r19,r3
10108618:	a0800217 	ldw	r2,8(r20)
1010861c:	94e1883a 	add	r16,r18,r19
10108620:	a1400117 	ldw	r5,4(r20)
10108624:	1400010e 	bge	r2,r16,1010862c <__multiply+0x58>
10108628:	29400044 	addi	r5,r5,1
1010862c:	010818c0 	call	1010818c <_Balloc>
10108630:	8415883a 	add	r10,r16,r16
10108634:	12c00504 	addi	r11,r2,20
10108638:	5295883a 	add	r10,r10,r10
1010863c:	5a95883a 	add	r10,r11,r10
10108640:	5807883a 	mov	r3,r11
10108644:	5a80032e 	bgeu	r11,r10,10108654 <__multiply+0x80>
10108648:	18000015 	stw	zero,0(r3)
1010864c:	18c00104 	addi	r3,r3,4
10108650:	1abffd36 	bltu	r3,r10,10108648 <__alt_data_end+0xfffe8648>
10108654:	9ce7883a 	add	r19,r19,r19
10108658:	94a5883a 	add	r18,r18,r18
1010865c:	89800504 	addi	r6,r17,20
10108660:	9ce7883a 	add	r19,r19,r19
10108664:	a3400504 	addi	r13,r20,20
10108668:	94a5883a 	add	r18,r18,r18
1010866c:	34d9883a 	add	r12,r6,r19
10108670:	6c93883a 	add	r9,r13,r18
10108674:	3300422e 	bgeu	r6,r12,10108780 <__multiply+0x1ac>
10108678:	37c00017 	ldw	ra,0(r6)
1010867c:	fbffffcc 	andi	r15,ra,65535
10108680:	78001b26 	beq	r15,zero,101086f0 <__multiply+0x11c>
10108684:	5811883a 	mov	r8,r11
10108688:	681d883a 	mov	r14,r13
1010868c:	000f883a 	mov	r7,zero
10108690:	71000017 	ldw	r4,0(r14)
10108694:	40c00017 	ldw	r3,0(r8)
10108698:	73800104 	addi	r14,r14,4
1010869c:	217fffcc 	andi	r5,r4,65535
101086a0:	2bcb383a 	mul	r5,r5,r15
101086a4:	2008d43a 	srli	r4,r4,16
101086a8:	1c7fffcc 	andi	r17,r3,65535
101086ac:	2c4b883a 	add	r5,r5,r17
101086b0:	29cb883a 	add	r5,r5,r7
101086b4:	23c9383a 	mul	r4,r4,r15
101086b8:	1806d43a 	srli	r3,r3,16
101086bc:	280ed43a 	srli	r7,r5,16
101086c0:	297fffcc 	andi	r5,r5,65535
101086c4:	20c7883a 	add	r3,r4,r3
101086c8:	19c7883a 	add	r3,r3,r7
101086cc:	1808943a 	slli	r4,r3,16
101086d0:	4023883a 	mov	r17,r8
101086d4:	180ed43a 	srli	r7,r3,16
101086d8:	214ab03a 	or	r5,r4,r5
101086dc:	41400015 	stw	r5,0(r8)
101086e0:	42000104 	addi	r8,r8,4
101086e4:	727fea36 	bltu	r14,r9,10108690 <__alt_data_end+0xfffe8690>
101086e8:	89c00115 	stw	r7,4(r17)
101086ec:	37c00017 	ldw	ra,0(r6)
101086f0:	f83ed43a 	srli	ra,ra,16
101086f4:	f8001f26 	beq	ra,zero,10108774 <__multiply+0x1a0>
101086f8:	58c00017 	ldw	r3,0(r11)
101086fc:	681d883a 	mov	r14,r13
10108700:	581f883a 	mov	r15,r11
10108704:	1811883a 	mov	r8,r3
10108708:	5825883a 	mov	r18,r11
1010870c:	000f883a 	mov	r7,zero
10108710:	00000106 	br	10108718 <__multiply+0x144>
10108714:	8825883a 	mov	r18,r17
10108718:	7140000b 	ldhu	r5,0(r14)
1010871c:	4010d43a 	srli	r8,r8,16
10108720:	193fffcc 	andi	r4,r3,65535
10108724:	2fcb383a 	mul	r5,r5,ra
10108728:	7bc00104 	addi	r15,r15,4
1010872c:	73800104 	addi	r14,r14,4
10108730:	2a0b883a 	add	r5,r5,r8
10108734:	29cb883a 	add	r5,r5,r7
10108738:	2806943a 	slli	r3,r5,16
1010873c:	94400104 	addi	r17,r18,4
10108740:	280ad43a 	srli	r5,r5,16
10108744:	1908b03a 	or	r4,r3,r4
10108748:	793fff15 	stw	r4,-4(r15)
1010874c:	70ffff17 	ldw	r3,-4(r14)
10108750:	8a000017 	ldw	r8,0(r17)
10108754:	1806d43a 	srli	r3,r3,16
10108758:	413fffcc 	andi	r4,r8,65535
1010875c:	1fc7383a 	mul	r3,r3,ra
10108760:	1907883a 	add	r3,r3,r4
10108764:	1947883a 	add	r3,r3,r5
10108768:	180ed43a 	srli	r7,r3,16
1010876c:	727fe936 	bltu	r14,r9,10108714 <__alt_data_end+0xfffe8714>
10108770:	90c00115 	stw	r3,4(r18)
10108774:	31800104 	addi	r6,r6,4
10108778:	5ac00104 	addi	r11,r11,4
1010877c:	333fbe36 	bltu	r6,r12,10108678 <__alt_data_end+0xfffe8678>
10108780:	0400090e 	bge	zero,r16,101087a8 <__multiply+0x1d4>
10108784:	50ffff17 	ldw	r3,-4(r10)
10108788:	52bfff04 	addi	r10,r10,-4
1010878c:	18000326 	beq	r3,zero,1010879c <__multiply+0x1c8>
10108790:	00000506 	br	101087a8 <__multiply+0x1d4>
10108794:	50c00017 	ldw	r3,0(r10)
10108798:	1800031e 	bne	r3,zero,101087a8 <__multiply+0x1d4>
1010879c:	843fffc4 	addi	r16,r16,-1
101087a0:	52bfff04 	addi	r10,r10,-4
101087a4:	803ffb1e 	bne	r16,zero,10108794 <__alt_data_end+0xfffe8794>
101087a8:	14000415 	stw	r16,16(r2)
101087ac:	dfc00517 	ldw	ra,20(sp)
101087b0:	dd000417 	ldw	r20,16(sp)
101087b4:	dcc00317 	ldw	r19,12(sp)
101087b8:	dc800217 	ldw	r18,8(sp)
101087bc:	dc400117 	ldw	r17,4(sp)
101087c0:	dc000017 	ldw	r16,0(sp)
101087c4:	dec00604 	addi	sp,sp,24
101087c8:	f800283a 	ret

101087cc <__pow5mult>:
101087cc:	defffa04 	addi	sp,sp,-24
101087d0:	dcc00315 	stw	r19,12(sp)
101087d4:	dc000015 	stw	r16,0(sp)
101087d8:	dfc00515 	stw	ra,20(sp)
101087dc:	dd000415 	stw	r20,16(sp)
101087e0:	dc800215 	stw	r18,8(sp)
101087e4:	dc400115 	stw	r17,4(sp)
101087e8:	308000cc 	andi	r2,r6,3
101087ec:	3021883a 	mov	r16,r6
101087f0:	2027883a 	mov	r19,r4
101087f4:	10002f1e 	bne	r2,zero,101088b4 <__pow5mult+0xe8>
101087f8:	2825883a 	mov	r18,r5
101087fc:	8021d0ba 	srai	r16,r16,2
10108800:	80001a26 	beq	r16,zero,1010886c <__pow5mult+0xa0>
10108804:	9c401217 	ldw	r17,72(r19)
10108808:	8800061e 	bne	r17,zero,10108824 <__pow5mult+0x58>
1010880c:	00003406 	br	101088e0 <__pow5mult+0x114>
10108810:	8021d07a 	srai	r16,r16,1
10108814:	80001526 	beq	r16,zero,1010886c <__pow5mult+0xa0>
10108818:	88800017 	ldw	r2,0(r17)
1010881c:	10001c26 	beq	r2,zero,10108890 <__pow5mult+0xc4>
10108820:	1023883a 	mov	r17,r2
10108824:	8080004c 	andi	r2,r16,1
10108828:	103ff926 	beq	r2,zero,10108810 <__alt_data_end+0xfffe8810>
1010882c:	880d883a 	mov	r6,r17
10108830:	900b883a 	mov	r5,r18
10108834:	9809883a 	mov	r4,r19
10108838:	01085d40 	call	101085d4 <__multiply>
1010883c:	90001b26 	beq	r18,zero,101088ac <__pow5mult+0xe0>
10108840:	91000117 	ldw	r4,4(r18)
10108844:	98c01317 	ldw	r3,76(r19)
10108848:	8021d07a 	srai	r16,r16,1
1010884c:	2109883a 	add	r4,r4,r4
10108850:	2109883a 	add	r4,r4,r4
10108854:	1907883a 	add	r3,r3,r4
10108858:	19000017 	ldw	r4,0(r3)
1010885c:	91000015 	stw	r4,0(r18)
10108860:	1c800015 	stw	r18,0(r3)
10108864:	1025883a 	mov	r18,r2
10108868:	803feb1e 	bne	r16,zero,10108818 <__alt_data_end+0xfffe8818>
1010886c:	9005883a 	mov	r2,r18
10108870:	dfc00517 	ldw	ra,20(sp)
10108874:	dd000417 	ldw	r20,16(sp)
10108878:	dcc00317 	ldw	r19,12(sp)
1010887c:	dc800217 	ldw	r18,8(sp)
10108880:	dc400117 	ldw	r17,4(sp)
10108884:	dc000017 	ldw	r16,0(sp)
10108888:	dec00604 	addi	sp,sp,24
1010888c:	f800283a 	ret
10108890:	880d883a 	mov	r6,r17
10108894:	880b883a 	mov	r5,r17
10108898:	9809883a 	mov	r4,r19
1010889c:	01085d40 	call	101085d4 <__multiply>
101088a0:	88800015 	stw	r2,0(r17)
101088a4:	10000015 	stw	zero,0(r2)
101088a8:	003fdd06 	br	10108820 <__alt_data_end+0xfffe8820>
101088ac:	1025883a 	mov	r18,r2
101088b0:	003fd706 	br	10108810 <__alt_data_end+0xfffe8810>
101088b4:	10bfffc4 	addi	r2,r2,-1
101088b8:	1085883a 	add	r2,r2,r2
101088bc:	00c40474 	movhi	r3,4113
101088c0:	18c42304 	addi	r3,r3,4236
101088c4:	1085883a 	add	r2,r2,r2
101088c8:	1885883a 	add	r2,r3,r2
101088cc:	11800017 	ldw	r6,0(r2)
101088d0:	000f883a 	mov	r7,zero
101088d4:	010825c0 	call	1010825c <__multadd>
101088d8:	1025883a 	mov	r18,r2
101088dc:	003fc706 	br	101087fc <__alt_data_end+0xfffe87fc>
101088e0:	05000044 	movi	r20,1
101088e4:	a00b883a 	mov	r5,r20
101088e8:	9809883a 	mov	r4,r19
101088ec:	010818c0 	call	1010818c <_Balloc>
101088f0:	1023883a 	mov	r17,r2
101088f4:	00809c44 	movi	r2,625
101088f8:	88800515 	stw	r2,20(r17)
101088fc:	8d000415 	stw	r20,16(r17)
10108900:	9c401215 	stw	r17,72(r19)
10108904:	88000015 	stw	zero,0(r17)
10108908:	003fc606 	br	10108824 <__alt_data_end+0xfffe8824>

1010890c <__lshift>:
1010890c:	defff904 	addi	sp,sp,-28
10108910:	dd400515 	stw	r21,20(sp)
10108914:	dcc00315 	stw	r19,12(sp)
10108918:	302bd17a 	srai	r21,r6,5
1010891c:	2cc00417 	ldw	r19,16(r5)
10108920:	28800217 	ldw	r2,8(r5)
10108924:	dd000415 	stw	r20,16(sp)
10108928:	ace7883a 	add	r19,r21,r19
1010892c:	dc800215 	stw	r18,8(sp)
10108930:	dc400115 	stw	r17,4(sp)
10108934:	dc000015 	stw	r16,0(sp)
10108938:	dfc00615 	stw	ra,24(sp)
1010893c:	9c000044 	addi	r16,r19,1
10108940:	2823883a 	mov	r17,r5
10108944:	3029883a 	mov	r20,r6
10108948:	2025883a 	mov	r18,r4
1010894c:	29400117 	ldw	r5,4(r5)
10108950:	1400030e 	bge	r2,r16,10108960 <__lshift+0x54>
10108954:	1085883a 	add	r2,r2,r2
10108958:	29400044 	addi	r5,r5,1
1010895c:	143ffd16 	blt	r2,r16,10108954 <__alt_data_end+0xfffe8954>
10108960:	9009883a 	mov	r4,r18
10108964:	010818c0 	call	1010818c <_Balloc>
10108968:	10c00504 	addi	r3,r2,20
1010896c:	0540070e 	bge	zero,r21,1010898c <__lshift+0x80>
10108970:	ad6b883a 	add	r21,r21,r21
10108974:	ad6b883a 	add	r21,r21,r21
10108978:	1809883a 	mov	r4,r3
1010897c:	1d47883a 	add	r3,r3,r21
10108980:	20000015 	stw	zero,0(r4)
10108984:	21000104 	addi	r4,r4,4
10108988:	193ffd1e 	bne	r3,r4,10108980 <__alt_data_end+0xfffe8980>
1010898c:	8a000417 	ldw	r8,16(r17)
10108990:	89000504 	addi	r4,r17,20
10108994:	a18007cc 	andi	r6,r20,31
10108998:	4211883a 	add	r8,r8,r8
1010899c:	4211883a 	add	r8,r8,r8
101089a0:	2211883a 	add	r8,r4,r8
101089a4:	30002326 	beq	r6,zero,10108a34 <__lshift+0x128>
101089a8:	02400804 	movi	r9,32
101089ac:	4993c83a 	sub	r9,r9,r6
101089b0:	000b883a 	mov	r5,zero
101089b4:	21c00017 	ldw	r7,0(r4)
101089b8:	1815883a 	mov	r10,r3
101089bc:	18c00104 	addi	r3,r3,4
101089c0:	398e983a 	sll	r7,r7,r6
101089c4:	21000104 	addi	r4,r4,4
101089c8:	394ab03a 	or	r5,r7,r5
101089cc:	197fff15 	stw	r5,-4(r3)
101089d0:	217fff17 	ldw	r5,-4(r4)
101089d4:	2a4ad83a 	srl	r5,r5,r9
101089d8:	223ff636 	bltu	r4,r8,101089b4 <__alt_data_end+0xfffe89b4>
101089dc:	51400115 	stw	r5,4(r10)
101089e0:	28001a1e 	bne	r5,zero,10108a4c <__lshift+0x140>
101089e4:	843fffc4 	addi	r16,r16,-1
101089e8:	14000415 	stw	r16,16(r2)
101089ec:	88000826 	beq	r17,zero,10108a10 <__lshift+0x104>
101089f0:	89000117 	ldw	r4,4(r17)
101089f4:	90c01317 	ldw	r3,76(r18)
101089f8:	2109883a 	add	r4,r4,r4
101089fc:	2109883a 	add	r4,r4,r4
10108a00:	1907883a 	add	r3,r3,r4
10108a04:	19000017 	ldw	r4,0(r3)
10108a08:	89000015 	stw	r4,0(r17)
10108a0c:	1c400015 	stw	r17,0(r3)
10108a10:	dfc00617 	ldw	ra,24(sp)
10108a14:	dd400517 	ldw	r21,20(sp)
10108a18:	dd000417 	ldw	r20,16(sp)
10108a1c:	dcc00317 	ldw	r19,12(sp)
10108a20:	dc800217 	ldw	r18,8(sp)
10108a24:	dc400117 	ldw	r17,4(sp)
10108a28:	dc000017 	ldw	r16,0(sp)
10108a2c:	dec00704 	addi	sp,sp,28
10108a30:	f800283a 	ret
10108a34:	21400017 	ldw	r5,0(r4)
10108a38:	18c00104 	addi	r3,r3,4
10108a3c:	21000104 	addi	r4,r4,4
10108a40:	197fff15 	stw	r5,-4(r3)
10108a44:	223ffb36 	bltu	r4,r8,10108a34 <__alt_data_end+0xfffe8a34>
10108a48:	003fe606 	br	101089e4 <__alt_data_end+0xfffe89e4>
10108a4c:	9c000084 	addi	r16,r19,2
10108a50:	003fe406 	br	101089e4 <__alt_data_end+0xfffe89e4>

10108a54 <__mcmp>:
10108a54:	20800417 	ldw	r2,16(r4)
10108a58:	28c00417 	ldw	r3,16(r5)
10108a5c:	10c5c83a 	sub	r2,r2,r3
10108a60:	1000111e 	bne	r2,zero,10108aa8 <__mcmp+0x54>
10108a64:	18c7883a 	add	r3,r3,r3
10108a68:	18c7883a 	add	r3,r3,r3
10108a6c:	21000504 	addi	r4,r4,20
10108a70:	29400504 	addi	r5,r5,20
10108a74:	20c5883a 	add	r2,r4,r3
10108a78:	28cb883a 	add	r5,r5,r3
10108a7c:	00000106 	br	10108a84 <__mcmp+0x30>
10108a80:	20800a2e 	bgeu	r4,r2,10108aac <__mcmp+0x58>
10108a84:	10bfff04 	addi	r2,r2,-4
10108a88:	297fff04 	addi	r5,r5,-4
10108a8c:	11800017 	ldw	r6,0(r2)
10108a90:	28c00017 	ldw	r3,0(r5)
10108a94:	30fffa26 	beq	r6,r3,10108a80 <__alt_data_end+0xfffe8a80>
10108a98:	30c00236 	bltu	r6,r3,10108aa4 <__mcmp+0x50>
10108a9c:	00800044 	movi	r2,1
10108aa0:	f800283a 	ret
10108aa4:	00bfffc4 	movi	r2,-1
10108aa8:	f800283a 	ret
10108aac:	0005883a 	mov	r2,zero
10108ab0:	f800283a 	ret

10108ab4 <__mdiff>:
10108ab4:	28c00417 	ldw	r3,16(r5)
10108ab8:	30800417 	ldw	r2,16(r6)
10108abc:	defffa04 	addi	sp,sp,-24
10108ac0:	dcc00315 	stw	r19,12(sp)
10108ac4:	dc800215 	stw	r18,8(sp)
10108ac8:	dfc00515 	stw	ra,20(sp)
10108acc:	dd000415 	stw	r20,16(sp)
10108ad0:	dc400115 	stw	r17,4(sp)
10108ad4:	dc000015 	stw	r16,0(sp)
10108ad8:	1887c83a 	sub	r3,r3,r2
10108adc:	2825883a 	mov	r18,r5
10108ae0:	3027883a 	mov	r19,r6
10108ae4:	1800141e 	bne	r3,zero,10108b38 <__mdiff+0x84>
10108ae8:	1085883a 	add	r2,r2,r2
10108aec:	1085883a 	add	r2,r2,r2
10108af0:	2a000504 	addi	r8,r5,20
10108af4:	34000504 	addi	r16,r6,20
10108af8:	4087883a 	add	r3,r8,r2
10108afc:	8085883a 	add	r2,r16,r2
10108b00:	00000106 	br	10108b08 <__mdiff+0x54>
10108b04:	40c0592e 	bgeu	r8,r3,10108c6c <__mdiff+0x1b8>
10108b08:	18ffff04 	addi	r3,r3,-4
10108b0c:	10bfff04 	addi	r2,r2,-4
10108b10:	19c00017 	ldw	r7,0(r3)
10108b14:	11400017 	ldw	r5,0(r2)
10108b18:	397ffa26 	beq	r7,r5,10108b04 <__alt_data_end+0xfffe8b04>
10108b1c:	3940592e 	bgeu	r7,r5,10108c84 <__mdiff+0x1d0>
10108b20:	9005883a 	mov	r2,r18
10108b24:	4023883a 	mov	r17,r8
10108b28:	9825883a 	mov	r18,r19
10108b2c:	05000044 	movi	r20,1
10108b30:	1027883a 	mov	r19,r2
10108b34:	00000406 	br	10108b48 <__mdiff+0x94>
10108b38:	18005616 	blt	r3,zero,10108c94 <__mdiff+0x1e0>
10108b3c:	34400504 	addi	r17,r6,20
10108b40:	2c000504 	addi	r16,r5,20
10108b44:	0029883a 	mov	r20,zero
10108b48:	91400117 	ldw	r5,4(r18)
10108b4c:	010818c0 	call	1010818c <_Balloc>
10108b50:	92400417 	ldw	r9,16(r18)
10108b54:	9b000417 	ldw	r12,16(r19)
10108b58:	12c00504 	addi	r11,r2,20
10108b5c:	4a51883a 	add	r8,r9,r9
10108b60:	6319883a 	add	r12,r12,r12
10108b64:	4211883a 	add	r8,r8,r8
10108b68:	6319883a 	add	r12,r12,r12
10108b6c:	15000315 	stw	r20,12(r2)
10108b70:	8211883a 	add	r8,r16,r8
10108b74:	8b19883a 	add	r12,r17,r12
10108b78:	0007883a 	mov	r3,zero
10108b7c:	81400017 	ldw	r5,0(r16)
10108b80:	89c00017 	ldw	r7,0(r17)
10108b84:	59800104 	addi	r6,r11,4
10108b88:	293fffcc 	andi	r4,r5,65535
10108b8c:	20c7883a 	add	r3,r4,r3
10108b90:	393fffcc 	andi	r4,r7,65535
10108b94:	1909c83a 	sub	r4,r3,r4
10108b98:	280ad43a 	srli	r5,r5,16
10108b9c:	380ed43a 	srli	r7,r7,16
10108ba0:	2007d43a 	srai	r3,r4,16
10108ba4:	213fffcc 	andi	r4,r4,65535
10108ba8:	29cbc83a 	sub	r5,r5,r7
10108bac:	28c7883a 	add	r3,r5,r3
10108bb0:	180a943a 	slli	r5,r3,16
10108bb4:	8c400104 	addi	r17,r17,4
10108bb8:	84000104 	addi	r16,r16,4
10108bbc:	2908b03a 	or	r4,r5,r4
10108bc0:	59000015 	stw	r4,0(r11)
10108bc4:	1807d43a 	srai	r3,r3,16
10108bc8:	3015883a 	mov	r10,r6
10108bcc:	3017883a 	mov	r11,r6
10108bd0:	8b3fea36 	bltu	r17,r12,10108b7c <__alt_data_end+0xfffe8b7c>
10108bd4:	8200162e 	bgeu	r16,r8,10108c30 <__mdiff+0x17c>
10108bd8:	8017883a 	mov	r11,r16
10108bdc:	59400017 	ldw	r5,0(r11)
10108be0:	31800104 	addi	r6,r6,4
10108be4:	5ac00104 	addi	r11,r11,4
10108be8:	293fffcc 	andi	r4,r5,65535
10108bec:	20c7883a 	add	r3,r4,r3
10108bf0:	280ed43a 	srli	r7,r5,16
10108bf4:	180bd43a 	srai	r5,r3,16
10108bf8:	193fffcc 	andi	r4,r3,65535
10108bfc:	3947883a 	add	r3,r7,r5
10108c00:	180a943a 	slli	r5,r3,16
10108c04:	1807d43a 	srai	r3,r3,16
10108c08:	2908b03a 	or	r4,r5,r4
10108c0c:	313fff15 	stw	r4,-4(r6)
10108c10:	5a3ff236 	bltu	r11,r8,10108bdc <__alt_data_end+0xfffe8bdc>
10108c14:	0406303a 	nor	r3,zero,r16
10108c18:	1a07883a 	add	r3,r3,r8
10108c1c:	1806d0ba 	srli	r3,r3,2
10108c20:	18c00044 	addi	r3,r3,1
10108c24:	18c7883a 	add	r3,r3,r3
10108c28:	18c7883a 	add	r3,r3,r3
10108c2c:	50d5883a 	add	r10,r10,r3
10108c30:	50ffff04 	addi	r3,r10,-4
10108c34:	2000041e 	bne	r4,zero,10108c48 <__mdiff+0x194>
10108c38:	18ffff04 	addi	r3,r3,-4
10108c3c:	19000017 	ldw	r4,0(r3)
10108c40:	4a7fffc4 	addi	r9,r9,-1
10108c44:	203ffc26 	beq	r4,zero,10108c38 <__alt_data_end+0xfffe8c38>
10108c48:	12400415 	stw	r9,16(r2)
10108c4c:	dfc00517 	ldw	ra,20(sp)
10108c50:	dd000417 	ldw	r20,16(sp)
10108c54:	dcc00317 	ldw	r19,12(sp)
10108c58:	dc800217 	ldw	r18,8(sp)
10108c5c:	dc400117 	ldw	r17,4(sp)
10108c60:	dc000017 	ldw	r16,0(sp)
10108c64:	dec00604 	addi	sp,sp,24
10108c68:	f800283a 	ret
10108c6c:	000b883a 	mov	r5,zero
10108c70:	010818c0 	call	1010818c <_Balloc>
10108c74:	00c00044 	movi	r3,1
10108c78:	10c00415 	stw	r3,16(r2)
10108c7c:	10000515 	stw	zero,20(r2)
10108c80:	003ff206 	br	10108c4c <__alt_data_end+0xfffe8c4c>
10108c84:	8023883a 	mov	r17,r16
10108c88:	0029883a 	mov	r20,zero
10108c8c:	4021883a 	mov	r16,r8
10108c90:	003fad06 	br	10108b48 <__alt_data_end+0xfffe8b48>
10108c94:	9005883a 	mov	r2,r18
10108c98:	94400504 	addi	r17,r18,20
10108c9c:	9c000504 	addi	r16,r19,20
10108ca0:	9825883a 	mov	r18,r19
10108ca4:	05000044 	movi	r20,1
10108ca8:	1027883a 	mov	r19,r2
10108cac:	003fa606 	br	10108b48 <__alt_data_end+0xfffe8b48>

10108cb0 <__ulp>:
10108cb0:	295ffc2c 	andhi	r5,r5,32752
10108cb4:	00bf3034 	movhi	r2,64704
10108cb8:	2887883a 	add	r3,r5,r2
10108cbc:	00c0020e 	bge	zero,r3,10108cc8 <__ulp+0x18>
10108cc0:	0005883a 	mov	r2,zero
10108cc4:	f800283a 	ret
10108cc8:	00c7c83a 	sub	r3,zero,r3
10108ccc:	1807d53a 	srai	r3,r3,20
10108cd0:	008004c4 	movi	r2,19
10108cd4:	10c00b0e 	bge	r2,r3,10108d04 <__ulp+0x54>
10108cd8:	18bffb04 	addi	r2,r3,-20
10108cdc:	01000784 	movi	r4,30
10108ce0:	0007883a 	mov	r3,zero
10108ce4:	20800516 	blt	r4,r2,10108cfc <__ulp+0x4c>
10108ce8:	010007c4 	movi	r4,31
10108cec:	2089c83a 	sub	r4,r4,r2
10108cf0:	00800044 	movi	r2,1
10108cf4:	1104983a 	sll	r2,r2,r4
10108cf8:	f800283a 	ret
10108cfc:	00800044 	movi	r2,1
10108d00:	f800283a 	ret
10108d04:	01400234 	movhi	r5,8
10108d08:	28c7d83a 	sra	r3,r5,r3
10108d0c:	0005883a 	mov	r2,zero
10108d10:	f800283a 	ret

10108d14 <__b2d>:
10108d14:	defffa04 	addi	sp,sp,-24
10108d18:	dc000015 	stw	r16,0(sp)
10108d1c:	24000417 	ldw	r16,16(r4)
10108d20:	dc400115 	stw	r17,4(sp)
10108d24:	24400504 	addi	r17,r4,20
10108d28:	8421883a 	add	r16,r16,r16
10108d2c:	8421883a 	add	r16,r16,r16
10108d30:	8c21883a 	add	r16,r17,r16
10108d34:	dc800215 	stw	r18,8(sp)
10108d38:	84bfff17 	ldw	r18,-4(r16)
10108d3c:	dd000415 	stw	r20,16(sp)
10108d40:	dcc00315 	stw	r19,12(sp)
10108d44:	9009883a 	mov	r4,r18
10108d48:	2829883a 	mov	r20,r5
10108d4c:	dfc00515 	stw	ra,20(sp)
10108d50:	01084800 	call	10108480 <__hi0bits>
10108d54:	00c00804 	movi	r3,32
10108d58:	1889c83a 	sub	r4,r3,r2
10108d5c:	a1000015 	stw	r4,0(r20)
10108d60:	01000284 	movi	r4,10
10108d64:	84ffff04 	addi	r19,r16,-4
10108d68:	20801216 	blt	r4,r2,10108db4 <__b2d+0xa0>
10108d6c:	018002c4 	movi	r6,11
10108d70:	308dc83a 	sub	r6,r6,r2
10108d74:	9186d83a 	srl	r3,r18,r6
10108d78:	18cffc34 	orhi	r3,r3,16368
10108d7c:	8cc0212e 	bgeu	r17,r19,10108e04 <__b2d+0xf0>
10108d80:	813ffe17 	ldw	r4,-8(r16)
10108d84:	218cd83a 	srl	r6,r4,r6
10108d88:	10800544 	addi	r2,r2,21
10108d8c:	9084983a 	sll	r2,r18,r2
10108d90:	1184b03a 	or	r2,r2,r6
10108d94:	dfc00517 	ldw	ra,20(sp)
10108d98:	dd000417 	ldw	r20,16(sp)
10108d9c:	dcc00317 	ldw	r19,12(sp)
10108da0:	dc800217 	ldw	r18,8(sp)
10108da4:	dc400117 	ldw	r17,4(sp)
10108da8:	dc000017 	ldw	r16,0(sp)
10108dac:	dec00604 	addi	sp,sp,24
10108db0:	f800283a 	ret
10108db4:	8cc00f2e 	bgeu	r17,r19,10108df4 <__b2d+0xe0>
10108db8:	117ffd44 	addi	r5,r2,-11
10108dbc:	80bffe17 	ldw	r2,-8(r16)
10108dc0:	28000e26 	beq	r5,zero,10108dfc <__b2d+0xe8>
10108dc4:	1949c83a 	sub	r4,r3,r5
10108dc8:	9164983a 	sll	r18,r18,r5
10108dcc:	1106d83a 	srl	r3,r2,r4
10108dd0:	81bffe04 	addi	r6,r16,-8
10108dd4:	948ffc34 	orhi	r18,r18,16368
10108dd8:	90c6b03a 	or	r3,r18,r3
10108ddc:	89800e2e 	bgeu	r17,r6,10108e18 <__b2d+0x104>
10108de0:	81bffd17 	ldw	r6,-12(r16)
10108de4:	1144983a 	sll	r2,r2,r5
10108de8:	310ad83a 	srl	r5,r6,r4
10108dec:	2884b03a 	or	r2,r5,r2
10108df0:	003fe806 	br	10108d94 <__alt_data_end+0xfffe8d94>
10108df4:	10bffd44 	addi	r2,r2,-11
10108df8:	1000041e 	bne	r2,zero,10108e0c <__b2d+0xf8>
10108dfc:	90cffc34 	orhi	r3,r18,16368
10108e00:	003fe406 	br	10108d94 <__alt_data_end+0xfffe8d94>
10108e04:	000d883a 	mov	r6,zero
10108e08:	003fdf06 	br	10108d88 <__alt_data_end+0xfffe8d88>
10108e0c:	90a4983a 	sll	r18,r18,r2
10108e10:	0005883a 	mov	r2,zero
10108e14:	003ff906 	br	10108dfc <__alt_data_end+0xfffe8dfc>
10108e18:	1144983a 	sll	r2,r2,r5
10108e1c:	003fdd06 	br	10108d94 <__alt_data_end+0xfffe8d94>

10108e20 <__d2b>:
10108e20:	defff804 	addi	sp,sp,-32
10108e24:	dc000215 	stw	r16,8(sp)
10108e28:	3021883a 	mov	r16,r6
10108e2c:	dc400315 	stw	r17,12(sp)
10108e30:	8022907a 	slli	r17,r16,1
10108e34:	dd000615 	stw	r20,24(sp)
10108e38:	2829883a 	mov	r20,r5
10108e3c:	01400044 	movi	r5,1
10108e40:	dcc00515 	stw	r19,20(sp)
10108e44:	dc800415 	stw	r18,16(sp)
10108e48:	dfc00715 	stw	ra,28(sp)
10108e4c:	3825883a 	mov	r18,r7
10108e50:	8822d57a 	srli	r17,r17,21
10108e54:	010818c0 	call	1010818c <_Balloc>
10108e58:	1027883a 	mov	r19,r2
10108e5c:	00800434 	movhi	r2,16
10108e60:	10bfffc4 	addi	r2,r2,-1
10108e64:	808c703a 	and	r6,r16,r2
10108e68:	88000126 	beq	r17,zero,10108e70 <__d2b+0x50>
10108e6c:	31800434 	orhi	r6,r6,16
10108e70:	d9800015 	stw	r6,0(sp)
10108e74:	a0002426 	beq	r20,zero,10108f08 <__d2b+0xe8>
10108e78:	d9000104 	addi	r4,sp,4
10108e7c:	dd000115 	stw	r20,4(sp)
10108e80:	01084e80 	call	101084e8 <__lo0bits>
10108e84:	d8c00017 	ldw	r3,0(sp)
10108e88:	10002f1e 	bne	r2,zero,10108f48 <__d2b+0x128>
10108e8c:	d9000117 	ldw	r4,4(sp)
10108e90:	99000515 	stw	r4,20(r19)
10108e94:	1821003a 	cmpeq	r16,r3,zero
10108e98:	01000084 	movi	r4,2
10108e9c:	2421c83a 	sub	r16,r4,r16
10108ea0:	98c00615 	stw	r3,24(r19)
10108ea4:	9c000415 	stw	r16,16(r19)
10108ea8:	88001f1e 	bne	r17,zero,10108f28 <__d2b+0x108>
10108eac:	10bef384 	addi	r2,r2,-1074
10108eb0:	90800015 	stw	r2,0(r18)
10108eb4:	00900034 	movhi	r2,16384
10108eb8:	10bfffc4 	addi	r2,r2,-1
10108ebc:	8085883a 	add	r2,r16,r2
10108ec0:	1085883a 	add	r2,r2,r2
10108ec4:	1085883a 	add	r2,r2,r2
10108ec8:	9885883a 	add	r2,r19,r2
10108ecc:	11000517 	ldw	r4,20(r2)
10108ed0:	8020917a 	slli	r16,r16,5
10108ed4:	01084800 	call	10108480 <__hi0bits>
10108ed8:	d8c00817 	ldw	r3,32(sp)
10108edc:	8085c83a 	sub	r2,r16,r2
10108ee0:	18800015 	stw	r2,0(r3)
10108ee4:	9805883a 	mov	r2,r19
10108ee8:	dfc00717 	ldw	ra,28(sp)
10108eec:	dd000617 	ldw	r20,24(sp)
10108ef0:	dcc00517 	ldw	r19,20(sp)
10108ef4:	dc800417 	ldw	r18,16(sp)
10108ef8:	dc400317 	ldw	r17,12(sp)
10108efc:	dc000217 	ldw	r16,8(sp)
10108f00:	dec00804 	addi	sp,sp,32
10108f04:	f800283a 	ret
10108f08:	d809883a 	mov	r4,sp
10108f0c:	01084e80 	call	101084e8 <__lo0bits>
10108f10:	d8c00017 	ldw	r3,0(sp)
10108f14:	04000044 	movi	r16,1
10108f18:	9c000415 	stw	r16,16(r19)
10108f1c:	98c00515 	stw	r3,20(r19)
10108f20:	10800804 	addi	r2,r2,32
10108f24:	883fe126 	beq	r17,zero,10108eac <__alt_data_end+0xfffe8eac>
10108f28:	00c00d44 	movi	r3,53
10108f2c:	8c7ef344 	addi	r17,r17,-1075
10108f30:	88a3883a 	add	r17,r17,r2
10108f34:	1885c83a 	sub	r2,r3,r2
10108f38:	d8c00817 	ldw	r3,32(sp)
10108f3c:	94400015 	stw	r17,0(r18)
10108f40:	18800015 	stw	r2,0(r3)
10108f44:	003fe706 	br	10108ee4 <__alt_data_end+0xfffe8ee4>
10108f48:	01000804 	movi	r4,32
10108f4c:	2089c83a 	sub	r4,r4,r2
10108f50:	1908983a 	sll	r4,r3,r4
10108f54:	d9400117 	ldw	r5,4(sp)
10108f58:	1886d83a 	srl	r3,r3,r2
10108f5c:	2148b03a 	or	r4,r4,r5
10108f60:	99000515 	stw	r4,20(r19)
10108f64:	d8c00015 	stw	r3,0(sp)
10108f68:	003fca06 	br	10108e94 <__alt_data_end+0xfffe8e94>

10108f6c <__ratio>:
10108f6c:	defff904 	addi	sp,sp,-28
10108f70:	dc400315 	stw	r17,12(sp)
10108f74:	2823883a 	mov	r17,r5
10108f78:	d9400104 	addi	r5,sp,4
10108f7c:	dfc00615 	stw	ra,24(sp)
10108f80:	dcc00515 	stw	r19,20(sp)
10108f84:	dc800415 	stw	r18,16(sp)
10108f88:	2027883a 	mov	r19,r4
10108f8c:	dc000215 	stw	r16,8(sp)
10108f90:	0108d140 	call	10108d14 <__b2d>
10108f94:	d80b883a 	mov	r5,sp
10108f98:	8809883a 	mov	r4,r17
10108f9c:	1025883a 	mov	r18,r2
10108fa0:	1821883a 	mov	r16,r3
10108fa4:	0108d140 	call	10108d14 <__b2d>
10108fa8:	8a000417 	ldw	r8,16(r17)
10108fac:	99000417 	ldw	r4,16(r19)
10108fb0:	d9400117 	ldw	r5,4(sp)
10108fb4:	2209c83a 	sub	r4,r4,r8
10108fb8:	2010917a 	slli	r8,r4,5
10108fbc:	d9000017 	ldw	r4,0(sp)
10108fc0:	2909c83a 	sub	r4,r5,r4
10108fc4:	4109883a 	add	r4,r8,r4
10108fc8:	01000e0e 	bge	zero,r4,10109004 <__ratio+0x98>
10108fcc:	2008953a 	slli	r4,r4,20
10108fd0:	2421883a 	add	r16,r4,r16
10108fd4:	100d883a 	mov	r6,r2
10108fd8:	180f883a 	mov	r7,r3
10108fdc:	9009883a 	mov	r4,r18
10108fe0:	800b883a 	mov	r5,r16
10108fe4:	010c8e40 	call	1010c8e4 <__divdf3>
10108fe8:	dfc00617 	ldw	ra,24(sp)
10108fec:	dcc00517 	ldw	r19,20(sp)
10108ff0:	dc800417 	ldw	r18,16(sp)
10108ff4:	dc400317 	ldw	r17,12(sp)
10108ff8:	dc000217 	ldw	r16,8(sp)
10108ffc:	dec00704 	addi	sp,sp,28
10109000:	f800283a 	ret
10109004:	2008953a 	slli	r4,r4,20
10109008:	1907c83a 	sub	r3,r3,r4
1010900c:	003ff106 	br	10108fd4 <__alt_data_end+0xfffe8fd4>

10109010 <_mprec_log10>:
10109010:	defffe04 	addi	sp,sp,-8
10109014:	dc000015 	stw	r16,0(sp)
10109018:	dfc00115 	stw	ra,4(sp)
1010901c:	008005c4 	movi	r2,23
10109020:	2021883a 	mov	r16,r4
10109024:	11000d0e 	bge	r2,r4,1010905c <_mprec_log10+0x4c>
10109028:	0005883a 	mov	r2,zero
1010902c:	00cffc34 	movhi	r3,16368
10109030:	843fffc4 	addi	r16,r16,-1
10109034:	000d883a 	mov	r6,zero
10109038:	01d00934 	movhi	r7,16420
1010903c:	1009883a 	mov	r4,r2
10109040:	180b883a 	mov	r5,r3
10109044:	010d4240 	call	1010d424 <__muldf3>
10109048:	803ff91e 	bne	r16,zero,10109030 <__alt_data_end+0xfffe9030>
1010904c:	dfc00117 	ldw	ra,4(sp)
10109050:	dc000017 	ldw	r16,0(sp)
10109054:	dec00204 	addi	sp,sp,8
10109058:	f800283a 	ret
1010905c:	202090fa 	slli	r16,r4,3
10109060:	00840474 	movhi	r2,4113
10109064:	10843a04 	addi	r2,r2,4328
10109068:	1421883a 	add	r16,r2,r16
1010906c:	80800017 	ldw	r2,0(r16)
10109070:	80c00117 	ldw	r3,4(r16)
10109074:	dfc00117 	ldw	ra,4(sp)
10109078:	dc000017 	ldw	r16,0(sp)
1010907c:	dec00204 	addi	sp,sp,8
10109080:	f800283a 	ret

10109084 <__copybits>:
10109084:	297fffc4 	addi	r5,r5,-1
10109088:	280fd17a 	srai	r7,r5,5
1010908c:	30c00417 	ldw	r3,16(r6)
10109090:	30800504 	addi	r2,r6,20
10109094:	39c00044 	addi	r7,r7,1
10109098:	18c7883a 	add	r3,r3,r3
1010909c:	39cf883a 	add	r7,r7,r7
101090a0:	18c7883a 	add	r3,r3,r3
101090a4:	39cf883a 	add	r7,r7,r7
101090a8:	10c7883a 	add	r3,r2,r3
101090ac:	21cf883a 	add	r7,r4,r7
101090b0:	10c00d2e 	bgeu	r2,r3,101090e8 <__copybits+0x64>
101090b4:	200b883a 	mov	r5,r4
101090b8:	12000017 	ldw	r8,0(r2)
101090bc:	29400104 	addi	r5,r5,4
101090c0:	10800104 	addi	r2,r2,4
101090c4:	2a3fff15 	stw	r8,-4(r5)
101090c8:	10fffb36 	bltu	r2,r3,101090b8 <__alt_data_end+0xfffe90b8>
101090cc:	1985c83a 	sub	r2,r3,r6
101090d0:	10bffac4 	addi	r2,r2,-21
101090d4:	1004d0ba 	srli	r2,r2,2
101090d8:	10800044 	addi	r2,r2,1
101090dc:	1085883a 	add	r2,r2,r2
101090e0:	1085883a 	add	r2,r2,r2
101090e4:	2089883a 	add	r4,r4,r2
101090e8:	21c0032e 	bgeu	r4,r7,101090f8 <__copybits+0x74>
101090ec:	20000015 	stw	zero,0(r4)
101090f0:	21000104 	addi	r4,r4,4
101090f4:	21fffd36 	bltu	r4,r7,101090ec <__alt_data_end+0xfffe90ec>
101090f8:	f800283a 	ret

101090fc <__any_on>:
101090fc:	20c00417 	ldw	r3,16(r4)
10109100:	2805d17a 	srai	r2,r5,5
10109104:	21000504 	addi	r4,r4,20
10109108:	18800d0e 	bge	r3,r2,10109140 <__any_on+0x44>
1010910c:	18c7883a 	add	r3,r3,r3
10109110:	18c7883a 	add	r3,r3,r3
10109114:	20c7883a 	add	r3,r4,r3
10109118:	20c0192e 	bgeu	r4,r3,10109180 <__any_on+0x84>
1010911c:	18bfff17 	ldw	r2,-4(r3)
10109120:	18ffff04 	addi	r3,r3,-4
10109124:	1000041e 	bne	r2,zero,10109138 <__any_on+0x3c>
10109128:	20c0142e 	bgeu	r4,r3,1010917c <__any_on+0x80>
1010912c:	18ffff04 	addi	r3,r3,-4
10109130:	19400017 	ldw	r5,0(r3)
10109134:	283ffc26 	beq	r5,zero,10109128 <__alt_data_end+0xfffe9128>
10109138:	00800044 	movi	r2,1
1010913c:	f800283a 	ret
10109140:	10c00a0e 	bge	r2,r3,1010916c <__any_on+0x70>
10109144:	1085883a 	add	r2,r2,r2
10109148:	1085883a 	add	r2,r2,r2
1010914c:	294007cc 	andi	r5,r5,31
10109150:	2087883a 	add	r3,r4,r2
10109154:	283ff026 	beq	r5,zero,10109118 <__alt_data_end+0xfffe9118>
10109158:	19800017 	ldw	r6,0(r3)
1010915c:	3144d83a 	srl	r2,r6,r5
10109160:	114a983a 	sll	r5,r2,r5
10109164:	317ff41e 	bne	r6,r5,10109138 <__alt_data_end+0xfffe9138>
10109168:	003feb06 	br	10109118 <__alt_data_end+0xfffe9118>
1010916c:	1085883a 	add	r2,r2,r2
10109170:	1085883a 	add	r2,r2,r2
10109174:	2087883a 	add	r3,r4,r2
10109178:	003fe706 	br	10109118 <__alt_data_end+0xfffe9118>
1010917c:	f800283a 	ret
10109180:	0005883a 	mov	r2,zero
10109184:	f800283a 	ret

10109188 <_read_r>:
10109188:	defffd04 	addi	sp,sp,-12
1010918c:	2805883a 	mov	r2,r5
10109190:	dc000015 	stw	r16,0(sp)
10109194:	04040474 	movhi	r16,4113
10109198:	dc400115 	stw	r17,4(sp)
1010919c:	300b883a 	mov	r5,r6
101091a0:	84123704 	addi	r16,r16,18652
101091a4:	2023883a 	mov	r17,r4
101091a8:	380d883a 	mov	r6,r7
101091ac:	1009883a 	mov	r4,r2
101091b0:	dfc00215 	stw	ra,8(sp)
101091b4:	80000015 	stw	zero,0(r16)
101091b8:	010ef780 	call	1010ef78 <read>
101091bc:	00ffffc4 	movi	r3,-1
101091c0:	10c00526 	beq	r2,r3,101091d8 <_read_r+0x50>
101091c4:	dfc00217 	ldw	ra,8(sp)
101091c8:	dc400117 	ldw	r17,4(sp)
101091cc:	dc000017 	ldw	r16,0(sp)
101091d0:	dec00304 	addi	sp,sp,12
101091d4:	f800283a 	ret
101091d8:	80c00017 	ldw	r3,0(r16)
101091dc:	183ff926 	beq	r3,zero,101091c4 <__alt_data_end+0xfffe91c4>
101091e0:	88c00015 	stw	r3,0(r17)
101091e4:	003ff706 	br	101091c4 <__alt_data_end+0xfffe91c4>

101091e8 <_realloc_r>:
101091e8:	defff604 	addi	sp,sp,-40
101091ec:	dc400115 	stw	r17,4(sp)
101091f0:	dfc00915 	stw	ra,36(sp)
101091f4:	df000815 	stw	fp,32(sp)
101091f8:	ddc00715 	stw	r23,28(sp)
101091fc:	dd800615 	stw	r22,24(sp)
10109200:	dd400515 	stw	r21,20(sp)
10109204:	dd000415 	stw	r20,16(sp)
10109208:	dcc00315 	stw	r19,12(sp)
1010920c:	dc800215 	stw	r18,8(sp)
10109210:	dc000015 	stw	r16,0(sp)
10109214:	3023883a 	mov	r17,r6
10109218:	2800b626 	beq	r5,zero,101094f4 <_realloc_r+0x30c>
1010921c:	2829883a 	mov	r20,r5
10109220:	2025883a 	mov	r18,r4
10109224:	010ec6c0 	call	1010ec6c <__malloc_lock>
10109228:	a0ffff17 	ldw	r3,-4(r20)
1010922c:	043fff04 	movi	r16,-4
10109230:	888002c4 	addi	r2,r17,11
10109234:	01000584 	movi	r4,22
10109238:	a57ffe04 	addi	r21,r20,-8
1010923c:	1c20703a 	and	r16,r3,r16
10109240:	2080332e 	bgeu	r4,r2,10109310 <_realloc_r+0x128>
10109244:	05bffe04 	movi	r22,-8
10109248:	15ac703a 	and	r22,r2,r22
1010924c:	b005883a 	mov	r2,r22
10109250:	b0005716 	blt	r22,zero,101093b0 <_realloc_r+0x1c8>
10109254:	b4405636 	bltu	r22,r17,101093b0 <_realloc_r+0x1c8>
10109258:	8080300e 	bge	r16,r2,1010931c <_realloc_r+0x134>
1010925c:	07040474 	movhi	fp,4113
10109260:	e705ca04 	addi	fp,fp,5928
10109264:	e2000217 	ldw	r8,8(fp)
10109268:	ac09883a 	add	r4,r21,r16
1010926c:	22006126 	beq	r4,r8,101093f4 <_realloc_r+0x20c>
10109270:	22400117 	ldw	r9,4(r4)
10109274:	01ffff84 	movi	r7,-2
10109278:	49ce703a 	and	r7,r9,r7
1010927c:	21cf883a 	add	r7,r4,r7
10109280:	39800117 	ldw	r6,4(r7)
10109284:	3180004c 	andi	r6,r6,1
10109288:	30003e26 	beq	r6,zero,10109384 <_realloc_r+0x19c>
1010928c:	18c0004c 	andi	r3,r3,1
10109290:	18008126 	beq	r3,zero,10109498 <_realloc_r+0x2b0>
10109294:	880b883a 	mov	r5,r17
10109298:	9009883a 	mov	r4,r18
1010929c:	0102c2c0 	call	10102c2c <_malloc_r>
101092a0:	1023883a 	mov	r17,r2
101092a4:	10011e26 	beq	r2,zero,10109720 <_realloc_r+0x538>
101092a8:	a0ffff17 	ldw	r3,-4(r20)
101092ac:	113ffe04 	addi	r4,r2,-8
101092b0:	00bfff84 	movi	r2,-2
101092b4:	1884703a 	and	r2,r3,r2
101092b8:	a885883a 	add	r2,r21,r2
101092bc:	2080ee26 	beq	r4,r2,10109678 <_realloc_r+0x490>
101092c0:	81bfff04 	addi	r6,r16,-4
101092c4:	00800904 	movi	r2,36
101092c8:	1180b836 	bltu	r2,r6,101095ac <_realloc_r+0x3c4>
101092cc:	00c004c4 	movi	r3,19
101092d0:	19809536 	bltu	r3,r6,10109528 <_realloc_r+0x340>
101092d4:	8805883a 	mov	r2,r17
101092d8:	a007883a 	mov	r3,r20
101092dc:	19000017 	ldw	r4,0(r3)
101092e0:	11000015 	stw	r4,0(r2)
101092e4:	19000117 	ldw	r4,4(r3)
101092e8:	11000115 	stw	r4,4(r2)
101092ec:	18c00217 	ldw	r3,8(r3)
101092f0:	10c00215 	stw	r3,8(r2)
101092f4:	a00b883a 	mov	r5,r20
101092f8:	9009883a 	mov	r4,r18
101092fc:	0101ffc0 	call	10101ffc <_free_r>
10109300:	9009883a 	mov	r4,r18
10109304:	010ec900 	call	1010ec90 <__malloc_unlock>
10109308:	8805883a 	mov	r2,r17
1010930c:	00001106 	br	10109354 <_realloc_r+0x16c>
10109310:	00800404 	movi	r2,16
10109314:	102d883a 	mov	r22,r2
10109318:	003fce06 	br	10109254 <__alt_data_end+0xfffe9254>
1010931c:	a023883a 	mov	r17,r20
10109320:	858fc83a 	sub	r7,r16,r22
10109324:	008003c4 	movi	r2,15
10109328:	18c0004c 	andi	r3,r3,1
1010932c:	11c02436 	bltu	r2,r7,101093c0 <_realloc_r+0x1d8>
10109330:	1c06b03a 	or	r3,r3,r16
10109334:	a8c00115 	stw	r3,4(r21)
10109338:	ac21883a 	add	r16,r21,r16
1010933c:	80800117 	ldw	r2,4(r16)
10109340:	10800054 	ori	r2,r2,1
10109344:	80800115 	stw	r2,4(r16)
10109348:	9009883a 	mov	r4,r18
1010934c:	010ec900 	call	1010ec90 <__malloc_unlock>
10109350:	8805883a 	mov	r2,r17
10109354:	dfc00917 	ldw	ra,36(sp)
10109358:	df000817 	ldw	fp,32(sp)
1010935c:	ddc00717 	ldw	r23,28(sp)
10109360:	dd800617 	ldw	r22,24(sp)
10109364:	dd400517 	ldw	r21,20(sp)
10109368:	dd000417 	ldw	r20,16(sp)
1010936c:	dcc00317 	ldw	r19,12(sp)
10109370:	dc800217 	ldw	r18,8(sp)
10109374:	dc400117 	ldw	r17,4(sp)
10109378:	dc000017 	ldw	r16,0(sp)
1010937c:	dec00a04 	addi	sp,sp,40
10109380:	f800283a 	ret
10109384:	017fff04 	movi	r5,-4
10109388:	494a703a 	and	r5,r9,r5
1010938c:	814d883a 	add	r6,r16,r5
10109390:	30801e16 	blt	r6,r2,1010940c <_realloc_r+0x224>
10109394:	20800317 	ldw	r2,12(r4)
10109398:	21000217 	ldw	r4,8(r4)
1010939c:	a023883a 	mov	r17,r20
101093a0:	3021883a 	mov	r16,r6
101093a4:	20800315 	stw	r2,12(r4)
101093a8:	11000215 	stw	r4,8(r2)
101093ac:	003fdc06 	br	10109320 <__alt_data_end+0xfffe9320>
101093b0:	00800304 	movi	r2,12
101093b4:	90800015 	stw	r2,0(r18)
101093b8:	0005883a 	mov	r2,zero
101093bc:	003fe506 	br	10109354 <__alt_data_end+0xfffe9354>
101093c0:	1d86b03a 	or	r3,r3,r22
101093c4:	a8c00115 	stw	r3,4(r21)
101093c8:	ad8b883a 	add	r5,r21,r22
101093cc:	38c00054 	ori	r3,r7,1
101093d0:	28c00115 	stw	r3,4(r5)
101093d4:	29cf883a 	add	r7,r5,r7
101093d8:	38c00117 	ldw	r3,4(r7)
101093dc:	29400204 	addi	r5,r5,8
101093e0:	9009883a 	mov	r4,r18
101093e4:	18800054 	ori	r2,r3,1
101093e8:	38800115 	stw	r2,4(r7)
101093ec:	0101ffc0 	call	10101ffc <_free_r>
101093f0:	003fd506 	br	10109348 <__alt_data_end+0xfffe9348>
101093f4:	21c00117 	ldw	r7,4(r4)
101093f8:	017fff04 	movi	r5,-4
101093fc:	b1800404 	addi	r6,r22,16
10109400:	394a703a 	and	r5,r7,r5
10109404:	814f883a 	add	r7,r16,r5
10109408:	39805b0e 	bge	r7,r6,10109578 <_realloc_r+0x390>
1010940c:	18c0004c 	andi	r3,r3,1
10109410:	183fa01e 	bne	r3,zero,10109294 <__alt_data_end+0xfffe9294>
10109414:	a4fffe17 	ldw	r19,-8(r20)
10109418:	00ffff04 	movi	r3,-4
1010941c:	ace7c83a 	sub	r19,r21,r19
10109420:	99800117 	ldw	r6,4(r19)
10109424:	30c6703a 	and	r3,r6,r3
10109428:	20002026 	beq	r4,zero,101094ac <_realloc_r+0x2c4>
1010942c:	80ef883a 	add	r23,r16,r3
10109430:	b96f883a 	add	r23,r23,r5
10109434:	22006126 	beq	r4,r8,101095bc <_realloc_r+0x3d4>
10109438:	b8801c16 	blt	r23,r2,101094ac <_realloc_r+0x2c4>
1010943c:	20800317 	ldw	r2,12(r4)
10109440:	20c00217 	ldw	r3,8(r4)
10109444:	81bfff04 	addi	r6,r16,-4
10109448:	01000904 	movi	r4,36
1010944c:	18800315 	stw	r2,12(r3)
10109450:	10c00215 	stw	r3,8(r2)
10109454:	98c00217 	ldw	r3,8(r19)
10109458:	98800317 	ldw	r2,12(r19)
1010945c:	9c400204 	addi	r17,r19,8
10109460:	18800315 	stw	r2,12(r3)
10109464:	10c00215 	stw	r3,8(r2)
10109468:	21801b36 	bltu	r4,r6,101094d8 <_realloc_r+0x2f0>
1010946c:	008004c4 	movi	r2,19
10109470:	1180362e 	bgeu	r2,r6,1010954c <_realloc_r+0x364>
10109474:	a0800017 	ldw	r2,0(r20)
10109478:	98800215 	stw	r2,8(r19)
1010947c:	a0800117 	ldw	r2,4(r20)
10109480:	98800315 	stw	r2,12(r19)
10109484:	008006c4 	movi	r2,27
10109488:	11808136 	bltu	r2,r6,10109690 <_realloc_r+0x4a8>
1010948c:	98800404 	addi	r2,r19,16
10109490:	a5000204 	addi	r20,r20,8
10109494:	00002e06 	br	10109550 <_realloc_r+0x368>
10109498:	a4fffe17 	ldw	r19,-8(r20)
1010949c:	00ffff04 	movi	r3,-4
101094a0:	ace7c83a 	sub	r19,r21,r19
101094a4:	99000117 	ldw	r4,4(r19)
101094a8:	20c6703a 	and	r3,r4,r3
101094ac:	983f7926 	beq	r19,zero,10109294 <__alt_data_end+0xfffe9294>
101094b0:	80ef883a 	add	r23,r16,r3
101094b4:	b8bf7716 	blt	r23,r2,10109294 <__alt_data_end+0xfffe9294>
101094b8:	98800317 	ldw	r2,12(r19)
101094bc:	98c00217 	ldw	r3,8(r19)
101094c0:	81bfff04 	addi	r6,r16,-4
101094c4:	01000904 	movi	r4,36
101094c8:	18800315 	stw	r2,12(r3)
101094cc:	10c00215 	stw	r3,8(r2)
101094d0:	9c400204 	addi	r17,r19,8
101094d4:	21bfe52e 	bgeu	r4,r6,1010946c <__alt_data_end+0xfffe946c>
101094d8:	a00b883a 	mov	r5,r20
101094dc:	8809883a 	mov	r4,r17
101094e0:	01080300 	call	10108030 <memmove>
101094e4:	98c00117 	ldw	r3,4(r19)
101094e8:	b821883a 	mov	r16,r23
101094ec:	982b883a 	mov	r21,r19
101094f0:	003f8b06 	br	10109320 <__alt_data_end+0xfffe9320>
101094f4:	300b883a 	mov	r5,r6
101094f8:	dfc00917 	ldw	ra,36(sp)
101094fc:	df000817 	ldw	fp,32(sp)
10109500:	ddc00717 	ldw	r23,28(sp)
10109504:	dd800617 	ldw	r22,24(sp)
10109508:	dd400517 	ldw	r21,20(sp)
1010950c:	dd000417 	ldw	r20,16(sp)
10109510:	dcc00317 	ldw	r19,12(sp)
10109514:	dc800217 	ldw	r18,8(sp)
10109518:	dc400117 	ldw	r17,4(sp)
1010951c:	dc000017 	ldw	r16,0(sp)
10109520:	dec00a04 	addi	sp,sp,40
10109524:	0102c2c1 	jmpi	10102c2c <_malloc_r>
10109528:	a0c00017 	ldw	r3,0(r20)
1010952c:	88c00015 	stw	r3,0(r17)
10109530:	a0c00117 	ldw	r3,4(r20)
10109534:	88c00115 	stw	r3,4(r17)
10109538:	00c006c4 	movi	r3,27
1010953c:	19804636 	bltu	r3,r6,10109658 <_realloc_r+0x470>
10109540:	88800204 	addi	r2,r17,8
10109544:	a0c00204 	addi	r3,r20,8
10109548:	003f6406 	br	101092dc <__alt_data_end+0xfffe92dc>
1010954c:	8805883a 	mov	r2,r17
10109550:	a0c00017 	ldw	r3,0(r20)
10109554:	b821883a 	mov	r16,r23
10109558:	982b883a 	mov	r21,r19
1010955c:	10c00015 	stw	r3,0(r2)
10109560:	a0c00117 	ldw	r3,4(r20)
10109564:	10c00115 	stw	r3,4(r2)
10109568:	a0c00217 	ldw	r3,8(r20)
1010956c:	10c00215 	stw	r3,8(r2)
10109570:	98c00117 	ldw	r3,4(r19)
10109574:	003f6a06 	br	10109320 <__alt_data_end+0xfffe9320>
10109578:	adab883a 	add	r21,r21,r22
1010957c:	3d85c83a 	sub	r2,r7,r22
10109580:	e5400215 	stw	r21,8(fp)
10109584:	10800054 	ori	r2,r2,1
10109588:	a8800115 	stw	r2,4(r21)
1010958c:	a0bfff17 	ldw	r2,-4(r20)
10109590:	9009883a 	mov	r4,r18
10109594:	1080004c 	andi	r2,r2,1
10109598:	1584b03a 	or	r2,r2,r22
1010959c:	a0bfff15 	stw	r2,-4(r20)
101095a0:	010ec900 	call	1010ec90 <__malloc_unlock>
101095a4:	a005883a 	mov	r2,r20
101095a8:	003f6a06 	br	10109354 <__alt_data_end+0xfffe9354>
101095ac:	a00b883a 	mov	r5,r20
101095b0:	8809883a 	mov	r4,r17
101095b4:	01080300 	call	10108030 <memmove>
101095b8:	003f4e06 	br	101092f4 <__alt_data_end+0xfffe92f4>
101095bc:	b1000404 	addi	r4,r22,16
101095c0:	b93fba16 	blt	r23,r4,101094ac <__alt_data_end+0xfffe94ac>
101095c4:	98800317 	ldw	r2,12(r19)
101095c8:	98c00217 	ldw	r3,8(r19)
101095cc:	81bfff04 	addi	r6,r16,-4
101095d0:	01000904 	movi	r4,36
101095d4:	18800315 	stw	r2,12(r3)
101095d8:	10c00215 	stw	r3,8(r2)
101095dc:	9c400204 	addi	r17,r19,8
101095e0:	21804336 	bltu	r4,r6,101096f0 <_realloc_r+0x508>
101095e4:	008004c4 	movi	r2,19
101095e8:	11803f2e 	bgeu	r2,r6,101096e8 <_realloc_r+0x500>
101095ec:	a0800017 	ldw	r2,0(r20)
101095f0:	98800215 	stw	r2,8(r19)
101095f4:	a0800117 	ldw	r2,4(r20)
101095f8:	98800315 	stw	r2,12(r19)
101095fc:	008006c4 	movi	r2,27
10109600:	11803f36 	bltu	r2,r6,10109700 <_realloc_r+0x518>
10109604:	98800404 	addi	r2,r19,16
10109608:	a5000204 	addi	r20,r20,8
1010960c:	a0c00017 	ldw	r3,0(r20)
10109610:	10c00015 	stw	r3,0(r2)
10109614:	a0c00117 	ldw	r3,4(r20)
10109618:	10c00115 	stw	r3,4(r2)
1010961c:	a0c00217 	ldw	r3,8(r20)
10109620:	10c00215 	stw	r3,8(r2)
10109624:	9d87883a 	add	r3,r19,r22
10109628:	bd85c83a 	sub	r2,r23,r22
1010962c:	e0c00215 	stw	r3,8(fp)
10109630:	10800054 	ori	r2,r2,1
10109634:	18800115 	stw	r2,4(r3)
10109638:	98800117 	ldw	r2,4(r19)
1010963c:	9009883a 	mov	r4,r18
10109640:	1080004c 	andi	r2,r2,1
10109644:	1584b03a 	or	r2,r2,r22
10109648:	98800115 	stw	r2,4(r19)
1010964c:	010ec900 	call	1010ec90 <__malloc_unlock>
10109650:	8805883a 	mov	r2,r17
10109654:	003f3f06 	br	10109354 <__alt_data_end+0xfffe9354>
10109658:	a0c00217 	ldw	r3,8(r20)
1010965c:	88c00215 	stw	r3,8(r17)
10109660:	a0c00317 	ldw	r3,12(r20)
10109664:	88c00315 	stw	r3,12(r17)
10109668:	30801126 	beq	r6,r2,101096b0 <_realloc_r+0x4c8>
1010966c:	88800404 	addi	r2,r17,16
10109670:	a0c00404 	addi	r3,r20,16
10109674:	003f1906 	br	101092dc <__alt_data_end+0xfffe92dc>
10109678:	893fff17 	ldw	r4,-4(r17)
1010967c:	00bfff04 	movi	r2,-4
10109680:	a023883a 	mov	r17,r20
10109684:	2084703a 	and	r2,r4,r2
10109688:	80a1883a 	add	r16,r16,r2
1010968c:	003f2406 	br	10109320 <__alt_data_end+0xfffe9320>
10109690:	a0800217 	ldw	r2,8(r20)
10109694:	98800415 	stw	r2,16(r19)
10109698:	a0800317 	ldw	r2,12(r20)
1010969c:	98800515 	stw	r2,20(r19)
101096a0:	31000a26 	beq	r6,r4,101096cc <_realloc_r+0x4e4>
101096a4:	98800604 	addi	r2,r19,24
101096a8:	a5000404 	addi	r20,r20,16
101096ac:	003fa806 	br	10109550 <__alt_data_end+0xfffe9550>
101096b0:	a1000417 	ldw	r4,16(r20)
101096b4:	88800604 	addi	r2,r17,24
101096b8:	a0c00604 	addi	r3,r20,24
101096bc:	89000415 	stw	r4,16(r17)
101096c0:	a1000517 	ldw	r4,20(r20)
101096c4:	89000515 	stw	r4,20(r17)
101096c8:	003f0406 	br	101092dc <__alt_data_end+0xfffe92dc>
101096cc:	a0c00417 	ldw	r3,16(r20)
101096d0:	a5000604 	addi	r20,r20,24
101096d4:	98800804 	addi	r2,r19,32
101096d8:	98c00615 	stw	r3,24(r19)
101096dc:	a0ffff17 	ldw	r3,-4(r20)
101096e0:	98c00715 	stw	r3,28(r19)
101096e4:	003f9a06 	br	10109550 <__alt_data_end+0xfffe9550>
101096e8:	8805883a 	mov	r2,r17
101096ec:	003fc706 	br	1010960c <__alt_data_end+0xfffe960c>
101096f0:	a00b883a 	mov	r5,r20
101096f4:	8809883a 	mov	r4,r17
101096f8:	01080300 	call	10108030 <memmove>
101096fc:	003fc906 	br	10109624 <__alt_data_end+0xfffe9624>
10109700:	a0800217 	ldw	r2,8(r20)
10109704:	98800415 	stw	r2,16(r19)
10109708:	a0800317 	ldw	r2,12(r20)
1010970c:	98800515 	stw	r2,20(r19)
10109710:	31000726 	beq	r6,r4,10109730 <_realloc_r+0x548>
10109714:	98800604 	addi	r2,r19,24
10109718:	a5000404 	addi	r20,r20,16
1010971c:	003fbb06 	br	1010960c <__alt_data_end+0xfffe960c>
10109720:	9009883a 	mov	r4,r18
10109724:	010ec900 	call	1010ec90 <__malloc_unlock>
10109728:	0005883a 	mov	r2,zero
1010972c:	003f0906 	br	10109354 <__alt_data_end+0xfffe9354>
10109730:	a0c00417 	ldw	r3,16(r20)
10109734:	a5000604 	addi	r20,r20,24
10109738:	98800804 	addi	r2,r19,32
1010973c:	98c00615 	stw	r3,24(r19)
10109740:	a0ffff17 	ldw	r3,-4(r20)
10109744:	98c00715 	stw	r3,28(r19)
10109748:	003fb006 	br	1010960c <__alt_data_end+0xfffe960c>

1010974c <__fpclassifyd>:
1010974c:	00a00034 	movhi	r2,32768
10109750:	10bfffc4 	addi	r2,r2,-1
10109754:	2884703a 	and	r2,r5,r2
10109758:	10000726 	beq	r2,zero,10109778 <__fpclassifyd+0x2c>
1010975c:	00fffc34 	movhi	r3,65520
10109760:	019ff834 	movhi	r6,32736
10109764:	28c7883a 	add	r3,r5,r3
10109768:	31bfffc4 	addi	r6,r6,-1
1010976c:	30c00536 	bltu	r6,r3,10109784 <__fpclassifyd+0x38>
10109770:	00800104 	movi	r2,4
10109774:	f800283a 	ret
10109778:	2000021e 	bne	r4,zero,10109784 <__fpclassifyd+0x38>
1010977c:	00800084 	movi	r2,2
10109780:	f800283a 	ret
10109784:	00dffc34 	movhi	r3,32752
10109788:	019ff834 	movhi	r6,32736
1010978c:	28cb883a 	add	r5,r5,r3
10109790:	31bfffc4 	addi	r6,r6,-1
10109794:	317ff62e 	bgeu	r6,r5,10109770 <__alt_data_end+0xfffe9770>
10109798:	01400434 	movhi	r5,16
1010979c:	297fffc4 	addi	r5,r5,-1
101097a0:	28800236 	bltu	r5,r2,101097ac <__fpclassifyd+0x60>
101097a4:	008000c4 	movi	r2,3
101097a8:	f800283a 	ret
101097ac:	10c00226 	beq	r2,r3,101097b8 <__fpclassifyd+0x6c>
101097b0:	0005883a 	mov	r2,zero
101097b4:	f800283a 	ret
101097b8:	2005003a 	cmpeq	r2,r4,zero
101097bc:	f800283a 	ret

101097c0 <strcmp>:
101097c0:	2144b03a 	or	r2,r4,r5
101097c4:	108000cc 	andi	r2,r2,3
101097c8:	1000171e 	bne	r2,zero,10109828 <strcmp+0x68>
101097cc:	20800017 	ldw	r2,0(r4)
101097d0:	28c00017 	ldw	r3,0(r5)
101097d4:	10c0141e 	bne	r2,r3,10109828 <strcmp+0x68>
101097d8:	027fbff4 	movhi	r9,65279
101097dc:	4a7fbfc4 	addi	r9,r9,-257
101097e0:	0086303a 	nor	r3,zero,r2
101097e4:	02202074 	movhi	r8,32897
101097e8:	1245883a 	add	r2,r2,r9
101097ec:	42202004 	addi	r8,r8,-32640
101097f0:	10c4703a 	and	r2,r2,r3
101097f4:	1204703a 	and	r2,r2,r8
101097f8:	10000226 	beq	r2,zero,10109804 <strcmp+0x44>
101097fc:	00002306 	br	1010988c <strcmp+0xcc>
10109800:	1000221e 	bne	r2,zero,1010988c <strcmp+0xcc>
10109804:	21000104 	addi	r4,r4,4
10109808:	20c00017 	ldw	r3,0(r4)
1010980c:	29400104 	addi	r5,r5,4
10109810:	29800017 	ldw	r6,0(r5)
10109814:	1a4f883a 	add	r7,r3,r9
10109818:	00c4303a 	nor	r2,zero,r3
1010981c:	3884703a 	and	r2,r7,r2
10109820:	1204703a 	and	r2,r2,r8
10109824:	19bff626 	beq	r3,r6,10109800 <__alt_data_end+0xfffe9800>
10109828:	20800003 	ldbu	r2,0(r4)
1010982c:	10c03fcc 	andi	r3,r2,255
10109830:	18c0201c 	xori	r3,r3,128
10109834:	18ffe004 	addi	r3,r3,-128
10109838:	18000c26 	beq	r3,zero,1010986c <strcmp+0xac>
1010983c:	29800007 	ldb	r6,0(r5)
10109840:	19800326 	beq	r3,r6,10109850 <strcmp+0x90>
10109844:	00001306 	br	10109894 <strcmp+0xd4>
10109848:	29800007 	ldb	r6,0(r5)
1010984c:	11800b1e 	bne	r2,r6,1010987c <strcmp+0xbc>
10109850:	21000044 	addi	r4,r4,1
10109854:	20c00003 	ldbu	r3,0(r4)
10109858:	29400044 	addi	r5,r5,1
1010985c:	18803fcc 	andi	r2,r3,255
10109860:	1080201c 	xori	r2,r2,128
10109864:	10bfe004 	addi	r2,r2,-128
10109868:	103ff71e 	bne	r2,zero,10109848 <__alt_data_end+0xfffe9848>
1010986c:	0007883a 	mov	r3,zero
10109870:	28800003 	ldbu	r2,0(r5)
10109874:	1885c83a 	sub	r2,r3,r2
10109878:	f800283a 	ret
1010987c:	28800003 	ldbu	r2,0(r5)
10109880:	18c03fcc 	andi	r3,r3,255
10109884:	1885c83a 	sub	r2,r3,r2
10109888:	f800283a 	ret
1010988c:	0005883a 	mov	r2,zero
10109890:	f800283a 	ret
10109894:	10c03fcc 	andi	r3,r2,255
10109898:	003ff506 	br	10109870 <__alt_data_end+0xfffe9870>

1010989c <strlen>:
1010989c:	208000cc 	andi	r2,r4,3
101098a0:	10002026 	beq	r2,zero,10109924 <strlen+0x88>
101098a4:	20800007 	ldb	r2,0(r4)
101098a8:	10002026 	beq	r2,zero,1010992c <strlen+0x90>
101098ac:	2005883a 	mov	r2,r4
101098b0:	00000206 	br	101098bc <strlen+0x20>
101098b4:	10c00007 	ldb	r3,0(r2)
101098b8:	18001826 	beq	r3,zero,1010991c <strlen+0x80>
101098bc:	10800044 	addi	r2,r2,1
101098c0:	10c000cc 	andi	r3,r2,3
101098c4:	183ffb1e 	bne	r3,zero,101098b4 <__alt_data_end+0xfffe98b4>
101098c8:	10c00017 	ldw	r3,0(r2)
101098cc:	01ffbff4 	movhi	r7,65279
101098d0:	39ffbfc4 	addi	r7,r7,-257
101098d4:	00ca303a 	nor	r5,zero,r3
101098d8:	01a02074 	movhi	r6,32897
101098dc:	19c7883a 	add	r3,r3,r7
101098e0:	31a02004 	addi	r6,r6,-32640
101098e4:	1946703a 	and	r3,r3,r5
101098e8:	1986703a 	and	r3,r3,r6
101098ec:	1800091e 	bne	r3,zero,10109914 <strlen+0x78>
101098f0:	10800104 	addi	r2,r2,4
101098f4:	10c00017 	ldw	r3,0(r2)
101098f8:	19cb883a 	add	r5,r3,r7
101098fc:	00c6303a 	nor	r3,zero,r3
10109900:	28c6703a 	and	r3,r5,r3
10109904:	1986703a 	and	r3,r3,r6
10109908:	183ff926 	beq	r3,zero,101098f0 <__alt_data_end+0xfffe98f0>
1010990c:	00000106 	br	10109914 <strlen+0x78>
10109910:	10800044 	addi	r2,r2,1
10109914:	10c00007 	ldb	r3,0(r2)
10109918:	183ffd1e 	bne	r3,zero,10109910 <__alt_data_end+0xfffe9910>
1010991c:	1105c83a 	sub	r2,r2,r4
10109920:	f800283a 	ret
10109924:	2005883a 	mov	r2,r4
10109928:	003fe706 	br	101098c8 <__alt_data_end+0xfffe98c8>
1010992c:	0005883a 	mov	r2,zero
10109930:	f800283a 	ret

10109934 <__sprint_r.part.0>:
10109934:	28801917 	ldw	r2,100(r5)
10109938:	defff604 	addi	sp,sp,-40
1010993c:	dd400515 	stw	r21,20(sp)
10109940:	dfc00915 	stw	ra,36(sp)
10109944:	df000815 	stw	fp,32(sp)
10109948:	ddc00715 	stw	r23,28(sp)
1010994c:	dd800615 	stw	r22,24(sp)
10109950:	dd000415 	stw	r20,16(sp)
10109954:	dcc00315 	stw	r19,12(sp)
10109958:	dc800215 	stw	r18,8(sp)
1010995c:	dc400115 	stw	r17,4(sp)
10109960:	dc000015 	stw	r16,0(sp)
10109964:	1088000c 	andi	r2,r2,8192
10109968:	302b883a 	mov	r21,r6
1010996c:	10002e26 	beq	r2,zero,10109a28 <__sprint_r.part.0+0xf4>
10109970:	30800217 	ldw	r2,8(r6)
10109974:	35800017 	ldw	r22,0(r6)
10109978:	10002926 	beq	r2,zero,10109a20 <__sprint_r.part.0+0xec>
1010997c:	2827883a 	mov	r19,r5
10109980:	2029883a 	mov	r20,r4
10109984:	b5c00104 	addi	r23,r22,4
10109988:	04bfffc4 	movi	r18,-1
1010998c:	bc400017 	ldw	r17,0(r23)
10109990:	b4000017 	ldw	r16,0(r22)
10109994:	0039883a 	mov	fp,zero
10109998:	8822d0ba 	srli	r17,r17,2
1010999c:	8800031e 	bne	r17,zero,101099ac <__sprint_r.part.0+0x78>
101099a0:	00001806 	br	10109a04 <__sprint_r.part.0+0xd0>
101099a4:	84000104 	addi	r16,r16,4
101099a8:	8f001526 	beq	r17,fp,10109a00 <__sprint_r.part.0+0xcc>
101099ac:	81400017 	ldw	r5,0(r16)
101099b0:	980d883a 	mov	r6,r19
101099b4:	a009883a 	mov	r4,r20
101099b8:	010b1a40 	call	1010b1a4 <_fputwc_r>
101099bc:	e7000044 	addi	fp,fp,1
101099c0:	14bff81e 	bne	r2,r18,101099a4 <__alt_data_end+0xfffe99a4>
101099c4:	9005883a 	mov	r2,r18
101099c8:	a8000215 	stw	zero,8(r21)
101099cc:	a8000115 	stw	zero,4(r21)
101099d0:	dfc00917 	ldw	ra,36(sp)
101099d4:	df000817 	ldw	fp,32(sp)
101099d8:	ddc00717 	ldw	r23,28(sp)
101099dc:	dd800617 	ldw	r22,24(sp)
101099e0:	dd400517 	ldw	r21,20(sp)
101099e4:	dd000417 	ldw	r20,16(sp)
101099e8:	dcc00317 	ldw	r19,12(sp)
101099ec:	dc800217 	ldw	r18,8(sp)
101099f0:	dc400117 	ldw	r17,4(sp)
101099f4:	dc000017 	ldw	r16,0(sp)
101099f8:	dec00a04 	addi	sp,sp,40
101099fc:	f800283a 	ret
10109a00:	a8800217 	ldw	r2,8(r21)
10109a04:	8c63883a 	add	r17,r17,r17
10109a08:	8c63883a 	add	r17,r17,r17
10109a0c:	1445c83a 	sub	r2,r2,r17
10109a10:	a8800215 	stw	r2,8(r21)
10109a14:	b5800204 	addi	r22,r22,8
10109a18:	bdc00204 	addi	r23,r23,8
10109a1c:	103fdb1e 	bne	r2,zero,1010998c <__alt_data_end+0xfffe998c>
10109a20:	0005883a 	mov	r2,zero
10109a24:	003fe806 	br	101099c8 <__alt_data_end+0xfffe99c8>
10109a28:	01077b80 	call	101077b8 <__sfvwrite_r>
10109a2c:	003fe606 	br	101099c8 <__alt_data_end+0xfffe99c8>

10109a30 <__sprint_r>:
10109a30:	30c00217 	ldw	r3,8(r6)
10109a34:	18000126 	beq	r3,zero,10109a3c <__sprint_r+0xc>
10109a38:	01099341 	jmpi	10109934 <__sprint_r.part.0>
10109a3c:	30000115 	stw	zero,4(r6)
10109a40:	0005883a 	mov	r2,zero
10109a44:	f800283a 	ret

10109a48 <___vfiprintf_internal_r>:
10109a48:	deffc904 	addi	sp,sp,-220
10109a4c:	df003515 	stw	fp,212(sp)
10109a50:	dd003115 	stw	r20,196(sp)
10109a54:	dfc03615 	stw	ra,216(sp)
10109a58:	ddc03415 	stw	r23,208(sp)
10109a5c:	dd803315 	stw	r22,204(sp)
10109a60:	dd403215 	stw	r21,200(sp)
10109a64:	dcc03015 	stw	r19,192(sp)
10109a68:	dc802f15 	stw	r18,188(sp)
10109a6c:	dc402e15 	stw	r17,184(sp)
10109a70:	dc002d15 	stw	r16,180(sp)
10109a74:	d9002015 	stw	r4,128(sp)
10109a78:	d9c02215 	stw	r7,136(sp)
10109a7c:	2829883a 	mov	r20,r5
10109a80:	3039883a 	mov	fp,r6
10109a84:	20000226 	beq	r4,zero,10109a90 <___vfiprintf_internal_r+0x48>
10109a88:	20800e17 	ldw	r2,56(r4)
10109a8c:	1000cf26 	beq	r2,zero,10109dcc <___vfiprintf_internal_r+0x384>
10109a90:	a080030b 	ldhu	r2,12(r20)
10109a94:	10c8000c 	andi	r3,r2,8192
10109a98:	1800061e 	bne	r3,zero,10109ab4 <___vfiprintf_internal_r+0x6c>
10109a9c:	a1001917 	ldw	r4,100(r20)
10109aa0:	00f7ffc4 	movi	r3,-8193
10109aa4:	10880014 	ori	r2,r2,8192
10109aa8:	20c6703a 	and	r3,r4,r3
10109aac:	a080030d 	sth	r2,12(r20)
10109ab0:	a0c01915 	stw	r3,100(r20)
10109ab4:	10c0020c 	andi	r3,r2,8
10109ab8:	1800a926 	beq	r3,zero,10109d60 <___vfiprintf_internal_r+0x318>
10109abc:	a0c00417 	ldw	r3,16(r20)
10109ac0:	1800a726 	beq	r3,zero,10109d60 <___vfiprintf_internal_r+0x318>
10109ac4:	1080068c 	andi	r2,r2,26
10109ac8:	00c00284 	movi	r3,10
10109acc:	10c0ac26 	beq	r2,r3,10109d80 <___vfiprintf_internal_r+0x338>
10109ad0:	da801a04 	addi	r10,sp,104
10109ad4:	da801e15 	stw	r10,120(sp)
10109ad8:	d8801e17 	ldw	r2,120(sp)
10109adc:	da8019c4 	addi	r10,sp,103
10109ae0:	05840474 	movhi	r22,4113
10109ae4:	05c40474 	movhi	r23,4113
10109ae8:	da801f15 	stw	r10,124(sp)
10109aec:	1295c83a 	sub	r10,r2,r10
10109af0:	b5847004 	addi	r22,r22,4544
10109af4:	bdc46c04 	addi	r23,r23,4528
10109af8:	dec01a15 	stw	sp,104(sp)
10109afc:	d8001c15 	stw	zero,112(sp)
10109b00:	d8001b15 	stw	zero,108(sp)
10109b04:	d8002615 	stw	zero,152(sp)
10109b08:	d8002315 	stw	zero,140(sp)
10109b0c:	da802715 	stw	r10,156(sp)
10109b10:	d811883a 	mov	r8,sp
10109b14:	dd002115 	stw	r20,132(sp)
10109b18:	e021883a 	mov	r16,fp
10109b1c:	80800007 	ldb	r2,0(r16)
10109b20:	1003ea26 	beq	r2,zero,1010aacc <___vfiprintf_internal_r+0x1084>
10109b24:	00c00944 	movi	r3,37
10109b28:	8025883a 	mov	r18,r16
10109b2c:	10c0021e 	bne	r2,r3,10109b38 <___vfiprintf_internal_r+0xf0>
10109b30:	00001606 	br	10109b8c <___vfiprintf_internal_r+0x144>
10109b34:	10c00326 	beq	r2,r3,10109b44 <___vfiprintf_internal_r+0xfc>
10109b38:	94800044 	addi	r18,r18,1
10109b3c:	90800007 	ldb	r2,0(r18)
10109b40:	103ffc1e 	bne	r2,zero,10109b34 <__alt_data_end+0xfffe9b34>
10109b44:	9423c83a 	sub	r17,r18,r16
10109b48:	88001026 	beq	r17,zero,10109b8c <___vfiprintf_internal_r+0x144>
10109b4c:	d8c01c17 	ldw	r3,112(sp)
10109b50:	d8801b17 	ldw	r2,108(sp)
10109b54:	44000015 	stw	r16,0(r8)
10109b58:	88c7883a 	add	r3,r17,r3
10109b5c:	10800044 	addi	r2,r2,1
10109b60:	44400115 	stw	r17,4(r8)
10109b64:	d8c01c15 	stw	r3,112(sp)
10109b68:	d8801b15 	stw	r2,108(sp)
10109b6c:	010001c4 	movi	r4,7
10109b70:	2080760e 	bge	r4,r2,10109d4c <___vfiprintf_internal_r+0x304>
10109b74:	1803821e 	bne	r3,zero,1010a980 <___vfiprintf_internal_r+0xf38>
10109b78:	da802317 	ldw	r10,140(sp)
10109b7c:	d8001b15 	stw	zero,108(sp)
10109b80:	d811883a 	mov	r8,sp
10109b84:	5455883a 	add	r10,r10,r17
10109b88:	da802315 	stw	r10,140(sp)
10109b8c:	90800007 	ldb	r2,0(r18)
10109b90:	10044626 	beq	r2,zero,1010acac <___vfiprintf_internal_r+0x1264>
10109b94:	90c00047 	ldb	r3,1(r18)
10109b98:	94000044 	addi	r16,r18,1
10109b9c:	d8001d85 	stb	zero,118(sp)
10109ba0:	0009883a 	mov	r4,zero
10109ba4:	000f883a 	mov	r7,zero
10109ba8:	027fffc4 	movi	r9,-1
10109bac:	0023883a 	mov	r17,zero
10109bb0:	0029883a 	mov	r20,zero
10109bb4:	01401604 	movi	r5,88
10109bb8:	01800244 	movi	r6,9
10109bbc:	03400a84 	movi	r13,42
10109bc0:	03001b04 	movi	r12,108
10109bc4:	84000044 	addi	r16,r16,1
10109bc8:	18bff804 	addi	r2,r3,-32
10109bcc:	28827336 	bltu	r5,r2,1010a59c <___vfiprintf_internal_r+0xb54>
10109bd0:	100490ba 	slli	r2,r2,2
10109bd4:	02840474 	movhi	r10,4113
10109bd8:	52a6fa04 	addi	r10,r10,-25624
10109bdc:	1285883a 	add	r2,r2,r10
10109be0:	10800017 	ldw	r2,0(r2)
10109be4:	1000683a 	jmp	r2
10109be8:	1010a2d0 	cmplti	zero,r2,17035
10109bec:	1010a59c 	xori	zero,r2,17046
10109bf0:	1010a59c 	xori	zero,r2,17046
10109bf4:	1010a2f0 	cmpltui	zero,r2,17035
10109bf8:	1010a59c 	xori	zero,r2,17046
10109bfc:	1010a59c 	xori	zero,r2,17046
10109c00:	1010a59c 	xori	zero,r2,17046
10109c04:	1010a59c 	xori	zero,r2,17046
10109c08:	1010a59c 	xori	zero,r2,17046
10109c0c:	1010a59c 	xori	zero,r2,17046
10109c10:	1010a4d8 	cmpnei	zero,r2,17043
10109c14:	1010a4f4 	orhi	zero,r2,17043
10109c18:	1010a59c 	xori	zero,r2,17046
10109c1c:	10109ddc 	xori	zero,r2,17015
10109c20:	1010a504 	addi	zero,r2,17044
10109c24:	1010a59c 	xori	zero,r2,17046
10109c28:	1010a2fc 	xorhi	zero,r2,17035
10109c2c:	1010a308 	cmpgei	zero,r2,17036
10109c30:	1010a308 	cmpgei	zero,r2,17036
10109c34:	1010a308 	cmpgei	zero,r2,17036
10109c38:	1010a308 	cmpgei	zero,r2,17036
10109c3c:	1010a308 	cmpgei	zero,r2,17036
10109c40:	1010a308 	cmpgei	zero,r2,17036
10109c44:	1010a308 	cmpgei	zero,r2,17036
10109c48:	1010a308 	cmpgei	zero,r2,17036
10109c4c:	1010a308 	cmpgei	zero,r2,17036
10109c50:	1010a59c 	xori	zero,r2,17046
10109c54:	1010a59c 	xori	zero,r2,17046
10109c58:	1010a59c 	xori	zero,r2,17046
10109c5c:	1010a59c 	xori	zero,r2,17046
10109c60:	1010a59c 	xori	zero,r2,17046
10109c64:	1010a59c 	xori	zero,r2,17046
10109c68:	1010a59c 	xori	zero,r2,17046
10109c6c:	1010a59c 	xori	zero,r2,17046
10109c70:	1010a59c 	xori	zero,r2,17046
10109c74:	1010a59c 	xori	zero,r2,17046
10109c78:	1010a334 	orhi	zero,r2,17036
10109c7c:	1010a59c 	xori	zero,r2,17046
10109c80:	1010a59c 	xori	zero,r2,17046
10109c84:	1010a59c 	xori	zero,r2,17046
10109c88:	1010a59c 	xori	zero,r2,17046
10109c8c:	1010a59c 	xori	zero,r2,17046
10109c90:	1010a59c 	xori	zero,r2,17046
10109c94:	1010a59c 	xori	zero,r2,17046
10109c98:	1010a59c 	xori	zero,r2,17046
10109c9c:	1010a59c 	xori	zero,r2,17046
10109ca0:	1010a59c 	xori	zero,r2,17046
10109ca4:	1010a36c 	andhi	zero,r2,17037
10109ca8:	1010a59c 	xori	zero,r2,17046
10109cac:	1010a59c 	xori	zero,r2,17046
10109cb0:	1010a59c 	xori	zero,r2,17046
10109cb4:	1010a59c 	xori	zero,r2,17046
10109cb8:	1010a59c 	xori	zero,r2,17046
10109cbc:	1010a3c4 	addi	zero,r2,17039
10109cc0:	1010a59c 	xori	zero,r2,17046
10109cc4:	1010a59c 	xori	zero,r2,17046
10109cc8:	1010a434 	orhi	zero,r2,17040
10109ccc:	1010a59c 	xori	zero,r2,17046
10109cd0:	1010a59c 	xori	zero,r2,17046
10109cd4:	1010a59c 	xori	zero,r2,17046
10109cd8:	1010a59c 	xori	zero,r2,17046
10109cdc:	1010a59c 	xori	zero,r2,17046
10109ce0:	1010a59c 	xori	zero,r2,17046
10109ce4:	1010a59c 	xori	zero,r2,17046
10109ce8:	1010a59c 	xori	zero,r2,17046
10109cec:	1010a59c 	xori	zero,r2,17046
10109cf0:	1010a59c 	xori	zero,r2,17046
10109cf4:	1010a1e0 	cmpeqi	zero,r2,17031
10109cf8:	1010a20c 	andi	zero,r2,17032
10109cfc:	1010a59c 	xori	zero,r2,17046
10109d00:	1010a59c 	xori	zero,r2,17046
10109d04:	1010a59c 	xori	zero,r2,17046
10109d08:	1010a544 	addi	zero,r2,17045
10109d0c:	1010a20c 	andi	zero,r2,17032
10109d10:	1010a59c 	xori	zero,r2,17046
10109d14:	1010a59c 	xori	zero,r2,17046
10109d18:	1010a0a0 	cmpeqi	zero,r2,17026
10109d1c:	1010a59c 	xori	zero,r2,17046
10109d20:	1010a0b0 	cmpltui	zero,r2,17026
10109d24:	1010a0ec 	andhi	zero,r2,17027
10109d28:	10109de8 	cmpgeui	zero,r2,17015
10109d2c:	1010a094 	ori	zero,r2,17026
10109d30:	1010a59c 	xori	zero,r2,17046
10109d34:	1010a470 	cmpltui	zero,r2,17041
10109d38:	1010a59c 	xori	zero,r2,17046
10109d3c:	1010a4c8 	cmpgei	zero,r2,17043
10109d40:	1010a59c 	xori	zero,r2,17046
10109d44:	1010a59c 	xori	zero,r2,17046
10109d48:	1010a18c 	andi	zero,r2,17030
10109d4c:	42000204 	addi	r8,r8,8
10109d50:	da802317 	ldw	r10,140(sp)
10109d54:	5455883a 	add	r10,r10,r17
10109d58:	da802315 	stw	r10,140(sp)
10109d5c:	003f8b06 	br	10109b8c <__alt_data_end+0xfffe9b8c>
10109d60:	d9002017 	ldw	r4,128(sp)
10109d64:	a00b883a 	mov	r5,r20
10109d68:	0105cdc0 	call	10105cdc <__swsetup_r>
10109d6c:	1003b11e 	bne	r2,zero,1010ac34 <___vfiprintf_internal_r+0x11ec>
10109d70:	a080030b 	ldhu	r2,12(r20)
10109d74:	00c00284 	movi	r3,10
10109d78:	1080068c 	andi	r2,r2,26
10109d7c:	10ff541e 	bne	r2,r3,10109ad0 <__alt_data_end+0xfffe9ad0>
10109d80:	a080038f 	ldh	r2,14(r20)
10109d84:	103f5216 	blt	r2,zero,10109ad0 <__alt_data_end+0xfffe9ad0>
10109d88:	d9c02217 	ldw	r7,136(sp)
10109d8c:	d9002017 	ldw	r4,128(sp)
10109d90:	e00d883a 	mov	r6,fp
10109d94:	a00b883a 	mov	r5,r20
10109d98:	010aec00 	call	1010aec0 <__sbprintf>
10109d9c:	dfc03617 	ldw	ra,216(sp)
10109da0:	df003517 	ldw	fp,212(sp)
10109da4:	ddc03417 	ldw	r23,208(sp)
10109da8:	dd803317 	ldw	r22,204(sp)
10109dac:	dd403217 	ldw	r21,200(sp)
10109db0:	dd003117 	ldw	r20,196(sp)
10109db4:	dcc03017 	ldw	r19,192(sp)
10109db8:	dc802f17 	ldw	r18,188(sp)
10109dbc:	dc402e17 	ldw	r17,184(sp)
10109dc0:	dc002d17 	ldw	r16,180(sp)
10109dc4:	dec03704 	addi	sp,sp,220
10109dc8:	f800283a 	ret
10109dcc:	0101d7c0 	call	10101d7c <__sinit>
10109dd0:	003f2f06 	br	10109a90 <__alt_data_end+0xfffe9a90>
10109dd4:	0463c83a 	sub	r17,zero,r17
10109dd8:	d8802215 	stw	r2,136(sp)
10109ddc:	a5000114 	ori	r20,r20,4
10109de0:	80c00007 	ldb	r3,0(r16)
10109de4:	003f7706 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
10109de8:	00800c04 	movi	r2,48
10109dec:	da802217 	ldw	r10,136(sp)
10109df0:	d8801d05 	stb	r2,116(sp)
10109df4:	00801e04 	movi	r2,120
10109df8:	d8801d45 	stb	r2,117(sp)
10109dfc:	d8001d85 	stb	zero,118(sp)
10109e00:	50c00104 	addi	r3,r10,4
10109e04:	54800017 	ldw	r18,0(r10)
10109e08:	0027883a 	mov	r19,zero
10109e0c:	a0800094 	ori	r2,r20,2
10109e10:	48030b16 	blt	r9,zero,1010aa40 <___vfiprintf_internal_r+0xff8>
10109e14:	00bfdfc4 	movi	r2,-129
10109e18:	a096703a 	and	r11,r20,r2
10109e1c:	d8c02215 	stw	r3,136(sp)
10109e20:	5d000094 	ori	r20,r11,2
10109e24:	90032b1e 	bne	r18,zero,1010aad4 <___vfiprintf_internal_r+0x108c>
10109e28:	00840474 	movhi	r2,4113
10109e2c:	10840c04 	addi	r2,r2,4144
10109e30:	d8802615 	stw	r2,152(sp)
10109e34:	0039883a 	mov	fp,zero
10109e38:	48017b1e 	bne	r9,zero,1010a428 <___vfiprintf_internal_r+0x9e0>
10109e3c:	0013883a 	mov	r9,zero
10109e40:	0027883a 	mov	r19,zero
10109e44:	dd401a04 	addi	r21,sp,104
10109e48:	4825883a 	mov	r18,r9
10109e4c:	4cc0010e 	bge	r9,r19,10109e54 <___vfiprintf_internal_r+0x40c>
10109e50:	9825883a 	mov	r18,r19
10109e54:	e7003fcc 	andi	fp,fp,255
10109e58:	e700201c 	xori	fp,fp,128
10109e5c:	e73fe004 	addi	fp,fp,-128
10109e60:	e0000126 	beq	fp,zero,10109e68 <___vfiprintf_internal_r+0x420>
10109e64:	94800044 	addi	r18,r18,1
10109e68:	a380008c 	andi	r14,r20,2
10109e6c:	70000126 	beq	r14,zero,10109e74 <___vfiprintf_internal_r+0x42c>
10109e70:	94800084 	addi	r18,r18,2
10109e74:	a700210c 	andi	fp,r20,132
10109e78:	e001df1e 	bne	fp,zero,1010a5f8 <___vfiprintf_internal_r+0xbb0>
10109e7c:	8c87c83a 	sub	r3,r17,r18
10109e80:	00c1dd0e 	bge	zero,r3,1010a5f8 <___vfiprintf_internal_r+0xbb0>
10109e84:	01c00404 	movi	r7,16
10109e88:	d8801c17 	ldw	r2,112(sp)
10109e8c:	38c3ad0e 	bge	r7,r3,1010ad44 <___vfiprintf_internal_r+0x12fc>
10109e90:	02840474 	movhi	r10,4113
10109e94:	52847004 	addi	r10,r10,4544
10109e98:	dc002915 	stw	r16,164(sp)
10109e9c:	d9801b17 	ldw	r6,108(sp)
10109ea0:	da802415 	stw	r10,144(sp)
10109ea4:	03c001c4 	movi	r15,7
10109ea8:	da402515 	stw	r9,148(sp)
10109eac:	db802815 	stw	r14,160(sp)
10109eb0:	1821883a 	mov	r16,r3
10109eb4:	00000506 	br	10109ecc <___vfiprintf_internal_r+0x484>
10109eb8:	31400084 	addi	r5,r6,2
10109ebc:	42000204 	addi	r8,r8,8
10109ec0:	200d883a 	mov	r6,r4
10109ec4:	843ffc04 	addi	r16,r16,-16
10109ec8:	3c000d0e 	bge	r7,r16,10109f00 <___vfiprintf_internal_r+0x4b8>
10109ecc:	10800404 	addi	r2,r2,16
10109ed0:	31000044 	addi	r4,r6,1
10109ed4:	45800015 	stw	r22,0(r8)
10109ed8:	41c00115 	stw	r7,4(r8)
10109edc:	d8801c15 	stw	r2,112(sp)
10109ee0:	d9001b15 	stw	r4,108(sp)
10109ee4:	793ff40e 	bge	r15,r4,10109eb8 <__alt_data_end+0xfffe9eb8>
10109ee8:	1001b51e 	bne	r2,zero,1010a5c0 <___vfiprintf_internal_r+0xb78>
10109eec:	843ffc04 	addi	r16,r16,-16
10109ef0:	000d883a 	mov	r6,zero
10109ef4:	01400044 	movi	r5,1
10109ef8:	d811883a 	mov	r8,sp
10109efc:	3c3ff316 	blt	r7,r16,10109ecc <__alt_data_end+0xfffe9ecc>
10109f00:	8007883a 	mov	r3,r16
10109f04:	da402517 	ldw	r9,148(sp)
10109f08:	db802817 	ldw	r14,160(sp)
10109f0c:	dc002917 	ldw	r16,164(sp)
10109f10:	da802417 	ldw	r10,144(sp)
10109f14:	1885883a 	add	r2,r3,r2
10109f18:	40c00115 	stw	r3,4(r8)
10109f1c:	42800015 	stw	r10,0(r8)
10109f20:	d8801c15 	stw	r2,112(sp)
10109f24:	d9401b15 	stw	r5,108(sp)
10109f28:	00c001c4 	movi	r3,7
10109f2c:	19426016 	blt	r3,r5,1010a8b0 <___vfiprintf_internal_r+0xe68>
10109f30:	d8c01d87 	ldb	r3,118(sp)
10109f34:	42000204 	addi	r8,r8,8
10109f38:	29000044 	addi	r4,r5,1
10109f3c:	1801b31e 	bne	r3,zero,1010a60c <___vfiprintf_internal_r+0xbc4>
10109f40:	7001c026 	beq	r14,zero,1010a644 <___vfiprintf_internal_r+0xbfc>
10109f44:	d8c01d04 	addi	r3,sp,116
10109f48:	10800084 	addi	r2,r2,2
10109f4c:	40c00015 	stw	r3,0(r8)
10109f50:	00c00084 	movi	r3,2
10109f54:	40c00115 	stw	r3,4(r8)
10109f58:	d8801c15 	stw	r2,112(sp)
10109f5c:	d9001b15 	stw	r4,108(sp)
10109f60:	00c001c4 	movi	r3,7
10109f64:	1902650e 	bge	r3,r4,1010a8fc <___vfiprintf_internal_r+0xeb4>
10109f68:	10029a1e 	bne	r2,zero,1010a9d4 <___vfiprintf_internal_r+0xf8c>
10109f6c:	00c02004 	movi	r3,128
10109f70:	01000044 	movi	r4,1
10109f74:	000b883a 	mov	r5,zero
10109f78:	d811883a 	mov	r8,sp
10109f7c:	e0c1b31e 	bne	fp,r3,1010a64c <___vfiprintf_internal_r+0xc04>
10109f80:	8cb9c83a 	sub	fp,r17,r18
10109f84:	0701b10e 	bge	zero,fp,1010a64c <___vfiprintf_internal_r+0xc04>
10109f88:	01c00404 	movi	r7,16
10109f8c:	3f03890e 	bge	r7,fp,1010adb4 <___vfiprintf_internal_r+0x136c>
10109f90:	00c40474 	movhi	r3,4113
10109f94:	18c46c04 	addi	r3,r3,4528
10109f98:	d8c02415 	stw	r3,144(sp)
10109f9c:	8007883a 	mov	r3,r16
10109fa0:	034001c4 	movi	r13,7
10109fa4:	e021883a 	mov	r16,fp
10109fa8:	da402515 	stw	r9,148(sp)
10109fac:	1839883a 	mov	fp,r3
10109fb0:	00000506 	br	10109fc8 <___vfiprintf_internal_r+0x580>
10109fb4:	29800084 	addi	r6,r5,2
10109fb8:	42000204 	addi	r8,r8,8
10109fbc:	180b883a 	mov	r5,r3
10109fc0:	843ffc04 	addi	r16,r16,-16
10109fc4:	3c000d0e 	bge	r7,r16,10109ffc <___vfiprintf_internal_r+0x5b4>
10109fc8:	10800404 	addi	r2,r2,16
10109fcc:	28c00044 	addi	r3,r5,1
10109fd0:	45c00015 	stw	r23,0(r8)
10109fd4:	41c00115 	stw	r7,4(r8)
10109fd8:	d8801c15 	stw	r2,112(sp)
10109fdc:	d8c01b15 	stw	r3,108(sp)
10109fe0:	68fff40e 	bge	r13,r3,10109fb4 <__alt_data_end+0xfffe9fb4>
10109fe4:	1002241e 	bne	r2,zero,1010a878 <___vfiprintf_internal_r+0xe30>
10109fe8:	843ffc04 	addi	r16,r16,-16
10109fec:	01800044 	movi	r6,1
10109ff0:	000b883a 	mov	r5,zero
10109ff4:	d811883a 	mov	r8,sp
10109ff8:	3c3ff316 	blt	r7,r16,10109fc8 <__alt_data_end+0xfffe9fc8>
10109ffc:	da402517 	ldw	r9,148(sp)
1010a000:	e007883a 	mov	r3,fp
1010a004:	8039883a 	mov	fp,r16
1010a008:	1821883a 	mov	r16,r3
1010a00c:	d8c02417 	ldw	r3,144(sp)
1010a010:	1705883a 	add	r2,r2,fp
1010a014:	47000115 	stw	fp,4(r8)
1010a018:	40c00015 	stw	r3,0(r8)
1010a01c:	d8801c15 	stw	r2,112(sp)
1010a020:	d9801b15 	stw	r6,108(sp)
1010a024:	00c001c4 	movi	r3,7
1010a028:	19827616 	blt	r3,r6,1010aa04 <___vfiprintf_internal_r+0xfbc>
1010a02c:	4cf9c83a 	sub	fp,r9,r19
1010a030:	42000204 	addi	r8,r8,8
1010a034:	31000044 	addi	r4,r6,1
1010a038:	300b883a 	mov	r5,r6
1010a03c:	07018516 	blt	zero,fp,1010a654 <___vfiprintf_internal_r+0xc0c>
1010a040:	9885883a 	add	r2,r19,r2
1010a044:	45400015 	stw	r21,0(r8)
1010a048:	44c00115 	stw	r19,4(r8)
1010a04c:	d8801c15 	stw	r2,112(sp)
1010a050:	d9001b15 	stw	r4,108(sp)
1010a054:	00c001c4 	movi	r3,7
1010a058:	1901dd0e 	bge	r3,r4,1010a7d0 <___vfiprintf_internal_r+0xd88>
1010a05c:	1002401e 	bne	r2,zero,1010a960 <___vfiprintf_internal_r+0xf18>
1010a060:	d8001b15 	stw	zero,108(sp)
1010a064:	a2c0010c 	andi	r11,r20,4
1010a068:	58000226 	beq	r11,zero,1010a074 <___vfiprintf_internal_r+0x62c>
1010a06c:	8ca7c83a 	sub	r19,r17,r18
1010a070:	04c2f216 	blt	zero,r19,1010ac3c <___vfiprintf_internal_r+0x11f4>
1010a074:	8c80010e 	bge	r17,r18,1010a07c <___vfiprintf_internal_r+0x634>
1010a078:	9023883a 	mov	r17,r18
1010a07c:	da802317 	ldw	r10,140(sp)
1010a080:	5455883a 	add	r10,r10,r17
1010a084:	da802315 	stw	r10,140(sp)
1010a088:	d8001b15 	stw	zero,108(sp)
1010a08c:	d811883a 	mov	r8,sp
1010a090:	003ea206 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010a094:	a5000814 	ori	r20,r20,32
1010a098:	80c00007 	ldb	r3,0(r16)
1010a09c:	003ec906 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a0a0:	80c00007 	ldb	r3,0(r16)
1010a0a4:	1b030926 	beq	r3,r12,1010accc <___vfiprintf_internal_r+0x1284>
1010a0a8:	a5000414 	ori	r20,r20,16
1010a0ac:	003ec506 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a0b0:	21003fcc 	andi	r4,r4,255
1010a0b4:	20035e1e 	bne	r4,zero,1010ae30 <___vfiprintf_internal_r+0x13e8>
1010a0b8:	a080080c 	andi	r2,r20,32
1010a0bc:	1002a526 	beq	r2,zero,1010ab54 <___vfiprintf_internal_r+0x110c>
1010a0c0:	da802217 	ldw	r10,136(sp)
1010a0c4:	50800017 	ldw	r2,0(r10)
1010a0c8:	da802317 	ldw	r10,140(sp)
1010a0cc:	5007d7fa 	srai	r3,r10,31
1010a0d0:	da802217 	ldw	r10,136(sp)
1010a0d4:	10c00115 	stw	r3,4(r2)
1010a0d8:	52800104 	addi	r10,r10,4
1010a0dc:	da802215 	stw	r10,136(sp)
1010a0e0:	da802317 	ldw	r10,140(sp)
1010a0e4:	12800015 	stw	r10,0(r2)
1010a0e8:	003e8c06 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010a0ec:	21003fcc 	andi	r4,r4,255
1010a0f0:	2003511e 	bne	r4,zero,1010ae38 <___vfiprintf_internal_r+0x13f0>
1010a0f4:	a080080c 	andi	r2,r20,32
1010a0f8:	1000a126 	beq	r2,zero,1010a380 <___vfiprintf_internal_r+0x938>
1010a0fc:	da802217 	ldw	r10,136(sp)
1010a100:	d8001d85 	stb	zero,118(sp)
1010a104:	50800204 	addi	r2,r10,8
1010a108:	54800017 	ldw	r18,0(r10)
1010a10c:	54c00117 	ldw	r19,4(r10)
1010a110:	4802b416 	blt	r9,zero,1010abe4 <___vfiprintf_internal_r+0x119c>
1010a114:	013fdfc4 	movi	r4,-129
1010a118:	94c6b03a 	or	r3,r18,r19
1010a11c:	d8802215 	stw	r2,136(sp)
1010a120:	a128703a 	and	r20,r20,r4
1010a124:	1800a226 	beq	r3,zero,1010a3b0 <___vfiprintf_internal_r+0x968>
1010a128:	0039883a 	mov	fp,zero
1010a12c:	dd401a04 	addi	r21,sp,104
1010a130:	9006d0fa 	srli	r3,r18,3
1010a134:	9808977a 	slli	r4,r19,29
1010a138:	9826d0fa 	srli	r19,r19,3
1010a13c:	948001cc 	andi	r18,r18,7
1010a140:	90800c04 	addi	r2,r18,48
1010a144:	ad7fffc4 	addi	r21,r21,-1
1010a148:	20e4b03a 	or	r18,r4,r3
1010a14c:	a8800005 	stb	r2,0(r21)
1010a150:	94c6b03a 	or	r3,r18,r19
1010a154:	183ff61e 	bne	r3,zero,1010a130 <__alt_data_end+0xfffea130>
1010a158:	a0c0004c 	andi	r3,r20,1
1010a15c:	18005926 	beq	r3,zero,1010a2c4 <___vfiprintf_internal_r+0x87c>
1010a160:	10803fcc 	andi	r2,r2,255
1010a164:	1080201c 	xori	r2,r2,128
1010a168:	10bfe004 	addi	r2,r2,-128
1010a16c:	00c00c04 	movi	r3,48
1010a170:	10c05426 	beq	r2,r3,1010a2c4 <___vfiprintf_internal_r+0x87c>
1010a174:	da801e17 	ldw	r10,120(sp)
1010a178:	a8bfffc4 	addi	r2,r21,-1
1010a17c:	a8ffffc5 	stb	r3,-1(r21)
1010a180:	50a7c83a 	sub	r19,r10,r2
1010a184:	102b883a 	mov	r21,r2
1010a188:	003f2f06 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010a18c:	21003fcc 	andi	r4,r4,255
1010a190:	2003421e 	bne	r4,zero,1010ae9c <___vfiprintf_internal_r+0x1454>
1010a194:	00840474 	movhi	r2,4113
1010a198:	10840c04 	addi	r2,r2,4144
1010a19c:	d8802615 	stw	r2,152(sp)
1010a1a0:	a080080c 	andi	r2,r20,32
1010a1a4:	1000aa26 	beq	r2,zero,1010a450 <___vfiprintf_internal_r+0xa08>
1010a1a8:	da802217 	ldw	r10,136(sp)
1010a1ac:	54800017 	ldw	r18,0(r10)
1010a1b0:	54c00117 	ldw	r19,4(r10)
1010a1b4:	52800204 	addi	r10,r10,8
1010a1b8:	da802215 	stw	r10,136(sp)
1010a1bc:	a080004c 	andi	r2,r20,1
1010a1c0:	1001d226 	beq	r2,zero,1010a90c <___vfiprintf_internal_r+0xec4>
1010a1c4:	94c4b03a 	or	r2,r18,r19
1010a1c8:	1002351e 	bne	r2,zero,1010aaa0 <___vfiprintf_internal_r+0x1058>
1010a1cc:	d8001d85 	stb	zero,118(sp)
1010a1d0:	48022216 	blt	r9,zero,1010aa5c <___vfiprintf_internal_r+0x1014>
1010a1d4:	00bfdfc4 	movi	r2,-129
1010a1d8:	a0a8703a 	and	r20,r20,r2
1010a1dc:	003f1506 	br	10109e34 <__alt_data_end+0xfffe9e34>
1010a1e0:	da802217 	ldw	r10,136(sp)
1010a1e4:	04800044 	movi	r18,1
1010a1e8:	d8001d85 	stb	zero,118(sp)
1010a1ec:	50800017 	ldw	r2,0(r10)
1010a1f0:	52800104 	addi	r10,r10,4
1010a1f4:	da802215 	stw	r10,136(sp)
1010a1f8:	d8801005 	stb	r2,64(sp)
1010a1fc:	9027883a 	mov	r19,r18
1010a200:	dd401004 	addi	r21,sp,64
1010a204:	0013883a 	mov	r9,zero
1010a208:	003f1706 	br	10109e68 <__alt_data_end+0xfffe9e68>
1010a20c:	21003fcc 	andi	r4,r4,255
1010a210:	2003201e 	bne	r4,zero,1010ae94 <___vfiprintf_internal_r+0x144c>
1010a214:	a080080c 	andi	r2,r20,32
1010a218:	10004b26 	beq	r2,zero,1010a348 <___vfiprintf_internal_r+0x900>
1010a21c:	da802217 	ldw	r10,136(sp)
1010a220:	50800117 	ldw	r2,4(r10)
1010a224:	54800017 	ldw	r18,0(r10)
1010a228:	52800204 	addi	r10,r10,8
1010a22c:	da802215 	stw	r10,136(sp)
1010a230:	1027883a 	mov	r19,r2
1010a234:	10022c16 	blt	r2,zero,1010aae8 <___vfiprintf_internal_r+0x10a0>
1010a238:	df001d83 	ldbu	fp,118(sp)
1010a23c:	48007216 	blt	r9,zero,1010a408 <___vfiprintf_internal_r+0x9c0>
1010a240:	00ffdfc4 	movi	r3,-129
1010a244:	94c4b03a 	or	r2,r18,r19
1010a248:	a0e8703a 	and	r20,r20,r3
1010a24c:	1000cc26 	beq	r2,zero,1010a580 <___vfiprintf_internal_r+0xb38>
1010a250:	98021026 	beq	r19,zero,1010aa94 <___vfiprintf_internal_r+0x104c>
1010a254:	dc402415 	stw	r17,144(sp)
1010a258:	dc002515 	stw	r16,148(sp)
1010a25c:	9823883a 	mov	r17,r19
1010a260:	9021883a 	mov	r16,r18
1010a264:	dd401a04 	addi	r21,sp,104
1010a268:	4825883a 	mov	r18,r9
1010a26c:	4027883a 	mov	r19,r8
1010a270:	8009883a 	mov	r4,r16
1010a274:	880b883a 	mov	r5,r17
1010a278:	01800284 	movi	r6,10
1010a27c:	000f883a 	mov	r7,zero
1010a280:	010bb000 	call	1010bb00 <__umoddi3>
1010a284:	10800c04 	addi	r2,r2,48
1010a288:	ad7fffc4 	addi	r21,r21,-1
1010a28c:	8009883a 	mov	r4,r16
1010a290:	880b883a 	mov	r5,r17
1010a294:	a8800005 	stb	r2,0(r21)
1010a298:	01800284 	movi	r6,10
1010a29c:	000f883a 	mov	r7,zero
1010a2a0:	010b5880 	call	1010b588 <__udivdi3>
1010a2a4:	1021883a 	mov	r16,r2
1010a2a8:	10c4b03a 	or	r2,r2,r3
1010a2ac:	1823883a 	mov	r17,r3
1010a2b0:	103fef1e 	bne	r2,zero,1010a270 <__alt_data_end+0xfffea270>
1010a2b4:	dc402417 	ldw	r17,144(sp)
1010a2b8:	dc002517 	ldw	r16,148(sp)
1010a2bc:	9013883a 	mov	r9,r18
1010a2c0:	9811883a 	mov	r8,r19
1010a2c4:	da801e17 	ldw	r10,120(sp)
1010a2c8:	5567c83a 	sub	r19,r10,r21
1010a2cc:	003ede06 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010a2d0:	38803fcc 	andi	r2,r7,255
1010a2d4:	1080201c 	xori	r2,r2,128
1010a2d8:	10bfe004 	addi	r2,r2,-128
1010a2dc:	1002371e 	bne	r2,zero,1010abbc <___vfiprintf_internal_r+0x1174>
1010a2e0:	01000044 	movi	r4,1
1010a2e4:	01c00804 	movi	r7,32
1010a2e8:	80c00007 	ldb	r3,0(r16)
1010a2ec:	003e3506 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a2f0:	a5000054 	ori	r20,r20,1
1010a2f4:	80c00007 	ldb	r3,0(r16)
1010a2f8:	003e3206 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a2fc:	a5002014 	ori	r20,r20,128
1010a300:	80c00007 	ldb	r3,0(r16)
1010a304:	003e2f06 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a308:	8015883a 	mov	r10,r16
1010a30c:	0023883a 	mov	r17,zero
1010a310:	18bff404 	addi	r2,r3,-48
1010a314:	50c00007 	ldb	r3,0(r10)
1010a318:	8c4002a4 	muli	r17,r17,10
1010a31c:	84000044 	addi	r16,r16,1
1010a320:	8015883a 	mov	r10,r16
1010a324:	1463883a 	add	r17,r2,r17
1010a328:	18bff404 	addi	r2,r3,-48
1010a32c:	30bff92e 	bgeu	r6,r2,1010a314 <__alt_data_end+0xfffea314>
1010a330:	003e2506 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010a334:	21003fcc 	andi	r4,r4,255
1010a338:	2002d41e 	bne	r4,zero,1010ae8c <___vfiprintf_internal_r+0x1444>
1010a33c:	a5000414 	ori	r20,r20,16
1010a340:	a080080c 	andi	r2,r20,32
1010a344:	103fb51e 	bne	r2,zero,1010a21c <__alt_data_end+0xfffea21c>
1010a348:	a080040c 	andi	r2,r20,16
1010a34c:	1001f826 	beq	r2,zero,1010ab30 <___vfiprintf_internal_r+0x10e8>
1010a350:	da802217 	ldw	r10,136(sp)
1010a354:	54800017 	ldw	r18,0(r10)
1010a358:	52800104 	addi	r10,r10,4
1010a35c:	da802215 	stw	r10,136(sp)
1010a360:	9027d7fa 	srai	r19,r18,31
1010a364:	9805883a 	mov	r2,r19
1010a368:	003fb206 	br	1010a234 <__alt_data_end+0xfffea234>
1010a36c:	21003fcc 	andi	r4,r4,255
1010a370:	2002c41e 	bne	r4,zero,1010ae84 <___vfiprintf_internal_r+0x143c>
1010a374:	a5000414 	ori	r20,r20,16
1010a378:	a080080c 	andi	r2,r20,32
1010a37c:	103f5f1e 	bne	r2,zero,1010a0fc <__alt_data_end+0xfffea0fc>
1010a380:	a080040c 	andi	r2,r20,16
1010a384:	10020f26 	beq	r2,zero,1010abc4 <___vfiprintf_internal_r+0x117c>
1010a388:	da802217 	ldw	r10,136(sp)
1010a38c:	d8001d85 	stb	zero,118(sp)
1010a390:	0027883a 	mov	r19,zero
1010a394:	50800104 	addi	r2,r10,4
1010a398:	54800017 	ldw	r18,0(r10)
1010a39c:	48021116 	blt	r9,zero,1010abe4 <___vfiprintf_internal_r+0x119c>
1010a3a0:	00ffdfc4 	movi	r3,-129
1010a3a4:	d8802215 	stw	r2,136(sp)
1010a3a8:	a0e8703a 	and	r20,r20,r3
1010a3ac:	903f5e1e 	bne	r18,zero,1010a128 <__alt_data_end+0xfffea128>
1010a3b0:	0039883a 	mov	fp,zero
1010a3b4:	4802a626 	beq	r9,zero,1010ae50 <___vfiprintf_internal_r+0x1408>
1010a3b8:	0025883a 	mov	r18,zero
1010a3bc:	0027883a 	mov	r19,zero
1010a3c0:	003f5a06 	br	1010a12c <__alt_data_end+0xfffea12c>
1010a3c4:	21003fcc 	andi	r4,r4,255
1010a3c8:	20029f1e 	bne	r4,zero,1010ae48 <___vfiprintf_internal_r+0x1400>
1010a3cc:	a5000414 	ori	r20,r20,16
1010a3d0:	a080080c 	andi	r2,r20,32
1010a3d4:	10005e1e 	bne	r2,zero,1010a550 <___vfiprintf_internal_r+0xb08>
1010a3d8:	a080040c 	andi	r2,r20,16
1010a3dc:	1001a21e 	bne	r2,zero,1010aa68 <___vfiprintf_internal_r+0x1020>
1010a3e0:	a080100c 	andi	r2,r20,64
1010a3e4:	d8001d85 	stb	zero,118(sp)
1010a3e8:	da802217 	ldw	r10,136(sp)
1010a3ec:	1002231e 	bne	r2,zero,1010ac7c <___vfiprintf_internal_r+0x1234>
1010a3f0:	50800104 	addi	r2,r10,4
1010a3f4:	54800017 	ldw	r18,0(r10)
1010a3f8:	0027883a 	mov	r19,zero
1010a3fc:	4801a00e 	bge	r9,zero,1010aa80 <___vfiprintf_internal_r+0x1038>
1010a400:	d8802215 	stw	r2,136(sp)
1010a404:	0039883a 	mov	fp,zero
1010a408:	94c4b03a 	or	r2,r18,r19
1010a40c:	103f901e 	bne	r2,zero,1010a250 <__alt_data_end+0xfffea250>
1010a410:	00800044 	movi	r2,1
1010a414:	10803fcc 	andi	r2,r2,255
1010a418:	00c00044 	movi	r3,1
1010a41c:	10c05926 	beq	r2,r3,1010a584 <___vfiprintf_internal_r+0xb3c>
1010a420:	00c00084 	movi	r3,2
1010a424:	10ffe41e 	bne	r2,r3,1010a3b8 <__alt_data_end+0xfffea3b8>
1010a428:	0025883a 	mov	r18,zero
1010a42c:	0027883a 	mov	r19,zero
1010a430:	00013d06 	br	1010a928 <___vfiprintf_internal_r+0xee0>
1010a434:	21003fcc 	andi	r4,r4,255
1010a438:	2002811e 	bne	r4,zero,1010ae40 <___vfiprintf_internal_r+0x13f8>
1010a43c:	00840474 	movhi	r2,4113
1010a440:	10840704 	addi	r2,r2,4124
1010a444:	d8802615 	stw	r2,152(sp)
1010a448:	a080080c 	andi	r2,r20,32
1010a44c:	103f561e 	bne	r2,zero,1010a1a8 <__alt_data_end+0xfffea1a8>
1010a450:	a080040c 	andi	r2,r20,16
1010a454:	1001d126 	beq	r2,zero,1010ab9c <___vfiprintf_internal_r+0x1154>
1010a458:	da802217 	ldw	r10,136(sp)
1010a45c:	0027883a 	mov	r19,zero
1010a460:	54800017 	ldw	r18,0(r10)
1010a464:	52800104 	addi	r10,r10,4
1010a468:	da802215 	stw	r10,136(sp)
1010a46c:	003f5306 	br	1010a1bc <__alt_data_end+0xfffea1bc>
1010a470:	da802217 	ldw	r10,136(sp)
1010a474:	d8001d85 	stb	zero,118(sp)
1010a478:	55400017 	ldw	r21,0(r10)
1010a47c:	50c00104 	addi	r3,r10,4
1010a480:	a8024226 	beq	r21,zero,1010ad8c <___vfiprintf_internal_r+0x1344>
1010a484:	48021816 	blt	r9,zero,1010ace8 <___vfiprintf_internal_r+0x12a0>
1010a488:	480d883a 	mov	r6,r9
1010a48c:	000b883a 	mov	r5,zero
1010a490:	a809883a 	mov	r4,r21
1010a494:	d8c02a15 	stw	r3,168(sp)
1010a498:	da002b15 	stw	r8,172(sp)
1010a49c:	da402c15 	stw	r9,176(sp)
1010a4a0:	0107e040 	call	10107e04 <memchr>
1010a4a4:	d8c02a17 	ldw	r3,168(sp)
1010a4a8:	da002b17 	ldw	r8,172(sp)
1010a4ac:	da402c17 	ldw	r9,176(sp)
1010a4b0:	10024826 	beq	r2,zero,1010add4 <___vfiprintf_internal_r+0x138c>
1010a4b4:	1567c83a 	sub	r19,r2,r21
1010a4b8:	df001d83 	ldbu	fp,118(sp)
1010a4bc:	d8c02215 	stw	r3,136(sp)
1010a4c0:	0013883a 	mov	r9,zero
1010a4c4:	003e6006 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010a4c8:	21003fcc 	andi	r4,r4,255
1010a4cc:	203fc026 	beq	r4,zero,1010a3d0 <__alt_data_end+0xfffea3d0>
1010a4d0:	d9c01d85 	stb	r7,118(sp)
1010a4d4:	003fbe06 	br	1010a3d0 <__alt_data_end+0xfffea3d0>
1010a4d8:	da802217 	ldw	r10,136(sp)
1010a4dc:	54400017 	ldw	r17,0(r10)
1010a4e0:	50800104 	addi	r2,r10,4
1010a4e4:	883e3b16 	blt	r17,zero,10109dd4 <__alt_data_end+0xfffe9dd4>
1010a4e8:	d8802215 	stw	r2,136(sp)
1010a4ec:	80c00007 	ldb	r3,0(r16)
1010a4f0:	003db406 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a4f4:	01000044 	movi	r4,1
1010a4f8:	01c00ac4 	movi	r7,43
1010a4fc:	80c00007 	ldb	r3,0(r16)
1010a500:	003db006 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a504:	80c00007 	ldb	r3,0(r16)
1010a508:	82800044 	addi	r10,r16,1
1010a50c:	1b423c26 	beq	r3,r13,1010ae00 <___vfiprintf_internal_r+0x13b8>
1010a510:	18bff404 	addi	r2,r3,-48
1010a514:	0013883a 	mov	r9,zero
1010a518:	30822b36 	bltu	r6,r2,1010adc8 <___vfiprintf_internal_r+0x1380>
1010a51c:	50c00007 	ldb	r3,0(r10)
1010a520:	4a4002a4 	muli	r9,r9,10
1010a524:	54000044 	addi	r16,r10,1
1010a528:	8015883a 	mov	r10,r16
1010a52c:	4893883a 	add	r9,r9,r2
1010a530:	18bff404 	addi	r2,r3,-48
1010a534:	30bff92e 	bgeu	r6,r2,1010a51c <__alt_data_end+0xfffea51c>
1010a538:	483da30e 	bge	r9,zero,10109bc8 <__alt_data_end+0xfffe9bc8>
1010a53c:	027fffc4 	movi	r9,-1
1010a540:	003da106 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010a544:	a5001014 	ori	r20,r20,64
1010a548:	80c00007 	ldb	r3,0(r16)
1010a54c:	003d9d06 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010a550:	da802217 	ldw	r10,136(sp)
1010a554:	d8001d85 	stb	zero,118(sp)
1010a558:	50c00204 	addi	r3,r10,8
1010a55c:	54800017 	ldw	r18,0(r10)
1010a560:	54c00117 	ldw	r19,4(r10)
1010a564:	4801ca16 	blt	r9,zero,1010ac90 <___vfiprintf_internal_r+0x1248>
1010a568:	013fdfc4 	movi	r4,-129
1010a56c:	94c4b03a 	or	r2,r18,r19
1010a570:	d8c02215 	stw	r3,136(sp)
1010a574:	a128703a 	and	r20,r20,r4
1010a578:	0039883a 	mov	fp,zero
1010a57c:	103f341e 	bne	r2,zero,1010a250 <__alt_data_end+0xfffea250>
1010a580:	483e2e26 	beq	r9,zero,10109e3c <__alt_data_end+0xfffe9e3c>
1010a584:	0025883a 	mov	r18,zero
1010a588:	94800c04 	addi	r18,r18,48
1010a58c:	dc8019c5 	stb	r18,103(sp)
1010a590:	dcc02717 	ldw	r19,156(sp)
1010a594:	dd4019c4 	addi	r21,sp,103
1010a598:	003e2b06 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010a59c:	21003fcc 	andi	r4,r4,255
1010a5a0:	2002361e 	bne	r4,zero,1010ae7c <___vfiprintf_internal_r+0x1434>
1010a5a4:	1801c126 	beq	r3,zero,1010acac <___vfiprintf_internal_r+0x1264>
1010a5a8:	04800044 	movi	r18,1
1010a5ac:	d8c01005 	stb	r3,64(sp)
1010a5b0:	d8001d85 	stb	zero,118(sp)
1010a5b4:	9027883a 	mov	r19,r18
1010a5b8:	dd401004 	addi	r21,sp,64
1010a5bc:	003f1106 	br	1010a204 <__alt_data_end+0xfffea204>
1010a5c0:	d9402117 	ldw	r5,132(sp)
1010a5c4:	d9002017 	ldw	r4,128(sp)
1010a5c8:	d9801a04 	addi	r6,sp,104
1010a5cc:	d9c02b15 	stw	r7,172(sp)
1010a5d0:	dbc02a15 	stw	r15,168(sp)
1010a5d4:	01099340 	call	10109934 <__sprint_r.part.0>
1010a5d8:	d9c02b17 	ldw	r7,172(sp)
1010a5dc:	dbc02a17 	ldw	r15,168(sp)
1010a5e0:	10006d1e 	bne	r2,zero,1010a798 <___vfiprintf_internal_r+0xd50>
1010a5e4:	d9801b17 	ldw	r6,108(sp)
1010a5e8:	d8801c17 	ldw	r2,112(sp)
1010a5ec:	d811883a 	mov	r8,sp
1010a5f0:	31400044 	addi	r5,r6,1
1010a5f4:	003e3306 	br	10109ec4 <__alt_data_end+0xfffe9ec4>
1010a5f8:	d9401b17 	ldw	r5,108(sp)
1010a5fc:	d8801c17 	ldw	r2,112(sp)
1010a600:	29000044 	addi	r4,r5,1
1010a604:	d8c01d87 	ldb	r3,118(sp)
1010a608:	183e4d26 	beq	r3,zero,10109f40 <__alt_data_end+0xfffe9f40>
1010a60c:	00c00044 	movi	r3,1
1010a610:	d9401d84 	addi	r5,sp,118
1010a614:	10c5883a 	add	r2,r2,r3
1010a618:	41400015 	stw	r5,0(r8)
1010a61c:	40c00115 	stw	r3,4(r8)
1010a620:	d8801c15 	stw	r2,112(sp)
1010a624:	d9001b15 	stw	r4,108(sp)
1010a628:	014001c4 	movi	r5,7
1010a62c:	2900a90e 	bge	r5,r4,1010a8d4 <___vfiprintf_internal_r+0xe8c>
1010a630:	1000da1e 	bne	r2,zero,1010a99c <___vfiprintf_internal_r+0xf54>
1010a634:	7000ab1e 	bne	r14,zero,1010a8e4 <___vfiprintf_internal_r+0xe9c>
1010a638:	000b883a 	mov	r5,zero
1010a63c:	1809883a 	mov	r4,r3
1010a640:	d811883a 	mov	r8,sp
1010a644:	00c02004 	movi	r3,128
1010a648:	e0fe4d26 	beq	fp,r3,10109f80 <__alt_data_end+0xfffe9f80>
1010a64c:	4cf9c83a 	sub	fp,r9,r19
1010a650:	073e7b0e 	bge	zero,fp,1010a040 <__alt_data_end+0xfffea040>
1010a654:	01c00404 	movi	r7,16
1010a658:	3f01900e 	bge	r7,fp,1010ac9c <___vfiprintf_internal_r+0x1254>
1010a65c:	00c40474 	movhi	r3,4113
1010a660:	18c46c04 	addi	r3,r3,4528
1010a664:	d8c02415 	stw	r3,144(sp)
1010a668:	034001c4 	movi	r13,7
1010a66c:	00000506 	br	1010a684 <___vfiprintf_internal_r+0xc3c>
1010a670:	29000084 	addi	r4,r5,2
1010a674:	42000204 	addi	r8,r8,8
1010a678:	180b883a 	mov	r5,r3
1010a67c:	e73ffc04 	addi	fp,fp,-16
1010a680:	3f000d0e 	bge	r7,fp,1010a6b8 <___vfiprintf_internal_r+0xc70>
1010a684:	10800404 	addi	r2,r2,16
1010a688:	28c00044 	addi	r3,r5,1
1010a68c:	45c00015 	stw	r23,0(r8)
1010a690:	41c00115 	stw	r7,4(r8)
1010a694:	d8801c15 	stw	r2,112(sp)
1010a698:	d8c01b15 	stw	r3,108(sp)
1010a69c:	68fff40e 	bge	r13,r3,1010a670 <__alt_data_end+0xfffea670>
1010a6a0:	1000101e 	bne	r2,zero,1010a6e4 <___vfiprintf_internal_r+0xc9c>
1010a6a4:	e73ffc04 	addi	fp,fp,-16
1010a6a8:	01000044 	movi	r4,1
1010a6ac:	000b883a 	mov	r5,zero
1010a6b0:	d811883a 	mov	r8,sp
1010a6b4:	3f3ff316 	blt	r7,fp,1010a684 <__alt_data_end+0xfffea684>
1010a6b8:	da802417 	ldw	r10,144(sp)
1010a6bc:	1705883a 	add	r2,r2,fp
1010a6c0:	47000115 	stw	fp,4(r8)
1010a6c4:	42800015 	stw	r10,0(r8)
1010a6c8:	d8801c15 	stw	r2,112(sp)
1010a6cc:	d9001b15 	stw	r4,108(sp)
1010a6d0:	00c001c4 	movi	r3,7
1010a6d4:	19003616 	blt	r3,r4,1010a7b0 <___vfiprintf_internal_r+0xd68>
1010a6d8:	42000204 	addi	r8,r8,8
1010a6dc:	21000044 	addi	r4,r4,1
1010a6e0:	003e5706 	br	1010a040 <__alt_data_end+0xfffea040>
1010a6e4:	d9402117 	ldw	r5,132(sp)
1010a6e8:	d9002017 	ldw	r4,128(sp)
1010a6ec:	d9801a04 	addi	r6,sp,104
1010a6f0:	d9c02b15 	stw	r7,172(sp)
1010a6f4:	db402a15 	stw	r13,168(sp)
1010a6f8:	01099340 	call	10109934 <__sprint_r.part.0>
1010a6fc:	d9c02b17 	ldw	r7,172(sp)
1010a700:	db402a17 	ldw	r13,168(sp)
1010a704:	1000241e 	bne	r2,zero,1010a798 <___vfiprintf_internal_r+0xd50>
1010a708:	d9401b17 	ldw	r5,108(sp)
1010a70c:	d8801c17 	ldw	r2,112(sp)
1010a710:	d811883a 	mov	r8,sp
1010a714:	29000044 	addi	r4,r5,1
1010a718:	003fd806 	br	1010a67c <__alt_data_end+0xfffea67c>
1010a71c:	d9401b17 	ldw	r5,108(sp)
1010a720:	00c40474 	movhi	r3,4113
1010a724:	18c47004 	addi	r3,r3,4544
1010a728:	d8c02415 	stw	r3,144(sp)
1010a72c:	29400044 	addi	r5,r5,1
1010a730:	d8c02417 	ldw	r3,144(sp)
1010a734:	14c5883a 	add	r2,r2,r19
1010a738:	44c00115 	stw	r19,4(r8)
1010a73c:	40c00015 	stw	r3,0(r8)
1010a740:	d8801c15 	stw	r2,112(sp)
1010a744:	d9401b15 	stw	r5,108(sp)
1010a748:	00c001c4 	movi	r3,7
1010a74c:	1940070e 	bge	r3,r5,1010a76c <___vfiprintf_internal_r+0xd24>
1010a750:	103e4826 	beq	r2,zero,1010a074 <__alt_data_end+0xfffea074>
1010a754:	d9402117 	ldw	r5,132(sp)
1010a758:	d9002017 	ldw	r4,128(sp)
1010a75c:	d9801a04 	addi	r6,sp,104
1010a760:	01099340 	call	10109934 <__sprint_r.part.0>
1010a764:	10000c1e 	bne	r2,zero,1010a798 <___vfiprintf_internal_r+0xd50>
1010a768:	d8801c17 	ldw	r2,112(sp)
1010a76c:	8c80010e 	bge	r17,r18,1010a774 <___vfiprintf_internal_r+0xd2c>
1010a770:	9023883a 	mov	r17,r18
1010a774:	da802317 	ldw	r10,140(sp)
1010a778:	5455883a 	add	r10,r10,r17
1010a77c:	da802315 	stw	r10,140(sp)
1010a780:	103e4126 	beq	r2,zero,1010a088 <__alt_data_end+0xfffea088>
1010a784:	d9402117 	ldw	r5,132(sp)
1010a788:	d9002017 	ldw	r4,128(sp)
1010a78c:	d9801a04 	addi	r6,sp,104
1010a790:	01099340 	call	10109934 <__sprint_r.part.0>
1010a794:	103e3c26 	beq	r2,zero,1010a088 <__alt_data_end+0xfffea088>
1010a798:	dd002117 	ldw	r20,132(sp)
1010a79c:	a080030b 	ldhu	r2,12(r20)
1010a7a0:	1080100c 	andi	r2,r2,64
1010a7a4:	1001231e 	bne	r2,zero,1010ac34 <___vfiprintf_internal_r+0x11ec>
1010a7a8:	d8802317 	ldw	r2,140(sp)
1010a7ac:	003d7b06 	br	10109d9c <__alt_data_end+0xfffe9d9c>
1010a7b0:	1000991e 	bne	r2,zero,1010aa18 <___vfiprintf_internal_r+0xfd0>
1010a7b4:	00c00044 	movi	r3,1
1010a7b8:	9805883a 	mov	r2,r19
1010a7bc:	dd400015 	stw	r21,0(sp)
1010a7c0:	dcc00115 	stw	r19,4(sp)
1010a7c4:	dcc01c15 	stw	r19,112(sp)
1010a7c8:	d8c01b15 	stw	r3,108(sp)
1010a7cc:	d811883a 	mov	r8,sp
1010a7d0:	42000204 	addi	r8,r8,8
1010a7d4:	a2c0010c 	andi	r11,r20,4
1010a7d8:	583fe426 	beq	r11,zero,1010a76c <__alt_data_end+0xfffea76c>
1010a7dc:	8ca7c83a 	sub	r19,r17,r18
1010a7e0:	04ffe20e 	bge	zero,r19,1010a76c <__alt_data_end+0xfffea76c>
1010a7e4:	01c00404 	movi	r7,16
1010a7e8:	3cffcc0e 	bge	r7,r19,1010a71c <__alt_data_end+0xfffea71c>
1010a7ec:	02840474 	movhi	r10,4113
1010a7f0:	52847004 	addi	r10,r10,4544
1010a7f4:	d9001b17 	ldw	r4,108(sp)
1010a7f8:	da802415 	stw	r10,144(sp)
1010a7fc:	382b883a 	mov	r21,r7
1010a800:	050001c4 	movi	r20,7
1010a804:	df002017 	ldw	fp,128(sp)
1010a808:	00000506 	br	1010a820 <___vfiprintf_internal_r+0xdd8>
1010a80c:	21400084 	addi	r5,r4,2
1010a810:	42000204 	addi	r8,r8,8
1010a814:	1809883a 	mov	r4,r3
1010a818:	9cfffc04 	addi	r19,r19,-16
1010a81c:	acffc40e 	bge	r21,r19,1010a730 <__alt_data_end+0xfffea730>
1010a820:	10800404 	addi	r2,r2,16
1010a824:	20c00044 	addi	r3,r4,1
1010a828:	45800015 	stw	r22,0(r8)
1010a82c:	45400115 	stw	r21,4(r8)
1010a830:	d8801c15 	stw	r2,112(sp)
1010a834:	d8c01b15 	stw	r3,108(sp)
1010a838:	a0fff40e 	bge	r20,r3,1010a80c <__alt_data_end+0xfffea80c>
1010a83c:	1000041e 	bne	r2,zero,1010a850 <___vfiprintf_internal_r+0xe08>
1010a840:	01400044 	movi	r5,1
1010a844:	0009883a 	mov	r4,zero
1010a848:	d811883a 	mov	r8,sp
1010a84c:	003ff206 	br	1010a818 <__alt_data_end+0xfffea818>
1010a850:	d9402117 	ldw	r5,132(sp)
1010a854:	d9801a04 	addi	r6,sp,104
1010a858:	e009883a 	mov	r4,fp
1010a85c:	01099340 	call	10109934 <__sprint_r.part.0>
1010a860:	103fcd1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a864:	d9001b17 	ldw	r4,108(sp)
1010a868:	d8801c17 	ldw	r2,112(sp)
1010a86c:	d811883a 	mov	r8,sp
1010a870:	21400044 	addi	r5,r4,1
1010a874:	003fe806 	br	1010a818 <__alt_data_end+0xfffea818>
1010a878:	d9402117 	ldw	r5,132(sp)
1010a87c:	d9002017 	ldw	r4,128(sp)
1010a880:	d9801a04 	addi	r6,sp,104
1010a884:	d9c02b15 	stw	r7,172(sp)
1010a888:	db402a15 	stw	r13,168(sp)
1010a88c:	01099340 	call	10109934 <__sprint_r.part.0>
1010a890:	d9c02b17 	ldw	r7,172(sp)
1010a894:	db402a17 	ldw	r13,168(sp)
1010a898:	103fbf1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a89c:	d9401b17 	ldw	r5,108(sp)
1010a8a0:	d8801c17 	ldw	r2,112(sp)
1010a8a4:	d811883a 	mov	r8,sp
1010a8a8:	29800044 	addi	r6,r5,1
1010a8ac:	003dc406 	br	10109fc0 <__alt_data_end+0xfffe9fc0>
1010a8b0:	1000d21e 	bne	r2,zero,1010abfc <___vfiprintf_internal_r+0x11b4>
1010a8b4:	d8c01d87 	ldb	r3,118(sp)
1010a8b8:	18009526 	beq	r3,zero,1010ab10 <___vfiprintf_internal_r+0x10c8>
1010a8bc:	00800044 	movi	r2,1
1010a8c0:	d8c01d84 	addi	r3,sp,118
1010a8c4:	1009883a 	mov	r4,r2
1010a8c8:	d8c00015 	stw	r3,0(sp)
1010a8cc:	d8800115 	stw	r2,4(sp)
1010a8d0:	d811883a 	mov	r8,sp
1010a8d4:	200b883a 	mov	r5,r4
1010a8d8:	42000204 	addi	r8,r8,8
1010a8dc:	21000044 	addi	r4,r4,1
1010a8e0:	003d9706 	br	10109f40 <__alt_data_end+0xfffe9f40>
1010a8e4:	d9001d04 	addi	r4,sp,116
1010a8e8:	00800084 	movi	r2,2
1010a8ec:	d9000015 	stw	r4,0(sp)
1010a8f0:	d8800115 	stw	r2,4(sp)
1010a8f4:	1809883a 	mov	r4,r3
1010a8f8:	d811883a 	mov	r8,sp
1010a8fc:	200b883a 	mov	r5,r4
1010a900:	42000204 	addi	r8,r8,8
1010a904:	21000044 	addi	r4,r4,1
1010a908:	003f4e06 	br	1010a644 <__alt_data_end+0xfffea644>
1010a90c:	d8001d85 	stb	zero,118(sp)
1010a910:	48005016 	blt	r9,zero,1010aa54 <___vfiprintf_internal_r+0x100c>
1010a914:	00ffdfc4 	movi	r3,-129
1010a918:	94c4b03a 	or	r2,r18,r19
1010a91c:	a0e8703a 	and	r20,r20,r3
1010a920:	103d4426 	beq	r2,zero,10109e34 <__alt_data_end+0xfffe9e34>
1010a924:	0039883a 	mov	fp,zero
1010a928:	d9002617 	ldw	r4,152(sp)
1010a92c:	dd401a04 	addi	r21,sp,104
1010a930:	908003cc 	andi	r2,r18,15
1010a934:	9806973a 	slli	r3,r19,28
1010a938:	2085883a 	add	r2,r4,r2
1010a93c:	9024d13a 	srli	r18,r18,4
1010a940:	10800003 	ldbu	r2,0(r2)
1010a944:	9826d13a 	srli	r19,r19,4
1010a948:	ad7fffc4 	addi	r21,r21,-1
1010a94c:	1ca4b03a 	or	r18,r3,r18
1010a950:	a8800005 	stb	r2,0(r21)
1010a954:	94c4b03a 	or	r2,r18,r19
1010a958:	103ff51e 	bne	r2,zero,1010a930 <__alt_data_end+0xfffea930>
1010a95c:	003e5906 	br	1010a2c4 <__alt_data_end+0xfffea2c4>
1010a960:	d9402117 	ldw	r5,132(sp)
1010a964:	d9002017 	ldw	r4,128(sp)
1010a968:	d9801a04 	addi	r6,sp,104
1010a96c:	01099340 	call	10109934 <__sprint_r.part.0>
1010a970:	103f891e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a974:	d8801c17 	ldw	r2,112(sp)
1010a978:	d811883a 	mov	r8,sp
1010a97c:	003f9506 	br	1010a7d4 <__alt_data_end+0xfffea7d4>
1010a980:	d9402117 	ldw	r5,132(sp)
1010a984:	d9002017 	ldw	r4,128(sp)
1010a988:	d9801a04 	addi	r6,sp,104
1010a98c:	01099340 	call	10109934 <__sprint_r.part.0>
1010a990:	103f811e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a994:	d811883a 	mov	r8,sp
1010a998:	003ced06 	br	10109d50 <__alt_data_end+0xfffe9d50>
1010a99c:	d9402117 	ldw	r5,132(sp)
1010a9a0:	d9002017 	ldw	r4,128(sp)
1010a9a4:	d9801a04 	addi	r6,sp,104
1010a9a8:	da402c15 	stw	r9,176(sp)
1010a9ac:	db802a15 	stw	r14,168(sp)
1010a9b0:	01099340 	call	10109934 <__sprint_r.part.0>
1010a9b4:	da402c17 	ldw	r9,176(sp)
1010a9b8:	db802a17 	ldw	r14,168(sp)
1010a9bc:	103f761e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a9c0:	d9401b17 	ldw	r5,108(sp)
1010a9c4:	d8801c17 	ldw	r2,112(sp)
1010a9c8:	d811883a 	mov	r8,sp
1010a9cc:	29000044 	addi	r4,r5,1
1010a9d0:	003d5b06 	br	10109f40 <__alt_data_end+0xfffe9f40>
1010a9d4:	d9402117 	ldw	r5,132(sp)
1010a9d8:	d9002017 	ldw	r4,128(sp)
1010a9dc:	d9801a04 	addi	r6,sp,104
1010a9e0:	da402c15 	stw	r9,176(sp)
1010a9e4:	01099340 	call	10109934 <__sprint_r.part.0>
1010a9e8:	da402c17 	ldw	r9,176(sp)
1010a9ec:	103f6a1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010a9f0:	d9401b17 	ldw	r5,108(sp)
1010a9f4:	d8801c17 	ldw	r2,112(sp)
1010a9f8:	d811883a 	mov	r8,sp
1010a9fc:	29000044 	addi	r4,r5,1
1010aa00:	003f1006 	br	1010a644 <__alt_data_end+0xfffea644>
1010aa04:	1000c31e 	bne	r2,zero,1010ad14 <___vfiprintf_internal_r+0x12cc>
1010aa08:	01000044 	movi	r4,1
1010aa0c:	000b883a 	mov	r5,zero
1010aa10:	d811883a 	mov	r8,sp
1010aa14:	003f0d06 	br	1010a64c <__alt_data_end+0xfffea64c>
1010aa18:	d9402117 	ldw	r5,132(sp)
1010aa1c:	d9002017 	ldw	r4,128(sp)
1010aa20:	d9801a04 	addi	r6,sp,104
1010aa24:	01099340 	call	10109934 <__sprint_r.part.0>
1010aa28:	103f5b1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010aa2c:	d9001b17 	ldw	r4,108(sp)
1010aa30:	d8801c17 	ldw	r2,112(sp)
1010aa34:	d811883a 	mov	r8,sp
1010aa38:	21000044 	addi	r4,r4,1
1010aa3c:	003d8006 	br	1010a040 <__alt_data_end+0xfffea040>
1010aa40:	01040474 	movhi	r4,4113
1010aa44:	21040c04 	addi	r4,r4,4144
1010aa48:	d9002615 	stw	r4,152(sp)
1010aa4c:	d8c02215 	stw	r3,136(sp)
1010aa50:	1029883a 	mov	r20,r2
1010aa54:	94c4b03a 	or	r2,r18,r19
1010aa58:	103fb21e 	bne	r2,zero,1010a924 <__alt_data_end+0xfffea924>
1010aa5c:	0039883a 	mov	fp,zero
1010aa60:	00800084 	movi	r2,2
1010aa64:	003e6b06 	br	1010a414 <__alt_data_end+0xfffea414>
1010aa68:	da802217 	ldw	r10,136(sp)
1010aa6c:	d8001d85 	stb	zero,118(sp)
1010aa70:	0027883a 	mov	r19,zero
1010aa74:	50800104 	addi	r2,r10,4
1010aa78:	54800017 	ldw	r18,0(r10)
1010aa7c:	483e6016 	blt	r9,zero,1010a400 <__alt_data_end+0xfffea400>
1010aa80:	00ffdfc4 	movi	r3,-129
1010aa84:	d8802215 	stw	r2,136(sp)
1010aa88:	a0e8703a 	and	r20,r20,r3
1010aa8c:	0039883a 	mov	fp,zero
1010aa90:	903ebb26 	beq	r18,zero,1010a580 <__alt_data_end+0xfffea580>
1010aa94:	00800244 	movi	r2,9
1010aa98:	14bdee36 	bltu	r2,r18,1010a254 <__alt_data_end+0xfffea254>
1010aa9c:	003eba06 	br	1010a588 <__alt_data_end+0xfffea588>
1010aaa0:	00800c04 	movi	r2,48
1010aaa4:	d8c01d45 	stb	r3,117(sp)
1010aaa8:	d8801d05 	stb	r2,116(sp)
1010aaac:	d8001d85 	stb	zero,118(sp)
1010aab0:	a0c00094 	ori	r3,r20,2
1010aab4:	4800a916 	blt	r9,zero,1010ad5c <___vfiprintf_internal_r+0x1314>
1010aab8:	00bfdfc4 	movi	r2,-129
1010aabc:	a096703a 	and	r11,r20,r2
1010aac0:	5d000094 	ori	r20,r11,2
1010aac4:	0039883a 	mov	fp,zero
1010aac8:	003f9706 	br	1010a928 <__alt_data_end+0xfffea928>
1010aacc:	8025883a 	mov	r18,r16
1010aad0:	003c2e06 	br	10109b8c <__alt_data_end+0xfffe9b8c>
1010aad4:	00840474 	movhi	r2,4113
1010aad8:	10840c04 	addi	r2,r2,4144
1010aadc:	0039883a 	mov	fp,zero
1010aae0:	d8802615 	stw	r2,152(sp)
1010aae4:	003f9006 	br	1010a928 <__alt_data_end+0xfffea928>
1010aae8:	04a5c83a 	sub	r18,zero,r18
1010aaec:	07000b44 	movi	fp,45
1010aaf0:	9004c03a 	cmpne	r2,r18,zero
1010aaf4:	04e7c83a 	sub	r19,zero,r19
1010aaf8:	df001d85 	stb	fp,118(sp)
1010aafc:	98a7c83a 	sub	r19,r19,r2
1010ab00:	48009f16 	blt	r9,zero,1010ad80 <___vfiprintf_internal_r+0x1338>
1010ab04:	00bfdfc4 	movi	r2,-129
1010ab08:	a0a8703a 	and	r20,r20,r2
1010ab0c:	003dd006 	br	1010a250 <__alt_data_end+0xfffea250>
1010ab10:	70004c26 	beq	r14,zero,1010ac44 <___vfiprintf_internal_r+0x11fc>
1010ab14:	00800084 	movi	r2,2
1010ab18:	d8c01d04 	addi	r3,sp,116
1010ab1c:	d8c00015 	stw	r3,0(sp)
1010ab20:	d8800115 	stw	r2,4(sp)
1010ab24:	01000044 	movi	r4,1
1010ab28:	d811883a 	mov	r8,sp
1010ab2c:	003f7306 	br	1010a8fc <__alt_data_end+0xfffea8fc>
1010ab30:	a080100c 	andi	r2,r20,64
1010ab34:	da802217 	ldw	r10,136(sp)
1010ab38:	103e0626 	beq	r2,zero,1010a354 <__alt_data_end+0xfffea354>
1010ab3c:	5480000f 	ldh	r18,0(r10)
1010ab40:	52800104 	addi	r10,r10,4
1010ab44:	da802215 	stw	r10,136(sp)
1010ab48:	9027d7fa 	srai	r19,r18,31
1010ab4c:	9805883a 	mov	r2,r19
1010ab50:	003db806 	br	1010a234 <__alt_data_end+0xfffea234>
1010ab54:	a080040c 	andi	r2,r20,16
1010ab58:	1000091e 	bne	r2,zero,1010ab80 <___vfiprintf_internal_r+0x1138>
1010ab5c:	a2c0100c 	andi	r11,r20,64
1010ab60:	58000726 	beq	r11,zero,1010ab80 <___vfiprintf_internal_r+0x1138>
1010ab64:	da802217 	ldw	r10,136(sp)
1010ab68:	50800017 	ldw	r2,0(r10)
1010ab6c:	52800104 	addi	r10,r10,4
1010ab70:	da802215 	stw	r10,136(sp)
1010ab74:	da802317 	ldw	r10,140(sp)
1010ab78:	1280000d 	sth	r10,0(r2)
1010ab7c:	003be706 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010ab80:	da802217 	ldw	r10,136(sp)
1010ab84:	50800017 	ldw	r2,0(r10)
1010ab88:	52800104 	addi	r10,r10,4
1010ab8c:	da802215 	stw	r10,136(sp)
1010ab90:	da802317 	ldw	r10,140(sp)
1010ab94:	12800015 	stw	r10,0(r2)
1010ab98:	003be006 	br	10109b1c <__alt_data_end+0xfffe9b1c>
1010ab9c:	a080100c 	andi	r2,r20,64
1010aba0:	da802217 	ldw	r10,136(sp)
1010aba4:	10003026 	beq	r2,zero,1010ac68 <___vfiprintf_internal_r+0x1220>
1010aba8:	5480000b 	ldhu	r18,0(r10)
1010abac:	52800104 	addi	r10,r10,4
1010abb0:	0027883a 	mov	r19,zero
1010abb4:	da802215 	stw	r10,136(sp)
1010abb8:	003d8006 	br	1010a1bc <__alt_data_end+0xfffea1bc>
1010abbc:	80c00007 	ldb	r3,0(r16)
1010abc0:	003c0006 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010abc4:	a080100c 	andi	r2,r20,64
1010abc8:	d8001d85 	stb	zero,118(sp)
1010abcc:	da802217 	ldw	r10,136(sp)
1010abd0:	1000201e 	bne	r2,zero,1010ac54 <___vfiprintf_internal_r+0x120c>
1010abd4:	50800104 	addi	r2,r10,4
1010abd8:	54800017 	ldw	r18,0(r10)
1010abdc:	0027883a 	mov	r19,zero
1010abe0:	483def0e 	bge	r9,zero,1010a3a0 <__alt_data_end+0xfffea3a0>
1010abe4:	94c6b03a 	or	r3,r18,r19
1010abe8:	d8802215 	stw	r2,136(sp)
1010abec:	183d4e1e 	bne	r3,zero,1010a128 <__alt_data_end+0xfffea128>
1010abf0:	0039883a 	mov	fp,zero
1010abf4:	0005883a 	mov	r2,zero
1010abf8:	003e0606 	br	1010a414 <__alt_data_end+0xfffea414>
1010abfc:	d9402117 	ldw	r5,132(sp)
1010ac00:	d9002017 	ldw	r4,128(sp)
1010ac04:	d9801a04 	addi	r6,sp,104
1010ac08:	da402c15 	stw	r9,176(sp)
1010ac0c:	db802a15 	stw	r14,168(sp)
1010ac10:	01099340 	call	10109934 <__sprint_r.part.0>
1010ac14:	da402c17 	ldw	r9,176(sp)
1010ac18:	db802a17 	ldw	r14,168(sp)
1010ac1c:	103ede1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010ac20:	d9401b17 	ldw	r5,108(sp)
1010ac24:	d8801c17 	ldw	r2,112(sp)
1010ac28:	d811883a 	mov	r8,sp
1010ac2c:	29000044 	addi	r4,r5,1
1010ac30:	003e7406 	br	1010a604 <__alt_data_end+0xfffea604>
1010ac34:	00bfffc4 	movi	r2,-1
1010ac38:	003c5806 	br	10109d9c <__alt_data_end+0xfffe9d9c>
1010ac3c:	d811883a 	mov	r8,sp
1010ac40:	003ee806 	br	1010a7e4 <__alt_data_end+0xfffea7e4>
1010ac44:	000b883a 	mov	r5,zero
1010ac48:	01000044 	movi	r4,1
1010ac4c:	d811883a 	mov	r8,sp
1010ac50:	003e7c06 	br	1010a644 <__alt_data_end+0xfffea644>
1010ac54:	50800104 	addi	r2,r10,4
1010ac58:	5480000b 	ldhu	r18,0(r10)
1010ac5c:	0027883a 	mov	r19,zero
1010ac60:	483dcf0e 	bge	r9,zero,1010a3a0 <__alt_data_end+0xfffea3a0>
1010ac64:	003fdf06 	br	1010abe4 <__alt_data_end+0xfffeabe4>
1010ac68:	54800017 	ldw	r18,0(r10)
1010ac6c:	52800104 	addi	r10,r10,4
1010ac70:	0027883a 	mov	r19,zero
1010ac74:	da802215 	stw	r10,136(sp)
1010ac78:	003d5006 	br	1010a1bc <__alt_data_end+0xfffea1bc>
1010ac7c:	50800104 	addi	r2,r10,4
1010ac80:	5480000b 	ldhu	r18,0(r10)
1010ac84:	0027883a 	mov	r19,zero
1010ac88:	483f7d0e 	bge	r9,zero,1010aa80 <__alt_data_end+0xfffeaa80>
1010ac8c:	003ddc06 	br	1010a400 <__alt_data_end+0xfffea400>
1010ac90:	d8c02215 	stw	r3,136(sp)
1010ac94:	0039883a 	mov	fp,zero
1010ac98:	003ddb06 	br	1010a408 <__alt_data_end+0xfffea408>
1010ac9c:	02840474 	movhi	r10,4113
1010aca0:	52846c04 	addi	r10,r10,4528
1010aca4:	da802415 	stw	r10,144(sp)
1010aca8:	003e8306 	br	1010a6b8 <__alt_data_end+0xfffea6b8>
1010acac:	d8801c17 	ldw	r2,112(sp)
1010acb0:	dd002117 	ldw	r20,132(sp)
1010acb4:	103eb926 	beq	r2,zero,1010a79c <__alt_data_end+0xfffea79c>
1010acb8:	d9002017 	ldw	r4,128(sp)
1010acbc:	d9801a04 	addi	r6,sp,104
1010acc0:	a00b883a 	mov	r5,r20
1010acc4:	01099340 	call	10109934 <__sprint_r.part.0>
1010acc8:	003eb406 	br	1010a79c <__alt_data_end+0xfffea79c>
1010accc:	80c00043 	ldbu	r3,1(r16)
1010acd0:	a5000814 	ori	r20,r20,32
1010acd4:	84000044 	addi	r16,r16,1
1010acd8:	18c03fcc 	andi	r3,r3,255
1010acdc:	18c0201c 	xori	r3,r3,128
1010ace0:	18ffe004 	addi	r3,r3,-128
1010ace4:	003bb706 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010ace8:	a809883a 	mov	r4,r21
1010acec:	d8c02a15 	stw	r3,168(sp)
1010acf0:	da002b15 	stw	r8,172(sp)
1010acf4:	010989c0 	call	1010989c <strlen>
1010acf8:	d8c02a17 	ldw	r3,168(sp)
1010acfc:	1027883a 	mov	r19,r2
1010ad00:	df001d83 	ldbu	fp,118(sp)
1010ad04:	d8c02215 	stw	r3,136(sp)
1010ad08:	0013883a 	mov	r9,zero
1010ad0c:	da002b17 	ldw	r8,172(sp)
1010ad10:	003c4d06 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010ad14:	d9402117 	ldw	r5,132(sp)
1010ad18:	d9002017 	ldw	r4,128(sp)
1010ad1c:	d9801a04 	addi	r6,sp,104
1010ad20:	da402c15 	stw	r9,176(sp)
1010ad24:	01099340 	call	10109934 <__sprint_r.part.0>
1010ad28:	da402c17 	ldw	r9,176(sp)
1010ad2c:	103e9a1e 	bne	r2,zero,1010a798 <__alt_data_end+0xfffea798>
1010ad30:	d9401b17 	ldw	r5,108(sp)
1010ad34:	d8801c17 	ldw	r2,112(sp)
1010ad38:	d811883a 	mov	r8,sp
1010ad3c:	29000044 	addi	r4,r5,1
1010ad40:	003e4206 	br	1010a64c <__alt_data_end+0xfffea64c>
1010ad44:	d9401b17 	ldw	r5,108(sp)
1010ad48:	01040474 	movhi	r4,4113
1010ad4c:	21047004 	addi	r4,r4,4544
1010ad50:	d9002415 	stw	r4,144(sp)
1010ad54:	29400044 	addi	r5,r5,1
1010ad58:	003c6d06 	br	10109f10 <__alt_data_end+0xfffe9f10>
1010ad5c:	0039883a 	mov	fp,zero
1010ad60:	00800084 	movi	r2,2
1010ad64:	10803fcc 	andi	r2,r2,255
1010ad68:	01000044 	movi	r4,1
1010ad6c:	11001e26 	beq	r2,r4,1010ade8 <___vfiprintf_internal_r+0x13a0>
1010ad70:	01000084 	movi	r4,2
1010ad74:	11001e1e 	bne	r2,r4,1010adf0 <___vfiprintf_internal_r+0x13a8>
1010ad78:	1829883a 	mov	r20,r3
1010ad7c:	003eea06 	br	1010a928 <__alt_data_end+0xfffea928>
1010ad80:	a007883a 	mov	r3,r20
1010ad84:	00800044 	movi	r2,1
1010ad88:	003ff606 	br	1010ad64 <__alt_data_end+0xfffead64>
1010ad8c:	00800184 	movi	r2,6
1010ad90:	1240012e 	bgeu	r2,r9,1010ad98 <___vfiprintf_internal_r+0x1350>
1010ad94:	1013883a 	mov	r9,r2
1010ad98:	4827883a 	mov	r19,r9
1010ad9c:	4825883a 	mov	r18,r9
1010ada0:	48001516 	blt	r9,zero,1010adf8 <___vfiprintf_internal_r+0x13b0>
1010ada4:	05440474 	movhi	r21,4113
1010ada8:	d8c02215 	stw	r3,136(sp)
1010adac:	ad441104 	addi	r21,r21,4164
1010adb0:	003d1406 	br	1010a204 <__alt_data_end+0xfffea204>
1010adb4:	02840474 	movhi	r10,4113
1010adb8:	52846c04 	addi	r10,r10,4528
1010adbc:	da802415 	stw	r10,144(sp)
1010adc0:	200d883a 	mov	r6,r4
1010adc4:	003c9106 	br	1010a00c <__alt_data_end+0xfffea00c>
1010adc8:	5021883a 	mov	r16,r10
1010adcc:	0013883a 	mov	r9,zero
1010add0:	003b7d06 	br	10109bc8 <__alt_data_end+0xfffe9bc8>
1010add4:	4827883a 	mov	r19,r9
1010add8:	df001d83 	ldbu	fp,118(sp)
1010addc:	d8c02215 	stw	r3,136(sp)
1010ade0:	0013883a 	mov	r9,zero
1010ade4:	003c1806 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010ade8:	1829883a 	mov	r20,r3
1010adec:	003d1806 	br	1010a250 <__alt_data_end+0xfffea250>
1010adf0:	1829883a 	mov	r20,r3
1010adf4:	003ccd06 	br	1010a12c <__alt_data_end+0xfffea12c>
1010adf8:	0025883a 	mov	r18,zero
1010adfc:	003fe906 	br	1010ada4 <__alt_data_end+0xfffeada4>
1010ae00:	d8802217 	ldw	r2,136(sp)
1010ae04:	80c00043 	ldbu	r3,1(r16)
1010ae08:	5021883a 	mov	r16,r10
1010ae0c:	12400017 	ldw	r9,0(r2)
1010ae10:	10800104 	addi	r2,r2,4
1010ae14:	d8802215 	stw	r2,136(sp)
1010ae18:	483faf0e 	bge	r9,zero,1010acd8 <__alt_data_end+0xfffeacd8>
1010ae1c:	18c03fcc 	andi	r3,r3,255
1010ae20:	18c0201c 	xori	r3,r3,128
1010ae24:	027fffc4 	movi	r9,-1
1010ae28:	18ffe004 	addi	r3,r3,-128
1010ae2c:	003b6506 	br	10109bc4 <__alt_data_end+0xfffe9bc4>
1010ae30:	d9c01d85 	stb	r7,118(sp)
1010ae34:	003ca006 	br	1010a0b8 <__alt_data_end+0xfffea0b8>
1010ae38:	d9c01d85 	stb	r7,118(sp)
1010ae3c:	003cad06 	br	1010a0f4 <__alt_data_end+0xfffea0f4>
1010ae40:	d9c01d85 	stb	r7,118(sp)
1010ae44:	003d7d06 	br	1010a43c <__alt_data_end+0xfffea43c>
1010ae48:	d9c01d85 	stb	r7,118(sp)
1010ae4c:	003d5f06 	br	1010a3cc <__alt_data_end+0xfffea3cc>
1010ae50:	a080004c 	andi	r2,r20,1
1010ae54:	0039883a 	mov	fp,zero
1010ae58:	10000526 	beq	r2,zero,1010ae70 <___vfiprintf_internal_r+0x1428>
1010ae5c:	00800c04 	movi	r2,48
1010ae60:	d88019c5 	stb	r2,103(sp)
1010ae64:	dcc02717 	ldw	r19,156(sp)
1010ae68:	dd4019c4 	addi	r21,sp,103
1010ae6c:	003bf606 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010ae70:	0027883a 	mov	r19,zero
1010ae74:	dd401a04 	addi	r21,sp,104
1010ae78:	003bf306 	br	10109e48 <__alt_data_end+0xfffe9e48>
1010ae7c:	d9c01d85 	stb	r7,118(sp)
1010ae80:	003dc806 	br	1010a5a4 <__alt_data_end+0xfffea5a4>
1010ae84:	d9c01d85 	stb	r7,118(sp)
1010ae88:	003d3a06 	br	1010a374 <__alt_data_end+0xfffea374>
1010ae8c:	d9c01d85 	stb	r7,118(sp)
1010ae90:	003d2a06 	br	1010a33c <__alt_data_end+0xfffea33c>
1010ae94:	d9c01d85 	stb	r7,118(sp)
1010ae98:	003cde06 	br	1010a214 <__alt_data_end+0xfffea214>
1010ae9c:	d9c01d85 	stb	r7,118(sp)
1010aea0:	003cbc06 	br	1010a194 <__alt_data_end+0xfffea194>

1010aea4 <__vfiprintf_internal>:
1010aea4:	00840474 	movhi	r2,4113
1010aea8:	108b6d04 	addi	r2,r2,11700
1010aeac:	300f883a 	mov	r7,r6
1010aeb0:	280d883a 	mov	r6,r5
1010aeb4:	200b883a 	mov	r5,r4
1010aeb8:	11000017 	ldw	r4,0(r2)
1010aebc:	0109a481 	jmpi	10109a48 <___vfiprintf_internal_r>

1010aec0 <__sbprintf>:
1010aec0:	2880030b 	ldhu	r2,12(r5)
1010aec4:	2ac01917 	ldw	r11,100(r5)
1010aec8:	2a80038b 	ldhu	r10,14(r5)
1010aecc:	2a400717 	ldw	r9,28(r5)
1010aed0:	2a000917 	ldw	r8,36(r5)
1010aed4:	defee204 	addi	sp,sp,-1144
1010aed8:	00c10004 	movi	r3,1024
1010aedc:	dc011a15 	stw	r16,1128(sp)
1010aee0:	10bfff4c 	andi	r2,r2,65533
1010aee4:	2821883a 	mov	r16,r5
1010aee8:	d8cb883a 	add	r5,sp,r3
1010aeec:	dc811c15 	stw	r18,1136(sp)
1010aef0:	dc411b15 	stw	r17,1132(sp)
1010aef4:	dfc11d15 	stw	ra,1140(sp)
1010aef8:	2025883a 	mov	r18,r4
1010aefc:	d881030d 	sth	r2,1036(sp)
1010af00:	dac11915 	stw	r11,1124(sp)
1010af04:	da81038d 	sth	r10,1038(sp)
1010af08:	da410715 	stw	r9,1052(sp)
1010af0c:	da010915 	stw	r8,1060(sp)
1010af10:	dec10015 	stw	sp,1024(sp)
1010af14:	dec10415 	stw	sp,1040(sp)
1010af18:	d8c10215 	stw	r3,1032(sp)
1010af1c:	d8c10515 	stw	r3,1044(sp)
1010af20:	d8010615 	stw	zero,1048(sp)
1010af24:	0109a480 	call	10109a48 <___vfiprintf_internal_r>
1010af28:	1023883a 	mov	r17,r2
1010af2c:	10000416 	blt	r2,zero,1010af40 <__sbprintf+0x80>
1010af30:	d9410004 	addi	r5,sp,1024
1010af34:	9009883a 	mov	r4,r18
1010af38:	01019a00 	call	101019a0 <_fflush_r>
1010af3c:	10000d1e 	bne	r2,zero,1010af74 <__sbprintf+0xb4>
1010af40:	d881030b 	ldhu	r2,1036(sp)
1010af44:	1080100c 	andi	r2,r2,64
1010af48:	10000326 	beq	r2,zero,1010af58 <__sbprintf+0x98>
1010af4c:	8080030b 	ldhu	r2,12(r16)
1010af50:	10801014 	ori	r2,r2,64
1010af54:	8080030d 	sth	r2,12(r16)
1010af58:	8805883a 	mov	r2,r17
1010af5c:	dfc11d17 	ldw	ra,1140(sp)
1010af60:	dc811c17 	ldw	r18,1136(sp)
1010af64:	dc411b17 	ldw	r17,1132(sp)
1010af68:	dc011a17 	ldw	r16,1128(sp)
1010af6c:	dec11e04 	addi	sp,sp,1144
1010af70:	f800283a 	ret
1010af74:	047fffc4 	movi	r17,-1
1010af78:	003ff106 	br	1010af40 <__alt_data_end+0xfffeaf40>

1010af7c <_calloc_r>:
1010af7c:	298b383a 	mul	r5,r5,r6
1010af80:	defffe04 	addi	sp,sp,-8
1010af84:	dfc00115 	stw	ra,4(sp)
1010af88:	dc000015 	stw	r16,0(sp)
1010af8c:	0102c2c0 	call	10102c2c <_malloc_r>
1010af90:	10002926 	beq	r2,zero,1010b038 <_calloc_r+0xbc>
1010af94:	11bfff17 	ldw	r6,-4(r2)
1010af98:	1021883a 	mov	r16,r2
1010af9c:	00bfff04 	movi	r2,-4
1010afa0:	308c703a 	and	r6,r6,r2
1010afa4:	00c00904 	movi	r3,36
1010afa8:	308d883a 	add	r6,r6,r2
1010afac:	19801636 	bltu	r3,r6,1010b008 <_calloc_r+0x8c>
1010afb0:	008004c4 	movi	r2,19
1010afb4:	11800b2e 	bgeu	r2,r6,1010afe4 <_calloc_r+0x68>
1010afb8:	80000015 	stw	zero,0(r16)
1010afbc:	80000115 	stw	zero,4(r16)
1010afc0:	008006c4 	movi	r2,27
1010afc4:	11801a2e 	bgeu	r2,r6,1010b030 <_calloc_r+0xb4>
1010afc8:	80000215 	stw	zero,8(r16)
1010afcc:	80000315 	stw	zero,12(r16)
1010afd0:	30c0151e 	bne	r6,r3,1010b028 <_calloc_r+0xac>
1010afd4:	80000415 	stw	zero,16(r16)
1010afd8:	80800604 	addi	r2,r16,24
1010afdc:	80000515 	stw	zero,20(r16)
1010afe0:	00000106 	br	1010afe8 <_calloc_r+0x6c>
1010afe4:	8005883a 	mov	r2,r16
1010afe8:	10000015 	stw	zero,0(r2)
1010afec:	10000115 	stw	zero,4(r2)
1010aff0:	10000215 	stw	zero,8(r2)
1010aff4:	8005883a 	mov	r2,r16
1010aff8:	dfc00117 	ldw	ra,4(sp)
1010affc:	dc000017 	ldw	r16,0(sp)
1010b000:	dec00204 	addi	sp,sp,8
1010b004:	f800283a 	ret
1010b008:	000b883a 	mov	r5,zero
1010b00c:	8009883a 	mov	r4,r16
1010b010:	01034380 	call	10103438 <memset>
1010b014:	8005883a 	mov	r2,r16
1010b018:	dfc00117 	ldw	ra,4(sp)
1010b01c:	dc000017 	ldw	r16,0(sp)
1010b020:	dec00204 	addi	sp,sp,8
1010b024:	f800283a 	ret
1010b028:	80800404 	addi	r2,r16,16
1010b02c:	003fee06 	br	1010afe8 <__alt_data_end+0xfffeafe8>
1010b030:	80800204 	addi	r2,r16,8
1010b034:	003fec06 	br	1010afe8 <__alt_data_end+0xfffeafe8>
1010b038:	0005883a 	mov	r2,zero
1010b03c:	003fee06 	br	1010aff8 <__alt_data_end+0xfffeaff8>

1010b040 <__fputwc>:
1010b040:	defff804 	addi	sp,sp,-32
1010b044:	dcc00415 	stw	r19,16(sp)
1010b048:	dc800315 	stw	r18,12(sp)
1010b04c:	dc000115 	stw	r16,4(sp)
1010b050:	dfc00715 	stw	ra,28(sp)
1010b054:	dd400615 	stw	r21,24(sp)
1010b058:	dd000515 	stw	r20,20(sp)
1010b05c:	dc400215 	stw	r17,8(sp)
1010b060:	2027883a 	mov	r19,r4
1010b064:	2825883a 	mov	r18,r5
1010b068:	3021883a 	mov	r16,r6
1010b06c:	0107d500 	call	10107d50 <__locale_mb_cur_max>
1010b070:	00c00044 	movi	r3,1
1010b074:	10c03e26 	beq	r2,r3,1010b170 <__fputwc+0x130>
1010b078:	81c01704 	addi	r7,r16,92
1010b07c:	900d883a 	mov	r6,r18
1010b080:	d80b883a 	mov	r5,sp
1010b084:	9809883a 	mov	r4,r19
1010b088:	010b3a00 	call	1010b3a0 <_wcrtomb_r>
1010b08c:	1029883a 	mov	r20,r2
1010b090:	00bfffc4 	movi	r2,-1
1010b094:	a0802026 	beq	r20,r2,1010b118 <__fputwc+0xd8>
1010b098:	d9400003 	ldbu	r5,0(sp)
1010b09c:	a0001c26 	beq	r20,zero,1010b110 <__fputwc+0xd0>
1010b0a0:	0023883a 	mov	r17,zero
1010b0a4:	05400284 	movi	r21,10
1010b0a8:	00000906 	br	1010b0d0 <__fputwc+0x90>
1010b0ac:	80800017 	ldw	r2,0(r16)
1010b0b0:	11400005 	stb	r5,0(r2)
1010b0b4:	80c00017 	ldw	r3,0(r16)
1010b0b8:	18c00044 	addi	r3,r3,1
1010b0bc:	80c00015 	stw	r3,0(r16)
1010b0c0:	8c400044 	addi	r17,r17,1
1010b0c4:	dc45883a 	add	r2,sp,r17
1010b0c8:	8d00112e 	bgeu	r17,r20,1010b110 <__fputwc+0xd0>
1010b0cc:	11400003 	ldbu	r5,0(r2)
1010b0d0:	80c00217 	ldw	r3,8(r16)
1010b0d4:	18ffffc4 	addi	r3,r3,-1
1010b0d8:	80c00215 	stw	r3,8(r16)
1010b0dc:	183ff30e 	bge	r3,zero,1010b0ac <__alt_data_end+0xfffeb0ac>
1010b0e0:	80800617 	ldw	r2,24(r16)
1010b0e4:	18801916 	blt	r3,r2,1010b14c <__fputwc+0x10c>
1010b0e8:	80800017 	ldw	r2,0(r16)
1010b0ec:	11400005 	stb	r5,0(r2)
1010b0f0:	80800017 	ldw	r2,0(r16)
1010b0f4:	10c00003 	ldbu	r3,0(r2)
1010b0f8:	10800044 	addi	r2,r2,1
1010b0fc:	1d402326 	beq	r3,r21,1010b18c <__fputwc+0x14c>
1010b100:	80800015 	stw	r2,0(r16)
1010b104:	8c400044 	addi	r17,r17,1
1010b108:	dc45883a 	add	r2,sp,r17
1010b10c:	8d3fef36 	bltu	r17,r20,1010b0cc <__alt_data_end+0xfffeb0cc>
1010b110:	9005883a 	mov	r2,r18
1010b114:	00000406 	br	1010b128 <__fputwc+0xe8>
1010b118:	80c0030b 	ldhu	r3,12(r16)
1010b11c:	a005883a 	mov	r2,r20
1010b120:	18c01014 	ori	r3,r3,64
1010b124:	80c0030d 	sth	r3,12(r16)
1010b128:	dfc00717 	ldw	ra,28(sp)
1010b12c:	dd400617 	ldw	r21,24(sp)
1010b130:	dd000517 	ldw	r20,20(sp)
1010b134:	dcc00417 	ldw	r19,16(sp)
1010b138:	dc800317 	ldw	r18,12(sp)
1010b13c:	dc400217 	ldw	r17,8(sp)
1010b140:	dc000117 	ldw	r16,4(sp)
1010b144:	dec00804 	addi	sp,sp,32
1010b148:	f800283a 	ret
1010b14c:	800d883a 	mov	r6,r16
1010b150:	29403fcc 	andi	r5,r5,255
1010b154:	9809883a 	mov	r4,r19
1010b158:	010b2480 	call	1010b248 <__swbuf_r>
1010b15c:	10bfffe0 	cmpeqi	r2,r2,-1
1010b160:	10803fcc 	andi	r2,r2,255
1010b164:	103fd626 	beq	r2,zero,1010b0c0 <__alt_data_end+0xfffeb0c0>
1010b168:	00bfffc4 	movi	r2,-1
1010b16c:	003fee06 	br	1010b128 <__alt_data_end+0xfffeb128>
1010b170:	90ffffc4 	addi	r3,r18,-1
1010b174:	01003f84 	movi	r4,254
1010b178:	20ffbf36 	bltu	r4,r3,1010b078 <__alt_data_end+0xfffeb078>
1010b17c:	900b883a 	mov	r5,r18
1010b180:	dc800005 	stb	r18,0(sp)
1010b184:	1029883a 	mov	r20,r2
1010b188:	003fc506 	br	1010b0a0 <__alt_data_end+0xfffeb0a0>
1010b18c:	800d883a 	mov	r6,r16
1010b190:	a80b883a 	mov	r5,r21
1010b194:	9809883a 	mov	r4,r19
1010b198:	010b2480 	call	1010b248 <__swbuf_r>
1010b19c:	10bfffe0 	cmpeqi	r2,r2,-1
1010b1a0:	003fef06 	br	1010b160 <__alt_data_end+0xfffeb160>

1010b1a4 <_fputwc_r>:
1010b1a4:	3080030b 	ldhu	r2,12(r6)
1010b1a8:	10c8000c 	andi	r3,r2,8192
1010b1ac:	1800051e 	bne	r3,zero,1010b1c4 <_fputwc_r+0x20>
1010b1b0:	30c01917 	ldw	r3,100(r6)
1010b1b4:	10880014 	ori	r2,r2,8192
1010b1b8:	3080030d 	sth	r2,12(r6)
1010b1bc:	18880014 	ori	r2,r3,8192
1010b1c0:	30801915 	stw	r2,100(r6)
1010b1c4:	010b0401 	jmpi	1010b040 <__fputwc>

1010b1c8 <fputwc>:
1010b1c8:	00840474 	movhi	r2,4113
1010b1cc:	defffc04 	addi	sp,sp,-16
1010b1d0:	108b6d04 	addi	r2,r2,11700
1010b1d4:	dc000115 	stw	r16,4(sp)
1010b1d8:	14000017 	ldw	r16,0(r2)
1010b1dc:	dc400215 	stw	r17,8(sp)
1010b1e0:	dfc00315 	stw	ra,12(sp)
1010b1e4:	2023883a 	mov	r17,r4
1010b1e8:	80000226 	beq	r16,zero,1010b1f4 <fputwc+0x2c>
1010b1ec:	80800e17 	ldw	r2,56(r16)
1010b1f0:	10001026 	beq	r2,zero,1010b234 <fputwc+0x6c>
1010b1f4:	2880030b 	ldhu	r2,12(r5)
1010b1f8:	10c8000c 	andi	r3,r2,8192
1010b1fc:	1800051e 	bne	r3,zero,1010b214 <fputwc+0x4c>
1010b200:	28c01917 	ldw	r3,100(r5)
1010b204:	10880014 	ori	r2,r2,8192
1010b208:	2880030d 	sth	r2,12(r5)
1010b20c:	18880014 	ori	r2,r3,8192
1010b210:	28801915 	stw	r2,100(r5)
1010b214:	280d883a 	mov	r6,r5
1010b218:	8009883a 	mov	r4,r16
1010b21c:	880b883a 	mov	r5,r17
1010b220:	dfc00317 	ldw	ra,12(sp)
1010b224:	dc400217 	ldw	r17,8(sp)
1010b228:	dc000117 	ldw	r16,4(sp)
1010b22c:	dec00404 	addi	sp,sp,16
1010b230:	010b0401 	jmpi	1010b040 <__fputwc>
1010b234:	8009883a 	mov	r4,r16
1010b238:	d9400015 	stw	r5,0(sp)
1010b23c:	0101d7c0 	call	10101d7c <__sinit>
1010b240:	d9400017 	ldw	r5,0(sp)
1010b244:	003feb06 	br	1010b1f4 <__alt_data_end+0xfffeb1f4>

1010b248 <__swbuf_r>:
1010b248:	defffb04 	addi	sp,sp,-20
1010b24c:	dcc00315 	stw	r19,12(sp)
1010b250:	dc800215 	stw	r18,8(sp)
1010b254:	dc000015 	stw	r16,0(sp)
1010b258:	dfc00415 	stw	ra,16(sp)
1010b25c:	dc400115 	stw	r17,4(sp)
1010b260:	2025883a 	mov	r18,r4
1010b264:	2827883a 	mov	r19,r5
1010b268:	3021883a 	mov	r16,r6
1010b26c:	20000226 	beq	r4,zero,1010b278 <__swbuf_r+0x30>
1010b270:	20800e17 	ldw	r2,56(r4)
1010b274:	10004226 	beq	r2,zero,1010b380 <__swbuf_r+0x138>
1010b278:	80800617 	ldw	r2,24(r16)
1010b27c:	8100030b 	ldhu	r4,12(r16)
1010b280:	80800215 	stw	r2,8(r16)
1010b284:	2080020c 	andi	r2,r4,8
1010b288:	10003626 	beq	r2,zero,1010b364 <__swbuf_r+0x11c>
1010b28c:	80c00417 	ldw	r3,16(r16)
1010b290:	18003426 	beq	r3,zero,1010b364 <__swbuf_r+0x11c>
1010b294:	2088000c 	andi	r2,r4,8192
1010b298:	9c403fcc 	andi	r17,r19,255
1010b29c:	10001a26 	beq	r2,zero,1010b308 <__swbuf_r+0xc0>
1010b2a0:	80800017 	ldw	r2,0(r16)
1010b2a4:	81000517 	ldw	r4,20(r16)
1010b2a8:	10c7c83a 	sub	r3,r2,r3
1010b2ac:	1900200e 	bge	r3,r4,1010b330 <__swbuf_r+0xe8>
1010b2b0:	18c00044 	addi	r3,r3,1
1010b2b4:	81000217 	ldw	r4,8(r16)
1010b2b8:	11400044 	addi	r5,r2,1
1010b2bc:	81400015 	stw	r5,0(r16)
1010b2c0:	213fffc4 	addi	r4,r4,-1
1010b2c4:	81000215 	stw	r4,8(r16)
1010b2c8:	14c00005 	stb	r19,0(r2)
1010b2cc:	80800517 	ldw	r2,20(r16)
1010b2d0:	10c01e26 	beq	r2,r3,1010b34c <__swbuf_r+0x104>
1010b2d4:	8080030b 	ldhu	r2,12(r16)
1010b2d8:	1080004c 	andi	r2,r2,1
1010b2dc:	10000226 	beq	r2,zero,1010b2e8 <__swbuf_r+0xa0>
1010b2e0:	00800284 	movi	r2,10
1010b2e4:	88801926 	beq	r17,r2,1010b34c <__swbuf_r+0x104>
1010b2e8:	8805883a 	mov	r2,r17
1010b2ec:	dfc00417 	ldw	ra,16(sp)
1010b2f0:	dcc00317 	ldw	r19,12(sp)
1010b2f4:	dc800217 	ldw	r18,8(sp)
1010b2f8:	dc400117 	ldw	r17,4(sp)
1010b2fc:	dc000017 	ldw	r16,0(sp)
1010b300:	dec00504 	addi	sp,sp,20
1010b304:	f800283a 	ret
1010b308:	81401917 	ldw	r5,100(r16)
1010b30c:	00b7ffc4 	movi	r2,-8193
1010b310:	21080014 	ori	r4,r4,8192
1010b314:	2884703a 	and	r2,r5,r2
1010b318:	80801915 	stw	r2,100(r16)
1010b31c:	80800017 	ldw	r2,0(r16)
1010b320:	8100030d 	sth	r4,12(r16)
1010b324:	81000517 	ldw	r4,20(r16)
1010b328:	10c7c83a 	sub	r3,r2,r3
1010b32c:	193fe016 	blt	r3,r4,1010b2b0 <__alt_data_end+0xfffeb2b0>
1010b330:	800b883a 	mov	r5,r16
1010b334:	9009883a 	mov	r4,r18
1010b338:	01019a00 	call	101019a0 <_fflush_r>
1010b33c:	1000071e 	bne	r2,zero,1010b35c <__swbuf_r+0x114>
1010b340:	80800017 	ldw	r2,0(r16)
1010b344:	00c00044 	movi	r3,1
1010b348:	003fda06 	br	1010b2b4 <__alt_data_end+0xfffeb2b4>
1010b34c:	800b883a 	mov	r5,r16
1010b350:	9009883a 	mov	r4,r18
1010b354:	01019a00 	call	101019a0 <_fflush_r>
1010b358:	103fe326 	beq	r2,zero,1010b2e8 <__alt_data_end+0xfffeb2e8>
1010b35c:	00bfffc4 	movi	r2,-1
1010b360:	003fe206 	br	1010b2ec <__alt_data_end+0xfffeb2ec>
1010b364:	800b883a 	mov	r5,r16
1010b368:	9009883a 	mov	r4,r18
1010b36c:	0105cdc0 	call	10105cdc <__swsetup_r>
1010b370:	103ffa1e 	bne	r2,zero,1010b35c <__alt_data_end+0xfffeb35c>
1010b374:	8100030b 	ldhu	r4,12(r16)
1010b378:	80c00417 	ldw	r3,16(r16)
1010b37c:	003fc506 	br	1010b294 <__alt_data_end+0xfffeb294>
1010b380:	0101d7c0 	call	10101d7c <__sinit>
1010b384:	003fbc06 	br	1010b278 <__alt_data_end+0xfffeb278>

1010b388 <__swbuf>:
1010b388:	00840474 	movhi	r2,4113
1010b38c:	108b6d04 	addi	r2,r2,11700
1010b390:	280d883a 	mov	r6,r5
1010b394:	200b883a 	mov	r5,r4
1010b398:	11000017 	ldw	r4,0(r2)
1010b39c:	010b2481 	jmpi	1010b248 <__swbuf_r>

1010b3a0 <_wcrtomb_r>:
1010b3a0:	defff604 	addi	sp,sp,-40
1010b3a4:	00840474 	movhi	r2,4113
1010b3a8:	dc800815 	stw	r18,32(sp)
1010b3ac:	dc400715 	stw	r17,28(sp)
1010b3b0:	dc000615 	stw	r16,24(sp)
1010b3b4:	108b7104 	addi	r2,r2,11716
1010b3b8:	dfc00915 	stw	ra,36(sp)
1010b3bc:	2021883a 	mov	r16,r4
1010b3c0:	3823883a 	mov	r17,r7
1010b3c4:	14800017 	ldw	r18,0(r2)
1010b3c8:	28001426 	beq	r5,zero,1010b41c <_wcrtomb_r+0x7c>
1010b3cc:	d9400415 	stw	r5,16(sp)
1010b3d0:	d9800515 	stw	r6,20(sp)
1010b3d4:	0107d440 	call	10107d44 <__locale_charset>
1010b3d8:	d9800517 	ldw	r6,20(sp)
1010b3dc:	d9400417 	ldw	r5,16(sp)
1010b3e0:	100f883a 	mov	r7,r2
1010b3e4:	dc400015 	stw	r17,0(sp)
1010b3e8:	8009883a 	mov	r4,r16
1010b3ec:	903ee83a 	callr	r18
1010b3f0:	00ffffc4 	movi	r3,-1
1010b3f4:	10c0031e 	bne	r2,r3,1010b404 <_wcrtomb_r+0x64>
1010b3f8:	88000015 	stw	zero,0(r17)
1010b3fc:	00c02284 	movi	r3,138
1010b400:	80c00015 	stw	r3,0(r16)
1010b404:	dfc00917 	ldw	ra,36(sp)
1010b408:	dc800817 	ldw	r18,32(sp)
1010b40c:	dc400717 	ldw	r17,28(sp)
1010b410:	dc000617 	ldw	r16,24(sp)
1010b414:	dec00a04 	addi	sp,sp,40
1010b418:	f800283a 	ret
1010b41c:	0107d440 	call	10107d44 <__locale_charset>
1010b420:	100f883a 	mov	r7,r2
1010b424:	dc400015 	stw	r17,0(sp)
1010b428:	000d883a 	mov	r6,zero
1010b42c:	d9400104 	addi	r5,sp,4
1010b430:	8009883a 	mov	r4,r16
1010b434:	903ee83a 	callr	r18
1010b438:	003fed06 	br	1010b3f0 <__alt_data_end+0xfffeb3f0>

1010b43c <wcrtomb>:
1010b43c:	defff604 	addi	sp,sp,-40
1010b440:	00840474 	movhi	r2,4113
1010b444:	dc800615 	stw	r18,24(sp)
1010b448:	dc400515 	stw	r17,20(sp)
1010b44c:	108b6d04 	addi	r2,r2,11700
1010b450:	dfc00915 	stw	ra,36(sp)
1010b454:	dd000815 	stw	r20,32(sp)
1010b458:	dcc00715 	stw	r19,28(sp)
1010b45c:	dc000415 	stw	r16,16(sp)
1010b460:	3025883a 	mov	r18,r6
1010b464:	14400017 	ldw	r17,0(r2)
1010b468:	20001926 	beq	r4,zero,1010b4d0 <wcrtomb+0x94>
1010b46c:	00840474 	movhi	r2,4113
1010b470:	108b7104 	addi	r2,r2,11716
1010b474:	15000017 	ldw	r20,0(r2)
1010b478:	2021883a 	mov	r16,r4
1010b47c:	2827883a 	mov	r19,r5
1010b480:	0107d440 	call	10107d44 <__locale_charset>
1010b484:	100f883a 	mov	r7,r2
1010b488:	dc800015 	stw	r18,0(sp)
1010b48c:	980d883a 	mov	r6,r19
1010b490:	800b883a 	mov	r5,r16
1010b494:	8809883a 	mov	r4,r17
1010b498:	a03ee83a 	callr	r20
1010b49c:	00ffffc4 	movi	r3,-1
1010b4a0:	10c0031e 	bne	r2,r3,1010b4b0 <wcrtomb+0x74>
1010b4a4:	90000015 	stw	zero,0(r18)
1010b4a8:	00c02284 	movi	r3,138
1010b4ac:	88c00015 	stw	r3,0(r17)
1010b4b0:	dfc00917 	ldw	ra,36(sp)
1010b4b4:	dd000817 	ldw	r20,32(sp)
1010b4b8:	dcc00717 	ldw	r19,28(sp)
1010b4bc:	dc800617 	ldw	r18,24(sp)
1010b4c0:	dc400517 	ldw	r17,20(sp)
1010b4c4:	dc000417 	ldw	r16,16(sp)
1010b4c8:	dec00a04 	addi	sp,sp,40
1010b4cc:	f800283a 	ret
1010b4d0:	00840474 	movhi	r2,4113
1010b4d4:	108b7104 	addi	r2,r2,11716
1010b4d8:	14000017 	ldw	r16,0(r2)
1010b4dc:	0107d440 	call	10107d44 <__locale_charset>
1010b4e0:	100f883a 	mov	r7,r2
1010b4e4:	dc800015 	stw	r18,0(sp)
1010b4e8:	000d883a 	mov	r6,zero
1010b4ec:	d9400104 	addi	r5,sp,4
1010b4f0:	8809883a 	mov	r4,r17
1010b4f4:	803ee83a 	callr	r16
1010b4f8:	003fe806 	br	1010b49c <__alt_data_end+0xfffeb49c>

1010b4fc <__ascii_wctomb>:
1010b4fc:	28000526 	beq	r5,zero,1010b514 <__ascii_wctomb+0x18>
1010b500:	00803fc4 	movi	r2,255
1010b504:	11800536 	bltu	r2,r6,1010b51c <__ascii_wctomb+0x20>
1010b508:	29800005 	stb	r6,0(r5)
1010b50c:	00800044 	movi	r2,1
1010b510:	f800283a 	ret
1010b514:	0005883a 	mov	r2,zero
1010b518:	f800283a 	ret
1010b51c:	00802284 	movi	r2,138
1010b520:	20800015 	stw	r2,0(r4)
1010b524:	00bfffc4 	movi	r2,-1
1010b528:	f800283a 	ret

1010b52c <_wctomb_r>:
1010b52c:	00840474 	movhi	r2,4113
1010b530:	defff904 	addi	sp,sp,-28
1010b534:	108b7104 	addi	r2,r2,11716
1010b538:	dfc00615 	stw	ra,24(sp)
1010b53c:	dc400515 	stw	r17,20(sp)
1010b540:	dc000415 	stw	r16,16(sp)
1010b544:	3823883a 	mov	r17,r7
1010b548:	14000017 	ldw	r16,0(r2)
1010b54c:	d9000115 	stw	r4,4(sp)
1010b550:	d9400215 	stw	r5,8(sp)
1010b554:	d9800315 	stw	r6,12(sp)
1010b558:	0107d440 	call	10107d44 <__locale_charset>
1010b55c:	d9800317 	ldw	r6,12(sp)
1010b560:	d9400217 	ldw	r5,8(sp)
1010b564:	d9000117 	ldw	r4,4(sp)
1010b568:	100f883a 	mov	r7,r2
1010b56c:	dc400015 	stw	r17,0(sp)
1010b570:	803ee83a 	callr	r16
1010b574:	dfc00617 	ldw	ra,24(sp)
1010b578:	dc400517 	ldw	r17,20(sp)
1010b57c:	dc000417 	ldw	r16,16(sp)
1010b580:	dec00704 	addi	sp,sp,28
1010b584:	f800283a 	ret

1010b588 <__udivdi3>:
1010b588:	defff504 	addi	sp,sp,-44
1010b58c:	dcc00415 	stw	r19,16(sp)
1010b590:	dc000115 	stw	r16,4(sp)
1010b594:	dfc00a15 	stw	ra,40(sp)
1010b598:	df000915 	stw	fp,36(sp)
1010b59c:	ddc00815 	stw	r23,32(sp)
1010b5a0:	dd800715 	stw	r22,28(sp)
1010b5a4:	dd400615 	stw	r21,24(sp)
1010b5a8:	dd000515 	stw	r20,20(sp)
1010b5ac:	dc800315 	stw	r18,12(sp)
1010b5b0:	dc400215 	stw	r17,8(sp)
1010b5b4:	2027883a 	mov	r19,r4
1010b5b8:	2821883a 	mov	r16,r5
1010b5bc:	3800411e 	bne	r7,zero,1010b6c4 <__udivdi3+0x13c>
1010b5c0:	3023883a 	mov	r17,r6
1010b5c4:	2025883a 	mov	r18,r4
1010b5c8:	2980522e 	bgeu	r5,r6,1010b714 <__udivdi3+0x18c>
1010b5cc:	00bfffd4 	movui	r2,65535
1010b5d0:	282d883a 	mov	r22,r5
1010b5d4:	1180a836 	bltu	r2,r6,1010b878 <__udivdi3+0x2f0>
1010b5d8:	00803fc4 	movi	r2,255
1010b5dc:	1185803a 	cmpltu	r2,r2,r6
1010b5e0:	100490fa 	slli	r2,r2,3
1010b5e4:	3086d83a 	srl	r3,r6,r2
1010b5e8:	01040474 	movhi	r4,4113
1010b5ec:	21047404 	addi	r4,r4,4560
1010b5f0:	20c7883a 	add	r3,r4,r3
1010b5f4:	18c00003 	ldbu	r3,0(r3)
1010b5f8:	1885883a 	add	r2,r3,r2
1010b5fc:	00c00804 	movi	r3,32
1010b600:	1887c83a 	sub	r3,r3,r2
1010b604:	18000526 	beq	r3,zero,1010b61c <__udivdi3+0x94>
1010b608:	80e0983a 	sll	r16,r16,r3
1010b60c:	9884d83a 	srl	r2,r19,r2
1010b610:	30e2983a 	sll	r17,r6,r3
1010b614:	98e4983a 	sll	r18,r19,r3
1010b618:	142cb03a 	or	r22,r2,r16
1010b61c:	882ad43a 	srli	r21,r17,16
1010b620:	b009883a 	mov	r4,r22
1010b624:	8d3fffcc 	andi	r20,r17,65535
1010b628:	a80b883a 	mov	r5,r21
1010b62c:	01016280 	call	10101628 <__umodsi3>
1010b630:	b009883a 	mov	r4,r22
1010b634:	a80b883a 	mov	r5,r21
1010b638:	1027883a 	mov	r19,r2
1010b63c:	01015c40 	call	101015c4 <__udivsi3>
1010b640:	102d883a 	mov	r22,r2
1010b644:	9826943a 	slli	r19,r19,16
1010b648:	9004d43a 	srli	r2,r18,16
1010b64c:	a5a1383a 	mul	r16,r20,r22
1010b650:	14c4b03a 	or	r2,r2,r19
1010b654:	1400052e 	bgeu	r2,r16,1010b66c <__udivdi3+0xe4>
1010b658:	1445883a 	add	r2,r2,r17
1010b65c:	b0ffffc4 	addi	r3,r22,-1
1010b660:	14400136 	bltu	r2,r17,1010b668 <__udivdi3+0xe0>
1010b664:	14012336 	bltu	r2,r16,1010baf4 <__udivdi3+0x56c>
1010b668:	182d883a 	mov	r22,r3
1010b66c:	1421c83a 	sub	r16,r2,r16
1010b670:	a80b883a 	mov	r5,r21
1010b674:	8009883a 	mov	r4,r16
1010b678:	01016280 	call	10101628 <__umodsi3>
1010b67c:	1027883a 	mov	r19,r2
1010b680:	a80b883a 	mov	r5,r21
1010b684:	8009883a 	mov	r4,r16
1010b688:	01015c40 	call	101015c4 <__udivsi3>
1010b68c:	9826943a 	slli	r19,r19,16
1010b690:	a0a9383a 	mul	r20,r20,r2
1010b694:	94bfffcc 	andi	r18,r18,65535
1010b698:	94e4b03a 	or	r18,r18,r19
1010b69c:	9500052e 	bgeu	r18,r20,1010b6b4 <__udivdi3+0x12c>
1010b6a0:	8ca5883a 	add	r18,r17,r18
1010b6a4:	10ffffc4 	addi	r3,r2,-1
1010b6a8:	9440f136 	bltu	r18,r17,1010ba70 <__udivdi3+0x4e8>
1010b6ac:	9500f02e 	bgeu	r18,r20,1010ba70 <__udivdi3+0x4e8>
1010b6b0:	10bfff84 	addi	r2,r2,-2
1010b6b4:	b00c943a 	slli	r6,r22,16
1010b6b8:	0007883a 	mov	r3,zero
1010b6bc:	3084b03a 	or	r2,r6,r2
1010b6c0:	00005906 	br	1010b828 <__udivdi3+0x2a0>
1010b6c4:	29c05636 	bltu	r5,r7,1010b820 <__udivdi3+0x298>
1010b6c8:	00bfffd4 	movui	r2,65535
1010b6cc:	11c0622e 	bgeu	r2,r7,1010b858 <__udivdi3+0x2d0>
1010b6d0:	00804034 	movhi	r2,256
1010b6d4:	10bfffc4 	addi	r2,r2,-1
1010b6d8:	11c0ee36 	bltu	r2,r7,1010ba94 <__udivdi3+0x50c>
1010b6dc:	00800404 	movi	r2,16
1010b6e0:	3886d83a 	srl	r3,r7,r2
1010b6e4:	01040474 	movhi	r4,4113
1010b6e8:	21047404 	addi	r4,r4,4560
1010b6ec:	20c7883a 	add	r3,r4,r3
1010b6f0:	18c00003 	ldbu	r3,0(r3)
1010b6f4:	05400804 	movi	r21,32
1010b6f8:	1885883a 	add	r2,r3,r2
1010b6fc:	a8abc83a 	sub	r21,r21,r2
1010b700:	a800621e 	bne	r21,zero,1010b88c <__udivdi3+0x304>
1010b704:	3c00e936 	bltu	r7,r16,1010baac <__udivdi3+0x524>
1010b708:	9985403a 	cmpgeu	r2,r19,r6
1010b70c:	0007883a 	mov	r3,zero
1010b710:	00004506 	br	1010b828 <__udivdi3+0x2a0>
1010b714:	3000041e 	bne	r6,zero,1010b728 <__udivdi3+0x1a0>
1010b718:	000b883a 	mov	r5,zero
1010b71c:	01000044 	movi	r4,1
1010b720:	01015c40 	call	101015c4 <__udivsi3>
1010b724:	1023883a 	mov	r17,r2
1010b728:	00bfffd4 	movui	r2,65535
1010b72c:	14404e2e 	bgeu	r2,r17,1010b868 <__udivdi3+0x2e0>
1010b730:	00804034 	movhi	r2,256
1010b734:	10bfffc4 	addi	r2,r2,-1
1010b738:	1440d836 	bltu	r2,r17,1010ba9c <__udivdi3+0x514>
1010b73c:	00800404 	movi	r2,16
1010b740:	8886d83a 	srl	r3,r17,r2
1010b744:	01040474 	movhi	r4,4113
1010b748:	21047404 	addi	r4,r4,4560
1010b74c:	20c7883a 	add	r3,r4,r3
1010b750:	18c00003 	ldbu	r3,0(r3)
1010b754:	1885883a 	add	r2,r3,r2
1010b758:	00c00804 	movi	r3,32
1010b75c:	1887c83a 	sub	r3,r3,r2
1010b760:	18008f1e 	bne	r3,zero,1010b9a0 <__udivdi3+0x418>
1010b764:	882ad43a 	srli	r21,r17,16
1010b768:	8461c83a 	sub	r16,r16,r17
1010b76c:	8d3fffcc 	andi	r20,r17,65535
1010b770:	00c00044 	movi	r3,1
1010b774:	8009883a 	mov	r4,r16
1010b778:	a80b883a 	mov	r5,r21
1010b77c:	d8c00015 	stw	r3,0(sp)
1010b780:	01016280 	call	10101628 <__umodsi3>
1010b784:	8009883a 	mov	r4,r16
1010b788:	a80b883a 	mov	r5,r21
1010b78c:	1027883a 	mov	r19,r2
1010b790:	01015c40 	call	101015c4 <__udivsi3>
1010b794:	9826943a 	slli	r19,r19,16
1010b798:	9008d43a 	srli	r4,r18,16
1010b79c:	1521383a 	mul	r16,r2,r20
1010b7a0:	102d883a 	mov	r22,r2
1010b7a4:	24c8b03a 	or	r4,r4,r19
1010b7a8:	d8c00017 	ldw	r3,0(sp)
1010b7ac:	2400052e 	bgeu	r4,r16,1010b7c4 <__udivdi3+0x23c>
1010b7b0:	2449883a 	add	r4,r4,r17
1010b7b4:	b0bfffc4 	addi	r2,r22,-1
1010b7b8:	24400136 	bltu	r4,r17,1010b7c0 <__udivdi3+0x238>
1010b7bc:	2400ca36 	bltu	r4,r16,1010bae8 <__udivdi3+0x560>
1010b7c0:	102d883a 	mov	r22,r2
1010b7c4:	2421c83a 	sub	r16,r4,r16
1010b7c8:	a80b883a 	mov	r5,r21
1010b7cc:	8009883a 	mov	r4,r16
1010b7d0:	d8c00015 	stw	r3,0(sp)
1010b7d4:	01016280 	call	10101628 <__umodsi3>
1010b7d8:	1027883a 	mov	r19,r2
1010b7dc:	a80b883a 	mov	r5,r21
1010b7e0:	8009883a 	mov	r4,r16
1010b7e4:	01015c40 	call	101015c4 <__udivsi3>
1010b7e8:	9826943a 	slli	r19,r19,16
1010b7ec:	1529383a 	mul	r20,r2,r20
1010b7f0:	94bfffcc 	andi	r18,r18,65535
1010b7f4:	94e4b03a 	or	r18,r18,r19
1010b7f8:	d8c00017 	ldw	r3,0(sp)
1010b7fc:	9500052e 	bgeu	r18,r20,1010b814 <__udivdi3+0x28c>
1010b800:	8ca5883a 	add	r18,r17,r18
1010b804:	113fffc4 	addi	r4,r2,-1
1010b808:	94409736 	bltu	r18,r17,1010ba68 <__udivdi3+0x4e0>
1010b80c:	9500962e 	bgeu	r18,r20,1010ba68 <__udivdi3+0x4e0>
1010b810:	10bfff84 	addi	r2,r2,-2
1010b814:	b00c943a 	slli	r6,r22,16
1010b818:	3084b03a 	or	r2,r6,r2
1010b81c:	00000206 	br	1010b828 <__udivdi3+0x2a0>
1010b820:	0007883a 	mov	r3,zero
1010b824:	0005883a 	mov	r2,zero
1010b828:	dfc00a17 	ldw	ra,40(sp)
1010b82c:	df000917 	ldw	fp,36(sp)
1010b830:	ddc00817 	ldw	r23,32(sp)
1010b834:	dd800717 	ldw	r22,28(sp)
1010b838:	dd400617 	ldw	r21,24(sp)
1010b83c:	dd000517 	ldw	r20,20(sp)
1010b840:	dcc00417 	ldw	r19,16(sp)
1010b844:	dc800317 	ldw	r18,12(sp)
1010b848:	dc400217 	ldw	r17,8(sp)
1010b84c:	dc000117 	ldw	r16,4(sp)
1010b850:	dec00b04 	addi	sp,sp,44
1010b854:	f800283a 	ret
1010b858:	00803fc4 	movi	r2,255
1010b85c:	11c5803a 	cmpltu	r2,r2,r7
1010b860:	100490fa 	slli	r2,r2,3
1010b864:	003f9e06 	br	1010b6e0 <__alt_data_end+0xfffeb6e0>
1010b868:	00803fc4 	movi	r2,255
1010b86c:	1445803a 	cmpltu	r2,r2,r17
1010b870:	100490fa 	slli	r2,r2,3
1010b874:	003fb206 	br	1010b740 <__alt_data_end+0xfffeb740>
1010b878:	00804034 	movhi	r2,256
1010b87c:	10bfffc4 	addi	r2,r2,-1
1010b880:	11808836 	bltu	r2,r6,1010baa4 <__udivdi3+0x51c>
1010b884:	00800404 	movi	r2,16
1010b888:	003f5606 	br	1010b5e4 <__alt_data_end+0xfffeb5e4>
1010b88c:	30aed83a 	srl	r23,r6,r2
1010b890:	3d4e983a 	sll	r7,r7,r21
1010b894:	80acd83a 	srl	r22,r16,r2
1010b898:	9884d83a 	srl	r2,r19,r2
1010b89c:	3deeb03a 	or	r23,r7,r23
1010b8a0:	b824d43a 	srli	r18,r23,16
1010b8a4:	8560983a 	sll	r16,r16,r21
1010b8a8:	b009883a 	mov	r4,r22
1010b8ac:	900b883a 	mov	r5,r18
1010b8b0:	3568983a 	sll	r20,r6,r21
1010b8b4:	1420b03a 	or	r16,r2,r16
1010b8b8:	01016280 	call	10101628 <__umodsi3>
1010b8bc:	b009883a 	mov	r4,r22
1010b8c0:	900b883a 	mov	r5,r18
1010b8c4:	1023883a 	mov	r17,r2
1010b8c8:	01015c40 	call	101015c4 <__udivsi3>
1010b8cc:	8808943a 	slli	r4,r17,16
1010b8d0:	bf3fffcc 	andi	fp,r23,65535
1010b8d4:	8006d43a 	srli	r3,r16,16
1010b8d8:	e0a3383a 	mul	r17,fp,r2
1010b8dc:	100d883a 	mov	r6,r2
1010b8e0:	1906b03a 	or	r3,r3,r4
1010b8e4:	1c40042e 	bgeu	r3,r17,1010b8f8 <__udivdi3+0x370>
1010b8e8:	1dc7883a 	add	r3,r3,r23
1010b8ec:	10bfffc4 	addi	r2,r2,-1
1010b8f0:	1dc0752e 	bgeu	r3,r23,1010bac8 <__udivdi3+0x540>
1010b8f4:	100d883a 	mov	r6,r2
1010b8f8:	1c63c83a 	sub	r17,r3,r17
1010b8fc:	900b883a 	mov	r5,r18
1010b900:	8809883a 	mov	r4,r17
1010b904:	d9800015 	stw	r6,0(sp)
1010b908:	01016280 	call	10101628 <__umodsi3>
1010b90c:	102d883a 	mov	r22,r2
1010b910:	8809883a 	mov	r4,r17
1010b914:	900b883a 	mov	r5,r18
1010b918:	01015c40 	call	101015c4 <__udivsi3>
1010b91c:	b02c943a 	slli	r22,r22,16
1010b920:	e089383a 	mul	r4,fp,r2
1010b924:	843fffcc 	andi	r16,r16,65535
1010b928:	85a0b03a 	or	r16,r16,r22
1010b92c:	d9800017 	ldw	r6,0(sp)
1010b930:	8100042e 	bgeu	r16,r4,1010b944 <__udivdi3+0x3bc>
1010b934:	85e1883a 	add	r16,r16,r23
1010b938:	10ffffc4 	addi	r3,r2,-1
1010b93c:	85c05e2e 	bgeu	r16,r23,1010bab8 <__udivdi3+0x530>
1010b940:	1805883a 	mov	r2,r3
1010b944:	300c943a 	slli	r6,r6,16
1010b948:	a17fffcc 	andi	r5,r20,65535
1010b94c:	a028d43a 	srli	r20,r20,16
1010b950:	3084b03a 	or	r2,r6,r2
1010b954:	10ffffcc 	andi	r3,r2,65535
1010b958:	100cd43a 	srli	r6,r2,16
1010b95c:	194f383a 	mul	r7,r3,r5
1010b960:	1d07383a 	mul	r3,r3,r20
1010b964:	314b383a 	mul	r5,r6,r5
1010b968:	3810d43a 	srli	r8,r7,16
1010b96c:	8121c83a 	sub	r16,r16,r4
1010b970:	1947883a 	add	r3,r3,r5
1010b974:	40c7883a 	add	r3,r8,r3
1010b978:	350d383a 	mul	r6,r6,r20
1010b97c:	1940022e 	bgeu	r3,r5,1010b988 <__udivdi3+0x400>
1010b980:	01000074 	movhi	r4,1
1010b984:	310d883a 	add	r6,r6,r4
1010b988:	1828d43a 	srli	r20,r3,16
1010b98c:	a18d883a 	add	r6,r20,r6
1010b990:	81803e36 	bltu	r16,r6,1010ba8c <__udivdi3+0x504>
1010b994:	81803826 	beq	r16,r6,1010ba78 <__udivdi3+0x4f0>
1010b998:	0007883a 	mov	r3,zero
1010b99c:	003fa206 	br	1010b828 <__alt_data_end+0xfffeb828>
1010b9a0:	88e2983a 	sll	r17,r17,r3
1010b9a4:	80a8d83a 	srl	r20,r16,r2
1010b9a8:	80e0983a 	sll	r16,r16,r3
1010b9ac:	882ad43a 	srli	r21,r17,16
1010b9b0:	9884d83a 	srl	r2,r19,r2
1010b9b4:	a009883a 	mov	r4,r20
1010b9b8:	a80b883a 	mov	r5,r21
1010b9bc:	142eb03a 	or	r23,r2,r16
1010b9c0:	98e4983a 	sll	r18,r19,r3
1010b9c4:	01016280 	call	10101628 <__umodsi3>
1010b9c8:	a009883a 	mov	r4,r20
1010b9cc:	a80b883a 	mov	r5,r21
1010b9d0:	1021883a 	mov	r16,r2
1010b9d4:	01015c40 	call	101015c4 <__udivsi3>
1010b9d8:	1039883a 	mov	fp,r2
1010b9dc:	8d3fffcc 	andi	r20,r17,65535
1010b9e0:	8020943a 	slli	r16,r16,16
1010b9e4:	b804d43a 	srli	r2,r23,16
1010b9e8:	a72d383a 	mul	r22,r20,fp
1010b9ec:	1404b03a 	or	r2,r2,r16
1010b9f0:	1580062e 	bgeu	r2,r22,1010ba0c <__udivdi3+0x484>
1010b9f4:	1445883a 	add	r2,r2,r17
1010b9f8:	e0ffffc4 	addi	r3,fp,-1
1010b9fc:	14403836 	bltu	r2,r17,1010bae0 <__udivdi3+0x558>
1010ba00:	1580372e 	bgeu	r2,r22,1010bae0 <__udivdi3+0x558>
1010ba04:	e73fff84 	addi	fp,fp,-2
1010ba08:	1445883a 	add	r2,r2,r17
1010ba0c:	15adc83a 	sub	r22,r2,r22
1010ba10:	a80b883a 	mov	r5,r21
1010ba14:	b009883a 	mov	r4,r22
1010ba18:	01016280 	call	10101628 <__umodsi3>
1010ba1c:	1027883a 	mov	r19,r2
1010ba20:	b009883a 	mov	r4,r22
1010ba24:	a80b883a 	mov	r5,r21
1010ba28:	01015c40 	call	101015c4 <__udivsi3>
1010ba2c:	9826943a 	slli	r19,r19,16
1010ba30:	a0a1383a 	mul	r16,r20,r2
1010ba34:	b93fffcc 	andi	r4,r23,65535
1010ba38:	24c8b03a 	or	r4,r4,r19
1010ba3c:	2400062e 	bgeu	r4,r16,1010ba58 <__udivdi3+0x4d0>
1010ba40:	2449883a 	add	r4,r4,r17
1010ba44:	10ffffc4 	addi	r3,r2,-1
1010ba48:	24402336 	bltu	r4,r17,1010bad8 <__udivdi3+0x550>
1010ba4c:	2400222e 	bgeu	r4,r16,1010bad8 <__udivdi3+0x550>
1010ba50:	10bfff84 	addi	r2,r2,-2
1010ba54:	2449883a 	add	r4,r4,r17
1010ba58:	e038943a 	slli	fp,fp,16
1010ba5c:	2421c83a 	sub	r16,r4,r16
1010ba60:	e086b03a 	or	r3,fp,r2
1010ba64:	003f4306 	br	1010b774 <__alt_data_end+0xfffeb774>
1010ba68:	2005883a 	mov	r2,r4
1010ba6c:	003f6906 	br	1010b814 <__alt_data_end+0xfffeb814>
1010ba70:	1805883a 	mov	r2,r3
1010ba74:	003f0f06 	br	1010b6b4 <__alt_data_end+0xfffeb6b4>
1010ba78:	1806943a 	slli	r3,r3,16
1010ba7c:	9d66983a 	sll	r19,r19,r21
1010ba80:	39ffffcc 	andi	r7,r7,65535
1010ba84:	19c7883a 	add	r3,r3,r7
1010ba88:	98ffc32e 	bgeu	r19,r3,1010b998 <__alt_data_end+0xfffeb998>
1010ba8c:	10bfffc4 	addi	r2,r2,-1
1010ba90:	003fc106 	br	1010b998 <__alt_data_end+0xfffeb998>
1010ba94:	00800604 	movi	r2,24
1010ba98:	003f1106 	br	1010b6e0 <__alt_data_end+0xfffeb6e0>
1010ba9c:	00800604 	movi	r2,24
1010baa0:	003f2706 	br	1010b740 <__alt_data_end+0xfffeb740>
1010baa4:	00800604 	movi	r2,24
1010baa8:	003ece06 	br	1010b5e4 <__alt_data_end+0xfffeb5e4>
1010baac:	0007883a 	mov	r3,zero
1010bab0:	00800044 	movi	r2,1
1010bab4:	003f5c06 	br	1010b828 <__alt_data_end+0xfffeb828>
1010bab8:	813fa12e 	bgeu	r16,r4,1010b940 <__alt_data_end+0xfffeb940>
1010babc:	10bfff84 	addi	r2,r2,-2
1010bac0:	85e1883a 	add	r16,r16,r23
1010bac4:	003f9f06 	br	1010b944 <__alt_data_end+0xfffeb944>
1010bac8:	1c7f8a2e 	bgeu	r3,r17,1010b8f4 <__alt_data_end+0xfffeb8f4>
1010bacc:	31bfff84 	addi	r6,r6,-2
1010bad0:	1dc7883a 	add	r3,r3,r23
1010bad4:	003f8806 	br	1010b8f8 <__alt_data_end+0xfffeb8f8>
1010bad8:	1805883a 	mov	r2,r3
1010badc:	003fde06 	br	1010ba58 <__alt_data_end+0xfffeba58>
1010bae0:	1839883a 	mov	fp,r3
1010bae4:	003fc906 	br	1010ba0c <__alt_data_end+0xfffeba0c>
1010bae8:	b5bfff84 	addi	r22,r22,-2
1010baec:	2449883a 	add	r4,r4,r17
1010baf0:	003f3406 	br	1010b7c4 <__alt_data_end+0xfffeb7c4>
1010baf4:	b5bfff84 	addi	r22,r22,-2
1010baf8:	1445883a 	add	r2,r2,r17
1010bafc:	003edb06 	br	1010b66c <__alt_data_end+0xfffeb66c>

1010bb00 <__umoddi3>:
1010bb00:	defff404 	addi	sp,sp,-48
1010bb04:	df000a15 	stw	fp,40(sp)
1010bb08:	dc400315 	stw	r17,12(sp)
1010bb0c:	dc000215 	stw	r16,8(sp)
1010bb10:	dfc00b15 	stw	ra,44(sp)
1010bb14:	ddc00915 	stw	r23,36(sp)
1010bb18:	dd800815 	stw	r22,32(sp)
1010bb1c:	dd400715 	stw	r21,28(sp)
1010bb20:	dd000615 	stw	r20,24(sp)
1010bb24:	dcc00515 	stw	r19,20(sp)
1010bb28:	dc800415 	stw	r18,16(sp)
1010bb2c:	2021883a 	mov	r16,r4
1010bb30:	2823883a 	mov	r17,r5
1010bb34:	2839883a 	mov	fp,r5
1010bb38:	38003c1e 	bne	r7,zero,1010bc2c <__umoddi3+0x12c>
1010bb3c:	3027883a 	mov	r19,r6
1010bb40:	2029883a 	mov	r20,r4
1010bb44:	2980512e 	bgeu	r5,r6,1010bc8c <__umoddi3+0x18c>
1010bb48:	00bfffd4 	movui	r2,65535
1010bb4c:	11809a36 	bltu	r2,r6,1010bdb8 <__umoddi3+0x2b8>
1010bb50:	01003fc4 	movi	r4,255
1010bb54:	2189803a 	cmpltu	r4,r4,r6
1010bb58:	200890fa 	slli	r4,r4,3
1010bb5c:	3104d83a 	srl	r2,r6,r4
1010bb60:	00c40474 	movhi	r3,4113
1010bb64:	18c47404 	addi	r3,r3,4560
1010bb68:	1885883a 	add	r2,r3,r2
1010bb6c:	10c00003 	ldbu	r3,0(r2)
1010bb70:	00800804 	movi	r2,32
1010bb74:	1909883a 	add	r4,r3,r4
1010bb78:	1125c83a 	sub	r18,r2,r4
1010bb7c:	90000526 	beq	r18,zero,1010bb94 <__umoddi3+0x94>
1010bb80:	8ca2983a 	sll	r17,r17,r18
1010bb84:	8108d83a 	srl	r4,r16,r4
1010bb88:	34a6983a 	sll	r19,r6,r18
1010bb8c:	84a8983a 	sll	r20,r16,r18
1010bb90:	2478b03a 	or	fp,r4,r17
1010bb94:	982ed43a 	srli	r23,r19,16
1010bb98:	e009883a 	mov	r4,fp
1010bb9c:	9dbfffcc 	andi	r22,r19,65535
1010bba0:	b80b883a 	mov	r5,r23
1010bba4:	01016280 	call	10101628 <__umodsi3>
1010bba8:	e009883a 	mov	r4,fp
1010bbac:	b80b883a 	mov	r5,r23
1010bbb0:	102b883a 	mov	r21,r2
1010bbb4:	01015c40 	call	101015c4 <__udivsi3>
1010bbb8:	a806943a 	slli	r3,r21,16
1010bbbc:	a008d43a 	srli	r4,r20,16
1010bbc0:	b085383a 	mul	r2,r22,r2
1010bbc4:	20c8b03a 	or	r4,r4,r3
1010bbc8:	2080032e 	bgeu	r4,r2,1010bbd8 <__umoddi3+0xd8>
1010bbcc:	24c9883a 	add	r4,r4,r19
1010bbd0:	24c00136 	bltu	r4,r19,1010bbd8 <__umoddi3+0xd8>
1010bbd4:	20811036 	bltu	r4,r2,1010c018 <__umoddi3+0x518>
1010bbd8:	20abc83a 	sub	r21,r4,r2
1010bbdc:	b80b883a 	mov	r5,r23
1010bbe0:	a809883a 	mov	r4,r21
1010bbe4:	01016280 	call	10101628 <__umodsi3>
1010bbe8:	1023883a 	mov	r17,r2
1010bbec:	b80b883a 	mov	r5,r23
1010bbf0:	a809883a 	mov	r4,r21
1010bbf4:	01015c40 	call	101015c4 <__udivsi3>
1010bbf8:	8822943a 	slli	r17,r17,16
1010bbfc:	b085383a 	mul	r2,r22,r2
1010bc00:	a0ffffcc 	andi	r3,r20,65535
1010bc04:	1c46b03a 	or	r3,r3,r17
1010bc08:	1880042e 	bgeu	r3,r2,1010bc1c <__umoddi3+0x11c>
1010bc0c:	1cc7883a 	add	r3,r3,r19
1010bc10:	1cc00236 	bltu	r3,r19,1010bc1c <__umoddi3+0x11c>
1010bc14:	1880012e 	bgeu	r3,r2,1010bc1c <__umoddi3+0x11c>
1010bc18:	1cc7883a 	add	r3,r3,r19
1010bc1c:	1885c83a 	sub	r2,r3,r2
1010bc20:	1484d83a 	srl	r2,r2,r18
1010bc24:	0007883a 	mov	r3,zero
1010bc28:	00004f06 	br	1010bd68 <__umoddi3+0x268>
1010bc2c:	29c04c36 	bltu	r5,r7,1010bd60 <__umoddi3+0x260>
1010bc30:	00bfffd4 	movui	r2,65535
1010bc34:	11c0582e 	bgeu	r2,r7,1010bd98 <__umoddi3+0x298>
1010bc38:	00804034 	movhi	r2,256
1010bc3c:	10bfffc4 	addi	r2,r2,-1
1010bc40:	11c0e736 	bltu	r2,r7,1010bfe0 <__umoddi3+0x4e0>
1010bc44:	01000404 	movi	r4,16
1010bc48:	3904d83a 	srl	r2,r7,r4
1010bc4c:	00c40474 	movhi	r3,4113
1010bc50:	18c47404 	addi	r3,r3,4560
1010bc54:	1885883a 	add	r2,r3,r2
1010bc58:	14c00003 	ldbu	r19,0(r2)
1010bc5c:	00c00804 	movi	r3,32
1010bc60:	9927883a 	add	r19,r19,r4
1010bc64:	1ce9c83a 	sub	r20,r3,r19
1010bc68:	a000581e 	bne	r20,zero,1010bdcc <__umoddi3+0x2cc>
1010bc6c:	3c400136 	bltu	r7,r17,1010bc74 <__umoddi3+0x174>
1010bc70:	8180eb36 	bltu	r16,r6,1010c020 <__umoddi3+0x520>
1010bc74:	8185c83a 	sub	r2,r16,r6
1010bc78:	89e3c83a 	sub	r17,r17,r7
1010bc7c:	8089803a 	cmpltu	r4,r16,r2
1010bc80:	8939c83a 	sub	fp,r17,r4
1010bc84:	e007883a 	mov	r3,fp
1010bc88:	00003706 	br	1010bd68 <__umoddi3+0x268>
1010bc8c:	3000041e 	bne	r6,zero,1010bca0 <__umoddi3+0x1a0>
1010bc90:	000b883a 	mov	r5,zero
1010bc94:	01000044 	movi	r4,1
1010bc98:	01015c40 	call	101015c4 <__udivsi3>
1010bc9c:	1027883a 	mov	r19,r2
1010bca0:	00bfffd4 	movui	r2,65535
1010bca4:	14c0402e 	bgeu	r2,r19,1010bda8 <__umoddi3+0x2a8>
1010bca8:	00804034 	movhi	r2,256
1010bcac:	10bfffc4 	addi	r2,r2,-1
1010bcb0:	14c0cd36 	bltu	r2,r19,1010bfe8 <__umoddi3+0x4e8>
1010bcb4:	00800404 	movi	r2,16
1010bcb8:	9886d83a 	srl	r3,r19,r2
1010bcbc:	01040474 	movhi	r4,4113
1010bcc0:	21047404 	addi	r4,r4,4560
1010bcc4:	20c7883a 	add	r3,r4,r3
1010bcc8:	18c00003 	ldbu	r3,0(r3)
1010bccc:	1887883a 	add	r3,r3,r2
1010bcd0:	00800804 	movi	r2,32
1010bcd4:	10e5c83a 	sub	r18,r2,r3
1010bcd8:	9000901e 	bne	r18,zero,1010bf1c <__umoddi3+0x41c>
1010bcdc:	982cd43a 	srli	r22,r19,16
1010bce0:	8ce3c83a 	sub	r17,r17,r19
1010bce4:	9d7fffcc 	andi	r21,r19,65535
1010bce8:	b00b883a 	mov	r5,r22
1010bcec:	8809883a 	mov	r4,r17
1010bcf0:	01016280 	call	10101628 <__umodsi3>
1010bcf4:	8809883a 	mov	r4,r17
1010bcf8:	b00b883a 	mov	r5,r22
1010bcfc:	1021883a 	mov	r16,r2
1010bd00:	01015c40 	call	101015c4 <__udivsi3>
1010bd04:	8006943a 	slli	r3,r16,16
1010bd08:	a008d43a 	srli	r4,r20,16
1010bd0c:	1545383a 	mul	r2,r2,r21
1010bd10:	20c8b03a 	or	r4,r4,r3
1010bd14:	2080042e 	bgeu	r4,r2,1010bd28 <__umoddi3+0x228>
1010bd18:	24c9883a 	add	r4,r4,r19
1010bd1c:	24c00236 	bltu	r4,r19,1010bd28 <__umoddi3+0x228>
1010bd20:	2080012e 	bgeu	r4,r2,1010bd28 <__umoddi3+0x228>
1010bd24:	24c9883a 	add	r4,r4,r19
1010bd28:	20a1c83a 	sub	r16,r4,r2
1010bd2c:	b00b883a 	mov	r5,r22
1010bd30:	8009883a 	mov	r4,r16
1010bd34:	01016280 	call	10101628 <__umodsi3>
1010bd38:	1023883a 	mov	r17,r2
1010bd3c:	b00b883a 	mov	r5,r22
1010bd40:	8009883a 	mov	r4,r16
1010bd44:	01015c40 	call	101015c4 <__udivsi3>
1010bd48:	8822943a 	slli	r17,r17,16
1010bd4c:	1545383a 	mul	r2,r2,r21
1010bd50:	a53fffcc 	andi	r20,r20,65535
1010bd54:	a446b03a 	or	r3,r20,r17
1010bd58:	18bfb02e 	bgeu	r3,r2,1010bc1c <__alt_data_end+0xfffebc1c>
1010bd5c:	003fab06 	br	1010bc0c <__alt_data_end+0xfffebc0c>
1010bd60:	2005883a 	mov	r2,r4
1010bd64:	2807883a 	mov	r3,r5
1010bd68:	dfc00b17 	ldw	ra,44(sp)
1010bd6c:	df000a17 	ldw	fp,40(sp)
1010bd70:	ddc00917 	ldw	r23,36(sp)
1010bd74:	dd800817 	ldw	r22,32(sp)
1010bd78:	dd400717 	ldw	r21,28(sp)
1010bd7c:	dd000617 	ldw	r20,24(sp)
1010bd80:	dcc00517 	ldw	r19,20(sp)
1010bd84:	dc800417 	ldw	r18,16(sp)
1010bd88:	dc400317 	ldw	r17,12(sp)
1010bd8c:	dc000217 	ldw	r16,8(sp)
1010bd90:	dec00c04 	addi	sp,sp,48
1010bd94:	f800283a 	ret
1010bd98:	04c03fc4 	movi	r19,255
1010bd9c:	99c9803a 	cmpltu	r4,r19,r7
1010bda0:	200890fa 	slli	r4,r4,3
1010bda4:	003fa806 	br	1010bc48 <__alt_data_end+0xfffebc48>
1010bda8:	00803fc4 	movi	r2,255
1010bdac:	14c5803a 	cmpltu	r2,r2,r19
1010bdb0:	100490fa 	slli	r2,r2,3
1010bdb4:	003fc006 	br	1010bcb8 <__alt_data_end+0xfffebcb8>
1010bdb8:	00804034 	movhi	r2,256
1010bdbc:	10bfffc4 	addi	r2,r2,-1
1010bdc0:	11808b36 	bltu	r2,r6,1010bff0 <__umoddi3+0x4f0>
1010bdc4:	01000404 	movi	r4,16
1010bdc8:	003f6406 	br	1010bb5c <__alt_data_end+0xfffebb5c>
1010bdcc:	34c4d83a 	srl	r2,r6,r19
1010bdd0:	3d0e983a 	sll	r7,r7,r20
1010bdd4:	8cf8d83a 	srl	fp,r17,r19
1010bdd8:	8d10983a 	sll	r8,r17,r20
1010bddc:	38aab03a 	or	r21,r7,r2
1010bde0:	a82cd43a 	srli	r22,r21,16
1010bde4:	84e2d83a 	srl	r17,r16,r19
1010bde8:	e009883a 	mov	r4,fp
1010bdec:	b00b883a 	mov	r5,r22
1010bdf0:	8a22b03a 	or	r17,r17,r8
1010bdf4:	3524983a 	sll	r18,r6,r20
1010bdf8:	01016280 	call	10101628 <__umodsi3>
1010bdfc:	e009883a 	mov	r4,fp
1010be00:	b00b883a 	mov	r5,r22
1010be04:	102f883a 	mov	r23,r2
1010be08:	01015c40 	call	101015c4 <__udivsi3>
1010be0c:	100d883a 	mov	r6,r2
1010be10:	b808943a 	slli	r4,r23,16
1010be14:	aa3fffcc 	andi	r8,r21,65535
1010be18:	8804d43a 	srli	r2,r17,16
1010be1c:	41af383a 	mul	r23,r8,r6
1010be20:	8520983a 	sll	r16,r16,r20
1010be24:	1104b03a 	or	r2,r2,r4
1010be28:	15c0042e 	bgeu	r2,r23,1010be3c <__umoddi3+0x33c>
1010be2c:	1545883a 	add	r2,r2,r21
1010be30:	30ffffc4 	addi	r3,r6,-1
1010be34:	1540742e 	bgeu	r2,r21,1010c008 <__umoddi3+0x508>
1010be38:	180d883a 	mov	r6,r3
1010be3c:	15efc83a 	sub	r23,r2,r23
1010be40:	b00b883a 	mov	r5,r22
1010be44:	b809883a 	mov	r4,r23
1010be48:	d9800115 	stw	r6,4(sp)
1010be4c:	da000015 	stw	r8,0(sp)
1010be50:	01016280 	call	10101628 <__umodsi3>
1010be54:	b00b883a 	mov	r5,r22
1010be58:	b809883a 	mov	r4,r23
1010be5c:	1039883a 	mov	fp,r2
1010be60:	01015c40 	call	101015c4 <__udivsi3>
1010be64:	da000017 	ldw	r8,0(sp)
1010be68:	e038943a 	slli	fp,fp,16
1010be6c:	100b883a 	mov	r5,r2
1010be70:	4089383a 	mul	r4,r8,r2
1010be74:	8a3fffcc 	andi	r8,r17,65535
1010be78:	4710b03a 	or	r8,r8,fp
1010be7c:	d9800117 	ldw	r6,4(sp)
1010be80:	4100042e 	bgeu	r8,r4,1010be94 <__umoddi3+0x394>
1010be84:	4551883a 	add	r8,r8,r21
1010be88:	10bfffc4 	addi	r2,r2,-1
1010be8c:	45405a2e 	bgeu	r8,r21,1010bff8 <__umoddi3+0x4f8>
1010be90:	100b883a 	mov	r5,r2
1010be94:	300c943a 	slli	r6,r6,16
1010be98:	91ffffcc 	andi	r7,r18,65535
1010be9c:	9004d43a 	srli	r2,r18,16
1010bea0:	314cb03a 	or	r6,r6,r5
1010bea4:	317fffcc 	andi	r5,r6,65535
1010bea8:	300cd43a 	srli	r6,r6,16
1010beac:	29d3383a 	mul	r9,r5,r7
1010beb0:	288b383a 	mul	r5,r5,r2
1010beb4:	31cf383a 	mul	r7,r6,r7
1010beb8:	4806d43a 	srli	r3,r9,16
1010bebc:	4111c83a 	sub	r8,r8,r4
1010bec0:	29cb883a 	add	r5,r5,r7
1010bec4:	194b883a 	add	r5,r3,r5
1010bec8:	3085383a 	mul	r2,r6,r2
1010becc:	29c0022e 	bgeu	r5,r7,1010bed8 <__umoddi3+0x3d8>
1010bed0:	00c00074 	movhi	r3,1
1010bed4:	10c5883a 	add	r2,r2,r3
1010bed8:	2808d43a 	srli	r4,r5,16
1010bedc:	280a943a 	slli	r5,r5,16
1010bee0:	4a7fffcc 	andi	r9,r9,65535
1010bee4:	2085883a 	add	r2,r4,r2
1010bee8:	2a4b883a 	add	r5,r5,r9
1010beec:	40803636 	bltu	r8,r2,1010bfc8 <__umoddi3+0x4c8>
1010bef0:	40804d26 	beq	r8,r2,1010c028 <__umoddi3+0x528>
1010bef4:	4089c83a 	sub	r4,r8,r2
1010bef8:	280f883a 	mov	r7,r5
1010befc:	81cfc83a 	sub	r7,r16,r7
1010bf00:	81c7803a 	cmpltu	r3,r16,r7
1010bf04:	20c7c83a 	sub	r3,r4,r3
1010bf08:	1cc4983a 	sll	r2,r3,r19
1010bf0c:	3d0ed83a 	srl	r7,r7,r20
1010bf10:	1d06d83a 	srl	r3,r3,r20
1010bf14:	11c4b03a 	or	r2,r2,r7
1010bf18:	003f9306 	br	1010bd68 <__alt_data_end+0xfffebd68>
1010bf1c:	9ca6983a 	sll	r19,r19,r18
1010bf20:	88e8d83a 	srl	r20,r17,r3
1010bf24:	80c4d83a 	srl	r2,r16,r3
1010bf28:	982cd43a 	srli	r22,r19,16
1010bf2c:	8ca2983a 	sll	r17,r17,r18
1010bf30:	a009883a 	mov	r4,r20
1010bf34:	b00b883a 	mov	r5,r22
1010bf38:	1478b03a 	or	fp,r2,r17
1010bf3c:	01016280 	call	10101628 <__umodsi3>
1010bf40:	a009883a 	mov	r4,r20
1010bf44:	b00b883a 	mov	r5,r22
1010bf48:	1023883a 	mov	r17,r2
1010bf4c:	01015c40 	call	101015c4 <__udivsi3>
1010bf50:	9d7fffcc 	andi	r21,r19,65535
1010bf54:	880a943a 	slli	r5,r17,16
1010bf58:	e008d43a 	srli	r4,fp,16
1010bf5c:	a885383a 	mul	r2,r21,r2
1010bf60:	84a8983a 	sll	r20,r16,r18
1010bf64:	2148b03a 	or	r4,r4,r5
1010bf68:	2080042e 	bgeu	r4,r2,1010bf7c <__umoddi3+0x47c>
1010bf6c:	24c9883a 	add	r4,r4,r19
1010bf70:	24c00236 	bltu	r4,r19,1010bf7c <__umoddi3+0x47c>
1010bf74:	2080012e 	bgeu	r4,r2,1010bf7c <__umoddi3+0x47c>
1010bf78:	24c9883a 	add	r4,r4,r19
1010bf7c:	20a3c83a 	sub	r17,r4,r2
1010bf80:	b00b883a 	mov	r5,r22
1010bf84:	8809883a 	mov	r4,r17
1010bf88:	01016280 	call	10101628 <__umodsi3>
1010bf8c:	102f883a 	mov	r23,r2
1010bf90:	8809883a 	mov	r4,r17
1010bf94:	b00b883a 	mov	r5,r22
1010bf98:	01015c40 	call	101015c4 <__udivsi3>
1010bf9c:	b82e943a 	slli	r23,r23,16
1010bfa0:	a885383a 	mul	r2,r21,r2
1010bfa4:	e13fffcc 	andi	r4,fp,65535
1010bfa8:	25c8b03a 	or	r4,r4,r23
1010bfac:	2080042e 	bgeu	r4,r2,1010bfc0 <__umoddi3+0x4c0>
1010bfb0:	24c9883a 	add	r4,r4,r19
1010bfb4:	24c00236 	bltu	r4,r19,1010bfc0 <__umoddi3+0x4c0>
1010bfb8:	2080012e 	bgeu	r4,r2,1010bfc0 <__umoddi3+0x4c0>
1010bfbc:	24c9883a 	add	r4,r4,r19
1010bfc0:	20a3c83a 	sub	r17,r4,r2
1010bfc4:	003f4806 	br	1010bce8 <__alt_data_end+0xfffebce8>
1010bfc8:	2c8fc83a 	sub	r7,r5,r18
1010bfcc:	1545c83a 	sub	r2,r2,r21
1010bfd0:	29cb803a 	cmpltu	r5,r5,r7
1010bfd4:	1145c83a 	sub	r2,r2,r5
1010bfd8:	4089c83a 	sub	r4,r8,r2
1010bfdc:	003fc706 	br	1010befc <__alt_data_end+0xfffebefc>
1010bfe0:	01000604 	movi	r4,24
1010bfe4:	003f1806 	br	1010bc48 <__alt_data_end+0xfffebc48>
1010bfe8:	00800604 	movi	r2,24
1010bfec:	003f3206 	br	1010bcb8 <__alt_data_end+0xfffebcb8>
1010bff0:	01000604 	movi	r4,24
1010bff4:	003ed906 	br	1010bb5c <__alt_data_end+0xfffebb5c>
1010bff8:	413fa52e 	bgeu	r8,r4,1010be90 <__alt_data_end+0xfffebe90>
1010bffc:	297fff84 	addi	r5,r5,-2
1010c000:	4551883a 	add	r8,r8,r21
1010c004:	003fa306 	br	1010be94 <__alt_data_end+0xfffebe94>
1010c008:	15ff8b2e 	bgeu	r2,r23,1010be38 <__alt_data_end+0xfffebe38>
1010c00c:	31bfff84 	addi	r6,r6,-2
1010c010:	1545883a 	add	r2,r2,r21
1010c014:	003f8906 	br	1010be3c <__alt_data_end+0xfffebe3c>
1010c018:	24c9883a 	add	r4,r4,r19
1010c01c:	003eee06 	br	1010bbd8 <__alt_data_end+0xfffebbd8>
1010c020:	8005883a 	mov	r2,r16
1010c024:	003f1706 	br	1010bc84 <__alt_data_end+0xfffebc84>
1010c028:	817fe736 	bltu	r16,r5,1010bfc8 <__alt_data_end+0xfffebfc8>
1010c02c:	280f883a 	mov	r7,r5
1010c030:	0009883a 	mov	r4,zero
1010c034:	003fb106 	br	1010befc <__alt_data_end+0xfffebefc>

1010c038 <__adddf3>:
1010c038:	02c00434 	movhi	r11,16
1010c03c:	5affffc4 	addi	r11,r11,-1
1010c040:	2806d7fa 	srli	r3,r5,31
1010c044:	2ad4703a 	and	r10,r5,r11
1010c048:	3ad2703a 	and	r9,r7,r11
1010c04c:	3804d53a 	srli	r2,r7,20
1010c050:	3018d77a 	srli	r12,r6,29
1010c054:	280ad53a 	srli	r5,r5,20
1010c058:	501490fa 	slli	r10,r10,3
1010c05c:	2010d77a 	srli	r8,r4,29
1010c060:	481290fa 	slli	r9,r9,3
1010c064:	380ed7fa 	srli	r7,r7,31
1010c068:	defffb04 	addi	sp,sp,-20
1010c06c:	dc800215 	stw	r18,8(sp)
1010c070:	dc400115 	stw	r17,4(sp)
1010c074:	dc000015 	stw	r16,0(sp)
1010c078:	dfc00415 	stw	ra,16(sp)
1010c07c:	dcc00315 	stw	r19,12(sp)
1010c080:	1c803fcc 	andi	r18,r3,255
1010c084:	2c01ffcc 	andi	r16,r5,2047
1010c088:	5210b03a 	or	r8,r10,r8
1010c08c:	202290fa 	slli	r17,r4,3
1010c090:	1081ffcc 	andi	r2,r2,2047
1010c094:	4b12b03a 	or	r9,r9,r12
1010c098:	300c90fa 	slli	r6,r6,3
1010c09c:	91c07526 	beq	r18,r7,1010c274 <__adddf3+0x23c>
1010c0a0:	8087c83a 	sub	r3,r16,r2
1010c0a4:	00c0ab0e 	bge	zero,r3,1010c354 <__adddf3+0x31c>
1010c0a8:	10002a1e 	bne	r2,zero,1010c154 <__adddf3+0x11c>
1010c0ac:	4984b03a 	or	r2,r9,r6
1010c0b0:	1000961e 	bne	r2,zero,1010c30c <__adddf3+0x2d4>
1010c0b4:	888001cc 	andi	r2,r17,7
1010c0b8:	10000726 	beq	r2,zero,1010c0d8 <__adddf3+0xa0>
1010c0bc:	888003cc 	andi	r2,r17,15
1010c0c0:	00c00104 	movi	r3,4
1010c0c4:	10c00426 	beq	r2,r3,1010c0d8 <__adddf3+0xa0>
1010c0c8:	88c7883a 	add	r3,r17,r3
1010c0cc:	1c63803a 	cmpltu	r17,r3,r17
1010c0d0:	4451883a 	add	r8,r8,r17
1010c0d4:	1823883a 	mov	r17,r3
1010c0d8:	4080202c 	andhi	r2,r8,128
1010c0dc:	10005926 	beq	r2,zero,1010c244 <__adddf3+0x20c>
1010c0e0:	84000044 	addi	r16,r16,1
1010c0e4:	0081ffc4 	movi	r2,2047
1010c0e8:	8080ba26 	beq	r16,r2,1010c3d4 <__adddf3+0x39c>
1010c0ec:	00bfe034 	movhi	r2,65408
1010c0f0:	10bfffc4 	addi	r2,r2,-1
1010c0f4:	4090703a 	and	r8,r8,r2
1010c0f8:	4004977a 	slli	r2,r8,29
1010c0fc:	4010927a 	slli	r8,r8,9
1010c100:	8822d0fa 	srli	r17,r17,3
1010c104:	8401ffcc 	andi	r16,r16,2047
1010c108:	4010d33a 	srli	r8,r8,12
1010c10c:	9007883a 	mov	r3,r18
1010c110:	1444b03a 	or	r2,r2,r17
1010c114:	8401ffcc 	andi	r16,r16,2047
1010c118:	8020953a 	slli	r16,r16,20
1010c11c:	18c03fcc 	andi	r3,r3,255
1010c120:	01000434 	movhi	r4,16
1010c124:	213fffc4 	addi	r4,r4,-1
1010c128:	180697fa 	slli	r3,r3,31
1010c12c:	4110703a 	and	r8,r8,r4
1010c130:	4410b03a 	or	r8,r8,r16
1010c134:	40c6b03a 	or	r3,r8,r3
1010c138:	dfc00417 	ldw	ra,16(sp)
1010c13c:	dcc00317 	ldw	r19,12(sp)
1010c140:	dc800217 	ldw	r18,8(sp)
1010c144:	dc400117 	ldw	r17,4(sp)
1010c148:	dc000017 	ldw	r16,0(sp)
1010c14c:	dec00504 	addi	sp,sp,20
1010c150:	f800283a 	ret
1010c154:	0081ffc4 	movi	r2,2047
1010c158:	80bfd626 	beq	r16,r2,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c15c:	4a402034 	orhi	r9,r9,128
1010c160:	00800e04 	movi	r2,56
1010c164:	10c09f16 	blt	r2,r3,1010c3e4 <__adddf3+0x3ac>
1010c168:	008007c4 	movi	r2,31
1010c16c:	10c0c216 	blt	r2,r3,1010c478 <__adddf3+0x440>
1010c170:	00800804 	movi	r2,32
1010c174:	10c5c83a 	sub	r2,r2,r3
1010c178:	488a983a 	sll	r5,r9,r2
1010c17c:	30c8d83a 	srl	r4,r6,r3
1010c180:	3084983a 	sll	r2,r6,r2
1010c184:	48c6d83a 	srl	r3,r9,r3
1010c188:	290cb03a 	or	r6,r5,r4
1010c18c:	1004c03a 	cmpne	r2,r2,zero
1010c190:	308cb03a 	or	r6,r6,r2
1010c194:	898dc83a 	sub	r6,r17,r6
1010c198:	89a3803a 	cmpltu	r17,r17,r6
1010c19c:	40d1c83a 	sub	r8,r8,r3
1010c1a0:	4451c83a 	sub	r8,r8,r17
1010c1a4:	3023883a 	mov	r17,r6
1010c1a8:	4080202c 	andhi	r2,r8,128
1010c1ac:	10002326 	beq	r2,zero,1010c23c <__adddf3+0x204>
1010c1b0:	04c02034 	movhi	r19,128
1010c1b4:	9cffffc4 	addi	r19,r19,-1
1010c1b8:	44e6703a 	and	r19,r8,r19
1010c1bc:	98007626 	beq	r19,zero,1010c398 <__adddf3+0x360>
1010c1c0:	9809883a 	mov	r4,r19
1010c1c4:	010e63c0 	call	1010e63c <__clzsi2>
1010c1c8:	10fffe04 	addi	r3,r2,-8
1010c1cc:	010007c4 	movi	r4,31
1010c1d0:	20c07716 	blt	r4,r3,1010c3b0 <__adddf3+0x378>
1010c1d4:	00800804 	movi	r2,32
1010c1d8:	10c5c83a 	sub	r2,r2,r3
1010c1dc:	8884d83a 	srl	r2,r17,r2
1010c1e0:	98d0983a 	sll	r8,r19,r3
1010c1e4:	88e2983a 	sll	r17,r17,r3
1010c1e8:	1204b03a 	or	r2,r2,r8
1010c1ec:	1c007416 	blt	r3,r16,1010c3c0 <__adddf3+0x388>
1010c1f0:	1c21c83a 	sub	r16,r3,r16
1010c1f4:	82000044 	addi	r8,r16,1
1010c1f8:	00c007c4 	movi	r3,31
1010c1fc:	1a009116 	blt	r3,r8,1010c444 <__adddf3+0x40c>
1010c200:	00c00804 	movi	r3,32
1010c204:	1a07c83a 	sub	r3,r3,r8
1010c208:	8a08d83a 	srl	r4,r17,r8
1010c20c:	88e2983a 	sll	r17,r17,r3
1010c210:	10c6983a 	sll	r3,r2,r3
1010c214:	1210d83a 	srl	r8,r2,r8
1010c218:	8804c03a 	cmpne	r2,r17,zero
1010c21c:	1906b03a 	or	r3,r3,r4
1010c220:	18a2b03a 	or	r17,r3,r2
1010c224:	0021883a 	mov	r16,zero
1010c228:	003fa206 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c22c:	1890b03a 	or	r8,r3,r2
1010c230:	40017d26 	beq	r8,zero,1010c828 <__adddf3+0x7f0>
1010c234:	1011883a 	mov	r8,r2
1010c238:	1823883a 	mov	r17,r3
1010c23c:	888001cc 	andi	r2,r17,7
1010c240:	103f9e1e 	bne	r2,zero,1010c0bc <__alt_data_end+0xfffec0bc>
1010c244:	4004977a 	slli	r2,r8,29
1010c248:	8822d0fa 	srli	r17,r17,3
1010c24c:	4010d0fa 	srli	r8,r8,3
1010c250:	9007883a 	mov	r3,r18
1010c254:	1444b03a 	or	r2,r2,r17
1010c258:	0101ffc4 	movi	r4,2047
1010c25c:	81002426 	beq	r16,r4,1010c2f0 <__adddf3+0x2b8>
1010c260:	8120703a 	and	r16,r16,r4
1010c264:	01000434 	movhi	r4,16
1010c268:	213fffc4 	addi	r4,r4,-1
1010c26c:	4110703a 	and	r8,r8,r4
1010c270:	003fa806 	br	1010c114 <__alt_data_end+0xfffec114>
1010c274:	8089c83a 	sub	r4,r16,r2
1010c278:	01005e0e 	bge	zero,r4,1010c3f4 <__adddf3+0x3bc>
1010c27c:	10002b26 	beq	r2,zero,1010c32c <__adddf3+0x2f4>
1010c280:	0081ffc4 	movi	r2,2047
1010c284:	80bf8b26 	beq	r16,r2,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c288:	4a402034 	orhi	r9,r9,128
1010c28c:	00800e04 	movi	r2,56
1010c290:	1100a40e 	bge	r2,r4,1010c524 <__adddf3+0x4ec>
1010c294:	498cb03a 	or	r6,r9,r6
1010c298:	300ac03a 	cmpne	r5,r6,zero
1010c29c:	0013883a 	mov	r9,zero
1010c2a0:	2c4b883a 	add	r5,r5,r17
1010c2a4:	2c63803a 	cmpltu	r17,r5,r17
1010c2a8:	4a11883a 	add	r8,r9,r8
1010c2ac:	8a11883a 	add	r8,r17,r8
1010c2b0:	2823883a 	mov	r17,r5
1010c2b4:	4080202c 	andhi	r2,r8,128
1010c2b8:	103fe026 	beq	r2,zero,1010c23c <__alt_data_end+0xfffec23c>
1010c2bc:	84000044 	addi	r16,r16,1
1010c2c0:	0081ffc4 	movi	r2,2047
1010c2c4:	8080d226 	beq	r16,r2,1010c610 <__adddf3+0x5d8>
1010c2c8:	00bfe034 	movhi	r2,65408
1010c2cc:	10bfffc4 	addi	r2,r2,-1
1010c2d0:	4090703a 	and	r8,r8,r2
1010c2d4:	880ad07a 	srli	r5,r17,1
1010c2d8:	400897fa 	slli	r4,r8,31
1010c2dc:	88c0004c 	andi	r3,r17,1
1010c2e0:	28e2b03a 	or	r17,r5,r3
1010c2e4:	4010d07a 	srli	r8,r8,1
1010c2e8:	2462b03a 	or	r17,r4,r17
1010c2ec:	003f7106 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c2f0:	4088b03a 	or	r4,r8,r2
1010c2f4:	20014526 	beq	r4,zero,1010c80c <__adddf3+0x7d4>
1010c2f8:	01000434 	movhi	r4,16
1010c2fc:	42000234 	orhi	r8,r8,8
1010c300:	213fffc4 	addi	r4,r4,-1
1010c304:	4110703a 	and	r8,r8,r4
1010c308:	003f8206 	br	1010c114 <__alt_data_end+0xfffec114>
1010c30c:	18ffffc4 	addi	r3,r3,-1
1010c310:	1800491e 	bne	r3,zero,1010c438 <__adddf3+0x400>
1010c314:	898bc83a 	sub	r5,r17,r6
1010c318:	8963803a 	cmpltu	r17,r17,r5
1010c31c:	4251c83a 	sub	r8,r8,r9
1010c320:	4451c83a 	sub	r8,r8,r17
1010c324:	2823883a 	mov	r17,r5
1010c328:	003f9f06 	br	1010c1a8 <__alt_data_end+0xfffec1a8>
1010c32c:	4984b03a 	or	r2,r9,r6
1010c330:	103f6026 	beq	r2,zero,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c334:	213fffc4 	addi	r4,r4,-1
1010c338:	2000931e 	bne	r4,zero,1010c588 <__adddf3+0x550>
1010c33c:	898d883a 	add	r6,r17,r6
1010c340:	3463803a 	cmpltu	r17,r6,r17
1010c344:	4251883a 	add	r8,r8,r9
1010c348:	8a11883a 	add	r8,r17,r8
1010c34c:	3023883a 	mov	r17,r6
1010c350:	003fd806 	br	1010c2b4 <__alt_data_end+0xfffec2b4>
1010c354:	1800541e 	bne	r3,zero,1010c4a8 <__adddf3+0x470>
1010c358:	80800044 	addi	r2,r16,1
1010c35c:	1081ffcc 	andi	r2,r2,2047
1010c360:	00c00044 	movi	r3,1
1010c364:	1880a00e 	bge	r3,r2,1010c5e8 <__adddf3+0x5b0>
1010c368:	8989c83a 	sub	r4,r17,r6
1010c36c:	8905803a 	cmpltu	r2,r17,r4
1010c370:	4267c83a 	sub	r19,r8,r9
1010c374:	98a7c83a 	sub	r19,r19,r2
1010c378:	9880202c 	andhi	r2,r19,128
1010c37c:	10006326 	beq	r2,zero,1010c50c <__adddf3+0x4d4>
1010c380:	3463c83a 	sub	r17,r6,r17
1010c384:	4a07c83a 	sub	r3,r9,r8
1010c388:	344d803a 	cmpltu	r6,r6,r17
1010c38c:	19a7c83a 	sub	r19,r3,r6
1010c390:	3825883a 	mov	r18,r7
1010c394:	983f8a1e 	bne	r19,zero,1010c1c0 <__alt_data_end+0xfffec1c0>
1010c398:	8809883a 	mov	r4,r17
1010c39c:	010e63c0 	call	1010e63c <__clzsi2>
1010c3a0:	10800804 	addi	r2,r2,32
1010c3a4:	10fffe04 	addi	r3,r2,-8
1010c3a8:	010007c4 	movi	r4,31
1010c3ac:	20ff890e 	bge	r4,r3,1010c1d4 <__alt_data_end+0xfffec1d4>
1010c3b0:	10bff604 	addi	r2,r2,-40
1010c3b4:	8884983a 	sll	r2,r17,r2
1010c3b8:	0023883a 	mov	r17,zero
1010c3bc:	1c3f8c0e 	bge	r3,r16,1010c1f0 <__alt_data_end+0xfffec1f0>
1010c3c0:	023fe034 	movhi	r8,65408
1010c3c4:	423fffc4 	addi	r8,r8,-1
1010c3c8:	80e1c83a 	sub	r16,r16,r3
1010c3cc:	1210703a 	and	r8,r2,r8
1010c3d0:	003f3806 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c3d4:	9007883a 	mov	r3,r18
1010c3d8:	0011883a 	mov	r8,zero
1010c3dc:	0005883a 	mov	r2,zero
1010c3e0:	003f4c06 	br	1010c114 <__alt_data_end+0xfffec114>
1010c3e4:	498cb03a 	or	r6,r9,r6
1010c3e8:	300cc03a 	cmpne	r6,r6,zero
1010c3ec:	0007883a 	mov	r3,zero
1010c3f0:	003f6806 	br	1010c194 <__alt_data_end+0xfffec194>
1010c3f4:	20009c1e 	bne	r4,zero,1010c668 <__adddf3+0x630>
1010c3f8:	80800044 	addi	r2,r16,1
1010c3fc:	1141ffcc 	andi	r5,r2,2047
1010c400:	01000044 	movi	r4,1
1010c404:	2140670e 	bge	r4,r5,1010c5a4 <__adddf3+0x56c>
1010c408:	0101ffc4 	movi	r4,2047
1010c40c:	11007f26 	beq	r2,r4,1010c60c <__adddf3+0x5d4>
1010c410:	898d883a 	add	r6,r17,r6
1010c414:	4247883a 	add	r3,r8,r9
1010c418:	3451803a 	cmpltu	r8,r6,r17
1010c41c:	40d1883a 	add	r8,r8,r3
1010c420:	402297fa 	slli	r17,r8,31
1010c424:	300cd07a 	srli	r6,r6,1
1010c428:	4010d07a 	srli	r8,r8,1
1010c42c:	1021883a 	mov	r16,r2
1010c430:	89a2b03a 	or	r17,r17,r6
1010c434:	003f1f06 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c438:	0081ffc4 	movi	r2,2047
1010c43c:	80bf481e 	bne	r16,r2,1010c160 <__alt_data_end+0xfffec160>
1010c440:	003f1c06 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c444:	843ff844 	addi	r16,r16,-31
1010c448:	01000804 	movi	r4,32
1010c44c:	1406d83a 	srl	r3,r2,r16
1010c450:	41005026 	beq	r8,r4,1010c594 <__adddf3+0x55c>
1010c454:	01001004 	movi	r4,64
1010c458:	2211c83a 	sub	r8,r4,r8
1010c45c:	1204983a 	sll	r2,r2,r8
1010c460:	88a2b03a 	or	r17,r17,r2
1010c464:	8822c03a 	cmpne	r17,r17,zero
1010c468:	1c62b03a 	or	r17,r3,r17
1010c46c:	0011883a 	mov	r8,zero
1010c470:	0021883a 	mov	r16,zero
1010c474:	003f7106 	br	1010c23c <__alt_data_end+0xfffec23c>
1010c478:	193ff804 	addi	r4,r3,-32
1010c47c:	00800804 	movi	r2,32
1010c480:	4908d83a 	srl	r4,r9,r4
1010c484:	18804526 	beq	r3,r2,1010c59c <__adddf3+0x564>
1010c488:	00801004 	movi	r2,64
1010c48c:	10c5c83a 	sub	r2,r2,r3
1010c490:	4886983a 	sll	r3,r9,r2
1010c494:	198cb03a 	or	r6,r3,r6
1010c498:	300cc03a 	cmpne	r6,r6,zero
1010c49c:	218cb03a 	or	r6,r4,r6
1010c4a0:	0007883a 	mov	r3,zero
1010c4a4:	003f3b06 	br	1010c194 <__alt_data_end+0xfffec194>
1010c4a8:	80002a26 	beq	r16,zero,1010c554 <__adddf3+0x51c>
1010c4ac:	0101ffc4 	movi	r4,2047
1010c4b0:	11006826 	beq	r2,r4,1010c654 <__adddf3+0x61c>
1010c4b4:	00c7c83a 	sub	r3,zero,r3
1010c4b8:	42002034 	orhi	r8,r8,128
1010c4bc:	01000e04 	movi	r4,56
1010c4c0:	20c07c16 	blt	r4,r3,1010c6b4 <__adddf3+0x67c>
1010c4c4:	010007c4 	movi	r4,31
1010c4c8:	20c0da16 	blt	r4,r3,1010c834 <__adddf3+0x7fc>
1010c4cc:	01000804 	movi	r4,32
1010c4d0:	20c9c83a 	sub	r4,r4,r3
1010c4d4:	4114983a 	sll	r10,r8,r4
1010c4d8:	88cad83a 	srl	r5,r17,r3
1010c4dc:	8908983a 	sll	r4,r17,r4
1010c4e0:	40c6d83a 	srl	r3,r8,r3
1010c4e4:	5162b03a 	or	r17,r10,r5
1010c4e8:	2008c03a 	cmpne	r4,r4,zero
1010c4ec:	8922b03a 	or	r17,r17,r4
1010c4f0:	3463c83a 	sub	r17,r6,r17
1010c4f4:	48c7c83a 	sub	r3,r9,r3
1010c4f8:	344d803a 	cmpltu	r6,r6,r17
1010c4fc:	1991c83a 	sub	r8,r3,r6
1010c500:	1021883a 	mov	r16,r2
1010c504:	3825883a 	mov	r18,r7
1010c508:	003f2706 	br	1010c1a8 <__alt_data_end+0xfffec1a8>
1010c50c:	24d0b03a 	or	r8,r4,r19
1010c510:	40001b1e 	bne	r8,zero,1010c580 <__adddf3+0x548>
1010c514:	0005883a 	mov	r2,zero
1010c518:	0007883a 	mov	r3,zero
1010c51c:	0021883a 	mov	r16,zero
1010c520:	003f4d06 	br	1010c258 <__alt_data_end+0xfffec258>
1010c524:	008007c4 	movi	r2,31
1010c528:	11003c16 	blt	r2,r4,1010c61c <__adddf3+0x5e4>
1010c52c:	00800804 	movi	r2,32
1010c530:	1105c83a 	sub	r2,r2,r4
1010c534:	488e983a 	sll	r7,r9,r2
1010c538:	310ad83a 	srl	r5,r6,r4
1010c53c:	3084983a 	sll	r2,r6,r2
1010c540:	4912d83a 	srl	r9,r9,r4
1010c544:	394ab03a 	or	r5,r7,r5
1010c548:	1004c03a 	cmpne	r2,r2,zero
1010c54c:	288ab03a 	or	r5,r5,r2
1010c550:	003f5306 	br	1010c2a0 <__alt_data_end+0xfffec2a0>
1010c554:	4448b03a 	or	r4,r8,r17
1010c558:	20003e26 	beq	r4,zero,1010c654 <__adddf3+0x61c>
1010c55c:	00c6303a 	nor	r3,zero,r3
1010c560:	18003a1e 	bne	r3,zero,1010c64c <__adddf3+0x614>
1010c564:	3463c83a 	sub	r17,r6,r17
1010c568:	4a07c83a 	sub	r3,r9,r8
1010c56c:	344d803a 	cmpltu	r6,r6,r17
1010c570:	1991c83a 	sub	r8,r3,r6
1010c574:	1021883a 	mov	r16,r2
1010c578:	3825883a 	mov	r18,r7
1010c57c:	003f0a06 	br	1010c1a8 <__alt_data_end+0xfffec1a8>
1010c580:	2023883a 	mov	r17,r4
1010c584:	003f0d06 	br	1010c1bc <__alt_data_end+0xfffec1bc>
1010c588:	0081ffc4 	movi	r2,2047
1010c58c:	80bf3f1e 	bne	r16,r2,1010c28c <__alt_data_end+0xfffec28c>
1010c590:	003ec806 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c594:	0005883a 	mov	r2,zero
1010c598:	003fb106 	br	1010c460 <__alt_data_end+0xfffec460>
1010c59c:	0007883a 	mov	r3,zero
1010c5a0:	003fbc06 	br	1010c494 <__alt_data_end+0xfffec494>
1010c5a4:	4444b03a 	or	r2,r8,r17
1010c5a8:	8000871e 	bne	r16,zero,1010c7c8 <__adddf3+0x790>
1010c5ac:	1000ba26 	beq	r2,zero,1010c898 <__adddf3+0x860>
1010c5b0:	4984b03a 	or	r2,r9,r6
1010c5b4:	103ebf26 	beq	r2,zero,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c5b8:	8985883a 	add	r2,r17,r6
1010c5bc:	4247883a 	add	r3,r8,r9
1010c5c0:	1451803a 	cmpltu	r8,r2,r17
1010c5c4:	40d1883a 	add	r8,r8,r3
1010c5c8:	40c0202c 	andhi	r3,r8,128
1010c5cc:	1023883a 	mov	r17,r2
1010c5d0:	183f1a26 	beq	r3,zero,1010c23c <__alt_data_end+0xfffec23c>
1010c5d4:	00bfe034 	movhi	r2,65408
1010c5d8:	10bfffc4 	addi	r2,r2,-1
1010c5dc:	2021883a 	mov	r16,r4
1010c5e0:	4090703a 	and	r8,r8,r2
1010c5e4:	003eb306 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c5e8:	4444b03a 	or	r2,r8,r17
1010c5ec:	8000291e 	bne	r16,zero,1010c694 <__adddf3+0x65c>
1010c5f0:	10004b1e 	bne	r2,zero,1010c720 <__adddf3+0x6e8>
1010c5f4:	4990b03a 	or	r8,r9,r6
1010c5f8:	40008b26 	beq	r8,zero,1010c828 <__adddf3+0x7f0>
1010c5fc:	4811883a 	mov	r8,r9
1010c600:	3023883a 	mov	r17,r6
1010c604:	3825883a 	mov	r18,r7
1010c608:	003eaa06 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c60c:	1021883a 	mov	r16,r2
1010c610:	0011883a 	mov	r8,zero
1010c614:	0005883a 	mov	r2,zero
1010c618:	003f0f06 	br	1010c258 <__alt_data_end+0xfffec258>
1010c61c:	217ff804 	addi	r5,r4,-32
1010c620:	00800804 	movi	r2,32
1010c624:	494ad83a 	srl	r5,r9,r5
1010c628:	20807d26 	beq	r4,r2,1010c820 <__adddf3+0x7e8>
1010c62c:	00801004 	movi	r2,64
1010c630:	1109c83a 	sub	r4,r2,r4
1010c634:	4912983a 	sll	r9,r9,r4
1010c638:	498cb03a 	or	r6,r9,r6
1010c63c:	300cc03a 	cmpne	r6,r6,zero
1010c640:	298ab03a 	or	r5,r5,r6
1010c644:	0013883a 	mov	r9,zero
1010c648:	003f1506 	br	1010c2a0 <__alt_data_end+0xfffec2a0>
1010c64c:	0101ffc4 	movi	r4,2047
1010c650:	113f9a1e 	bne	r2,r4,1010c4bc <__alt_data_end+0xfffec4bc>
1010c654:	4811883a 	mov	r8,r9
1010c658:	3023883a 	mov	r17,r6
1010c65c:	1021883a 	mov	r16,r2
1010c660:	3825883a 	mov	r18,r7
1010c664:	003e9306 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c668:	8000161e 	bne	r16,zero,1010c6c4 <__adddf3+0x68c>
1010c66c:	444ab03a 	or	r5,r8,r17
1010c670:	28005126 	beq	r5,zero,1010c7b8 <__adddf3+0x780>
1010c674:	0108303a 	nor	r4,zero,r4
1010c678:	20004d1e 	bne	r4,zero,1010c7b0 <__adddf3+0x778>
1010c67c:	89a3883a 	add	r17,r17,r6
1010c680:	4253883a 	add	r9,r8,r9
1010c684:	898d803a 	cmpltu	r6,r17,r6
1010c688:	3251883a 	add	r8,r6,r9
1010c68c:	1021883a 	mov	r16,r2
1010c690:	003f0806 	br	1010c2b4 <__alt_data_end+0xfffec2b4>
1010c694:	1000301e 	bne	r2,zero,1010c758 <__adddf3+0x720>
1010c698:	4984b03a 	or	r2,r9,r6
1010c69c:	10007126 	beq	r2,zero,1010c864 <__adddf3+0x82c>
1010c6a0:	4811883a 	mov	r8,r9
1010c6a4:	3023883a 	mov	r17,r6
1010c6a8:	3825883a 	mov	r18,r7
1010c6ac:	0401ffc4 	movi	r16,2047
1010c6b0:	003e8006 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c6b4:	4462b03a 	or	r17,r8,r17
1010c6b8:	8822c03a 	cmpne	r17,r17,zero
1010c6bc:	0007883a 	mov	r3,zero
1010c6c0:	003f8b06 	br	1010c4f0 <__alt_data_end+0xfffec4f0>
1010c6c4:	0141ffc4 	movi	r5,2047
1010c6c8:	11403b26 	beq	r2,r5,1010c7b8 <__adddf3+0x780>
1010c6cc:	0109c83a 	sub	r4,zero,r4
1010c6d0:	42002034 	orhi	r8,r8,128
1010c6d4:	01400e04 	movi	r5,56
1010c6d8:	29006716 	blt	r5,r4,1010c878 <__adddf3+0x840>
1010c6dc:	014007c4 	movi	r5,31
1010c6e0:	29007016 	blt	r5,r4,1010c8a4 <__adddf3+0x86c>
1010c6e4:	01400804 	movi	r5,32
1010c6e8:	290bc83a 	sub	r5,r5,r4
1010c6ec:	4154983a 	sll	r10,r8,r5
1010c6f0:	890ed83a 	srl	r7,r17,r4
1010c6f4:	894a983a 	sll	r5,r17,r5
1010c6f8:	4108d83a 	srl	r4,r8,r4
1010c6fc:	51e2b03a 	or	r17,r10,r7
1010c700:	280ac03a 	cmpne	r5,r5,zero
1010c704:	8962b03a 	or	r17,r17,r5
1010c708:	89a3883a 	add	r17,r17,r6
1010c70c:	2253883a 	add	r9,r4,r9
1010c710:	898d803a 	cmpltu	r6,r17,r6
1010c714:	3251883a 	add	r8,r6,r9
1010c718:	1021883a 	mov	r16,r2
1010c71c:	003ee506 	br	1010c2b4 <__alt_data_end+0xfffec2b4>
1010c720:	4984b03a 	or	r2,r9,r6
1010c724:	103e6326 	beq	r2,zero,1010c0b4 <__alt_data_end+0xfffec0b4>
1010c728:	8987c83a 	sub	r3,r17,r6
1010c72c:	88c9803a 	cmpltu	r4,r17,r3
1010c730:	4245c83a 	sub	r2,r8,r9
1010c734:	1105c83a 	sub	r2,r2,r4
1010c738:	1100202c 	andhi	r4,r2,128
1010c73c:	203ebb26 	beq	r4,zero,1010c22c <__alt_data_end+0xfffec22c>
1010c740:	3463c83a 	sub	r17,r6,r17
1010c744:	4a07c83a 	sub	r3,r9,r8
1010c748:	344d803a 	cmpltu	r6,r6,r17
1010c74c:	1991c83a 	sub	r8,r3,r6
1010c750:	3825883a 	mov	r18,r7
1010c754:	003e5706 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c758:	4984b03a 	or	r2,r9,r6
1010c75c:	10002e26 	beq	r2,zero,1010c818 <__adddf3+0x7e0>
1010c760:	4004d0fa 	srli	r2,r8,3
1010c764:	8822d0fa 	srli	r17,r17,3
1010c768:	4010977a 	slli	r8,r8,29
1010c76c:	10c0022c 	andhi	r3,r2,8
1010c770:	4462b03a 	or	r17,r8,r17
1010c774:	18000826 	beq	r3,zero,1010c798 <__adddf3+0x760>
1010c778:	4808d0fa 	srli	r4,r9,3
1010c77c:	20c0022c 	andhi	r3,r4,8
1010c780:	1800051e 	bne	r3,zero,1010c798 <__adddf3+0x760>
1010c784:	300cd0fa 	srli	r6,r6,3
1010c788:	4806977a 	slli	r3,r9,29
1010c78c:	2005883a 	mov	r2,r4
1010c790:	3825883a 	mov	r18,r7
1010c794:	19a2b03a 	or	r17,r3,r6
1010c798:	8810d77a 	srli	r8,r17,29
1010c79c:	100490fa 	slli	r2,r2,3
1010c7a0:	882290fa 	slli	r17,r17,3
1010c7a4:	0401ffc4 	movi	r16,2047
1010c7a8:	4090b03a 	or	r8,r8,r2
1010c7ac:	003e4106 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c7b0:	0141ffc4 	movi	r5,2047
1010c7b4:	117fc71e 	bne	r2,r5,1010c6d4 <__alt_data_end+0xfffec6d4>
1010c7b8:	4811883a 	mov	r8,r9
1010c7bc:	3023883a 	mov	r17,r6
1010c7c0:	1021883a 	mov	r16,r2
1010c7c4:	003e3b06 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c7c8:	10002f26 	beq	r2,zero,1010c888 <__adddf3+0x850>
1010c7cc:	4984b03a 	or	r2,r9,r6
1010c7d0:	10001126 	beq	r2,zero,1010c818 <__adddf3+0x7e0>
1010c7d4:	4004d0fa 	srli	r2,r8,3
1010c7d8:	8822d0fa 	srli	r17,r17,3
1010c7dc:	4010977a 	slli	r8,r8,29
1010c7e0:	10c0022c 	andhi	r3,r2,8
1010c7e4:	4462b03a 	or	r17,r8,r17
1010c7e8:	183feb26 	beq	r3,zero,1010c798 <__alt_data_end+0xfffec798>
1010c7ec:	4808d0fa 	srli	r4,r9,3
1010c7f0:	20c0022c 	andhi	r3,r4,8
1010c7f4:	183fe81e 	bne	r3,zero,1010c798 <__alt_data_end+0xfffec798>
1010c7f8:	300cd0fa 	srli	r6,r6,3
1010c7fc:	4806977a 	slli	r3,r9,29
1010c800:	2005883a 	mov	r2,r4
1010c804:	19a2b03a 	or	r17,r3,r6
1010c808:	003fe306 	br	1010c798 <__alt_data_end+0xfffec798>
1010c80c:	0011883a 	mov	r8,zero
1010c810:	0005883a 	mov	r2,zero
1010c814:	003e3f06 	br	1010c114 <__alt_data_end+0xfffec114>
1010c818:	0401ffc4 	movi	r16,2047
1010c81c:	003e2506 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c820:	0013883a 	mov	r9,zero
1010c824:	003f8406 	br	1010c638 <__alt_data_end+0xfffec638>
1010c828:	0005883a 	mov	r2,zero
1010c82c:	0007883a 	mov	r3,zero
1010c830:	003e8906 	br	1010c258 <__alt_data_end+0xfffec258>
1010c834:	197ff804 	addi	r5,r3,-32
1010c838:	01000804 	movi	r4,32
1010c83c:	414ad83a 	srl	r5,r8,r5
1010c840:	19002426 	beq	r3,r4,1010c8d4 <__adddf3+0x89c>
1010c844:	01001004 	movi	r4,64
1010c848:	20c7c83a 	sub	r3,r4,r3
1010c84c:	40c6983a 	sll	r3,r8,r3
1010c850:	1c46b03a 	or	r3,r3,r17
1010c854:	1806c03a 	cmpne	r3,r3,zero
1010c858:	28e2b03a 	or	r17,r5,r3
1010c85c:	0007883a 	mov	r3,zero
1010c860:	003f2306 	br	1010c4f0 <__alt_data_end+0xfffec4f0>
1010c864:	0007883a 	mov	r3,zero
1010c868:	5811883a 	mov	r8,r11
1010c86c:	00bfffc4 	movi	r2,-1
1010c870:	0401ffc4 	movi	r16,2047
1010c874:	003e7806 	br	1010c258 <__alt_data_end+0xfffec258>
1010c878:	4462b03a 	or	r17,r8,r17
1010c87c:	8822c03a 	cmpne	r17,r17,zero
1010c880:	0009883a 	mov	r4,zero
1010c884:	003fa006 	br	1010c708 <__alt_data_end+0xfffec708>
1010c888:	4811883a 	mov	r8,r9
1010c88c:	3023883a 	mov	r17,r6
1010c890:	0401ffc4 	movi	r16,2047
1010c894:	003e0706 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c898:	4811883a 	mov	r8,r9
1010c89c:	3023883a 	mov	r17,r6
1010c8a0:	003e0406 	br	1010c0b4 <__alt_data_end+0xfffec0b4>
1010c8a4:	21fff804 	addi	r7,r4,-32
1010c8a8:	01400804 	movi	r5,32
1010c8ac:	41ced83a 	srl	r7,r8,r7
1010c8b0:	21400a26 	beq	r4,r5,1010c8dc <__adddf3+0x8a4>
1010c8b4:	01401004 	movi	r5,64
1010c8b8:	2909c83a 	sub	r4,r5,r4
1010c8bc:	4108983a 	sll	r4,r8,r4
1010c8c0:	2448b03a 	or	r4,r4,r17
1010c8c4:	2008c03a 	cmpne	r4,r4,zero
1010c8c8:	3922b03a 	or	r17,r7,r4
1010c8cc:	0009883a 	mov	r4,zero
1010c8d0:	003f8d06 	br	1010c708 <__alt_data_end+0xfffec708>
1010c8d4:	0007883a 	mov	r3,zero
1010c8d8:	003fdd06 	br	1010c850 <__alt_data_end+0xfffec850>
1010c8dc:	0009883a 	mov	r4,zero
1010c8e0:	003ff706 	br	1010c8c0 <__alt_data_end+0xfffec8c0>

1010c8e4 <__divdf3>:
1010c8e4:	defff204 	addi	sp,sp,-56
1010c8e8:	dd400915 	stw	r21,36(sp)
1010c8ec:	282ad53a 	srli	r21,r5,20
1010c8f0:	dd000815 	stw	r20,32(sp)
1010c8f4:	2828d7fa 	srli	r20,r5,31
1010c8f8:	dc000415 	stw	r16,16(sp)
1010c8fc:	04000434 	movhi	r16,16
1010c900:	df000c15 	stw	fp,48(sp)
1010c904:	843fffc4 	addi	r16,r16,-1
1010c908:	dfc00d15 	stw	ra,52(sp)
1010c90c:	ddc00b15 	stw	r23,44(sp)
1010c910:	dd800a15 	stw	r22,40(sp)
1010c914:	dcc00715 	stw	r19,28(sp)
1010c918:	dc800615 	stw	r18,24(sp)
1010c91c:	dc400515 	stw	r17,20(sp)
1010c920:	ad41ffcc 	andi	r21,r21,2047
1010c924:	2c20703a 	and	r16,r5,r16
1010c928:	a7003fcc 	andi	fp,r20,255
1010c92c:	a8006126 	beq	r21,zero,1010cab4 <__divdf3+0x1d0>
1010c930:	0081ffc4 	movi	r2,2047
1010c934:	2025883a 	mov	r18,r4
1010c938:	a8803726 	beq	r21,r2,1010ca18 <__divdf3+0x134>
1010c93c:	80c00434 	orhi	r3,r16,16
1010c940:	180690fa 	slli	r3,r3,3
1010c944:	2020d77a 	srli	r16,r4,29
1010c948:	202490fa 	slli	r18,r4,3
1010c94c:	ad7f0044 	addi	r21,r21,-1023
1010c950:	80e0b03a 	or	r16,r16,r3
1010c954:	0027883a 	mov	r19,zero
1010c958:	0013883a 	mov	r9,zero
1010c95c:	3808d53a 	srli	r4,r7,20
1010c960:	382cd7fa 	srli	r22,r7,31
1010c964:	04400434 	movhi	r17,16
1010c968:	8c7fffc4 	addi	r17,r17,-1
1010c96c:	2101ffcc 	andi	r4,r4,2047
1010c970:	3011883a 	mov	r8,r6
1010c974:	3c62703a 	and	r17,r7,r17
1010c978:	b5c03fcc 	andi	r23,r22,255
1010c97c:	20006c26 	beq	r4,zero,1010cb30 <__divdf3+0x24c>
1010c980:	0081ffc4 	movi	r2,2047
1010c984:	20806426 	beq	r4,r2,1010cb18 <__divdf3+0x234>
1010c988:	88c00434 	orhi	r3,r17,16
1010c98c:	180690fa 	slli	r3,r3,3
1010c990:	3022d77a 	srli	r17,r6,29
1010c994:	301090fa 	slli	r8,r6,3
1010c998:	213f0044 	addi	r4,r4,-1023
1010c99c:	88e2b03a 	or	r17,r17,r3
1010c9a0:	000d883a 	mov	r6,zero
1010c9a4:	a584f03a 	xor	r2,r20,r22
1010c9a8:	34cab03a 	or	r5,r6,r19
1010c9ac:	1007883a 	mov	r3,r2
1010c9b0:	14c03fcc 	andi	r19,r2,255
1010c9b4:	008003c4 	movi	r2,15
1010c9b8:	a92bc83a 	sub	r21,r21,r4
1010c9bc:	11409036 	bltu	r2,r5,1010cc00 <__divdf3+0x31c>
1010c9c0:	280a90ba 	slli	r5,r5,2
1010c9c4:	00840474 	movhi	r2,4113
1010c9c8:	10b27604 	addi	r2,r2,-13864
1010c9cc:	288b883a 	add	r5,r5,r2
1010c9d0:	28800017 	ldw	r2,0(r5)
1010c9d4:	1000683a 	jmp	r2
1010c9d8:	1010cc00 	call	11010cc0 <__alt_data_end+0xef0cc0>
1010c9dc:	1010ca50 	cmplti	zero,r2,17193
1010c9e0:	1010cbf0 	cmpltui	zero,r2,17199
1010c9e4:	1010ca44 	addi	zero,r2,17193
1010c9e8:	1010cbf0 	cmpltui	zero,r2,17199
1010c9ec:	1010cbc4 	addi	zero,r2,17199
1010c9f0:	1010cbf0 	cmpltui	zero,r2,17199
1010c9f4:	1010ca44 	addi	zero,r2,17193
1010c9f8:	1010ca50 	cmplti	zero,r2,17193
1010c9fc:	1010ca50 	cmplti	zero,r2,17193
1010ca00:	1010cbc4 	addi	zero,r2,17199
1010ca04:	1010ca44 	addi	zero,r2,17193
1010ca08:	1010ca34 	orhi	zero,r2,17192
1010ca0c:	1010ca34 	orhi	zero,r2,17192
1010ca10:	1010ca34 	orhi	zero,r2,17192
1010ca14:	1010cee4 	muli	zero,r2,17211
1010ca18:	2404b03a 	or	r2,r4,r16
1010ca1c:	1000661e 	bne	r2,zero,1010cbb8 <__divdf3+0x2d4>
1010ca20:	04c00204 	movi	r19,8
1010ca24:	0021883a 	mov	r16,zero
1010ca28:	0025883a 	mov	r18,zero
1010ca2c:	02400084 	movi	r9,2
1010ca30:	003fca06 	br	1010c95c <__alt_data_end+0xfffec95c>
1010ca34:	8023883a 	mov	r17,r16
1010ca38:	9011883a 	mov	r8,r18
1010ca3c:	e02f883a 	mov	r23,fp
1010ca40:	480d883a 	mov	r6,r9
1010ca44:	00800084 	movi	r2,2
1010ca48:	3081311e 	bne	r6,r2,1010cf10 <__divdf3+0x62c>
1010ca4c:	b827883a 	mov	r19,r23
1010ca50:	98c0004c 	andi	r3,r19,1
1010ca54:	0081ffc4 	movi	r2,2047
1010ca58:	000b883a 	mov	r5,zero
1010ca5c:	0025883a 	mov	r18,zero
1010ca60:	1004953a 	slli	r2,r2,20
1010ca64:	18c03fcc 	andi	r3,r3,255
1010ca68:	04400434 	movhi	r17,16
1010ca6c:	8c7fffc4 	addi	r17,r17,-1
1010ca70:	180697fa 	slli	r3,r3,31
1010ca74:	2c4a703a 	and	r5,r5,r17
1010ca78:	288ab03a 	or	r5,r5,r2
1010ca7c:	28c6b03a 	or	r3,r5,r3
1010ca80:	9005883a 	mov	r2,r18
1010ca84:	dfc00d17 	ldw	ra,52(sp)
1010ca88:	df000c17 	ldw	fp,48(sp)
1010ca8c:	ddc00b17 	ldw	r23,44(sp)
1010ca90:	dd800a17 	ldw	r22,40(sp)
1010ca94:	dd400917 	ldw	r21,36(sp)
1010ca98:	dd000817 	ldw	r20,32(sp)
1010ca9c:	dcc00717 	ldw	r19,28(sp)
1010caa0:	dc800617 	ldw	r18,24(sp)
1010caa4:	dc400517 	ldw	r17,20(sp)
1010caa8:	dc000417 	ldw	r16,16(sp)
1010caac:	dec00e04 	addi	sp,sp,56
1010cab0:	f800283a 	ret
1010cab4:	2404b03a 	or	r2,r4,r16
1010cab8:	2027883a 	mov	r19,r4
1010cabc:	10003926 	beq	r2,zero,1010cba4 <__divdf3+0x2c0>
1010cac0:	80012e26 	beq	r16,zero,1010cf7c <__divdf3+0x698>
1010cac4:	8009883a 	mov	r4,r16
1010cac8:	d9800315 	stw	r6,12(sp)
1010cacc:	d9c00215 	stw	r7,8(sp)
1010cad0:	010e63c0 	call	1010e63c <__clzsi2>
1010cad4:	d9800317 	ldw	r6,12(sp)
1010cad8:	d9c00217 	ldw	r7,8(sp)
1010cadc:	10fffd44 	addi	r3,r2,-11
1010cae0:	01000704 	movi	r4,28
1010cae4:	20c12116 	blt	r4,r3,1010cf6c <__divdf3+0x688>
1010cae8:	01000744 	movi	r4,29
1010caec:	147ffe04 	addi	r17,r2,-8
1010caf0:	20c9c83a 	sub	r4,r4,r3
1010caf4:	8460983a 	sll	r16,r16,r17
1010caf8:	9908d83a 	srl	r4,r19,r4
1010cafc:	9c64983a 	sll	r18,r19,r17
1010cb00:	2420b03a 	or	r16,r4,r16
1010cb04:	057f0084 	movi	r21,-1022
1010cb08:	a8ebc83a 	sub	r21,r21,r3
1010cb0c:	0027883a 	mov	r19,zero
1010cb10:	0013883a 	mov	r9,zero
1010cb14:	003f9106 	br	1010c95c <__alt_data_end+0xfffec95c>
1010cb18:	3444b03a 	or	r2,r6,r17
1010cb1c:	10001f1e 	bne	r2,zero,1010cb9c <__divdf3+0x2b8>
1010cb20:	0023883a 	mov	r17,zero
1010cb24:	0011883a 	mov	r8,zero
1010cb28:	01800084 	movi	r6,2
1010cb2c:	003f9d06 	br	1010c9a4 <__alt_data_end+0xfffec9a4>
1010cb30:	3444b03a 	or	r2,r6,r17
1010cb34:	10001526 	beq	r2,zero,1010cb8c <__divdf3+0x2a8>
1010cb38:	88011b26 	beq	r17,zero,1010cfa8 <__divdf3+0x6c4>
1010cb3c:	8809883a 	mov	r4,r17
1010cb40:	d9800315 	stw	r6,12(sp)
1010cb44:	da400115 	stw	r9,4(sp)
1010cb48:	010e63c0 	call	1010e63c <__clzsi2>
1010cb4c:	d9800317 	ldw	r6,12(sp)
1010cb50:	da400117 	ldw	r9,4(sp)
1010cb54:	10fffd44 	addi	r3,r2,-11
1010cb58:	01000704 	movi	r4,28
1010cb5c:	20c10e16 	blt	r4,r3,1010cf98 <__divdf3+0x6b4>
1010cb60:	01000744 	movi	r4,29
1010cb64:	123ffe04 	addi	r8,r2,-8
1010cb68:	20c9c83a 	sub	r4,r4,r3
1010cb6c:	8a22983a 	sll	r17,r17,r8
1010cb70:	3108d83a 	srl	r4,r6,r4
1010cb74:	3210983a 	sll	r8,r6,r8
1010cb78:	2462b03a 	or	r17,r4,r17
1010cb7c:	013f0084 	movi	r4,-1022
1010cb80:	20c9c83a 	sub	r4,r4,r3
1010cb84:	000d883a 	mov	r6,zero
1010cb88:	003f8606 	br	1010c9a4 <__alt_data_end+0xfffec9a4>
1010cb8c:	0023883a 	mov	r17,zero
1010cb90:	0011883a 	mov	r8,zero
1010cb94:	01800044 	movi	r6,1
1010cb98:	003f8206 	br	1010c9a4 <__alt_data_end+0xfffec9a4>
1010cb9c:	018000c4 	movi	r6,3
1010cba0:	003f8006 	br	1010c9a4 <__alt_data_end+0xfffec9a4>
1010cba4:	04c00104 	movi	r19,4
1010cba8:	0021883a 	mov	r16,zero
1010cbac:	0025883a 	mov	r18,zero
1010cbb0:	02400044 	movi	r9,1
1010cbb4:	003f6906 	br	1010c95c <__alt_data_end+0xfffec95c>
1010cbb8:	04c00304 	movi	r19,12
1010cbbc:	024000c4 	movi	r9,3
1010cbc0:	003f6606 	br	1010c95c <__alt_data_end+0xfffec95c>
1010cbc4:	01400434 	movhi	r5,16
1010cbc8:	0007883a 	mov	r3,zero
1010cbcc:	297fffc4 	addi	r5,r5,-1
1010cbd0:	04bfffc4 	movi	r18,-1
1010cbd4:	0081ffc4 	movi	r2,2047
1010cbd8:	003fa106 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010cbdc:	00c00044 	movi	r3,1
1010cbe0:	1887c83a 	sub	r3,r3,r2
1010cbe4:	01000e04 	movi	r4,56
1010cbe8:	20c1210e 	bge	r4,r3,1010d070 <__divdf3+0x78c>
1010cbec:	98c0004c 	andi	r3,r19,1
1010cbf0:	0005883a 	mov	r2,zero
1010cbf4:	000b883a 	mov	r5,zero
1010cbf8:	0025883a 	mov	r18,zero
1010cbfc:	003f9806 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010cc00:	8c00fd36 	bltu	r17,r16,1010cff8 <__divdf3+0x714>
1010cc04:	8440fb26 	beq	r16,r17,1010cff4 <__divdf3+0x710>
1010cc08:	8007883a 	mov	r3,r16
1010cc0c:	ad7fffc4 	addi	r21,r21,-1
1010cc10:	0021883a 	mov	r16,zero
1010cc14:	400ad63a 	srli	r5,r8,24
1010cc18:	8822923a 	slli	r17,r17,8
1010cc1c:	1809883a 	mov	r4,r3
1010cc20:	402c923a 	slli	r22,r8,8
1010cc24:	8978b03a 	or	fp,r17,r5
1010cc28:	e028d43a 	srli	r20,fp,16
1010cc2c:	d8c00015 	stw	r3,0(sp)
1010cc30:	e5ffffcc 	andi	r23,fp,65535
1010cc34:	a00b883a 	mov	r5,r20
1010cc38:	01015c40 	call	101015c4 <__udivsi3>
1010cc3c:	d8c00017 	ldw	r3,0(sp)
1010cc40:	a00b883a 	mov	r5,r20
1010cc44:	d8800315 	stw	r2,12(sp)
1010cc48:	1809883a 	mov	r4,r3
1010cc4c:	01016280 	call	10101628 <__umodsi3>
1010cc50:	d9800317 	ldw	r6,12(sp)
1010cc54:	1006943a 	slli	r3,r2,16
1010cc58:	9004d43a 	srli	r2,r18,16
1010cc5c:	b9a3383a 	mul	r17,r23,r6
1010cc60:	10c4b03a 	or	r2,r2,r3
1010cc64:	1440062e 	bgeu	r2,r17,1010cc80 <__divdf3+0x39c>
1010cc68:	1705883a 	add	r2,r2,fp
1010cc6c:	30ffffc4 	addi	r3,r6,-1
1010cc70:	1700ee36 	bltu	r2,fp,1010d02c <__divdf3+0x748>
1010cc74:	1440ed2e 	bgeu	r2,r17,1010d02c <__divdf3+0x748>
1010cc78:	31bfff84 	addi	r6,r6,-2
1010cc7c:	1705883a 	add	r2,r2,fp
1010cc80:	1463c83a 	sub	r17,r2,r17
1010cc84:	a00b883a 	mov	r5,r20
1010cc88:	8809883a 	mov	r4,r17
1010cc8c:	d9800315 	stw	r6,12(sp)
1010cc90:	01015c40 	call	101015c4 <__udivsi3>
1010cc94:	a00b883a 	mov	r5,r20
1010cc98:	8809883a 	mov	r4,r17
1010cc9c:	d8800215 	stw	r2,8(sp)
1010cca0:	01016280 	call	10101628 <__umodsi3>
1010cca4:	d9c00217 	ldw	r7,8(sp)
1010cca8:	1004943a 	slli	r2,r2,16
1010ccac:	94bfffcc 	andi	r18,r18,65535
1010ccb0:	b9d1383a 	mul	r8,r23,r7
1010ccb4:	90a4b03a 	or	r18,r18,r2
1010ccb8:	d9800317 	ldw	r6,12(sp)
1010ccbc:	9200062e 	bgeu	r18,r8,1010ccd8 <__divdf3+0x3f4>
1010ccc0:	9725883a 	add	r18,r18,fp
1010ccc4:	38bfffc4 	addi	r2,r7,-1
1010ccc8:	9700d636 	bltu	r18,fp,1010d024 <__divdf3+0x740>
1010cccc:	9200d52e 	bgeu	r18,r8,1010d024 <__divdf3+0x740>
1010ccd0:	39ffff84 	addi	r7,r7,-2
1010ccd4:	9725883a 	add	r18,r18,fp
1010ccd8:	3004943a 	slli	r2,r6,16
1010ccdc:	b012d43a 	srli	r9,r22,16
1010cce0:	b1bfffcc 	andi	r6,r22,65535
1010cce4:	11e2b03a 	or	r17,r2,r7
1010cce8:	8806d43a 	srli	r3,r17,16
1010ccec:	893fffcc 	andi	r4,r17,65535
1010ccf0:	218b383a 	mul	r5,r4,r6
1010ccf4:	30c5383a 	mul	r2,r6,r3
1010ccf8:	2249383a 	mul	r4,r4,r9
1010ccfc:	280ed43a 	srli	r7,r5,16
1010cd00:	9225c83a 	sub	r18,r18,r8
1010cd04:	2089883a 	add	r4,r4,r2
1010cd08:	3909883a 	add	r4,r7,r4
1010cd0c:	1a47383a 	mul	r3,r3,r9
1010cd10:	2080022e 	bgeu	r4,r2,1010cd1c <__divdf3+0x438>
1010cd14:	00800074 	movhi	r2,1
1010cd18:	1887883a 	add	r3,r3,r2
1010cd1c:	2004d43a 	srli	r2,r4,16
1010cd20:	2008943a 	slli	r4,r4,16
1010cd24:	297fffcc 	andi	r5,r5,65535
1010cd28:	10c7883a 	add	r3,r2,r3
1010cd2c:	2149883a 	add	r4,r4,r5
1010cd30:	90c0a536 	bltu	r18,r3,1010cfc8 <__divdf3+0x6e4>
1010cd34:	90c0bf26 	beq	r18,r3,1010d034 <__divdf3+0x750>
1010cd38:	90c7c83a 	sub	r3,r18,r3
1010cd3c:	810fc83a 	sub	r7,r16,r4
1010cd40:	81e5803a 	cmpltu	r18,r16,r7
1010cd44:	1ca5c83a 	sub	r18,r3,r18
1010cd48:	e480c126 	beq	fp,r18,1010d050 <__divdf3+0x76c>
1010cd4c:	a00b883a 	mov	r5,r20
1010cd50:	9009883a 	mov	r4,r18
1010cd54:	d9800315 	stw	r6,12(sp)
1010cd58:	d9c00215 	stw	r7,8(sp)
1010cd5c:	da400115 	stw	r9,4(sp)
1010cd60:	01015c40 	call	101015c4 <__udivsi3>
1010cd64:	a00b883a 	mov	r5,r20
1010cd68:	9009883a 	mov	r4,r18
1010cd6c:	d8800015 	stw	r2,0(sp)
1010cd70:	01016280 	call	10101628 <__umodsi3>
1010cd74:	d9c00217 	ldw	r7,8(sp)
1010cd78:	da000017 	ldw	r8,0(sp)
1010cd7c:	1006943a 	slli	r3,r2,16
1010cd80:	3804d43a 	srli	r2,r7,16
1010cd84:	ba21383a 	mul	r16,r23,r8
1010cd88:	d9800317 	ldw	r6,12(sp)
1010cd8c:	10c4b03a 	or	r2,r2,r3
1010cd90:	da400117 	ldw	r9,4(sp)
1010cd94:	1400062e 	bgeu	r2,r16,1010cdb0 <__divdf3+0x4cc>
1010cd98:	1705883a 	add	r2,r2,fp
1010cd9c:	40ffffc4 	addi	r3,r8,-1
1010cda0:	1700ad36 	bltu	r2,fp,1010d058 <__divdf3+0x774>
1010cda4:	1400ac2e 	bgeu	r2,r16,1010d058 <__divdf3+0x774>
1010cda8:	423fff84 	addi	r8,r8,-2
1010cdac:	1705883a 	add	r2,r2,fp
1010cdb0:	1421c83a 	sub	r16,r2,r16
1010cdb4:	a00b883a 	mov	r5,r20
1010cdb8:	8009883a 	mov	r4,r16
1010cdbc:	d9800315 	stw	r6,12(sp)
1010cdc0:	d9c00215 	stw	r7,8(sp)
1010cdc4:	da000015 	stw	r8,0(sp)
1010cdc8:	da400115 	stw	r9,4(sp)
1010cdcc:	01015c40 	call	101015c4 <__udivsi3>
1010cdd0:	8009883a 	mov	r4,r16
1010cdd4:	a00b883a 	mov	r5,r20
1010cdd8:	1025883a 	mov	r18,r2
1010cddc:	01016280 	call	10101628 <__umodsi3>
1010cde0:	d9c00217 	ldw	r7,8(sp)
1010cde4:	1004943a 	slli	r2,r2,16
1010cde8:	bcaf383a 	mul	r23,r23,r18
1010cdec:	393fffcc 	andi	r4,r7,65535
1010cdf0:	2088b03a 	or	r4,r4,r2
1010cdf4:	d9800317 	ldw	r6,12(sp)
1010cdf8:	da000017 	ldw	r8,0(sp)
1010cdfc:	da400117 	ldw	r9,4(sp)
1010ce00:	25c0062e 	bgeu	r4,r23,1010ce1c <__divdf3+0x538>
1010ce04:	2709883a 	add	r4,r4,fp
1010ce08:	90bfffc4 	addi	r2,r18,-1
1010ce0c:	27009436 	bltu	r4,fp,1010d060 <__divdf3+0x77c>
1010ce10:	25c0932e 	bgeu	r4,r23,1010d060 <__divdf3+0x77c>
1010ce14:	94bfff84 	addi	r18,r18,-2
1010ce18:	2709883a 	add	r4,r4,fp
1010ce1c:	4004943a 	slli	r2,r8,16
1010ce20:	25efc83a 	sub	r23,r4,r23
1010ce24:	1490b03a 	or	r8,r2,r18
1010ce28:	4008d43a 	srli	r4,r8,16
1010ce2c:	40ffffcc 	andi	r3,r8,65535
1010ce30:	30c5383a 	mul	r2,r6,r3
1010ce34:	1a47383a 	mul	r3,r3,r9
1010ce38:	310d383a 	mul	r6,r6,r4
1010ce3c:	100ad43a 	srli	r5,r2,16
1010ce40:	4913383a 	mul	r9,r9,r4
1010ce44:	1987883a 	add	r3,r3,r6
1010ce48:	28c7883a 	add	r3,r5,r3
1010ce4c:	1980022e 	bgeu	r3,r6,1010ce58 <__divdf3+0x574>
1010ce50:	01000074 	movhi	r4,1
1010ce54:	4913883a 	add	r9,r9,r4
1010ce58:	1808d43a 	srli	r4,r3,16
1010ce5c:	1806943a 	slli	r3,r3,16
1010ce60:	10bfffcc 	andi	r2,r2,65535
1010ce64:	2253883a 	add	r9,r4,r9
1010ce68:	1887883a 	add	r3,r3,r2
1010ce6c:	ba403836 	bltu	r23,r9,1010cf50 <__divdf3+0x66c>
1010ce70:	ba403626 	beq	r23,r9,1010cf4c <__divdf3+0x668>
1010ce74:	42000054 	ori	r8,r8,1
1010ce78:	a880ffc4 	addi	r2,r21,1023
1010ce7c:	00bf570e 	bge	zero,r2,1010cbdc <__alt_data_end+0xfffecbdc>
1010ce80:	40c001cc 	andi	r3,r8,7
1010ce84:	18000726 	beq	r3,zero,1010cea4 <__divdf3+0x5c0>
1010ce88:	40c003cc 	andi	r3,r8,15
1010ce8c:	01000104 	movi	r4,4
1010ce90:	19000426 	beq	r3,r4,1010cea4 <__divdf3+0x5c0>
1010ce94:	4107883a 	add	r3,r8,r4
1010ce98:	1a11803a 	cmpltu	r8,r3,r8
1010ce9c:	8a23883a 	add	r17,r17,r8
1010cea0:	1811883a 	mov	r8,r3
1010cea4:	88c0402c 	andhi	r3,r17,256
1010cea8:	18000426 	beq	r3,zero,1010cebc <__divdf3+0x5d8>
1010ceac:	00ffc034 	movhi	r3,65280
1010ceb0:	18ffffc4 	addi	r3,r3,-1
1010ceb4:	a8810004 	addi	r2,r21,1024
1010ceb8:	88e2703a 	and	r17,r17,r3
1010cebc:	00c1ff84 	movi	r3,2046
1010cec0:	18bee316 	blt	r3,r2,1010ca50 <__alt_data_end+0xfffeca50>
1010cec4:	8824977a 	slli	r18,r17,29
1010cec8:	4010d0fa 	srli	r8,r8,3
1010cecc:	8822927a 	slli	r17,r17,9
1010ced0:	1081ffcc 	andi	r2,r2,2047
1010ced4:	9224b03a 	or	r18,r18,r8
1010ced8:	880ad33a 	srli	r5,r17,12
1010cedc:	98c0004c 	andi	r3,r19,1
1010cee0:	003edf06 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010cee4:	8080022c 	andhi	r2,r16,8
1010cee8:	10001226 	beq	r2,zero,1010cf34 <__divdf3+0x650>
1010ceec:	8880022c 	andhi	r2,r17,8
1010cef0:	1000101e 	bne	r2,zero,1010cf34 <__divdf3+0x650>
1010cef4:	00800434 	movhi	r2,16
1010cef8:	89400234 	orhi	r5,r17,8
1010cefc:	10bfffc4 	addi	r2,r2,-1
1010cf00:	b007883a 	mov	r3,r22
1010cf04:	288a703a 	and	r5,r5,r2
1010cf08:	4025883a 	mov	r18,r8
1010cf0c:	003f3106 	br	1010cbd4 <__alt_data_end+0xfffecbd4>
1010cf10:	008000c4 	movi	r2,3
1010cf14:	3080a626 	beq	r6,r2,1010d1b0 <__divdf3+0x8cc>
1010cf18:	00800044 	movi	r2,1
1010cf1c:	3080521e 	bne	r6,r2,1010d068 <__divdf3+0x784>
1010cf20:	b807883a 	mov	r3,r23
1010cf24:	0005883a 	mov	r2,zero
1010cf28:	000b883a 	mov	r5,zero
1010cf2c:	0025883a 	mov	r18,zero
1010cf30:	003ecb06 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010cf34:	00800434 	movhi	r2,16
1010cf38:	81400234 	orhi	r5,r16,8
1010cf3c:	10bfffc4 	addi	r2,r2,-1
1010cf40:	a007883a 	mov	r3,r20
1010cf44:	288a703a 	and	r5,r5,r2
1010cf48:	003f2206 	br	1010cbd4 <__alt_data_end+0xfffecbd4>
1010cf4c:	183fca26 	beq	r3,zero,1010ce78 <__alt_data_end+0xfffece78>
1010cf50:	e5ef883a 	add	r23,fp,r23
1010cf54:	40bfffc4 	addi	r2,r8,-1
1010cf58:	bf00392e 	bgeu	r23,fp,1010d040 <__divdf3+0x75c>
1010cf5c:	1011883a 	mov	r8,r2
1010cf60:	ba7fc41e 	bne	r23,r9,1010ce74 <__alt_data_end+0xfffece74>
1010cf64:	b0ffc31e 	bne	r22,r3,1010ce74 <__alt_data_end+0xfffece74>
1010cf68:	003fc306 	br	1010ce78 <__alt_data_end+0xfffece78>
1010cf6c:	10bff604 	addi	r2,r2,-40
1010cf70:	98a0983a 	sll	r16,r19,r2
1010cf74:	0025883a 	mov	r18,zero
1010cf78:	003ee206 	br	1010cb04 <__alt_data_end+0xfffecb04>
1010cf7c:	d9800315 	stw	r6,12(sp)
1010cf80:	d9c00215 	stw	r7,8(sp)
1010cf84:	010e63c0 	call	1010e63c <__clzsi2>
1010cf88:	10800804 	addi	r2,r2,32
1010cf8c:	d9c00217 	ldw	r7,8(sp)
1010cf90:	d9800317 	ldw	r6,12(sp)
1010cf94:	003ed106 	br	1010cadc <__alt_data_end+0xfffecadc>
1010cf98:	10bff604 	addi	r2,r2,-40
1010cf9c:	30a2983a 	sll	r17,r6,r2
1010cfa0:	0011883a 	mov	r8,zero
1010cfa4:	003ef506 	br	1010cb7c <__alt_data_end+0xfffecb7c>
1010cfa8:	3009883a 	mov	r4,r6
1010cfac:	d9800315 	stw	r6,12(sp)
1010cfb0:	da400115 	stw	r9,4(sp)
1010cfb4:	010e63c0 	call	1010e63c <__clzsi2>
1010cfb8:	10800804 	addi	r2,r2,32
1010cfbc:	da400117 	ldw	r9,4(sp)
1010cfc0:	d9800317 	ldw	r6,12(sp)
1010cfc4:	003ee306 	br	1010cb54 <__alt_data_end+0xfffecb54>
1010cfc8:	85a1883a 	add	r16,r16,r22
1010cfcc:	8585803a 	cmpltu	r2,r16,r22
1010cfd0:	1705883a 	add	r2,r2,fp
1010cfd4:	14a5883a 	add	r18,r2,r18
1010cfd8:	88bfffc4 	addi	r2,r17,-1
1010cfdc:	e4800c2e 	bgeu	fp,r18,1010d010 <__divdf3+0x72c>
1010cfe0:	90c03e36 	bltu	r18,r3,1010d0dc <__divdf3+0x7f8>
1010cfe4:	1c806926 	beq	r3,r18,1010d18c <__divdf3+0x8a8>
1010cfe8:	90c7c83a 	sub	r3,r18,r3
1010cfec:	1023883a 	mov	r17,r2
1010cff0:	003f5206 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010cff4:	923f0436 	bltu	r18,r8,1010cc08 <__alt_data_end+0xfffecc08>
1010cff8:	800897fa 	slli	r4,r16,31
1010cffc:	9004d07a 	srli	r2,r18,1
1010d000:	8006d07a 	srli	r3,r16,1
1010d004:	902097fa 	slli	r16,r18,31
1010d008:	20a4b03a 	or	r18,r4,r2
1010d00c:	003f0106 	br	1010cc14 <__alt_data_end+0xfffecc14>
1010d010:	e4bff51e 	bne	fp,r18,1010cfe8 <__alt_data_end+0xfffecfe8>
1010d014:	85bff22e 	bgeu	r16,r22,1010cfe0 <__alt_data_end+0xfffecfe0>
1010d018:	e0c7c83a 	sub	r3,fp,r3
1010d01c:	1023883a 	mov	r17,r2
1010d020:	003f4606 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010d024:	100f883a 	mov	r7,r2
1010d028:	003f2b06 	br	1010ccd8 <__alt_data_end+0xfffeccd8>
1010d02c:	180d883a 	mov	r6,r3
1010d030:	003f1306 	br	1010cc80 <__alt_data_end+0xfffecc80>
1010d034:	813fe436 	bltu	r16,r4,1010cfc8 <__alt_data_end+0xfffecfc8>
1010d038:	0007883a 	mov	r3,zero
1010d03c:	003f3f06 	br	1010cd3c <__alt_data_end+0xfffecd3c>
1010d040:	ba402c36 	bltu	r23,r9,1010d0f4 <__divdf3+0x810>
1010d044:	4dc05426 	beq	r9,r23,1010d198 <__divdf3+0x8b4>
1010d048:	1011883a 	mov	r8,r2
1010d04c:	003f8906 	br	1010ce74 <__alt_data_end+0xfffece74>
1010d050:	023fffc4 	movi	r8,-1
1010d054:	003f8806 	br	1010ce78 <__alt_data_end+0xfffece78>
1010d058:	1811883a 	mov	r8,r3
1010d05c:	003f5406 	br	1010cdb0 <__alt_data_end+0xfffecdb0>
1010d060:	1025883a 	mov	r18,r2
1010d064:	003f6d06 	br	1010ce1c <__alt_data_end+0xfffece1c>
1010d068:	b827883a 	mov	r19,r23
1010d06c:	003f8206 	br	1010ce78 <__alt_data_end+0xfffece78>
1010d070:	010007c4 	movi	r4,31
1010d074:	20c02616 	blt	r4,r3,1010d110 <__divdf3+0x82c>
1010d078:	00800804 	movi	r2,32
1010d07c:	10c5c83a 	sub	r2,r2,r3
1010d080:	888a983a 	sll	r5,r17,r2
1010d084:	40c8d83a 	srl	r4,r8,r3
1010d088:	4084983a 	sll	r2,r8,r2
1010d08c:	88e2d83a 	srl	r17,r17,r3
1010d090:	2906b03a 	or	r3,r5,r4
1010d094:	1004c03a 	cmpne	r2,r2,zero
1010d098:	1886b03a 	or	r3,r3,r2
1010d09c:	188001cc 	andi	r2,r3,7
1010d0a0:	10000726 	beq	r2,zero,1010d0c0 <__divdf3+0x7dc>
1010d0a4:	188003cc 	andi	r2,r3,15
1010d0a8:	01000104 	movi	r4,4
1010d0ac:	11000426 	beq	r2,r4,1010d0c0 <__divdf3+0x7dc>
1010d0b0:	1805883a 	mov	r2,r3
1010d0b4:	10c00104 	addi	r3,r2,4
1010d0b8:	1885803a 	cmpltu	r2,r3,r2
1010d0bc:	88a3883a 	add	r17,r17,r2
1010d0c0:	8880202c 	andhi	r2,r17,128
1010d0c4:	10002726 	beq	r2,zero,1010d164 <__divdf3+0x880>
1010d0c8:	98c0004c 	andi	r3,r19,1
1010d0cc:	00800044 	movi	r2,1
1010d0d0:	000b883a 	mov	r5,zero
1010d0d4:	0025883a 	mov	r18,zero
1010d0d8:	003e6106 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010d0dc:	85a1883a 	add	r16,r16,r22
1010d0e0:	8585803a 	cmpltu	r2,r16,r22
1010d0e4:	1705883a 	add	r2,r2,fp
1010d0e8:	14a5883a 	add	r18,r2,r18
1010d0ec:	8c7fff84 	addi	r17,r17,-2
1010d0f0:	003f1106 	br	1010cd38 <__alt_data_end+0xfffecd38>
1010d0f4:	b589883a 	add	r4,r22,r22
1010d0f8:	25ad803a 	cmpltu	r22,r4,r22
1010d0fc:	b739883a 	add	fp,r22,fp
1010d100:	40bfff84 	addi	r2,r8,-2
1010d104:	bf2f883a 	add	r23,r23,fp
1010d108:	202d883a 	mov	r22,r4
1010d10c:	003f9306 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d110:	013ff844 	movi	r4,-31
1010d114:	2085c83a 	sub	r2,r4,r2
1010d118:	8888d83a 	srl	r4,r17,r2
1010d11c:	00800804 	movi	r2,32
1010d120:	18802126 	beq	r3,r2,1010d1a8 <__divdf3+0x8c4>
1010d124:	00801004 	movi	r2,64
1010d128:	10c5c83a 	sub	r2,r2,r3
1010d12c:	8884983a 	sll	r2,r17,r2
1010d130:	1204b03a 	or	r2,r2,r8
1010d134:	1004c03a 	cmpne	r2,r2,zero
1010d138:	2084b03a 	or	r2,r4,r2
1010d13c:	144001cc 	andi	r17,r2,7
1010d140:	88000d1e 	bne	r17,zero,1010d178 <__divdf3+0x894>
1010d144:	000b883a 	mov	r5,zero
1010d148:	1024d0fa 	srli	r18,r2,3
1010d14c:	98c0004c 	andi	r3,r19,1
1010d150:	0005883a 	mov	r2,zero
1010d154:	9464b03a 	or	r18,r18,r17
1010d158:	003e4106 	br	1010ca60 <__alt_data_end+0xfffeca60>
1010d15c:	1007883a 	mov	r3,r2
1010d160:	0023883a 	mov	r17,zero
1010d164:	880a927a 	slli	r5,r17,9
1010d168:	1805883a 	mov	r2,r3
1010d16c:	8822977a 	slli	r17,r17,29
1010d170:	280ad33a 	srli	r5,r5,12
1010d174:	003ff406 	br	1010d148 <__alt_data_end+0xfffed148>
1010d178:	10c003cc 	andi	r3,r2,15
1010d17c:	01000104 	movi	r4,4
1010d180:	193ff626 	beq	r3,r4,1010d15c <__alt_data_end+0xfffed15c>
1010d184:	0023883a 	mov	r17,zero
1010d188:	003fca06 	br	1010d0b4 <__alt_data_end+0xfffed0b4>
1010d18c:	813fd336 	bltu	r16,r4,1010d0dc <__alt_data_end+0xfffed0dc>
1010d190:	1023883a 	mov	r17,r2
1010d194:	003fa806 	br	1010d038 <__alt_data_end+0xfffed038>
1010d198:	b0ffd636 	bltu	r22,r3,1010d0f4 <__alt_data_end+0xfffed0f4>
1010d19c:	1011883a 	mov	r8,r2
1010d1a0:	b0ff341e 	bne	r22,r3,1010ce74 <__alt_data_end+0xfffece74>
1010d1a4:	003f3406 	br	1010ce78 <__alt_data_end+0xfffece78>
1010d1a8:	0005883a 	mov	r2,zero
1010d1ac:	003fe006 	br	1010d130 <__alt_data_end+0xfffed130>
1010d1b0:	00800434 	movhi	r2,16
1010d1b4:	89400234 	orhi	r5,r17,8
1010d1b8:	10bfffc4 	addi	r2,r2,-1
1010d1bc:	b807883a 	mov	r3,r23
1010d1c0:	288a703a 	and	r5,r5,r2
1010d1c4:	4025883a 	mov	r18,r8
1010d1c8:	003e8206 	br	1010cbd4 <__alt_data_end+0xfffecbd4>

1010d1cc <__eqdf2>:
1010d1cc:	2804d53a 	srli	r2,r5,20
1010d1d0:	3806d53a 	srli	r3,r7,20
1010d1d4:	02000434 	movhi	r8,16
1010d1d8:	423fffc4 	addi	r8,r8,-1
1010d1dc:	1081ffcc 	andi	r2,r2,2047
1010d1e0:	0281ffc4 	movi	r10,2047
1010d1e4:	2a12703a 	and	r9,r5,r8
1010d1e8:	18c1ffcc 	andi	r3,r3,2047
1010d1ec:	3a10703a 	and	r8,r7,r8
1010d1f0:	280ad7fa 	srli	r5,r5,31
1010d1f4:	380ed7fa 	srli	r7,r7,31
1010d1f8:	12801026 	beq	r2,r10,1010d23c <__eqdf2+0x70>
1010d1fc:	0281ffc4 	movi	r10,2047
1010d200:	1a800a26 	beq	r3,r10,1010d22c <__eqdf2+0x60>
1010d204:	10c00226 	beq	r2,r3,1010d210 <__eqdf2+0x44>
1010d208:	00800044 	movi	r2,1
1010d20c:	f800283a 	ret
1010d210:	4a3ffd1e 	bne	r9,r8,1010d208 <__alt_data_end+0xfffed208>
1010d214:	21bffc1e 	bne	r4,r6,1010d208 <__alt_data_end+0xfffed208>
1010d218:	29c00c26 	beq	r5,r7,1010d24c <__eqdf2+0x80>
1010d21c:	103ffa1e 	bne	r2,zero,1010d208 <__alt_data_end+0xfffed208>
1010d220:	2244b03a 	or	r2,r4,r9
1010d224:	1004c03a 	cmpne	r2,r2,zero
1010d228:	f800283a 	ret
1010d22c:	3214b03a 	or	r10,r6,r8
1010d230:	503ff426 	beq	r10,zero,1010d204 <__alt_data_end+0xfffed204>
1010d234:	00800044 	movi	r2,1
1010d238:	f800283a 	ret
1010d23c:	2254b03a 	or	r10,r4,r9
1010d240:	503fee26 	beq	r10,zero,1010d1fc <__alt_data_end+0xfffed1fc>
1010d244:	00800044 	movi	r2,1
1010d248:	f800283a 	ret
1010d24c:	0005883a 	mov	r2,zero
1010d250:	f800283a 	ret

1010d254 <__gedf2>:
1010d254:	2804d53a 	srli	r2,r5,20
1010d258:	3806d53a 	srli	r3,r7,20
1010d25c:	02000434 	movhi	r8,16
1010d260:	423fffc4 	addi	r8,r8,-1
1010d264:	1081ffcc 	andi	r2,r2,2047
1010d268:	0241ffc4 	movi	r9,2047
1010d26c:	2a14703a 	and	r10,r5,r8
1010d270:	18c1ffcc 	andi	r3,r3,2047
1010d274:	3a10703a 	and	r8,r7,r8
1010d278:	280ad7fa 	srli	r5,r5,31
1010d27c:	380ed7fa 	srli	r7,r7,31
1010d280:	12401d26 	beq	r2,r9,1010d2f8 <__gedf2+0xa4>
1010d284:	0241ffc4 	movi	r9,2047
1010d288:	1a401226 	beq	r3,r9,1010d2d4 <__gedf2+0x80>
1010d28c:	1000081e 	bne	r2,zero,1010d2b0 <__gedf2+0x5c>
1010d290:	2296b03a 	or	r11,r4,r10
1010d294:	5813003a 	cmpeq	r9,r11,zero
1010d298:	1800091e 	bne	r3,zero,1010d2c0 <__gedf2+0x6c>
1010d29c:	3218b03a 	or	r12,r6,r8
1010d2a0:	6000071e 	bne	r12,zero,1010d2c0 <__gedf2+0x6c>
1010d2a4:	0005883a 	mov	r2,zero
1010d2a8:	5800101e 	bne	r11,zero,1010d2ec <__gedf2+0x98>
1010d2ac:	f800283a 	ret
1010d2b0:	18000c1e 	bne	r3,zero,1010d2e4 <__gedf2+0x90>
1010d2b4:	3212b03a 	or	r9,r6,r8
1010d2b8:	48000c26 	beq	r9,zero,1010d2ec <__gedf2+0x98>
1010d2bc:	0013883a 	mov	r9,zero
1010d2c0:	39c03fcc 	andi	r7,r7,255
1010d2c4:	48000826 	beq	r9,zero,1010d2e8 <__gedf2+0x94>
1010d2c8:	38000926 	beq	r7,zero,1010d2f0 <__gedf2+0x9c>
1010d2cc:	00800044 	movi	r2,1
1010d2d0:	f800283a 	ret
1010d2d4:	3212b03a 	or	r9,r6,r8
1010d2d8:	483fec26 	beq	r9,zero,1010d28c <__alt_data_end+0xfffed28c>
1010d2dc:	00bfff84 	movi	r2,-2
1010d2e0:	f800283a 	ret
1010d2e4:	39c03fcc 	andi	r7,r7,255
1010d2e8:	29c00626 	beq	r5,r7,1010d304 <__gedf2+0xb0>
1010d2ec:	283ff726 	beq	r5,zero,1010d2cc <__alt_data_end+0xfffed2cc>
1010d2f0:	00bfffc4 	movi	r2,-1
1010d2f4:	f800283a 	ret
1010d2f8:	2292b03a 	or	r9,r4,r10
1010d2fc:	483fe126 	beq	r9,zero,1010d284 <__alt_data_end+0xfffed284>
1010d300:	003ff606 	br	1010d2dc <__alt_data_end+0xfffed2dc>
1010d304:	18bff916 	blt	r3,r2,1010d2ec <__alt_data_end+0xfffed2ec>
1010d308:	10c00316 	blt	r2,r3,1010d318 <__gedf2+0xc4>
1010d30c:	42bff736 	bltu	r8,r10,1010d2ec <__alt_data_end+0xfffed2ec>
1010d310:	52000326 	beq	r10,r8,1010d320 <__gedf2+0xcc>
1010d314:	5200042e 	bgeu	r10,r8,1010d328 <__gedf2+0xd4>
1010d318:	283fec1e 	bne	r5,zero,1010d2cc <__alt_data_end+0xfffed2cc>
1010d31c:	003ff406 	br	1010d2f0 <__alt_data_end+0xfffed2f0>
1010d320:	313ff236 	bltu	r6,r4,1010d2ec <__alt_data_end+0xfffed2ec>
1010d324:	21bffc36 	bltu	r4,r6,1010d318 <__alt_data_end+0xfffed318>
1010d328:	0005883a 	mov	r2,zero
1010d32c:	f800283a 	ret

1010d330 <__ledf2>:
1010d330:	2804d53a 	srli	r2,r5,20
1010d334:	3810d53a 	srli	r8,r7,20
1010d338:	00c00434 	movhi	r3,16
1010d33c:	18ffffc4 	addi	r3,r3,-1
1010d340:	1081ffcc 	andi	r2,r2,2047
1010d344:	0241ffc4 	movi	r9,2047
1010d348:	28d4703a 	and	r10,r5,r3
1010d34c:	4201ffcc 	andi	r8,r8,2047
1010d350:	38c6703a 	and	r3,r7,r3
1010d354:	280ad7fa 	srli	r5,r5,31
1010d358:	380ed7fa 	srli	r7,r7,31
1010d35c:	12401f26 	beq	r2,r9,1010d3dc <__ledf2+0xac>
1010d360:	0241ffc4 	movi	r9,2047
1010d364:	42401426 	beq	r8,r9,1010d3b8 <__ledf2+0x88>
1010d368:	1000091e 	bne	r2,zero,1010d390 <__ledf2+0x60>
1010d36c:	2296b03a 	or	r11,r4,r10
1010d370:	5813003a 	cmpeq	r9,r11,zero
1010d374:	29403fcc 	andi	r5,r5,255
1010d378:	40000a1e 	bne	r8,zero,1010d3a4 <__ledf2+0x74>
1010d37c:	30d8b03a 	or	r12,r6,r3
1010d380:	6000081e 	bne	r12,zero,1010d3a4 <__ledf2+0x74>
1010d384:	0005883a 	mov	r2,zero
1010d388:	5800111e 	bne	r11,zero,1010d3d0 <__ledf2+0xa0>
1010d38c:	f800283a 	ret
1010d390:	29403fcc 	andi	r5,r5,255
1010d394:	40000c1e 	bne	r8,zero,1010d3c8 <__ledf2+0x98>
1010d398:	30d2b03a 	or	r9,r6,r3
1010d39c:	48000c26 	beq	r9,zero,1010d3d0 <__ledf2+0xa0>
1010d3a0:	0013883a 	mov	r9,zero
1010d3a4:	39c03fcc 	andi	r7,r7,255
1010d3a8:	48000826 	beq	r9,zero,1010d3cc <__ledf2+0x9c>
1010d3ac:	38001126 	beq	r7,zero,1010d3f4 <__ledf2+0xc4>
1010d3b0:	00800044 	movi	r2,1
1010d3b4:	f800283a 	ret
1010d3b8:	30d2b03a 	or	r9,r6,r3
1010d3bc:	483fea26 	beq	r9,zero,1010d368 <__alt_data_end+0xfffed368>
1010d3c0:	00800084 	movi	r2,2
1010d3c4:	f800283a 	ret
1010d3c8:	39c03fcc 	andi	r7,r7,255
1010d3cc:	39400726 	beq	r7,r5,1010d3ec <__ledf2+0xbc>
1010d3d0:	2800081e 	bne	r5,zero,1010d3f4 <__ledf2+0xc4>
1010d3d4:	00800044 	movi	r2,1
1010d3d8:	f800283a 	ret
1010d3dc:	2292b03a 	or	r9,r4,r10
1010d3e0:	483fdf26 	beq	r9,zero,1010d360 <__alt_data_end+0xfffed360>
1010d3e4:	00800084 	movi	r2,2
1010d3e8:	f800283a 	ret
1010d3ec:	4080030e 	bge	r8,r2,1010d3fc <__ledf2+0xcc>
1010d3f0:	383fef26 	beq	r7,zero,1010d3b0 <__alt_data_end+0xfffed3b0>
1010d3f4:	00bfffc4 	movi	r2,-1
1010d3f8:	f800283a 	ret
1010d3fc:	123feb16 	blt	r2,r8,1010d3ac <__alt_data_end+0xfffed3ac>
1010d400:	1abff336 	bltu	r3,r10,1010d3d0 <__alt_data_end+0xfffed3d0>
1010d404:	50c00326 	beq	r10,r3,1010d414 <__ledf2+0xe4>
1010d408:	50c0042e 	bgeu	r10,r3,1010d41c <__ledf2+0xec>
1010d40c:	283fe81e 	bne	r5,zero,1010d3b0 <__alt_data_end+0xfffed3b0>
1010d410:	003ff806 	br	1010d3f4 <__alt_data_end+0xfffed3f4>
1010d414:	313fee36 	bltu	r6,r4,1010d3d0 <__alt_data_end+0xfffed3d0>
1010d418:	21bffc36 	bltu	r4,r6,1010d40c <__alt_data_end+0xfffed40c>
1010d41c:	0005883a 	mov	r2,zero
1010d420:	f800283a 	ret

1010d424 <__muldf3>:
1010d424:	defff304 	addi	sp,sp,-52
1010d428:	dd400815 	stw	r21,32(sp)
1010d42c:	282ad53a 	srli	r21,r5,20
1010d430:	dd800915 	stw	r22,36(sp)
1010d434:	282cd7fa 	srli	r22,r5,31
1010d438:	dc000315 	stw	r16,12(sp)
1010d43c:	04000434 	movhi	r16,16
1010d440:	dd000715 	stw	r20,28(sp)
1010d444:	843fffc4 	addi	r16,r16,-1
1010d448:	dfc00c15 	stw	ra,48(sp)
1010d44c:	df000b15 	stw	fp,44(sp)
1010d450:	ddc00a15 	stw	r23,40(sp)
1010d454:	dcc00615 	stw	r19,24(sp)
1010d458:	dc800515 	stw	r18,20(sp)
1010d45c:	dc400415 	stw	r17,16(sp)
1010d460:	ad41ffcc 	andi	r21,r21,2047
1010d464:	2c20703a 	and	r16,r5,r16
1010d468:	b029883a 	mov	r20,r22
1010d46c:	b2403fcc 	andi	r9,r22,255
1010d470:	a8006026 	beq	r21,zero,1010d5f4 <__muldf3+0x1d0>
1010d474:	0081ffc4 	movi	r2,2047
1010d478:	2027883a 	mov	r19,r4
1010d47c:	a8803626 	beq	r21,r2,1010d558 <__muldf3+0x134>
1010d480:	80c00434 	orhi	r3,r16,16
1010d484:	180690fa 	slli	r3,r3,3
1010d488:	2020d77a 	srli	r16,r4,29
1010d48c:	202690fa 	slli	r19,r4,3
1010d490:	ad7f0044 	addi	r21,r21,-1023
1010d494:	80e0b03a 	or	r16,r16,r3
1010d498:	0025883a 	mov	r18,zero
1010d49c:	0039883a 	mov	fp,zero
1010d4a0:	3808d53a 	srli	r4,r7,20
1010d4a4:	382ed7fa 	srli	r23,r7,31
1010d4a8:	04400434 	movhi	r17,16
1010d4ac:	8c7fffc4 	addi	r17,r17,-1
1010d4b0:	2101ffcc 	andi	r4,r4,2047
1010d4b4:	3011883a 	mov	r8,r6
1010d4b8:	3c62703a 	and	r17,r7,r17
1010d4bc:	ba803fcc 	andi	r10,r23,255
1010d4c0:	20006d26 	beq	r4,zero,1010d678 <__muldf3+0x254>
1010d4c4:	0081ffc4 	movi	r2,2047
1010d4c8:	20806526 	beq	r4,r2,1010d660 <__muldf3+0x23c>
1010d4cc:	88c00434 	orhi	r3,r17,16
1010d4d0:	180690fa 	slli	r3,r3,3
1010d4d4:	3022d77a 	srli	r17,r6,29
1010d4d8:	301090fa 	slli	r8,r6,3
1010d4dc:	213f0044 	addi	r4,r4,-1023
1010d4e0:	88e2b03a 	or	r17,r17,r3
1010d4e4:	000b883a 	mov	r5,zero
1010d4e8:	a909883a 	add	r4,r21,r4
1010d4ec:	2c84b03a 	or	r2,r5,r18
1010d4f0:	00c003c4 	movi	r3,15
1010d4f4:	bdacf03a 	xor	r22,r23,r22
1010d4f8:	22c00044 	addi	r11,r4,1
1010d4fc:	18809936 	bltu	r3,r2,1010d764 <__muldf3+0x340>
1010d500:	100490ba 	slli	r2,r2,2
1010d504:	00c40474 	movhi	r3,4113
1010d508:	18f54604 	addi	r3,r3,-10984
1010d50c:	10c5883a 	add	r2,r2,r3
1010d510:	10800017 	ldw	r2,0(r2)
1010d514:	1000683a 	jmp	r2
1010d518:	1010d764 	muli	zero,r2,17245
1010d51c:	1010d578 	rdprs	zero,r2,17237
1010d520:	1010d578 	rdprs	zero,r2,17237
1010d524:	1010d574 	orhi	zero,r2,17237
1010d528:	1010d740 	call	11010d74 <__alt_data_end+0xef0d74>
1010d52c:	1010d740 	call	11010d74 <__alt_data_end+0xef0d74>
1010d530:	1010d728 	cmpgeui	zero,r2,17244
1010d534:	1010d574 	orhi	zero,r2,17237
1010d538:	1010d740 	call	11010d74 <__alt_data_end+0xef0d74>
1010d53c:	1010d728 	cmpgeui	zero,r2,17244
1010d540:	1010d740 	call	11010d74 <__alt_data_end+0xef0d74>
1010d544:	1010d574 	orhi	zero,r2,17237
1010d548:	1010d750 	cmplti	zero,r2,17245
1010d54c:	1010d750 	cmplti	zero,r2,17245
1010d550:	1010d750 	cmplti	zero,r2,17245
1010d554:	1010d96c 	andhi	zero,r2,17253
1010d558:	2404b03a 	or	r2,r4,r16
1010d55c:	10006f1e 	bne	r2,zero,1010d71c <__muldf3+0x2f8>
1010d560:	04800204 	movi	r18,8
1010d564:	0021883a 	mov	r16,zero
1010d568:	0027883a 	mov	r19,zero
1010d56c:	07000084 	movi	fp,2
1010d570:	003fcb06 	br	1010d4a0 <__alt_data_end+0xfffed4a0>
1010d574:	502d883a 	mov	r22,r10
1010d578:	00800084 	movi	r2,2
1010d57c:	28805726 	beq	r5,r2,1010d6dc <__muldf3+0x2b8>
1010d580:	008000c4 	movi	r2,3
1010d584:	28816626 	beq	r5,r2,1010db20 <__muldf3+0x6fc>
1010d588:	00800044 	movi	r2,1
1010d58c:	2881411e 	bne	r5,r2,1010da94 <__muldf3+0x670>
1010d590:	b029883a 	mov	r20,r22
1010d594:	0005883a 	mov	r2,zero
1010d598:	000b883a 	mov	r5,zero
1010d59c:	0027883a 	mov	r19,zero
1010d5a0:	1004953a 	slli	r2,r2,20
1010d5a4:	a0c03fcc 	andi	r3,r20,255
1010d5a8:	04400434 	movhi	r17,16
1010d5ac:	8c7fffc4 	addi	r17,r17,-1
1010d5b0:	180697fa 	slli	r3,r3,31
1010d5b4:	2c4a703a 	and	r5,r5,r17
1010d5b8:	288ab03a 	or	r5,r5,r2
1010d5bc:	28c6b03a 	or	r3,r5,r3
1010d5c0:	9805883a 	mov	r2,r19
1010d5c4:	dfc00c17 	ldw	ra,48(sp)
1010d5c8:	df000b17 	ldw	fp,44(sp)
1010d5cc:	ddc00a17 	ldw	r23,40(sp)
1010d5d0:	dd800917 	ldw	r22,36(sp)
1010d5d4:	dd400817 	ldw	r21,32(sp)
1010d5d8:	dd000717 	ldw	r20,28(sp)
1010d5dc:	dcc00617 	ldw	r19,24(sp)
1010d5e0:	dc800517 	ldw	r18,20(sp)
1010d5e4:	dc400417 	ldw	r17,16(sp)
1010d5e8:	dc000317 	ldw	r16,12(sp)
1010d5ec:	dec00d04 	addi	sp,sp,52
1010d5f0:	f800283a 	ret
1010d5f4:	2404b03a 	or	r2,r4,r16
1010d5f8:	2025883a 	mov	r18,r4
1010d5fc:	10004226 	beq	r2,zero,1010d708 <__muldf3+0x2e4>
1010d600:	8000fc26 	beq	r16,zero,1010d9f4 <__muldf3+0x5d0>
1010d604:	8009883a 	mov	r4,r16
1010d608:	d9800215 	stw	r6,8(sp)
1010d60c:	d9c00015 	stw	r7,0(sp)
1010d610:	da400115 	stw	r9,4(sp)
1010d614:	010e63c0 	call	1010e63c <__clzsi2>
1010d618:	d9800217 	ldw	r6,8(sp)
1010d61c:	d9c00017 	ldw	r7,0(sp)
1010d620:	da400117 	ldw	r9,4(sp)
1010d624:	10fffd44 	addi	r3,r2,-11
1010d628:	01000704 	movi	r4,28
1010d62c:	20c0ed16 	blt	r4,r3,1010d9e4 <__muldf3+0x5c0>
1010d630:	01000744 	movi	r4,29
1010d634:	147ffe04 	addi	r17,r2,-8
1010d638:	20c9c83a 	sub	r4,r4,r3
1010d63c:	8460983a 	sll	r16,r16,r17
1010d640:	9108d83a 	srl	r4,r18,r4
1010d644:	9466983a 	sll	r19,r18,r17
1010d648:	2420b03a 	or	r16,r4,r16
1010d64c:	013f0084 	movi	r4,-1022
1010d650:	20ebc83a 	sub	r21,r4,r3
1010d654:	0025883a 	mov	r18,zero
1010d658:	0039883a 	mov	fp,zero
1010d65c:	003f9006 	br	1010d4a0 <__alt_data_end+0xfffed4a0>
1010d660:	3444b03a 	or	r2,r6,r17
1010d664:	1000261e 	bne	r2,zero,1010d700 <__muldf3+0x2dc>
1010d668:	0023883a 	mov	r17,zero
1010d66c:	0011883a 	mov	r8,zero
1010d670:	01400084 	movi	r5,2
1010d674:	003f9c06 	br	1010d4e8 <__alt_data_end+0xfffed4e8>
1010d678:	3444b03a 	or	r2,r6,r17
1010d67c:	10001c26 	beq	r2,zero,1010d6f0 <__muldf3+0x2cc>
1010d680:	8800ce26 	beq	r17,zero,1010d9bc <__muldf3+0x598>
1010d684:	8809883a 	mov	r4,r17
1010d688:	d9800215 	stw	r6,8(sp)
1010d68c:	da400115 	stw	r9,4(sp)
1010d690:	da800015 	stw	r10,0(sp)
1010d694:	010e63c0 	call	1010e63c <__clzsi2>
1010d698:	d9800217 	ldw	r6,8(sp)
1010d69c:	da400117 	ldw	r9,4(sp)
1010d6a0:	da800017 	ldw	r10,0(sp)
1010d6a4:	113ffd44 	addi	r4,r2,-11
1010d6a8:	00c00704 	movi	r3,28
1010d6ac:	1900bf16 	blt	r3,r4,1010d9ac <__muldf3+0x588>
1010d6b0:	00c00744 	movi	r3,29
1010d6b4:	123ffe04 	addi	r8,r2,-8
1010d6b8:	1907c83a 	sub	r3,r3,r4
1010d6bc:	8a22983a 	sll	r17,r17,r8
1010d6c0:	30c6d83a 	srl	r3,r6,r3
1010d6c4:	3210983a 	sll	r8,r6,r8
1010d6c8:	1c62b03a 	or	r17,r3,r17
1010d6cc:	017f0084 	movi	r5,-1022
1010d6d0:	2909c83a 	sub	r4,r5,r4
1010d6d4:	000b883a 	mov	r5,zero
1010d6d8:	003f8306 	br	1010d4e8 <__alt_data_end+0xfffed4e8>
1010d6dc:	b029883a 	mov	r20,r22
1010d6e0:	0081ffc4 	movi	r2,2047
1010d6e4:	000b883a 	mov	r5,zero
1010d6e8:	0027883a 	mov	r19,zero
1010d6ec:	003fac06 	br	1010d5a0 <__alt_data_end+0xfffed5a0>
1010d6f0:	0023883a 	mov	r17,zero
1010d6f4:	0011883a 	mov	r8,zero
1010d6f8:	01400044 	movi	r5,1
1010d6fc:	003f7a06 	br	1010d4e8 <__alt_data_end+0xfffed4e8>
1010d700:	014000c4 	movi	r5,3
1010d704:	003f7806 	br	1010d4e8 <__alt_data_end+0xfffed4e8>
1010d708:	04800104 	movi	r18,4
1010d70c:	0021883a 	mov	r16,zero
1010d710:	0027883a 	mov	r19,zero
1010d714:	07000044 	movi	fp,1
1010d718:	003f6106 	br	1010d4a0 <__alt_data_end+0xfffed4a0>
1010d71c:	04800304 	movi	r18,12
1010d720:	070000c4 	movi	fp,3
1010d724:	003f5e06 	br	1010d4a0 <__alt_data_end+0xfffed4a0>
1010d728:	01400434 	movhi	r5,16
1010d72c:	0029883a 	mov	r20,zero
1010d730:	297fffc4 	addi	r5,r5,-1
1010d734:	04ffffc4 	movi	r19,-1
1010d738:	0081ffc4 	movi	r2,2047
1010d73c:	003f9806 	br	1010d5a0 <__alt_data_end+0xfffed5a0>
1010d740:	8023883a 	mov	r17,r16
1010d744:	9811883a 	mov	r8,r19
1010d748:	e00b883a 	mov	r5,fp
1010d74c:	003f8a06 	br	1010d578 <__alt_data_end+0xfffed578>
1010d750:	8023883a 	mov	r17,r16
1010d754:	9811883a 	mov	r8,r19
1010d758:	482d883a 	mov	r22,r9
1010d75c:	e00b883a 	mov	r5,fp
1010d760:	003f8506 	br	1010d578 <__alt_data_end+0xfffed578>
1010d764:	980ad43a 	srli	r5,r19,16
1010d768:	401ad43a 	srli	r13,r8,16
1010d76c:	9cffffcc 	andi	r19,r19,65535
1010d770:	423fffcc 	andi	r8,r8,65535
1010d774:	44d9383a 	mul	r12,r8,r19
1010d778:	4145383a 	mul	r2,r8,r5
1010d77c:	6ccd383a 	mul	r6,r13,r19
1010d780:	6006d43a 	srli	r3,r12,16
1010d784:	2b5d383a 	mul	r14,r5,r13
1010d788:	308d883a 	add	r6,r6,r2
1010d78c:	198d883a 	add	r6,r3,r6
1010d790:	3080022e 	bgeu	r6,r2,1010d79c <__muldf3+0x378>
1010d794:	00800074 	movhi	r2,1
1010d798:	709d883a 	add	r14,r14,r2
1010d79c:	8828d43a 	srli	r20,r17,16
1010d7a0:	8bffffcc 	andi	r15,r17,65535
1010d7a4:	7ce3383a 	mul	r17,r15,r19
1010d7a8:	7945383a 	mul	r2,r15,r5
1010d7ac:	a4e7383a 	mul	r19,r20,r19
1010d7b0:	8814d43a 	srli	r10,r17,16
1010d7b4:	3012943a 	slli	r9,r6,16
1010d7b8:	98a7883a 	add	r19,r19,r2
1010d7bc:	633fffcc 	andi	r12,r12,65535
1010d7c0:	54d5883a 	add	r10,r10,r19
1010d7c4:	3006d43a 	srli	r3,r6,16
1010d7c8:	4b13883a 	add	r9,r9,r12
1010d7cc:	2d0b383a 	mul	r5,r5,r20
1010d7d0:	5080022e 	bgeu	r10,r2,1010d7dc <__muldf3+0x3b8>
1010d7d4:	00800074 	movhi	r2,1
1010d7d8:	288b883a 	add	r5,r5,r2
1010d7dc:	802ad43a 	srli	r21,r16,16
1010d7e0:	843fffcc 	andi	r16,r16,65535
1010d7e4:	440d383a 	mul	r6,r8,r16
1010d7e8:	4565383a 	mul	r18,r8,r21
1010d7ec:	8359383a 	mul	r12,r16,r13
1010d7f0:	500e943a 	slli	r7,r10,16
1010d7f4:	3010d43a 	srli	r8,r6,16
1010d7f8:	5026d43a 	srli	r19,r10,16
1010d7fc:	6499883a 	add	r12,r12,r18
1010d800:	8abfffcc 	andi	r10,r17,65535
1010d804:	3a95883a 	add	r10,r7,r10
1010d808:	4319883a 	add	r12,r8,r12
1010d80c:	9967883a 	add	r19,r19,r5
1010d810:	1a87883a 	add	r3,r3,r10
1010d814:	6d5b383a 	mul	r13,r13,r21
1010d818:	6480022e 	bgeu	r12,r18,1010d824 <__muldf3+0x400>
1010d81c:	00800074 	movhi	r2,1
1010d820:	689b883a 	add	r13,r13,r2
1010d824:	7c25383a 	mul	r18,r15,r16
1010d828:	7d4b383a 	mul	r5,r15,r21
1010d82c:	850f383a 	mul	r7,r16,r20
1010d830:	901ed43a 	srli	r15,r18,16
1010d834:	6004d43a 	srli	r2,r12,16
1010d838:	6010943a 	slli	r8,r12,16
1010d83c:	394f883a 	add	r7,r7,r5
1010d840:	333fffcc 	andi	r12,r6,65535
1010d844:	79df883a 	add	r15,r15,r7
1010d848:	135b883a 	add	r13,r2,r13
1010d84c:	a563383a 	mul	r17,r20,r21
1010d850:	4305883a 	add	r2,r8,r12
1010d854:	7940022e 	bgeu	r15,r5,1010d860 <__muldf3+0x43c>
1010d858:	01400074 	movhi	r5,1
1010d85c:	8963883a 	add	r17,r17,r5
1010d860:	780a943a 	slli	r5,r15,16
1010d864:	91bfffcc 	andi	r6,r18,65535
1010d868:	70c7883a 	add	r3,r14,r3
1010d86c:	298d883a 	add	r6,r5,r6
1010d870:	1a8f803a 	cmpltu	r7,r3,r10
1010d874:	34cb883a 	add	r5,r6,r19
1010d878:	10c7883a 	add	r3,r2,r3
1010d87c:	3955883a 	add	r10,r7,r5
1010d880:	1885803a 	cmpltu	r2,r3,r2
1010d884:	6a91883a 	add	r8,r13,r10
1010d888:	780cd43a 	srli	r6,r15,16
1010d88c:	1219883a 	add	r12,r2,r8
1010d890:	2ccb803a 	cmpltu	r5,r5,r19
1010d894:	51cf803a 	cmpltu	r7,r10,r7
1010d898:	29ceb03a 	or	r7,r5,r7
1010d89c:	4351803a 	cmpltu	r8,r8,r13
1010d8a0:	608b803a 	cmpltu	r5,r12,r2
1010d8a4:	4144b03a 	or	r2,r8,r5
1010d8a8:	398f883a 	add	r7,r7,r6
1010d8ac:	3885883a 	add	r2,r7,r2
1010d8b0:	1810927a 	slli	r8,r3,9
1010d8b4:	1445883a 	add	r2,r2,r17
1010d8b8:	1004927a 	slli	r2,r2,9
1010d8bc:	6022d5fa 	srli	r17,r12,23
1010d8c0:	1806d5fa 	srli	r3,r3,23
1010d8c4:	4252b03a 	or	r9,r8,r9
1010d8c8:	600a927a 	slli	r5,r12,9
1010d8cc:	4810c03a 	cmpne	r8,r9,zero
1010d8d0:	1462b03a 	or	r17,r2,r17
1010d8d4:	40c6b03a 	or	r3,r8,r3
1010d8d8:	8880402c 	andhi	r2,r17,256
1010d8dc:	1950b03a 	or	r8,r3,r5
1010d8e0:	10000726 	beq	r2,zero,1010d900 <__muldf3+0x4dc>
1010d8e4:	4006d07a 	srli	r3,r8,1
1010d8e8:	880497fa 	slli	r2,r17,31
1010d8ec:	4200004c 	andi	r8,r8,1
1010d8f0:	8822d07a 	srli	r17,r17,1
1010d8f4:	1a10b03a 	or	r8,r3,r8
1010d8f8:	1210b03a 	or	r8,r2,r8
1010d8fc:	5809883a 	mov	r4,r11
1010d900:	2080ffc4 	addi	r2,r4,1023
1010d904:	0080440e 	bge	zero,r2,1010da18 <__muldf3+0x5f4>
1010d908:	40c001cc 	andi	r3,r8,7
1010d90c:	18000726 	beq	r3,zero,1010d92c <__muldf3+0x508>
1010d910:	40c003cc 	andi	r3,r8,15
1010d914:	01400104 	movi	r5,4
1010d918:	19400426 	beq	r3,r5,1010d92c <__muldf3+0x508>
1010d91c:	4147883a 	add	r3,r8,r5
1010d920:	1a11803a 	cmpltu	r8,r3,r8
1010d924:	8a23883a 	add	r17,r17,r8
1010d928:	1811883a 	mov	r8,r3
1010d92c:	88c0402c 	andhi	r3,r17,256
1010d930:	18000426 	beq	r3,zero,1010d944 <__muldf3+0x520>
1010d934:	00ffc034 	movhi	r3,65280
1010d938:	18ffffc4 	addi	r3,r3,-1
1010d93c:	20810004 	addi	r2,r4,1024
1010d940:	88e2703a 	and	r17,r17,r3
1010d944:	00c1ff84 	movi	r3,2046
1010d948:	18bf6416 	blt	r3,r2,1010d6dc <__alt_data_end+0xfffed6dc>
1010d94c:	8826977a 	slli	r19,r17,29
1010d950:	4010d0fa 	srli	r8,r8,3
1010d954:	8822927a 	slli	r17,r17,9
1010d958:	1081ffcc 	andi	r2,r2,2047
1010d95c:	9a26b03a 	or	r19,r19,r8
1010d960:	880ad33a 	srli	r5,r17,12
1010d964:	b029883a 	mov	r20,r22
1010d968:	003f0d06 	br	1010d5a0 <__alt_data_end+0xfffed5a0>
1010d96c:	8080022c 	andhi	r2,r16,8
1010d970:	10000926 	beq	r2,zero,1010d998 <__muldf3+0x574>
1010d974:	8880022c 	andhi	r2,r17,8
1010d978:	1000071e 	bne	r2,zero,1010d998 <__muldf3+0x574>
1010d97c:	00800434 	movhi	r2,16
1010d980:	89400234 	orhi	r5,r17,8
1010d984:	10bfffc4 	addi	r2,r2,-1
1010d988:	b829883a 	mov	r20,r23
1010d98c:	288a703a 	and	r5,r5,r2
1010d990:	4027883a 	mov	r19,r8
1010d994:	003f6806 	br	1010d738 <__alt_data_end+0xfffed738>
1010d998:	00800434 	movhi	r2,16
1010d99c:	81400234 	orhi	r5,r16,8
1010d9a0:	10bfffc4 	addi	r2,r2,-1
1010d9a4:	288a703a 	and	r5,r5,r2
1010d9a8:	003f6306 	br	1010d738 <__alt_data_end+0xfffed738>
1010d9ac:	10bff604 	addi	r2,r2,-40
1010d9b0:	30a2983a 	sll	r17,r6,r2
1010d9b4:	0011883a 	mov	r8,zero
1010d9b8:	003f4406 	br	1010d6cc <__alt_data_end+0xfffed6cc>
1010d9bc:	3009883a 	mov	r4,r6
1010d9c0:	d9800215 	stw	r6,8(sp)
1010d9c4:	da400115 	stw	r9,4(sp)
1010d9c8:	da800015 	stw	r10,0(sp)
1010d9cc:	010e63c0 	call	1010e63c <__clzsi2>
1010d9d0:	10800804 	addi	r2,r2,32
1010d9d4:	da800017 	ldw	r10,0(sp)
1010d9d8:	da400117 	ldw	r9,4(sp)
1010d9dc:	d9800217 	ldw	r6,8(sp)
1010d9e0:	003f3006 	br	1010d6a4 <__alt_data_end+0xfffed6a4>
1010d9e4:	10bff604 	addi	r2,r2,-40
1010d9e8:	90a0983a 	sll	r16,r18,r2
1010d9ec:	0027883a 	mov	r19,zero
1010d9f0:	003f1606 	br	1010d64c <__alt_data_end+0xfffed64c>
1010d9f4:	d9800215 	stw	r6,8(sp)
1010d9f8:	d9c00015 	stw	r7,0(sp)
1010d9fc:	da400115 	stw	r9,4(sp)
1010da00:	010e63c0 	call	1010e63c <__clzsi2>
1010da04:	10800804 	addi	r2,r2,32
1010da08:	da400117 	ldw	r9,4(sp)
1010da0c:	d9c00017 	ldw	r7,0(sp)
1010da10:	d9800217 	ldw	r6,8(sp)
1010da14:	003f0306 	br	1010d624 <__alt_data_end+0xfffed624>
1010da18:	00c00044 	movi	r3,1
1010da1c:	1887c83a 	sub	r3,r3,r2
1010da20:	01000e04 	movi	r4,56
1010da24:	20feda16 	blt	r4,r3,1010d590 <__alt_data_end+0xfffed590>
1010da28:	010007c4 	movi	r4,31
1010da2c:	20c01b16 	blt	r4,r3,1010da9c <__muldf3+0x678>
1010da30:	00800804 	movi	r2,32
1010da34:	10c5c83a 	sub	r2,r2,r3
1010da38:	888a983a 	sll	r5,r17,r2
1010da3c:	40c8d83a 	srl	r4,r8,r3
1010da40:	4084983a 	sll	r2,r8,r2
1010da44:	88e2d83a 	srl	r17,r17,r3
1010da48:	2906b03a 	or	r3,r5,r4
1010da4c:	1004c03a 	cmpne	r2,r2,zero
1010da50:	1886b03a 	or	r3,r3,r2
1010da54:	188001cc 	andi	r2,r3,7
1010da58:	10000726 	beq	r2,zero,1010da78 <__muldf3+0x654>
1010da5c:	188003cc 	andi	r2,r3,15
1010da60:	01000104 	movi	r4,4
1010da64:	11000426 	beq	r2,r4,1010da78 <__muldf3+0x654>
1010da68:	1805883a 	mov	r2,r3
1010da6c:	10c00104 	addi	r3,r2,4
1010da70:	1885803a 	cmpltu	r2,r3,r2
1010da74:	88a3883a 	add	r17,r17,r2
1010da78:	8880202c 	andhi	r2,r17,128
1010da7c:	10001c26 	beq	r2,zero,1010daf0 <__muldf3+0x6cc>
1010da80:	b029883a 	mov	r20,r22
1010da84:	00800044 	movi	r2,1
1010da88:	000b883a 	mov	r5,zero
1010da8c:	0027883a 	mov	r19,zero
1010da90:	003ec306 	br	1010d5a0 <__alt_data_end+0xfffed5a0>
1010da94:	5809883a 	mov	r4,r11
1010da98:	003f9906 	br	1010d900 <__alt_data_end+0xfffed900>
1010da9c:	013ff844 	movi	r4,-31
1010daa0:	2085c83a 	sub	r2,r4,r2
1010daa4:	8888d83a 	srl	r4,r17,r2
1010daa8:	00800804 	movi	r2,32
1010daac:	18801a26 	beq	r3,r2,1010db18 <__muldf3+0x6f4>
1010dab0:	00801004 	movi	r2,64
1010dab4:	10c5c83a 	sub	r2,r2,r3
1010dab8:	8884983a 	sll	r2,r17,r2
1010dabc:	1204b03a 	or	r2,r2,r8
1010dac0:	1004c03a 	cmpne	r2,r2,zero
1010dac4:	2084b03a 	or	r2,r4,r2
1010dac8:	144001cc 	andi	r17,r2,7
1010dacc:	88000d1e 	bne	r17,zero,1010db04 <__muldf3+0x6e0>
1010dad0:	000b883a 	mov	r5,zero
1010dad4:	1026d0fa 	srli	r19,r2,3
1010dad8:	b029883a 	mov	r20,r22
1010dadc:	0005883a 	mov	r2,zero
1010dae0:	9c66b03a 	or	r19,r19,r17
1010dae4:	003eae06 	br	1010d5a0 <__alt_data_end+0xfffed5a0>
1010dae8:	1007883a 	mov	r3,r2
1010daec:	0023883a 	mov	r17,zero
1010daf0:	880a927a 	slli	r5,r17,9
1010daf4:	1805883a 	mov	r2,r3
1010daf8:	8822977a 	slli	r17,r17,29
1010dafc:	280ad33a 	srli	r5,r5,12
1010db00:	003ff406 	br	1010dad4 <__alt_data_end+0xfffedad4>
1010db04:	10c003cc 	andi	r3,r2,15
1010db08:	01000104 	movi	r4,4
1010db0c:	193ff626 	beq	r3,r4,1010dae8 <__alt_data_end+0xfffedae8>
1010db10:	0023883a 	mov	r17,zero
1010db14:	003fd506 	br	1010da6c <__alt_data_end+0xfffeda6c>
1010db18:	0005883a 	mov	r2,zero
1010db1c:	003fe706 	br	1010dabc <__alt_data_end+0xfffedabc>
1010db20:	00800434 	movhi	r2,16
1010db24:	89400234 	orhi	r5,r17,8
1010db28:	10bfffc4 	addi	r2,r2,-1
1010db2c:	b029883a 	mov	r20,r22
1010db30:	288a703a 	and	r5,r5,r2
1010db34:	4027883a 	mov	r19,r8
1010db38:	003eff06 	br	1010d738 <__alt_data_end+0xfffed738>

1010db3c <__subdf3>:
1010db3c:	02000434 	movhi	r8,16
1010db40:	423fffc4 	addi	r8,r8,-1
1010db44:	defffb04 	addi	sp,sp,-20
1010db48:	2a14703a 	and	r10,r5,r8
1010db4c:	3812d53a 	srli	r9,r7,20
1010db50:	3a10703a 	and	r8,r7,r8
1010db54:	2006d77a 	srli	r3,r4,29
1010db58:	3004d77a 	srli	r2,r6,29
1010db5c:	dc000015 	stw	r16,0(sp)
1010db60:	501490fa 	slli	r10,r10,3
1010db64:	2820d53a 	srli	r16,r5,20
1010db68:	401090fa 	slli	r8,r8,3
1010db6c:	dc800215 	stw	r18,8(sp)
1010db70:	dc400115 	stw	r17,4(sp)
1010db74:	dfc00415 	stw	ra,16(sp)
1010db78:	202290fa 	slli	r17,r4,3
1010db7c:	dcc00315 	stw	r19,12(sp)
1010db80:	4a41ffcc 	andi	r9,r9,2047
1010db84:	0101ffc4 	movi	r4,2047
1010db88:	2824d7fa 	srli	r18,r5,31
1010db8c:	8401ffcc 	andi	r16,r16,2047
1010db90:	50c6b03a 	or	r3,r10,r3
1010db94:	380ed7fa 	srli	r7,r7,31
1010db98:	408ab03a 	or	r5,r8,r2
1010db9c:	300c90fa 	slli	r6,r6,3
1010dba0:	49009626 	beq	r9,r4,1010ddfc <__subdf3+0x2c0>
1010dba4:	39c0005c 	xori	r7,r7,1
1010dba8:	8245c83a 	sub	r2,r16,r9
1010dbac:	3c807426 	beq	r7,r18,1010dd80 <__subdf3+0x244>
1010dbb0:	0080af0e 	bge	zero,r2,1010de70 <__subdf3+0x334>
1010dbb4:	48002a1e 	bne	r9,zero,1010dc60 <__subdf3+0x124>
1010dbb8:	2988b03a 	or	r4,r5,r6
1010dbbc:	20009a1e 	bne	r4,zero,1010de28 <__subdf3+0x2ec>
1010dbc0:	888001cc 	andi	r2,r17,7
1010dbc4:	10000726 	beq	r2,zero,1010dbe4 <__subdf3+0xa8>
1010dbc8:	888003cc 	andi	r2,r17,15
1010dbcc:	01000104 	movi	r4,4
1010dbd0:	11000426 	beq	r2,r4,1010dbe4 <__subdf3+0xa8>
1010dbd4:	890b883a 	add	r5,r17,r4
1010dbd8:	2c63803a 	cmpltu	r17,r5,r17
1010dbdc:	1c47883a 	add	r3,r3,r17
1010dbe0:	2823883a 	mov	r17,r5
1010dbe4:	1880202c 	andhi	r2,r3,128
1010dbe8:	10005926 	beq	r2,zero,1010dd50 <__subdf3+0x214>
1010dbec:	84000044 	addi	r16,r16,1
1010dbf0:	0081ffc4 	movi	r2,2047
1010dbf4:	8080be26 	beq	r16,r2,1010def0 <__subdf3+0x3b4>
1010dbf8:	017fe034 	movhi	r5,65408
1010dbfc:	297fffc4 	addi	r5,r5,-1
1010dc00:	1946703a 	and	r3,r3,r5
1010dc04:	1804977a 	slli	r2,r3,29
1010dc08:	1806927a 	slli	r3,r3,9
1010dc0c:	8822d0fa 	srli	r17,r17,3
1010dc10:	8401ffcc 	andi	r16,r16,2047
1010dc14:	180ad33a 	srli	r5,r3,12
1010dc18:	9100004c 	andi	r4,r18,1
1010dc1c:	1444b03a 	or	r2,r2,r17
1010dc20:	80c1ffcc 	andi	r3,r16,2047
1010dc24:	1820953a 	slli	r16,r3,20
1010dc28:	20c03fcc 	andi	r3,r4,255
1010dc2c:	180897fa 	slli	r4,r3,31
1010dc30:	00c00434 	movhi	r3,16
1010dc34:	18ffffc4 	addi	r3,r3,-1
1010dc38:	28c6703a 	and	r3,r5,r3
1010dc3c:	1c06b03a 	or	r3,r3,r16
1010dc40:	1906b03a 	or	r3,r3,r4
1010dc44:	dfc00417 	ldw	ra,16(sp)
1010dc48:	dcc00317 	ldw	r19,12(sp)
1010dc4c:	dc800217 	ldw	r18,8(sp)
1010dc50:	dc400117 	ldw	r17,4(sp)
1010dc54:	dc000017 	ldw	r16,0(sp)
1010dc58:	dec00504 	addi	sp,sp,20
1010dc5c:	f800283a 	ret
1010dc60:	0101ffc4 	movi	r4,2047
1010dc64:	813fd626 	beq	r16,r4,1010dbc0 <__alt_data_end+0xfffedbc0>
1010dc68:	29402034 	orhi	r5,r5,128
1010dc6c:	01000e04 	movi	r4,56
1010dc70:	2080a316 	blt	r4,r2,1010df00 <__subdf3+0x3c4>
1010dc74:	010007c4 	movi	r4,31
1010dc78:	2080c616 	blt	r4,r2,1010df94 <__subdf3+0x458>
1010dc7c:	01000804 	movi	r4,32
1010dc80:	2089c83a 	sub	r4,r4,r2
1010dc84:	2910983a 	sll	r8,r5,r4
1010dc88:	308ed83a 	srl	r7,r6,r2
1010dc8c:	3108983a 	sll	r4,r6,r4
1010dc90:	2884d83a 	srl	r2,r5,r2
1010dc94:	41ccb03a 	or	r6,r8,r7
1010dc98:	2008c03a 	cmpne	r4,r4,zero
1010dc9c:	310cb03a 	or	r6,r6,r4
1010dca0:	898dc83a 	sub	r6,r17,r6
1010dca4:	89a3803a 	cmpltu	r17,r17,r6
1010dca8:	1887c83a 	sub	r3,r3,r2
1010dcac:	1c47c83a 	sub	r3,r3,r17
1010dcb0:	3023883a 	mov	r17,r6
1010dcb4:	1880202c 	andhi	r2,r3,128
1010dcb8:	10002326 	beq	r2,zero,1010dd48 <__subdf3+0x20c>
1010dcbc:	04c02034 	movhi	r19,128
1010dcc0:	9cffffc4 	addi	r19,r19,-1
1010dcc4:	1ce6703a 	and	r19,r3,r19
1010dcc8:	98007a26 	beq	r19,zero,1010deb4 <__subdf3+0x378>
1010dccc:	9809883a 	mov	r4,r19
1010dcd0:	010e63c0 	call	1010e63c <__clzsi2>
1010dcd4:	113ffe04 	addi	r4,r2,-8
1010dcd8:	00c007c4 	movi	r3,31
1010dcdc:	19007b16 	blt	r3,r4,1010decc <__subdf3+0x390>
1010dce0:	00800804 	movi	r2,32
1010dce4:	1105c83a 	sub	r2,r2,r4
1010dce8:	8884d83a 	srl	r2,r17,r2
1010dcec:	9906983a 	sll	r3,r19,r4
1010dcf0:	8922983a 	sll	r17,r17,r4
1010dcf4:	10c4b03a 	or	r2,r2,r3
1010dcf8:	24007816 	blt	r4,r16,1010dedc <__subdf3+0x3a0>
1010dcfc:	2421c83a 	sub	r16,r4,r16
1010dd00:	80c00044 	addi	r3,r16,1
1010dd04:	010007c4 	movi	r4,31
1010dd08:	20c09516 	blt	r4,r3,1010df60 <__subdf3+0x424>
1010dd0c:	01400804 	movi	r5,32
1010dd10:	28cbc83a 	sub	r5,r5,r3
1010dd14:	88c8d83a 	srl	r4,r17,r3
1010dd18:	8962983a 	sll	r17,r17,r5
1010dd1c:	114a983a 	sll	r5,r2,r5
1010dd20:	10c6d83a 	srl	r3,r2,r3
1010dd24:	8804c03a 	cmpne	r2,r17,zero
1010dd28:	290ab03a 	or	r5,r5,r4
1010dd2c:	28a2b03a 	or	r17,r5,r2
1010dd30:	0021883a 	mov	r16,zero
1010dd34:	003fa206 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010dd38:	2090b03a 	or	r8,r4,r2
1010dd3c:	40018e26 	beq	r8,zero,1010e378 <__subdf3+0x83c>
1010dd40:	1007883a 	mov	r3,r2
1010dd44:	2023883a 	mov	r17,r4
1010dd48:	888001cc 	andi	r2,r17,7
1010dd4c:	103f9e1e 	bne	r2,zero,1010dbc8 <__alt_data_end+0xfffedbc8>
1010dd50:	1804977a 	slli	r2,r3,29
1010dd54:	8822d0fa 	srli	r17,r17,3
1010dd58:	1810d0fa 	srli	r8,r3,3
1010dd5c:	9100004c 	andi	r4,r18,1
1010dd60:	1444b03a 	or	r2,r2,r17
1010dd64:	00c1ffc4 	movi	r3,2047
1010dd68:	80c02826 	beq	r16,r3,1010de0c <__subdf3+0x2d0>
1010dd6c:	01400434 	movhi	r5,16
1010dd70:	297fffc4 	addi	r5,r5,-1
1010dd74:	80e0703a 	and	r16,r16,r3
1010dd78:	414a703a 	and	r5,r8,r5
1010dd7c:	003fa806 	br	1010dc20 <__alt_data_end+0xfffedc20>
1010dd80:	0080630e 	bge	zero,r2,1010df10 <__subdf3+0x3d4>
1010dd84:	48003026 	beq	r9,zero,1010de48 <__subdf3+0x30c>
1010dd88:	0101ffc4 	movi	r4,2047
1010dd8c:	813f8c26 	beq	r16,r4,1010dbc0 <__alt_data_end+0xfffedbc0>
1010dd90:	29402034 	orhi	r5,r5,128
1010dd94:	01000e04 	movi	r4,56
1010dd98:	2080a90e 	bge	r4,r2,1010e040 <__subdf3+0x504>
1010dd9c:	298cb03a 	or	r6,r5,r6
1010dda0:	3012c03a 	cmpne	r9,r6,zero
1010dda4:	0005883a 	mov	r2,zero
1010dda8:	4c53883a 	add	r9,r9,r17
1010ddac:	4c63803a 	cmpltu	r17,r9,r17
1010ddb0:	10c7883a 	add	r3,r2,r3
1010ddb4:	88c7883a 	add	r3,r17,r3
1010ddb8:	4823883a 	mov	r17,r9
1010ddbc:	1880202c 	andhi	r2,r3,128
1010ddc0:	1000d026 	beq	r2,zero,1010e104 <__subdf3+0x5c8>
1010ddc4:	84000044 	addi	r16,r16,1
1010ddc8:	0081ffc4 	movi	r2,2047
1010ddcc:	8080fe26 	beq	r16,r2,1010e1c8 <__subdf3+0x68c>
1010ddd0:	00bfe034 	movhi	r2,65408
1010ddd4:	10bfffc4 	addi	r2,r2,-1
1010ddd8:	1886703a 	and	r3,r3,r2
1010dddc:	880ad07a 	srli	r5,r17,1
1010dde0:	180497fa 	slli	r2,r3,31
1010dde4:	8900004c 	andi	r4,r17,1
1010dde8:	2922b03a 	or	r17,r5,r4
1010ddec:	1806d07a 	srli	r3,r3,1
1010ddf0:	1462b03a 	or	r17,r2,r17
1010ddf4:	3825883a 	mov	r18,r7
1010ddf8:	003f7106 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010ddfc:	2984b03a 	or	r2,r5,r6
1010de00:	103f6826 	beq	r2,zero,1010dba4 <__alt_data_end+0xfffedba4>
1010de04:	39c03fcc 	andi	r7,r7,255
1010de08:	003f6706 	br	1010dba8 <__alt_data_end+0xfffedba8>
1010de0c:	4086b03a 	or	r3,r8,r2
1010de10:	18015226 	beq	r3,zero,1010e35c <__subdf3+0x820>
1010de14:	00c00434 	movhi	r3,16
1010de18:	41400234 	orhi	r5,r8,8
1010de1c:	18ffffc4 	addi	r3,r3,-1
1010de20:	28ca703a 	and	r5,r5,r3
1010de24:	003f7e06 	br	1010dc20 <__alt_data_end+0xfffedc20>
1010de28:	10bfffc4 	addi	r2,r2,-1
1010de2c:	1000491e 	bne	r2,zero,1010df54 <__subdf3+0x418>
1010de30:	898fc83a 	sub	r7,r17,r6
1010de34:	89e3803a 	cmpltu	r17,r17,r7
1010de38:	1947c83a 	sub	r3,r3,r5
1010de3c:	1c47c83a 	sub	r3,r3,r17
1010de40:	3823883a 	mov	r17,r7
1010de44:	003f9b06 	br	1010dcb4 <__alt_data_end+0xfffedcb4>
1010de48:	2988b03a 	or	r4,r5,r6
1010de4c:	203f5c26 	beq	r4,zero,1010dbc0 <__alt_data_end+0xfffedbc0>
1010de50:	10bfffc4 	addi	r2,r2,-1
1010de54:	1000931e 	bne	r2,zero,1010e0a4 <__subdf3+0x568>
1010de58:	898d883a 	add	r6,r17,r6
1010de5c:	3463803a 	cmpltu	r17,r6,r17
1010de60:	1947883a 	add	r3,r3,r5
1010de64:	88c7883a 	add	r3,r17,r3
1010de68:	3023883a 	mov	r17,r6
1010de6c:	003fd306 	br	1010ddbc <__alt_data_end+0xfffeddbc>
1010de70:	1000541e 	bne	r2,zero,1010dfc4 <__subdf3+0x488>
1010de74:	80800044 	addi	r2,r16,1
1010de78:	1081ffcc 	andi	r2,r2,2047
1010de7c:	01000044 	movi	r4,1
1010de80:	2080a20e 	bge	r4,r2,1010e10c <__subdf3+0x5d0>
1010de84:	8989c83a 	sub	r4,r17,r6
1010de88:	8905803a 	cmpltu	r2,r17,r4
1010de8c:	1967c83a 	sub	r19,r3,r5
1010de90:	98a7c83a 	sub	r19,r19,r2
1010de94:	9880202c 	andhi	r2,r19,128
1010de98:	10006326 	beq	r2,zero,1010e028 <__subdf3+0x4ec>
1010de9c:	3463c83a 	sub	r17,r6,r17
1010dea0:	28c7c83a 	sub	r3,r5,r3
1010dea4:	344d803a 	cmpltu	r6,r6,r17
1010dea8:	19a7c83a 	sub	r19,r3,r6
1010deac:	3825883a 	mov	r18,r7
1010deb0:	983f861e 	bne	r19,zero,1010dccc <__alt_data_end+0xfffedccc>
1010deb4:	8809883a 	mov	r4,r17
1010deb8:	010e63c0 	call	1010e63c <__clzsi2>
1010debc:	10800804 	addi	r2,r2,32
1010dec0:	113ffe04 	addi	r4,r2,-8
1010dec4:	00c007c4 	movi	r3,31
1010dec8:	193f850e 	bge	r3,r4,1010dce0 <__alt_data_end+0xfffedce0>
1010decc:	10bff604 	addi	r2,r2,-40
1010ded0:	8884983a 	sll	r2,r17,r2
1010ded4:	0023883a 	mov	r17,zero
1010ded8:	243f880e 	bge	r4,r16,1010dcfc <__alt_data_end+0xfffedcfc>
1010dedc:	00ffe034 	movhi	r3,65408
1010dee0:	18ffffc4 	addi	r3,r3,-1
1010dee4:	8121c83a 	sub	r16,r16,r4
1010dee8:	10c6703a 	and	r3,r2,r3
1010deec:	003f3406 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010def0:	9100004c 	andi	r4,r18,1
1010def4:	000b883a 	mov	r5,zero
1010def8:	0005883a 	mov	r2,zero
1010defc:	003f4806 	br	1010dc20 <__alt_data_end+0xfffedc20>
1010df00:	298cb03a 	or	r6,r5,r6
1010df04:	300cc03a 	cmpne	r6,r6,zero
1010df08:	0005883a 	mov	r2,zero
1010df0c:	003f6406 	br	1010dca0 <__alt_data_end+0xfffedca0>
1010df10:	10009a1e 	bne	r2,zero,1010e17c <__subdf3+0x640>
1010df14:	82400044 	addi	r9,r16,1
1010df18:	4881ffcc 	andi	r2,r9,2047
1010df1c:	02800044 	movi	r10,1
1010df20:	5080670e 	bge	r10,r2,1010e0c0 <__subdf3+0x584>
1010df24:	0081ffc4 	movi	r2,2047
1010df28:	4880af26 	beq	r9,r2,1010e1e8 <__subdf3+0x6ac>
1010df2c:	898d883a 	add	r6,r17,r6
1010df30:	1945883a 	add	r2,r3,r5
1010df34:	3447803a 	cmpltu	r3,r6,r17
1010df38:	1887883a 	add	r3,r3,r2
1010df3c:	182297fa 	slli	r17,r3,31
1010df40:	300cd07a 	srli	r6,r6,1
1010df44:	1806d07a 	srli	r3,r3,1
1010df48:	4821883a 	mov	r16,r9
1010df4c:	89a2b03a 	or	r17,r17,r6
1010df50:	003f1b06 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010df54:	0101ffc4 	movi	r4,2047
1010df58:	813f441e 	bne	r16,r4,1010dc6c <__alt_data_end+0xfffedc6c>
1010df5c:	003f1806 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010df60:	843ff844 	addi	r16,r16,-31
1010df64:	01400804 	movi	r5,32
1010df68:	1408d83a 	srl	r4,r2,r16
1010df6c:	19405026 	beq	r3,r5,1010e0b0 <__subdf3+0x574>
1010df70:	01401004 	movi	r5,64
1010df74:	28c7c83a 	sub	r3,r5,r3
1010df78:	10c4983a 	sll	r2,r2,r3
1010df7c:	88a2b03a 	or	r17,r17,r2
1010df80:	8822c03a 	cmpne	r17,r17,zero
1010df84:	2462b03a 	or	r17,r4,r17
1010df88:	0007883a 	mov	r3,zero
1010df8c:	0021883a 	mov	r16,zero
1010df90:	003f6d06 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010df94:	11fff804 	addi	r7,r2,-32
1010df98:	01000804 	movi	r4,32
1010df9c:	29ced83a 	srl	r7,r5,r7
1010dfa0:	11004526 	beq	r2,r4,1010e0b8 <__subdf3+0x57c>
1010dfa4:	01001004 	movi	r4,64
1010dfa8:	2089c83a 	sub	r4,r4,r2
1010dfac:	2904983a 	sll	r2,r5,r4
1010dfb0:	118cb03a 	or	r6,r2,r6
1010dfb4:	300cc03a 	cmpne	r6,r6,zero
1010dfb8:	398cb03a 	or	r6,r7,r6
1010dfbc:	0005883a 	mov	r2,zero
1010dfc0:	003f3706 	br	1010dca0 <__alt_data_end+0xfffedca0>
1010dfc4:	80002a26 	beq	r16,zero,1010e070 <__subdf3+0x534>
1010dfc8:	0101ffc4 	movi	r4,2047
1010dfcc:	49006626 	beq	r9,r4,1010e168 <__subdf3+0x62c>
1010dfd0:	0085c83a 	sub	r2,zero,r2
1010dfd4:	18c02034 	orhi	r3,r3,128
1010dfd8:	01000e04 	movi	r4,56
1010dfdc:	20807e16 	blt	r4,r2,1010e1d8 <__subdf3+0x69c>
1010dfe0:	010007c4 	movi	r4,31
1010dfe4:	2080e716 	blt	r4,r2,1010e384 <__subdf3+0x848>
1010dfe8:	01000804 	movi	r4,32
1010dfec:	2089c83a 	sub	r4,r4,r2
1010dff0:	1914983a 	sll	r10,r3,r4
1010dff4:	8890d83a 	srl	r8,r17,r2
1010dff8:	8908983a 	sll	r4,r17,r4
1010dffc:	1884d83a 	srl	r2,r3,r2
1010e000:	5222b03a 	or	r17,r10,r8
1010e004:	2006c03a 	cmpne	r3,r4,zero
1010e008:	88e2b03a 	or	r17,r17,r3
1010e00c:	3463c83a 	sub	r17,r6,r17
1010e010:	2885c83a 	sub	r2,r5,r2
1010e014:	344d803a 	cmpltu	r6,r6,r17
1010e018:	1187c83a 	sub	r3,r2,r6
1010e01c:	4821883a 	mov	r16,r9
1010e020:	3825883a 	mov	r18,r7
1010e024:	003f2306 	br	1010dcb4 <__alt_data_end+0xfffedcb4>
1010e028:	24d0b03a 	or	r8,r4,r19
1010e02c:	40001b1e 	bne	r8,zero,1010e09c <__subdf3+0x560>
1010e030:	0005883a 	mov	r2,zero
1010e034:	0009883a 	mov	r4,zero
1010e038:	0021883a 	mov	r16,zero
1010e03c:	003f4906 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e040:	010007c4 	movi	r4,31
1010e044:	20803a16 	blt	r4,r2,1010e130 <__subdf3+0x5f4>
1010e048:	01000804 	movi	r4,32
1010e04c:	2089c83a 	sub	r4,r4,r2
1010e050:	2912983a 	sll	r9,r5,r4
1010e054:	3090d83a 	srl	r8,r6,r2
1010e058:	3108983a 	sll	r4,r6,r4
1010e05c:	2884d83a 	srl	r2,r5,r2
1010e060:	4a12b03a 	or	r9,r9,r8
1010e064:	2008c03a 	cmpne	r4,r4,zero
1010e068:	4912b03a 	or	r9,r9,r4
1010e06c:	003f4e06 	br	1010dda8 <__alt_data_end+0xfffedda8>
1010e070:	1c48b03a 	or	r4,r3,r17
1010e074:	20003c26 	beq	r4,zero,1010e168 <__subdf3+0x62c>
1010e078:	0084303a 	nor	r2,zero,r2
1010e07c:	1000381e 	bne	r2,zero,1010e160 <__subdf3+0x624>
1010e080:	3463c83a 	sub	r17,r6,r17
1010e084:	28c5c83a 	sub	r2,r5,r3
1010e088:	344d803a 	cmpltu	r6,r6,r17
1010e08c:	1187c83a 	sub	r3,r2,r6
1010e090:	4821883a 	mov	r16,r9
1010e094:	3825883a 	mov	r18,r7
1010e098:	003f0606 	br	1010dcb4 <__alt_data_end+0xfffedcb4>
1010e09c:	2023883a 	mov	r17,r4
1010e0a0:	003f0906 	br	1010dcc8 <__alt_data_end+0xfffedcc8>
1010e0a4:	0101ffc4 	movi	r4,2047
1010e0a8:	813f3a1e 	bne	r16,r4,1010dd94 <__alt_data_end+0xfffedd94>
1010e0ac:	003ec406 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e0b0:	0005883a 	mov	r2,zero
1010e0b4:	003fb106 	br	1010df7c <__alt_data_end+0xfffedf7c>
1010e0b8:	0005883a 	mov	r2,zero
1010e0bc:	003fbc06 	br	1010dfb0 <__alt_data_end+0xfffedfb0>
1010e0c0:	1c44b03a 	or	r2,r3,r17
1010e0c4:	80008e1e 	bne	r16,zero,1010e300 <__subdf3+0x7c4>
1010e0c8:	1000c826 	beq	r2,zero,1010e3ec <__subdf3+0x8b0>
1010e0cc:	2984b03a 	or	r2,r5,r6
1010e0d0:	103ebb26 	beq	r2,zero,1010dbc0 <__alt_data_end+0xfffedbc0>
1010e0d4:	8989883a 	add	r4,r17,r6
1010e0d8:	1945883a 	add	r2,r3,r5
1010e0dc:	2447803a 	cmpltu	r3,r4,r17
1010e0e0:	1887883a 	add	r3,r3,r2
1010e0e4:	1880202c 	andhi	r2,r3,128
1010e0e8:	2023883a 	mov	r17,r4
1010e0ec:	103f1626 	beq	r2,zero,1010dd48 <__alt_data_end+0xfffedd48>
1010e0f0:	00bfe034 	movhi	r2,65408
1010e0f4:	10bfffc4 	addi	r2,r2,-1
1010e0f8:	5021883a 	mov	r16,r10
1010e0fc:	1886703a 	and	r3,r3,r2
1010e100:	003eaf06 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e104:	3825883a 	mov	r18,r7
1010e108:	003f0f06 	br	1010dd48 <__alt_data_end+0xfffedd48>
1010e10c:	1c44b03a 	or	r2,r3,r17
1010e110:	8000251e 	bne	r16,zero,1010e1a8 <__subdf3+0x66c>
1010e114:	1000661e 	bne	r2,zero,1010e2b0 <__subdf3+0x774>
1010e118:	2990b03a 	or	r8,r5,r6
1010e11c:	40009626 	beq	r8,zero,1010e378 <__subdf3+0x83c>
1010e120:	2807883a 	mov	r3,r5
1010e124:	3023883a 	mov	r17,r6
1010e128:	3825883a 	mov	r18,r7
1010e12c:	003ea406 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e130:	127ff804 	addi	r9,r2,-32
1010e134:	01000804 	movi	r4,32
1010e138:	2a52d83a 	srl	r9,r5,r9
1010e13c:	11008c26 	beq	r2,r4,1010e370 <__subdf3+0x834>
1010e140:	01001004 	movi	r4,64
1010e144:	2085c83a 	sub	r2,r4,r2
1010e148:	2884983a 	sll	r2,r5,r2
1010e14c:	118cb03a 	or	r6,r2,r6
1010e150:	300cc03a 	cmpne	r6,r6,zero
1010e154:	4992b03a 	or	r9,r9,r6
1010e158:	0005883a 	mov	r2,zero
1010e15c:	003f1206 	br	1010dda8 <__alt_data_end+0xfffedda8>
1010e160:	0101ffc4 	movi	r4,2047
1010e164:	493f9c1e 	bne	r9,r4,1010dfd8 <__alt_data_end+0xfffedfd8>
1010e168:	2807883a 	mov	r3,r5
1010e16c:	3023883a 	mov	r17,r6
1010e170:	4821883a 	mov	r16,r9
1010e174:	3825883a 	mov	r18,r7
1010e178:	003e9106 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e17c:	80001f1e 	bne	r16,zero,1010e1fc <__subdf3+0x6c0>
1010e180:	1c48b03a 	or	r4,r3,r17
1010e184:	20005a26 	beq	r4,zero,1010e2f0 <__subdf3+0x7b4>
1010e188:	0084303a 	nor	r2,zero,r2
1010e18c:	1000561e 	bne	r2,zero,1010e2e8 <__subdf3+0x7ac>
1010e190:	89a3883a 	add	r17,r17,r6
1010e194:	1945883a 	add	r2,r3,r5
1010e198:	898d803a 	cmpltu	r6,r17,r6
1010e19c:	3087883a 	add	r3,r6,r2
1010e1a0:	4821883a 	mov	r16,r9
1010e1a4:	003f0506 	br	1010ddbc <__alt_data_end+0xfffeddbc>
1010e1a8:	10002b1e 	bne	r2,zero,1010e258 <__subdf3+0x71c>
1010e1ac:	2984b03a 	or	r2,r5,r6
1010e1b0:	10008026 	beq	r2,zero,1010e3b4 <__subdf3+0x878>
1010e1b4:	2807883a 	mov	r3,r5
1010e1b8:	3023883a 	mov	r17,r6
1010e1bc:	3825883a 	mov	r18,r7
1010e1c0:	0401ffc4 	movi	r16,2047
1010e1c4:	003e7e06 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e1c8:	3809883a 	mov	r4,r7
1010e1cc:	0011883a 	mov	r8,zero
1010e1d0:	0005883a 	mov	r2,zero
1010e1d4:	003ee306 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e1d8:	1c62b03a 	or	r17,r3,r17
1010e1dc:	8822c03a 	cmpne	r17,r17,zero
1010e1e0:	0005883a 	mov	r2,zero
1010e1e4:	003f8906 	br	1010e00c <__alt_data_end+0xfffee00c>
1010e1e8:	3809883a 	mov	r4,r7
1010e1ec:	4821883a 	mov	r16,r9
1010e1f0:	0011883a 	mov	r8,zero
1010e1f4:	0005883a 	mov	r2,zero
1010e1f8:	003eda06 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e1fc:	0101ffc4 	movi	r4,2047
1010e200:	49003b26 	beq	r9,r4,1010e2f0 <__subdf3+0x7b4>
1010e204:	0085c83a 	sub	r2,zero,r2
1010e208:	18c02034 	orhi	r3,r3,128
1010e20c:	01000e04 	movi	r4,56
1010e210:	20806e16 	blt	r4,r2,1010e3cc <__subdf3+0x890>
1010e214:	010007c4 	movi	r4,31
1010e218:	20807716 	blt	r4,r2,1010e3f8 <__subdf3+0x8bc>
1010e21c:	01000804 	movi	r4,32
1010e220:	2089c83a 	sub	r4,r4,r2
1010e224:	1914983a 	sll	r10,r3,r4
1010e228:	8890d83a 	srl	r8,r17,r2
1010e22c:	8908983a 	sll	r4,r17,r4
1010e230:	1884d83a 	srl	r2,r3,r2
1010e234:	5222b03a 	or	r17,r10,r8
1010e238:	2006c03a 	cmpne	r3,r4,zero
1010e23c:	88e2b03a 	or	r17,r17,r3
1010e240:	89a3883a 	add	r17,r17,r6
1010e244:	1145883a 	add	r2,r2,r5
1010e248:	898d803a 	cmpltu	r6,r17,r6
1010e24c:	3087883a 	add	r3,r6,r2
1010e250:	4821883a 	mov	r16,r9
1010e254:	003ed906 	br	1010ddbc <__alt_data_end+0xfffeddbc>
1010e258:	2984b03a 	or	r2,r5,r6
1010e25c:	10004226 	beq	r2,zero,1010e368 <__subdf3+0x82c>
1010e260:	1808d0fa 	srli	r4,r3,3
1010e264:	8822d0fa 	srli	r17,r17,3
1010e268:	1806977a 	slli	r3,r3,29
1010e26c:	2080022c 	andhi	r2,r4,8
1010e270:	1c62b03a 	or	r17,r3,r17
1010e274:	10000826 	beq	r2,zero,1010e298 <__subdf3+0x75c>
1010e278:	2812d0fa 	srli	r9,r5,3
1010e27c:	4880022c 	andhi	r2,r9,8
1010e280:	1000051e 	bne	r2,zero,1010e298 <__subdf3+0x75c>
1010e284:	300cd0fa 	srli	r6,r6,3
1010e288:	2804977a 	slli	r2,r5,29
1010e28c:	4809883a 	mov	r4,r9
1010e290:	3825883a 	mov	r18,r7
1010e294:	11a2b03a 	or	r17,r2,r6
1010e298:	8806d77a 	srli	r3,r17,29
1010e29c:	200890fa 	slli	r4,r4,3
1010e2a0:	882290fa 	slli	r17,r17,3
1010e2a4:	0401ffc4 	movi	r16,2047
1010e2a8:	1906b03a 	or	r3,r3,r4
1010e2ac:	003e4406 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e2b0:	2984b03a 	or	r2,r5,r6
1010e2b4:	103e4226 	beq	r2,zero,1010dbc0 <__alt_data_end+0xfffedbc0>
1010e2b8:	8989c83a 	sub	r4,r17,r6
1010e2bc:	8911803a 	cmpltu	r8,r17,r4
1010e2c0:	1945c83a 	sub	r2,r3,r5
1010e2c4:	1205c83a 	sub	r2,r2,r8
1010e2c8:	1200202c 	andhi	r8,r2,128
1010e2cc:	403e9a26 	beq	r8,zero,1010dd38 <__alt_data_end+0xfffedd38>
1010e2d0:	3463c83a 	sub	r17,r6,r17
1010e2d4:	28c5c83a 	sub	r2,r5,r3
1010e2d8:	344d803a 	cmpltu	r6,r6,r17
1010e2dc:	1187c83a 	sub	r3,r2,r6
1010e2e0:	3825883a 	mov	r18,r7
1010e2e4:	003e3606 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e2e8:	0101ffc4 	movi	r4,2047
1010e2ec:	493fc71e 	bne	r9,r4,1010e20c <__alt_data_end+0xfffee20c>
1010e2f0:	2807883a 	mov	r3,r5
1010e2f4:	3023883a 	mov	r17,r6
1010e2f8:	4821883a 	mov	r16,r9
1010e2fc:	003e3006 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e300:	10003626 	beq	r2,zero,1010e3dc <__subdf3+0x8a0>
1010e304:	2984b03a 	or	r2,r5,r6
1010e308:	10001726 	beq	r2,zero,1010e368 <__subdf3+0x82c>
1010e30c:	1808d0fa 	srli	r4,r3,3
1010e310:	8822d0fa 	srli	r17,r17,3
1010e314:	1806977a 	slli	r3,r3,29
1010e318:	2080022c 	andhi	r2,r4,8
1010e31c:	1c62b03a 	or	r17,r3,r17
1010e320:	10000726 	beq	r2,zero,1010e340 <__subdf3+0x804>
1010e324:	2812d0fa 	srli	r9,r5,3
1010e328:	4880022c 	andhi	r2,r9,8
1010e32c:	1000041e 	bne	r2,zero,1010e340 <__subdf3+0x804>
1010e330:	300cd0fa 	srli	r6,r6,3
1010e334:	2804977a 	slli	r2,r5,29
1010e338:	4809883a 	mov	r4,r9
1010e33c:	11a2b03a 	or	r17,r2,r6
1010e340:	8806d77a 	srli	r3,r17,29
1010e344:	200890fa 	slli	r4,r4,3
1010e348:	882290fa 	slli	r17,r17,3
1010e34c:	3825883a 	mov	r18,r7
1010e350:	1906b03a 	or	r3,r3,r4
1010e354:	0401ffc4 	movi	r16,2047
1010e358:	003e1906 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e35c:	000b883a 	mov	r5,zero
1010e360:	0005883a 	mov	r2,zero
1010e364:	003e2e06 	br	1010dc20 <__alt_data_end+0xfffedc20>
1010e368:	0401ffc4 	movi	r16,2047
1010e36c:	003e1406 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e370:	0005883a 	mov	r2,zero
1010e374:	003f7506 	br	1010e14c <__alt_data_end+0xfffee14c>
1010e378:	0005883a 	mov	r2,zero
1010e37c:	0009883a 	mov	r4,zero
1010e380:	003e7806 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e384:	123ff804 	addi	r8,r2,-32
1010e388:	01000804 	movi	r4,32
1010e38c:	1a10d83a 	srl	r8,r3,r8
1010e390:	11002526 	beq	r2,r4,1010e428 <__subdf3+0x8ec>
1010e394:	01001004 	movi	r4,64
1010e398:	2085c83a 	sub	r2,r4,r2
1010e39c:	1884983a 	sll	r2,r3,r2
1010e3a0:	1444b03a 	or	r2,r2,r17
1010e3a4:	1004c03a 	cmpne	r2,r2,zero
1010e3a8:	40a2b03a 	or	r17,r8,r2
1010e3ac:	0005883a 	mov	r2,zero
1010e3b0:	003f1606 	br	1010e00c <__alt_data_end+0xfffee00c>
1010e3b4:	02000434 	movhi	r8,16
1010e3b8:	0009883a 	mov	r4,zero
1010e3bc:	423fffc4 	addi	r8,r8,-1
1010e3c0:	00bfffc4 	movi	r2,-1
1010e3c4:	0401ffc4 	movi	r16,2047
1010e3c8:	003e6606 	br	1010dd64 <__alt_data_end+0xfffedd64>
1010e3cc:	1c62b03a 	or	r17,r3,r17
1010e3d0:	8822c03a 	cmpne	r17,r17,zero
1010e3d4:	0005883a 	mov	r2,zero
1010e3d8:	003f9906 	br	1010e240 <__alt_data_end+0xfffee240>
1010e3dc:	2807883a 	mov	r3,r5
1010e3e0:	3023883a 	mov	r17,r6
1010e3e4:	0401ffc4 	movi	r16,2047
1010e3e8:	003df506 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e3ec:	2807883a 	mov	r3,r5
1010e3f0:	3023883a 	mov	r17,r6
1010e3f4:	003df206 	br	1010dbc0 <__alt_data_end+0xfffedbc0>
1010e3f8:	123ff804 	addi	r8,r2,-32
1010e3fc:	01000804 	movi	r4,32
1010e400:	1a10d83a 	srl	r8,r3,r8
1010e404:	11000a26 	beq	r2,r4,1010e430 <__subdf3+0x8f4>
1010e408:	01001004 	movi	r4,64
1010e40c:	2085c83a 	sub	r2,r4,r2
1010e410:	1884983a 	sll	r2,r3,r2
1010e414:	1444b03a 	or	r2,r2,r17
1010e418:	1004c03a 	cmpne	r2,r2,zero
1010e41c:	40a2b03a 	or	r17,r8,r2
1010e420:	0005883a 	mov	r2,zero
1010e424:	003f8606 	br	1010e240 <__alt_data_end+0xfffee240>
1010e428:	0005883a 	mov	r2,zero
1010e42c:	003fdc06 	br	1010e3a0 <__alt_data_end+0xfffee3a0>
1010e430:	0005883a 	mov	r2,zero
1010e434:	003ff706 	br	1010e414 <__alt_data_end+0xfffee414>

1010e438 <__fixdfsi>:
1010e438:	280cd53a 	srli	r6,r5,20
1010e43c:	00c00434 	movhi	r3,16
1010e440:	18ffffc4 	addi	r3,r3,-1
1010e444:	3181ffcc 	andi	r6,r6,2047
1010e448:	01c0ff84 	movi	r7,1022
1010e44c:	28c6703a 	and	r3,r5,r3
1010e450:	280ad7fa 	srli	r5,r5,31
1010e454:	3980120e 	bge	r7,r6,1010e4a0 <__fixdfsi+0x68>
1010e458:	00810744 	movi	r2,1053
1010e45c:	11800c16 	blt	r2,r6,1010e490 <__fixdfsi+0x58>
1010e460:	00810cc4 	movi	r2,1075
1010e464:	1185c83a 	sub	r2,r2,r6
1010e468:	01c007c4 	movi	r7,31
1010e46c:	18c00434 	orhi	r3,r3,16
1010e470:	38800d16 	blt	r7,r2,1010e4a8 <__fixdfsi+0x70>
1010e474:	31befb44 	addi	r6,r6,-1043
1010e478:	2084d83a 	srl	r2,r4,r2
1010e47c:	1986983a 	sll	r3,r3,r6
1010e480:	1884b03a 	or	r2,r3,r2
1010e484:	28000726 	beq	r5,zero,1010e4a4 <__fixdfsi+0x6c>
1010e488:	0085c83a 	sub	r2,zero,r2
1010e48c:	f800283a 	ret
1010e490:	00a00034 	movhi	r2,32768
1010e494:	10bfffc4 	addi	r2,r2,-1
1010e498:	2885883a 	add	r2,r5,r2
1010e49c:	f800283a 	ret
1010e4a0:	0005883a 	mov	r2,zero
1010e4a4:	f800283a 	ret
1010e4a8:	008104c4 	movi	r2,1043
1010e4ac:	1185c83a 	sub	r2,r2,r6
1010e4b0:	1884d83a 	srl	r2,r3,r2
1010e4b4:	003ff306 	br	1010e484 <__alt_data_end+0xfffee484>

1010e4b8 <__floatsidf>:
1010e4b8:	defffd04 	addi	sp,sp,-12
1010e4bc:	dfc00215 	stw	ra,8(sp)
1010e4c0:	dc400115 	stw	r17,4(sp)
1010e4c4:	dc000015 	stw	r16,0(sp)
1010e4c8:	20002b26 	beq	r4,zero,1010e578 <__floatsidf+0xc0>
1010e4cc:	2023883a 	mov	r17,r4
1010e4d0:	2020d7fa 	srli	r16,r4,31
1010e4d4:	20002d16 	blt	r4,zero,1010e58c <__floatsidf+0xd4>
1010e4d8:	8809883a 	mov	r4,r17
1010e4dc:	010e63c0 	call	1010e63c <__clzsi2>
1010e4e0:	01410784 	movi	r5,1054
1010e4e4:	288bc83a 	sub	r5,r5,r2
1010e4e8:	01010cc4 	movi	r4,1075
1010e4ec:	2149c83a 	sub	r4,r4,r5
1010e4f0:	00c007c4 	movi	r3,31
1010e4f4:	1900160e 	bge	r3,r4,1010e550 <__floatsidf+0x98>
1010e4f8:	00c104c4 	movi	r3,1043
1010e4fc:	1947c83a 	sub	r3,r3,r5
1010e500:	88c6983a 	sll	r3,r17,r3
1010e504:	00800434 	movhi	r2,16
1010e508:	10bfffc4 	addi	r2,r2,-1
1010e50c:	1886703a 	and	r3,r3,r2
1010e510:	2941ffcc 	andi	r5,r5,2047
1010e514:	800d883a 	mov	r6,r16
1010e518:	0005883a 	mov	r2,zero
1010e51c:	280a953a 	slli	r5,r5,20
1010e520:	31803fcc 	andi	r6,r6,255
1010e524:	01000434 	movhi	r4,16
1010e528:	300c97fa 	slli	r6,r6,31
1010e52c:	213fffc4 	addi	r4,r4,-1
1010e530:	1906703a 	and	r3,r3,r4
1010e534:	1946b03a 	or	r3,r3,r5
1010e538:	1986b03a 	or	r3,r3,r6
1010e53c:	dfc00217 	ldw	ra,8(sp)
1010e540:	dc400117 	ldw	r17,4(sp)
1010e544:	dc000017 	ldw	r16,0(sp)
1010e548:	dec00304 	addi	sp,sp,12
1010e54c:	f800283a 	ret
1010e550:	00c002c4 	movi	r3,11
1010e554:	1887c83a 	sub	r3,r3,r2
1010e558:	88c6d83a 	srl	r3,r17,r3
1010e55c:	8904983a 	sll	r2,r17,r4
1010e560:	01000434 	movhi	r4,16
1010e564:	213fffc4 	addi	r4,r4,-1
1010e568:	2941ffcc 	andi	r5,r5,2047
1010e56c:	1906703a 	and	r3,r3,r4
1010e570:	800d883a 	mov	r6,r16
1010e574:	003fe906 	br	1010e51c <__alt_data_end+0xfffee51c>
1010e578:	000d883a 	mov	r6,zero
1010e57c:	000b883a 	mov	r5,zero
1010e580:	0007883a 	mov	r3,zero
1010e584:	0005883a 	mov	r2,zero
1010e588:	003fe406 	br	1010e51c <__alt_data_end+0xfffee51c>
1010e58c:	0123c83a 	sub	r17,zero,r4
1010e590:	003fd106 	br	1010e4d8 <__alt_data_end+0xfffee4d8>

1010e594 <__floatunsidf>:
1010e594:	defffe04 	addi	sp,sp,-8
1010e598:	dc000015 	stw	r16,0(sp)
1010e59c:	dfc00115 	stw	ra,4(sp)
1010e5a0:	2021883a 	mov	r16,r4
1010e5a4:	20002226 	beq	r4,zero,1010e630 <__floatunsidf+0x9c>
1010e5a8:	010e63c0 	call	1010e63c <__clzsi2>
1010e5ac:	01010784 	movi	r4,1054
1010e5b0:	2089c83a 	sub	r4,r4,r2
1010e5b4:	01810cc4 	movi	r6,1075
1010e5b8:	310dc83a 	sub	r6,r6,r4
1010e5bc:	00c007c4 	movi	r3,31
1010e5c0:	1980120e 	bge	r3,r6,1010e60c <__floatunsidf+0x78>
1010e5c4:	00c104c4 	movi	r3,1043
1010e5c8:	1907c83a 	sub	r3,r3,r4
1010e5cc:	80ca983a 	sll	r5,r16,r3
1010e5d0:	00800434 	movhi	r2,16
1010e5d4:	10bfffc4 	addi	r2,r2,-1
1010e5d8:	2101ffcc 	andi	r4,r4,2047
1010e5dc:	0021883a 	mov	r16,zero
1010e5e0:	288a703a 	and	r5,r5,r2
1010e5e4:	2008953a 	slli	r4,r4,20
1010e5e8:	00c00434 	movhi	r3,16
1010e5ec:	18ffffc4 	addi	r3,r3,-1
1010e5f0:	28c6703a 	and	r3,r5,r3
1010e5f4:	8005883a 	mov	r2,r16
1010e5f8:	1906b03a 	or	r3,r3,r4
1010e5fc:	dfc00117 	ldw	ra,4(sp)
1010e600:	dc000017 	ldw	r16,0(sp)
1010e604:	dec00204 	addi	sp,sp,8
1010e608:	f800283a 	ret
1010e60c:	00c002c4 	movi	r3,11
1010e610:	188bc83a 	sub	r5,r3,r2
1010e614:	814ad83a 	srl	r5,r16,r5
1010e618:	00c00434 	movhi	r3,16
1010e61c:	18ffffc4 	addi	r3,r3,-1
1010e620:	81a0983a 	sll	r16,r16,r6
1010e624:	2101ffcc 	andi	r4,r4,2047
1010e628:	28ca703a 	and	r5,r5,r3
1010e62c:	003fed06 	br	1010e5e4 <__alt_data_end+0xfffee5e4>
1010e630:	0009883a 	mov	r4,zero
1010e634:	000b883a 	mov	r5,zero
1010e638:	003fea06 	br	1010e5e4 <__alt_data_end+0xfffee5e4>

1010e63c <__clzsi2>:
1010e63c:	00bfffd4 	movui	r2,65535
1010e640:	11000536 	bltu	r2,r4,1010e658 <__clzsi2+0x1c>
1010e644:	00803fc4 	movi	r2,255
1010e648:	11000f36 	bltu	r2,r4,1010e688 <__clzsi2+0x4c>
1010e64c:	00800804 	movi	r2,32
1010e650:	0007883a 	mov	r3,zero
1010e654:	00000506 	br	1010e66c <__clzsi2+0x30>
1010e658:	00804034 	movhi	r2,256
1010e65c:	10bfffc4 	addi	r2,r2,-1
1010e660:	11000c2e 	bgeu	r2,r4,1010e694 <__clzsi2+0x58>
1010e664:	00800204 	movi	r2,8
1010e668:	00c00604 	movi	r3,24
1010e66c:	20c8d83a 	srl	r4,r4,r3
1010e670:	00c40474 	movhi	r3,4113
1010e674:	18c47404 	addi	r3,r3,4560
1010e678:	1909883a 	add	r4,r3,r4
1010e67c:	20c00003 	ldbu	r3,0(r4)
1010e680:	10c5c83a 	sub	r2,r2,r3
1010e684:	f800283a 	ret
1010e688:	00800604 	movi	r2,24
1010e68c:	00c00204 	movi	r3,8
1010e690:	003ff606 	br	1010e66c <__alt_data_end+0xfffee66c>
1010e694:	00800404 	movi	r2,16
1010e698:	1007883a 	mov	r3,r2
1010e69c:	003ff306 	br	1010e66c <__alt_data_end+0xfffee66c>

1010e6a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e6a0:	defffe04 	addi	sp,sp,-8
1010e6a4:	dfc00115 	stw	ra,4(sp)
1010e6a8:	df000015 	stw	fp,0(sp)
1010e6ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e6b0:	00840474 	movhi	r2,4113
1010e6b4:	108b7704 	addi	r2,r2,11740
1010e6b8:	10800017 	ldw	r2,0(r2)
1010e6bc:	10000526 	beq	r2,zero,1010e6d4 <alt_get_errno+0x34>
1010e6c0:	00840474 	movhi	r2,4113
1010e6c4:	108b7704 	addi	r2,r2,11740
1010e6c8:	10800017 	ldw	r2,0(r2)
1010e6cc:	103ee83a 	callr	r2
1010e6d0:	00000206 	br	1010e6dc <alt_get_errno+0x3c>
1010e6d4:	00840474 	movhi	r2,4113
1010e6d8:	10923704 	addi	r2,r2,18652
}
1010e6dc:	e037883a 	mov	sp,fp
1010e6e0:	dfc00117 	ldw	ra,4(sp)
1010e6e4:	df000017 	ldw	fp,0(sp)
1010e6e8:	dec00204 	addi	sp,sp,8
1010e6ec:	f800283a 	ret

1010e6f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010e6f0:	defffb04 	addi	sp,sp,-20
1010e6f4:	dfc00415 	stw	ra,16(sp)
1010e6f8:	df000315 	stw	fp,12(sp)
1010e6fc:	df000304 	addi	fp,sp,12
1010e700:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010e704:	e0bfff17 	ldw	r2,-4(fp)
1010e708:	10000616 	blt	r2,zero,1010e724 <close+0x34>
1010e70c:	e0bfff17 	ldw	r2,-4(fp)
1010e710:	10c00324 	muli	r3,r2,12
1010e714:	00840474 	movhi	r2,4113
1010e718:	1086f404 	addi	r2,r2,7120
1010e71c:	1885883a 	add	r2,r3,r2
1010e720:	00000106 	br	1010e728 <close+0x38>
1010e724:	0005883a 	mov	r2,zero
1010e728:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010e72c:	e0bffd17 	ldw	r2,-12(fp)
1010e730:	10001926 	beq	r2,zero,1010e798 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010e734:	e0bffd17 	ldw	r2,-12(fp)
1010e738:	10800017 	ldw	r2,0(r2)
1010e73c:	10800417 	ldw	r2,16(r2)
1010e740:	10000626 	beq	r2,zero,1010e75c <close+0x6c>
1010e744:	e0bffd17 	ldw	r2,-12(fp)
1010e748:	10800017 	ldw	r2,0(r2)
1010e74c:	10800417 	ldw	r2,16(r2)
1010e750:	e13ffd17 	ldw	r4,-12(fp)
1010e754:	103ee83a 	callr	r2
1010e758:	00000106 	br	1010e760 <close+0x70>
1010e75c:	0005883a 	mov	r2,zero
1010e760:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010e764:	e13fff17 	ldw	r4,-4(fp)
1010e768:	010f0740 	call	1010f074 <alt_release_fd>
    if (rval < 0)
1010e76c:	e0bffe17 	ldw	r2,-8(fp)
1010e770:	1000070e 	bge	r2,zero,1010e790 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010e774:	010e6a00 	call	1010e6a0 <alt_get_errno>
1010e778:	1007883a 	mov	r3,r2
1010e77c:	e0bffe17 	ldw	r2,-8(fp)
1010e780:	0085c83a 	sub	r2,zero,r2
1010e784:	18800015 	stw	r2,0(r3)
      return -1;
1010e788:	00bfffc4 	movi	r2,-1
1010e78c:	00000706 	br	1010e7ac <close+0xbc>
    }
    return 0;
1010e790:	0005883a 	mov	r2,zero
1010e794:	00000506 	br	1010e7ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e798:	010e6a00 	call	1010e6a0 <alt_get_errno>
1010e79c:	1007883a 	mov	r3,r2
1010e7a0:	00801444 	movi	r2,81
1010e7a4:	18800015 	stw	r2,0(r3)
    return -1;
1010e7a8:	00bfffc4 	movi	r2,-1
  }
}
1010e7ac:	e037883a 	mov	sp,fp
1010e7b0:	dfc00117 	ldw	ra,4(sp)
1010e7b4:	df000017 	ldw	fp,0(sp)
1010e7b8:	dec00204 	addi	sp,sp,8
1010e7bc:	f800283a 	ret

1010e7c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e7c0:	defffc04 	addi	sp,sp,-16
1010e7c4:	df000315 	stw	fp,12(sp)
1010e7c8:	df000304 	addi	fp,sp,12
1010e7cc:	e13ffd15 	stw	r4,-12(fp)
1010e7d0:	e17ffe15 	stw	r5,-8(fp)
1010e7d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e7d8:	e0bfff17 	ldw	r2,-4(fp)
}
1010e7dc:	e037883a 	mov	sp,fp
1010e7e0:	df000017 	ldw	fp,0(sp)
1010e7e4:	dec00104 	addi	sp,sp,4
1010e7e8:	f800283a 	ret

1010e7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e7ec:	defffe04 	addi	sp,sp,-8
1010e7f0:	dfc00115 	stw	ra,4(sp)
1010e7f4:	df000015 	stw	fp,0(sp)
1010e7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e7fc:	00840474 	movhi	r2,4113
1010e800:	108b7704 	addi	r2,r2,11740
1010e804:	10800017 	ldw	r2,0(r2)
1010e808:	10000526 	beq	r2,zero,1010e820 <alt_get_errno+0x34>
1010e80c:	00840474 	movhi	r2,4113
1010e810:	108b7704 	addi	r2,r2,11740
1010e814:	10800017 	ldw	r2,0(r2)
1010e818:	103ee83a 	callr	r2
1010e81c:	00000206 	br	1010e828 <alt_get_errno+0x3c>
1010e820:	00840474 	movhi	r2,4113
1010e824:	10923704 	addi	r2,r2,18652
}
1010e828:	e037883a 	mov	sp,fp
1010e82c:	dfc00117 	ldw	ra,4(sp)
1010e830:	df000017 	ldw	fp,0(sp)
1010e834:	dec00204 	addi	sp,sp,8
1010e838:	f800283a 	ret

1010e83c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e83c:	defffb04 	addi	sp,sp,-20
1010e840:	dfc00415 	stw	ra,16(sp)
1010e844:	df000315 	stw	fp,12(sp)
1010e848:	df000304 	addi	fp,sp,12
1010e84c:	e13ffe15 	stw	r4,-8(fp)
1010e850:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e854:	e0bffe17 	ldw	r2,-8(fp)
1010e858:	10000616 	blt	r2,zero,1010e874 <fstat+0x38>
1010e85c:	e0bffe17 	ldw	r2,-8(fp)
1010e860:	10c00324 	muli	r3,r2,12
1010e864:	00840474 	movhi	r2,4113
1010e868:	1086f404 	addi	r2,r2,7120
1010e86c:	1885883a 	add	r2,r3,r2
1010e870:	00000106 	br	1010e878 <fstat+0x3c>
1010e874:	0005883a 	mov	r2,zero
1010e878:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e87c:	e0bffd17 	ldw	r2,-12(fp)
1010e880:	10001026 	beq	r2,zero,1010e8c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e884:	e0bffd17 	ldw	r2,-12(fp)
1010e888:	10800017 	ldw	r2,0(r2)
1010e88c:	10800817 	ldw	r2,32(r2)
1010e890:	10000726 	beq	r2,zero,1010e8b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e894:	e0bffd17 	ldw	r2,-12(fp)
1010e898:	10800017 	ldw	r2,0(r2)
1010e89c:	10800817 	ldw	r2,32(r2)
1010e8a0:	e17fff17 	ldw	r5,-4(fp)
1010e8a4:	e13ffd17 	ldw	r4,-12(fp)
1010e8a8:	103ee83a 	callr	r2
1010e8ac:	00000a06 	br	1010e8d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e8b0:	e0bfff17 	ldw	r2,-4(fp)
1010e8b4:	00c80004 	movi	r3,8192
1010e8b8:	10c00115 	stw	r3,4(r2)
      return 0;
1010e8bc:	0005883a 	mov	r2,zero
1010e8c0:	00000506 	br	1010e8d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e8c4:	010e7ec0 	call	1010e7ec <alt_get_errno>
1010e8c8:	1007883a 	mov	r3,r2
1010e8cc:	00801444 	movi	r2,81
1010e8d0:	18800015 	stw	r2,0(r3)
    return -1;
1010e8d4:	00bfffc4 	movi	r2,-1
  }
}
1010e8d8:	e037883a 	mov	sp,fp
1010e8dc:	dfc00117 	ldw	ra,4(sp)
1010e8e0:	df000017 	ldw	fp,0(sp)
1010e8e4:	dec00204 	addi	sp,sp,8
1010e8e8:	f800283a 	ret

1010e8ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e8ec:	defffe04 	addi	sp,sp,-8
1010e8f0:	dfc00115 	stw	ra,4(sp)
1010e8f4:	df000015 	stw	fp,0(sp)
1010e8f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e8fc:	00840474 	movhi	r2,4113
1010e900:	108b7704 	addi	r2,r2,11740
1010e904:	10800017 	ldw	r2,0(r2)
1010e908:	10000526 	beq	r2,zero,1010e920 <alt_get_errno+0x34>
1010e90c:	00840474 	movhi	r2,4113
1010e910:	108b7704 	addi	r2,r2,11740
1010e914:	10800017 	ldw	r2,0(r2)
1010e918:	103ee83a 	callr	r2
1010e91c:	00000206 	br	1010e928 <alt_get_errno+0x3c>
1010e920:	00840474 	movhi	r2,4113
1010e924:	10923704 	addi	r2,r2,18652
}
1010e928:	e037883a 	mov	sp,fp
1010e92c:	dfc00117 	ldw	ra,4(sp)
1010e930:	df000017 	ldw	fp,0(sp)
1010e934:	dec00204 	addi	sp,sp,8
1010e938:	f800283a 	ret

1010e93c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010e93c:	deffed04 	addi	sp,sp,-76
1010e940:	dfc01215 	stw	ra,72(sp)
1010e944:	df001115 	stw	fp,68(sp)
1010e948:	df001104 	addi	fp,sp,68
1010e94c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e950:	e0bfff17 	ldw	r2,-4(fp)
1010e954:	10000616 	blt	r2,zero,1010e970 <isatty+0x34>
1010e958:	e0bfff17 	ldw	r2,-4(fp)
1010e95c:	10c00324 	muli	r3,r2,12
1010e960:	00840474 	movhi	r2,4113
1010e964:	1086f404 	addi	r2,r2,7120
1010e968:	1885883a 	add	r2,r3,r2
1010e96c:	00000106 	br	1010e974 <isatty+0x38>
1010e970:	0005883a 	mov	r2,zero
1010e974:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010e978:	e0bfef17 	ldw	r2,-68(fp)
1010e97c:	10000e26 	beq	r2,zero,1010e9b8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010e980:	e0bfef17 	ldw	r2,-68(fp)
1010e984:	10800017 	ldw	r2,0(r2)
1010e988:	10800817 	ldw	r2,32(r2)
1010e98c:	1000021e 	bne	r2,zero,1010e998 <isatty+0x5c>
    {
      return 1;
1010e990:	00800044 	movi	r2,1
1010e994:	00000d06 	br	1010e9cc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010e998:	e0bff004 	addi	r2,fp,-64
1010e99c:	100b883a 	mov	r5,r2
1010e9a0:	e13fff17 	ldw	r4,-4(fp)
1010e9a4:	010e83c0 	call	1010e83c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010e9a8:	e0bff117 	ldw	r2,-60(fp)
1010e9ac:	10880020 	cmpeqi	r2,r2,8192
1010e9b0:	10803fcc 	andi	r2,r2,255
1010e9b4:	00000506 	br	1010e9cc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e9b8:	010e8ec0 	call	1010e8ec <alt_get_errno>
1010e9bc:	1007883a 	mov	r3,r2
1010e9c0:	00801444 	movi	r2,81
1010e9c4:	18800015 	stw	r2,0(r3)
    return 0;
1010e9c8:	0005883a 	mov	r2,zero
  }
}
1010e9cc:	e037883a 	mov	sp,fp
1010e9d0:	dfc00117 	ldw	ra,4(sp)
1010e9d4:	df000017 	ldw	fp,0(sp)
1010e9d8:	dec00204 	addi	sp,sp,8
1010e9dc:	f800283a 	ret

1010e9e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010e9e0:	defffc04 	addi	sp,sp,-16
1010e9e4:	df000315 	stw	fp,12(sp)
1010e9e8:	df000304 	addi	fp,sp,12
1010e9ec:	e13ffd15 	stw	r4,-12(fp)
1010e9f0:	e17ffe15 	stw	r5,-8(fp)
1010e9f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010e9f8:	e0fffe17 	ldw	r3,-8(fp)
1010e9fc:	e0bffd17 	ldw	r2,-12(fp)
1010ea00:	18800c26 	beq	r3,r2,1010ea34 <alt_load_section+0x54>
  {
    while( to != end )
1010ea04:	00000806 	br	1010ea28 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010ea08:	e0bffe17 	ldw	r2,-8(fp)
1010ea0c:	10c00104 	addi	r3,r2,4
1010ea10:	e0fffe15 	stw	r3,-8(fp)
1010ea14:	e0fffd17 	ldw	r3,-12(fp)
1010ea18:	19000104 	addi	r4,r3,4
1010ea1c:	e13ffd15 	stw	r4,-12(fp)
1010ea20:	18c00017 	ldw	r3,0(r3)
1010ea24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010ea28:	e0fffe17 	ldw	r3,-8(fp)
1010ea2c:	e0bfff17 	ldw	r2,-4(fp)
1010ea30:	18bff51e 	bne	r3,r2,1010ea08 <__alt_data_end+0xfffeea08>
    {
      *to++ = *from++;
    }
  }
}
1010ea34:	0001883a 	nop
1010ea38:	e037883a 	mov	sp,fp
1010ea3c:	df000017 	ldw	fp,0(sp)
1010ea40:	dec00104 	addi	sp,sp,4
1010ea44:	f800283a 	ret

1010ea48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010ea48:	defffe04 	addi	sp,sp,-8
1010ea4c:	dfc00115 	stw	ra,4(sp)
1010ea50:	df000015 	stw	fp,0(sp)
1010ea54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010ea58:	01840474 	movhi	r6,4113
1010ea5c:	318b7c04 	addi	r6,r6,11760
1010ea60:	01440474 	movhi	r5,4113
1010ea64:	2944c104 	addi	r5,r5,4868
1010ea68:	01040474 	movhi	r4,4113
1010ea6c:	210b7c04 	addi	r4,r4,11760
1010ea70:	010e9e00 	call	1010e9e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010ea74:	01840434 	movhi	r6,4112
1010ea78:	31809104 	addi	r6,r6,580
1010ea7c:	01440434 	movhi	r5,4112
1010ea80:	29400804 	addi	r5,r5,32
1010ea84:	01040434 	movhi	r4,4112
1010ea88:	21000804 	addi	r4,r4,32
1010ea8c:	010e9e00 	call	1010e9e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010ea90:	01840474 	movhi	r6,4113
1010ea94:	3184c104 	addi	r6,r6,4868
1010ea98:	01440474 	movhi	r5,4113
1010ea9c:	2943fa04 	addi	r5,r5,4072
1010eaa0:	01040474 	movhi	r4,4113
1010eaa4:	2103fa04 	addi	r4,r4,4072
1010eaa8:	010e9e00 	call	1010e9e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010eaac:	01100c80 	call	101100c8 <alt_dcache_flush_all>
  alt_icache_flush_all();
1010eab0:	011051c0 	call	1011051c <alt_icache_flush_all>
}
1010eab4:	0001883a 	nop
1010eab8:	e037883a 	mov	sp,fp
1010eabc:	dfc00117 	ldw	ra,4(sp)
1010eac0:	df000017 	ldw	fp,0(sp)
1010eac4:	dec00204 	addi	sp,sp,8
1010eac8:	f800283a 	ret

1010eacc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010eacc:	defffe04 	addi	sp,sp,-8
1010ead0:	dfc00115 	stw	ra,4(sp)
1010ead4:	df000015 	stw	fp,0(sp)
1010ead8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eadc:	00840474 	movhi	r2,4113
1010eae0:	108b7704 	addi	r2,r2,11740
1010eae4:	10800017 	ldw	r2,0(r2)
1010eae8:	10000526 	beq	r2,zero,1010eb00 <alt_get_errno+0x34>
1010eaec:	00840474 	movhi	r2,4113
1010eaf0:	108b7704 	addi	r2,r2,11740
1010eaf4:	10800017 	ldw	r2,0(r2)
1010eaf8:	103ee83a 	callr	r2
1010eafc:	00000206 	br	1010eb08 <alt_get_errno+0x3c>
1010eb00:	00840474 	movhi	r2,4113
1010eb04:	10923704 	addi	r2,r2,18652
}
1010eb08:	e037883a 	mov	sp,fp
1010eb0c:	dfc00117 	ldw	ra,4(sp)
1010eb10:	df000017 	ldw	fp,0(sp)
1010eb14:	dec00204 	addi	sp,sp,8
1010eb18:	f800283a 	ret

1010eb1c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010eb1c:	defff904 	addi	sp,sp,-28
1010eb20:	dfc00615 	stw	ra,24(sp)
1010eb24:	df000515 	stw	fp,20(sp)
1010eb28:	df000504 	addi	fp,sp,20
1010eb2c:	e13ffd15 	stw	r4,-12(fp)
1010eb30:	e17ffe15 	stw	r5,-8(fp)
1010eb34:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010eb38:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010eb3c:	e0bffd17 	ldw	r2,-12(fp)
1010eb40:	10000616 	blt	r2,zero,1010eb5c <lseek+0x40>
1010eb44:	e0bffd17 	ldw	r2,-12(fp)
1010eb48:	10c00324 	muli	r3,r2,12
1010eb4c:	00840474 	movhi	r2,4113
1010eb50:	1086f404 	addi	r2,r2,7120
1010eb54:	1885883a 	add	r2,r3,r2
1010eb58:	00000106 	br	1010eb60 <lseek+0x44>
1010eb5c:	0005883a 	mov	r2,zero
1010eb60:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010eb64:	e0bffc17 	ldw	r2,-16(fp)
1010eb68:	10001026 	beq	r2,zero,1010ebac <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010eb6c:	e0bffc17 	ldw	r2,-16(fp)
1010eb70:	10800017 	ldw	r2,0(r2)
1010eb74:	10800717 	ldw	r2,28(r2)
1010eb78:	10000926 	beq	r2,zero,1010eba0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010eb7c:	e0bffc17 	ldw	r2,-16(fp)
1010eb80:	10800017 	ldw	r2,0(r2)
1010eb84:	10800717 	ldw	r2,28(r2)
1010eb88:	e1bfff17 	ldw	r6,-4(fp)
1010eb8c:	e17ffe17 	ldw	r5,-8(fp)
1010eb90:	e13ffc17 	ldw	r4,-16(fp)
1010eb94:	103ee83a 	callr	r2
1010eb98:	e0bffb15 	stw	r2,-20(fp)
1010eb9c:	00000506 	br	1010ebb4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010eba0:	00bfde84 	movi	r2,-134
1010eba4:	e0bffb15 	stw	r2,-20(fp)
1010eba8:	00000206 	br	1010ebb4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010ebac:	00bfebc4 	movi	r2,-81
1010ebb0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010ebb4:	e0bffb17 	ldw	r2,-20(fp)
1010ebb8:	1000070e 	bge	r2,zero,1010ebd8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010ebbc:	010eacc0 	call	1010eacc <alt_get_errno>
1010ebc0:	1007883a 	mov	r3,r2
1010ebc4:	e0bffb17 	ldw	r2,-20(fp)
1010ebc8:	0085c83a 	sub	r2,zero,r2
1010ebcc:	18800015 	stw	r2,0(r3)
    rc = -1;
1010ebd0:	00bfffc4 	movi	r2,-1
1010ebd4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010ebd8:	e0bffb17 	ldw	r2,-20(fp)
}
1010ebdc:	e037883a 	mov	sp,fp
1010ebe0:	dfc00117 	ldw	ra,4(sp)
1010ebe4:	df000017 	ldw	fp,0(sp)
1010ebe8:	dec00204 	addi	sp,sp,8
1010ebec:	f800283a 	ret

1010ebf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010ebf0:	defffd04 	addi	sp,sp,-12
1010ebf4:	dfc00215 	stw	ra,8(sp)
1010ebf8:	df000115 	stw	fp,4(sp)
1010ebfc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010ec00:	0009883a 	mov	r4,zero
1010ec04:	010f3380 	call	1010f338 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010ec08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010ec0c:	010f3700 	call	1010f370 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010ec10:	01840474 	movhi	r6,4113
1010ec14:	3184b704 	addi	r6,r6,4828
1010ec18:	01440474 	movhi	r5,4113
1010ec1c:	2944b704 	addi	r5,r5,4828
1010ec20:	01040474 	movhi	r4,4113
1010ec24:	2104b704 	addi	r4,r4,4828
1010ec28:	01108e40 	call	101108e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010ec2c:	01102040 	call	10110204 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010ec30:	01040474 	movhi	r4,4113
1010ec34:	21009904 	addi	r4,r4,612
1010ec38:	0110c540 	call	10110c54 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010ec3c:	d0a6d217 	ldw	r2,-25784(gp)
1010ec40:	d0e6d317 	ldw	r3,-25780(gp)
1010ec44:	d126d417 	ldw	r4,-25776(gp)
1010ec48:	200d883a 	mov	r6,r4
1010ec4c:	180b883a 	mov	r5,r3
1010ec50:	1009883a 	mov	r4,r2
1010ec54:	0100b440 	call	10100b44 <main>
1010ec58:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010ec5c:	01000044 	movi	r4,1
1010ec60:	010e6f00 	call	1010e6f0 <close>
  exit (result);
1010ec64:	e13fff17 	ldw	r4,-4(fp)
1010ec68:	0110c680 	call	10110c68 <exit>

1010ec6c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010ec6c:	defffe04 	addi	sp,sp,-8
1010ec70:	df000115 	stw	fp,4(sp)
1010ec74:	df000104 	addi	fp,sp,4
1010ec78:	e13fff15 	stw	r4,-4(fp)
}
1010ec7c:	0001883a 	nop
1010ec80:	e037883a 	mov	sp,fp
1010ec84:	df000017 	ldw	fp,0(sp)
1010ec88:	dec00104 	addi	sp,sp,4
1010ec8c:	f800283a 	ret

1010ec90 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010ec90:	defffe04 	addi	sp,sp,-8
1010ec94:	df000115 	stw	fp,4(sp)
1010ec98:	df000104 	addi	fp,sp,4
1010ec9c:	e13fff15 	stw	r4,-4(fp)
}
1010eca0:	0001883a 	nop
1010eca4:	e037883a 	mov	sp,fp
1010eca8:	df000017 	ldw	fp,0(sp)
1010ecac:	dec00104 	addi	sp,sp,4
1010ecb0:	f800283a 	ret

1010ecb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ecb4:	defffe04 	addi	sp,sp,-8
1010ecb8:	dfc00115 	stw	ra,4(sp)
1010ecbc:	df000015 	stw	fp,0(sp)
1010ecc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ecc4:	00840474 	movhi	r2,4113
1010ecc8:	108b7704 	addi	r2,r2,11740
1010eccc:	10800017 	ldw	r2,0(r2)
1010ecd0:	10000526 	beq	r2,zero,1010ece8 <alt_get_errno+0x34>
1010ecd4:	00840474 	movhi	r2,4113
1010ecd8:	108b7704 	addi	r2,r2,11740
1010ecdc:	10800017 	ldw	r2,0(r2)
1010ece0:	103ee83a 	callr	r2
1010ece4:	00000206 	br	1010ecf0 <alt_get_errno+0x3c>
1010ece8:	00840474 	movhi	r2,4113
1010ecec:	10923704 	addi	r2,r2,18652
}
1010ecf0:	e037883a 	mov	sp,fp
1010ecf4:	dfc00117 	ldw	ra,4(sp)
1010ecf8:	df000017 	ldw	fp,0(sp)
1010ecfc:	dec00204 	addi	sp,sp,8
1010ed00:	f800283a 	ret

1010ed04 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010ed04:	defffd04 	addi	sp,sp,-12
1010ed08:	df000215 	stw	fp,8(sp)
1010ed0c:	df000204 	addi	fp,sp,8
1010ed10:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010ed14:	e0bfff17 	ldw	r2,-4(fp)
1010ed18:	10800217 	ldw	r2,8(r2)
1010ed1c:	10d00034 	orhi	r3,r2,16384
1010ed20:	e0bfff17 	ldw	r2,-4(fp)
1010ed24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ed28:	e03ffe15 	stw	zero,-8(fp)
1010ed2c:	00001d06 	br	1010eda4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ed30:	00840474 	movhi	r2,4113
1010ed34:	1086f404 	addi	r2,r2,7120
1010ed38:	e0fffe17 	ldw	r3,-8(fp)
1010ed3c:	18c00324 	muli	r3,r3,12
1010ed40:	10c5883a 	add	r2,r2,r3
1010ed44:	10c00017 	ldw	r3,0(r2)
1010ed48:	e0bfff17 	ldw	r2,-4(fp)
1010ed4c:	10800017 	ldw	r2,0(r2)
1010ed50:	1880111e 	bne	r3,r2,1010ed98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010ed54:	00840474 	movhi	r2,4113
1010ed58:	1086f404 	addi	r2,r2,7120
1010ed5c:	e0fffe17 	ldw	r3,-8(fp)
1010ed60:	18c00324 	muli	r3,r3,12
1010ed64:	10c5883a 	add	r2,r2,r3
1010ed68:	10800204 	addi	r2,r2,8
1010ed6c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ed70:	1000090e 	bge	r2,zero,1010ed98 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010ed74:	e0bffe17 	ldw	r2,-8(fp)
1010ed78:	10c00324 	muli	r3,r2,12
1010ed7c:	00840474 	movhi	r2,4113
1010ed80:	1086f404 	addi	r2,r2,7120
1010ed84:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010ed88:	e0bfff17 	ldw	r2,-4(fp)
1010ed8c:	18800226 	beq	r3,r2,1010ed98 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010ed90:	00bffcc4 	movi	r2,-13
1010ed94:	00000a06 	br	1010edc0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ed98:	e0bffe17 	ldw	r2,-8(fp)
1010ed9c:	10800044 	addi	r2,r2,1
1010eda0:	e0bffe15 	stw	r2,-8(fp)
1010eda4:	00840474 	movhi	r2,4113
1010eda8:	108b7604 	addi	r2,r2,11736
1010edac:	10800017 	ldw	r2,0(r2)
1010edb0:	1007883a 	mov	r3,r2
1010edb4:	e0bffe17 	ldw	r2,-8(fp)
1010edb8:	18bfdd2e 	bgeu	r3,r2,1010ed30 <__alt_data_end+0xfffeed30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010edbc:	0005883a 	mov	r2,zero
}
1010edc0:	e037883a 	mov	sp,fp
1010edc4:	df000017 	ldw	fp,0(sp)
1010edc8:	dec00104 	addi	sp,sp,4
1010edcc:	f800283a 	ret

1010edd0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010edd0:	defff604 	addi	sp,sp,-40
1010edd4:	dfc00915 	stw	ra,36(sp)
1010edd8:	df000815 	stw	fp,32(sp)
1010eddc:	df000804 	addi	fp,sp,32
1010ede0:	e13ffd15 	stw	r4,-12(fp)
1010ede4:	e17ffe15 	stw	r5,-8(fp)
1010ede8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010edec:	00bfffc4 	movi	r2,-1
1010edf0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010edf4:	00bffb44 	movi	r2,-19
1010edf8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010edfc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010ee00:	01440474 	movhi	r5,4113
1010ee04:	294b7404 	addi	r5,r5,11728
1010ee08:	e13ffd17 	ldw	r4,-12(fp)
1010ee0c:	01102c40 	call	101102c4 <alt_find_dev>
1010ee10:	e0bff815 	stw	r2,-32(fp)
1010ee14:	e0bff817 	ldw	r2,-32(fp)
1010ee18:	1000051e 	bne	r2,zero,1010ee30 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010ee1c:	e13ffd17 	ldw	r4,-12(fp)
1010ee20:	01103540 	call	10110354 <alt_find_file>
1010ee24:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010ee28:	00800044 	movi	r2,1
1010ee2c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010ee30:	e0bff817 	ldw	r2,-32(fp)
1010ee34:	10002926 	beq	r2,zero,1010eedc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010ee38:	e13ff817 	ldw	r4,-32(fp)
1010ee3c:	01104680 	call	10110468 <alt_get_fd>
1010ee40:	e0bff915 	stw	r2,-28(fp)
1010ee44:	e0bff917 	ldw	r2,-28(fp)
1010ee48:	1000030e 	bge	r2,zero,1010ee58 <open+0x88>
    {
      status = index;
1010ee4c:	e0bff917 	ldw	r2,-28(fp)
1010ee50:	e0bffa15 	stw	r2,-24(fp)
1010ee54:	00002306 	br	1010eee4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
1010ee58:	e0bff917 	ldw	r2,-28(fp)
1010ee5c:	10c00324 	muli	r3,r2,12
1010ee60:	00840474 	movhi	r2,4113
1010ee64:	1086f404 	addi	r2,r2,7120
1010ee68:	1885883a 	add	r2,r3,r2
1010ee6c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010ee70:	e0fffe17 	ldw	r3,-8(fp)
1010ee74:	00900034 	movhi	r2,16384
1010ee78:	10bfffc4 	addi	r2,r2,-1
1010ee7c:	1886703a 	and	r3,r3,r2
1010ee80:	e0bffc17 	ldw	r2,-16(fp)
1010ee84:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010ee88:	e0bffb17 	ldw	r2,-20(fp)
1010ee8c:	1000051e 	bne	r2,zero,1010eea4 <open+0xd4>
1010ee90:	e13ffc17 	ldw	r4,-16(fp)
1010ee94:	010ed040 	call	1010ed04 <alt_file_locked>
1010ee98:	e0bffa15 	stw	r2,-24(fp)
1010ee9c:	e0bffa17 	ldw	r2,-24(fp)
1010eea0:	10001016 	blt	r2,zero,1010eee4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010eea4:	e0bff817 	ldw	r2,-32(fp)
1010eea8:	10800317 	ldw	r2,12(r2)
1010eeac:	10000826 	beq	r2,zero,1010eed0 <open+0x100>
1010eeb0:	e0bff817 	ldw	r2,-32(fp)
1010eeb4:	10800317 	ldw	r2,12(r2)
1010eeb8:	e1ffff17 	ldw	r7,-4(fp)
1010eebc:	e1bffe17 	ldw	r6,-8(fp)
1010eec0:	e17ffd17 	ldw	r5,-12(fp)
1010eec4:	e13ffc17 	ldw	r4,-16(fp)
1010eec8:	103ee83a 	callr	r2
1010eecc:	00000106 	br	1010eed4 <open+0x104>
1010eed0:	0005883a 	mov	r2,zero
1010eed4:	e0bffa15 	stw	r2,-24(fp)
1010eed8:	00000206 	br	1010eee4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010eedc:	00bffb44 	movi	r2,-19
1010eee0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010eee4:	e0bffa17 	ldw	r2,-24(fp)
1010eee8:	1000090e 	bge	r2,zero,1010ef10 <open+0x140>
  {
    alt_release_fd (index);  
1010eeec:	e13ff917 	ldw	r4,-28(fp)
1010eef0:	010f0740 	call	1010f074 <alt_release_fd>
    ALT_ERRNO = -status;
1010eef4:	010ecb40 	call	1010ecb4 <alt_get_errno>
1010eef8:	1007883a 	mov	r3,r2
1010eefc:	e0bffa17 	ldw	r2,-24(fp)
1010ef00:	0085c83a 	sub	r2,zero,r2
1010ef04:	18800015 	stw	r2,0(r3)
    return -1;
1010ef08:	00bfffc4 	movi	r2,-1
1010ef0c:	00000106 	br	1010ef14 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1010ef10:	e0bff917 	ldw	r2,-28(fp)
}
1010ef14:	e037883a 	mov	sp,fp
1010ef18:	dfc00117 	ldw	ra,4(sp)
1010ef1c:	df000017 	ldw	fp,0(sp)
1010ef20:	dec00204 	addi	sp,sp,8
1010ef24:	f800283a 	ret

1010ef28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ef28:	defffe04 	addi	sp,sp,-8
1010ef2c:	dfc00115 	stw	ra,4(sp)
1010ef30:	df000015 	stw	fp,0(sp)
1010ef34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ef38:	00840474 	movhi	r2,4113
1010ef3c:	108b7704 	addi	r2,r2,11740
1010ef40:	10800017 	ldw	r2,0(r2)
1010ef44:	10000526 	beq	r2,zero,1010ef5c <alt_get_errno+0x34>
1010ef48:	00840474 	movhi	r2,4113
1010ef4c:	108b7704 	addi	r2,r2,11740
1010ef50:	10800017 	ldw	r2,0(r2)
1010ef54:	103ee83a 	callr	r2
1010ef58:	00000206 	br	1010ef64 <alt_get_errno+0x3c>
1010ef5c:	00840474 	movhi	r2,4113
1010ef60:	10923704 	addi	r2,r2,18652
}
1010ef64:	e037883a 	mov	sp,fp
1010ef68:	dfc00117 	ldw	ra,4(sp)
1010ef6c:	df000017 	ldw	fp,0(sp)
1010ef70:	dec00204 	addi	sp,sp,8
1010ef74:	f800283a 	ret

1010ef78 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010ef78:	defff904 	addi	sp,sp,-28
1010ef7c:	dfc00615 	stw	ra,24(sp)
1010ef80:	df000515 	stw	fp,20(sp)
1010ef84:	df000504 	addi	fp,sp,20
1010ef88:	e13ffd15 	stw	r4,-12(fp)
1010ef8c:	e17ffe15 	stw	r5,-8(fp)
1010ef90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ef94:	e0bffd17 	ldw	r2,-12(fp)
1010ef98:	10000616 	blt	r2,zero,1010efb4 <read+0x3c>
1010ef9c:	e0bffd17 	ldw	r2,-12(fp)
1010efa0:	10c00324 	muli	r3,r2,12
1010efa4:	00840474 	movhi	r2,4113
1010efa8:	1086f404 	addi	r2,r2,7120
1010efac:	1885883a 	add	r2,r3,r2
1010efb0:	00000106 	br	1010efb8 <read+0x40>
1010efb4:	0005883a 	mov	r2,zero
1010efb8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010efbc:	e0bffb17 	ldw	r2,-20(fp)
1010efc0:	10002226 	beq	r2,zero,1010f04c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010efc4:	e0bffb17 	ldw	r2,-20(fp)
1010efc8:	10800217 	ldw	r2,8(r2)
1010efcc:	108000cc 	andi	r2,r2,3
1010efd0:	10800060 	cmpeqi	r2,r2,1
1010efd4:	1000181e 	bne	r2,zero,1010f038 <read+0xc0>
        (fd->dev->read))
1010efd8:	e0bffb17 	ldw	r2,-20(fp)
1010efdc:	10800017 	ldw	r2,0(r2)
1010efe0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010efe4:	10001426 	beq	r2,zero,1010f038 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010efe8:	e0bffb17 	ldw	r2,-20(fp)
1010efec:	10800017 	ldw	r2,0(r2)
1010eff0:	10800517 	ldw	r2,20(r2)
1010eff4:	e0ffff17 	ldw	r3,-4(fp)
1010eff8:	180d883a 	mov	r6,r3
1010effc:	e17ffe17 	ldw	r5,-8(fp)
1010f000:	e13ffb17 	ldw	r4,-20(fp)
1010f004:	103ee83a 	callr	r2
1010f008:	e0bffc15 	stw	r2,-16(fp)
1010f00c:	e0bffc17 	ldw	r2,-16(fp)
1010f010:	1000070e 	bge	r2,zero,1010f030 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010f014:	010ef280 	call	1010ef28 <alt_get_errno>
1010f018:	1007883a 	mov	r3,r2
1010f01c:	e0bffc17 	ldw	r2,-16(fp)
1010f020:	0085c83a 	sub	r2,zero,r2
1010f024:	18800015 	stw	r2,0(r3)
          return -1;
1010f028:	00bfffc4 	movi	r2,-1
1010f02c:	00000c06 	br	1010f060 <read+0xe8>
        }
        return rval;
1010f030:	e0bffc17 	ldw	r2,-16(fp)
1010f034:	00000a06 	br	1010f060 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010f038:	010ef280 	call	1010ef28 <alt_get_errno>
1010f03c:	1007883a 	mov	r3,r2
1010f040:	00800344 	movi	r2,13
1010f044:	18800015 	stw	r2,0(r3)
1010f048:	00000406 	br	1010f05c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010f04c:	010ef280 	call	1010ef28 <alt_get_errno>
1010f050:	1007883a 	mov	r3,r2
1010f054:	00801444 	movi	r2,81
1010f058:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f05c:	00bfffc4 	movi	r2,-1
}
1010f060:	e037883a 	mov	sp,fp
1010f064:	dfc00117 	ldw	ra,4(sp)
1010f068:	df000017 	ldw	fp,0(sp)
1010f06c:	dec00204 	addi	sp,sp,8
1010f070:	f800283a 	ret

1010f074 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010f074:	defffe04 	addi	sp,sp,-8
1010f078:	df000115 	stw	fp,4(sp)
1010f07c:	df000104 	addi	fp,sp,4
1010f080:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010f084:	e0bfff17 	ldw	r2,-4(fp)
1010f088:	108000d0 	cmplti	r2,r2,3
1010f08c:	10000d1e 	bne	r2,zero,1010f0c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010f090:	00840474 	movhi	r2,4113
1010f094:	1086f404 	addi	r2,r2,7120
1010f098:	e0ffff17 	ldw	r3,-4(fp)
1010f09c:	18c00324 	muli	r3,r3,12
1010f0a0:	10c5883a 	add	r2,r2,r3
1010f0a4:	10800204 	addi	r2,r2,8
1010f0a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010f0ac:	00840474 	movhi	r2,4113
1010f0b0:	1086f404 	addi	r2,r2,7120
1010f0b4:	e0ffff17 	ldw	r3,-4(fp)
1010f0b8:	18c00324 	muli	r3,r3,12
1010f0bc:	10c5883a 	add	r2,r2,r3
1010f0c0:	10000015 	stw	zero,0(r2)
  }
}
1010f0c4:	0001883a 	nop
1010f0c8:	e037883a 	mov	sp,fp
1010f0cc:	df000017 	ldw	fp,0(sp)
1010f0d0:	dec00104 	addi	sp,sp,4
1010f0d4:	f800283a 	ret

1010f0d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010f0d8:	defff904 	addi	sp,sp,-28
1010f0dc:	df000615 	stw	fp,24(sp)
1010f0e0:	df000604 	addi	fp,sp,24
1010f0e4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f0e8:	0005303a 	rdctl	r2,status
1010f0ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f0f0:	e0fffe17 	ldw	r3,-8(fp)
1010f0f4:	00bfff84 	movi	r2,-2
1010f0f8:	1884703a 	and	r2,r3,r2
1010f0fc:	1001703a 	wrctl	status,r2
  
  return context;
1010f100:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010f104:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010f108:	d0a00c17 	ldw	r2,-32720(gp)
1010f10c:	10c000c4 	addi	r3,r2,3
1010f110:	00bfff04 	movi	r2,-4
1010f114:	1884703a 	and	r2,r3,r2
1010f118:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010f11c:	d0e00c17 	ldw	r3,-32720(gp)
1010f120:	e0bfff17 	ldw	r2,-4(fp)
1010f124:	1887883a 	add	r3,r3,r2
1010f128:	008404b4 	movhi	r2,4114
1010f12c:	10800004 	addi	r2,r2,0
1010f130:	10c0062e 	bgeu	r2,r3,1010f14c <sbrk+0x74>
1010f134:	e0bffb17 	ldw	r2,-20(fp)
1010f138:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f13c:	e0bffa17 	ldw	r2,-24(fp)
1010f140:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010f144:	00bfffc4 	movi	r2,-1
1010f148:	00000b06 	br	1010f178 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010f14c:	d0a00c17 	ldw	r2,-32720(gp)
1010f150:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010f154:	d0e00c17 	ldw	r3,-32720(gp)
1010f158:	e0bfff17 	ldw	r2,-4(fp)
1010f15c:	1885883a 	add	r2,r3,r2
1010f160:	d0a00c15 	stw	r2,-32720(gp)
1010f164:	e0bffb17 	ldw	r2,-20(fp)
1010f168:	e0bffc15 	stw	r2,-16(fp)
1010f16c:	e0bffc17 	ldw	r2,-16(fp)
1010f170:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010f174:	e0bffd17 	ldw	r2,-12(fp)
} 
1010f178:	e037883a 	mov	sp,fp
1010f17c:	df000017 	ldw	fp,0(sp)
1010f180:	dec00104 	addi	sp,sp,4
1010f184:	f800283a 	ret

1010f188 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1010f188:	defffd04 	addi	sp,sp,-12
1010f18c:	dfc00215 	stw	ra,8(sp)
1010f190:	df000115 	stw	fp,4(sp)
1010f194:	df000104 	addi	fp,sp,4
1010f198:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1010f19c:	e13fff17 	ldw	r4,-4(fp)
1010f1a0:	010ff700 	call	1010ff70 <alt_busy_sleep>
}
1010f1a4:	e037883a 	mov	sp,fp
1010f1a8:	dfc00117 	ldw	ra,4(sp)
1010f1ac:	df000017 	ldw	fp,0(sp)
1010f1b0:	dec00204 	addi	sp,sp,8
1010f1b4:	f800283a 	ret

1010f1b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f1b8:	defffe04 	addi	sp,sp,-8
1010f1bc:	dfc00115 	stw	ra,4(sp)
1010f1c0:	df000015 	stw	fp,0(sp)
1010f1c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f1c8:	00840474 	movhi	r2,4113
1010f1cc:	108b7704 	addi	r2,r2,11740
1010f1d0:	10800017 	ldw	r2,0(r2)
1010f1d4:	10000526 	beq	r2,zero,1010f1ec <alt_get_errno+0x34>
1010f1d8:	00840474 	movhi	r2,4113
1010f1dc:	108b7704 	addi	r2,r2,11740
1010f1e0:	10800017 	ldw	r2,0(r2)
1010f1e4:	103ee83a 	callr	r2
1010f1e8:	00000206 	br	1010f1f4 <alt_get_errno+0x3c>
1010f1ec:	00840474 	movhi	r2,4113
1010f1f0:	10923704 	addi	r2,r2,18652
}
1010f1f4:	e037883a 	mov	sp,fp
1010f1f8:	dfc00117 	ldw	ra,4(sp)
1010f1fc:	df000017 	ldw	fp,0(sp)
1010f200:	dec00204 	addi	sp,sp,8
1010f204:	f800283a 	ret

1010f208 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010f208:	defff904 	addi	sp,sp,-28
1010f20c:	dfc00615 	stw	ra,24(sp)
1010f210:	df000515 	stw	fp,20(sp)
1010f214:	df000504 	addi	fp,sp,20
1010f218:	e13ffd15 	stw	r4,-12(fp)
1010f21c:	e17ffe15 	stw	r5,-8(fp)
1010f220:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f224:	e0bffd17 	ldw	r2,-12(fp)
1010f228:	10000616 	blt	r2,zero,1010f244 <write+0x3c>
1010f22c:	e0bffd17 	ldw	r2,-12(fp)
1010f230:	10c00324 	muli	r3,r2,12
1010f234:	00840474 	movhi	r2,4113
1010f238:	1086f404 	addi	r2,r2,7120
1010f23c:	1885883a 	add	r2,r3,r2
1010f240:	00000106 	br	1010f248 <write+0x40>
1010f244:	0005883a 	mov	r2,zero
1010f248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f24c:	e0bffb17 	ldw	r2,-20(fp)
1010f250:	10002126 	beq	r2,zero,1010f2d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010f254:	e0bffb17 	ldw	r2,-20(fp)
1010f258:	10800217 	ldw	r2,8(r2)
1010f25c:	108000cc 	andi	r2,r2,3
1010f260:	10001826 	beq	r2,zero,1010f2c4 <write+0xbc>
1010f264:	e0bffb17 	ldw	r2,-20(fp)
1010f268:	10800017 	ldw	r2,0(r2)
1010f26c:	10800617 	ldw	r2,24(r2)
1010f270:	10001426 	beq	r2,zero,1010f2c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010f274:	e0bffb17 	ldw	r2,-20(fp)
1010f278:	10800017 	ldw	r2,0(r2)
1010f27c:	10800617 	ldw	r2,24(r2)
1010f280:	e0ffff17 	ldw	r3,-4(fp)
1010f284:	180d883a 	mov	r6,r3
1010f288:	e17ffe17 	ldw	r5,-8(fp)
1010f28c:	e13ffb17 	ldw	r4,-20(fp)
1010f290:	103ee83a 	callr	r2
1010f294:	e0bffc15 	stw	r2,-16(fp)
1010f298:	e0bffc17 	ldw	r2,-16(fp)
1010f29c:	1000070e 	bge	r2,zero,1010f2bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010f2a0:	010f1b80 	call	1010f1b8 <alt_get_errno>
1010f2a4:	1007883a 	mov	r3,r2
1010f2a8:	e0bffc17 	ldw	r2,-16(fp)
1010f2ac:	0085c83a 	sub	r2,zero,r2
1010f2b0:	18800015 	stw	r2,0(r3)
        return -1;
1010f2b4:	00bfffc4 	movi	r2,-1
1010f2b8:	00000c06 	br	1010f2ec <write+0xe4>
      }
      return rval;
1010f2bc:	e0bffc17 	ldw	r2,-16(fp)
1010f2c0:	00000a06 	br	1010f2ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010f2c4:	010f1b80 	call	1010f1b8 <alt_get_errno>
1010f2c8:	1007883a 	mov	r3,r2
1010f2cc:	00800344 	movi	r2,13
1010f2d0:	18800015 	stw	r2,0(r3)
1010f2d4:	00000406 	br	1010f2e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010f2d8:	010f1b80 	call	1010f1b8 <alt_get_errno>
1010f2dc:	1007883a 	mov	r3,r2
1010f2e0:	00801444 	movi	r2,81
1010f2e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f2e8:	00bfffc4 	movi	r2,-1
}
1010f2ec:	e037883a 	mov	sp,fp
1010f2f0:	dfc00117 	ldw	ra,4(sp)
1010f2f4:	df000017 	ldw	fp,0(sp)
1010f2f8:	dec00204 	addi	sp,sp,8
1010f2fc:	f800283a 	ret

1010f300 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010f300:	defffd04 	addi	sp,sp,-12
1010f304:	dfc00215 	stw	ra,8(sp)
1010f308:	df000115 	stw	fp,4(sp)
1010f30c:	df000104 	addi	fp,sp,4
1010f310:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010f314:	01440474 	movhi	r5,4113
1010f318:	294b7404 	addi	r5,r5,11728
1010f31c:	e13fff17 	ldw	r4,-4(fp)
1010f320:	01101600 	call	10110160 <alt_dev_llist_insert>
}
1010f324:	e037883a 	mov	sp,fp
1010f328:	dfc00117 	ldw	ra,4(sp)
1010f32c:	df000017 	ldw	fp,0(sp)
1010f330:	dec00204 	addi	sp,sp,8
1010f334:	f800283a 	ret

1010f338 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010f338:	defffd04 	addi	sp,sp,-12
1010f33c:	dfc00215 	stw	ra,8(sp)
1010f340:	df000115 	stw	fp,4(sp)
1010f344:	df000104 	addi	fp,sp,4
1010f348:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010f34c:	0110b040 	call	10110b04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010f350:	00800044 	movi	r2,1
1010f354:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010f358:	0001883a 	nop
1010f35c:	e037883a 	mov	sp,fp
1010f360:	dfc00117 	ldw	ra,4(sp)
1010f364:	df000017 	ldw	fp,0(sp)
1010f368:	dec00204 	addi	sp,sp,8
1010f36c:	f800283a 	ret

1010f370 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010f370:	defffe04 	addi	sp,sp,-8
1010f374:	dfc00115 	stw	ra,4(sp)
1010f378:	df000015 	stw	fp,0(sp)
1010f37c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010f380:	000d883a 	mov	r6,zero
1010f384:	000b883a 	mov	r5,zero
1010f388:	01040474 	movhi	r4,4113
1010f38c:	21075e04 	addi	r4,r4,7544
1010f390:	010f51c0 	call	1010f51c <altera_avalon_jtag_uart_init>
1010f394:	01040474 	movhi	r4,4113
1010f398:	21075404 	addi	r4,r4,7504
1010f39c:	010f3000 	call	1010f300 <alt_dev_reg>
}
1010f3a0:	0001883a 	nop
1010f3a4:	e037883a 	mov	sp,fp
1010f3a8:	dfc00117 	ldw	ra,4(sp)
1010f3ac:	df000017 	ldw	fp,0(sp)
1010f3b0:	dec00204 	addi	sp,sp,8
1010f3b4:	f800283a 	ret

1010f3b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f3b8:	defffa04 	addi	sp,sp,-24
1010f3bc:	dfc00515 	stw	ra,20(sp)
1010f3c0:	df000415 	stw	fp,16(sp)
1010f3c4:	df000404 	addi	fp,sp,16
1010f3c8:	e13ffd15 	stw	r4,-12(fp)
1010f3cc:	e17ffe15 	stw	r5,-8(fp)
1010f3d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f3d4:	e0bffd17 	ldw	r2,-12(fp)
1010f3d8:	10800017 	ldw	r2,0(r2)
1010f3dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f3e0:	e0bffc17 	ldw	r2,-16(fp)
1010f3e4:	10c00a04 	addi	r3,r2,40
1010f3e8:	e0bffd17 	ldw	r2,-12(fp)
1010f3ec:	10800217 	ldw	r2,8(r2)
1010f3f0:	100f883a 	mov	r7,r2
1010f3f4:	e1bfff17 	ldw	r6,-4(fp)
1010f3f8:	e17ffe17 	ldw	r5,-8(fp)
1010f3fc:	1809883a 	mov	r4,r3
1010f400:	010f9f00 	call	1010f9f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f404:	e037883a 	mov	sp,fp
1010f408:	dfc00117 	ldw	ra,4(sp)
1010f40c:	df000017 	ldw	fp,0(sp)
1010f410:	dec00204 	addi	sp,sp,8
1010f414:	f800283a 	ret

1010f418 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f418:	defffa04 	addi	sp,sp,-24
1010f41c:	dfc00515 	stw	ra,20(sp)
1010f420:	df000415 	stw	fp,16(sp)
1010f424:	df000404 	addi	fp,sp,16
1010f428:	e13ffd15 	stw	r4,-12(fp)
1010f42c:	e17ffe15 	stw	r5,-8(fp)
1010f430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f434:	e0bffd17 	ldw	r2,-12(fp)
1010f438:	10800017 	ldw	r2,0(r2)
1010f43c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f440:	e0bffc17 	ldw	r2,-16(fp)
1010f444:	10c00a04 	addi	r3,r2,40
1010f448:	e0bffd17 	ldw	r2,-12(fp)
1010f44c:	10800217 	ldw	r2,8(r2)
1010f450:	100f883a 	mov	r7,r2
1010f454:	e1bfff17 	ldw	r6,-4(fp)
1010f458:	e17ffe17 	ldw	r5,-8(fp)
1010f45c:	1809883a 	mov	r4,r3
1010f460:	010fc0c0 	call	1010fc0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f464:	e037883a 	mov	sp,fp
1010f468:	dfc00117 	ldw	ra,4(sp)
1010f46c:	df000017 	ldw	fp,0(sp)
1010f470:	dec00204 	addi	sp,sp,8
1010f474:	f800283a 	ret

1010f478 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f478:	defffc04 	addi	sp,sp,-16
1010f47c:	dfc00315 	stw	ra,12(sp)
1010f480:	df000215 	stw	fp,8(sp)
1010f484:	df000204 	addi	fp,sp,8
1010f488:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f48c:	e0bfff17 	ldw	r2,-4(fp)
1010f490:	10800017 	ldw	r2,0(r2)
1010f494:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f498:	e0bffe17 	ldw	r2,-8(fp)
1010f49c:	10c00a04 	addi	r3,r2,40
1010f4a0:	e0bfff17 	ldw	r2,-4(fp)
1010f4a4:	10800217 	ldw	r2,8(r2)
1010f4a8:	100b883a 	mov	r5,r2
1010f4ac:	1809883a 	mov	r4,r3
1010f4b0:	010f8980 	call	1010f898 <altera_avalon_jtag_uart_close>
}
1010f4b4:	e037883a 	mov	sp,fp
1010f4b8:	dfc00117 	ldw	ra,4(sp)
1010f4bc:	df000017 	ldw	fp,0(sp)
1010f4c0:	dec00204 	addi	sp,sp,8
1010f4c4:	f800283a 	ret

1010f4c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f4c8:	defffa04 	addi	sp,sp,-24
1010f4cc:	dfc00515 	stw	ra,20(sp)
1010f4d0:	df000415 	stw	fp,16(sp)
1010f4d4:	df000404 	addi	fp,sp,16
1010f4d8:	e13ffd15 	stw	r4,-12(fp)
1010f4dc:	e17ffe15 	stw	r5,-8(fp)
1010f4e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f4e4:	e0bffd17 	ldw	r2,-12(fp)
1010f4e8:	10800017 	ldw	r2,0(r2)
1010f4ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f4f0:	e0bffc17 	ldw	r2,-16(fp)
1010f4f4:	10800a04 	addi	r2,r2,40
1010f4f8:	e1bfff17 	ldw	r6,-4(fp)
1010f4fc:	e17ffe17 	ldw	r5,-8(fp)
1010f500:	1009883a 	mov	r4,r2
1010f504:	010f9000 	call	1010f900 <altera_avalon_jtag_uart_ioctl>
}
1010f508:	e037883a 	mov	sp,fp
1010f50c:	dfc00117 	ldw	ra,4(sp)
1010f510:	df000017 	ldw	fp,0(sp)
1010f514:	dec00204 	addi	sp,sp,8
1010f518:	f800283a 	ret

1010f51c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f51c:	defffa04 	addi	sp,sp,-24
1010f520:	dfc00515 	stw	ra,20(sp)
1010f524:	df000415 	stw	fp,16(sp)
1010f528:	df000404 	addi	fp,sp,16
1010f52c:	e13ffd15 	stw	r4,-12(fp)
1010f530:	e17ffe15 	stw	r5,-8(fp)
1010f534:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f538:	e0bffd17 	ldw	r2,-12(fp)
1010f53c:	00c00044 	movi	r3,1
1010f540:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f544:	e0bffd17 	ldw	r2,-12(fp)
1010f548:	10800017 	ldw	r2,0(r2)
1010f54c:	10800104 	addi	r2,r2,4
1010f550:	1007883a 	mov	r3,r2
1010f554:	e0bffd17 	ldw	r2,-12(fp)
1010f558:	10800817 	ldw	r2,32(r2)
1010f55c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f560:	e0bffe17 	ldw	r2,-8(fp)
1010f564:	e0ffff17 	ldw	r3,-4(fp)
1010f568:	d8000015 	stw	zero,0(sp)
1010f56c:	e1fffd17 	ldw	r7,-12(fp)
1010f570:	01840474 	movhi	r6,4113
1010f574:	31bd7904 	addi	r6,r6,-2588
1010f578:	180b883a 	mov	r5,r3
1010f57c:	1009883a 	mov	r4,r2
1010f580:	01105500 	call	10110550 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f584:	e0bffd17 	ldw	r2,-12(fp)
1010f588:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f58c:	e0bffd17 	ldw	r2,-12(fp)
1010f590:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f594:	00840474 	movhi	r2,4113
1010f598:	10924204 	addi	r2,r2,18696
1010f59c:	10800017 	ldw	r2,0(r2)
1010f5a0:	e1fffd17 	ldw	r7,-12(fp)
1010f5a4:	01840474 	movhi	r6,4113
1010f5a8:	31bdfc04 	addi	r6,r6,-2064
1010f5ac:	100b883a 	mov	r5,r2
1010f5b0:	1809883a 	mov	r4,r3
1010f5b4:	010fe300 	call	1010fe30 <alt_alarm_start>
1010f5b8:	1000040e 	bge	r2,zero,1010f5cc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f5bc:	e0fffd17 	ldw	r3,-12(fp)
1010f5c0:	00a00034 	movhi	r2,32768
1010f5c4:	10bfffc4 	addi	r2,r2,-1
1010f5c8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f5cc:	0001883a 	nop
1010f5d0:	e037883a 	mov	sp,fp
1010f5d4:	dfc00117 	ldw	ra,4(sp)
1010f5d8:	df000017 	ldw	fp,0(sp)
1010f5dc:	dec00204 	addi	sp,sp,8
1010f5e0:	f800283a 	ret

1010f5e4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f5e4:	defff804 	addi	sp,sp,-32
1010f5e8:	df000715 	stw	fp,28(sp)
1010f5ec:	df000704 	addi	fp,sp,28
1010f5f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f5f4:	e0bfff17 	ldw	r2,-4(fp)
1010f5f8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010f5fc:	e0bffb17 	ldw	r2,-20(fp)
1010f600:	10800017 	ldw	r2,0(r2)
1010f604:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f608:	e0bffc17 	ldw	r2,-16(fp)
1010f60c:	10800104 	addi	r2,r2,4
1010f610:	10800037 	ldwio	r2,0(r2)
1010f614:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010f618:	e0bffd17 	ldw	r2,-12(fp)
1010f61c:	1080c00c 	andi	r2,r2,768
1010f620:	10006d26 	beq	r2,zero,1010f7d8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010f624:	e0bffd17 	ldw	r2,-12(fp)
1010f628:	1080400c 	andi	r2,r2,256
1010f62c:	10003526 	beq	r2,zero,1010f704 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010f630:	00800074 	movhi	r2,1
1010f634:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f638:	e0bffb17 	ldw	r2,-20(fp)
1010f63c:	10800a17 	ldw	r2,40(r2)
1010f640:	10800044 	addi	r2,r2,1
1010f644:	1081ffcc 	andi	r2,r2,2047
1010f648:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010f64c:	e0bffb17 	ldw	r2,-20(fp)
1010f650:	10c00b17 	ldw	r3,44(r2)
1010f654:	e0bffe17 	ldw	r2,-8(fp)
1010f658:	18801526 	beq	r3,r2,1010f6b0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010f65c:	e0bffc17 	ldw	r2,-16(fp)
1010f660:	10800037 	ldwio	r2,0(r2)
1010f664:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010f668:	e0bff917 	ldw	r2,-28(fp)
1010f66c:	10a0000c 	andi	r2,r2,32768
1010f670:	10001126 	beq	r2,zero,1010f6b8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010f674:	e0bffb17 	ldw	r2,-20(fp)
1010f678:	10800a17 	ldw	r2,40(r2)
1010f67c:	e0fff917 	ldw	r3,-28(fp)
1010f680:	1809883a 	mov	r4,r3
1010f684:	e0fffb17 	ldw	r3,-20(fp)
1010f688:	1885883a 	add	r2,r3,r2
1010f68c:	10800e04 	addi	r2,r2,56
1010f690:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f694:	e0bffb17 	ldw	r2,-20(fp)
1010f698:	10800a17 	ldw	r2,40(r2)
1010f69c:	10800044 	addi	r2,r2,1
1010f6a0:	10c1ffcc 	andi	r3,r2,2047
1010f6a4:	e0bffb17 	ldw	r2,-20(fp)
1010f6a8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010f6ac:	003fe206 	br	1010f638 <__alt_data_end+0xfffef638>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010f6b0:	0001883a 	nop
1010f6b4:	00000106 	br	1010f6bc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010f6b8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010f6bc:	e0bff917 	ldw	r2,-28(fp)
1010f6c0:	10bfffec 	andhi	r2,r2,65535
1010f6c4:	10000f26 	beq	r2,zero,1010f704 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f6c8:	e0bffb17 	ldw	r2,-20(fp)
1010f6cc:	10c00817 	ldw	r3,32(r2)
1010f6d0:	00bfff84 	movi	r2,-2
1010f6d4:	1886703a 	and	r3,r3,r2
1010f6d8:	e0bffb17 	ldw	r2,-20(fp)
1010f6dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010f6e0:	e0bffc17 	ldw	r2,-16(fp)
1010f6e4:	10800104 	addi	r2,r2,4
1010f6e8:	1007883a 	mov	r3,r2
1010f6ec:	e0bffb17 	ldw	r2,-20(fp)
1010f6f0:	10800817 	ldw	r2,32(r2)
1010f6f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f6f8:	e0bffc17 	ldw	r2,-16(fp)
1010f6fc:	10800104 	addi	r2,r2,4
1010f700:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010f704:	e0bffd17 	ldw	r2,-12(fp)
1010f708:	1080800c 	andi	r2,r2,512
1010f70c:	103fbe26 	beq	r2,zero,1010f608 <__alt_data_end+0xfffef608>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010f710:	e0bffd17 	ldw	r2,-12(fp)
1010f714:	1004d43a 	srli	r2,r2,16
1010f718:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f71c:	00001406 	br	1010f770 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010f720:	e0bffc17 	ldw	r2,-16(fp)
1010f724:	e0fffb17 	ldw	r3,-20(fp)
1010f728:	18c00d17 	ldw	r3,52(r3)
1010f72c:	e13ffb17 	ldw	r4,-20(fp)
1010f730:	20c7883a 	add	r3,r4,r3
1010f734:	18c20e04 	addi	r3,r3,2104
1010f738:	18c00003 	ldbu	r3,0(r3)
1010f73c:	18c03fcc 	andi	r3,r3,255
1010f740:	18c0201c 	xori	r3,r3,128
1010f744:	18ffe004 	addi	r3,r3,-128
1010f748:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f74c:	e0bffb17 	ldw	r2,-20(fp)
1010f750:	10800d17 	ldw	r2,52(r2)
1010f754:	10800044 	addi	r2,r2,1
1010f758:	10c1ffcc 	andi	r3,r2,2047
1010f75c:	e0bffb17 	ldw	r2,-20(fp)
1010f760:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010f764:	e0bffa17 	ldw	r2,-24(fp)
1010f768:	10bfffc4 	addi	r2,r2,-1
1010f76c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f770:	e0bffa17 	ldw	r2,-24(fp)
1010f774:	10000526 	beq	r2,zero,1010f78c <altera_avalon_jtag_uart_irq+0x1a8>
1010f778:	e0bffb17 	ldw	r2,-20(fp)
1010f77c:	10c00d17 	ldw	r3,52(r2)
1010f780:	e0bffb17 	ldw	r2,-20(fp)
1010f784:	10800c17 	ldw	r2,48(r2)
1010f788:	18bfe51e 	bne	r3,r2,1010f720 <__alt_data_end+0xfffef720>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010f78c:	e0bffa17 	ldw	r2,-24(fp)
1010f790:	103f9d26 	beq	r2,zero,1010f608 <__alt_data_end+0xfffef608>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f794:	e0bffb17 	ldw	r2,-20(fp)
1010f798:	10c00817 	ldw	r3,32(r2)
1010f79c:	00bfff44 	movi	r2,-3
1010f7a0:	1886703a 	and	r3,r3,r2
1010f7a4:	e0bffb17 	ldw	r2,-20(fp)
1010f7a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f7ac:	e0bffb17 	ldw	r2,-20(fp)
1010f7b0:	10800017 	ldw	r2,0(r2)
1010f7b4:	10800104 	addi	r2,r2,4
1010f7b8:	1007883a 	mov	r3,r2
1010f7bc:	e0bffb17 	ldw	r2,-20(fp)
1010f7c0:	10800817 	ldw	r2,32(r2)
1010f7c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f7c8:	e0bffc17 	ldw	r2,-16(fp)
1010f7cc:	10800104 	addi	r2,r2,4
1010f7d0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010f7d4:	003f8c06 	br	1010f608 <__alt_data_end+0xfffef608>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010f7d8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010f7dc:	0001883a 	nop
1010f7e0:	e037883a 	mov	sp,fp
1010f7e4:	df000017 	ldw	fp,0(sp)
1010f7e8:	dec00104 	addi	sp,sp,4
1010f7ec:	f800283a 	ret

1010f7f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010f7f0:	defff804 	addi	sp,sp,-32
1010f7f4:	df000715 	stw	fp,28(sp)
1010f7f8:	df000704 	addi	fp,sp,28
1010f7fc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010f800:	e0bffb17 	ldw	r2,-20(fp)
1010f804:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010f808:	e0bff917 	ldw	r2,-28(fp)
1010f80c:	10800017 	ldw	r2,0(r2)
1010f810:	10800104 	addi	r2,r2,4
1010f814:	10800037 	ldwio	r2,0(r2)
1010f818:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010f81c:	e0bffa17 	ldw	r2,-24(fp)
1010f820:	1081000c 	andi	r2,r2,1024
1010f824:	10000b26 	beq	r2,zero,1010f854 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010f828:	e0bff917 	ldw	r2,-28(fp)
1010f82c:	10800017 	ldw	r2,0(r2)
1010f830:	10800104 	addi	r2,r2,4
1010f834:	1007883a 	mov	r3,r2
1010f838:	e0bff917 	ldw	r2,-28(fp)
1010f83c:	10800817 	ldw	r2,32(r2)
1010f840:	10810014 	ori	r2,r2,1024
1010f844:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f848:	e0bff917 	ldw	r2,-28(fp)
1010f84c:	10000915 	stw	zero,36(r2)
1010f850:	00000a06 	br	1010f87c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f854:	e0bff917 	ldw	r2,-28(fp)
1010f858:	10c00917 	ldw	r3,36(r2)
1010f85c:	00a00034 	movhi	r2,32768
1010f860:	10bfff04 	addi	r2,r2,-4
1010f864:	10c00536 	bltu	r2,r3,1010f87c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f868:	e0bff917 	ldw	r2,-28(fp)
1010f86c:	10800917 	ldw	r2,36(r2)
1010f870:	10c00044 	addi	r3,r2,1
1010f874:	e0bff917 	ldw	r2,-28(fp)
1010f878:	10c00915 	stw	r3,36(r2)
1010f87c:	00840474 	movhi	r2,4113
1010f880:	10924204 	addi	r2,r2,18696
1010f884:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f888:	e037883a 	mov	sp,fp
1010f88c:	df000017 	ldw	fp,0(sp)
1010f890:	dec00104 	addi	sp,sp,4
1010f894:	f800283a 	ret

1010f898 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f898:	defffd04 	addi	sp,sp,-12
1010f89c:	df000215 	stw	fp,8(sp)
1010f8a0:	df000204 	addi	fp,sp,8
1010f8a4:	e13ffe15 	stw	r4,-8(fp)
1010f8a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f8ac:	00000506 	br	1010f8c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f8b0:	e0bfff17 	ldw	r2,-4(fp)
1010f8b4:	1090000c 	andi	r2,r2,16384
1010f8b8:	10000226 	beq	r2,zero,1010f8c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f8bc:	00bffd44 	movi	r2,-11
1010f8c0:	00000b06 	br	1010f8f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f8c4:	e0bffe17 	ldw	r2,-8(fp)
1010f8c8:	10c00d17 	ldw	r3,52(r2)
1010f8cc:	e0bffe17 	ldw	r2,-8(fp)
1010f8d0:	10800c17 	ldw	r2,48(r2)
1010f8d4:	18800526 	beq	r3,r2,1010f8ec <altera_avalon_jtag_uart_close+0x54>
1010f8d8:	e0bffe17 	ldw	r2,-8(fp)
1010f8dc:	10c00917 	ldw	r3,36(r2)
1010f8e0:	e0bffe17 	ldw	r2,-8(fp)
1010f8e4:	10800117 	ldw	r2,4(r2)
1010f8e8:	18bff136 	bltu	r3,r2,1010f8b0 <__alt_data_end+0xfffef8b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f8ec:	0005883a 	mov	r2,zero
}
1010f8f0:	e037883a 	mov	sp,fp
1010f8f4:	df000017 	ldw	fp,0(sp)
1010f8f8:	dec00104 	addi	sp,sp,4
1010f8fc:	f800283a 	ret

1010f900 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f900:	defffa04 	addi	sp,sp,-24
1010f904:	df000515 	stw	fp,20(sp)
1010f908:	df000504 	addi	fp,sp,20
1010f90c:	e13ffd15 	stw	r4,-12(fp)
1010f910:	e17ffe15 	stw	r5,-8(fp)
1010f914:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010f918:	00bff9c4 	movi	r2,-25
1010f91c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010f920:	e0bffe17 	ldw	r2,-8(fp)
1010f924:	10da8060 	cmpeqi	r3,r2,27137
1010f928:	1800031e 	bne	r3,zero,1010f938 <altera_avalon_jtag_uart_ioctl+0x38>
1010f92c:	109a80a0 	cmpeqi	r2,r2,27138
1010f930:	1000181e 	bne	r2,zero,1010f994 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010f934:	00002906 	br	1010f9dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010f938:	e0bffd17 	ldw	r2,-12(fp)
1010f93c:	10c00117 	ldw	r3,4(r2)
1010f940:	00a00034 	movhi	r2,32768
1010f944:	10bfffc4 	addi	r2,r2,-1
1010f948:	18802126 	beq	r3,r2,1010f9d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010f94c:	e0bfff17 	ldw	r2,-4(fp)
1010f950:	10800017 	ldw	r2,0(r2)
1010f954:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010f958:	e0bffc17 	ldw	r2,-16(fp)
1010f95c:	10800090 	cmplti	r2,r2,2
1010f960:	1000061e 	bne	r2,zero,1010f97c <altera_avalon_jtag_uart_ioctl+0x7c>
1010f964:	e0fffc17 	ldw	r3,-16(fp)
1010f968:	00a00034 	movhi	r2,32768
1010f96c:	10bfffc4 	addi	r2,r2,-1
1010f970:	18800226 	beq	r3,r2,1010f97c <altera_avalon_jtag_uart_ioctl+0x7c>
1010f974:	e0bffc17 	ldw	r2,-16(fp)
1010f978:	00000206 	br	1010f984 <altera_avalon_jtag_uart_ioctl+0x84>
1010f97c:	00a00034 	movhi	r2,32768
1010f980:	10bfff84 	addi	r2,r2,-2
1010f984:	e0fffd17 	ldw	r3,-12(fp)
1010f988:	18800115 	stw	r2,4(r3)
      rc = 0;
1010f98c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f990:	00000f06 	br	1010f9d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010f994:	e0bffd17 	ldw	r2,-12(fp)
1010f998:	10c00117 	ldw	r3,4(r2)
1010f99c:	00a00034 	movhi	r2,32768
1010f9a0:	10bfffc4 	addi	r2,r2,-1
1010f9a4:	18800c26 	beq	r3,r2,1010f9d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010f9a8:	e0bffd17 	ldw	r2,-12(fp)
1010f9ac:	10c00917 	ldw	r3,36(r2)
1010f9b0:	e0bffd17 	ldw	r2,-12(fp)
1010f9b4:	10800117 	ldw	r2,4(r2)
1010f9b8:	1885803a 	cmpltu	r2,r3,r2
1010f9bc:	10c03fcc 	andi	r3,r2,255
1010f9c0:	e0bfff17 	ldw	r2,-4(fp)
1010f9c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010f9c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010f9cc:	00000206 	br	1010f9d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010f9d0:	0001883a 	nop
1010f9d4:	00000106 	br	1010f9dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010f9d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010f9dc:	e0bffb17 	ldw	r2,-20(fp)
}
1010f9e0:	e037883a 	mov	sp,fp
1010f9e4:	df000017 	ldw	fp,0(sp)
1010f9e8:	dec00104 	addi	sp,sp,4
1010f9ec:	f800283a 	ret

1010f9f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010f9f0:	defff304 	addi	sp,sp,-52
1010f9f4:	dfc00c15 	stw	ra,48(sp)
1010f9f8:	df000b15 	stw	fp,44(sp)
1010f9fc:	df000b04 	addi	fp,sp,44
1010fa00:	e13ffc15 	stw	r4,-16(fp)
1010fa04:	e17ffd15 	stw	r5,-12(fp)
1010fa08:	e1bffe15 	stw	r6,-8(fp)
1010fa0c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010fa10:	e0bffd17 	ldw	r2,-12(fp)
1010fa14:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010fa18:	00004706 	br	1010fb38 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010fa1c:	e0bffc17 	ldw	r2,-16(fp)
1010fa20:	10800a17 	ldw	r2,40(r2)
1010fa24:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010fa28:	e0bffc17 	ldw	r2,-16(fp)
1010fa2c:	10800b17 	ldw	r2,44(r2)
1010fa30:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010fa34:	e0fff717 	ldw	r3,-36(fp)
1010fa38:	e0bff817 	ldw	r2,-32(fp)
1010fa3c:	18800536 	bltu	r3,r2,1010fa54 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010fa40:	e0fff717 	ldw	r3,-36(fp)
1010fa44:	e0bff817 	ldw	r2,-32(fp)
1010fa48:	1885c83a 	sub	r2,r3,r2
1010fa4c:	e0bff615 	stw	r2,-40(fp)
1010fa50:	00000406 	br	1010fa64 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010fa54:	00c20004 	movi	r3,2048
1010fa58:	e0bff817 	ldw	r2,-32(fp)
1010fa5c:	1885c83a 	sub	r2,r3,r2
1010fa60:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010fa64:	e0bff617 	ldw	r2,-40(fp)
1010fa68:	10001e26 	beq	r2,zero,1010fae4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010fa6c:	e0fffe17 	ldw	r3,-8(fp)
1010fa70:	e0bff617 	ldw	r2,-40(fp)
1010fa74:	1880022e 	bgeu	r3,r2,1010fa80 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010fa78:	e0bffe17 	ldw	r2,-8(fp)
1010fa7c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010fa80:	e0bffc17 	ldw	r2,-16(fp)
1010fa84:	10c00e04 	addi	r3,r2,56
1010fa88:	e0bff817 	ldw	r2,-32(fp)
1010fa8c:	1885883a 	add	r2,r3,r2
1010fa90:	e1bff617 	ldw	r6,-40(fp)
1010fa94:	100b883a 	mov	r5,r2
1010fa98:	e13ff517 	ldw	r4,-44(fp)
1010fa9c:	0107ee80 	call	10107ee8 <memcpy>
      ptr   += n;
1010faa0:	e0fff517 	ldw	r3,-44(fp)
1010faa4:	e0bff617 	ldw	r2,-40(fp)
1010faa8:	1885883a 	add	r2,r3,r2
1010faac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010fab0:	e0fffe17 	ldw	r3,-8(fp)
1010fab4:	e0bff617 	ldw	r2,-40(fp)
1010fab8:	1885c83a 	sub	r2,r3,r2
1010fabc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fac0:	e0fff817 	ldw	r3,-32(fp)
1010fac4:	e0bff617 	ldw	r2,-40(fp)
1010fac8:	1885883a 	add	r2,r3,r2
1010facc:	10c1ffcc 	andi	r3,r2,2047
1010fad0:	e0bffc17 	ldw	r2,-16(fp)
1010fad4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010fad8:	e0bffe17 	ldw	r2,-8(fp)
1010fadc:	00bfcf16 	blt	zero,r2,1010fa1c <__alt_data_end+0xfffefa1c>
1010fae0:	00000106 	br	1010fae8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010fae4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010fae8:	e0fff517 	ldw	r3,-44(fp)
1010faec:	e0bffd17 	ldw	r2,-12(fp)
1010faf0:	1880141e 	bne	r3,r2,1010fb44 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010faf4:	e0bfff17 	ldw	r2,-4(fp)
1010faf8:	1090000c 	andi	r2,r2,16384
1010fafc:	1000131e 	bne	r2,zero,1010fb4c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010fb00:	0001883a 	nop
1010fb04:	e0bffc17 	ldw	r2,-16(fp)
1010fb08:	10c00a17 	ldw	r3,40(r2)
1010fb0c:	e0bff717 	ldw	r2,-36(fp)
1010fb10:	1880051e 	bne	r3,r2,1010fb28 <altera_avalon_jtag_uart_read+0x138>
1010fb14:	e0bffc17 	ldw	r2,-16(fp)
1010fb18:	10c00917 	ldw	r3,36(r2)
1010fb1c:	e0bffc17 	ldw	r2,-16(fp)
1010fb20:	10800117 	ldw	r2,4(r2)
1010fb24:	18bff736 	bltu	r3,r2,1010fb04 <__alt_data_end+0xfffefb04>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010fb28:	e0bffc17 	ldw	r2,-16(fp)
1010fb2c:	10c00a17 	ldw	r3,40(r2)
1010fb30:	e0bff717 	ldw	r2,-36(fp)
1010fb34:	18800726 	beq	r3,r2,1010fb54 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010fb38:	e0bffe17 	ldw	r2,-8(fp)
1010fb3c:	00bfb716 	blt	zero,r2,1010fa1c <__alt_data_end+0xfffefa1c>
1010fb40:	00000506 	br	1010fb58 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010fb44:	0001883a 	nop
1010fb48:	00000306 	br	1010fb58 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010fb4c:	0001883a 	nop
1010fb50:	00000106 	br	1010fb58 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010fb54:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010fb58:	e0fff517 	ldw	r3,-44(fp)
1010fb5c:	e0bffd17 	ldw	r2,-12(fp)
1010fb60:	18801826 	beq	r3,r2,1010fbc4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fb64:	0005303a 	rdctl	r2,status
1010fb68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fb6c:	e0fffb17 	ldw	r3,-20(fp)
1010fb70:	00bfff84 	movi	r2,-2
1010fb74:	1884703a 	and	r2,r3,r2
1010fb78:	1001703a 	wrctl	status,r2
  
  return context;
1010fb7c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010fb80:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010fb84:	e0bffc17 	ldw	r2,-16(fp)
1010fb88:	10800817 	ldw	r2,32(r2)
1010fb8c:	10c00054 	ori	r3,r2,1
1010fb90:	e0bffc17 	ldw	r2,-16(fp)
1010fb94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fb98:	e0bffc17 	ldw	r2,-16(fp)
1010fb9c:	10800017 	ldw	r2,0(r2)
1010fba0:	10800104 	addi	r2,r2,4
1010fba4:	1007883a 	mov	r3,r2
1010fba8:	e0bffc17 	ldw	r2,-16(fp)
1010fbac:	10800817 	ldw	r2,32(r2)
1010fbb0:	18800035 	stwio	r2,0(r3)
1010fbb4:	e0bffa17 	ldw	r2,-24(fp)
1010fbb8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fbbc:	e0bff917 	ldw	r2,-28(fp)
1010fbc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010fbc4:	e0fff517 	ldw	r3,-44(fp)
1010fbc8:	e0bffd17 	ldw	r2,-12(fp)
1010fbcc:	18800426 	beq	r3,r2,1010fbe0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010fbd0:	e0fff517 	ldw	r3,-44(fp)
1010fbd4:	e0bffd17 	ldw	r2,-12(fp)
1010fbd8:	1885c83a 	sub	r2,r3,r2
1010fbdc:	00000606 	br	1010fbf8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010fbe0:	e0bfff17 	ldw	r2,-4(fp)
1010fbe4:	1090000c 	andi	r2,r2,16384
1010fbe8:	10000226 	beq	r2,zero,1010fbf4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010fbec:	00bffd44 	movi	r2,-11
1010fbf0:	00000106 	br	1010fbf8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010fbf4:	00bffec4 	movi	r2,-5
}
1010fbf8:	e037883a 	mov	sp,fp
1010fbfc:	dfc00117 	ldw	ra,4(sp)
1010fc00:	df000017 	ldw	fp,0(sp)
1010fc04:	dec00204 	addi	sp,sp,8
1010fc08:	f800283a 	ret

1010fc0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010fc0c:	defff304 	addi	sp,sp,-52
1010fc10:	dfc00c15 	stw	ra,48(sp)
1010fc14:	df000b15 	stw	fp,44(sp)
1010fc18:	df000b04 	addi	fp,sp,44
1010fc1c:	e13ffc15 	stw	r4,-16(fp)
1010fc20:	e17ffd15 	stw	r5,-12(fp)
1010fc24:	e1bffe15 	stw	r6,-8(fp)
1010fc28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010fc2c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010fc30:	e0bffd17 	ldw	r2,-12(fp)
1010fc34:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010fc38:	00003706 	br	1010fd18 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010fc3c:	e0bffc17 	ldw	r2,-16(fp)
1010fc40:	10800c17 	ldw	r2,48(r2)
1010fc44:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010fc48:	e0bffc17 	ldw	r2,-16(fp)
1010fc4c:	10800d17 	ldw	r2,52(r2)
1010fc50:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010fc54:	e0fff917 	ldw	r3,-28(fp)
1010fc58:	e0bff517 	ldw	r2,-44(fp)
1010fc5c:	1880062e 	bgeu	r3,r2,1010fc78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010fc60:	e0fff517 	ldw	r3,-44(fp)
1010fc64:	e0bff917 	ldw	r2,-28(fp)
1010fc68:	1885c83a 	sub	r2,r3,r2
1010fc6c:	10bfffc4 	addi	r2,r2,-1
1010fc70:	e0bff615 	stw	r2,-40(fp)
1010fc74:	00000b06 	br	1010fca4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010fc78:	e0bff517 	ldw	r2,-44(fp)
1010fc7c:	10000526 	beq	r2,zero,1010fc94 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010fc80:	00c20004 	movi	r3,2048
1010fc84:	e0bff917 	ldw	r2,-28(fp)
1010fc88:	1885c83a 	sub	r2,r3,r2
1010fc8c:	e0bff615 	stw	r2,-40(fp)
1010fc90:	00000406 	br	1010fca4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010fc94:	00c1ffc4 	movi	r3,2047
1010fc98:	e0bff917 	ldw	r2,-28(fp)
1010fc9c:	1885c83a 	sub	r2,r3,r2
1010fca0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010fca4:	e0bff617 	ldw	r2,-40(fp)
1010fca8:	10001e26 	beq	r2,zero,1010fd24 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010fcac:	e0fffe17 	ldw	r3,-8(fp)
1010fcb0:	e0bff617 	ldw	r2,-40(fp)
1010fcb4:	1880022e 	bgeu	r3,r2,1010fcc0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010fcb8:	e0bffe17 	ldw	r2,-8(fp)
1010fcbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010fcc0:	e0bffc17 	ldw	r2,-16(fp)
1010fcc4:	10c20e04 	addi	r3,r2,2104
1010fcc8:	e0bff917 	ldw	r2,-28(fp)
1010fccc:	1885883a 	add	r2,r3,r2
1010fcd0:	e1bff617 	ldw	r6,-40(fp)
1010fcd4:	e17ffd17 	ldw	r5,-12(fp)
1010fcd8:	1009883a 	mov	r4,r2
1010fcdc:	0107ee80 	call	10107ee8 <memcpy>
      ptr   += n;
1010fce0:	e0fffd17 	ldw	r3,-12(fp)
1010fce4:	e0bff617 	ldw	r2,-40(fp)
1010fce8:	1885883a 	add	r2,r3,r2
1010fcec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010fcf0:	e0fffe17 	ldw	r3,-8(fp)
1010fcf4:	e0bff617 	ldw	r2,-40(fp)
1010fcf8:	1885c83a 	sub	r2,r3,r2
1010fcfc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fd00:	e0fff917 	ldw	r3,-28(fp)
1010fd04:	e0bff617 	ldw	r2,-40(fp)
1010fd08:	1885883a 	add	r2,r3,r2
1010fd0c:	10c1ffcc 	andi	r3,r2,2047
1010fd10:	e0bffc17 	ldw	r2,-16(fp)
1010fd14:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010fd18:	e0bffe17 	ldw	r2,-8(fp)
1010fd1c:	00bfc716 	blt	zero,r2,1010fc3c <__alt_data_end+0xfffefc3c>
1010fd20:	00000106 	br	1010fd28 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010fd24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fd28:	0005303a 	rdctl	r2,status
1010fd2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fd30:	e0fffb17 	ldw	r3,-20(fp)
1010fd34:	00bfff84 	movi	r2,-2
1010fd38:	1884703a 	and	r2,r3,r2
1010fd3c:	1001703a 	wrctl	status,r2
  
  return context;
1010fd40:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010fd44:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010fd48:	e0bffc17 	ldw	r2,-16(fp)
1010fd4c:	10800817 	ldw	r2,32(r2)
1010fd50:	10c00094 	ori	r3,r2,2
1010fd54:	e0bffc17 	ldw	r2,-16(fp)
1010fd58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fd5c:	e0bffc17 	ldw	r2,-16(fp)
1010fd60:	10800017 	ldw	r2,0(r2)
1010fd64:	10800104 	addi	r2,r2,4
1010fd68:	1007883a 	mov	r3,r2
1010fd6c:	e0bffc17 	ldw	r2,-16(fp)
1010fd70:	10800817 	ldw	r2,32(r2)
1010fd74:	18800035 	stwio	r2,0(r3)
1010fd78:	e0bffa17 	ldw	r2,-24(fp)
1010fd7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fd80:	e0bff817 	ldw	r2,-32(fp)
1010fd84:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010fd88:	e0bffe17 	ldw	r2,-8(fp)
1010fd8c:	0080100e 	bge	zero,r2,1010fdd0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010fd90:	e0bfff17 	ldw	r2,-4(fp)
1010fd94:	1090000c 	andi	r2,r2,16384
1010fd98:	1000101e 	bne	r2,zero,1010fddc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010fd9c:	0001883a 	nop
1010fda0:	e0bffc17 	ldw	r2,-16(fp)
1010fda4:	10c00d17 	ldw	r3,52(r2)
1010fda8:	e0bff517 	ldw	r2,-44(fp)
1010fdac:	1880051e 	bne	r3,r2,1010fdc4 <altera_avalon_jtag_uart_write+0x1b8>
1010fdb0:	e0bffc17 	ldw	r2,-16(fp)
1010fdb4:	10c00917 	ldw	r3,36(r2)
1010fdb8:	e0bffc17 	ldw	r2,-16(fp)
1010fdbc:	10800117 	ldw	r2,4(r2)
1010fdc0:	18bff736 	bltu	r3,r2,1010fda0 <__alt_data_end+0xfffefda0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010fdc4:	e0bffc17 	ldw	r2,-16(fp)
1010fdc8:	10800917 	ldw	r2,36(r2)
1010fdcc:	1000051e 	bne	r2,zero,1010fde4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010fdd0:	e0bffe17 	ldw	r2,-8(fp)
1010fdd4:	00bfd016 	blt	zero,r2,1010fd18 <__alt_data_end+0xfffefd18>
1010fdd8:	00000306 	br	1010fde8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010fddc:	0001883a 	nop
1010fde0:	00000106 	br	1010fde8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010fde4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010fde8:	e0fffd17 	ldw	r3,-12(fp)
1010fdec:	e0bff717 	ldw	r2,-36(fp)
1010fdf0:	18800426 	beq	r3,r2,1010fe04 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010fdf4:	e0fffd17 	ldw	r3,-12(fp)
1010fdf8:	e0bff717 	ldw	r2,-36(fp)
1010fdfc:	1885c83a 	sub	r2,r3,r2
1010fe00:	00000606 	br	1010fe1c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010fe04:	e0bfff17 	ldw	r2,-4(fp)
1010fe08:	1090000c 	andi	r2,r2,16384
1010fe0c:	10000226 	beq	r2,zero,1010fe18 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010fe10:	00bffd44 	movi	r2,-11
1010fe14:	00000106 	br	1010fe1c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010fe18:	00bffec4 	movi	r2,-5
}
1010fe1c:	e037883a 	mov	sp,fp
1010fe20:	dfc00117 	ldw	ra,4(sp)
1010fe24:	df000017 	ldw	fp,0(sp)
1010fe28:	dec00204 	addi	sp,sp,8
1010fe2c:	f800283a 	ret

1010fe30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010fe30:	defff504 	addi	sp,sp,-44
1010fe34:	df000a15 	stw	fp,40(sp)
1010fe38:	df000a04 	addi	fp,sp,40
1010fe3c:	e13ffc15 	stw	r4,-16(fp)
1010fe40:	e17ffd15 	stw	r5,-12(fp)
1010fe44:	e1bffe15 	stw	r6,-8(fp)
1010fe48:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010fe4c:	e03ff615 	stw	zero,-40(fp)
1010fe50:	00840474 	movhi	r2,4113
1010fe54:	10924204 	addi	r2,r2,18696
1010fe58:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
1010fe5c:	10003f26 	beq	r2,zero,1010ff5c <alt_alarm_start+0x12c>
  {
    if (alarm)
1010fe60:	e0bffc17 	ldw	r2,-16(fp)
1010fe64:	10003b26 	beq	r2,zero,1010ff54 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1010fe68:	e0bffc17 	ldw	r2,-16(fp)
1010fe6c:	e0fffe17 	ldw	r3,-8(fp)
1010fe70:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010fe74:	e0bffc17 	ldw	r2,-16(fp)
1010fe78:	e0ffff17 	ldw	r3,-4(fp)
1010fe7c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fe80:	0005303a 	rdctl	r2,status
1010fe84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fe88:	e0fff917 	ldw	r3,-28(fp)
1010fe8c:	00bfff84 	movi	r2,-2
1010fe90:	1884703a 	and	r2,r3,r2
1010fe94:	1001703a 	wrctl	status,r2
  
  return context;
1010fe98:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010fe9c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010fea0:	00840474 	movhi	r2,4113
1010fea4:	10924304 	addi	r2,r2,18700
1010fea8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1010feac:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010feb0:	e0fffd17 	ldw	r3,-12(fp)
1010feb4:	e0bff617 	ldw	r2,-40(fp)
1010feb8:	1885883a 	add	r2,r3,r2
1010febc:	10c00044 	addi	r3,r2,1
1010fec0:	e0bffc17 	ldw	r2,-16(fp)
1010fec4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010fec8:	e0bffc17 	ldw	r2,-16(fp)
1010fecc:	10c00217 	ldw	r3,8(r2)
1010fed0:	e0bff617 	ldw	r2,-40(fp)
1010fed4:	1880042e 	bgeu	r3,r2,1010fee8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1010fed8:	e0bffc17 	ldw	r2,-16(fp)
1010fedc:	00c00044 	movi	r3,1
1010fee0:	10c00405 	stb	r3,16(r2)
1010fee4:	00000206 	br	1010fef0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1010fee8:	e0bffc17 	ldw	r2,-16(fp)
1010feec:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010fef0:	e0fffc17 	ldw	r3,-16(fp)
1010fef4:	00840474 	movhi	r2,4113
1010fef8:	108b7a04 	addi	r2,r2,11752
1010fefc:	e0bffa15 	stw	r2,-24(fp)
1010ff00:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010ff04:	e0bffb17 	ldw	r2,-20(fp)
1010ff08:	e0fffa17 	ldw	r3,-24(fp)
1010ff0c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010ff10:	e0bffa17 	ldw	r2,-24(fp)
1010ff14:	10c00017 	ldw	r3,0(r2)
1010ff18:	e0bffb17 	ldw	r2,-20(fp)
1010ff1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010ff20:	e0bffa17 	ldw	r2,-24(fp)
1010ff24:	10800017 	ldw	r2,0(r2)
1010ff28:	e0fffb17 	ldw	r3,-20(fp)
1010ff2c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010ff30:	e0bffa17 	ldw	r2,-24(fp)
1010ff34:	e0fffb17 	ldw	r3,-20(fp)
1010ff38:	10c00015 	stw	r3,0(r2)
1010ff3c:	e0bff817 	ldw	r2,-32(fp)
1010ff40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ff44:	e0bff717 	ldw	r2,-36(fp)
1010ff48:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1010ff4c:	0005883a 	mov	r2,zero
1010ff50:	00000306 	br	1010ff60 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1010ff54:	00bffa84 	movi	r2,-22
1010ff58:	00000106 	br	1010ff60 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
1010ff5c:	00bfde84 	movi	r2,-134
  }
}
1010ff60:	e037883a 	mov	sp,fp
1010ff64:	df000017 	ldw	fp,0(sp)
1010ff68:	dec00104 	addi	sp,sp,4
1010ff6c:	f800283a 	ret

1010ff70 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
1010ff70:	defffa04 	addi	sp,sp,-24
1010ff74:	dfc00515 	stw	ra,20(sp)
1010ff78:	df000415 	stw	fp,16(sp)
1010ff7c:	df000404 	addi	fp,sp,16
1010ff80:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
1010ff84:	008000c4 	movi	r2,3
1010ff88:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1010ff8c:	e0fffd17 	ldw	r3,-12(fp)
1010ff90:	008003f4 	movhi	r2,15
1010ff94:	10909004 	addi	r2,r2,16960
1010ff98:	1885383a 	mul	r2,r3,r2
1010ff9c:	100b883a 	mov	r5,r2
1010ffa0:	0100bef4 	movhi	r4,763
1010ffa4:	213c2004 	addi	r4,r4,-3968
1010ffa8:	01015c40 	call	101015c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1010ffac:	100b883a 	mov	r5,r2
1010ffb0:	01200034 	movhi	r4,32768
1010ffb4:	213fffc4 	addi	r4,r4,-1
1010ffb8:	01015c40 	call	101015c4 <__udivsi3>
1010ffbc:	100b883a 	mov	r5,r2
1010ffc0:	e13fff17 	ldw	r4,-4(fp)
1010ffc4:	01015c40 	call	101015c4 <__udivsi3>
1010ffc8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1010ffcc:	e0bffe17 	ldw	r2,-8(fp)
1010ffd0:	10002a26 	beq	r2,zero,1011007c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
1010ffd4:	e03ffc15 	stw	zero,-16(fp)
1010ffd8:	00001706 	br	10110038 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1010ffdc:	00a00034 	movhi	r2,32768
1010ffe0:	10bfffc4 	addi	r2,r2,-1
1010ffe4:	10bfffc4 	addi	r2,r2,-1
1010ffe8:	103ffe1e 	bne	r2,zero,1010ffe4 <__alt_data_end+0xfffeffe4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1010ffec:	e0fffd17 	ldw	r3,-12(fp)
1010fff0:	008003f4 	movhi	r2,15
1010fff4:	10909004 	addi	r2,r2,16960
1010fff8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1010fffc:	100b883a 	mov	r5,r2
10110000:	0100bef4 	movhi	r4,763
10110004:	213c2004 	addi	r4,r4,-3968
10110008:	01015c40 	call	101015c4 <__udivsi3>
1011000c:	100b883a 	mov	r5,r2
10110010:	01200034 	movhi	r4,32768
10110014:	213fffc4 	addi	r4,r4,-1
10110018:	01015c40 	call	101015c4 <__udivsi3>
1011001c:	1007883a 	mov	r3,r2
10110020:	e0bfff17 	ldw	r2,-4(fp)
10110024:	10c5c83a 	sub	r2,r2,r3
10110028:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
1011002c:	e0bffc17 	ldw	r2,-16(fp)
10110030:	10800044 	addi	r2,r2,1
10110034:	e0bffc15 	stw	r2,-16(fp)
10110038:	e0fffc17 	ldw	r3,-16(fp)
1011003c:	e0bffe17 	ldw	r2,-8(fp)
10110040:	18bfe616 	blt	r3,r2,1010ffdc <__alt_data_end+0xfffeffdc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10110044:	e0fffd17 	ldw	r3,-12(fp)
10110048:	008003f4 	movhi	r2,15
1011004c:	10909004 	addi	r2,r2,16960
10110050:	1885383a 	mul	r2,r3,r2
10110054:	100b883a 	mov	r5,r2
10110058:	0100bef4 	movhi	r4,763
1011005c:	213c2004 	addi	r4,r4,-3968
10110060:	01015c40 	call	101015c4 <__udivsi3>
10110064:	1007883a 	mov	r3,r2
10110068:	e0bfff17 	ldw	r2,-4(fp)
1011006c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10110070:	10bfffc4 	addi	r2,r2,-1
10110074:	103ffe1e 	bne	r2,zero,10110070 <__alt_data_end+0xffff0070>
10110078:	00000d06 	br	101100b0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1011007c:	e0fffd17 	ldw	r3,-12(fp)
10110080:	008003f4 	movhi	r2,15
10110084:	10909004 	addi	r2,r2,16960
10110088:	1885383a 	mul	r2,r3,r2
1011008c:	100b883a 	mov	r5,r2
10110090:	0100bef4 	movhi	r4,763
10110094:	213c2004 	addi	r4,r4,-3968
10110098:	01015c40 	call	101015c4 <__udivsi3>
1011009c:	1007883a 	mov	r3,r2
101100a0:	e0bfff17 	ldw	r2,-4(fp)
101100a4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101100a8:	10bfffc4 	addi	r2,r2,-1
101100ac:	00bffe16 	blt	zero,r2,101100a8 <__alt_data_end+0xffff00a8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
101100b0:	0005883a 	mov	r2,zero
}
101100b4:	e037883a 	mov	sp,fp
101100b8:	dfc00117 	ldw	ra,4(sp)
101100bc:	df000017 	ldw	fp,0(sp)
101100c0:	dec00204 	addi	sp,sp,8
101100c4:	f800283a 	ret

101100c8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101100c8:	defffe04 	addi	sp,sp,-8
101100cc:	df000115 	stw	fp,4(sp)
101100d0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101100d4:	e03fff15 	stw	zero,-4(fp)
101100d8:	00000506 	br	101100f0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
101100dc:	e0bfff17 	ldw	r2,-4(fp)
101100e0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
101100e4:	e0bfff17 	ldw	r2,-4(fp)
101100e8:	10800804 	addi	r2,r2,32
101100ec:	e0bfff15 	stw	r2,-4(fp)
101100f0:	e0bfff17 	ldw	r2,-4(fp)
101100f4:	10820030 	cmpltui	r2,r2,2048
101100f8:	103ff81e 	bne	r2,zero,101100dc <__alt_data_end+0xffff00dc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101100fc:	0001883a 	nop
10110100:	e037883a 	mov	sp,fp
10110104:	df000017 	ldw	fp,0(sp)
10110108:	dec00104 	addi	sp,sp,4
1011010c:	f800283a 	ret

10110110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10110110:	defffe04 	addi	sp,sp,-8
10110114:	dfc00115 	stw	ra,4(sp)
10110118:	df000015 	stw	fp,0(sp)
1011011c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10110120:	00840474 	movhi	r2,4113
10110124:	108b7704 	addi	r2,r2,11740
10110128:	10800017 	ldw	r2,0(r2)
1011012c:	10000526 	beq	r2,zero,10110144 <alt_get_errno+0x34>
10110130:	00840474 	movhi	r2,4113
10110134:	108b7704 	addi	r2,r2,11740
10110138:	10800017 	ldw	r2,0(r2)
1011013c:	103ee83a 	callr	r2
10110140:	00000206 	br	1011014c <alt_get_errno+0x3c>
10110144:	00840474 	movhi	r2,4113
10110148:	10923704 	addi	r2,r2,18652
}
1011014c:	e037883a 	mov	sp,fp
10110150:	dfc00117 	ldw	ra,4(sp)
10110154:	df000017 	ldw	fp,0(sp)
10110158:	dec00204 	addi	sp,sp,8
1011015c:	f800283a 	ret

10110160 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10110160:	defffa04 	addi	sp,sp,-24
10110164:	dfc00515 	stw	ra,20(sp)
10110168:	df000415 	stw	fp,16(sp)
1011016c:	df000404 	addi	fp,sp,16
10110170:	e13ffe15 	stw	r4,-8(fp)
10110174:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10110178:	e0bffe17 	ldw	r2,-8(fp)
1011017c:	10000326 	beq	r2,zero,1011018c <alt_dev_llist_insert+0x2c>
10110180:	e0bffe17 	ldw	r2,-8(fp)
10110184:	10800217 	ldw	r2,8(r2)
10110188:	1000061e 	bne	r2,zero,101101a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1011018c:	01101100 	call	10110110 <alt_get_errno>
10110190:	1007883a 	mov	r3,r2
10110194:	00800584 	movi	r2,22
10110198:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1011019c:	00bffa84 	movi	r2,-22
101101a0:	00001306 	br	101101f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
101101a4:	e0bffe17 	ldw	r2,-8(fp)
101101a8:	e0ffff17 	ldw	r3,-4(fp)
101101ac:	e0fffc15 	stw	r3,-16(fp)
101101b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101101b4:	e0bffd17 	ldw	r2,-12(fp)
101101b8:	e0fffc17 	ldw	r3,-16(fp)
101101bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101101c0:	e0bffc17 	ldw	r2,-16(fp)
101101c4:	10c00017 	ldw	r3,0(r2)
101101c8:	e0bffd17 	ldw	r2,-12(fp)
101101cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101101d0:	e0bffc17 	ldw	r2,-16(fp)
101101d4:	10800017 	ldw	r2,0(r2)
101101d8:	e0fffd17 	ldw	r3,-12(fp)
101101dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101101e0:	e0bffc17 	ldw	r2,-16(fp)
101101e4:	e0fffd17 	ldw	r3,-12(fp)
101101e8:	10c00015 	stw	r3,0(r2)

  return 0;  
101101ec:	0005883a 	mov	r2,zero
}
101101f0:	e037883a 	mov	sp,fp
101101f4:	dfc00117 	ldw	ra,4(sp)
101101f8:	df000017 	ldw	fp,0(sp)
101101fc:	dec00204 	addi	sp,sp,8
10110200:	f800283a 	ret

10110204 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10110204:	defffd04 	addi	sp,sp,-12
10110208:	dfc00215 	stw	ra,8(sp)
1011020c:	df000115 	stw	fp,4(sp)
10110210:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110214:	00840474 	movhi	r2,4113
10110218:	1083f904 	addi	r2,r2,4068
1011021c:	e0bfff15 	stw	r2,-4(fp)
10110220:	00000606 	br	1011023c <_do_ctors+0x38>
        (*ctor) (); 
10110224:	e0bfff17 	ldw	r2,-4(fp)
10110228:	10800017 	ldw	r2,0(r2)
1011022c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110230:	e0bfff17 	ldw	r2,-4(fp)
10110234:	10bfff04 	addi	r2,r2,-4
10110238:	e0bfff15 	stw	r2,-4(fp)
1011023c:	e0ffff17 	ldw	r3,-4(fp)
10110240:	00840474 	movhi	r2,4113
10110244:	1083fa04 	addi	r2,r2,4072
10110248:	18bff62e 	bgeu	r3,r2,10110224 <__alt_data_end+0xffff0224>
        (*ctor) (); 
}
1011024c:	0001883a 	nop
10110250:	e037883a 	mov	sp,fp
10110254:	dfc00117 	ldw	ra,4(sp)
10110258:	df000017 	ldw	fp,0(sp)
1011025c:	dec00204 	addi	sp,sp,8
10110260:	f800283a 	ret

10110264 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10110264:	defffd04 	addi	sp,sp,-12
10110268:	dfc00215 	stw	ra,8(sp)
1011026c:	df000115 	stw	fp,4(sp)
10110270:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110274:	00840474 	movhi	r2,4113
10110278:	1083f904 	addi	r2,r2,4068
1011027c:	e0bfff15 	stw	r2,-4(fp)
10110280:	00000606 	br	1011029c <_do_dtors+0x38>
        (*dtor) (); 
10110284:	e0bfff17 	ldw	r2,-4(fp)
10110288:	10800017 	ldw	r2,0(r2)
1011028c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110290:	e0bfff17 	ldw	r2,-4(fp)
10110294:	10bfff04 	addi	r2,r2,-4
10110298:	e0bfff15 	stw	r2,-4(fp)
1011029c:	e0ffff17 	ldw	r3,-4(fp)
101102a0:	00840474 	movhi	r2,4113
101102a4:	1083fa04 	addi	r2,r2,4072
101102a8:	18bff62e 	bgeu	r3,r2,10110284 <__alt_data_end+0xffff0284>
        (*dtor) (); 
}
101102ac:	0001883a 	nop
101102b0:	e037883a 	mov	sp,fp
101102b4:	dfc00117 	ldw	ra,4(sp)
101102b8:	df000017 	ldw	fp,0(sp)
101102bc:	dec00204 	addi	sp,sp,8
101102c0:	f800283a 	ret

101102c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
101102c4:	defffa04 	addi	sp,sp,-24
101102c8:	dfc00515 	stw	ra,20(sp)
101102cc:	df000415 	stw	fp,16(sp)
101102d0:	df000404 	addi	fp,sp,16
101102d4:	e13ffe15 	stw	r4,-8(fp)
101102d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
101102dc:	e0bfff17 	ldw	r2,-4(fp)
101102e0:	10800017 	ldw	r2,0(r2)
101102e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
101102e8:	e13ffe17 	ldw	r4,-8(fp)
101102ec:	010989c0 	call	1010989c <strlen>
101102f0:	10800044 	addi	r2,r2,1
101102f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101102f8:	00000d06 	br	10110330 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
101102fc:	e0bffc17 	ldw	r2,-16(fp)
10110300:	10800217 	ldw	r2,8(r2)
10110304:	e0fffd17 	ldw	r3,-12(fp)
10110308:	180d883a 	mov	r6,r3
1011030c:	e17ffe17 	ldw	r5,-8(fp)
10110310:	1009883a 	mov	r4,r2
10110314:	0110ca00 	call	10110ca0 <memcmp>
10110318:	1000021e 	bne	r2,zero,10110324 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1011031c:	e0bffc17 	ldw	r2,-16(fp)
10110320:	00000706 	br	10110340 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10110324:	e0bffc17 	ldw	r2,-16(fp)
10110328:	10800017 	ldw	r2,0(r2)
1011032c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10110330:	e0fffc17 	ldw	r3,-16(fp)
10110334:	e0bfff17 	ldw	r2,-4(fp)
10110338:	18bff01e 	bne	r3,r2,101102fc <__alt_data_end+0xffff02fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1011033c:	0005883a 	mov	r2,zero
}
10110340:	e037883a 	mov	sp,fp
10110344:	dfc00117 	ldw	ra,4(sp)
10110348:	df000017 	ldw	fp,0(sp)
1011034c:	dec00204 	addi	sp,sp,8
10110350:	f800283a 	ret

10110354 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10110354:	defffb04 	addi	sp,sp,-20
10110358:	dfc00415 	stw	ra,16(sp)
1011035c:	df000315 	stw	fp,12(sp)
10110360:	df000304 	addi	fp,sp,12
10110364:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10110368:	00840474 	movhi	r2,4113
1011036c:	108b7204 	addi	r2,r2,11720
10110370:	10800017 	ldw	r2,0(r2)
10110374:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110378:	00003106 	br	10110440 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1011037c:	e0bffd17 	ldw	r2,-12(fp)
10110380:	10800217 	ldw	r2,8(r2)
10110384:	1009883a 	mov	r4,r2
10110388:	010989c0 	call	1010989c <strlen>
1011038c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10110390:	e0bffd17 	ldw	r2,-12(fp)
10110394:	10c00217 	ldw	r3,8(r2)
10110398:	e0bffe17 	ldw	r2,-8(fp)
1011039c:	10bfffc4 	addi	r2,r2,-1
101103a0:	1885883a 	add	r2,r3,r2
101103a4:	10800003 	ldbu	r2,0(r2)
101103a8:	10803fcc 	andi	r2,r2,255
101103ac:	1080201c 	xori	r2,r2,128
101103b0:	10bfe004 	addi	r2,r2,-128
101103b4:	10800bd8 	cmpnei	r2,r2,47
101103b8:	1000031e 	bne	r2,zero,101103c8 <alt_find_file+0x74>
    {
      len -= 1;
101103bc:	e0bffe17 	ldw	r2,-8(fp)
101103c0:	10bfffc4 	addi	r2,r2,-1
101103c4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
101103c8:	e0bffe17 	ldw	r2,-8(fp)
101103cc:	e0ffff17 	ldw	r3,-4(fp)
101103d0:	1885883a 	add	r2,r3,r2
101103d4:	10800003 	ldbu	r2,0(r2)
101103d8:	10803fcc 	andi	r2,r2,255
101103dc:	1080201c 	xori	r2,r2,128
101103e0:	10bfe004 	addi	r2,r2,-128
101103e4:	10800be0 	cmpeqi	r2,r2,47
101103e8:	1000081e 	bne	r2,zero,1011040c <alt_find_file+0xb8>
101103ec:	e0bffe17 	ldw	r2,-8(fp)
101103f0:	e0ffff17 	ldw	r3,-4(fp)
101103f4:	1885883a 	add	r2,r3,r2
101103f8:	10800003 	ldbu	r2,0(r2)
101103fc:	10803fcc 	andi	r2,r2,255
10110400:	1080201c 	xori	r2,r2,128
10110404:	10bfe004 	addi	r2,r2,-128
10110408:	10000a1e 	bne	r2,zero,10110434 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1011040c:	e0bffd17 	ldw	r2,-12(fp)
10110410:	10800217 	ldw	r2,8(r2)
10110414:	e0fffe17 	ldw	r3,-8(fp)
10110418:	180d883a 	mov	r6,r3
1011041c:	e17fff17 	ldw	r5,-4(fp)
10110420:	1009883a 	mov	r4,r2
10110424:	0110ca00 	call	10110ca0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110428:	1000021e 	bne	r2,zero,10110434 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1011042c:	e0bffd17 	ldw	r2,-12(fp)
10110430:	00000806 	br	10110454 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10110434:	e0bffd17 	ldw	r2,-12(fp)
10110438:	10800017 	ldw	r2,0(r2)
1011043c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10110440:	e0fffd17 	ldw	r3,-12(fp)
10110444:	00840474 	movhi	r2,4113
10110448:	108b7204 	addi	r2,r2,11720
1011044c:	18bfcb1e 	bne	r3,r2,1011037c <__alt_data_end+0xffff037c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10110450:	0005883a 	mov	r2,zero
}
10110454:	e037883a 	mov	sp,fp
10110458:	dfc00117 	ldw	ra,4(sp)
1011045c:	df000017 	ldw	fp,0(sp)
10110460:	dec00204 	addi	sp,sp,8
10110464:	f800283a 	ret

10110468 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10110468:	defffc04 	addi	sp,sp,-16
1011046c:	df000315 	stw	fp,12(sp)
10110470:	df000304 	addi	fp,sp,12
10110474:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10110478:	00bffa04 	movi	r2,-24
1011047c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110480:	e03ffd15 	stw	zero,-12(fp)
10110484:	00001d06 	br	101104fc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
10110488:	00840474 	movhi	r2,4113
1011048c:	1086f404 	addi	r2,r2,7120
10110490:	e0fffd17 	ldw	r3,-12(fp)
10110494:	18c00324 	muli	r3,r3,12
10110498:	10c5883a 	add	r2,r2,r3
1011049c:	10800017 	ldw	r2,0(r2)
101104a0:	1000131e 	bne	r2,zero,101104f0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
101104a4:	00840474 	movhi	r2,4113
101104a8:	1086f404 	addi	r2,r2,7120
101104ac:	e0fffd17 	ldw	r3,-12(fp)
101104b0:	18c00324 	muli	r3,r3,12
101104b4:	10c5883a 	add	r2,r2,r3
101104b8:	e0ffff17 	ldw	r3,-4(fp)
101104bc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
101104c0:	00840474 	movhi	r2,4113
101104c4:	108b7604 	addi	r2,r2,11736
101104c8:	10c00017 	ldw	r3,0(r2)
101104cc:	e0bffd17 	ldw	r2,-12(fp)
101104d0:	1880040e 	bge	r3,r2,101104e4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
101104d4:	00840474 	movhi	r2,4113
101104d8:	108b7604 	addi	r2,r2,11736
101104dc:	e0fffd17 	ldw	r3,-12(fp)
101104e0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
101104e4:	e0bffd17 	ldw	r2,-12(fp)
101104e8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
101104ec:	00000606 	br	10110508 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101104f0:	e0bffd17 	ldw	r2,-12(fp)
101104f4:	10800044 	addi	r2,r2,1
101104f8:	e0bffd15 	stw	r2,-12(fp)
101104fc:	e0bffd17 	ldw	r2,-12(fp)
10110500:	10800810 	cmplti	r2,r2,32
10110504:	103fe01e 	bne	r2,zero,10110488 <__alt_data_end+0xffff0488>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110508:	e0bffe17 	ldw	r2,-8(fp)
}
1011050c:	e037883a 	mov	sp,fp
10110510:	df000017 	ldw	fp,0(sp)
10110514:	dec00104 	addi	sp,sp,4
10110518:	f800283a 	ret

1011051c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1011051c:	defffe04 	addi	sp,sp,-8
10110520:	dfc00115 	stw	ra,4(sp)
10110524:	df000015 	stw	fp,0(sp)
10110528:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
1011052c:	01440004 	movi	r5,4096
10110530:	0009883a 	mov	r4,zero
10110534:	0110b280 	call	10110b28 <alt_icache_flush>
#endif
}
10110538:	0001883a 	nop
1011053c:	e037883a 	mov	sp,fp
10110540:	dfc00117 	ldw	ra,4(sp)
10110544:	df000017 	ldw	fp,0(sp)
10110548:	dec00204 	addi	sp,sp,8
1011054c:	f800283a 	ret

10110550 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110550:	defff904 	addi	sp,sp,-28
10110554:	dfc00615 	stw	ra,24(sp)
10110558:	df000515 	stw	fp,20(sp)
1011055c:	df000504 	addi	fp,sp,20
10110560:	e13ffc15 	stw	r4,-16(fp)
10110564:	e17ffd15 	stw	r5,-12(fp)
10110568:	e1bffe15 	stw	r6,-8(fp)
1011056c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10110570:	e0800217 	ldw	r2,8(fp)
10110574:	d8800015 	stw	r2,0(sp)
10110578:	e1ffff17 	ldw	r7,-4(fp)
1011057c:	e1bffe17 	ldw	r6,-8(fp)
10110580:	e17ffd17 	ldw	r5,-12(fp)
10110584:	e13ffc17 	ldw	r4,-16(fp)
10110588:	01107300 	call	10110730 <alt_iic_isr_register>
}  
1011058c:	e037883a 	mov	sp,fp
10110590:	dfc00117 	ldw	ra,4(sp)
10110594:	df000017 	ldw	fp,0(sp)
10110598:	dec00204 	addi	sp,sp,8
1011059c:	f800283a 	ret

101105a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
101105a0:	defff904 	addi	sp,sp,-28
101105a4:	df000615 	stw	fp,24(sp)
101105a8:	df000604 	addi	fp,sp,24
101105ac:	e13ffe15 	stw	r4,-8(fp)
101105b0:	e17fff15 	stw	r5,-4(fp)
101105b4:	e0bfff17 	ldw	r2,-4(fp)
101105b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101105bc:	0005303a 	rdctl	r2,status
101105c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101105c4:	e0fffb17 	ldw	r3,-20(fp)
101105c8:	00bfff84 	movi	r2,-2
101105cc:	1884703a 	and	r2,r3,r2
101105d0:	1001703a 	wrctl	status,r2
  
  return context;
101105d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
101105d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
101105dc:	00c00044 	movi	r3,1
101105e0:	e0bffa17 	ldw	r2,-24(fp)
101105e4:	1884983a 	sll	r2,r3,r2
101105e8:	1007883a 	mov	r3,r2
101105ec:	00840474 	movhi	r2,4113
101105f0:	10924104 	addi	r2,r2,18692
101105f4:	10800017 	ldw	r2,0(r2)
101105f8:	1886b03a 	or	r3,r3,r2
101105fc:	00840474 	movhi	r2,4113
10110600:	10924104 	addi	r2,r2,18692
10110604:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110608:	00840474 	movhi	r2,4113
1011060c:	10924104 	addi	r2,r2,18692
10110610:	10800017 	ldw	r2,0(r2)
10110614:	100170fa 	wrctl	ienable,r2
10110618:	e0bffc17 	ldw	r2,-16(fp)
1011061c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110620:	e0bffd17 	ldw	r2,-12(fp)
10110624:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110628:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1011062c:	0001883a 	nop
}
10110630:	e037883a 	mov	sp,fp
10110634:	df000017 	ldw	fp,0(sp)
10110638:	dec00104 	addi	sp,sp,4
1011063c:	f800283a 	ret

10110640 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110640:	defff904 	addi	sp,sp,-28
10110644:	df000615 	stw	fp,24(sp)
10110648:	df000604 	addi	fp,sp,24
1011064c:	e13ffe15 	stw	r4,-8(fp)
10110650:	e17fff15 	stw	r5,-4(fp)
10110654:	e0bfff17 	ldw	r2,-4(fp)
10110658:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011065c:	0005303a 	rdctl	r2,status
10110660:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110664:	e0fffb17 	ldw	r3,-20(fp)
10110668:	00bfff84 	movi	r2,-2
1011066c:	1884703a 	and	r2,r3,r2
10110670:	1001703a 	wrctl	status,r2
  
  return context;
10110674:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110678:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1011067c:	00c00044 	movi	r3,1
10110680:	e0bffa17 	ldw	r2,-24(fp)
10110684:	1884983a 	sll	r2,r3,r2
10110688:	0084303a 	nor	r2,zero,r2
1011068c:	1007883a 	mov	r3,r2
10110690:	00840474 	movhi	r2,4113
10110694:	10924104 	addi	r2,r2,18692
10110698:	10800017 	ldw	r2,0(r2)
1011069c:	1886703a 	and	r3,r3,r2
101106a0:	00840474 	movhi	r2,4113
101106a4:	10924104 	addi	r2,r2,18692
101106a8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101106ac:	00840474 	movhi	r2,4113
101106b0:	10924104 	addi	r2,r2,18692
101106b4:	10800017 	ldw	r2,0(r2)
101106b8:	100170fa 	wrctl	ienable,r2
101106bc:	e0bffc17 	ldw	r2,-16(fp)
101106c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101106c4:	e0bffd17 	ldw	r2,-12(fp)
101106c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101106cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
101106d0:	0001883a 	nop
}
101106d4:	e037883a 	mov	sp,fp
101106d8:	df000017 	ldw	fp,0(sp)
101106dc:	dec00104 	addi	sp,sp,4
101106e0:	f800283a 	ret

101106e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
101106e4:	defffc04 	addi	sp,sp,-16
101106e8:	df000315 	stw	fp,12(sp)
101106ec:	df000304 	addi	fp,sp,12
101106f0:	e13ffe15 	stw	r4,-8(fp)
101106f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
101106f8:	000530fa 	rdctl	r2,ienable
101106fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10110700:	00c00044 	movi	r3,1
10110704:	e0bfff17 	ldw	r2,-4(fp)
10110708:	1884983a 	sll	r2,r3,r2
1011070c:	1007883a 	mov	r3,r2
10110710:	e0bffd17 	ldw	r2,-12(fp)
10110714:	1884703a 	and	r2,r3,r2
10110718:	1004c03a 	cmpne	r2,r2,zero
1011071c:	10803fcc 	andi	r2,r2,255
}
10110720:	e037883a 	mov	sp,fp
10110724:	df000017 	ldw	fp,0(sp)
10110728:	dec00104 	addi	sp,sp,4
1011072c:	f800283a 	ret

10110730 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110730:	defff504 	addi	sp,sp,-44
10110734:	dfc00a15 	stw	ra,40(sp)
10110738:	df000915 	stw	fp,36(sp)
1011073c:	df000904 	addi	fp,sp,36
10110740:	e13ffc15 	stw	r4,-16(fp)
10110744:	e17ffd15 	stw	r5,-12(fp)
10110748:	e1bffe15 	stw	r6,-8(fp)
1011074c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110750:	00bffa84 	movi	r2,-22
10110754:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10110758:	e0bffd17 	ldw	r2,-12(fp)
1011075c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110760:	e0bff817 	ldw	r2,-32(fp)
10110764:	10800808 	cmpgei	r2,r2,32
10110768:	1000271e 	bne	r2,zero,10110808 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1011076c:	0005303a 	rdctl	r2,status
10110770:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110774:	e0fffb17 	ldw	r3,-20(fp)
10110778:	00bfff84 	movi	r2,-2
1011077c:	1884703a 	and	r2,r3,r2
10110780:	1001703a 	wrctl	status,r2
  
  return context;
10110784:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10110788:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1011078c:	00840474 	movhi	r2,4113
10110790:	10924f04 	addi	r2,r2,18748
10110794:	e0fff817 	ldw	r3,-32(fp)
10110798:	180690fa 	slli	r3,r3,3
1011079c:	10c5883a 	add	r2,r2,r3
101107a0:	e0fffe17 	ldw	r3,-8(fp)
101107a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
101107a8:	00840474 	movhi	r2,4113
101107ac:	10924f04 	addi	r2,r2,18748
101107b0:	e0fff817 	ldw	r3,-32(fp)
101107b4:	180690fa 	slli	r3,r3,3
101107b8:	10c5883a 	add	r2,r2,r3
101107bc:	10800104 	addi	r2,r2,4
101107c0:	e0ffff17 	ldw	r3,-4(fp)
101107c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
101107c8:	e0bffe17 	ldw	r2,-8(fp)
101107cc:	10000526 	beq	r2,zero,101107e4 <alt_iic_isr_register+0xb4>
101107d0:	e0bff817 	ldw	r2,-32(fp)
101107d4:	100b883a 	mov	r5,r2
101107d8:	e13ffc17 	ldw	r4,-16(fp)
101107dc:	01105a00 	call	101105a0 <alt_ic_irq_enable>
101107e0:	00000406 	br	101107f4 <alt_iic_isr_register+0xc4>
101107e4:	e0bff817 	ldw	r2,-32(fp)
101107e8:	100b883a 	mov	r5,r2
101107ec:	e13ffc17 	ldw	r4,-16(fp)
101107f0:	01106400 	call	10110640 <alt_ic_irq_disable>
101107f4:	e0bff715 	stw	r2,-36(fp)
101107f8:	e0bffa17 	ldw	r2,-24(fp)
101107fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110800:	e0bff917 	ldw	r2,-28(fp)
10110804:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10110808:	e0bff717 	ldw	r2,-36(fp)
}
1011080c:	e037883a 	mov	sp,fp
10110810:	dfc00117 	ldw	ra,4(sp)
10110814:	df000017 	ldw	fp,0(sp)
10110818:	dec00204 	addi	sp,sp,8
1011081c:	f800283a 	ret

10110820 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110820:	defff904 	addi	sp,sp,-28
10110824:	dfc00615 	stw	ra,24(sp)
10110828:	df000515 	stw	fp,20(sp)
1011082c:	df000504 	addi	fp,sp,20
10110830:	e13ffc15 	stw	r4,-16(fp)
10110834:	e17ffd15 	stw	r5,-12(fp)
10110838:	e1bffe15 	stw	r6,-8(fp)
1011083c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110840:	e1bfff17 	ldw	r6,-4(fp)
10110844:	e17ffe17 	ldw	r5,-8(fp)
10110848:	e13ffd17 	ldw	r4,-12(fp)
1011084c:	010edd00 	call	1010edd0 <open>
10110850:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110854:	e0bffb17 	ldw	r2,-20(fp)
10110858:	10001c16 	blt	r2,zero,101108cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
1011085c:	00840474 	movhi	r2,4113
10110860:	1086f404 	addi	r2,r2,7120
10110864:	e0fffb17 	ldw	r3,-20(fp)
10110868:	18c00324 	muli	r3,r3,12
1011086c:	10c5883a 	add	r2,r2,r3
10110870:	10c00017 	ldw	r3,0(r2)
10110874:	e0bffc17 	ldw	r2,-16(fp)
10110878:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1011087c:	00840474 	movhi	r2,4113
10110880:	1086f404 	addi	r2,r2,7120
10110884:	e0fffb17 	ldw	r3,-20(fp)
10110888:	18c00324 	muli	r3,r3,12
1011088c:	10c5883a 	add	r2,r2,r3
10110890:	10800104 	addi	r2,r2,4
10110894:	10c00017 	ldw	r3,0(r2)
10110898:	e0bffc17 	ldw	r2,-16(fp)
1011089c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
101108a0:	00840474 	movhi	r2,4113
101108a4:	1086f404 	addi	r2,r2,7120
101108a8:	e0fffb17 	ldw	r3,-20(fp)
101108ac:	18c00324 	muli	r3,r3,12
101108b0:	10c5883a 	add	r2,r2,r3
101108b4:	10800204 	addi	r2,r2,8
101108b8:	10c00017 	ldw	r3,0(r2)
101108bc:	e0bffc17 	ldw	r2,-16(fp)
101108c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
101108c4:	e13ffb17 	ldw	r4,-20(fp)
101108c8:	010f0740 	call	1010f074 <alt_release_fd>
  }
} 
101108cc:	0001883a 	nop
101108d0:	e037883a 	mov	sp,fp
101108d4:	dfc00117 	ldw	ra,4(sp)
101108d8:	df000017 	ldw	fp,0(sp)
101108dc:	dec00204 	addi	sp,sp,8
101108e0:	f800283a 	ret

101108e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
101108e4:	defffb04 	addi	sp,sp,-20
101108e8:	dfc00415 	stw	ra,16(sp)
101108ec:	df000315 	stw	fp,12(sp)
101108f0:	df000304 	addi	fp,sp,12
101108f4:	e13ffd15 	stw	r4,-12(fp)
101108f8:	e17ffe15 	stw	r5,-8(fp)
101108fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10110900:	01c07fc4 	movi	r7,511
10110904:	01800044 	movi	r6,1
10110908:	e17ffd17 	ldw	r5,-12(fp)
1011090c:	01040474 	movhi	r4,4113
10110910:	2106f704 	addi	r4,r4,7132
10110914:	01108200 	call	10110820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10110918:	01c07fc4 	movi	r7,511
1011091c:	000d883a 	mov	r6,zero
10110920:	e17ffe17 	ldw	r5,-8(fp)
10110924:	01040474 	movhi	r4,4113
10110928:	2106f404 	addi	r4,r4,7120
1011092c:	01108200 	call	10110820 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110930:	01c07fc4 	movi	r7,511
10110934:	01800044 	movi	r6,1
10110938:	e17fff17 	ldw	r5,-4(fp)
1011093c:	01040474 	movhi	r4,4113
10110940:	2106fa04 	addi	r4,r4,7144
10110944:	01108200 	call	10110820 <alt_open_fd>
}  
10110948:	0001883a 	nop
1011094c:	e037883a 	mov	sp,fp
10110950:	dfc00117 	ldw	ra,4(sp)
10110954:	df000017 	ldw	fp,0(sp)
10110958:	dec00204 	addi	sp,sp,8
1011095c:	f800283a 	ret

10110960 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110960:	defffa04 	addi	sp,sp,-24
10110964:	df000515 	stw	fp,20(sp)
10110968:	df000504 	addi	fp,sp,20
1011096c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110970:	0005303a 	rdctl	r2,status
10110974:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110978:	e0fffc17 	ldw	r3,-16(fp)
1011097c:	00bfff84 	movi	r2,-2
10110980:	1884703a 	and	r2,r3,r2
10110984:	1001703a 	wrctl	status,r2
  
  return context;
10110988:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1011098c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110990:	e0bfff17 	ldw	r2,-4(fp)
10110994:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10110998:	e0bffd17 	ldw	r2,-12(fp)
1011099c:	10800017 	ldw	r2,0(r2)
101109a0:	e0fffd17 	ldw	r3,-12(fp)
101109a4:	18c00117 	ldw	r3,4(r3)
101109a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
101109ac:	e0bffd17 	ldw	r2,-12(fp)
101109b0:	10800117 	ldw	r2,4(r2)
101109b4:	e0fffd17 	ldw	r3,-12(fp)
101109b8:	18c00017 	ldw	r3,0(r3)
101109bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
101109c0:	e0bffd17 	ldw	r2,-12(fp)
101109c4:	e0fffd17 	ldw	r3,-12(fp)
101109c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
101109cc:	e0bffd17 	ldw	r2,-12(fp)
101109d0:	e0fffd17 	ldw	r3,-12(fp)
101109d4:	10c00015 	stw	r3,0(r2)
101109d8:	e0bffb17 	ldw	r2,-20(fp)
101109dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101109e0:	e0bffe17 	ldw	r2,-8(fp)
101109e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
101109e8:	0001883a 	nop
101109ec:	e037883a 	mov	sp,fp
101109f0:	df000017 	ldw	fp,0(sp)
101109f4:	dec00104 	addi	sp,sp,4
101109f8:	f800283a 	ret

101109fc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
101109fc:	defffb04 	addi	sp,sp,-20
10110a00:	dfc00415 	stw	ra,16(sp)
10110a04:	df000315 	stw	fp,12(sp)
10110a08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10110a0c:	d0a00e17 	ldw	r2,-32712(gp)
10110a10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10110a14:	d0a6d717 	ldw	r2,-25764(gp)
10110a18:	10800044 	addi	r2,r2,1
10110a1c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110a20:	00002e06 	br	10110adc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10110a24:	e0bffd17 	ldw	r2,-12(fp)
10110a28:	10800017 	ldw	r2,0(r2)
10110a2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10110a30:	e0bffd17 	ldw	r2,-12(fp)
10110a34:	10800403 	ldbu	r2,16(r2)
10110a38:	10803fcc 	andi	r2,r2,255
10110a3c:	10000426 	beq	r2,zero,10110a50 <alt_tick+0x54>
10110a40:	d0a6d717 	ldw	r2,-25764(gp)
10110a44:	1000021e 	bne	r2,zero,10110a50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10110a48:	e0bffd17 	ldw	r2,-12(fp)
10110a4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10110a50:	e0bffd17 	ldw	r2,-12(fp)
10110a54:	10800217 	ldw	r2,8(r2)
10110a58:	d0e6d717 	ldw	r3,-25764(gp)
10110a5c:	18801d36 	bltu	r3,r2,10110ad4 <alt_tick+0xd8>
10110a60:	e0bffd17 	ldw	r2,-12(fp)
10110a64:	10800403 	ldbu	r2,16(r2)
10110a68:	10803fcc 	andi	r2,r2,255
10110a6c:	1000191e 	bne	r2,zero,10110ad4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10110a70:	e0bffd17 	ldw	r2,-12(fp)
10110a74:	10800317 	ldw	r2,12(r2)
10110a78:	e0fffd17 	ldw	r3,-12(fp)
10110a7c:	18c00517 	ldw	r3,20(r3)
10110a80:	1809883a 	mov	r4,r3
10110a84:	103ee83a 	callr	r2
10110a88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10110a8c:	e0bfff17 	ldw	r2,-4(fp)
10110a90:	1000031e 	bne	r2,zero,10110aa0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10110a94:	e13ffd17 	ldw	r4,-12(fp)
10110a98:	01109600 	call	10110960 <alt_alarm_stop>
10110a9c:	00000d06 	br	10110ad4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10110aa0:	e0bffd17 	ldw	r2,-12(fp)
10110aa4:	10c00217 	ldw	r3,8(r2)
10110aa8:	e0bfff17 	ldw	r2,-4(fp)
10110aac:	1887883a 	add	r3,r3,r2
10110ab0:	e0bffd17 	ldw	r2,-12(fp)
10110ab4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10110ab8:	e0bffd17 	ldw	r2,-12(fp)
10110abc:	10c00217 	ldw	r3,8(r2)
10110ac0:	d0a6d717 	ldw	r2,-25764(gp)
10110ac4:	1880032e 	bgeu	r3,r2,10110ad4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10110ac8:	e0bffd17 	ldw	r2,-12(fp)
10110acc:	00c00044 	movi	r3,1
10110ad0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10110ad4:	e0bffe17 	ldw	r2,-8(fp)
10110ad8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10110adc:	e0fffd17 	ldw	r3,-12(fp)
10110ae0:	d0a00e04 	addi	r2,gp,-32712
10110ae4:	18bfcf1e 	bne	r3,r2,10110a24 <__alt_data_end+0xffff0a24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10110ae8:	0001883a 	nop
}
10110aec:	0001883a 	nop
10110af0:	e037883a 	mov	sp,fp
10110af4:	dfc00117 	ldw	ra,4(sp)
10110af8:	df000017 	ldw	fp,0(sp)
10110afc:	dec00204 	addi	sp,sp,8
10110b00:	f800283a 	ret

10110b04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10110b04:	deffff04 	addi	sp,sp,-4
10110b08:	df000015 	stw	fp,0(sp)
10110b0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10110b10:	000170fa 	wrctl	ienable,zero
}
10110b14:	0001883a 	nop
10110b18:	e037883a 	mov	sp,fp
10110b1c:	df000017 	ldw	fp,0(sp)
10110b20:	dec00104 	addi	sp,sp,4
10110b24:	f800283a 	ret

10110b28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10110b28:	defffb04 	addi	sp,sp,-20
10110b2c:	df000415 	stw	fp,16(sp)
10110b30:	df000404 	addi	fp,sp,16
10110b34:	e13ffe15 	stw	r4,-8(fp)
10110b38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10110b3c:	e0bfff17 	ldw	r2,-4(fp)
10110b40:	10840070 	cmpltui	r2,r2,4097
10110b44:	1000021e 	bne	r2,zero,10110b50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10110b48:	00840004 	movi	r2,4096
10110b4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10110b50:	e0fffe17 	ldw	r3,-8(fp)
10110b54:	e0bfff17 	ldw	r2,-4(fp)
10110b58:	1885883a 	add	r2,r3,r2
10110b5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b60:	e0bffe17 	ldw	r2,-8(fp)
10110b64:	e0bffc15 	stw	r2,-16(fp)
10110b68:	00000506 	br	10110b80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10110b6c:	e0bffc17 	ldw	r2,-16(fp)
10110b70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10110b74:	e0bffc17 	ldw	r2,-16(fp)
10110b78:	10800804 	addi	r2,r2,32
10110b7c:	e0bffc15 	stw	r2,-16(fp)
10110b80:	e0fffc17 	ldw	r3,-16(fp)
10110b84:	e0bffd17 	ldw	r2,-12(fp)
10110b88:	18bff836 	bltu	r3,r2,10110b6c <__alt_data_end+0xffff0b6c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10110b8c:	e0bffe17 	ldw	r2,-8(fp)
10110b90:	108007cc 	andi	r2,r2,31
10110b94:	10000226 	beq	r2,zero,10110ba0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10110b98:	e0bffc17 	ldw	r2,-16(fp)
10110b9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10110ba0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
10110ba4:	0001883a 	nop
10110ba8:	e037883a 	mov	sp,fp
10110bac:	df000017 	ldw	fp,0(sp)
10110bb0:	dec00104 	addi	sp,sp,4
10110bb4:	f800283a 	ret

10110bb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10110bb8:	defffe04 	addi	sp,sp,-8
10110bbc:	df000115 	stw	fp,4(sp)
10110bc0:	df000104 	addi	fp,sp,4
10110bc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110bc8:	e0bfff17 	ldw	r2,-4(fp)
10110bcc:	10bffe84 	addi	r2,r2,-6
10110bd0:	10c00428 	cmpgeui	r3,r2,16
10110bd4:	18001a1e 	bne	r3,zero,10110c40 <alt_exception_cause_generated_bad_addr+0x88>
10110bd8:	100690ba 	slli	r3,r2,2
10110bdc:	00840474 	movhi	r2,4113
10110be0:	1082fc04 	addi	r2,r2,3056
10110be4:	1885883a 	add	r2,r3,r2
10110be8:	10800017 	ldw	r2,0(r2)
10110bec:	1000683a 	jmp	r2
10110bf0:	10110c30 	cmpltui	zero,r2,17456
10110bf4:	10110c30 	cmpltui	zero,r2,17456
10110bf8:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110bfc:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c00:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c04:	10110c30 	cmpltui	zero,r2,17456
10110c08:	10110c38 	rdprs	zero,r2,17456
10110c0c:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c10:	10110c30 	cmpltui	zero,r2,17456
10110c14:	10110c30 	cmpltui	zero,r2,17456
10110c18:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c1c:	10110c30 	cmpltui	zero,r2,17456
10110c20:	10110c38 	rdprs	zero,r2,17456
10110c24:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c28:	10110c40 	call	110110c4 <__alt_data_end+0xef10c4>
10110c2c:	10110c30 	cmpltui	zero,r2,17456
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10110c30:	00800044 	movi	r2,1
10110c34:	00000306 	br	10110c44 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110c38:	0005883a 	mov	r2,zero
10110c3c:	00000106 	br	10110c44 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10110c40:	0005883a 	mov	r2,zero
  }
}
10110c44:	e037883a 	mov	sp,fp
10110c48:	df000017 	ldw	fp,0(sp)
10110c4c:	dec00104 	addi	sp,sp,4
10110c50:	f800283a 	ret

10110c54 <atexit>:
10110c54:	200b883a 	mov	r5,r4
10110c58:	000f883a 	mov	r7,zero
10110c5c:	000d883a 	mov	r6,zero
10110c60:	0009883a 	mov	r4,zero
10110c64:	0110d1c1 	jmpi	10110d1c <__register_exitproc>

10110c68 <exit>:
10110c68:	defffe04 	addi	sp,sp,-8
10110c6c:	000b883a 	mov	r5,zero
10110c70:	dc000015 	stw	r16,0(sp)
10110c74:	dfc00115 	stw	ra,4(sp)
10110c78:	2021883a 	mov	r16,r4
10110c7c:	0110e340 	call	10110e34 <__call_exitprocs>
10110c80:	00840474 	movhi	r2,4113
10110c84:	108b6c04 	addi	r2,r2,11696
10110c88:	11000017 	ldw	r4,0(r2)
10110c8c:	20800f17 	ldw	r2,60(r4)
10110c90:	10000126 	beq	r2,zero,10110c98 <exit+0x30>
10110c94:	103ee83a 	callr	r2
10110c98:	8009883a 	mov	r4,r16
10110c9c:	0110fb40 	call	10110fb4 <_exit>

10110ca0 <memcmp>:
10110ca0:	01c000c4 	movi	r7,3
10110ca4:	3980192e 	bgeu	r7,r6,10110d0c <memcmp+0x6c>
10110ca8:	2144b03a 	or	r2,r4,r5
10110cac:	11c4703a 	and	r2,r2,r7
10110cb0:	10000f26 	beq	r2,zero,10110cf0 <memcmp+0x50>
10110cb4:	20800003 	ldbu	r2,0(r4)
10110cb8:	28c00003 	ldbu	r3,0(r5)
10110cbc:	10c0151e 	bne	r2,r3,10110d14 <memcmp+0x74>
10110cc0:	31bfff84 	addi	r6,r6,-2
10110cc4:	01ffffc4 	movi	r7,-1
10110cc8:	00000406 	br	10110cdc <memcmp+0x3c>
10110ccc:	20800003 	ldbu	r2,0(r4)
10110cd0:	28c00003 	ldbu	r3,0(r5)
10110cd4:	31bfffc4 	addi	r6,r6,-1
10110cd8:	10c00e1e 	bne	r2,r3,10110d14 <memcmp+0x74>
10110cdc:	21000044 	addi	r4,r4,1
10110ce0:	29400044 	addi	r5,r5,1
10110ce4:	31fff91e 	bne	r6,r7,10110ccc <__alt_data_end+0xffff0ccc>
10110ce8:	0005883a 	mov	r2,zero
10110cec:	f800283a 	ret
10110cf0:	20c00017 	ldw	r3,0(r4)
10110cf4:	28800017 	ldw	r2,0(r5)
10110cf8:	18bfee1e 	bne	r3,r2,10110cb4 <__alt_data_end+0xffff0cb4>
10110cfc:	31bfff04 	addi	r6,r6,-4
10110d00:	21000104 	addi	r4,r4,4
10110d04:	29400104 	addi	r5,r5,4
10110d08:	39bff936 	bltu	r7,r6,10110cf0 <__alt_data_end+0xffff0cf0>
10110d0c:	303fe91e 	bne	r6,zero,10110cb4 <__alt_data_end+0xffff0cb4>
10110d10:	003ff506 	br	10110ce8 <__alt_data_end+0xffff0ce8>
10110d14:	10c5c83a 	sub	r2,r2,r3
10110d18:	f800283a 	ret

10110d1c <__register_exitproc>:
10110d1c:	defffa04 	addi	sp,sp,-24
10110d20:	dc000315 	stw	r16,12(sp)
10110d24:	04040474 	movhi	r16,4113
10110d28:	840b6c04 	addi	r16,r16,11696
10110d2c:	80c00017 	ldw	r3,0(r16)
10110d30:	dc400415 	stw	r17,16(sp)
10110d34:	dfc00515 	stw	ra,20(sp)
10110d38:	18805217 	ldw	r2,328(r3)
10110d3c:	2023883a 	mov	r17,r4
10110d40:	10003726 	beq	r2,zero,10110e20 <__register_exitproc+0x104>
10110d44:	10c00117 	ldw	r3,4(r2)
10110d48:	010007c4 	movi	r4,31
10110d4c:	20c00e16 	blt	r4,r3,10110d88 <__register_exitproc+0x6c>
10110d50:	1a000044 	addi	r8,r3,1
10110d54:	8800221e 	bne	r17,zero,10110de0 <__register_exitproc+0xc4>
10110d58:	18c00084 	addi	r3,r3,2
10110d5c:	18c7883a 	add	r3,r3,r3
10110d60:	18c7883a 	add	r3,r3,r3
10110d64:	12000115 	stw	r8,4(r2)
10110d68:	10c7883a 	add	r3,r2,r3
10110d6c:	19400015 	stw	r5,0(r3)
10110d70:	0005883a 	mov	r2,zero
10110d74:	dfc00517 	ldw	ra,20(sp)
10110d78:	dc400417 	ldw	r17,16(sp)
10110d7c:	dc000317 	ldw	r16,12(sp)
10110d80:	dec00604 	addi	sp,sp,24
10110d84:	f800283a 	ret
10110d88:	00800034 	movhi	r2,0
10110d8c:	10800004 	addi	r2,r2,0
10110d90:	10002626 	beq	r2,zero,10110e2c <__register_exitproc+0x110>
10110d94:	01006404 	movi	r4,400
10110d98:	d9400015 	stw	r5,0(sp)
10110d9c:	d9800115 	stw	r6,4(sp)
10110da0:	d9c00215 	stw	r7,8(sp)
10110da4:	00000000 	call	10000000 <__reset-0x100000>
10110da8:	d9400017 	ldw	r5,0(sp)
10110dac:	d9800117 	ldw	r6,4(sp)
10110db0:	d9c00217 	ldw	r7,8(sp)
10110db4:	10001d26 	beq	r2,zero,10110e2c <__register_exitproc+0x110>
10110db8:	81000017 	ldw	r4,0(r16)
10110dbc:	10000115 	stw	zero,4(r2)
10110dc0:	02000044 	movi	r8,1
10110dc4:	22405217 	ldw	r9,328(r4)
10110dc8:	0007883a 	mov	r3,zero
10110dcc:	12400015 	stw	r9,0(r2)
10110dd0:	20805215 	stw	r2,328(r4)
10110dd4:	10006215 	stw	zero,392(r2)
10110dd8:	10006315 	stw	zero,396(r2)
10110ddc:	883fde26 	beq	r17,zero,10110d58 <__alt_data_end+0xffff0d58>
10110de0:	18c9883a 	add	r4,r3,r3
10110de4:	2109883a 	add	r4,r4,r4
10110de8:	1109883a 	add	r4,r2,r4
10110dec:	21802215 	stw	r6,136(r4)
10110df0:	01800044 	movi	r6,1
10110df4:	12406217 	ldw	r9,392(r2)
10110df8:	30cc983a 	sll	r6,r6,r3
10110dfc:	4992b03a 	or	r9,r9,r6
10110e00:	12406215 	stw	r9,392(r2)
10110e04:	21c04215 	stw	r7,264(r4)
10110e08:	01000084 	movi	r4,2
10110e0c:	893fd21e 	bne	r17,r4,10110d58 <__alt_data_end+0xffff0d58>
10110e10:	11006317 	ldw	r4,396(r2)
10110e14:	218cb03a 	or	r6,r4,r6
10110e18:	11806315 	stw	r6,396(r2)
10110e1c:	003fce06 	br	10110d58 <__alt_data_end+0xffff0d58>
10110e20:	18805304 	addi	r2,r3,332
10110e24:	18805215 	stw	r2,328(r3)
10110e28:	003fc606 	br	10110d44 <__alt_data_end+0xffff0d44>
10110e2c:	00bfffc4 	movi	r2,-1
10110e30:	003fd006 	br	10110d74 <__alt_data_end+0xffff0d74>

10110e34 <__call_exitprocs>:
10110e34:	defff504 	addi	sp,sp,-44
10110e38:	df000915 	stw	fp,36(sp)
10110e3c:	dd400615 	stw	r21,24(sp)
10110e40:	dc800315 	stw	r18,12(sp)
10110e44:	dfc00a15 	stw	ra,40(sp)
10110e48:	ddc00815 	stw	r23,32(sp)
10110e4c:	dd800715 	stw	r22,28(sp)
10110e50:	dd000515 	stw	r20,20(sp)
10110e54:	dcc00415 	stw	r19,16(sp)
10110e58:	dc400215 	stw	r17,8(sp)
10110e5c:	dc000115 	stw	r16,4(sp)
10110e60:	d9000015 	stw	r4,0(sp)
10110e64:	2839883a 	mov	fp,r5
10110e68:	04800044 	movi	r18,1
10110e6c:	057fffc4 	movi	r21,-1
10110e70:	00840474 	movhi	r2,4113
10110e74:	108b6c04 	addi	r2,r2,11696
10110e78:	12000017 	ldw	r8,0(r2)
10110e7c:	45005217 	ldw	r20,328(r8)
10110e80:	44c05204 	addi	r19,r8,328
10110e84:	a0001c26 	beq	r20,zero,10110ef8 <__call_exitprocs+0xc4>
10110e88:	a0800117 	ldw	r2,4(r20)
10110e8c:	15ffffc4 	addi	r23,r2,-1
10110e90:	b8000d16 	blt	r23,zero,10110ec8 <__call_exitprocs+0x94>
10110e94:	14000044 	addi	r16,r2,1
10110e98:	8421883a 	add	r16,r16,r16
10110e9c:	8421883a 	add	r16,r16,r16
10110ea0:	84402004 	addi	r17,r16,128
10110ea4:	a463883a 	add	r17,r20,r17
10110ea8:	a421883a 	add	r16,r20,r16
10110eac:	e0001e26 	beq	fp,zero,10110f28 <__call_exitprocs+0xf4>
10110eb0:	80804017 	ldw	r2,256(r16)
10110eb4:	e0801c26 	beq	fp,r2,10110f28 <__call_exitprocs+0xf4>
10110eb8:	bdffffc4 	addi	r23,r23,-1
10110ebc:	843fff04 	addi	r16,r16,-4
10110ec0:	8c7fff04 	addi	r17,r17,-4
10110ec4:	bd7ff91e 	bne	r23,r21,10110eac <__alt_data_end+0xffff0eac>
10110ec8:	00800034 	movhi	r2,0
10110ecc:	10800004 	addi	r2,r2,0
10110ed0:	10000926 	beq	r2,zero,10110ef8 <__call_exitprocs+0xc4>
10110ed4:	a0800117 	ldw	r2,4(r20)
10110ed8:	1000301e 	bne	r2,zero,10110f9c <__call_exitprocs+0x168>
10110edc:	a0800017 	ldw	r2,0(r20)
10110ee0:	10003226 	beq	r2,zero,10110fac <__call_exitprocs+0x178>
10110ee4:	a009883a 	mov	r4,r20
10110ee8:	98800015 	stw	r2,0(r19)
10110eec:	00000000 	call	10000000 <__reset-0x100000>
10110ef0:	9d000017 	ldw	r20,0(r19)
10110ef4:	a03fe41e 	bne	r20,zero,10110e88 <__alt_data_end+0xffff0e88>
10110ef8:	dfc00a17 	ldw	ra,40(sp)
10110efc:	df000917 	ldw	fp,36(sp)
10110f00:	ddc00817 	ldw	r23,32(sp)
10110f04:	dd800717 	ldw	r22,28(sp)
10110f08:	dd400617 	ldw	r21,24(sp)
10110f0c:	dd000517 	ldw	r20,20(sp)
10110f10:	dcc00417 	ldw	r19,16(sp)
10110f14:	dc800317 	ldw	r18,12(sp)
10110f18:	dc400217 	ldw	r17,8(sp)
10110f1c:	dc000117 	ldw	r16,4(sp)
10110f20:	dec00b04 	addi	sp,sp,44
10110f24:	f800283a 	ret
10110f28:	a0800117 	ldw	r2,4(r20)
10110f2c:	80c00017 	ldw	r3,0(r16)
10110f30:	10bfffc4 	addi	r2,r2,-1
10110f34:	15c01426 	beq	r2,r23,10110f88 <__call_exitprocs+0x154>
10110f38:	80000015 	stw	zero,0(r16)
10110f3c:	183fde26 	beq	r3,zero,10110eb8 <__alt_data_end+0xffff0eb8>
10110f40:	95c8983a 	sll	r4,r18,r23
10110f44:	a0806217 	ldw	r2,392(r20)
10110f48:	a5800117 	ldw	r22,4(r20)
10110f4c:	2084703a 	and	r2,r4,r2
10110f50:	10000b26 	beq	r2,zero,10110f80 <__call_exitprocs+0x14c>
10110f54:	a0806317 	ldw	r2,396(r20)
10110f58:	2088703a 	and	r4,r4,r2
10110f5c:	20000c1e 	bne	r4,zero,10110f90 <__call_exitprocs+0x15c>
10110f60:	89400017 	ldw	r5,0(r17)
10110f64:	d9000017 	ldw	r4,0(sp)
10110f68:	183ee83a 	callr	r3
10110f6c:	a0800117 	ldw	r2,4(r20)
10110f70:	15bfbf1e 	bne	r2,r22,10110e70 <__alt_data_end+0xffff0e70>
10110f74:	98800017 	ldw	r2,0(r19)
10110f78:	153fcf26 	beq	r2,r20,10110eb8 <__alt_data_end+0xffff0eb8>
10110f7c:	003fbc06 	br	10110e70 <__alt_data_end+0xffff0e70>
10110f80:	183ee83a 	callr	r3
10110f84:	003ff906 	br	10110f6c <__alt_data_end+0xffff0f6c>
10110f88:	a5c00115 	stw	r23,4(r20)
10110f8c:	003feb06 	br	10110f3c <__alt_data_end+0xffff0f3c>
10110f90:	89000017 	ldw	r4,0(r17)
10110f94:	183ee83a 	callr	r3
10110f98:	003ff406 	br	10110f6c <__alt_data_end+0xffff0f6c>
10110f9c:	a0800017 	ldw	r2,0(r20)
10110fa0:	a027883a 	mov	r19,r20
10110fa4:	1029883a 	mov	r20,r2
10110fa8:	003fb606 	br	10110e84 <__alt_data_end+0xffff0e84>
10110fac:	0005883a 	mov	r2,zero
10110fb0:	003ffb06 	br	10110fa0 <__alt_data_end+0xffff0fa0>

10110fb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10110fb4:	defffd04 	addi	sp,sp,-12
10110fb8:	df000215 	stw	fp,8(sp)
10110fbc:	df000204 	addi	fp,sp,8
10110fc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10110fc4:	0001883a 	nop
10110fc8:	e0bfff17 	ldw	r2,-4(fp)
10110fcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10110fd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10110fd4:	10000226 	beq	r2,zero,10110fe0 <_exit+0x2c>
    ALT_SIM_FAIL();
10110fd8:	002af070 	cmpltui	zero,zero,43969
10110fdc:	00000106 	br	10110fe4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10110fe0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10110fe4:	003fff06 	br	10110fe4 <__alt_data_end+0xffff0fe4>
