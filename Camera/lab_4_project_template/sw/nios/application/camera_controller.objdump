
camera_controller.elf:     file format elf32-littlenios2
camera_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100244

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00011948 memsz 0x00011948 flags r-x
    LOAD off    0x00012968 vaddr 0x10111968 paddr 0x101134c4 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00015020 vaddr 0x10115020 paddr 0x10115020 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001139c  10100244  10100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000388  101115e0  101115e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10111968  101134c4  00012968  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10115020  10115020  00015020  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10115180  10115180  000144c4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000144c4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001038  00000000  00000000  000144e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000290c1  00000000  00000000  00015520  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a3f9  00000000  00000000  0003e5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ccaf  00000000  00000000  000489da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000027c8  00000000  00000000  0005568c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e98  00000000  00000000  00057e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000184d6  00000000  00000000  0005bcec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000741c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001970  00000000  00000000  00074228  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00079416  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00079419  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00079425  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00079426  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00079427  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00079432  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007943d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00079448  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  00079452  2**0
                  CONTENTS, READONLY
 26 .jdi          00005c30  00000000  00000000  00079497  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0029abcb  00000000  00000000  0007f0c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100244 l    d  .text	00000000 .text
101115e0 l    d  .rodata	00000000 .rodata
10111968 l    d  .rwdata	00000000 .rwdata
10115020 l    d  .bss	00000000 .bss
10115180 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 D:/Temp/EmbeddedProject_EPFL/Camera/lab_4_project_template/sw/nios/camera_controller_bsp//obj/HAL/src/crt0.o
1010028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cmos_sensor_output_generator.c
10100290 l     F .text	0000003c max
101002cc l     F .text	000000c8 write_frame_width_reg
101008a4 l     F .text	00000034 is_idle
10100394 l     F .text	000000cc write_frame_height_reg
10100460 l     F .text	000000cc write_frame_frame_blank_reg
1010052c l     F .text	000000c8 write_frame_line_blank_reg
101005f4 l     F .text	000000cc write_line_line_blank_reg
101006c0 l     F .text	000000c8 write_line_frame_blank_reg
10100788 l     F .text	0000002c read_frame_width_reg
101007b4 l     F .text	00000030 read_frame_height_reg
101007e4 l     F .text	00000030 read_frame_frame_blank_reg
10100814 l     F .text	00000030 read_frame_line_blank_reg
10100844 l     F .text	00000030 read_line_line_blank_reg
10100874 l     F .text	00000030 read_line_frame_blank_reg
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
10100e58 l     F .text	00000034 i2c_usleep
10100e8c l     F .text	00000044 wait_end_of_transfer
10100ed0 l     F .text	00000070 set_data_control
10100f40 l     F .text	00000064 get_data_set_control
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10101bc4 l     F .text	00000008 __fp_unlock
10101bd8 l     F .text	0000019c __sinit.part.1
10101d74 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10111968 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
10103710 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
101116a6 l     O .rodata	00000010 zeroes.4404
10105ca4 l     F .text	000000bc __sbprintf
101116b6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
10105f68 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
101121b4 l     O .rwdata	00000020 lc_ctype_charset
10112194 l     O .rwdata	00000020 lc_message_charset
101121d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
101116e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10108e9c l     F .text	000000fc __sprint_r.part.0
10111818 l     O .rodata	00000010 blanks.4348
10111808 l     O .rodata	00000010 zeroes.4349
1010a428 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010e784 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010e8a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010e8d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010e9d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010eac4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010ebb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
1010ed98 l     F .text	00000050 alt_get_errno
1010ede8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
1010f00c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
1011346c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1010f29c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010f3e4 l     F .text	00000038 alt_dev_reg
101123b4 l     O .rwdata	00001060 jtag_uart_0
10113414 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010f6d4 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010f8e0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10113470 l     O .rwdata	00000009 hcinfo.2538
1011347c l     O .rwdata	0000000a hcinfo.2551
10113488 l     O .rwdata	00000009 hcinfo.2560
10113494 l     O .rwdata	0000000a hcinfo.2573
101134a0 l     O .rwdata	0000000a hcinfo.2586
101134ac l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10110684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10110e18 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10115054 g     O .bss	00000004 alt_instruction_exception_handler
10108adc g     F .text	00000074 _mprec_log10
10108bc8 g     F .text	0000008c __any_on
1010789c g     F .text	00000054 _isatty_r
101116f0 g     O .rodata	00000028 __mprec_tinytens
1010ecd4 g     F .text	0000007c alt_main
10115080 g     O .bss	00000100 alt_irq
101079cc g     F .text	00000060 _lseek_r
101134c4 g       *ABS*	00000000 __flash_rwdata_start
101077f0 g     F .text	000000ac __sflags
1010d2b0 g     F .text	00000088 .hidden __eqdf2
10115180 g       *ABS*	00000000 __alt_heap_start
101036d4 g     F .text	0000003c printf
1010b484 g     F .text	0000009c _wcrtomb_r
10103a2c g     F .text	0000005c __sseek
10101f14 g     F .text	00000010 __sinit
1010b32c g     F .text	00000140 __swbuf_r
101078f0 g     F .text	0000007c _setlocale_r
10101d7c g     F .text	00000068 __sfmoreglue
1010ed74 g     F .text	00000024 __malloc_unlock
1010ff20 g     F .text	0000011c alt_hostfs_open
1010ac6c g     F .text	0000015c memmove
10101efc g     F .text	00000018 _cleanup
10107c58 g     F .text	000000a8 _Balloc
1010d338 g     F .text	000000dc .hidden __gtdf2
101110fc g     F .text	00000024 altera_nios2_gen2_irq_init
101010b4 g     F .text	0000012c i2c_write
10100000 g     F .entry	0000001c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10102970 g     F .text	0000005c _fstat_r
10115020 g     O .bss	00000004 errno
101039a8 g     F .text	00000008 __seofread
10115040 g     O .bss	00000004 alt_argv
1011b43c g       *ABS*	00000000 _gp
1010f26c g     F .text	00000030 usleep
10112234 g     O .rwdata	00000180 alt_fd_list
10110158 g     F .text	00000068 alt_hostfs_seek
10110838 g     F .text	00000090 alt_find_dev
10107b10 g     F .text	00000148 memcpy
10101bcc g     F .text	0000000c _cleanup_r
1010e59c g     F .text	000000dc .hidden __floatsidf
10101328 g     F .text	00000194 i2c_write_array
101109dc g     F .text	00000084 alt_fs_reg
10110edc g     F .text	0000007c alt_io_redirect
1010d414 g     F .text	000000f4 .hidden __ltdf2
101115e0 g       *ABS*	00000000 __DTOR_END__
101111b0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10108cb4 g     F .text	00000074 __fpclassifyd
10108a38 g     F .text	000000a4 __ratio
1010a40c g     F .text	0000001c __vfiprintf_internal
1010fae0 g     F .text	0000021c altera_avalon_jtag_uart_read
101036a4 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
101009cc g     F .text	00000108 cmos_sensor_output_generator_configure
1010175c g     F .text	00000064 .hidden __udivsi3
1010ea20 g     F .text	000000a4 isatty
10111740 g     O .rodata	000000c8 __mprec_tens
1010796c g     F .text	0000000c __locale_charset
10111120 g     F .text	00000090 alt_icache_flush
1011502c g     O .bss	00000004 __malloc_top_pad
1011344c g     O .rwdata	00000004 __mb_cur_max
1010799c g     F .text	0000000c _localeconv_r
1010a7b0 g     F .text	000004bc __sfvwrite_r
10108064 g     F .text	0000003c __i2b
10103900 g     F .text	00000054 _sbrk_r
10110080 g     F .text	0000006c alt_hostfs_read
10108c54 g     F .text	00000060 _read_r
10113464 g     O .rwdata	00000004 alt_max_fd
10101818 g     F .text	000000f0 _fclose_r
10101b94 g     F .text	00000030 fflush
10115028 g     O .bss	00000004 __malloc_max_sbrked_mem
1010c11c g     F .text	000008ac .hidden __adddf3
101087e0 g     F .text	0000010c __b2d
1010bbe4 g     F .text	00000538 .hidden __umoddi3
1010ec00 g     F .text	000000d4 lseek
1011343c g     O .rwdata	00000004 _global_impure_ptr
1010adc8 g     F .text	00000564 _realloc_r
10115180 g       *ABS*	00000000 __bss_end
10110d28 g     F .text	000000f0 alt_iic_isr_register
10110ff4 g     F .text	00000108 alt_tick
1010b66c g     F .text	00000578 .hidden __udivdi3
1010a70c g     F .text	00000024 _fputwc_r
10111718 g     O .rodata	00000028 __mprec_bigtens
10107e48 g     F .text	00000104 __s2b
1010e678 g     F .text	000000a8 .hidden __floatunsidf
10108520 g     F .text	00000060 __mcmp
10101f34 g     F .text	00000018 __fp_lock_all
10110cdc g     F .text	0000004c alt_ic_irq_enabled
10110f58 g     F .text	0000009c alt_alarm_stop
10100b0c g     F .text	00000038 cmos_sensor_output_generator_stop
10115048 g     O .bss	00000004 alt_irq_active
10102510 g     F .text	00000444 _fseeko_r
1011003c g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
1011220c g     O .rwdata	00000028 alt_dev_null
1011063c g     F .text	00000048 alt_dcache_flush_all
10107f4c g     F .text	00000068 __hi0bits
1010e51c g     F .text	00000080 .hidden __fixdfsi
10100ad4 g     F .text	00000038 cmos_sensor_output_generator_start
101134c4 g       *ABS*	00000000 __ram_rwdata_end
1011345c g     O .rwdata	00000008 alt_dev_list
1010f2ec g     F .text	000000f8 write
10111968 g       *ABS*	00000000 __ram_rodata_end
1010e920 g     F .text	000000b0 fstat
10102098 g     F .text	00000024 fprintf
10100fa4 g     F .text	0000002c i2c_inst
1010d414 g     F .text	000000f4 .hidden __ledf2
10108298 g     F .text	00000140 __pow5mult
10108fb0 g     F .text	0000145c ___vfiprintf_internal_r
10115038 g     O .bss	00000004 __nlocale_changed
101017c0 g     F .text	00000058 .hidden __umodsi3
10115180 g       *ABS*	00000000 end
10102954 g     F .text	0000001c fseeko
101024f4 g     F .text	0000001c fseek
1010f60c g     F .text	000000c8 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
101115e0 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010e720 g     F .text	00000064 .hidden __clzsi2
1010fcfc g     F .text	00000224 altera_avalon_jtag_uart_write
10101f24 g     F .text	00000004 __sfp_lock_acquire
10107a2c g     F .text	000000e4 memchr
10103a90 g     F .text	000021f8 ___vfprintf_internal_r
101021e0 g     F .text	00000310 _free_r
101008d8 g     F .text	00000078 cmos_sensor_output_generator_inst
10107978 g     F .text	00000010 __locale_mb_cur_max
1011142c g     F .text	00000180 __call_exitprocs
10115034 g     O .bss	00000004 __mlocale_changed
10113444 g     O .rwdata	00000004 __malloc_sbrk_base
10100244 g     F .text	0000004c _start
1011504c g     O .bss	00000004 _alt_tick_rate
101083d8 g     F .text	00000148 __lshift
10115050 g     O .bss	00000004 _alt_nticks
1010f05c g     F .text	000000fc read
1010f454 g     F .text	00000054 alt_sys_init
10103644 g     F .text	00000060 _open_r
10101034 g     F .text	00000080 i2c_configure
10111314 g     F .text	00000118 __register_exitproc
101080a0 g     F .text	000001f8 __multiply
1010f988 g     F .text	00000068 altera_avalon_jtag_uart_close
10111968 g       *ABS*	00000000 __ram_rwdata_start
101115e0 g       *ABS*	00000000 __ram_rodata_start
10115058 g     O .bss	00000028 __malloc_current_mallinfo
101088ec g     F .text	0000014c __d2b
1010f4a8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10110a60 g     F .text	000000b4 alt_get_fd
101104e4 g     F .text	00000158 alt_busy_sleep
10105f14 g     F .text	00000054 _close_r
10111298 g     F .text	0000007c memcmp
1010f568 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10115180 g       *ABS*	00000000 __alt_stack_base
1010f5b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10105dc0 g     F .text	00000154 __swsetup_r
1010c9c8 g     F .text	000008e8 .hidden __divdf3
10101de4 g     F .text	00000118 __sfp
10108b50 g     F .text	00000078 __copybits
10111d8c g     O .rwdata	00000408 __malloc_av_
10101f30 g     F .text	00000004 __sinit_lock_release
1010d508 g     F .text	00000718 .hidden __muldf3
10103954 g     F .text	00000054 __sread
101108c8 g     F .text	00000114 alt_find_file
101106d4 g     F .text	000000a4 alt_dev_llist_insert
1010ed50 g     F .text	00000024 __malloc_lock
10102070 g     F .text	00000028 _fprintf_r
1010f1bc g     F .text	000000b0 sbrk
10101b38 g     F .text	0000005c _fflush_r
1010a4e4 g     F .text	000000c4 _calloc_r
10102058 g     F .text	00000018 fopen
10115020 g       *ABS*	00000000 __bss_start
1010351c g     F .text	00000128 memset
10100b44 g     F .text	00000314 main
10115044 g     O .bss	00000004 alt_envp
10115024 g     O .bss	00000004 __malloc_max_total_mem
1010f508 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
101011e0 g     F .text	00000148 i2c_read
1010b46c g     F .text	00000018 __swbuf
10103a88 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10101908 g     F .text	00000014 fclose
10106168 g     F .text	00001688 _dtoa_r
10102d10 g     F .text	0000080c _malloc_r
1010b5e0 g     F .text	00000030 __ascii_wctomb
10113468 g     O .rwdata	00000004 alt_errno
101029cc g     F .text	000000c4 _fwalk
10101664 g     F .text	00000084 .hidden __divsi3
101020bc g     F .text	00000124 _malloc_trim_r
101115e0 g       *ABS*	00000000 __CTOR_END__
10108d28 g     F .text	000000dc strcmp
101115e0 g       *ABS*	00000000 __flash_rodata_start
101115e0 g       *ABS*	00000000 __DTOR_LIST__
1010d2b0 g     F .text	00000088 .hidden __nedf2
1010f41c g     F .text	00000038 alt_irq_init
1010f158 g     F .text	00000064 alt_release_fd
10111828 g     O .rodata	00000100 .hidden __clz_tab
10115030 g     O .bss	00000004 _PathLocale
1011124c g     F .text	00000014 atexit
10105d60 g     F .text	00000060 _write_r
101079a8 g     F .text	00000018 setlocale
10113440 g     O .rwdata	00000004 _impure_ptr
1011503c g     O .bss	00000004 alt_argc
1010191c g     F .text	0000021c __sflush_r
101107d8 g     F .text	00000060 _do_dtors
10107994 g     F .text	00000008 __locale_cjk_lang
101024f0 g     F .text	00000004 _fseek_r
10100fd0 g     F .text	00000064 i2c_init
1010372c g     F .text	000001d4 __srefill_r
10100020 g       .exceptions	00000000 alt_irq_entry
1010877c g     F .text	00000064 __ulp
10101f4c g     F .text	00000018 __fp_unlock_all
10113454 g     O .rwdata	00000008 alt_fs_list
101100ec g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
101079c0 g     F .text	0000000c localeconv
10110b48 g     F .text	00000050 alt_ic_isr_register
101134c4 g       *ABS*	00000000 _edata
10115180 g       *ABS*	00000000 _end
1010a5a8 g     F .text	00000164 __fputwc
10100244 g       *ABS*	00000000 __ram_exceptions_end
10100950 g     F .text	0000007c cmos_sensor_output_generator_init
1010f9f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10110c38 g     F .text	000000a4 alt_ic_irq_disable
101039b0 g     F .text	0000007c __swrite
10113448 g     O .rwdata	00000004 __malloc_trim_threshold
10107988 g     F .text	0000000c __locale_msgcharset
10111260 g     F .text	00000038 exit
10102a90 g     F .text	000000c4 _fwalk_reent
10108580 g     F .text	000001fc __mdiff
101016e8 g     F .text	00000074 .hidden __modsi3
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10101f28 g     F .text	00000004 __sfp_lock_release
10101f64 g     F .text	000000f4 _fopen_r
101115ac g     F .text	00000034 _exit
101103a4 g     F .text	00000140 alt_alarm_start
10102b54 g     F .text	000001bc __smakebuf_r
101014bc g     F .text	000001a8 i2c_read_array
10108e04 g     F .text	00000098 strlen
1010eeb4 g     F .text	00000158 open
1010d338 g     F .text	000000dc .hidden __gedf2
10113450 g     O .rwdata	00000004 __wctomb
10108f98 g     F .text	00000018 __sprint_r
10110b14 g     F .text	00000034 alt_icache_flush_all
101134b8 g     O .rwdata	00000004 alt_priority_mask
10110b98 g     F .text	000000a0 alt_ic_irq_enable
10105c88 g     F .text	0000001c __vfprintf_internal
1010b610 g     F .text	0000005c _wctomb_r
1010dc20 g     F .text	000008fc .hidden __subdf3
10107fb4 g     F .text	000000b0 __lo0bits
101134bc g     O .rwdata	00000008 alt_alarm_list
10110778 g     F .text	00000060 _do_ctors
1010b520 g     F .text	000000c0 wcrtomb
1010e7d4 g     F .text	000000d0 close
1010eb2c g     F .text	00000084 alt_load
1010a730 g     F .text	00000080 fputwc
10101f2c g     F .text	00000004 __sinit_lock_acquire
10107d28 g     F .text	00000120 __multadd
10107d00 g     F .text	00000028 _Bfree
101101c0 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10100000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10100004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10100008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1010000c:	00bffd16 	blt	zero,r2,10100004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100010:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100014:	08409114 	ori	at,at,580
    jmp r1
10100018:	0800683a 	jmp	at
1010001c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10942004 	addi	r2,r2,20608
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10942004 	addi	r2,r2,20608
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
101001e4:	000531fa 	rdctl	r2,exception
101001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
101001ec:	e0bffd17 	ldw	r2,-12(fp)
101001f0:	10801f0c 	andi	r2,r2,124
101001f4:	1004d0ba 	srli	r2,r2,2
101001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
101001fc:	0005333a 	rdctl	r2,badaddr
10100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10100204:	d0a70617 	ldw	r2,-25576(gp)
10100208:	10000726 	beq	r2,zero,10100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
1010020c:	d0a70617 	ldw	r2,-25576(gp)
10100210:	e0fffd17 	ldw	r3,-12(fp)
10100214:	e1bffe17 	ldw	r6,-8(fp)
10100218:	e17fff17 	ldw	r5,-4(fp)
1010021c:	1809883a 	mov	r4,r3
10100220:	103ee83a 	callr	r2
10100224:	00000206 	br	10100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
1010022c:	0005883a 	mov	r2,zero
}
10100230:	e037883a 	mov	sp,fp
10100234:	dfc00117 	ldw	ra,4(sp)
10100238:	df000017 	ldw	fp,0(sp)
1010023c:	dec00204 	addi	sp,sp,8
10100240:	f800283a 	ret

Disassembly of section .text:

10100244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10100244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10100248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
1010024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
10100250:	00bffd16 	blt	zero,r2,10100248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100254:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
1010025c:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
10100260:	d6ad0f14 	ori	gp,gp,46140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100264:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100268:	10940814 	ori	r2,r2,20512

    movhi r3, %hi(__bss_end)
1010026c:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
10100270:	18d46014 	ori	r3,r3,20864

    beq r2, r3, 1f
10100274:	10c00326 	beq	r2,r3,10100284 <_start+0x40>

0:
    stw zero, (r2)
10100278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
1010027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10100280:	10fffd36 	bltu	r2,r3,10100278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100284:	010eb2c0 	call	1010eb2c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100288:	010ecd40 	call	1010ecd4 <alt_main>

1010028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
1010028c:	003fff06 	br	1010028c <__alt_data_end+0xfffe028c>

10100290 <max>:
/*
 * max
 *
 * Computes the max between two 32-bit unsigned numbers.
 */
static uint32_t max(uint32_t a, uint32_t b) {
10100290:	defffd04 	addi	sp,sp,-12
10100294:	df000215 	stw	fp,8(sp)
10100298:	df000204 	addi	fp,sp,8
1010029c:	e13ffe15 	stw	r4,-8(fp)
101002a0:	e17fff15 	stw	r5,-4(fp)
    if (a > b) {
101002a4:	e0bffe17 	ldw	r2,-8(fp)
101002a8:	e0ffff17 	ldw	r3,-4(fp)
101002ac:	1880022e 	bgeu	r3,r2,101002b8 <max+0x28>
        return a;
101002b0:	e0bffe17 	ldw	r2,-8(fp)
101002b4:	00000106 	br	101002bc <max+0x2c>
    } else {
        return b;
101002b8:	e0bfff17 	ldw	r2,-4(fp)
    }
}
101002bc:	e037883a 	mov	sp,fp
101002c0:	df000017 	ldw	fp,0(sp)
101002c4:	dec00104 	addi	sp,sp,4
101002c8:	f800283a 	ret

101002cc <write_frame_width_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_WIDTH register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_width_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_width) {
101002cc:	defffa04 	addi	sp,sp,-24
101002d0:	dfc00515 	stw	ra,20(sp)
101002d4:	df000415 	stw	fp,16(sp)
101002d8:	df000404 	addi	fp,sp,16
101002dc:	e13ffe15 	stw	r4,-8(fp)
101002e0:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101002e4:	e0bffe17 	ldw	r2,-8(fp)
101002e8:	10c00217 	ldw	r3,8(r2)
101002ec:	e0bffe17 	ldw	r2,-8(fp)
101002f0:	10800317 	ldw	r2,12(r2)
101002f4:	100b883a 	mov	r5,r2
101002f8:	1809883a 	mov	r4,r3
101002fc:	01002900 	call	10100290 <max>
10100300:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN <= frame_width;
10100304:	e0bfff17 	ldw	r2,-4(fp)
10100308:	1004c03a 	cmpne	r2,r2,zero
1010030c:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_width <= max_reg_value;
10100310:	e0bfff17 	ldw	r2,-4(fp)
10100314:	e0fffc17 	ldw	r3,-16(fp)
10100318:	1885403a 	cmpgeu	r2,r3,r2
1010031c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100320:	e0bffd03 	ldbu	r2,-12(fp)
10100324:	10000826 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100328:	e0bffd43 	ldbu	r2,-11(fp)
1010032c:	10000626 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100330:	e13ffe17 	ldw	r4,-8(fp)
10100334:	01008a40 	call	101008a4 <is_idle>
10100338:	10803fcc 	andi	r2,r2,255
1010033c:	10000226 	beq	r2,zero,10100348 <write_frame_width_reg+0x7c>
10100340:	00800044 	movi	r2,1
10100344:	00000106 	br	1010034c <write_frame_width_reg+0x80>
10100348:	0005883a 	mov	r2,zero
1010034c:	e0bffd85 	stb	r2,-10(fp)
10100350:	e0bffd83 	ldbu	r2,-10(fp)
10100354:	1080004c 	andi	r2,r2,1
10100358:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010035c:	e0bffd83 	ldbu	r2,-10(fp)
10100360:	10000626 	beq	r2,zero,1010037c <write_frame_width_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_WIDTH(dev->base, frame_width);
10100364:	e0bffe17 	ldw	r2,-8(fp)
10100368:	10800017 	ldw	r2,0(r2)
1010036c:	e0ffff17 	ldw	r3,-4(fp)
10100370:	10c00035 	stwio	r3,0(r2)
        return true;
10100374:	00800044 	movi	r2,1
10100378:	00000106 	br	10100380 <write_frame_width_reg+0xb4>
    } else {
        return false;
1010037c:	0005883a 	mov	r2,zero
    }
}
10100380:	e037883a 	mov	sp,fp
10100384:	dfc00117 	ldw	ra,4(sp)
10100388:	df000017 	ldw	fp,0(sp)
1010038c:	dec00204 	addi	sp,sp,8
10100390:	f800283a 	ret

10100394 <write_frame_height_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_HEIGHT register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_height_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_height) {
10100394:	defffa04 	addi	sp,sp,-24
10100398:	dfc00515 	stw	ra,20(sp)
1010039c:	df000415 	stw	fp,16(sp)
101003a0:	df000404 	addi	fp,sp,16
101003a4:	e13ffe15 	stw	r4,-8(fp)
101003a8:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101003ac:	e0bffe17 	ldw	r2,-8(fp)
101003b0:	10c00217 	ldw	r3,8(r2)
101003b4:	e0bffe17 	ldw	r2,-8(fp)
101003b8:	10800317 	ldw	r2,12(r2)
101003bc:	100b883a 	mov	r5,r2
101003c0:	1809883a 	mov	r4,r3
101003c4:	01002900 	call	10100290 <max>
101003c8:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN <= frame_height;
101003cc:	e0bfff17 	ldw	r2,-4(fp)
101003d0:	1004c03a 	cmpne	r2,r2,zero
101003d4:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_height <= max_reg_value;
101003d8:	e0bfff17 	ldw	r2,-4(fp)
101003dc:	e0fffc17 	ldw	r3,-16(fp)
101003e0:	1885403a 	cmpgeu	r2,r3,r2
101003e4:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101003e8:	e0bffd03 	ldbu	r2,-12(fp)
101003ec:	10000826 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f0:	e0bffd43 	ldbu	r2,-11(fp)
101003f4:	10000626 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
101003f8:	e13ffe17 	ldw	r4,-8(fp)
101003fc:	01008a40 	call	101008a4 <is_idle>
10100400:	10803fcc 	andi	r2,r2,255
10100404:	10000226 	beq	r2,zero,10100410 <write_frame_height_reg+0x7c>
10100408:	00800044 	movi	r2,1
1010040c:	00000106 	br	10100414 <write_frame_height_reg+0x80>
10100410:	0005883a 	mov	r2,zero
10100414:	e0bffd85 	stb	r2,-10(fp)
10100418:	e0bffd83 	ldbu	r2,-10(fp)
1010041c:	1080004c 	andi	r2,r2,1
10100420:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100424:	e0bffd83 	ldbu	r2,-10(fp)
10100428:	10000726 	beq	r2,zero,10100448 <write_frame_height_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_HEIGHT(dev->base, frame_height);
1010042c:	e0bffe17 	ldw	r2,-8(fp)
10100430:	10800017 	ldw	r2,0(r2)
10100434:	10800104 	addi	r2,r2,4
10100438:	e0ffff17 	ldw	r3,-4(fp)
1010043c:	10c00035 	stwio	r3,0(r2)
        return true;
10100440:	00800044 	movi	r2,1
10100444:	00000106 	br	1010044c <write_frame_height_reg+0xb8>
    } else {
        return false;
10100448:	0005883a 	mov	r2,zero
    }
}
1010044c:	e037883a 	mov	sp,fp
10100450:	dfc00117 	ldw	ra,4(sp)
10100454:	df000017 	ldw	fp,0(sp)
10100458:	dec00204 	addi	sp,sp,8
1010045c:	f800283a 	ret

10100460 <write_frame_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_frame_blank) {
10100460:	defffa04 	addi	sp,sp,-24
10100464:	dfc00515 	stw	ra,20(sp)
10100468:	df000415 	stw	fp,16(sp)
1010046c:	df000404 	addi	fp,sp,16
10100470:	e13ffe15 	stw	r4,-8(fp)
10100474:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100478:	e0bffe17 	ldw	r2,-8(fp)
1010047c:	10c00217 	ldw	r3,8(r2)
10100480:	e0bffe17 	ldw	r2,-8(fp)
10100484:	10800317 	ldw	r2,12(r2)
10100488:	100b883a 	mov	r5,r2
1010048c:	1809883a 	mov	r4,r3
10100490:	01002900 	call	10100290 <max>
10100494:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN <= frame_frame_blank;
10100498:	e0bfff17 	ldw	r2,-4(fp)
1010049c:	1004c03a 	cmpne	r2,r2,zero
101004a0:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_frame_blank <= max_reg_value;
101004a4:	e0bfff17 	ldw	r2,-4(fp)
101004a8:	e0fffc17 	ldw	r3,-16(fp)
101004ac:	1885403a 	cmpgeu	r2,r3,r2
101004b0:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
101004b4:	e0bffd03 	ldbu	r2,-12(fp)
101004b8:	10000826 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004bc:	e0bffd43 	ldbu	r2,-11(fp)
101004c0:	10000626 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004c4:	e13ffe17 	ldw	r4,-8(fp)
101004c8:	01008a40 	call	101008a4 <is_idle>
101004cc:	10803fcc 	andi	r2,r2,255
101004d0:	10000226 	beq	r2,zero,101004dc <write_frame_frame_blank_reg+0x7c>
101004d4:	00800044 	movi	r2,1
101004d8:	00000106 	br	101004e0 <write_frame_frame_blank_reg+0x80>
101004dc:	0005883a 	mov	r2,zero
101004e0:	e0bffd85 	stb	r2,-10(fp)
101004e4:	e0bffd83 	ldbu	r2,-10(fp)
101004e8:	1080004c 	andi	r2,r2,1
101004ec:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101004f0:	e0bffd83 	ldbu	r2,-10(fp)
101004f4:	10000726 	beq	r2,zero,10100514 <write_frame_frame_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_FRAME_BLANK(dev->base, frame_frame_blank);
101004f8:	e0bffe17 	ldw	r2,-8(fp)
101004fc:	10800017 	ldw	r2,0(r2)
10100500:	10800204 	addi	r2,r2,8
10100504:	e0ffff17 	ldw	r3,-4(fp)
10100508:	10c00035 	stwio	r3,0(r2)
        return true;
1010050c:	00800044 	movi	r2,1
10100510:	00000106 	br	10100518 <write_frame_frame_blank_reg+0xb8>
    } else {
        return false;
10100514:	0005883a 	mov	r2,zero
    }
}
10100518:	e037883a 	mov	sp,fp
1010051c:	dfc00117 	ldw	ra,4(sp)
10100520:	df000017 	ldw	fp,0(sp)
10100524:	dec00204 	addi	sp,sp,8
10100528:	f800283a 	ret

1010052c <write_frame_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_FRAME_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t frame_line_blank) {
1010052c:	defffa04 	addi	sp,sp,-24
10100530:	dfc00515 	stw	ra,20(sp)
10100534:	df000415 	stw	fp,16(sp)
10100538:	df000404 	addi	fp,sp,16
1010053c:	e13ffe15 	stw	r4,-8(fp)
10100540:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
10100544:	e0bffe17 	ldw	r2,-8(fp)
10100548:	10c00217 	ldw	r3,8(r2)
1010054c:	e0bffe17 	ldw	r2,-8(fp)
10100550:	10800317 	ldw	r2,12(r2)
10100554:	100b883a 	mov	r5,r2
10100558:	1809883a 	mov	r4,r3
1010055c:	01002900 	call	10100290 <max>
10100560:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN <= frame_line_blank;
10100564:	00800044 	movi	r2,1
10100568:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = frame_line_blank <= max_reg_value;
1010056c:	e0bfff17 	ldw	r2,-4(fp)
10100570:	e0fffc17 	ldw	r3,-16(fp)
10100574:	1885403a 	cmpgeu	r2,r3,r2
10100578:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
1010057c:	e0bffd03 	ldbu	r2,-12(fp)
10100580:	10000826 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
10100584:	e0bffd43 	ldbu	r2,-11(fp)
10100588:	10000626 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010058c:	e13ffe17 	ldw	r4,-8(fp)
10100590:	01008a40 	call	101008a4 <is_idle>
10100594:	10803fcc 	andi	r2,r2,255
10100598:	10000226 	beq	r2,zero,101005a4 <write_frame_line_blank_reg+0x78>
1010059c:	00800044 	movi	r2,1
101005a0:	00000106 	br	101005a8 <write_frame_line_blank_reg+0x7c>
101005a4:	0005883a 	mov	r2,zero
101005a8:	e0bffd85 	stb	r2,-10(fp)
101005ac:	e0bffd83 	ldbu	r2,-10(fp)
101005b0:	1080004c 	andi	r2,r2,1
101005b4:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
101005b8:	e0bffd83 	ldbu	r2,-10(fp)
101005bc:	10000726 	beq	r2,zero,101005dc <write_frame_line_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_FRAME_LINE_BLANK(dev->base, frame_line_blank);
101005c0:	e0bffe17 	ldw	r2,-8(fp)
101005c4:	10800017 	ldw	r2,0(r2)
101005c8:	10800304 	addi	r2,r2,12
101005cc:	e0ffff17 	ldw	r3,-4(fp)
101005d0:	10c00035 	stwio	r3,0(r2)
        return true;
101005d4:	00800044 	movi	r2,1
101005d8:	00000106 	br	101005e0 <write_frame_line_blank_reg+0xb4>
    } else {
        return false;
101005dc:	0005883a 	mov	r2,zero
    }
}
101005e0:	e037883a 	mov	sp,fp
101005e4:	dfc00117 	ldw	ra,4(sp)
101005e8:	df000017 	ldw	fp,0(sp)
101005ec:	dec00204 	addi	sp,sp,8
101005f0:	f800283a 	ret

101005f4 <write_line_line_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_LINE_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_line_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_line_blank) {
101005f4:	defffa04 	addi	sp,sp,-24
101005f8:	dfc00515 	stw	ra,20(sp)
101005fc:	df000415 	stw	fp,16(sp)
10100600:	df000404 	addi	fp,sp,16
10100604:	e13ffe15 	stw	r4,-8(fp)
10100608:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
1010060c:	e0bffe17 	ldw	r2,-8(fp)
10100610:	10c00217 	ldw	r3,8(r2)
10100614:	e0bffe17 	ldw	r2,-8(fp)
10100618:	10800317 	ldw	r2,12(r2)
1010061c:	100b883a 	mov	r5,r2
10100620:	1809883a 	mov	r4,r3
10100624:	01002900 	call	10100290 <max>
10100628:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN <= line_line_blank;
1010062c:	e0bfff17 	ldw	r2,-4(fp)
10100630:	1004c03a 	cmpne	r2,r2,zero
10100634:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_line_blank <= max_reg_value;
10100638:	e0bfff17 	ldw	r2,-4(fp)
1010063c:	e0fffc17 	ldw	r3,-16(fp)
10100640:	1885403a 	cmpgeu	r2,r3,r2
10100644:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100648:	e0bffd03 	ldbu	r2,-12(fp)
1010064c:	10000826 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100650:	e0bffd43 	ldbu	r2,-11(fp)
10100654:	10000626 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100658:	e13ffe17 	ldw	r4,-8(fp)
1010065c:	01008a40 	call	101008a4 <is_idle>
10100660:	10803fcc 	andi	r2,r2,255
10100664:	10000226 	beq	r2,zero,10100670 <write_line_line_blank_reg+0x7c>
10100668:	00800044 	movi	r2,1
1010066c:	00000106 	br	10100674 <write_line_line_blank_reg+0x80>
10100670:	0005883a 	mov	r2,zero
10100674:	e0bffd85 	stb	r2,-10(fp)
10100678:	e0bffd83 	ldbu	r2,-10(fp)
1010067c:	1080004c 	andi	r2,r2,1
10100680:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
10100684:	e0bffd83 	ldbu	r2,-10(fp)
10100688:	10000726 	beq	r2,zero,101006a8 <write_line_line_blank_reg+0xb4>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_LINE_BLANK(dev->base, line_line_blank);
1010068c:	e0bffe17 	ldw	r2,-8(fp)
10100690:	10800017 	ldw	r2,0(r2)
10100694:	10800404 	addi	r2,r2,16
10100698:	e0ffff17 	ldw	r3,-4(fp)
1010069c:	10c00035 	stwio	r3,0(r2)
        return true;
101006a0:	00800044 	movi	r2,1
101006a4:	00000106 	br	101006ac <write_line_line_blank_reg+0xb8>
    } else {
        return false;
101006a8:	0005883a 	mov	r2,zero
    }
}
101006ac:	e037883a 	mov	sp,fp
101006b0:	dfc00117 	ldw	ra,4(sp)
101006b4:	df000017 	ldw	fp,0(sp)
101006b8:	dec00204 	addi	sp,sp,8
101006bc:	f800283a 	ret

101006c0 <write_line_frame_blank_reg>:
 *
 * Writes the supplied value to the CONFIG_LINE_FRAME_BLANK register.
 *
 * Returns true if successful (value within legal bounds) and false otherwise.
 */
static bool write_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev, uint32_t line_frame_blank) {
101006c0:	defffa04 	addi	sp,sp,-24
101006c4:	dfc00515 	stw	ra,20(sp)
101006c8:	df000415 	stw	fp,16(sp)
101006cc:	df000404 	addi	fp,sp,16
101006d0:	e13ffe15 	stw	r4,-8(fp)
101006d4:	e17fff15 	stw	r5,-4(fp)
    uint32_t max_reg_value = max(dev->max_width, dev->max_height);
101006d8:	e0bffe17 	ldw	r2,-8(fp)
101006dc:	10c00217 	ldw	r3,8(r2)
101006e0:	e0bffe17 	ldw	r2,-8(fp)
101006e4:	10800317 	ldw	r2,12(r2)
101006e8:	100b883a 	mov	r5,r2
101006ec:	1809883a 	mov	r4,r3
101006f0:	01002900 	call	10100290 <max>
101006f4:	e0bffc15 	stw	r2,-16(fp)

    bool lower_bound_valid = CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN <= line_frame_blank;
101006f8:	00800044 	movi	r2,1
101006fc:	e0bffd05 	stb	r2,-12(fp)
    bool upper_bound_valid = line_frame_blank <= max_reg_value;
10100700:	e0bfff17 	ldw	r2,-4(fp)
10100704:	e0fffc17 	ldw	r3,-16(fp)
10100708:	1885403a 	cmpgeu	r2,r3,r2
1010070c:	e0bffd45 	stb	r2,-11(fp)

    bool valid = lower_bound_valid && upper_bound_valid && is_idle(dev);
10100710:	e0bffd03 	ldbu	r2,-12(fp)
10100714:	10000826 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100718:	e0bffd43 	ldbu	r2,-11(fp)
1010071c:	10000626 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100720:	e13ffe17 	ldw	r4,-8(fp)
10100724:	01008a40 	call	101008a4 <is_idle>
10100728:	10803fcc 	andi	r2,r2,255
1010072c:	10000226 	beq	r2,zero,10100738 <write_line_frame_blank_reg+0x78>
10100730:	00800044 	movi	r2,1
10100734:	00000106 	br	1010073c <write_line_frame_blank_reg+0x7c>
10100738:	0005883a 	mov	r2,zero
1010073c:	e0bffd85 	stb	r2,-10(fp)
10100740:	e0bffd83 	ldbu	r2,-10(fp)
10100744:	1080004c 	andi	r2,r2,1
10100748:	e0bffd85 	stb	r2,-10(fp)

    if (valid) {
1010074c:	e0bffd83 	ldbu	r2,-10(fp)
10100750:	10000726 	beq	r2,zero,10100770 <write_line_frame_blank_reg+0xb0>
        CMOS_SENSOR_OUTPUT_GENERATOR_WR_CONFIG_LINE_FRAME_BLANK(dev->base, line_frame_blank);
10100754:	e0bffe17 	ldw	r2,-8(fp)
10100758:	10800017 	ldw	r2,0(r2)
1010075c:	10800504 	addi	r2,r2,20
10100760:	e0ffff17 	ldw	r3,-4(fp)
10100764:	10c00035 	stwio	r3,0(r2)
        return true;
10100768:	00800044 	movi	r2,1
1010076c:	00000106 	br	10100774 <write_line_frame_blank_reg+0xb4>
    } else {
        return false;
10100770:	0005883a 	mov	r2,zero
    }
}
10100774:	e037883a 	mov	sp,fp
10100778:	dfc00117 	ldw	ra,4(sp)
1010077c:	df000017 	ldw	fp,0(sp)
10100780:	dec00204 	addi	sp,sp,8
10100784:	f800283a 	ret

10100788 <read_frame_width_reg>:
/*
 * read_frame_width_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_WIDTH register
 */
static uint32_t read_frame_width_reg(cmos_sensor_output_generator_dev *dev) {
10100788:	defffe04 	addi	sp,sp,-8
1010078c:	df000115 	stw	fp,4(sp)
10100790:	df000104 	addi	fp,sp,4
10100794:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_WIDTH(dev->base);
10100798:	e0bfff17 	ldw	r2,-4(fp)
1010079c:	10800017 	ldw	r2,0(r2)
101007a0:	10800037 	ldwio	r2,0(r2)
}
101007a4:	e037883a 	mov	sp,fp
101007a8:	df000017 	ldw	fp,0(sp)
101007ac:	dec00104 	addi	sp,sp,4
101007b0:	f800283a 	ret

101007b4 <read_frame_height_reg>:
/*
 * read_frame_height_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_HEIGHT register
 */
static uint32_t read_frame_height_reg(cmos_sensor_output_generator_dev *dev) {
101007b4:	defffe04 	addi	sp,sp,-8
101007b8:	df000115 	stw	fp,4(sp)
101007bc:	df000104 	addi	fp,sp,4
101007c0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_HEIGHT(dev->base);
101007c4:	e0bfff17 	ldw	r2,-4(fp)
101007c8:	10800017 	ldw	r2,0(r2)
101007cc:	10800104 	addi	r2,r2,4
101007d0:	10800037 	ldwio	r2,0(r2)
}
101007d4:	e037883a 	mov	sp,fp
101007d8:	df000017 	ldw	fp,0(sp)
101007dc:	dec00104 	addi	sp,sp,4
101007e0:	f800283a 	ret

101007e4 <read_frame_frame_blank_reg>:
/*
 * read_frame_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_FRAME_BLANK register
 */
static uint32_t read_frame_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
101007e4:	defffe04 	addi	sp,sp,-8
101007e8:	df000115 	stw	fp,4(sp)
101007ec:	df000104 	addi	fp,sp,4
101007f0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_FRAME_BLANK(dev->base);
101007f4:	e0bfff17 	ldw	r2,-4(fp)
101007f8:	10800017 	ldw	r2,0(r2)
101007fc:	10800204 	addi	r2,r2,8
10100800:	10800037 	ldwio	r2,0(r2)
}
10100804:	e037883a 	mov	sp,fp
10100808:	df000017 	ldw	fp,0(sp)
1010080c:	dec00104 	addi	sp,sp,4
10100810:	f800283a 	ret

10100814 <read_frame_line_blank_reg>:
/*
 * read_frame_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_FRAME_LINE_BLANK register
 */
static uint32_t read_frame_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100814:	defffe04 	addi	sp,sp,-8
10100818:	df000115 	stw	fp,4(sp)
1010081c:	df000104 	addi	fp,sp,4
10100820:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_FRAME_LINE_BLANK(dev->base);
10100824:	e0bfff17 	ldw	r2,-4(fp)
10100828:	10800017 	ldw	r2,0(r2)
1010082c:	10800304 	addi	r2,r2,12
10100830:	10800037 	ldwio	r2,0(r2)
}
10100834:	e037883a 	mov	sp,fp
10100838:	df000017 	ldw	fp,0(sp)
1010083c:	dec00104 	addi	sp,sp,4
10100840:	f800283a 	ret

10100844 <read_line_line_blank_reg>:
/*
 * read_line_line_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_LINE_BLANK register
 */
static uint32_t read_line_line_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100844:	defffe04 	addi	sp,sp,-8
10100848:	df000115 	stw	fp,4(sp)
1010084c:	df000104 	addi	fp,sp,4
10100850:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_LINE_BLANK(dev->base);
10100854:	e0bfff17 	ldw	r2,-4(fp)
10100858:	10800017 	ldw	r2,0(r2)
1010085c:	10800404 	addi	r2,r2,16
10100860:	10800037 	ldwio	r2,0(r2)
}
10100864:	e037883a 	mov	sp,fp
10100868:	df000017 	ldw	fp,0(sp)
1010086c:	dec00104 	addi	sp,sp,4
10100870:	f800283a 	ret

10100874 <read_line_frame_blank_reg>:
/*
 * read_line_frame_blank_reg
 *
 * Reads and returns the contents of the CONFIG_LINE_FRAME_BLANK register
 */
static uint32_t read_line_frame_blank_reg(cmos_sensor_output_generator_dev *dev) {
10100874:	defffe04 	addi	sp,sp,-8
10100878:	df000115 	stw	fp,4(sp)
1010087c:	df000104 	addi	fp,sp,4
10100880:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_CONFIG_LINE_FRAME_BLANK(dev->base);
10100884:	e0bfff17 	ldw	r2,-4(fp)
10100888:	10800017 	ldw	r2,0(r2)
1010088c:	10800504 	addi	r2,r2,20
10100890:	10800037 	ldwio	r2,0(r2)
}
10100894:	e037883a 	mov	sp,fp
10100898:	df000017 	ldw	fp,0(sp)
1010089c:	dec00104 	addi	sp,sp,4
101008a0:	f800283a 	ret

101008a4 <is_idle>:
/*
 * is_idle
 *
 * Returns true if the controller is idle, and false otherwise.
 */
static bool is_idle(cmos_sensor_output_generator_dev *dev) {
101008a4:	defffe04 	addi	sp,sp,-8
101008a8:	df000115 	stw	fp,4(sp)
101008ac:	df000104 	addi	fp,sp,4
101008b0:	e13fff15 	stw	r4,-4(fp)
    return CMOS_SENSOR_OUTPUT_GENERATOR_RD_STATUS(dev->base) == CMOS_SENSOR_OUTPUT_GENERATOR_STATUS_IDLE;
101008b4:	e0bfff17 	ldw	r2,-4(fp)
101008b8:	10800017 	ldw	r2,0(r2)
101008bc:	10800704 	addi	r2,r2,28
101008c0:	10800037 	ldwio	r2,0(r2)
101008c4:	10800060 	cmpeqi	r2,r2,1
}
101008c8:	e037883a 	mov	sp,fp
101008cc:	df000017 	ldw	fp,0(sp)
101008d0:	dec00104 	addi	sp,sp,4
101008d4:	f800283a 	ret

101008d8 <cmos_sensor_output_generator_inst>:
/*
 * cmos_sensor_output_generator_inst
 *
 * Constructs a device structure.
 */
cmos_sensor_output_generator_dev cmos_sensor_output_generator_inst(void *base, uint8_t pix_depth, uint32_t max_width, uint32_t max_height) {
101008d8:	defff704 	addi	sp,sp,-36
101008dc:	df000815 	stw	fp,32(sp)
101008e0:	df000804 	addi	fp,sp,32
101008e4:	e13ffc15 	stw	r4,-16(fp)
101008e8:	e17ffd15 	stw	r5,-12(fp)
101008ec:	3005883a 	mov	r2,r6
101008f0:	e1ffff15 	stw	r7,-4(fp)
101008f4:	e0bffe05 	stb	r2,-8(fp)
    cmos_sensor_output_generator_dev dev;

    dev.base = base;
101008f8:	e0bffd17 	ldw	r2,-12(fp)
101008fc:	e0bff815 	stw	r2,-32(fp)
    dev.pix_depth = pix_depth;
10100900:	e0bffe03 	ldbu	r2,-8(fp)
10100904:	e0bff905 	stb	r2,-28(fp)
    dev.max_width = max_width;
10100908:	e0bfff17 	ldw	r2,-4(fp)
1010090c:	e0bffa15 	stw	r2,-24(fp)
    dev.max_height = max_height;
10100910:	e0800117 	ldw	r2,4(fp)
10100914:	e0bffb15 	stw	r2,-20(fp)

    return dev;
10100918:	e0bffc17 	ldw	r2,-16(fp)
1010091c:	e0fff817 	ldw	r3,-32(fp)
10100920:	10c00015 	stw	r3,0(r2)
10100924:	e0fff917 	ldw	r3,-28(fp)
10100928:	10c00115 	stw	r3,4(r2)
1010092c:	e0fffa17 	ldw	r3,-24(fp)
10100930:	10c00215 	stw	r3,8(r2)
10100934:	e0fffb17 	ldw	r3,-20(fp)
10100938:	10c00315 	stw	r3,12(r2)
}
1010093c:	e0bffc17 	ldw	r2,-16(fp)
10100940:	e037883a 	mov	sp,fp
10100944:	df000017 	ldw	fp,0(sp)
10100948:	dec00104 	addi	sp,sp,4
1010094c:	f800283a 	ret

10100950 <cmos_sensor_output_generator_init>:
 * Initializes the CMOS Sensor Output Generator controller.
 *
 * This routine sets the values of all registers to the minimums defined in
 * cmos_sensor_output_generator_regs.h.
 */
void cmos_sensor_output_generator_init(cmos_sensor_output_generator_dev *dev) {
10100950:	defffd04 	addi	sp,sp,-12
10100954:	dfc00215 	stw	ra,8(sp)
10100958:	df000115 	stw	fp,4(sp)
1010095c:	df000104 	addi	fp,sp,4
10100960:	e13fff15 	stw	r4,-4(fp)
    cmos_sensor_output_generator_stop(dev);
10100964:	e13fff17 	ldw	r4,-4(fp)
10100968:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    write_frame_width_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_WIDTH_MIN);
1010096c:	01400044 	movi	r5,1
10100970:	e13fff17 	ldw	r4,-4(fp)
10100974:	01002cc0 	call	101002cc <write_frame_width_reg>
    write_frame_height_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_HEIGHT_MIN);
10100978:	01400044 	movi	r5,1
1010097c:	e13fff17 	ldw	r4,-4(fp)
10100980:	01003940 	call	10100394 <write_frame_height_reg>
    write_frame_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN);
10100984:	01400044 	movi	r5,1
10100988:	e13fff17 	ldw	r4,-4(fp)
1010098c:	01004600 	call	10100460 <write_frame_frame_blank_reg>
    write_frame_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN);
10100990:	000b883a 	mov	r5,zero
10100994:	e13fff17 	ldw	r4,-4(fp)
10100998:	010052c0 	call	1010052c <write_frame_line_blank_reg>
    write_line_line_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN);
1010099c:	01400044 	movi	r5,1
101009a0:	e13fff17 	ldw	r4,-4(fp)
101009a4:	01005f40 	call	101005f4 <write_line_line_blank_reg>
    write_line_frame_blank_reg(dev, CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);
101009a8:	000b883a 	mov	r5,zero
101009ac:	e13fff17 	ldw	r4,-4(fp)
101009b0:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
}
101009b4:	0001883a 	nop
101009b8:	e037883a 	mov	sp,fp
101009bc:	dfc00117 	ldw	ra,4(sp)
101009c0:	df000017 	ldw	fp,0(sp)
101009c4:	dec00204 	addi	sp,sp,8
101009c8:	f800283a 	ret

101009cc <cmos_sensor_output_generator_configure>:
 *
 * Configure the generator.
 *
 * Returns true if successful (values within bounds), and false otherwise.
 */
bool cmos_sensor_output_generator_configure(cmos_sensor_output_generator_dev *dev, uint32_t frame_width, uint32_t frame_height, uint32_t frame_frame_blank, uint32_t frame_line_blank, uint32_t line_line_blank, uint32_t line_frame_blank) {
101009cc:	defff904 	addi	sp,sp,-28
101009d0:	dfc00615 	stw	ra,24(sp)
101009d4:	df000515 	stw	fp,20(sp)
101009d8:	df000504 	addi	fp,sp,20
101009dc:	e13ffc15 	stw	r4,-16(fp)
101009e0:	e17ffd15 	stw	r5,-12(fp)
101009e4:	e1bffe15 	stw	r6,-8(fp)
101009e8:	e1ffff15 	stw	r7,-4(fp)
    bool success = true;
101009ec:	00800044 	movi	r2,1
101009f0:	e0bffb05 	stb	r2,-20(fp)

    cmos_sensor_output_generator_stop(dev);
101009f4:	e13ffc17 	ldw	r4,-16(fp)
101009f8:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

    success &= write_frame_width_reg(dev, frame_width);
101009fc:	e17ffd17 	ldw	r5,-12(fp)
10100a00:	e13ffc17 	ldw	r4,-16(fp)
10100a04:	01002cc0 	call	101002cc <write_frame_width_reg>
10100a08:	e0fffb03 	ldbu	r3,-20(fp)
10100a0c:	10803fcc 	andi	r2,r2,255
10100a10:	1884703a 	and	r2,r3,r2
10100a14:	1004c03a 	cmpne	r2,r2,zero
10100a18:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_height_reg(dev, frame_height);
10100a1c:	e17ffe17 	ldw	r5,-8(fp)
10100a20:	e13ffc17 	ldw	r4,-16(fp)
10100a24:	01003940 	call	10100394 <write_frame_height_reg>
10100a28:	e0fffb03 	ldbu	r3,-20(fp)
10100a2c:	10803fcc 	andi	r2,r2,255
10100a30:	1884703a 	and	r2,r3,r2
10100a34:	1004c03a 	cmpne	r2,r2,zero
10100a38:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_frame_blank_reg(dev, frame_frame_blank);
10100a3c:	e17fff17 	ldw	r5,-4(fp)
10100a40:	e13ffc17 	ldw	r4,-16(fp)
10100a44:	01004600 	call	10100460 <write_frame_frame_blank_reg>
10100a48:	e0fffb03 	ldbu	r3,-20(fp)
10100a4c:	10803fcc 	andi	r2,r2,255
10100a50:	1884703a 	and	r2,r3,r2
10100a54:	1004c03a 	cmpne	r2,r2,zero
10100a58:	e0bffb05 	stb	r2,-20(fp)
    success &= write_frame_line_blank_reg(dev, frame_line_blank);
10100a5c:	e1400217 	ldw	r5,8(fp)
10100a60:	e13ffc17 	ldw	r4,-16(fp)
10100a64:	010052c0 	call	1010052c <write_frame_line_blank_reg>
10100a68:	e0fffb03 	ldbu	r3,-20(fp)
10100a6c:	10803fcc 	andi	r2,r2,255
10100a70:	1884703a 	and	r2,r3,r2
10100a74:	1004c03a 	cmpne	r2,r2,zero
10100a78:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_line_blank_reg(dev, line_line_blank);
10100a7c:	e1400317 	ldw	r5,12(fp)
10100a80:	e13ffc17 	ldw	r4,-16(fp)
10100a84:	01005f40 	call	101005f4 <write_line_line_blank_reg>
10100a88:	e0fffb03 	ldbu	r3,-20(fp)
10100a8c:	10803fcc 	andi	r2,r2,255
10100a90:	1884703a 	and	r2,r3,r2
10100a94:	1004c03a 	cmpne	r2,r2,zero
10100a98:	e0bffb05 	stb	r2,-20(fp)
    success &= write_line_frame_blank_reg(dev, line_frame_blank);
10100a9c:	e1400417 	ldw	r5,16(fp)
10100aa0:	e13ffc17 	ldw	r4,-16(fp)
10100aa4:	01006c00 	call	101006c0 <write_line_frame_blank_reg>
10100aa8:	e0fffb03 	ldbu	r3,-20(fp)
10100aac:	10803fcc 	andi	r2,r2,255
10100ab0:	1884703a 	and	r2,r3,r2
10100ab4:	1004c03a 	cmpne	r2,r2,zero
10100ab8:	e0bffb05 	stb	r2,-20(fp)

    return success;
10100abc:	e0bffb03 	ldbu	r2,-20(fp)
}
10100ac0:	e037883a 	mov	sp,fp
10100ac4:	dfc00117 	ldw	ra,4(sp)
10100ac8:	df000017 	ldw	fp,0(sp)
10100acc:	dec00204 	addi	sp,sp,8
10100ad0:	f800283a 	ret

10100ad4 <cmos_sensor_output_generator_start>:
 * Starts the generator.
 *
 * You must previously configure the controller by calling
 * cmos_sensor_output_generator_configure() before calling this function.
 */
void cmos_sensor_output_generator_start(cmos_sensor_output_generator_dev *dev) {
10100ad4:	defffe04 	addi	sp,sp,-8
10100ad8:	df000115 	stw	fp,4(sp)
10100adc:	df000104 	addi	fp,sp,4
10100ae0:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_START);
10100ae4:	e0bfff17 	ldw	r2,-4(fp)
10100ae8:	10800017 	ldw	r2,0(r2)
10100aec:	10800604 	addi	r2,r2,24
10100af0:	00c00044 	movi	r3,1
10100af4:	10c00035 	stwio	r3,0(r2)
}
10100af8:	0001883a 	nop
10100afc:	e037883a 	mov	sp,fp
10100b00:	df000017 	ldw	fp,0(sp)
10100b04:	dec00104 	addi	sp,sp,4
10100b08:	f800283a 	ret

10100b0c <cmos_sensor_output_generator_stop>:
/*
 * cmos_sensor_output_generator_stop
 *
 * Stops the generator.
 */
void cmos_sensor_output_generator_stop(cmos_sensor_output_generator_dev *dev) {
10100b0c:	defffe04 	addi	sp,sp,-8
10100b10:	df000115 	stw	fp,4(sp)
10100b14:	df000104 	addi	fp,sp,4
10100b18:	e13fff15 	stw	r4,-4(fp)
    CMOS_SENSOR_OUTPUT_GENERATOR_WR_COMMAND(dev->base, CMOS_SENSOR_OUTPUT_GENERATOR_COMMAND_STOP);
10100b1c:	e0bfff17 	ldw	r2,-4(fp)
10100b20:	10800017 	ldw	r2,0(r2)
10100b24:	10800604 	addi	r2,r2,24
10100b28:	0007883a 	mov	r3,zero
10100b2c:	10c00035 	stwio	r3,0(r2)
}
10100b30:	0001883a 	nop
10100b34:	e037883a 	mov	sp,fp
10100b38:	df000017 	ldw	fp,0(sp)
10100b3c:	dec00104 	addi	sp,sp,4
10100b40:	f800283a 	ret

10100b44 <main>:

#define ONE_KB (1024)
#define ONE_FRAME (320*240*2)

int main()
{
10100b44:	deffee04 	addi	sp,sp,-72
10100b48:	dfc01115 	stw	ra,68(sp)
10100b4c:	df001015 	stw	fp,64(sp)
10100b50:	df001004 	addi	fp,sp,64
	//FILE* test;
	//test = fopen("/mnt/host/test.txt","w");

	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100b54:	e03ff315 	stw	zero,-52(fp)
10100b58:	00000606 	br	10100b74 <main+0x30>
	{
		// Write through address span expander
		IOWR_16DIRECT(HPS_0_BRIDGES_BASE, i, i);
10100b5c:	e0bff317 	ldw	r2,-52(fp)
10100b60:	e0fff317 	ldw	r3,-52(fp)
10100b64:	10c0002d 	sthio	r3,0(r2)
int main()
{
	//FILE* test;
	//test = fopen("/mnt/host/test.txt","w");

	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100b68:	e0bff317 	ldw	r2,-52(fp)
10100b6c:	10800084 	addi	r2,r2,2
10100b70:	e0bff315 	stw	r2,-52(fp)
10100b74:	e0fff317 	ldw	r3,-52(fp)
10100b78:	008000b4 	movhi	r2,2
10100b7c:	1095ffc4 	addi	r2,r2,22527
10100b80:	10fff62e 	bgeu	r2,r3,10100b5c <__alt_data_end+0xfffe0b5c>
	}

	//fclose(test);

	//CAMERA INITIALISATION
	cmos_sensor_output_generator_dev cmos_sensor_output_generator = cmos_sensor_output_generator_inst(CMOS_SENSOR_OUTPUT_GENERATOR_0_BASE,
10100b84:	e0fffc04 	addi	r3,fp,-16
10100b88:	00810e04 	movi	r2,1080
10100b8c:	d8800015 	stw	r2,0(sp)
10100b90:	01c1e004 	movi	r7,1920
10100b94:	01800304 	movi	r6,12
10100b98:	01440034 	movhi	r5,4096
10100b9c:	29420804 	addi	r5,r5,2080
10100ba0:	1809883a 	mov	r4,r3
10100ba4:	01008d80 	call	101008d8 <cmos_sensor_output_generator_inst>
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_PIX_DEPTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_WIDTH,
																									  CMOS_SENSOR_OUTPUT_GENERATOR_0_MAX_HEIGHT);
	cmos_sensor_output_generator_init(&cmos_sensor_output_generator);
10100ba8:	e0bffc04 	addi	r2,fp,-16
10100bac:	1009883a 	mov	r4,r2
10100bb0:	01009500 	call	10100950 <cmos_sensor_output_generator_init>
	cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100bb4:	e0bffc04 	addi	r2,fp,-16
10100bb8:	1009883a 	mov	r4,r2
10100bbc:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>
	int config_success = cmos_sensor_output_generator_configure(&cmos_sensor_output_generator,
10100bc0:	e0fffc04 	addi	r3,fp,-16
10100bc4:	d8000215 	stw	zero,8(sp)
10100bc8:	00800044 	movi	r2,1
10100bcc:	d8800115 	stw	r2,4(sp)
10100bd0:	d8000015 	stw	zero,0(sp)
10100bd4:	01c00044 	movi	r7,1
10100bd8:	01807804 	movi	r6,480
10100bdc:	0140a004 	movi	r5,640
10100be0:	1809883a 	mov	r4,r3
10100be4:	01009cc0 	call	101009cc <cmos_sensor_output_generator_configure>
10100be8:	10803fcc 	andi	r2,r2,255
10100bec:	e0bff515 	stw	r2,-44(fp)
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_FRAME_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_FRAME_LINE_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_LINE_BLANK_MIN,
										   	   	   	   	   	   CMOS_SENSOR_OUTPUT_GENERATOR_CONFIG_LINE_FRAME_BLANK_MIN);

	printf("CMOS Config = %d \n", config_success);
10100bf0:	e17ff517 	ldw	r5,-44(fp)
10100bf4:	01040474 	movhi	r4,4113
10100bf8:	21057804 	addi	r4,r4,5600
10100bfc:	01036d40 	call	101036d4 <printf>

	//CAMERA CONTROLLER INITIALISATION
	//Stop the camera controller
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x00000000);
10100c00:	0007883a 	mov	r3,zero
10100c04:	00840034 	movhi	r2,4096
10100c08:	10821004 	addi	r2,r2,2112
10100c0c:	10c00035 	stwio	r3,0(r2)
	//Reset the status register
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1, 0x00000000);
10100c10:	0007883a 	mov	r3,zero
10100c14:	00840034 	movhi	r2,4096
10100c18:	10821044 	addi	r2,r2,2113
10100c1c:	10c00035 	stwio	r3,0(r2)
	//Start Address = 0x00000000
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x2, 0x00000000);
10100c20:	0007883a 	mov	r3,zero
10100c24:	00840034 	movhi	r2,4096
10100c28:	10821084 	addi	r2,r2,2114
10100c2c:	10c00035 	stwio	r3,0(r2)
	//Length = 320*240*2 = 0x00025800
	IOWR(CAMERA_CONTROLLER_0_BASE, 0x3, 0x00025800);
10100c30:	00c000b4 	movhi	r3,2
10100c34:	18d60004 	addi	r3,r3,22528
10100c38:	00840034 	movhi	r2,4096
10100c3c:	10821304 	addi	r2,r2,2124
10100c40:	10c00035 	stwio	r3,0(r2)

	//READ THE REGISTERS
	uint32_t start = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0);
10100c44:	00840034 	movhi	r2,4096
10100c48:	10821004 	addi	r2,r2,2112
10100c4c:	10800037 	ldwio	r2,0(r2)
10100c50:	e0bff615 	stw	r2,-40(fp)
	printf("Start = %" PRIu32 "\n", start);
10100c54:	e17ff617 	ldw	r5,-40(fp)
10100c58:	01040474 	movhi	r4,4113
10100c5c:	21057d04 	addi	r4,r4,5620
10100c60:	01036d40 	call	101036d4 <printf>
	uint32_t status = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1);
10100c64:	00840034 	movhi	r2,4096
10100c68:	10821044 	addi	r2,r2,2113
10100c6c:	10800037 	ldwio	r2,0(r2)
10100c70:	e0bff715 	stw	r2,-36(fp)
	printf("Status = %" PRIu32 "\n", status);
10100c74:	e17ff717 	ldw	r5,-36(fp)
10100c78:	01040474 	movhi	r4,4113
10100c7c:	21058104 	addi	r4,r4,5636
10100c80:	01036d40 	call	101036d4 <printf>
	uint32_t startaddress = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x2);
10100c84:	00840034 	movhi	r2,4096
10100c88:	10821084 	addi	r2,r2,2114
10100c8c:	10800037 	ldwio	r2,0(r2)
10100c90:	e0bff815 	stw	r2,-32(fp)
	printf("StartAddress = %" PRIu32 "\n", startaddress);
10100c94:	e17ff817 	ldw	r5,-32(fp)
10100c98:	01040474 	movhi	r4,4113
10100c9c:	21058504 	addi	r4,r4,5652
10100ca0:	01036d40 	call	101036d4 <printf>
	uint32_t length = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x3);
10100ca4:	00840034 	movhi	r2,4096
10100ca8:	108210c4 	addi	r2,r2,2115
10100cac:	10800037 	ldwio	r2,0(r2)
10100cb0:	e0bff915 	stw	r2,-28(fp)
	printf("Length = %" PRIu32 "\n", length);
10100cb4:	e17ff917 	ldw	r5,-28(fp)
10100cb8:	01040474 	movhi	r4,4113
10100cbc:	21058a04 	addi	r4,r4,5672
10100cc0:	01036d40 	call	101036d4 <printf>

	//START EVERYTHING
	cmos_sensor_output_generator_start(&cmos_sensor_output_generator);
10100cc4:	e0bffc04 	addi	r2,fp,-16
10100cc8:	1009883a 	mov	r4,r2
10100ccc:	0100ad40 	call	10100ad4 <cmos_sensor_output_generator_start>
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x00000001);
10100cd0:	00c00044 	movi	r3,1
10100cd4:	00840034 	movhi	r2,4096
10100cd8:	10821004 	addi	r2,r2,2112
10100cdc:	10c00035 	stwio	r3,0(r2)

	//WAIT FOR A WHILE
	status = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1);
10100ce0:	00840034 	movhi	r2,4096
10100ce4:	10821044 	addi	r2,r2,2113
10100ce8:	10800037 	ldwio	r2,0(r2)
10100cec:	e0bff715 	stw	r2,-36(fp)
	printf("Status = %" PRIu32 "\n", status);
10100cf0:	e17ff717 	ldw	r5,-36(fp)
10100cf4:	01040474 	movhi	r4,4113
10100cf8:	21058104 	addi	r4,r4,5636
10100cfc:	01036d40 	call	101036d4 <printf>

	while(IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1) != 0x00000001) {}
10100d00:	0001883a 	nop
10100d04:	00840034 	movhi	r2,4096
10100d08:	10821044 	addi	r2,r2,2113
10100d0c:	10800037 	ldwio	r2,0(r2)
10100d10:	10800058 	cmpnei	r2,r2,1
10100d14:	103ffb1e 	bne	r2,zero,10100d04 <__alt_data_end+0xfffe0d04>

	status = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1);
10100d18:	00840034 	movhi	r2,4096
10100d1c:	10821044 	addi	r2,r2,2113
10100d20:	10800037 	ldwio	r2,0(r2)
10100d24:	e0bff715 	stw	r2,-36(fp)
	printf("Status = %" PRIu32 "\n", status);
10100d28:	e17ff717 	ldw	r5,-36(fp)
10100d2c:	01040474 	movhi	r4,4113
10100d30:	21058104 	addi	r4,r4,5636
10100d34:	01036d40 	call	101036d4 <printf>

	while(IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1) != 0x00000003) {}
10100d38:	0001883a 	nop
10100d3c:	00840034 	movhi	r2,4096
10100d40:	10821044 	addi	r2,r2,2113
10100d44:	10800037 	ldwio	r2,0(r2)
10100d48:	108000d8 	cmpnei	r2,r2,3
10100d4c:	103ffb1e 	bne	r2,zero,10100d3c <__alt_data_end+0xfffe0d3c>

	status = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1);
10100d50:	00840034 	movhi	r2,4096
10100d54:	10821044 	addi	r2,r2,2113
10100d58:	10800037 	ldwio	r2,0(r2)
10100d5c:	e0bff715 	stw	r2,-36(fp)
	printf("Status = %" PRIu32 "\n", status);
10100d60:	e17ff717 	ldw	r5,-36(fp)
10100d64:	01040474 	movhi	r4,4113
10100d68:	21058104 	addi	r4,r4,5636
10100d6c:	01036d40 	call	101036d4 <printf>

	while(IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1) != 0x00000007) {}
10100d70:	0001883a 	nop
10100d74:	00840034 	movhi	r2,4096
10100d78:	10821044 	addi	r2,r2,2113
10100d7c:	10800037 	ldwio	r2,0(r2)
10100d80:	108001d8 	cmpnei	r2,r2,7
10100d84:	103ffb1e 	bne	r2,zero,10100d74 <__alt_data_end+0xfffe0d74>

	status = IORD_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x1);
10100d88:	00840034 	movhi	r2,4096
10100d8c:	10821044 	addi	r2,r2,2113
10100d90:	10800037 	ldwio	r2,0(r2)
10100d94:	e0bff715 	stw	r2,-36(fp)
	printf("Status = %" PRIu32 "\n", status);
10100d98:	e17ff717 	ldw	r5,-36(fp)
10100d9c:	01040474 	movhi	r4,4113
10100da0:	21058104 	addi	r4,r4,5636
10100da4:	01036d40 	call	101036d4 <printf>

	//STOP EVERYTHING
	IOWR_32DIRECT(CAMERA_CONTROLLER_0_BASE, 0x0, 0x00000000);
10100da8:	0007883a 	mov	r3,zero
10100dac:	00840034 	movhi	r2,4096
10100db0:	10821004 	addi	r2,r2,2112
10100db4:	10c00035 	stwio	r3,0(r2)
	cmos_sensor_output_generator_stop(&cmos_sensor_output_generator);
10100db8:	e0bffc04 	addi	r2,fp,-16
10100dbc:	1009883a 	mov	r4,r2
10100dc0:	0100b0c0 	call	10100b0c <cmos_sensor_output_generator_stop>

	//READ THE IMAGE IN THE MEMORY
	FILE* data;
	data = fopen("/mnt/host/data.txt","w");
10100dc4:	01440474 	movhi	r5,4113
10100dc8:	29458e04 	addi	r5,r5,5688
10100dcc:	01040474 	movhi	r4,4113
10100dd0:	21058f04 	addi	r4,r4,5692
10100dd4:	01020580 	call	10102058 <fopen>
10100dd8:	e0bffa15 	stw	r2,-24(fp)

	uint16_t readdata = 0;
10100ddc:	e03ffb0d 	sth	zero,-20(fp)
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100de0:	e03ff415 	stw	zero,-48(fp)
10100de4:	00000d06 	br	10100e1c <main+0x2d8>
	{
		// Read through address span expander
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE, i);
10100de8:	e0bff417 	ldw	r2,-48(fp)
10100dec:	1080002b 	ldhuio	r2,0(r2)
10100df0:	10bfffcc 	andi	r2,r2,65535
10100df4:	e0bffb0d 	sth	r2,-20(fp)
		fprintf(data, "%" PRIu16 "\n", readdata);
10100df8:	e0bffb0b 	ldhu	r2,-20(fp)
10100dfc:	100d883a 	mov	r6,r2
10100e00:	01440474 	movhi	r5,4113
10100e04:	29459404 	addi	r5,r5,5712
10100e08:	e13ffa17 	ldw	r4,-24(fp)
10100e0c:	01020980 	call	10102098 <fprintf>
	//READ THE IMAGE IN THE MEMORY
	FILE* data;
	data = fopen("/mnt/host/data.txt","w");

	uint16_t readdata = 0;
	for (uint32_t i = 0; i < ONE_FRAME; i += sizeof(uint16_t))
10100e10:	e0bff417 	ldw	r2,-48(fp)
10100e14:	10800084 	addi	r2,r2,2
10100e18:	e0bff415 	stw	r2,-48(fp)
10100e1c:	e0fff417 	ldw	r3,-48(fp)
10100e20:	008000b4 	movhi	r2,2
10100e24:	1095ffc4 	addi	r2,r2,22527
10100e28:	10ffef2e 	bgeu	r2,r3,10100de8 <__alt_data_end+0xfffe0de8>
		readdata = IORD_16DIRECT(HPS_0_BRIDGES_BASE, i);
		fprintf(data, "%" PRIu16 "\n", readdata);
		//fprintf(data, "%" PRIu32 " : %" PRIu16 "\n", i, readdata);
	}

	fclose(data);
10100e2c:	e13ffa17 	ldw	r4,-24(fp)
10100e30:	01019080 	call	10101908 <fclose>

	printf("FINISH !!!");
10100e34:	01040474 	movhi	r4,4113
10100e38:	21059504 	addi	r4,r4,5716
10100e3c:	01036d40 	call	101036d4 <printf>
	return EXIT_SUCCESS;
10100e40:	0005883a 	mov	r2,zero
}
10100e44:	e037883a 	mov	sp,fp
10100e48:	dfc00117 	ldw	ra,4(sp)
10100e4c:	df000017 	ldw	fp,0(sp)
10100e50:	dec00204 	addi	sp,sp,8
10100e54:	f800283a 	ret

10100e58 <i2c_usleep>:
static void wait_end_of_transfer(i2c_dev *dev);
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control);
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control);

/* Function to put the host processor to sleep for microseconds */
static void i2c_usleep(unsigned int useconds) {
10100e58:	defffd04 	addi	sp,sp,-12
10100e5c:	dfc00215 	stw	ra,8(sp)
10100e60:	df000115 	stw	fp,4(sp)
10100e64:	df000104 	addi	fp,sp,4
10100e68:	e13fff15 	stw	r4,-4(fp)
#if defined(__KERNEL__) || defined(MODULE)
    udelay(useconds);
#else
    usleep(useconds);
10100e6c:	e13fff17 	ldw	r4,-4(fp)
10100e70:	010f26c0 	call	1010f26c <usleep>
#endif
}
10100e74:	0001883a 	nop
10100e78:	e037883a 	mov	sp,fp
10100e7c:	dfc00117 	ldw	ra,4(sp)
10100e80:	df000017 	ldw	fp,0(sp)
10100e84:	dec00204 	addi	sp,sp,8
10100e88:	f800283a 	ret

10100e8c <wait_end_of_transfer>:
/*
 * wait_end_of_transfer
 *
 * Waits until the current i2c transfer is finished.
 */
static void wait_end_of_transfer(i2c_dev *dev) {
10100e8c:	defffe04 	addi	sp,sp,-8
10100e90:	df000115 	stw	fp,4(sp)
10100e94:	df000104 	addi	fp,sp,4
10100e98:	e13fff15 	stw	r4,-4(fp)
    while (I2C_RD_STATUS(dev->base) & I2C_STATUS_TRANSFER_IN_PROGRESS_MSK);
10100e9c:	0001883a 	nop
10100ea0:	e0bfff17 	ldw	r2,-4(fp)
10100ea4:	10800017 	ldw	r2,0(r2)
10100ea8:	10800084 	addi	r2,r2,2
10100eac:	10800023 	ldbuio	r2,0(r2)
10100eb0:	10803fcc 	andi	r2,r2,255
10100eb4:	1080020c 	andi	r2,r2,8
10100eb8:	103ff91e 	bne	r2,zero,10100ea0 <__alt_data_end+0xfffe0ea0>
}
10100ebc:	0001883a 	nop
10100ec0:	e037883a 	mov	sp,fp
10100ec4:	df000017 	ldw	fp,0(sp)
10100ec8:	dec00104 	addi	sp,sp,4
10100ecc:	f800283a 	ret

10100ed0 <set_data_control>:
 * set_data_control
 *
 * Writes the supplied "data" argument to SDA while using the control sequences
 * provided in argument "control".
 */
static void set_data_control(i2c_dev *dev, uint8_t data, uint8_t control) {
10100ed0:	defffb04 	addi	sp,sp,-20
10100ed4:	dfc00415 	stw	ra,16(sp)
10100ed8:	df000315 	stw	fp,12(sp)
10100edc:	df000304 	addi	fp,sp,12
10100ee0:	e13ffd15 	stw	r4,-12(fp)
10100ee4:	2807883a 	mov	r3,r5
10100ee8:	3005883a 	mov	r2,r6
10100eec:	e0fffe05 	stb	r3,-8(fp)
10100ef0:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10100ef4:	e13ffd17 	ldw	r4,-12(fp)
10100ef8:	0100e8c0 	call	10100e8c <wait_end_of_transfer>
    I2C_WR_DATA(dev->base, data);
10100efc:	e0bffd17 	ldw	r2,-12(fp)
10100f00:	10800017 	ldw	r2,0(r2)
10100f04:	e0fffe03 	ldbu	r3,-8(fp)
10100f08:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, control);
10100f0c:	e0bffd17 	ldw	r2,-12(fp)
10100f10:	10800017 	ldw	r2,0(r2)
10100f14:	10800044 	addi	r2,r2,1
10100f18:	e0ffff03 	ldbu	r3,-4(fp)
10100f1c:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100f20:	e13ffd17 	ldw	r4,-12(fp)
10100f24:	0100e8c0 	call	10100e8c <wait_end_of_transfer>
}
10100f28:	0001883a 	nop
10100f2c:	e037883a 	mov	sp,fp
10100f30:	dfc00117 	ldw	ra,4(sp)
10100f34:	df000017 	ldw	fp,0(sp)
10100f38:	dec00204 	addi	sp,sp,8
10100f3c:	f800283a 	ret

10100f40 <get_data_set_control>:
 * get_data_set_control
 *
 * Reads data from SDA while using the control sequences provided in argument
 * "control".
 */
static uint8_t get_data_set_control(i2c_dev *dev, uint8_t control) {
10100f40:	defffc04 	addi	sp,sp,-16
10100f44:	dfc00315 	stw	ra,12(sp)
10100f48:	df000215 	stw	fp,8(sp)
10100f4c:	df000204 	addi	fp,sp,8
10100f50:	e13ffe15 	stw	r4,-8(fp)
10100f54:	2805883a 	mov	r2,r5
10100f58:	e0bfff05 	stb	r2,-4(fp)
    wait_end_of_transfer(dev);
10100f5c:	e13ffe17 	ldw	r4,-8(fp)
10100f60:	0100e8c0 	call	10100e8c <wait_end_of_transfer>
    I2C_WR_CONTROL(dev->base, control);
10100f64:	e0bffe17 	ldw	r2,-8(fp)
10100f68:	10800017 	ldw	r2,0(r2)
10100f6c:	10800044 	addi	r2,r2,1
10100f70:	e0ffff03 	ldbu	r3,-4(fp)
10100f74:	10c00025 	stbio	r3,0(r2)
    wait_end_of_transfer(dev);
10100f78:	e13ffe17 	ldw	r4,-8(fp)
10100f7c:	0100e8c0 	call	10100e8c <wait_end_of_transfer>
    return I2C_RD_DATA(dev->base);
10100f80:	e0bffe17 	ldw	r2,-8(fp)
10100f84:	10800017 	ldw	r2,0(r2)
10100f88:	10800023 	ldbuio	r2,0(r2)
10100f8c:	10803fcc 	andi	r2,r2,255
}
10100f90:	e037883a 	mov	sp,fp
10100f94:	dfc00117 	ldw	ra,4(sp)
10100f98:	df000017 	ldw	fp,0(sp)
10100f9c:	dec00204 	addi	sp,sp,8
10100fa0:	f800283a 	ret

10100fa4 <i2c_inst>:
/*
 * i2c_inst
 *
 * Constructs a device structure.
 */
i2c_dev i2c_inst(void *base) {
10100fa4:	defffd04 	addi	sp,sp,-12
10100fa8:	df000215 	stw	fp,8(sp)
10100fac:	df000204 	addi	fp,sp,8
10100fb0:	e13fff15 	stw	r4,-4(fp)
    i2c_dev dev;

    dev.base = base;
10100fb4:	e0bfff17 	ldw	r2,-4(fp)
10100fb8:	e0bffe15 	stw	r2,-8(fp)

    return dev;
10100fbc:	e0bffe17 	ldw	r2,-8(fp)
}
10100fc0:	e037883a 	mov	sp,fp
10100fc4:	df000017 	ldw	fp,0(sp)
10100fc8:	dec00104 	addi	sp,sp,4
10100fcc:	f800283a 	ret

10100fd0 <i2c_init>:
 * standard data rate for an I2C transfer is 100 kbits/s. However, in order to
 * meet the timing constraints of the protocol, the I2C controller needs to
 * operate 4 times faster. Therefore, one must set the clock divisor register to
 * i2c_frequency / (4 * 100 KHz).
 */
void i2c_init(i2c_dev *dev, uint32_t i2c_frequency) {
10100fd0:	defffb04 	addi	sp,sp,-20
10100fd4:	dfc00415 	stw	ra,16(sp)
10100fd8:	df000315 	stw	fp,12(sp)
10100fdc:	dc000215 	stw	r16,8(sp)
10100fe0:	df000304 	addi	fp,sp,12
10100fe4:	e13ffd15 	stw	r4,-12(fp)
10100fe8:	e17ffe15 	stw	r5,-8(fp)
    I2C_WR_CLOCK_DIVISOR(dev->base, i2c_frequency / (4 * 100000));
10100fec:	e0bffd17 	ldw	r2,-12(fp)
10100ff0:	10800017 	ldw	r2,0(r2)
10100ff4:	140000c4 	addi	r16,r2,3
10100ff8:	e0bffe17 	ldw	r2,-8(fp)
10100ffc:	014001b4 	movhi	r5,6
10101000:	2946a004 	addi	r5,r5,6784
10101004:	1009883a 	mov	r4,r2
10101008:	010175c0 	call	1010175c <__udivsi3>
1010100c:	80800025 	stbio	r2,0(r16)
    i2c_usleep(I2C_SLEEP_US);
10101010:	0104e204 	movi	r4,5000
10101014:	0100e580 	call	10100e58 <i2c_usleep>
}
10101018:	0001883a 	nop
1010101c:	e6ffff04 	addi	sp,fp,-4
10101020:	dfc00217 	ldw	ra,8(sp)
10101024:	df000117 	ldw	fp,4(sp)
10101028:	dc000017 	ldw	r16,0(sp)
1010102c:	dec00304 	addi	sp,sp,12
10101030:	f800283a 	ret

10101034 <i2c_configure>:
 * Configure the controller.
 *
 * Setting the irq paramater to true enables interrupt generation at the end of
 * a read/write transfer, and false disables interrupt generation.
 */
void i2c_configure(i2c_dev *dev, bool irq) {
10101034:	defffc04 	addi	sp,sp,-16
10101038:	df000315 	stw	fp,12(sp)
1010103c:	df000304 	addi	fp,sp,12
10101040:	e13ffe15 	stw	r4,-8(fp)
10101044:	2805883a 	mov	r2,r5
10101048:	e0bfff05 	stb	r2,-4(fp)
    uint32_t config = 0;
1010104c:	e03ffd15 	stw	zero,-12(fp)

    if (irq) {
10101050:	e0bfff03 	ldbu	r2,-4(fp)
10101054:	10000426 	beq	r2,zero,10101068 <i2c_configure+0x34>
        config |= I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10101058:	e0bffd17 	ldw	r2,-12(fp)
1010105c:	10800814 	ori	r2,r2,32
10101060:	e0bffd15 	stw	r2,-12(fp)
10101064:	00000406 	br	10101078 <i2c_configure+0x44>
    } else {
        config &= ~I2C_CONTROL_INTERRUPT_ENABLE_MSK;
10101068:	e0fffd17 	ldw	r3,-12(fp)
1010106c:	00bff7c4 	movi	r2,-33
10101070:	1884703a 	and	r2,r3,r2
10101074:	e0bffd15 	stw	r2,-12(fp)
    }

    I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101078:	e0bffe17 	ldw	r2,-8(fp)
1010107c:	10800017 	ldw	r2,0(r2)
10101080:	10800044 	addi	r2,r2,1
10101084:	00c00084 	movi	r3,2
10101088:	10c00025 	stbio	r3,0(r2)
    I2C_WR_CONTROL(dev->base, config);
1010108c:	e0bffe17 	ldw	r2,-8(fp)
10101090:	10800017 	ldw	r2,0(r2)
10101094:	10800044 	addi	r2,r2,1
10101098:	e0fffd17 	ldw	r3,-12(fp)
1010109c:	10c00025 	stbio	r3,0(r2)
}
101010a0:	0001883a 	nop
101010a4:	e037883a 	mov	sp,fp
101010a8:	df000017 	ldw	fp,0(sp)
101010ac:	dec00104 	addi	sp,sp,4
101010b0:	f800283a 	ret

101010b4 <i2c_write>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t value) {
101010b4:	defffa04 	addi	sp,sp,-24
101010b8:	dfc00515 	stw	ra,20(sp)
101010bc:	df000415 	stw	fp,16(sp)
101010c0:	df000404 	addi	fp,sp,16
101010c4:	e13ffc15 	stw	r4,-16(fp)
101010c8:	2809883a 	mov	r4,r5
101010cc:	3007883a 	mov	r3,r6
101010d0:	3805883a 	mov	r2,r7
101010d4:	e13ffd05 	stb	r4,-12(fp)
101010d8:	e0fffe05 	stb	r3,-8(fp)
101010dc:	e0bfff05 	stb	r2,-4(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101010e0:	e0bffd03 	ldbu	r2,-12(fp)
101010e4:	10803f8c 	andi	r2,r2,254
101010e8:	01800504 	movi	r6,20
101010ec:	100b883a 	mov	r5,r2
101010f0:	e13ffc17 	ldw	r4,-16(fp)
101010f4:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101010f8:	e0bffc17 	ldw	r2,-16(fp)
101010fc:	10800017 	ldw	r2,0(r2)
10101100:	10800084 	addi	r2,r2,2
10101104:	10800023 	ldbuio	r2,0(r2)
10101108:	10803fcc 	andi	r2,r2,255
1010110c:	1080004c 	andi	r2,r2,1
10101110:	10000726 	beq	r2,zero,10101130 <i2c_write+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101114:	e0bffc17 	ldw	r2,-16(fp)
10101118:	10800017 	ldw	r2,0(r2)
1010111c:	10800044 	addi	r2,r2,1
10101120:	00c00084 	movi	r3,2
10101124:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101128:	00800044 	movi	r2,1
1010112c:	00002706 	br	101011cc <i2c_write+0x118>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101130:	e0bffe03 	ldbu	r2,-8(fp)
10101134:	01800404 	movi	r6,16
10101138:	100b883a 	mov	r5,r2
1010113c:	e13ffc17 	ldw	r4,-16(fp)
10101140:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101144:	e0bffc17 	ldw	r2,-16(fp)
10101148:	10800017 	ldw	r2,0(r2)
1010114c:	10800084 	addi	r2,r2,2
10101150:	10800023 	ldbuio	r2,0(r2)
10101154:	10803fcc 	andi	r2,r2,255
10101158:	1080004c 	andi	r2,r2,1
1010115c:	10000726 	beq	r2,zero,1010117c <i2c_write+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101160:	e0bffc17 	ldw	r2,-16(fp)
10101164:	10800017 	ldw	r2,0(r2)
10101168:	10800044 	addi	r2,r2,1
1010116c:	00c00084 	movi	r3,2
10101170:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
10101174:	00800084 	movi	r2,2
10101178:	00001406 	br	101011cc <i2c_write+0x118>
    }

    /* write register data to device */
    set_data_control(dev, value, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
1010117c:	e0bfff03 	ldbu	r2,-4(fp)
10101180:	01800484 	movi	r6,18
10101184:	100b883a 	mov	r5,r2
10101188:	e13ffc17 	ldw	r4,-16(fp)
1010118c:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101190:	e0bffc17 	ldw	r2,-16(fp)
10101194:	10800017 	ldw	r2,0(r2)
10101198:	10800084 	addi	r2,r2,2
1010119c:	10800023 	ldbuio	r2,0(r2)
101011a0:	10803fcc 	andi	r2,r2,255
101011a4:	1080004c 	andi	r2,r2,1
101011a8:	10000726 	beq	r2,zero,101011c8 <i2c_write+0x114>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101011ac:	e0bffc17 	ldw	r2,-16(fp)
101011b0:	10800017 	ldw	r2,0(r2)
101011b4:	10800044 	addi	r2,r2,1
101011b8:	00c00084 	movi	r3,2
101011bc:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101011c0:	00800084 	movi	r2,2
101011c4:	00000106 	br	101011cc <i2c_write+0x118>
    }

    return I2C_SUCCESS;
101011c8:	0005883a 	mov	r2,zero
}
101011cc:	e037883a 	mov	sp,fp
101011d0:	dfc00117 	ldw	ra,4(sp)
101011d4:	df000017 	ldw	fp,0(sp)
101011d8:	dec00204 	addi	sp,sp,8
101011dc:	f800283a 	ret

101011e0 <i2c_read>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value) {
101011e0:	defffa04 	addi	sp,sp,-24
101011e4:	dfc00515 	stw	ra,20(sp)
101011e8:	df000415 	stw	fp,16(sp)
101011ec:	df000404 	addi	fp,sp,16
101011f0:	e13ffc15 	stw	r4,-16(fp)
101011f4:	2807883a 	mov	r3,r5
101011f8:	3005883a 	mov	r2,r6
101011fc:	e1ffff15 	stw	r7,-4(fp)
10101200:	e0fffd05 	stb	r3,-12(fp)
10101204:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101208:	e0bffd03 	ldbu	r2,-12(fp)
1010120c:	10803f8c 	andi	r2,r2,254
10101210:	01800504 	movi	r6,20
10101214:	100b883a 	mov	r5,r2
10101218:	e13ffc17 	ldw	r4,-16(fp)
1010121c:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101220:	e0bffc17 	ldw	r2,-16(fp)
10101224:	10800017 	ldw	r2,0(r2)
10101228:	10800084 	addi	r2,r2,2
1010122c:	10800023 	ldbuio	r2,0(r2)
10101230:	10803fcc 	andi	r2,r2,255
10101234:	1080004c 	andi	r2,r2,1
10101238:	10000726 	beq	r2,zero,10101258 <i2c_read+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010123c:	e0bffc17 	ldw	r2,-16(fp)
10101240:	10800017 	ldw	r2,0(r2)
10101244:	10800044 	addi	r2,r2,1
10101248:	00c00084 	movi	r3,2
1010124c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101250:	00800044 	movi	r2,1
10101254:	00002f06 	br	10101314 <i2c_read+0x134>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101258:	e0bffe03 	ldbu	r2,-8(fp)
1010125c:	01800404 	movi	r6,16
10101260:	100b883a 	mov	r5,r2
10101264:	e13ffc17 	ldw	r4,-16(fp)
10101268:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010126c:	e0bffc17 	ldw	r2,-16(fp)
10101270:	10800017 	ldw	r2,0(r2)
10101274:	10800084 	addi	r2,r2,2
10101278:	10800023 	ldbuio	r2,0(r2)
1010127c:	10803fcc 	andi	r2,r2,255
10101280:	1080004c 	andi	r2,r2,1
10101284:	10000726 	beq	r2,zero,101012a4 <i2c_read+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101288:	e0bffc17 	ldw	r2,-16(fp)
1010128c:	10800017 	ldw	r2,0(r2)
10101290:	10800044 	addi	r2,r2,1
10101294:	00c00084 	movi	r3,2
10101298:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
1010129c:	00800084 	movi	r2,2
101012a0:	00001c06 	br	10101314 <i2c_read+0x134>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101012a4:	e0bffd03 	ldbu	r2,-12(fp)
101012a8:	10800054 	ori	r2,r2,1
101012ac:	10803fcc 	andi	r2,r2,255
101012b0:	01800504 	movi	r6,20
101012b4:	100b883a 	mov	r5,r2
101012b8:	e13ffc17 	ldw	r4,-16(fp)
101012bc:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101012c0:	e0bffc17 	ldw	r2,-16(fp)
101012c4:	10800017 	ldw	r2,0(r2)
101012c8:	10800084 	addi	r2,r2,2
101012cc:	10800023 	ldbuio	r2,0(r2)
101012d0:	10803fcc 	andi	r2,r2,255
101012d4:	1080004c 	andi	r2,r2,1
101012d8:	10000726 	beq	r2,zero,101012f8 <i2c_read+0x118>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101012dc:	e0bffc17 	ldw	r2,-16(fp)
101012e0:	10800017 	ldw	r2,0(r2)
101012e4:	10800044 	addi	r2,r2,1
101012e8:	00c00084 	movi	r3,2
101012ec:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101012f0:	00800044 	movi	r2,1
101012f4:	00000706 	br	10101314 <i2c_read+0x134>
    }

    /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
    *value = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
101012f8:	014002c4 	movi	r5,11
101012fc:	e13ffc17 	ldw	r4,-16(fp)
10101300:	0100f400 	call	10100f40 <get_data_set_control>
10101304:	1007883a 	mov	r3,r2
10101308:	e0bfff17 	ldw	r2,-4(fp)
1010130c:	10c00005 	stb	r3,0(r2)

    return I2C_SUCCESS;
10101310:	0005883a 	mov	r2,zero
}
10101314:	e037883a 	mov	sp,fp
10101318:	dfc00117 	ldw	ra,4(sp)
1010131c:	df000017 	ldw	fp,0(sp)
10101320:	dec00204 	addi	sp,sp,8
10101324:	f800283a 	ret

10101328 <i2c_write_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_write_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
10101328:	defff904 	addi	sp,sp,-28
1010132c:	dfc00615 	stw	ra,24(sp)
10101330:	df000515 	stw	fp,20(sp)
10101334:	df000504 	addi	fp,sp,20
10101338:	e13ffc15 	stw	r4,-16(fp)
1010133c:	2807883a 	mov	r3,r5
10101340:	3005883a 	mov	r2,r6
10101344:	e1ffff15 	stw	r7,-4(fp)
10101348:	e0fffd05 	stb	r3,-12(fp)
1010134c:	e0bffe05 	stb	r2,-8(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101350:	e0bffd03 	ldbu	r2,-12(fp)
10101354:	10803f8c 	andi	r2,r2,254
10101358:	01800504 	movi	r6,20
1010135c:	100b883a 	mov	r5,r2
10101360:	e13ffc17 	ldw	r4,-16(fp)
10101364:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101368:	e0bffc17 	ldw	r2,-16(fp)
1010136c:	10800017 	ldw	r2,0(r2)
10101370:	10800084 	addi	r2,r2,2
10101374:	10800023 	ldbuio	r2,0(r2)
10101378:	10803fcc 	andi	r2,r2,255
1010137c:	1080004c 	andi	r2,r2,1
10101380:	10000726 	beq	r2,zero,101013a0 <i2c_write_array+0x78>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101384:	e0bffc17 	ldw	r2,-16(fp)
10101388:	10800017 	ldw	r2,0(r2)
1010138c:	10800044 	addi	r2,r2,1
10101390:	00c00084 	movi	r3,2
10101394:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101398:	00800044 	movi	r2,1
1010139c:	00004206 	br	101014a8 <i2c_write_array+0x180>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
101013a0:	e0bffe03 	ldbu	r2,-8(fp)
101013a4:	01800404 	movi	r6,16
101013a8:	100b883a 	mov	r5,r2
101013ac:	e13ffc17 	ldw	r4,-16(fp)
101013b0:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101013b4:	e0bffc17 	ldw	r2,-16(fp)
101013b8:	10800017 	ldw	r2,0(r2)
101013bc:	10800084 	addi	r2,r2,2
101013c0:	10800023 	ldbuio	r2,0(r2)
101013c4:	10803fcc 	andi	r2,r2,255
101013c8:	1080004c 	andi	r2,r2,1
101013cc:	10000726 	beq	r2,zero,101013ec <i2c_write_array+0xc4>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101013d0:	e0bffc17 	ldw	r2,-16(fp)
101013d4:	10800017 	ldw	r2,0(r2)
101013d8:	10800044 	addi	r2,r2,1
101013dc:	00c00084 	movi	r3,2
101013e0:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
101013e4:	00800084 	movi	r2,2
101013e8:	00002f06 	br	101014a8 <i2c_write_array+0x180>
    }

    unsigned int i = 0;
101013ec:	e03ffb15 	stw	zero,-20(fp)
    for (i = 0; i < size; i++) {
101013f0:	e03ffb15 	stw	zero,-20(fp)
101013f4:	00002806 	br	10101498 <i2c_write_array+0x170>
        /* write register data to device */
        if (i < size - 1) {
101013f8:	e0800217 	ldw	r2,8(fp)
101013fc:	10bfffc4 	addi	r2,r2,-1
10101400:	e0fffb17 	ldw	r3,-20(fp)
10101404:	18800a2e 	bgeu	r3,r2,10101430 <i2c_write_array+0x108>
            set_data_control(dev, value[i], I2C_CONTROL_WRITE_COMMAND_MSK);
10101408:	e0ffff17 	ldw	r3,-4(fp)
1010140c:	e0bffb17 	ldw	r2,-20(fp)
10101410:	1885883a 	add	r2,r3,r2
10101414:	10800003 	ldbu	r2,0(r2)
10101418:	10803fcc 	andi	r2,r2,255
1010141c:	01800404 	movi	r6,16
10101420:	100b883a 	mov	r5,r2
10101424:	e13ffc17 	ldw	r4,-16(fp)
10101428:	0100ed00 	call	10100ed0 <set_data_control>
1010142c:	00000906 	br	10101454 <i2c_write_array+0x12c>
        } else {
            set_data_control(dev, value[i], I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101430:	e0ffff17 	ldw	r3,-4(fp)
10101434:	e0bffb17 	ldw	r2,-20(fp)
10101438:	1885883a 	add	r2,r3,r2
1010143c:	10800003 	ldbu	r2,0(r2)
10101440:	10803fcc 	andi	r2,r2,255
10101444:	01800484 	movi	r6,18
10101448:	100b883a 	mov	r5,r2
1010144c:	e13ffc17 	ldw	r4,-16(fp)
10101450:	0100ed00 	call	10100ed0 <set_data_control>

        }

        /* error: bad acknowledge */
        if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101454:	e0bffc17 	ldw	r2,-16(fp)
10101458:	10800017 	ldw	r2,0(r2)
1010145c:	10800084 	addi	r2,r2,2
10101460:	10800023 	ldbuio	r2,0(r2)
10101464:	10803fcc 	andi	r2,r2,255
10101468:	1080004c 	andi	r2,r2,1
1010146c:	10000726 	beq	r2,zero,1010148c <i2c_write_array+0x164>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101470:	e0bffc17 	ldw	r2,-16(fp)
10101474:	10800017 	ldw	r2,0(r2)
10101478:	10800044 	addi	r2,r2,1
1010147c:	00c00084 	movi	r3,2
10101480:	10c00025 	stbio	r3,0(r2)
            return I2C_EBADACK;
10101484:	00800084 	movi	r2,2
10101488:	00000706 	br	101014a8 <i2c_write_array+0x180>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_EBADACK;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
1010148c:	e0bffb17 	ldw	r2,-20(fp)
10101490:	10800044 	addi	r2,r2,1
10101494:	e0bffb15 	stw	r2,-20(fp)
10101498:	e0fffb17 	ldw	r3,-20(fp)
1010149c:	e0800217 	ldw	r2,8(fp)
101014a0:	18bfd536 	bltu	r3,r2,101013f8 <__alt_data_end+0xfffe13f8>
            I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
            return I2C_EBADACK;
        }
    }

    return I2C_SUCCESS;
101014a4:	0005883a 	mov	r2,zero
}
101014a8:	e037883a 	mov	sp,fp
101014ac:	dfc00117 	ldw	ra,4(sp)
101014b0:	df000017 	ldw	fp,0(sp)
101014b4:	dec00204 	addi	sp,sp,8
101014b8:	f800283a 	ret

101014bc <i2c_read_array>:
 *
 * Returns: I2C_SUCCESS -> success
 *          I2C_ENODEV  -> device does not answer
 *          I2C_EBADACK -> bad acknowledge received
 */
int i2c_read_array(i2c_dev *dev, uint8_t device, uint8_t index, uint8_t *value, unsigned int size) {
101014bc:	defff804 	addi	sp,sp,-32
101014c0:	dfc00715 	stw	ra,28(sp)
101014c4:	df000615 	stw	fp,24(sp)
101014c8:	dc000515 	stw	r16,20(sp)
101014cc:	df000604 	addi	fp,sp,24
101014d0:	e13ffb15 	stw	r4,-20(fp)
101014d4:	2807883a 	mov	r3,r5
101014d8:	3005883a 	mov	r2,r6
101014dc:	e1fffe15 	stw	r7,-8(fp)
101014e0:	e0fffc05 	stb	r3,-16(fp)
101014e4:	e0bffd05 	stb	r2,-12(fp)
    /* write to the device with the R/W bit set to 0 (write mode) */
    set_data_control(dev, device & 0xFE, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
101014e8:	e0bffc03 	ldbu	r2,-16(fp)
101014ec:	10803f8c 	andi	r2,r2,254
101014f0:	01800504 	movi	r6,20
101014f4:	100b883a 	mov	r5,r2
101014f8:	e13ffb17 	ldw	r4,-20(fp)
101014fc:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
10101500:	e0bffb17 	ldw	r2,-20(fp)
10101504:	10800017 	ldw	r2,0(r2)
10101508:	10800084 	addi	r2,r2,2
1010150c:	10800023 	ldbuio	r2,0(r2)
10101510:	10803fcc 	andi	r2,r2,255
10101514:	1080004c 	andi	r2,r2,1
10101518:	10000726 	beq	r2,zero,10101538 <i2c_read_array+0x7c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
1010151c:	e0bffb17 	ldw	r2,-20(fp)
10101520:	10800017 	ldw	r2,0(r2)
10101524:	10800044 	addi	r2,r2,1
10101528:	00c00084 	movi	r3,2
1010152c:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
10101530:	00800044 	movi	r2,1
10101534:	00004506 	br	1010164c <i2c_read_array+0x190>
    }

    /* write register index to device */
    set_data_control(dev, index, I2C_CONTROL_WRITE_COMMAND_MSK);
10101538:	e0bffd03 	ldbu	r2,-12(fp)
1010153c:	01800404 	movi	r6,16
10101540:	100b883a 	mov	r5,r2
10101544:	e13ffb17 	ldw	r4,-20(fp)
10101548:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: bad acknowledge */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
1010154c:	e0bffb17 	ldw	r2,-20(fp)
10101550:	10800017 	ldw	r2,0(r2)
10101554:	10800084 	addi	r2,r2,2
10101558:	10800023 	ldbuio	r2,0(r2)
1010155c:	10803fcc 	andi	r2,r2,255
10101560:	1080004c 	andi	r2,r2,1
10101564:	10000726 	beq	r2,zero,10101584 <i2c_read_array+0xc8>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
10101568:	e0bffb17 	ldw	r2,-20(fp)
1010156c:	10800017 	ldw	r2,0(r2)
10101570:	10800044 	addi	r2,r2,1
10101574:	00c00084 	movi	r3,2
10101578:	10c00025 	stbio	r3,0(r2)
        return I2C_EBADACK;
1010157c:	00800084 	movi	r2,2
10101580:	00003206 	br	1010164c <i2c_read_array+0x190>
    }

    /* write to the device with the R/W bit set to 1 (read mode) */
    set_data_control(dev, device | 0x01, I2C_CONTROL_GENERATE_START_SEQUENCE_MSK | I2C_CONTROL_WRITE_COMMAND_MSK);
10101584:	e0bffc03 	ldbu	r2,-16(fp)
10101588:	10800054 	ori	r2,r2,1
1010158c:	10803fcc 	andi	r2,r2,255
10101590:	01800504 	movi	r6,20
10101594:	100b883a 	mov	r5,r2
10101598:	e13ffb17 	ldw	r4,-20(fp)
1010159c:	0100ed00 	call	10100ed0 <set_data_control>

    /* error: device does not answer */
    if (I2C_RD_STATUS(dev->base) & I2C_STATUS_LAST_ACKNOWLEDGE_RECEIVED_MSK) {
101015a0:	e0bffb17 	ldw	r2,-20(fp)
101015a4:	10800017 	ldw	r2,0(r2)
101015a8:	10800084 	addi	r2,r2,2
101015ac:	10800023 	ldbuio	r2,0(r2)
101015b0:	10803fcc 	andi	r2,r2,255
101015b4:	1080004c 	andi	r2,r2,1
101015b8:	10000726 	beq	r2,zero,101015d8 <i2c_read_array+0x11c>
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
101015bc:	e0bffb17 	ldw	r2,-20(fp)
101015c0:	10800017 	ldw	r2,0(r2)
101015c4:	10800044 	addi	r2,r2,1
101015c8:	00c00084 	movi	r3,2
101015cc:	10c00025 	stbio	r3,0(r2)
        return I2C_ENODEV;
101015d0:	00800044 	movi	r2,1
101015d4:	00001d06 	br	1010164c <i2c_read_array+0x190>
    }

    unsigned int i = 0;
101015d8:	e03ffa15 	stw	zero,-24(fp)
    for (i = 0; i < size; i++) {
101015dc:	e03ffa15 	stw	zero,-24(fp)
101015e0:	00001606 	br	1010163c <i2c_read_array+0x180>
        if (i < size - 1) {
101015e4:	e0800217 	ldw	r2,8(fp)
101015e8:	10bfffc4 	addi	r2,r2,-1
101015ec:	e0fffa17 	ldw	r3,-24(fp)
101015f0:	1880082e 	bgeu	r3,r2,10101614 <i2c_read_array+0x158>
            value[i] = get_data_set_control(dev, I2C_CONTROL_READ_COMMAND_MSK);
101015f4:	e0fffe17 	ldw	r3,-8(fp)
101015f8:	e0bffa17 	ldw	r2,-24(fp)
101015fc:	18a1883a 	add	r16,r3,r2
10101600:	01400204 	movi	r5,8
10101604:	e13ffb17 	ldw	r4,-20(fp)
10101608:	0100f400 	call	10100f40 <get_data_set_control>
1010160c:	80800005 	stb	r2,0(r16)
10101610:	00000706 	br	10101630 <i2c_read_array+0x174>
        } else {
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
10101614:	e0fffe17 	ldw	r3,-8(fp)
10101618:	e0bffa17 	ldw	r2,-24(fp)
1010161c:	18a1883a 	add	r16,r3,r2
10101620:	014002c4 	movi	r5,11
10101624:	e13ffb17 	ldw	r4,-20(fp)
10101628:	0100f400 	call	10100f40 <get_data_set_control>
1010162c:	80800005 	stb	r2,0(r16)
        I2C_WR_CONTROL(dev->base, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK);
        return I2C_ENODEV;
    }

    unsigned int i = 0;
    for (i = 0; i < size; i++) {
10101630:	e0bffa17 	ldw	r2,-24(fp)
10101634:	10800044 	addi	r2,r2,1
10101638:	e0bffa15 	stw	r2,-24(fp)
1010163c:	e0fffa17 	ldw	r3,-24(fp)
10101640:	e0800217 	ldw	r2,8(fp)
10101644:	18bfe736 	bltu	r3,r2,101015e4 <__alt_data_end+0xfffe15e4>
            /* Read the data. Attention: write I2C_CONTROL_ACKNOWLEDGE_READ_MSK to control register to send a N0_ACK */
            value[i] = get_data_set_control(dev, I2C_CONTROL_GENERATE_STOP_SEQUENCE_MSK | I2C_CONTROL_READ_COMMAND_MSK | I2C_CONTROL_ACKNOWLEDGE_READ_MSK);
        }
    }

    return I2C_SUCCESS;
10101648:	0005883a 	mov	r2,zero
}
1010164c:	e6ffff04 	addi	sp,fp,-4
10101650:	dfc00217 	ldw	ra,8(sp)
10101654:	df000117 	ldw	fp,4(sp)
10101658:	dc000017 	ldw	r16,0(sp)
1010165c:	dec00304 	addi	sp,sp,12
10101660:	f800283a 	ret

10101664 <__divsi3>:
10101664:	20001b16 	blt	r4,zero,101016d4 <__divsi3+0x70>
10101668:	000f883a 	mov	r7,zero
1010166c:	28001616 	blt	r5,zero,101016c8 <__divsi3+0x64>
10101670:	200d883a 	mov	r6,r4
10101674:	29001a2e 	bgeu	r5,r4,101016e0 <__divsi3+0x7c>
10101678:	00800804 	movi	r2,32
1010167c:	00c00044 	movi	r3,1
10101680:	00000106 	br	10101688 <__divsi3+0x24>
10101684:	10000d26 	beq	r2,zero,101016bc <__divsi3+0x58>
10101688:	294b883a 	add	r5,r5,r5
1010168c:	10bfffc4 	addi	r2,r2,-1
10101690:	18c7883a 	add	r3,r3,r3
10101694:	293ffb36 	bltu	r5,r4,10101684 <__alt_data_end+0xfffe1684>
10101698:	0005883a 	mov	r2,zero
1010169c:	18000726 	beq	r3,zero,101016bc <__divsi3+0x58>
101016a0:	0005883a 	mov	r2,zero
101016a4:	31400236 	bltu	r6,r5,101016b0 <__divsi3+0x4c>
101016a8:	314dc83a 	sub	r6,r6,r5
101016ac:	10c4b03a 	or	r2,r2,r3
101016b0:	1806d07a 	srli	r3,r3,1
101016b4:	280ad07a 	srli	r5,r5,1
101016b8:	183ffa1e 	bne	r3,zero,101016a4 <__alt_data_end+0xfffe16a4>
101016bc:	38000126 	beq	r7,zero,101016c4 <__divsi3+0x60>
101016c0:	0085c83a 	sub	r2,zero,r2
101016c4:	f800283a 	ret
101016c8:	014bc83a 	sub	r5,zero,r5
101016cc:	39c0005c 	xori	r7,r7,1
101016d0:	003fe706 	br	10101670 <__alt_data_end+0xfffe1670>
101016d4:	0109c83a 	sub	r4,zero,r4
101016d8:	01c00044 	movi	r7,1
101016dc:	003fe306 	br	1010166c <__alt_data_end+0xfffe166c>
101016e0:	00c00044 	movi	r3,1
101016e4:	003fee06 	br	101016a0 <__alt_data_end+0xfffe16a0>

101016e8 <__modsi3>:
101016e8:	20001716 	blt	r4,zero,10101748 <__modsi3+0x60>
101016ec:	000f883a 	mov	r7,zero
101016f0:	2005883a 	mov	r2,r4
101016f4:	28001216 	blt	r5,zero,10101740 <__modsi3+0x58>
101016f8:	2900162e 	bgeu	r5,r4,10101754 <__modsi3+0x6c>
101016fc:	01800804 	movi	r6,32
10101700:	00c00044 	movi	r3,1
10101704:	00000106 	br	1010170c <__modsi3+0x24>
10101708:	30000a26 	beq	r6,zero,10101734 <__modsi3+0x4c>
1010170c:	294b883a 	add	r5,r5,r5
10101710:	31bfffc4 	addi	r6,r6,-1
10101714:	18c7883a 	add	r3,r3,r3
10101718:	293ffb36 	bltu	r5,r4,10101708 <__alt_data_end+0xfffe1708>
1010171c:	18000526 	beq	r3,zero,10101734 <__modsi3+0x4c>
10101720:	1806d07a 	srli	r3,r3,1
10101724:	11400136 	bltu	r2,r5,1010172c <__modsi3+0x44>
10101728:	1145c83a 	sub	r2,r2,r5
1010172c:	280ad07a 	srli	r5,r5,1
10101730:	183ffb1e 	bne	r3,zero,10101720 <__alt_data_end+0xfffe1720>
10101734:	38000126 	beq	r7,zero,1010173c <__modsi3+0x54>
10101738:	0085c83a 	sub	r2,zero,r2
1010173c:	f800283a 	ret
10101740:	014bc83a 	sub	r5,zero,r5
10101744:	003fec06 	br	101016f8 <__alt_data_end+0xfffe16f8>
10101748:	0109c83a 	sub	r4,zero,r4
1010174c:	01c00044 	movi	r7,1
10101750:	003fe706 	br	101016f0 <__alt_data_end+0xfffe16f0>
10101754:	00c00044 	movi	r3,1
10101758:	003ff106 	br	10101720 <__alt_data_end+0xfffe1720>

1010175c <__udivsi3>:
1010175c:	200d883a 	mov	r6,r4
10101760:	2900152e 	bgeu	r5,r4,101017b8 <__udivsi3+0x5c>
10101764:	28001416 	blt	r5,zero,101017b8 <__udivsi3+0x5c>
10101768:	00800804 	movi	r2,32
1010176c:	00c00044 	movi	r3,1
10101770:	00000206 	br	1010177c <__udivsi3+0x20>
10101774:	10000e26 	beq	r2,zero,101017b0 <__udivsi3+0x54>
10101778:	28000516 	blt	r5,zero,10101790 <__udivsi3+0x34>
1010177c:	294b883a 	add	r5,r5,r5
10101780:	10bfffc4 	addi	r2,r2,-1
10101784:	18c7883a 	add	r3,r3,r3
10101788:	293ffa36 	bltu	r5,r4,10101774 <__alt_data_end+0xfffe1774>
1010178c:	18000826 	beq	r3,zero,101017b0 <__udivsi3+0x54>
10101790:	0005883a 	mov	r2,zero
10101794:	31400236 	bltu	r6,r5,101017a0 <__udivsi3+0x44>
10101798:	314dc83a 	sub	r6,r6,r5
1010179c:	10c4b03a 	or	r2,r2,r3
101017a0:	1806d07a 	srli	r3,r3,1
101017a4:	280ad07a 	srli	r5,r5,1
101017a8:	183ffa1e 	bne	r3,zero,10101794 <__alt_data_end+0xfffe1794>
101017ac:	f800283a 	ret
101017b0:	0005883a 	mov	r2,zero
101017b4:	f800283a 	ret
101017b8:	00c00044 	movi	r3,1
101017bc:	003ff406 	br	10101790 <__alt_data_end+0xfffe1790>

101017c0 <__umodsi3>:
101017c0:	2005883a 	mov	r2,r4
101017c4:	2900122e 	bgeu	r5,r4,10101810 <__umodsi3+0x50>
101017c8:	28001116 	blt	r5,zero,10101810 <__umodsi3+0x50>
101017cc:	01800804 	movi	r6,32
101017d0:	00c00044 	movi	r3,1
101017d4:	00000206 	br	101017e0 <__umodsi3+0x20>
101017d8:	30000c26 	beq	r6,zero,1010180c <__umodsi3+0x4c>
101017dc:	28000516 	blt	r5,zero,101017f4 <__umodsi3+0x34>
101017e0:	294b883a 	add	r5,r5,r5
101017e4:	31bfffc4 	addi	r6,r6,-1
101017e8:	18c7883a 	add	r3,r3,r3
101017ec:	293ffa36 	bltu	r5,r4,101017d8 <__alt_data_end+0xfffe17d8>
101017f0:	18000626 	beq	r3,zero,1010180c <__umodsi3+0x4c>
101017f4:	1806d07a 	srli	r3,r3,1
101017f8:	11400136 	bltu	r2,r5,10101800 <__umodsi3+0x40>
101017fc:	1145c83a 	sub	r2,r2,r5
10101800:	280ad07a 	srli	r5,r5,1
10101804:	183ffb1e 	bne	r3,zero,101017f4 <__alt_data_end+0xfffe17f4>
10101808:	f800283a 	ret
1010180c:	f800283a 	ret
10101810:	00c00044 	movi	r3,1
10101814:	003ff706 	br	101017f4 <__alt_data_end+0xfffe17f4>

10101818 <_fclose_r>:
10101818:	28003926 	beq	r5,zero,10101900 <_fclose_r+0xe8>
1010181c:	defffc04 	addi	sp,sp,-16
10101820:	dc400115 	stw	r17,4(sp)
10101824:	dc000015 	stw	r16,0(sp)
10101828:	dfc00315 	stw	ra,12(sp)
1010182c:	dc800215 	stw	r18,8(sp)
10101830:	2023883a 	mov	r17,r4
10101834:	2821883a 	mov	r16,r5
10101838:	20000226 	beq	r4,zero,10101844 <_fclose_r+0x2c>
1010183c:	20800e17 	ldw	r2,56(r4)
10101840:	10002726 	beq	r2,zero,101018e0 <_fclose_r+0xc8>
10101844:	8080030f 	ldh	r2,12(r16)
10101848:	1000071e 	bne	r2,zero,10101868 <_fclose_r+0x50>
1010184c:	0005883a 	mov	r2,zero
10101850:	dfc00317 	ldw	ra,12(sp)
10101854:	dc800217 	ldw	r18,8(sp)
10101858:	dc400117 	ldw	r17,4(sp)
1010185c:	dc000017 	ldw	r16,0(sp)
10101860:	dec00404 	addi	sp,sp,16
10101864:	f800283a 	ret
10101868:	800b883a 	mov	r5,r16
1010186c:	8809883a 	mov	r4,r17
10101870:	010191c0 	call	1010191c <__sflush_r>
10101874:	1025883a 	mov	r18,r2
10101878:	80800b17 	ldw	r2,44(r16)
1010187c:	10000426 	beq	r2,zero,10101890 <_fclose_r+0x78>
10101880:	81400717 	ldw	r5,28(r16)
10101884:	8809883a 	mov	r4,r17
10101888:	103ee83a 	callr	r2
1010188c:	10001616 	blt	r2,zero,101018e8 <_fclose_r+0xd0>
10101890:	8080030b 	ldhu	r2,12(r16)
10101894:	1080200c 	andi	r2,r2,128
10101898:	1000151e 	bne	r2,zero,101018f0 <_fclose_r+0xd8>
1010189c:	81400c17 	ldw	r5,48(r16)
101018a0:	28000526 	beq	r5,zero,101018b8 <_fclose_r+0xa0>
101018a4:	80801004 	addi	r2,r16,64
101018a8:	28800226 	beq	r5,r2,101018b4 <_fclose_r+0x9c>
101018ac:	8809883a 	mov	r4,r17
101018b0:	01021e00 	call	101021e0 <_free_r>
101018b4:	80000c15 	stw	zero,48(r16)
101018b8:	81401117 	ldw	r5,68(r16)
101018bc:	28000326 	beq	r5,zero,101018cc <_fclose_r+0xb4>
101018c0:	8809883a 	mov	r4,r17
101018c4:	01021e00 	call	101021e0 <_free_r>
101018c8:	80001115 	stw	zero,68(r16)
101018cc:	0101f240 	call	10101f24 <__sfp_lock_acquire>
101018d0:	8000030d 	sth	zero,12(r16)
101018d4:	0101f280 	call	10101f28 <__sfp_lock_release>
101018d8:	9005883a 	mov	r2,r18
101018dc:	003fdc06 	br	10101850 <__alt_data_end+0xfffe1850>
101018e0:	0101f140 	call	10101f14 <__sinit>
101018e4:	003fd706 	br	10101844 <__alt_data_end+0xfffe1844>
101018e8:	04bfffc4 	movi	r18,-1
101018ec:	003fe806 	br	10101890 <__alt_data_end+0xfffe1890>
101018f0:	81400417 	ldw	r5,16(r16)
101018f4:	8809883a 	mov	r4,r17
101018f8:	01021e00 	call	101021e0 <_free_r>
101018fc:	003fe706 	br	1010189c <__alt_data_end+0xfffe189c>
10101900:	0005883a 	mov	r2,zero
10101904:	f800283a 	ret

10101908 <fclose>:
10101908:	00840474 	movhi	r2,4113
1010190c:	108d1004 	addi	r2,r2,13376
10101910:	200b883a 	mov	r5,r4
10101914:	11000017 	ldw	r4,0(r2)
10101918:	01018181 	jmpi	10101818 <_fclose_r>

1010191c <__sflush_r>:
1010191c:	2880030b 	ldhu	r2,12(r5)
10101920:	defffb04 	addi	sp,sp,-20
10101924:	dcc00315 	stw	r19,12(sp)
10101928:	dc400115 	stw	r17,4(sp)
1010192c:	dfc00415 	stw	ra,16(sp)
10101930:	dc800215 	stw	r18,8(sp)
10101934:	dc000015 	stw	r16,0(sp)
10101938:	10c0020c 	andi	r3,r2,8
1010193c:	2823883a 	mov	r17,r5
10101940:	2027883a 	mov	r19,r4
10101944:	1800311e 	bne	r3,zero,10101a0c <__sflush_r+0xf0>
10101948:	28c00117 	ldw	r3,4(r5)
1010194c:	10820014 	ori	r2,r2,2048
10101950:	2880030d 	sth	r2,12(r5)
10101954:	00c04b0e 	bge	zero,r3,10101a84 <__sflush_r+0x168>
10101958:	8a000a17 	ldw	r8,40(r17)
1010195c:	40002326 	beq	r8,zero,101019ec <__sflush_r+0xd0>
10101960:	9c000017 	ldw	r16,0(r19)
10101964:	10c4000c 	andi	r3,r2,4096
10101968:	98000015 	stw	zero,0(r19)
1010196c:	18004826 	beq	r3,zero,10101a90 <__sflush_r+0x174>
10101970:	89801417 	ldw	r6,80(r17)
10101974:	10c0010c 	andi	r3,r2,4
10101978:	18000626 	beq	r3,zero,10101994 <__sflush_r+0x78>
1010197c:	88c00117 	ldw	r3,4(r17)
10101980:	88800c17 	ldw	r2,48(r17)
10101984:	30cdc83a 	sub	r6,r6,r3
10101988:	10000226 	beq	r2,zero,10101994 <__sflush_r+0x78>
1010198c:	88800f17 	ldw	r2,60(r17)
10101990:	308dc83a 	sub	r6,r6,r2
10101994:	89400717 	ldw	r5,28(r17)
10101998:	000f883a 	mov	r7,zero
1010199c:	9809883a 	mov	r4,r19
101019a0:	403ee83a 	callr	r8
101019a4:	00ffffc4 	movi	r3,-1
101019a8:	10c04426 	beq	r2,r3,10101abc <__sflush_r+0x1a0>
101019ac:	88c0030b 	ldhu	r3,12(r17)
101019b0:	89000417 	ldw	r4,16(r17)
101019b4:	88000115 	stw	zero,4(r17)
101019b8:	197dffcc 	andi	r5,r3,63487
101019bc:	8940030d 	sth	r5,12(r17)
101019c0:	89000015 	stw	r4,0(r17)
101019c4:	18c4000c 	andi	r3,r3,4096
101019c8:	18002c1e 	bne	r3,zero,10101a7c <__sflush_r+0x160>
101019cc:	89400c17 	ldw	r5,48(r17)
101019d0:	9c000015 	stw	r16,0(r19)
101019d4:	28000526 	beq	r5,zero,101019ec <__sflush_r+0xd0>
101019d8:	88801004 	addi	r2,r17,64
101019dc:	28800226 	beq	r5,r2,101019e8 <__sflush_r+0xcc>
101019e0:	9809883a 	mov	r4,r19
101019e4:	01021e00 	call	101021e0 <_free_r>
101019e8:	88000c15 	stw	zero,48(r17)
101019ec:	0005883a 	mov	r2,zero
101019f0:	dfc00417 	ldw	ra,16(sp)
101019f4:	dcc00317 	ldw	r19,12(sp)
101019f8:	dc800217 	ldw	r18,8(sp)
101019fc:	dc400117 	ldw	r17,4(sp)
10101a00:	dc000017 	ldw	r16,0(sp)
10101a04:	dec00504 	addi	sp,sp,20
10101a08:	f800283a 	ret
10101a0c:	2c800417 	ldw	r18,16(r5)
10101a10:	903ff626 	beq	r18,zero,101019ec <__alt_data_end+0xfffe19ec>
10101a14:	2c000017 	ldw	r16,0(r5)
10101a18:	108000cc 	andi	r2,r2,3
10101a1c:	2c800015 	stw	r18,0(r5)
10101a20:	84a1c83a 	sub	r16,r16,r18
10101a24:	1000131e 	bne	r2,zero,10101a74 <__sflush_r+0x158>
10101a28:	28800517 	ldw	r2,20(r5)
10101a2c:	88800215 	stw	r2,8(r17)
10101a30:	04000316 	blt	zero,r16,10101a40 <__sflush_r+0x124>
10101a34:	003fed06 	br	101019ec <__alt_data_end+0xfffe19ec>
10101a38:	90a5883a 	add	r18,r18,r2
10101a3c:	043feb0e 	bge	zero,r16,101019ec <__alt_data_end+0xfffe19ec>
10101a40:	88800917 	ldw	r2,36(r17)
10101a44:	89400717 	ldw	r5,28(r17)
10101a48:	800f883a 	mov	r7,r16
10101a4c:	900d883a 	mov	r6,r18
10101a50:	9809883a 	mov	r4,r19
10101a54:	103ee83a 	callr	r2
10101a58:	80a1c83a 	sub	r16,r16,r2
10101a5c:	00bff616 	blt	zero,r2,10101a38 <__alt_data_end+0xfffe1a38>
10101a60:	88c0030b 	ldhu	r3,12(r17)
10101a64:	00bfffc4 	movi	r2,-1
10101a68:	18c01014 	ori	r3,r3,64
10101a6c:	88c0030d 	sth	r3,12(r17)
10101a70:	003fdf06 	br	101019f0 <__alt_data_end+0xfffe19f0>
10101a74:	0005883a 	mov	r2,zero
10101a78:	003fec06 	br	10101a2c <__alt_data_end+0xfffe1a2c>
10101a7c:	88801415 	stw	r2,80(r17)
10101a80:	003fd206 	br	101019cc <__alt_data_end+0xfffe19cc>
10101a84:	28c00f17 	ldw	r3,60(r5)
10101a88:	00ffb316 	blt	zero,r3,10101958 <__alt_data_end+0xfffe1958>
10101a8c:	003fd706 	br	101019ec <__alt_data_end+0xfffe19ec>
10101a90:	89400717 	ldw	r5,28(r17)
10101a94:	000d883a 	mov	r6,zero
10101a98:	01c00044 	movi	r7,1
10101a9c:	9809883a 	mov	r4,r19
10101aa0:	403ee83a 	callr	r8
10101aa4:	100d883a 	mov	r6,r2
10101aa8:	00bfffc4 	movi	r2,-1
10101aac:	30801426 	beq	r6,r2,10101b00 <__sflush_r+0x1e4>
10101ab0:	8880030b 	ldhu	r2,12(r17)
10101ab4:	8a000a17 	ldw	r8,40(r17)
10101ab8:	003fae06 	br	10101974 <__alt_data_end+0xfffe1974>
10101abc:	98c00017 	ldw	r3,0(r19)
10101ac0:	183fba26 	beq	r3,zero,101019ac <__alt_data_end+0xfffe19ac>
10101ac4:	01000744 	movi	r4,29
10101ac8:	19000626 	beq	r3,r4,10101ae4 <__sflush_r+0x1c8>
10101acc:	01000584 	movi	r4,22
10101ad0:	19000426 	beq	r3,r4,10101ae4 <__sflush_r+0x1c8>
10101ad4:	88c0030b 	ldhu	r3,12(r17)
10101ad8:	18c01014 	ori	r3,r3,64
10101adc:	88c0030d 	sth	r3,12(r17)
10101ae0:	003fc306 	br	101019f0 <__alt_data_end+0xfffe19f0>
10101ae4:	8880030b 	ldhu	r2,12(r17)
10101ae8:	88c00417 	ldw	r3,16(r17)
10101aec:	88000115 	stw	zero,4(r17)
10101af0:	10bdffcc 	andi	r2,r2,63487
10101af4:	8880030d 	sth	r2,12(r17)
10101af8:	88c00015 	stw	r3,0(r17)
10101afc:	003fb306 	br	101019cc <__alt_data_end+0xfffe19cc>
10101b00:	98800017 	ldw	r2,0(r19)
10101b04:	103fea26 	beq	r2,zero,10101ab0 <__alt_data_end+0xfffe1ab0>
10101b08:	00c00744 	movi	r3,29
10101b0c:	10c00226 	beq	r2,r3,10101b18 <__sflush_r+0x1fc>
10101b10:	00c00584 	movi	r3,22
10101b14:	10c0031e 	bne	r2,r3,10101b24 <__sflush_r+0x208>
10101b18:	9c000015 	stw	r16,0(r19)
10101b1c:	0005883a 	mov	r2,zero
10101b20:	003fb306 	br	101019f0 <__alt_data_end+0xfffe19f0>
10101b24:	88c0030b 	ldhu	r3,12(r17)
10101b28:	3005883a 	mov	r2,r6
10101b2c:	18c01014 	ori	r3,r3,64
10101b30:	88c0030d 	sth	r3,12(r17)
10101b34:	003fae06 	br	101019f0 <__alt_data_end+0xfffe19f0>

10101b38 <_fflush_r>:
10101b38:	defffd04 	addi	sp,sp,-12
10101b3c:	dc000115 	stw	r16,4(sp)
10101b40:	dfc00215 	stw	ra,8(sp)
10101b44:	2021883a 	mov	r16,r4
10101b48:	20000226 	beq	r4,zero,10101b54 <_fflush_r+0x1c>
10101b4c:	20800e17 	ldw	r2,56(r4)
10101b50:	10000c26 	beq	r2,zero,10101b84 <_fflush_r+0x4c>
10101b54:	2880030f 	ldh	r2,12(r5)
10101b58:	1000051e 	bne	r2,zero,10101b70 <_fflush_r+0x38>
10101b5c:	0005883a 	mov	r2,zero
10101b60:	dfc00217 	ldw	ra,8(sp)
10101b64:	dc000117 	ldw	r16,4(sp)
10101b68:	dec00304 	addi	sp,sp,12
10101b6c:	f800283a 	ret
10101b70:	8009883a 	mov	r4,r16
10101b74:	dfc00217 	ldw	ra,8(sp)
10101b78:	dc000117 	ldw	r16,4(sp)
10101b7c:	dec00304 	addi	sp,sp,12
10101b80:	010191c1 	jmpi	1010191c <__sflush_r>
10101b84:	d9400015 	stw	r5,0(sp)
10101b88:	0101f140 	call	10101f14 <__sinit>
10101b8c:	d9400017 	ldw	r5,0(sp)
10101b90:	003ff006 	br	10101b54 <__alt_data_end+0xfffe1b54>

10101b94 <fflush>:
10101b94:	20000526 	beq	r4,zero,10101bac <fflush+0x18>
10101b98:	00840474 	movhi	r2,4113
10101b9c:	108d1004 	addi	r2,r2,13376
10101ba0:	200b883a 	mov	r5,r4
10101ba4:	11000017 	ldw	r4,0(r2)
10101ba8:	0101b381 	jmpi	10101b38 <_fflush_r>
10101bac:	00840474 	movhi	r2,4113
10101bb0:	108d0f04 	addi	r2,r2,13372
10101bb4:	11000017 	ldw	r4,0(r2)
10101bb8:	01440434 	movhi	r5,4112
10101bbc:	2946ce04 	addi	r5,r5,6968
10101bc0:	0102a901 	jmpi	10102a90 <_fwalk_reent>

10101bc4 <__fp_unlock>:
10101bc4:	0005883a 	mov	r2,zero
10101bc8:	f800283a 	ret

10101bcc <_cleanup_r>:
10101bcc:	01440434 	movhi	r5,4112
10101bd0:	29460604 	addi	r5,r5,6168
10101bd4:	0102a901 	jmpi	10102a90 <_fwalk_reent>

10101bd8 <__sinit.part.1>:
10101bd8:	defff704 	addi	sp,sp,-36
10101bdc:	00c40434 	movhi	r3,4112
10101be0:	dfc00815 	stw	ra,32(sp)
10101be4:	ddc00715 	stw	r23,28(sp)
10101be8:	dd800615 	stw	r22,24(sp)
10101bec:	dd400515 	stw	r21,20(sp)
10101bf0:	dd000415 	stw	r20,16(sp)
10101bf4:	dcc00315 	stw	r19,12(sp)
10101bf8:	dc800215 	stw	r18,8(sp)
10101bfc:	dc400115 	stw	r17,4(sp)
10101c00:	dc000015 	stw	r16,0(sp)
10101c04:	18c6f304 	addi	r3,r3,7116
10101c08:	24000117 	ldw	r16,4(r4)
10101c0c:	20c00f15 	stw	r3,60(r4)
10101c10:	2080bb04 	addi	r2,r4,748
10101c14:	00c000c4 	movi	r3,3
10101c18:	20c0b915 	stw	r3,740(r4)
10101c1c:	2080ba15 	stw	r2,744(r4)
10101c20:	2000b815 	stw	zero,736(r4)
10101c24:	05c00204 	movi	r23,8
10101c28:	00800104 	movi	r2,4
10101c2c:	2025883a 	mov	r18,r4
10101c30:	b80d883a 	mov	r6,r23
10101c34:	81001704 	addi	r4,r16,92
10101c38:	000b883a 	mov	r5,zero
10101c3c:	80000015 	stw	zero,0(r16)
10101c40:	80000115 	stw	zero,4(r16)
10101c44:	80000215 	stw	zero,8(r16)
10101c48:	8080030d 	sth	r2,12(r16)
10101c4c:	80001915 	stw	zero,100(r16)
10101c50:	8000038d 	sth	zero,14(r16)
10101c54:	80000415 	stw	zero,16(r16)
10101c58:	80000515 	stw	zero,20(r16)
10101c5c:	80000615 	stw	zero,24(r16)
10101c60:	010351c0 	call	1010351c <memset>
10101c64:	05840434 	movhi	r22,4112
10101c68:	94400217 	ldw	r17,8(r18)
10101c6c:	05440434 	movhi	r21,4112
10101c70:	05040434 	movhi	r20,4112
10101c74:	04c40434 	movhi	r19,4112
10101c78:	b58e5504 	addi	r22,r22,14676
10101c7c:	ad4e6c04 	addi	r21,r21,14768
10101c80:	a50e8b04 	addi	r20,r20,14892
10101c84:	9ccea204 	addi	r19,r19,14984
10101c88:	85800815 	stw	r22,32(r16)
10101c8c:	85400915 	stw	r21,36(r16)
10101c90:	85000a15 	stw	r20,40(r16)
10101c94:	84c00b15 	stw	r19,44(r16)
10101c98:	84000715 	stw	r16,28(r16)
10101c9c:	00800284 	movi	r2,10
10101ca0:	8880030d 	sth	r2,12(r17)
10101ca4:	00800044 	movi	r2,1
10101ca8:	b80d883a 	mov	r6,r23
10101cac:	89001704 	addi	r4,r17,92
10101cb0:	000b883a 	mov	r5,zero
10101cb4:	88000015 	stw	zero,0(r17)
10101cb8:	88000115 	stw	zero,4(r17)
10101cbc:	88000215 	stw	zero,8(r17)
10101cc0:	88001915 	stw	zero,100(r17)
10101cc4:	8880038d 	sth	r2,14(r17)
10101cc8:	88000415 	stw	zero,16(r17)
10101ccc:	88000515 	stw	zero,20(r17)
10101cd0:	88000615 	stw	zero,24(r17)
10101cd4:	010351c0 	call	1010351c <memset>
10101cd8:	94000317 	ldw	r16,12(r18)
10101cdc:	00800484 	movi	r2,18
10101ce0:	8c400715 	stw	r17,28(r17)
10101ce4:	8d800815 	stw	r22,32(r17)
10101ce8:	8d400915 	stw	r21,36(r17)
10101cec:	8d000a15 	stw	r20,40(r17)
10101cf0:	8cc00b15 	stw	r19,44(r17)
10101cf4:	8080030d 	sth	r2,12(r16)
10101cf8:	00800084 	movi	r2,2
10101cfc:	80000015 	stw	zero,0(r16)
10101d00:	80000115 	stw	zero,4(r16)
10101d04:	80000215 	stw	zero,8(r16)
10101d08:	80001915 	stw	zero,100(r16)
10101d0c:	8080038d 	sth	r2,14(r16)
10101d10:	80000415 	stw	zero,16(r16)
10101d14:	80000515 	stw	zero,20(r16)
10101d18:	80000615 	stw	zero,24(r16)
10101d1c:	b80d883a 	mov	r6,r23
10101d20:	000b883a 	mov	r5,zero
10101d24:	81001704 	addi	r4,r16,92
10101d28:	010351c0 	call	1010351c <memset>
10101d2c:	00800044 	movi	r2,1
10101d30:	84000715 	stw	r16,28(r16)
10101d34:	85800815 	stw	r22,32(r16)
10101d38:	85400915 	stw	r21,36(r16)
10101d3c:	85000a15 	stw	r20,40(r16)
10101d40:	84c00b15 	stw	r19,44(r16)
10101d44:	90800e15 	stw	r2,56(r18)
10101d48:	dfc00817 	ldw	ra,32(sp)
10101d4c:	ddc00717 	ldw	r23,28(sp)
10101d50:	dd800617 	ldw	r22,24(sp)
10101d54:	dd400517 	ldw	r21,20(sp)
10101d58:	dd000417 	ldw	r20,16(sp)
10101d5c:	dcc00317 	ldw	r19,12(sp)
10101d60:	dc800217 	ldw	r18,8(sp)
10101d64:	dc400117 	ldw	r17,4(sp)
10101d68:	dc000017 	ldw	r16,0(sp)
10101d6c:	dec00904 	addi	sp,sp,36
10101d70:	f800283a 	ret

10101d74 <__fp_lock>:
10101d74:	0005883a 	mov	r2,zero
10101d78:	f800283a 	ret

10101d7c <__sfmoreglue>:
10101d7c:	defffc04 	addi	sp,sp,-16
10101d80:	dc400115 	stw	r17,4(sp)
10101d84:	2c7fffc4 	addi	r17,r5,-1
10101d88:	8c401a24 	muli	r17,r17,104
10101d8c:	dc800215 	stw	r18,8(sp)
10101d90:	2825883a 	mov	r18,r5
10101d94:	89401d04 	addi	r5,r17,116
10101d98:	dc000015 	stw	r16,0(sp)
10101d9c:	dfc00315 	stw	ra,12(sp)
10101da0:	0102d100 	call	10102d10 <_malloc_r>
10101da4:	1021883a 	mov	r16,r2
10101da8:	10000726 	beq	r2,zero,10101dc8 <__sfmoreglue+0x4c>
10101dac:	11000304 	addi	r4,r2,12
10101db0:	10000015 	stw	zero,0(r2)
10101db4:	14800115 	stw	r18,4(r2)
10101db8:	11000215 	stw	r4,8(r2)
10101dbc:	89801a04 	addi	r6,r17,104
10101dc0:	000b883a 	mov	r5,zero
10101dc4:	010351c0 	call	1010351c <memset>
10101dc8:	8005883a 	mov	r2,r16
10101dcc:	dfc00317 	ldw	ra,12(sp)
10101dd0:	dc800217 	ldw	r18,8(sp)
10101dd4:	dc400117 	ldw	r17,4(sp)
10101dd8:	dc000017 	ldw	r16,0(sp)
10101ddc:	dec00404 	addi	sp,sp,16
10101de0:	f800283a 	ret

10101de4 <__sfp>:
10101de4:	defffb04 	addi	sp,sp,-20
10101de8:	dc000015 	stw	r16,0(sp)
10101dec:	04040474 	movhi	r16,4113
10101df0:	840d0f04 	addi	r16,r16,13372
10101df4:	dcc00315 	stw	r19,12(sp)
10101df8:	2027883a 	mov	r19,r4
10101dfc:	81000017 	ldw	r4,0(r16)
10101e00:	dfc00415 	stw	ra,16(sp)
10101e04:	dc800215 	stw	r18,8(sp)
10101e08:	20800e17 	ldw	r2,56(r4)
10101e0c:	dc400115 	stw	r17,4(sp)
10101e10:	1000021e 	bne	r2,zero,10101e1c <__sfp+0x38>
10101e14:	0101bd80 	call	10101bd8 <__sinit.part.1>
10101e18:	81000017 	ldw	r4,0(r16)
10101e1c:	2480b804 	addi	r18,r4,736
10101e20:	047fffc4 	movi	r17,-1
10101e24:	91000117 	ldw	r4,4(r18)
10101e28:	94000217 	ldw	r16,8(r18)
10101e2c:	213fffc4 	addi	r4,r4,-1
10101e30:	20000a16 	blt	r4,zero,10101e5c <__sfp+0x78>
10101e34:	8080030f 	ldh	r2,12(r16)
10101e38:	10000c26 	beq	r2,zero,10101e6c <__sfp+0x88>
10101e3c:	80c01d04 	addi	r3,r16,116
10101e40:	00000206 	br	10101e4c <__sfp+0x68>
10101e44:	18bfe60f 	ldh	r2,-104(r3)
10101e48:	10000826 	beq	r2,zero,10101e6c <__sfp+0x88>
10101e4c:	213fffc4 	addi	r4,r4,-1
10101e50:	1c3ffd04 	addi	r16,r3,-12
10101e54:	18c01a04 	addi	r3,r3,104
10101e58:	247ffa1e 	bne	r4,r17,10101e44 <__alt_data_end+0xfffe1e44>
10101e5c:	90800017 	ldw	r2,0(r18)
10101e60:	10001d26 	beq	r2,zero,10101ed8 <__sfp+0xf4>
10101e64:	1025883a 	mov	r18,r2
10101e68:	003fee06 	br	10101e24 <__alt_data_end+0xfffe1e24>
10101e6c:	00bfffc4 	movi	r2,-1
10101e70:	8080038d 	sth	r2,14(r16)
10101e74:	00800044 	movi	r2,1
10101e78:	8080030d 	sth	r2,12(r16)
10101e7c:	80001915 	stw	zero,100(r16)
10101e80:	80000015 	stw	zero,0(r16)
10101e84:	80000215 	stw	zero,8(r16)
10101e88:	80000115 	stw	zero,4(r16)
10101e8c:	80000415 	stw	zero,16(r16)
10101e90:	80000515 	stw	zero,20(r16)
10101e94:	80000615 	stw	zero,24(r16)
10101e98:	01800204 	movi	r6,8
10101e9c:	000b883a 	mov	r5,zero
10101ea0:	81001704 	addi	r4,r16,92
10101ea4:	010351c0 	call	1010351c <memset>
10101ea8:	8005883a 	mov	r2,r16
10101eac:	80000c15 	stw	zero,48(r16)
10101eb0:	80000d15 	stw	zero,52(r16)
10101eb4:	80001115 	stw	zero,68(r16)
10101eb8:	80001215 	stw	zero,72(r16)
10101ebc:	dfc00417 	ldw	ra,16(sp)
10101ec0:	dcc00317 	ldw	r19,12(sp)
10101ec4:	dc800217 	ldw	r18,8(sp)
10101ec8:	dc400117 	ldw	r17,4(sp)
10101ecc:	dc000017 	ldw	r16,0(sp)
10101ed0:	dec00504 	addi	sp,sp,20
10101ed4:	f800283a 	ret
10101ed8:	01400104 	movi	r5,4
10101edc:	9809883a 	mov	r4,r19
10101ee0:	0101d7c0 	call	10101d7c <__sfmoreglue>
10101ee4:	90800015 	stw	r2,0(r18)
10101ee8:	103fde1e 	bne	r2,zero,10101e64 <__alt_data_end+0xfffe1e64>
10101eec:	00800304 	movi	r2,12
10101ef0:	98800015 	stw	r2,0(r19)
10101ef4:	0005883a 	mov	r2,zero
10101ef8:	003ff006 	br	10101ebc <__alt_data_end+0xfffe1ebc>

10101efc <_cleanup>:
10101efc:	00840474 	movhi	r2,4113
10101f00:	108d0f04 	addi	r2,r2,13372
10101f04:	11000017 	ldw	r4,0(r2)
10101f08:	01440434 	movhi	r5,4112
10101f0c:	29460604 	addi	r5,r5,6168
10101f10:	0102a901 	jmpi	10102a90 <_fwalk_reent>

10101f14 <__sinit>:
10101f14:	20800e17 	ldw	r2,56(r4)
10101f18:	10000126 	beq	r2,zero,10101f20 <__sinit+0xc>
10101f1c:	f800283a 	ret
10101f20:	0101bd81 	jmpi	10101bd8 <__sinit.part.1>

10101f24 <__sfp_lock_acquire>:
10101f24:	f800283a 	ret

10101f28 <__sfp_lock_release>:
10101f28:	f800283a 	ret

10101f2c <__sinit_lock_acquire>:
10101f2c:	f800283a 	ret

10101f30 <__sinit_lock_release>:
10101f30:	f800283a 	ret

10101f34 <__fp_lock_all>:
10101f34:	00840474 	movhi	r2,4113
10101f38:	108d1004 	addi	r2,r2,13376
10101f3c:	11000017 	ldw	r4,0(r2)
10101f40:	01440434 	movhi	r5,4112
10101f44:	29475d04 	addi	r5,r5,7540
10101f48:	01029cc1 	jmpi	101029cc <_fwalk>

10101f4c <__fp_unlock_all>:
10101f4c:	00840474 	movhi	r2,4113
10101f50:	108d1004 	addi	r2,r2,13376
10101f54:	11000017 	ldw	r4,0(r2)
10101f58:	01440434 	movhi	r5,4112
10101f5c:	2946f104 	addi	r5,r5,7108
10101f60:	01029cc1 	jmpi	101029cc <_fwalk>

10101f64 <_fopen_r>:
10101f64:	defffa04 	addi	sp,sp,-24
10101f68:	3005883a 	mov	r2,r6
10101f6c:	dcc00415 	stw	r19,16(sp)
10101f70:	d80d883a 	mov	r6,sp
10101f74:	2827883a 	mov	r19,r5
10101f78:	100b883a 	mov	r5,r2
10101f7c:	dc800315 	stw	r18,12(sp)
10101f80:	dfc00515 	stw	ra,20(sp)
10101f84:	dc400215 	stw	r17,8(sp)
10101f88:	dc000115 	stw	r16,4(sp)
10101f8c:	2025883a 	mov	r18,r4
10101f90:	01077f00 	call	101077f0 <__sflags>
10101f94:	10002726 	beq	r2,zero,10102034 <_fopen_r+0xd0>
10101f98:	9009883a 	mov	r4,r18
10101f9c:	1023883a 	mov	r17,r2
10101fa0:	0101de40 	call	10101de4 <__sfp>
10101fa4:	1021883a 	mov	r16,r2
10101fa8:	10002226 	beq	r2,zero,10102034 <_fopen_r+0xd0>
10101fac:	d9800017 	ldw	r6,0(sp)
10101fb0:	01c06d84 	movi	r7,438
10101fb4:	980b883a 	mov	r5,r19
10101fb8:	9009883a 	mov	r4,r18
10101fbc:	01036440 	call	10103644 <_open_r>
10101fc0:	10001916 	blt	r2,zero,10102028 <_fopen_r+0xc4>
10101fc4:	8080038d 	sth	r2,14(r16)
10101fc8:	00840434 	movhi	r2,4112
10101fcc:	108e5504 	addi	r2,r2,14676
10101fd0:	80800815 	stw	r2,32(r16)
10101fd4:	00840434 	movhi	r2,4112
10101fd8:	108e6c04 	addi	r2,r2,14768
10101fdc:	80800915 	stw	r2,36(r16)
10101fe0:	00840434 	movhi	r2,4112
10101fe4:	108e8b04 	addi	r2,r2,14892
10101fe8:	80800a15 	stw	r2,40(r16)
10101fec:	00840434 	movhi	r2,4112
10101ff0:	108ea204 	addi	r2,r2,14984
10101ff4:	8440030d 	sth	r17,12(r16)
10101ff8:	84000715 	stw	r16,28(r16)
10101ffc:	80800b15 	stw	r2,44(r16)
10102000:	8c40400c 	andi	r17,r17,256
10102004:	88000d1e 	bne	r17,zero,1010203c <_fopen_r+0xd8>
10102008:	8005883a 	mov	r2,r16
1010200c:	dfc00517 	ldw	ra,20(sp)
10102010:	dcc00417 	ldw	r19,16(sp)
10102014:	dc800317 	ldw	r18,12(sp)
10102018:	dc400217 	ldw	r17,8(sp)
1010201c:	dc000117 	ldw	r16,4(sp)
10102020:	dec00604 	addi	sp,sp,24
10102024:	f800283a 	ret
10102028:	0101f240 	call	10101f24 <__sfp_lock_acquire>
1010202c:	8000030d 	sth	zero,12(r16)
10102030:	0101f280 	call	10101f28 <__sfp_lock_release>
10102034:	0005883a 	mov	r2,zero
10102038:	003ff406 	br	1010200c <__alt_data_end+0xfffe200c>
1010203c:	01c00084 	movi	r7,2
10102040:	000d883a 	mov	r6,zero
10102044:	800b883a 	mov	r5,r16
10102048:	9009883a 	mov	r4,r18
1010204c:	01024f00 	call	101024f0 <_fseek_r>
10102050:	8005883a 	mov	r2,r16
10102054:	003fed06 	br	1010200c <__alt_data_end+0xfffe200c>

10102058 <fopen>:
10102058:	00840474 	movhi	r2,4113
1010205c:	108d1004 	addi	r2,r2,13376
10102060:	280d883a 	mov	r6,r5
10102064:	200b883a 	mov	r5,r4
10102068:	11000017 	ldw	r4,0(r2)
1010206c:	0101f641 	jmpi	10101f64 <_fopen_r>

10102070 <_fprintf_r>:
10102070:	defffe04 	addi	sp,sp,-8
10102074:	2809883a 	mov	r4,r5
10102078:	300b883a 	mov	r5,r6
1010207c:	dfc00015 	stw	ra,0(sp)
10102080:	d9c00115 	stw	r7,4(sp)
10102084:	d9800104 	addi	r6,sp,4
10102088:	0105c880 	call	10105c88 <__vfprintf_internal>
1010208c:	dfc00017 	ldw	ra,0(sp)
10102090:	dec00204 	addi	sp,sp,8
10102094:	f800283a 	ret

10102098 <fprintf>:
10102098:	defffd04 	addi	sp,sp,-12
1010209c:	dfc00015 	stw	ra,0(sp)
101020a0:	d9800115 	stw	r6,4(sp)
101020a4:	d9c00215 	stw	r7,8(sp)
101020a8:	d9800104 	addi	r6,sp,4
101020ac:	0105c880 	call	10105c88 <__vfprintf_internal>
101020b0:	dfc00017 	ldw	ra,0(sp)
101020b4:	dec00304 	addi	sp,sp,12
101020b8:	f800283a 	ret

101020bc <_malloc_trim_r>:
101020bc:	defffb04 	addi	sp,sp,-20
101020c0:	dcc00315 	stw	r19,12(sp)
101020c4:	04c40474 	movhi	r19,4113
101020c8:	dc800215 	stw	r18,8(sp)
101020cc:	dc400115 	stw	r17,4(sp)
101020d0:	dc000015 	stw	r16,0(sp)
101020d4:	dfc00415 	stw	ra,16(sp)
101020d8:	2821883a 	mov	r16,r5
101020dc:	9cc76304 	addi	r19,r19,7564
101020e0:	2025883a 	mov	r18,r4
101020e4:	010ed500 	call	1010ed50 <__malloc_lock>
101020e8:	98800217 	ldw	r2,8(r19)
101020ec:	14400117 	ldw	r17,4(r2)
101020f0:	00bfff04 	movi	r2,-4
101020f4:	88a2703a 	and	r17,r17,r2
101020f8:	8c21c83a 	sub	r16,r17,r16
101020fc:	8403fbc4 	addi	r16,r16,4079
10102100:	8020d33a 	srli	r16,r16,12
10102104:	0083ffc4 	movi	r2,4095
10102108:	843fffc4 	addi	r16,r16,-1
1010210c:	8020933a 	slli	r16,r16,12
10102110:	1400060e 	bge	r2,r16,1010212c <_malloc_trim_r+0x70>
10102114:	000b883a 	mov	r5,zero
10102118:	9009883a 	mov	r4,r18
1010211c:	01039000 	call	10103900 <_sbrk_r>
10102120:	98c00217 	ldw	r3,8(r19)
10102124:	1c47883a 	add	r3,r3,r17
10102128:	10c00a26 	beq	r2,r3,10102154 <_malloc_trim_r+0x98>
1010212c:	9009883a 	mov	r4,r18
10102130:	010ed740 	call	1010ed74 <__malloc_unlock>
10102134:	0005883a 	mov	r2,zero
10102138:	dfc00417 	ldw	ra,16(sp)
1010213c:	dcc00317 	ldw	r19,12(sp)
10102140:	dc800217 	ldw	r18,8(sp)
10102144:	dc400117 	ldw	r17,4(sp)
10102148:	dc000017 	ldw	r16,0(sp)
1010214c:	dec00504 	addi	sp,sp,20
10102150:	f800283a 	ret
10102154:	040bc83a 	sub	r5,zero,r16
10102158:	9009883a 	mov	r4,r18
1010215c:	01039000 	call	10103900 <_sbrk_r>
10102160:	00ffffc4 	movi	r3,-1
10102164:	10c00d26 	beq	r2,r3,1010219c <_malloc_trim_r+0xe0>
10102168:	00c40474 	movhi	r3,4113
1010216c:	18d41604 	addi	r3,r3,20568
10102170:	18800017 	ldw	r2,0(r3)
10102174:	99000217 	ldw	r4,8(r19)
10102178:	8c23c83a 	sub	r17,r17,r16
1010217c:	8c400054 	ori	r17,r17,1
10102180:	1421c83a 	sub	r16,r2,r16
10102184:	24400115 	stw	r17,4(r4)
10102188:	9009883a 	mov	r4,r18
1010218c:	1c000015 	stw	r16,0(r3)
10102190:	010ed740 	call	1010ed74 <__malloc_unlock>
10102194:	00800044 	movi	r2,1
10102198:	003fe706 	br	10102138 <__alt_data_end+0xfffe2138>
1010219c:	000b883a 	mov	r5,zero
101021a0:	9009883a 	mov	r4,r18
101021a4:	01039000 	call	10103900 <_sbrk_r>
101021a8:	99000217 	ldw	r4,8(r19)
101021ac:	014003c4 	movi	r5,15
101021b0:	1107c83a 	sub	r3,r2,r4
101021b4:	28ffdd0e 	bge	r5,r3,1010212c <__alt_data_end+0xfffe212c>
101021b8:	01440474 	movhi	r5,4113
101021bc:	294d1104 	addi	r5,r5,13380
101021c0:	29400017 	ldw	r5,0(r5)
101021c4:	18c00054 	ori	r3,r3,1
101021c8:	20c00115 	stw	r3,4(r4)
101021cc:	00c40474 	movhi	r3,4113
101021d0:	1145c83a 	sub	r2,r2,r5
101021d4:	18d41604 	addi	r3,r3,20568
101021d8:	18800015 	stw	r2,0(r3)
101021dc:	003fd306 	br	1010212c <__alt_data_end+0xfffe212c>

101021e0 <_free_r>:
101021e0:	28004126 	beq	r5,zero,101022e8 <_free_r+0x108>
101021e4:	defffd04 	addi	sp,sp,-12
101021e8:	dc400115 	stw	r17,4(sp)
101021ec:	dc000015 	stw	r16,0(sp)
101021f0:	2023883a 	mov	r17,r4
101021f4:	2821883a 	mov	r16,r5
101021f8:	dfc00215 	stw	ra,8(sp)
101021fc:	010ed500 	call	1010ed50 <__malloc_lock>
10102200:	81ffff17 	ldw	r7,-4(r16)
10102204:	00bfff84 	movi	r2,-2
10102208:	01040474 	movhi	r4,4113
1010220c:	81bffe04 	addi	r6,r16,-8
10102210:	3884703a 	and	r2,r7,r2
10102214:	21076304 	addi	r4,r4,7564
10102218:	308b883a 	add	r5,r6,r2
1010221c:	2a400117 	ldw	r9,4(r5)
10102220:	22000217 	ldw	r8,8(r4)
10102224:	00ffff04 	movi	r3,-4
10102228:	48c6703a 	and	r3,r9,r3
1010222c:	2a005726 	beq	r5,r8,1010238c <_free_r+0x1ac>
10102230:	28c00115 	stw	r3,4(r5)
10102234:	39c0004c 	andi	r7,r7,1
10102238:	3800091e 	bne	r7,zero,10102260 <_free_r+0x80>
1010223c:	823ffe17 	ldw	r8,-8(r16)
10102240:	22400204 	addi	r9,r4,8
10102244:	320dc83a 	sub	r6,r6,r8
10102248:	31c00217 	ldw	r7,8(r6)
1010224c:	1205883a 	add	r2,r2,r8
10102250:	3a406526 	beq	r7,r9,101023e8 <_free_r+0x208>
10102254:	32000317 	ldw	r8,12(r6)
10102258:	3a000315 	stw	r8,12(r7)
1010225c:	41c00215 	stw	r7,8(r8)
10102260:	28cf883a 	add	r7,r5,r3
10102264:	39c00117 	ldw	r7,4(r7)
10102268:	39c0004c 	andi	r7,r7,1
1010226c:	38003a26 	beq	r7,zero,10102358 <_free_r+0x178>
10102270:	10c00054 	ori	r3,r2,1
10102274:	30c00115 	stw	r3,4(r6)
10102278:	3087883a 	add	r3,r6,r2
1010227c:	18800015 	stw	r2,0(r3)
10102280:	00c07fc4 	movi	r3,511
10102284:	18801936 	bltu	r3,r2,101022ec <_free_r+0x10c>
10102288:	1004d0fa 	srli	r2,r2,3
1010228c:	01c00044 	movi	r7,1
10102290:	21400117 	ldw	r5,4(r4)
10102294:	10c00044 	addi	r3,r2,1
10102298:	18c7883a 	add	r3,r3,r3
1010229c:	1005d0ba 	srai	r2,r2,2
101022a0:	18c7883a 	add	r3,r3,r3
101022a4:	18c7883a 	add	r3,r3,r3
101022a8:	1907883a 	add	r3,r3,r4
101022ac:	3884983a 	sll	r2,r7,r2
101022b0:	19c00017 	ldw	r7,0(r3)
101022b4:	1a3ffe04 	addi	r8,r3,-8
101022b8:	1144b03a 	or	r2,r2,r5
101022bc:	32000315 	stw	r8,12(r6)
101022c0:	31c00215 	stw	r7,8(r6)
101022c4:	20800115 	stw	r2,4(r4)
101022c8:	19800015 	stw	r6,0(r3)
101022cc:	39800315 	stw	r6,12(r7)
101022d0:	8809883a 	mov	r4,r17
101022d4:	dfc00217 	ldw	ra,8(sp)
101022d8:	dc400117 	ldw	r17,4(sp)
101022dc:	dc000017 	ldw	r16,0(sp)
101022e0:	dec00304 	addi	sp,sp,12
101022e4:	010ed741 	jmpi	1010ed74 <__malloc_unlock>
101022e8:	f800283a 	ret
101022ec:	100ad27a 	srli	r5,r2,9
101022f0:	00c00104 	movi	r3,4
101022f4:	19404a36 	bltu	r3,r5,10102420 <_free_r+0x240>
101022f8:	100ad1ba 	srli	r5,r2,6
101022fc:	28c00e44 	addi	r3,r5,57
10102300:	18c7883a 	add	r3,r3,r3
10102304:	29400e04 	addi	r5,r5,56
10102308:	18c7883a 	add	r3,r3,r3
1010230c:	18c7883a 	add	r3,r3,r3
10102310:	1909883a 	add	r4,r3,r4
10102314:	20c00017 	ldw	r3,0(r4)
10102318:	01c40474 	movhi	r7,4113
1010231c:	213ffe04 	addi	r4,r4,-8
10102320:	39c76304 	addi	r7,r7,7564
10102324:	20c04426 	beq	r4,r3,10102438 <_free_r+0x258>
10102328:	01ffff04 	movi	r7,-4
1010232c:	19400117 	ldw	r5,4(r3)
10102330:	29ca703a 	and	r5,r5,r7
10102334:	1140022e 	bgeu	r2,r5,10102340 <_free_r+0x160>
10102338:	18c00217 	ldw	r3,8(r3)
1010233c:	20fffb1e 	bne	r4,r3,1010232c <__alt_data_end+0xfffe232c>
10102340:	19000317 	ldw	r4,12(r3)
10102344:	31000315 	stw	r4,12(r6)
10102348:	30c00215 	stw	r3,8(r6)
1010234c:	21800215 	stw	r6,8(r4)
10102350:	19800315 	stw	r6,12(r3)
10102354:	003fde06 	br	101022d0 <__alt_data_end+0xfffe22d0>
10102358:	29c00217 	ldw	r7,8(r5)
1010235c:	10c5883a 	add	r2,r2,r3
10102360:	00c40474 	movhi	r3,4113
10102364:	18c76504 	addi	r3,r3,7572
10102368:	38c03b26 	beq	r7,r3,10102458 <_free_r+0x278>
1010236c:	2a000317 	ldw	r8,12(r5)
10102370:	11400054 	ori	r5,r2,1
10102374:	3087883a 	add	r3,r6,r2
10102378:	3a000315 	stw	r8,12(r7)
1010237c:	41c00215 	stw	r7,8(r8)
10102380:	31400115 	stw	r5,4(r6)
10102384:	18800015 	stw	r2,0(r3)
10102388:	003fbd06 	br	10102280 <__alt_data_end+0xfffe2280>
1010238c:	39c0004c 	andi	r7,r7,1
10102390:	10c5883a 	add	r2,r2,r3
10102394:	3800071e 	bne	r7,zero,101023b4 <_free_r+0x1d4>
10102398:	81fffe17 	ldw	r7,-8(r16)
1010239c:	31cdc83a 	sub	r6,r6,r7
101023a0:	30c00317 	ldw	r3,12(r6)
101023a4:	31400217 	ldw	r5,8(r6)
101023a8:	11c5883a 	add	r2,r2,r7
101023ac:	28c00315 	stw	r3,12(r5)
101023b0:	19400215 	stw	r5,8(r3)
101023b4:	10c00054 	ori	r3,r2,1
101023b8:	30c00115 	stw	r3,4(r6)
101023bc:	00c40474 	movhi	r3,4113
101023c0:	18cd1204 	addi	r3,r3,13384
101023c4:	18c00017 	ldw	r3,0(r3)
101023c8:	21800215 	stw	r6,8(r4)
101023cc:	10ffc036 	bltu	r2,r3,101022d0 <__alt_data_end+0xfffe22d0>
101023d0:	00840474 	movhi	r2,4113
101023d4:	10940b04 	addi	r2,r2,20524
101023d8:	11400017 	ldw	r5,0(r2)
101023dc:	8809883a 	mov	r4,r17
101023e0:	01020bc0 	call	101020bc <_malloc_trim_r>
101023e4:	003fba06 	br	101022d0 <__alt_data_end+0xfffe22d0>
101023e8:	28c9883a 	add	r4,r5,r3
101023ec:	21000117 	ldw	r4,4(r4)
101023f0:	2100004c 	andi	r4,r4,1
101023f4:	2000391e 	bne	r4,zero,101024dc <_free_r+0x2fc>
101023f8:	29c00217 	ldw	r7,8(r5)
101023fc:	29000317 	ldw	r4,12(r5)
10102400:	1885883a 	add	r2,r3,r2
10102404:	10c00054 	ori	r3,r2,1
10102408:	39000315 	stw	r4,12(r7)
1010240c:	21c00215 	stw	r7,8(r4)
10102410:	30c00115 	stw	r3,4(r6)
10102414:	308d883a 	add	r6,r6,r2
10102418:	30800015 	stw	r2,0(r6)
1010241c:	003fac06 	br	101022d0 <__alt_data_end+0xfffe22d0>
10102420:	00c00504 	movi	r3,20
10102424:	19401536 	bltu	r3,r5,1010247c <_free_r+0x29c>
10102428:	28c01704 	addi	r3,r5,92
1010242c:	18c7883a 	add	r3,r3,r3
10102430:	294016c4 	addi	r5,r5,91
10102434:	003fb406 	br	10102308 <__alt_data_end+0xfffe2308>
10102438:	280bd0ba 	srai	r5,r5,2
1010243c:	00c00044 	movi	r3,1
10102440:	38800117 	ldw	r2,4(r7)
10102444:	194a983a 	sll	r5,r3,r5
10102448:	2007883a 	mov	r3,r4
1010244c:	2884b03a 	or	r2,r5,r2
10102450:	38800115 	stw	r2,4(r7)
10102454:	003fbb06 	br	10102344 <__alt_data_end+0xfffe2344>
10102458:	21800515 	stw	r6,20(r4)
1010245c:	21800415 	stw	r6,16(r4)
10102460:	10c00054 	ori	r3,r2,1
10102464:	31c00315 	stw	r7,12(r6)
10102468:	31c00215 	stw	r7,8(r6)
1010246c:	30c00115 	stw	r3,4(r6)
10102470:	308d883a 	add	r6,r6,r2
10102474:	30800015 	stw	r2,0(r6)
10102478:	003f9506 	br	101022d0 <__alt_data_end+0xfffe22d0>
1010247c:	00c01504 	movi	r3,84
10102480:	19400536 	bltu	r3,r5,10102498 <_free_r+0x2b8>
10102484:	100ad33a 	srli	r5,r2,12
10102488:	28c01bc4 	addi	r3,r5,111
1010248c:	18c7883a 	add	r3,r3,r3
10102490:	29401b84 	addi	r5,r5,110
10102494:	003f9c06 	br	10102308 <__alt_data_end+0xfffe2308>
10102498:	00c05504 	movi	r3,340
1010249c:	19400536 	bltu	r3,r5,101024b4 <_free_r+0x2d4>
101024a0:	100ad3fa 	srli	r5,r2,15
101024a4:	28c01e04 	addi	r3,r5,120
101024a8:	18c7883a 	add	r3,r3,r3
101024ac:	29401dc4 	addi	r5,r5,119
101024b0:	003f9506 	br	10102308 <__alt_data_end+0xfffe2308>
101024b4:	00c15504 	movi	r3,1364
101024b8:	19400536 	bltu	r3,r5,101024d0 <_free_r+0x2f0>
101024bc:	100ad4ba 	srli	r5,r2,18
101024c0:	28c01f44 	addi	r3,r5,125
101024c4:	18c7883a 	add	r3,r3,r3
101024c8:	29401f04 	addi	r5,r5,124
101024cc:	003f8e06 	br	10102308 <__alt_data_end+0xfffe2308>
101024d0:	00c03f84 	movi	r3,254
101024d4:	01401f84 	movi	r5,126
101024d8:	003f8b06 	br	10102308 <__alt_data_end+0xfffe2308>
101024dc:	10c00054 	ori	r3,r2,1
101024e0:	30c00115 	stw	r3,4(r6)
101024e4:	308d883a 	add	r6,r6,r2
101024e8:	30800015 	stw	r2,0(r6)
101024ec:	003f7806 	br	101022d0 <__alt_data_end+0xfffe22d0>

101024f0 <_fseek_r>:
101024f0:	01025101 	jmpi	10102510 <_fseeko_r>

101024f4 <fseek>:
101024f4:	00840474 	movhi	r2,4113
101024f8:	108d1004 	addi	r2,r2,13376
101024fc:	300f883a 	mov	r7,r6
10102500:	280d883a 	mov	r6,r5
10102504:	200b883a 	mov	r5,r4
10102508:	11000017 	ldw	r4,0(r2)
1010250c:	01025101 	jmpi	10102510 <_fseeko_r>

10102510 <_fseeko_r>:
10102510:	deffe804 	addi	sp,sp,-96
10102514:	dd401415 	stw	r21,80(sp)
10102518:	dc801115 	stw	r18,68(sp)
1010251c:	dc401015 	stw	r17,64(sp)
10102520:	dc000f15 	stw	r16,60(sp)
10102524:	dfc01715 	stw	ra,92(sp)
10102528:	ddc01615 	stw	r23,88(sp)
1010252c:	dd801515 	stw	r22,84(sp)
10102530:	dd001315 	stw	r20,76(sp)
10102534:	dcc01215 	stw	r19,72(sp)
10102538:	2023883a 	mov	r17,r4
1010253c:	2821883a 	mov	r16,r5
10102540:	302b883a 	mov	r21,r6
10102544:	3825883a 	mov	r18,r7
10102548:	20000226 	beq	r4,zero,10102554 <_fseeko_r+0x44>
1010254c:	20800e17 	ldw	r2,56(r4)
10102550:	10005a26 	beq	r2,zero,101026bc <_fseeko_r+0x1ac>
10102554:	8080030b 	ldhu	r2,12(r16)
10102558:	00c04204 	movi	r3,264
1010255c:	1080420c 	andi	r2,r2,264
10102560:	10c05b26 	beq	r2,r3,101026d0 <_fseeko_r+0x1c0>
10102564:	85000a17 	ldw	r20,40(r16)
10102568:	a000f626 	beq	r20,zero,10102944 <_fseeko_r+0x434>
1010256c:	00800044 	movi	r2,1
10102570:	90803e26 	beq	r18,r2,1010266c <_fseeko_r+0x15c>
10102574:	00800084 	movi	r2,2
10102578:	90801026 	beq	r18,r2,101025bc <_fseeko_r+0xac>
1010257c:	90000f26 	beq	r18,zero,101025bc <_fseeko_r+0xac>
10102580:	00800584 	movi	r2,22
10102584:	88800015 	stw	r2,0(r17)
10102588:	04ffffc4 	movi	r19,-1
1010258c:	9805883a 	mov	r2,r19
10102590:	dfc01717 	ldw	ra,92(sp)
10102594:	ddc01617 	ldw	r23,88(sp)
10102598:	dd801517 	ldw	r22,84(sp)
1010259c:	dd401417 	ldw	r21,80(sp)
101025a0:	dd001317 	ldw	r20,76(sp)
101025a4:	dcc01217 	ldw	r19,72(sp)
101025a8:	dc801117 	ldw	r18,68(sp)
101025ac:	dc401017 	ldw	r17,64(sp)
101025b0:	dc000f17 	ldw	r16,60(sp)
101025b4:	dec01804 	addi	sp,sp,96
101025b8:	f800283a 	ret
101025bc:	80800417 	ldw	r2,16(r16)
101025c0:	002f883a 	mov	r23,zero
101025c4:	0027883a 	mov	r19,zero
101025c8:	1000cb26 	beq	r2,zero,101028f8 <_fseeko_r+0x3e8>
101025cc:	8080030b 	ldhu	r2,12(r16)
101025d0:	10c2068c 	andi	r3,r2,2074
101025d4:	1800071e 	bne	r3,zero,101025f4 <_fseeko_r+0xe4>
101025d8:	10c1000c 	andi	r3,r2,1024
101025dc:	1800451e 	bne	r3,zero,101026f4 <_fseeko_r+0x1e4>
101025e0:	00c40434 	movhi	r3,4112
101025e4:	18ce8b04 	addi	r3,r3,14892
101025e8:	a0c0b726 	beq	r20,r3,101028c8 <_fseeko_r+0x3b8>
101025ec:	10820014 	ori	r2,r2,2048
101025f0:	8080030d 	sth	r2,12(r16)
101025f4:	800b883a 	mov	r5,r16
101025f8:	8809883a 	mov	r4,r17
101025fc:	0101b380 	call	10101b38 <_fflush_r>
10102600:	1027883a 	mov	r19,r2
10102604:	103fe01e 	bne	r2,zero,10102588 <__alt_data_end+0xfffe2588>
10102608:	81400717 	ldw	r5,28(r16)
1010260c:	900f883a 	mov	r7,r18
10102610:	a80d883a 	mov	r6,r21
10102614:	8809883a 	mov	r4,r17
10102618:	a03ee83a 	callr	r20
1010261c:	00ffffc4 	movi	r3,-1
10102620:	10ffd926 	beq	r2,r3,10102588 <__alt_data_end+0xfffe2588>
10102624:	81400c17 	ldw	r5,48(r16)
10102628:	28000526 	beq	r5,zero,10102640 <_fseeko_r+0x130>
1010262c:	80801004 	addi	r2,r16,64
10102630:	28800226 	beq	r5,r2,1010263c <_fseeko_r+0x12c>
10102634:	8809883a 	mov	r4,r17
10102638:	01021e00 	call	101021e0 <_free_r>
1010263c:	80000c15 	stw	zero,48(r16)
10102640:	8080030b 	ldhu	r2,12(r16)
10102644:	80c00417 	ldw	r3,16(r16)
10102648:	80000115 	stw	zero,4(r16)
1010264c:	10bdf7cc 	andi	r2,r2,63455
10102650:	80c00015 	stw	r3,0(r16)
10102654:	8080030d 	sth	r2,12(r16)
10102658:	01800204 	movi	r6,8
1010265c:	000b883a 	mov	r5,zero
10102660:	81001704 	addi	r4,r16,92
10102664:	010351c0 	call	1010351c <memset>
10102668:	003fc806 	br	1010258c <__alt_data_end+0xfffe258c>
1010266c:	800b883a 	mov	r5,r16
10102670:	8809883a 	mov	r4,r17
10102674:	0101b380 	call	10101b38 <_fflush_r>
10102678:	8080030b 	ldhu	r2,12(r16)
1010267c:	10c4000c 	andi	r3,r2,4096
10102680:	18008726 	beq	r3,zero,101028a0 <_fseeko_r+0x390>
10102684:	84c01417 	ldw	r19,80(r16)
10102688:	10c0010c 	andi	r3,r2,4
1010268c:	1800431e 	bne	r3,zero,1010279c <_fseeko_r+0x28c>
10102690:	1080020c 	andi	r2,r2,8
10102694:	10008026 	beq	r2,zero,10102898 <_fseeko_r+0x388>
10102698:	80c00017 	ldw	r3,0(r16)
1010269c:	80800417 	ldw	r2,16(r16)
101026a0:	18000226 	beq	r3,zero,101026ac <_fseeko_r+0x19c>
101026a4:	1887c83a 	sub	r3,r3,r2
101026a8:	98e7883a 	add	r19,r19,r3
101026ac:	aceb883a 	add	r21,r21,r19
101026b0:	05c00044 	movi	r23,1
101026b4:	0025883a 	mov	r18,zero
101026b8:	003fc306 	br	101025c8 <__alt_data_end+0xfffe25c8>
101026bc:	0101f140 	call	10101f14 <__sinit>
101026c0:	8080030b 	ldhu	r2,12(r16)
101026c4:	00c04204 	movi	r3,264
101026c8:	1080420c 	andi	r2,r2,264
101026cc:	10ffa51e 	bne	r2,r3,10102564 <__alt_data_end+0xfffe2564>
101026d0:	800b883a 	mov	r5,r16
101026d4:	8809883a 	mov	r4,r17
101026d8:	0101b380 	call	10101b38 <_fflush_r>
101026dc:	003fa106 	br	10102564 <__alt_data_end+0xfffe2564>
101026e0:	8080030b 	ldhu	r2,12(r16)
101026e4:	00c10004 	movi	r3,1024
101026e8:	80c01315 	stw	r3,76(r16)
101026ec:	10c4b03a 	or	r2,r2,r3
101026f0:	8080030d 	sth	r2,12(r16)
101026f4:	9000311e 	bne	r18,zero,101027bc <_fseeko_r+0x2ac>
101026f8:	a82d883a 	mov	r22,r21
101026fc:	b800371e 	bne	r23,zero,101027dc <_fseeko_r+0x2cc>
10102700:	8080030b 	ldhu	r2,12(r16)
10102704:	1084000c 	andi	r2,r2,4096
10102708:	10007f26 	beq	r2,zero,10102908 <_fseeko_r+0x3f8>
1010270c:	80801417 	ldw	r2,80(r16)
10102710:	81800117 	ldw	r6,4(r16)
10102714:	81400c17 	ldw	r5,48(r16)
10102718:	11a7c83a 	sub	r19,r2,r6
1010271c:	28008226 	beq	r5,zero,10102928 <_fseeko_r+0x418>
10102720:	81c00f17 	ldw	r7,60(r16)
10102724:	99e7c83a 	sub	r19,r19,r7
10102728:	81000e17 	ldw	r4,56(r16)
1010272c:	80800417 	ldw	r2,16(r16)
10102730:	99a7883a 	add	r19,r19,r6
10102734:	2087c83a 	sub	r3,r4,r2
10102738:	98e7c83a 	sub	r19,r19,r3
1010273c:	38c7883a 	add	r3,r7,r3
10102740:	b4c02b16 	blt	r22,r19,101027f0 <_fseeko_r+0x2e0>
10102744:	98c9883a 	add	r4,r19,r3
10102748:	b100292e 	bgeu	r22,r4,101027f0 <_fseeko_r+0x2e0>
1010274c:	b4e7c83a 	sub	r19,r22,r19
10102750:	14c5883a 	add	r2,r2,r19
10102754:	1ce7c83a 	sub	r19,r3,r19
10102758:	80800015 	stw	r2,0(r16)
1010275c:	84c00115 	stw	r19,4(r16)
10102760:	28000526 	beq	r5,zero,10102778 <_fseeko_r+0x268>
10102764:	80801004 	addi	r2,r16,64
10102768:	28800226 	beq	r5,r2,10102774 <_fseeko_r+0x264>
1010276c:	8809883a 	mov	r4,r17
10102770:	01021e00 	call	101021e0 <_free_r>
10102774:	80000c15 	stw	zero,48(r16)
10102778:	8080030b 	ldhu	r2,12(r16)
1010277c:	01800204 	movi	r6,8
10102780:	000b883a 	mov	r5,zero
10102784:	10bff7cc 	andi	r2,r2,65503
10102788:	8080030d 	sth	r2,12(r16)
1010278c:	81001704 	addi	r4,r16,92
10102790:	010351c0 	call	1010351c <memset>
10102794:	0027883a 	mov	r19,zero
10102798:	003f7c06 	br	1010258c <__alt_data_end+0xfffe258c>
1010279c:	80c00117 	ldw	r3,4(r16)
101027a0:	80800c17 	ldw	r2,48(r16)
101027a4:	98e7c83a 	sub	r19,r19,r3
101027a8:	10003b26 	beq	r2,zero,10102898 <_fseeko_r+0x388>
101027ac:	80c00f17 	ldw	r3,60(r16)
101027b0:	80800417 	ldw	r2,16(r16)
101027b4:	98e7c83a 	sub	r19,r19,r3
101027b8:	003fbc06 	br	101026ac <__alt_data_end+0xfffe26ac>
101027bc:	8140038f 	ldh	r5,14(r16)
101027c0:	d80d883a 	mov	r6,sp
101027c4:	8809883a 	mov	r4,r17
101027c8:	01029700 	call	10102970 <_fstat_r>
101027cc:	103f891e 	bne	r2,zero,101025f4 <__alt_data_end+0xfffe25f4>
101027d0:	dd800417 	ldw	r22,16(sp)
101027d4:	adad883a 	add	r22,r21,r22
101027d8:	b83fc926 	beq	r23,zero,10102700 <__alt_data_end+0xfffe2700>
101027dc:	81400c17 	ldw	r5,48(r16)
101027e0:	81800117 	ldw	r6,4(r16)
101027e4:	28005026 	beq	r5,zero,10102928 <_fseeko_r+0x418>
101027e8:	81c00f17 	ldw	r7,60(r16)
101027ec:	003fce06 	br	10102728 <__alt_data_end+0xfffe2728>
101027f0:	84c01317 	ldw	r19,76(r16)
101027f4:	81400717 	ldw	r5,28(r16)
101027f8:	000f883a 	mov	r7,zero
101027fc:	04e7c83a 	sub	r19,zero,r19
10102800:	9da6703a 	and	r19,r19,r22
10102804:	980d883a 	mov	r6,r19
10102808:	8809883a 	mov	r4,r17
1010280c:	a03ee83a 	callr	r20
10102810:	00ffffc4 	movi	r3,-1
10102814:	10ff7726 	beq	r2,r3,101025f4 <__alt_data_end+0xfffe25f4>
10102818:	80800417 	ldw	r2,16(r16)
1010281c:	81400c17 	ldw	r5,48(r16)
10102820:	80000115 	stw	zero,4(r16)
10102824:	80800015 	stw	r2,0(r16)
10102828:	28000526 	beq	r5,zero,10102840 <_fseeko_r+0x330>
1010282c:	80801004 	addi	r2,r16,64
10102830:	28800226 	beq	r5,r2,1010283c <_fseeko_r+0x32c>
10102834:	8809883a 	mov	r4,r17
10102838:	01021e00 	call	101021e0 <_free_r>
1010283c:	80000c15 	stw	zero,48(r16)
10102840:	8080030b 	ldhu	r2,12(r16)
10102844:	b4e7c83a 	sub	r19,r22,r19
10102848:	10bff7cc 	andi	r2,r2,65503
1010284c:	8080030d 	sth	r2,12(r16)
10102850:	98000b26 	beq	r19,zero,10102880 <_fseeko_r+0x370>
10102854:	800b883a 	mov	r5,r16
10102858:	8809883a 	mov	r4,r17
1010285c:	010372c0 	call	1010372c <__srefill_r>
10102860:	103f641e 	bne	r2,zero,101025f4 <__alt_data_end+0xfffe25f4>
10102864:	80800117 	ldw	r2,4(r16)
10102868:	14ff6236 	bltu	r2,r19,101025f4 <__alt_data_end+0xfffe25f4>
1010286c:	80c00017 	ldw	r3,0(r16)
10102870:	14c5c83a 	sub	r2,r2,r19
10102874:	80800115 	stw	r2,4(r16)
10102878:	1ce7883a 	add	r19,r3,r19
1010287c:	84c00015 	stw	r19,0(r16)
10102880:	01800204 	movi	r6,8
10102884:	000b883a 	mov	r5,zero
10102888:	81001704 	addi	r4,r16,92
1010288c:	010351c0 	call	1010351c <memset>
10102890:	0027883a 	mov	r19,zero
10102894:	003f3d06 	br	1010258c <__alt_data_end+0xfffe258c>
10102898:	80800417 	ldw	r2,16(r16)
1010289c:	003f8306 	br	101026ac <__alt_data_end+0xfffe26ac>
101028a0:	81400717 	ldw	r5,28(r16)
101028a4:	900f883a 	mov	r7,r18
101028a8:	000d883a 	mov	r6,zero
101028ac:	8809883a 	mov	r4,r17
101028b0:	a03ee83a 	callr	r20
101028b4:	1027883a 	mov	r19,r2
101028b8:	00bfffc4 	movi	r2,-1
101028bc:	98bf3226 	beq	r19,r2,10102588 <__alt_data_end+0xfffe2588>
101028c0:	8080030b 	ldhu	r2,12(r16)
101028c4:	003f7006 	br	10102688 <__alt_data_end+0xfffe2688>
101028c8:	8140038f 	ldh	r5,14(r16)
101028cc:	283f4716 	blt	r5,zero,101025ec <__alt_data_end+0xfffe25ec>
101028d0:	d80d883a 	mov	r6,sp
101028d4:	8809883a 	mov	r4,r17
101028d8:	01029700 	call	10102970 <_fstat_r>
101028dc:	1000041e 	bne	r2,zero,101028f0 <_fseeko_r+0x3e0>
101028e0:	d8800117 	ldw	r2,4(sp)
101028e4:	00e00014 	movui	r3,32768
101028e8:	10bc000c 	andi	r2,r2,61440
101028ec:	10ff7c26 	beq	r2,r3,101026e0 <__alt_data_end+0xfffe26e0>
101028f0:	8080030b 	ldhu	r2,12(r16)
101028f4:	003f3d06 	br	101025ec <__alt_data_end+0xfffe25ec>
101028f8:	800b883a 	mov	r5,r16
101028fc:	8809883a 	mov	r4,r17
10102900:	0102b540 	call	10102b54 <__smakebuf_r>
10102904:	003f3106 	br	101025cc <__alt_data_end+0xfffe25cc>
10102908:	81400717 	ldw	r5,28(r16)
1010290c:	01c00044 	movi	r7,1
10102910:	000d883a 	mov	r6,zero
10102914:	8809883a 	mov	r4,r17
10102918:	a03ee83a 	callr	r20
1010291c:	00ffffc4 	movi	r3,-1
10102920:	10ff7b1e 	bne	r2,r3,10102710 <__alt_data_end+0xfffe2710>
10102924:	003f3306 	br	101025f4 <__alt_data_end+0xfffe25f4>
10102928:	80c00017 	ldw	r3,0(r16)
1010292c:	80800417 	ldw	r2,16(r16)
10102930:	000b883a 	mov	r5,zero
10102934:	1887c83a 	sub	r3,r3,r2
10102938:	98e7c83a 	sub	r19,r19,r3
1010293c:	30c7883a 	add	r3,r6,r3
10102940:	003f7f06 	br	10102740 <__alt_data_end+0xfffe2740>
10102944:	00800744 	movi	r2,29
10102948:	88800015 	stw	r2,0(r17)
1010294c:	04ffffc4 	movi	r19,-1
10102950:	003f0e06 	br	1010258c <__alt_data_end+0xfffe258c>

10102954 <fseeko>:
10102954:	00840474 	movhi	r2,4113
10102958:	108d1004 	addi	r2,r2,13376
1010295c:	300f883a 	mov	r7,r6
10102960:	280d883a 	mov	r6,r5
10102964:	200b883a 	mov	r5,r4
10102968:	11000017 	ldw	r4,0(r2)
1010296c:	01025101 	jmpi	10102510 <_fseeko_r>

10102970 <_fstat_r>:
10102970:	defffd04 	addi	sp,sp,-12
10102974:	2805883a 	mov	r2,r5
10102978:	dc000015 	stw	r16,0(sp)
1010297c:	04040474 	movhi	r16,4113
10102980:	dc400115 	stw	r17,4(sp)
10102984:	84140804 	addi	r16,r16,20512
10102988:	2023883a 	mov	r17,r4
1010298c:	300b883a 	mov	r5,r6
10102990:	1009883a 	mov	r4,r2
10102994:	dfc00215 	stw	ra,8(sp)
10102998:	80000015 	stw	zero,0(r16)
1010299c:	010e9200 	call	1010e920 <fstat>
101029a0:	00ffffc4 	movi	r3,-1
101029a4:	10c00526 	beq	r2,r3,101029bc <_fstat_r+0x4c>
101029a8:	dfc00217 	ldw	ra,8(sp)
101029ac:	dc400117 	ldw	r17,4(sp)
101029b0:	dc000017 	ldw	r16,0(sp)
101029b4:	dec00304 	addi	sp,sp,12
101029b8:	f800283a 	ret
101029bc:	80c00017 	ldw	r3,0(r16)
101029c0:	183ff926 	beq	r3,zero,101029a8 <__alt_data_end+0xfffe29a8>
101029c4:	88c00015 	stw	r3,0(r17)
101029c8:	003ff706 	br	101029a8 <__alt_data_end+0xfffe29a8>

101029cc <_fwalk>:
101029cc:	defff704 	addi	sp,sp,-36
101029d0:	dd000415 	stw	r20,16(sp)
101029d4:	dfc00815 	stw	ra,32(sp)
101029d8:	ddc00715 	stw	r23,28(sp)
101029dc:	dd800615 	stw	r22,24(sp)
101029e0:	dd400515 	stw	r21,20(sp)
101029e4:	dcc00315 	stw	r19,12(sp)
101029e8:	dc800215 	stw	r18,8(sp)
101029ec:	dc400115 	stw	r17,4(sp)
101029f0:	dc000015 	stw	r16,0(sp)
101029f4:	2500b804 	addi	r20,r4,736
101029f8:	a0002326 	beq	r20,zero,10102a88 <_fwalk+0xbc>
101029fc:	282b883a 	mov	r21,r5
10102a00:	002f883a 	mov	r23,zero
10102a04:	05800044 	movi	r22,1
10102a08:	04ffffc4 	movi	r19,-1
10102a0c:	a4400117 	ldw	r17,4(r20)
10102a10:	a4800217 	ldw	r18,8(r20)
10102a14:	8c7fffc4 	addi	r17,r17,-1
10102a18:	88000d16 	blt	r17,zero,10102a50 <_fwalk+0x84>
10102a1c:	94000304 	addi	r16,r18,12
10102a20:	94800384 	addi	r18,r18,14
10102a24:	8080000b 	ldhu	r2,0(r16)
10102a28:	8c7fffc4 	addi	r17,r17,-1
10102a2c:	813ffd04 	addi	r4,r16,-12
10102a30:	b080042e 	bgeu	r22,r2,10102a44 <_fwalk+0x78>
10102a34:	9080000f 	ldh	r2,0(r18)
10102a38:	14c00226 	beq	r2,r19,10102a44 <_fwalk+0x78>
10102a3c:	a83ee83a 	callr	r21
10102a40:	b8aeb03a 	or	r23,r23,r2
10102a44:	84001a04 	addi	r16,r16,104
10102a48:	94801a04 	addi	r18,r18,104
10102a4c:	8cfff51e 	bne	r17,r19,10102a24 <__alt_data_end+0xfffe2a24>
10102a50:	a5000017 	ldw	r20,0(r20)
10102a54:	a03fed1e 	bne	r20,zero,10102a0c <__alt_data_end+0xfffe2a0c>
10102a58:	b805883a 	mov	r2,r23
10102a5c:	dfc00817 	ldw	ra,32(sp)
10102a60:	ddc00717 	ldw	r23,28(sp)
10102a64:	dd800617 	ldw	r22,24(sp)
10102a68:	dd400517 	ldw	r21,20(sp)
10102a6c:	dd000417 	ldw	r20,16(sp)
10102a70:	dcc00317 	ldw	r19,12(sp)
10102a74:	dc800217 	ldw	r18,8(sp)
10102a78:	dc400117 	ldw	r17,4(sp)
10102a7c:	dc000017 	ldw	r16,0(sp)
10102a80:	dec00904 	addi	sp,sp,36
10102a84:	f800283a 	ret
10102a88:	002f883a 	mov	r23,zero
10102a8c:	003ff206 	br	10102a58 <__alt_data_end+0xfffe2a58>

10102a90 <_fwalk_reent>:
10102a90:	defff704 	addi	sp,sp,-36
10102a94:	dd000415 	stw	r20,16(sp)
10102a98:	dfc00815 	stw	ra,32(sp)
10102a9c:	ddc00715 	stw	r23,28(sp)
10102aa0:	dd800615 	stw	r22,24(sp)
10102aa4:	dd400515 	stw	r21,20(sp)
10102aa8:	dcc00315 	stw	r19,12(sp)
10102aac:	dc800215 	stw	r18,8(sp)
10102ab0:	dc400115 	stw	r17,4(sp)
10102ab4:	dc000015 	stw	r16,0(sp)
10102ab8:	2500b804 	addi	r20,r4,736
10102abc:	a0002326 	beq	r20,zero,10102b4c <_fwalk_reent+0xbc>
10102ac0:	282b883a 	mov	r21,r5
10102ac4:	2027883a 	mov	r19,r4
10102ac8:	002f883a 	mov	r23,zero
10102acc:	05800044 	movi	r22,1
10102ad0:	04bfffc4 	movi	r18,-1
10102ad4:	a4400117 	ldw	r17,4(r20)
10102ad8:	a4000217 	ldw	r16,8(r20)
10102adc:	8c7fffc4 	addi	r17,r17,-1
10102ae0:	88000c16 	blt	r17,zero,10102b14 <_fwalk_reent+0x84>
10102ae4:	84000304 	addi	r16,r16,12
10102ae8:	8080000b 	ldhu	r2,0(r16)
10102aec:	8c7fffc4 	addi	r17,r17,-1
10102af0:	817ffd04 	addi	r5,r16,-12
10102af4:	b080052e 	bgeu	r22,r2,10102b0c <_fwalk_reent+0x7c>
10102af8:	8080008f 	ldh	r2,2(r16)
10102afc:	9809883a 	mov	r4,r19
10102b00:	14800226 	beq	r2,r18,10102b0c <_fwalk_reent+0x7c>
10102b04:	a83ee83a 	callr	r21
10102b08:	b8aeb03a 	or	r23,r23,r2
10102b0c:	84001a04 	addi	r16,r16,104
10102b10:	8cbff51e 	bne	r17,r18,10102ae8 <__alt_data_end+0xfffe2ae8>
10102b14:	a5000017 	ldw	r20,0(r20)
10102b18:	a03fee1e 	bne	r20,zero,10102ad4 <__alt_data_end+0xfffe2ad4>
10102b1c:	b805883a 	mov	r2,r23
10102b20:	dfc00817 	ldw	ra,32(sp)
10102b24:	ddc00717 	ldw	r23,28(sp)
10102b28:	dd800617 	ldw	r22,24(sp)
10102b2c:	dd400517 	ldw	r21,20(sp)
10102b30:	dd000417 	ldw	r20,16(sp)
10102b34:	dcc00317 	ldw	r19,12(sp)
10102b38:	dc800217 	ldw	r18,8(sp)
10102b3c:	dc400117 	ldw	r17,4(sp)
10102b40:	dc000017 	ldw	r16,0(sp)
10102b44:	dec00904 	addi	sp,sp,36
10102b48:	f800283a 	ret
10102b4c:	002f883a 	mov	r23,zero
10102b50:	003ff206 	br	10102b1c <__alt_data_end+0xfffe2b1c>

10102b54 <__smakebuf_r>:
10102b54:	2880030b 	ldhu	r2,12(r5)
10102b58:	10c0008c 	andi	r3,r2,2
10102b5c:	1800411e 	bne	r3,zero,10102c64 <__smakebuf_r+0x110>
10102b60:	deffec04 	addi	sp,sp,-80
10102b64:	dc000f15 	stw	r16,60(sp)
10102b68:	2821883a 	mov	r16,r5
10102b6c:	2940038f 	ldh	r5,14(r5)
10102b70:	dc401015 	stw	r17,64(sp)
10102b74:	dfc01315 	stw	ra,76(sp)
10102b78:	dcc01215 	stw	r19,72(sp)
10102b7c:	dc801115 	stw	r18,68(sp)
10102b80:	2023883a 	mov	r17,r4
10102b84:	28001c16 	blt	r5,zero,10102bf8 <__smakebuf_r+0xa4>
10102b88:	d80d883a 	mov	r6,sp
10102b8c:	01029700 	call	10102970 <_fstat_r>
10102b90:	10001816 	blt	r2,zero,10102bf4 <__smakebuf_r+0xa0>
10102b94:	d8800117 	ldw	r2,4(sp)
10102b98:	00e00014 	movui	r3,32768
10102b9c:	10bc000c 	andi	r2,r2,61440
10102ba0:	14c80020 	cmpeqi	r19,r2,8192
10102ba4:	10c03726 	beq	r2,r3,10102c84 <__smakebuf_r+0x130>
10102ba8:	80c0030b 	ldhu	r3,12(r16)
10102bac:	18c20014 	ori	r3,r3,2048
10102bb0:	80c0030d 	sth	r3,12(r16)
10102bb4:	00c80004 	movi	r3,8192
10102bb8:	10c0521e 	bne	r2,r3,10102d04 <__smakebuf_r+0x1b0>
10102bbc:	8140038f 	ldh	r5,14(r16)
10102bc0:	8809883a 	mov	r4,r17
10102bc4:	010789c0 	call	1010789c <_isatty_r>
10102bc8:	10004c26 	beq	r2,zero,10102cfc <__smakebuf_r+0x1a8>
10102bcc:	8080030b 	ldhu	r2,12(r16)
10102bd0:	80c010c4 	addi	r3,r16,67
10102bd4:	80c00015 	stw	r3,0(r16)
10102bd8:	10800054 	ori	r2,r2,1
10102bdc:	8080030d 	sth	r2,12(r16)
10102be0:	00800044 	movi	r2,1
10102be4:	80c00415 	stw	r3,16(r16)
10102be8:	80800515 	stw	r2,20(r16)
10102bec:	04810004 	movi	r18,1024
10102bf0:	00000706 	br	10102c10 <__smakebuf_r+0xbc>
10102bf4:	8080030b 	ldhu	r2,12(r16)
10102bf8:	10c0200c 	andi	r3,r2,128
10102bfc:	18001f1e 	bne	r3,zero,10102c7c <__smakebuf_r+0x128>
10102c00:	04810004 	movi	r18,1024
10102c04:	10820014 	ori	r2,r2,2048
10102c08:	8080030d 	sth	r2,12(r16)
10102c0c:	0027883a 	mov	r19,zero
10102c10:	900b883a 	mov	r5,r18
10102c14:	8809883a 	mov	r4,r17
10102c18:	0102d100 	call	10102d10 <_malloc_r>
10102c1c:	10002c26 	beq	r2,zero,10102cd0 <__smakebuf_r+0x17c>
10102c20:	80c0030b 	ldhu	r3,12(r16)
10102c24:	01040434 	movhi	r4,4112
10102c28:	2106f304 	addi	r4,r4,7116
10102c2c:	89000f15 	stw	r4,60(r17)
10102c30:	18c02014 	ori	r3,r3,128
10102c34:	80c0030d 	sth	r3,12(r16)
10102c38:	80800015 	stw	r2,0(r16)
10102c3c:	80800415 	stw	r2,16(r16)
10102c40:	84800515 	stw	r18,20(r16)
10102c44:	98001a1e 	bne	r19,zero,10102cb0 <__smakebuf_r+0x15c>
10102c48:	dfc01317 	ldw	ra,76(sp)
10102c4c:	dcc01217 	ldw	r19,72(sp)
10102c50:	dc801117 	ldw	r18,68(sp)
10102c54:	dc401017 	ldw	r17,64(sp)
10102c58:	dc000f17 	ldw	r16,60(sp)
10102c5c:	dec01404 	addi	sp,sp,80
10102c60:	f800283a 	ret
10102c64:	288010c4 	addi	r2,r5,67
10102c68:	28800015 	stw	r2,0(r5)
10102c6c:	28800415 	stw	r2,16(r5)
10102c70:	00800044 	movi	r2,1
10102c74:	28800515 	stw	r2,20(r5)
10102c78:	f800283a 	ret
10102c7c:	04801004 	movi	r18,64
10102c80:	003fe006 	br	10102c04 <__alt_data_end+0xfffe2c04>
10102c84:	81000a17 	ldw	r4,40(r16)
10102c88:	00c40434 	movhi	r3,4112
10102c8c:	18ce8b04 	addi	r3,r3,14892
10102c90:	20ffc51e 	bne	r4,r3,10102ba8 <__alt_data_end+0xfffe2ba8>
10102c94:	8080030b 	ldhu	r2,12(r16)
10102c98:	04810004 	movi	r18,1024
10102c9c:	84801315 	stw	r18,76(r16)
10102ca0:	1484b03a 	or	r2,r2,r18
10102ca4:	8080030d 	sth	r2,12(r16)
10102ca8:	0027883a 	mov	r19,zero
10102cac:	003fd806 	br	10102c10 <__alt_data_end+0xfffe2c10>
10102cb0:	8140038f 	ldh	r5,14(r16)
10102cb4:	8809883a 	mov	r4,r17
10102cb8:	010789c0 	call	1010789c <_isatty_r>
10102cbc:	103fe226 	beq	r2,zero,10102c48 <__alt_data_end+0xfffe2c48>
10102cc0:	8080030b 	ldhu	r2,12(r16)
10102cc4:	10800054 	ori	r2,r2,1
10102cc8:	8080030d 	sth	r2,12(r16)
10102ccc:	003fde06 	br	10102c48 <__alt_data_end+0xfffe2c48>
10102cd0:	8080030b 	ldhu	r2,12(r16)
10102cd4:	10c0800c 	andi	r3,r2,512
10102cd8:	183fdb1e 	bne	r3,zero,10102c48 <__alt_data_end+0xfffe2c48>
10102cdc:	10800094 	ori	r2,r2,2
10102ce0:	80c010c4 	addi	r3,r16,67
10102ce4:	8080030d 	sth	r2,12(r16)
10102ce8:	00800044 	movi	r2,1
10102cec:	80c00015 	stw	r3,0(r16)
10102cf0:	80c00415 	stw	r3,16(r16)
10102cf4:	80800515 	stw	r2,20(r16)
10102cf8:	003fd306 	br	10102c48 <__alt_data_end+0xfffe2c48>
10102cfc:	04810004 	movi	r18,1024
10102d00:	003fc306 	br	10102c10 <__alt_data_end+0xfffe2c10>
10102d04:	0027883a 	mov	r19,zero
10102d08:	04810004 	movi	r18,1024
10102d0c:	003fc006 	br	10102c10 <__alt_data_end+0xfffe2c10>

10102d10 <_malloc_r>:
10102d10:	defff504 	addi	sp,sp,-44
10102d14:	dc800315 	stw	r18,12(sp)
10102d18:	dfc00a15 	stw	ra,40(sp)
10102d1c:	df000915 	stw	fp,36(sp)
10102d20:	ddc00815 	stw	r23,32(sp)
10102d24:	dd800715 	stw	r22,28(sp)
10102d28:	dd400615 	stw	r21,24(sp)
10102d2c:	dd000515 	stw	r20,20(sp)
10102d30:	dcc00415 	stw	r19,16(sp)
10102d34:	dc400215 	stw	r17,8(sp)
10102d38:	dc000115 	stw	r16,4(sp)
10102d3c:	288002c4 	addi	r2,r5,11
10102d40:	00c00584 	movi	r3,22
10102d44:	2025883a 	mov	r18,r4
10102d48:	18807f2e 	bgeu	r3,r2,10102f48 <_malloc_r+0x238>
10102d4c:	047ffe04 	movi	r17,-8
10102d50:	1462703a 	and	r17,r2,r17
10102d54:	8800a316 	blt	r17,zero,10102fe4 <_malloc_r+0x2d4>
10102d58:	8940a236 	bltu	r17,r5,10102fe4 <_malloc_r+0x2d4>
10102d5c:	010ed500 	call	1010ed50 <__malloc_lock>
10102d60:	00807dc4 	movi	r2,503
10102d64:	1441e92e 	bgeu	r2,r17,1010350c <_malloc_r+0x7fc>
10102d68:	8804d27a 	srli	r2,r17,9
10102d6c:	1000a126 	beq	r2,zero,10102ff4 <_malloc_r+0x2e4>
10102d70:	00c00104 	movi	r3,4
10102d74:	18811e36 	bltu	r3,r2,101031f0 <_malloc_r+0x4e0>
10102d78:	8804d1ba 	srli	r2,r17,6
10102d7c:	12000e44 	addi	r8,r2,57
10102d80:	11c00e04 	addi	r7,r2,56
10102d84:	4209883a 	add	r4,r8,r8
10102d88:	04c40474 	movhi	r19,4113
10102d8c:	2109883a 	add	r4,r4,r4
10102d90:	9cc76304 	addi	r19,r19,7564
10102d94:	2109883a 	add	r4,r4,r4
10102d98:	9909883a 	add	r4,r19,r4
10102d9c:	24000117 	ldw	r16,4(r4)
10102da0:	213ffe04 	addi	r4,r4,-8
10102da4:	24009726 	beq	r4,r16,10103004 <_malloc_r+0x2f4>
10102da8:	80800117 	ldw	r2,4(r16)
10102dac:	01bfff04 	movi	r6,-4
10102db0:	014003c4 	movi	r5,15
10102db4:	1184703a 	and	r2,r2,r6
10102db8:	1447c83a 	sub	r3,r2,r17
10102dbc:	28c00716 	blt	r5,r3,10102ddc <_malloc_r+0xcc>
10102dc0:	1800920e 	bge	r3,zero,1010300c <_malloc_r+0x2fc>
10102dc4:	84000317 	ldw	r16,12(r16)
10102dc8:	24008e26 	beq	r4,r16,10103004 <_malloc_r+0x2f4>
10102dcc:	80800117 	ldw	r2,4(r16)
10102dd0:	1184703a 	and	r2,r2,r6
10102dd4:	1447c83a 	sub	r3,r2,r17
10102dd8:	28fff90e 	bge	r5,r3,10102dc0 <__alt_data_end+0xfffe2dc0>
10102ddc:	3809883a 	mov	r4,r7
10102de0:	01840474 	movhi	r6,4113
10102de4:	9c000417 	ldw	r16,16(r19)
10102de8:	31876304 	addi	r6,r6,7564
10102dec:	32000204 	addi	r8,r6,8
10102df0:	82013426 	beq	r16,r8,101032c4 <_malloc_r+0x5b4>
10102df4:	80c00117 	ldw	r3,4(r16)
10102df8:	00bfff04 	movi	r2,-4
10102dfc:	188e703a 	and	r7,r3,r2
10102e00:	3c45c83a 	sub	r2,r7,r17
10102e04:	00c003c4 	movi	r3,15
10102e08:	18811f16 	blt	r3,r2,10103288 <_malloc_r+0x578>
10102e0c:	32000515 	stw	r8,20(r6)
10102e10:	32000415 	stw	r8,16(r6)
10102e14:	10007f0e 	bge	r2,zero,10103014 <_malloc_r+0x304>
10102e18:	00807fc4 	movi	r2,511
10102e1c:	11c0fd36 	bltu	r2,r7,10103214 <_malloc_r+0x504>
10102e20:	3806d0fa 	srli	r3,r7,3
10102e24:	01c00044 	movi	r7,1
10102e28:	30800117 	ldw	r2,4(r6)
10102e2c:	19400044 	addi	r5,r3,1
10102e30:	294b883a 	add	r5,r5,r5
10102e34:	1807d0ba 	srai	r3,r3,2
10102e38:	294b883a 	add	r5,r5,r5
10102e3c:	294b883a 	add	r5,r5,r5
10102e40:	298b883a 	add	r5,r5,r6
10102e44:	38c6983a 	sll	r3,r7,r3
10102e48:	29c00017 	ldw	r7,0(r5)
10102e4c:	2a7ffe04 	addi	r9,r5,-8
10102e50:	1886b03a 	or	r3,r3,r2
10102e54:	82400315 	stw	r9,12(r16)
10102e58:	81c00215 	stw	r7,8(r16)
10102e5c:	30c00115 	stw	r3,4(r6)
10102e60:	2c000015 	stw	r16,0(r5)
10102e64:	3c000315 	stw	r16,12(r7)
10102e68:	2005d0ba 	srai	r2,r4,2
10102e6c:	01400044 	movi	r5,1
10102e70:	288a983a 	sll	r5,r5,r2
10102e74:	19406f36 	bltu	r3,r5,10103034 <_malloc_r+0x324>
10102e78:	28c4703a 	and	r2,r5,r3
10102e7c:	10000a1e 	bne	r2,zero,10102ea8 <_malloc_r+0x198>
10102e80:	00bfff04 	movi	r2,-4
10102e84:	294b883a 	add	r5,r5,r5
10102e88:	2088703a 	and	r4,r4,r2
10102e8c:	28c4703a 	and	r2,r5,r3
10102e90:	21000104 	addi	r4,r4,4
10102e94:	1000041e 	bne	r2,zero,10102ea8 <_malloc_r+0x198>
10102e98:	294b883a 	add	r5,r5,r5
10102e9c:	28c4703a 	and	r2,r5,r3
10102ea0:	21000104 	addi	r4,r4,4
10102ea4:	103ffc26 	beq	r2,zero,10102e98 <__alt_data_end+0xfffe2e98>
10102ea8:	02bfff04 	movi	r10,-4
10102eac:	024003c4 	movi	r9,15
10102eb0:	21800044 	addi	r6,r4,1
10102eb4:	318d883a 	add	r6,r6,r6
10102eb8:	318d883a 	add	r6,r6,r6
10102ebc:	318d883a 	add	r6,r6,r6
10102ec0:	998d883a 	add	r6,r19,r6
10102ec4:	333ffe04 	addi	r12,r6,-8
10102ec8:	2017883a 	mov	r11,r4
10102ecc:	31800104 	addi	r6,r6,4
10102ed0:	34000017 	ldw	r16,0(r6)
10102ed4:	31fffd04 	addi	r7,r6,-12
10102ed8:	81c0041e 	bne	r16,r7,10102eec <_malloc_r+0x1dc>
10102edc:	0000fb06 	br	101032cc <_malloc_r+0x5bc>
10102ee0:	1801030e 	bge	r3,zero,101032f0 <_malloc_r+0x5e0>
10102ee4:	84000317 	ldw	r16,12(r16)
10102ee8:	81c0f826 	beq	r16,r7,101032cc <_malloc_r+0x5bc>
10102eec:	80800117 	ldw	r2,4(r16)
10102ef0:	1284703a 	and	r2,r2,r10
10102ef4:	1447c83a 	sub	r3,r2,r17
10102ef8:	48fff90e 	bge	r9,r3,10102ee0 <__alt_data_end+0xfffe2ee0>
10102efc:	80800317 	ldw	r2,12(r16)
10102f00:	81000217 	ldw	r4,8(r16)
10102f04:	89400054 	ori	r5,r17,1
10102f08:	81400115 	stw	r5,4(r16)
10102f0c:	20800315 	stw	r2,12(r4)
10102f10:	11000215 	stw	r4,8(r2)
10102f14:	8463883a 	add	r17,r16,r17
10102f18:	9c400515 	stw	r17,20(r19)
10102f1c:	9c400415 	stw	r17,16(r19)
10102f20:	18800054 	ori	r2,r3,1
10102f24:	88800115 	stw	r2,4(r17)
10102f28:	8a000315 	stw	r8,12(r17)
10102f2c:	8a000215 	stw	r8,8(r17)
10102f30:	88e3883a 	add	r17,r17,r3
10102f34:	88c00015 	stw	r3,0(r17)
10102f38:	9009883a 	mov	r4,r18
10102f3c:	010ed740 	call	1010ed74 <__malloc_unlock>
10102f40:	80800204 	addi	r2,r16,8
10102f44:	00001b06 	br	10102fb4 <_malloc_r+0x2a4>
10102f48:	04400404 	movi	r17,16
10102f4c:	89402536 	bltu	r17,r5,10102fe4 <_malloc_r+0x2d4>
10102f50:	010ed500 	call	1010ed50 <__malloc_lock>
10102f54:	00800184 	movi	r2,6
10102f58:	01000084 	movi	r4,2
10102f5c:	04c40474 	movhi	r19,4113
10102f60:	1085883a 	add	r2,r2,r2
10102f64:	9cc76304 	addi	r19,r19,7564
10102f68:	1085883a 	add	r2,r2,r2
10102f6c:	9885883a 	add	r2,r19,r2
10102f70:	14000117 	ldw	r16,4(r2)
10102f74:	10fffe04 	addi	r3,r2,-8
10102f78:	80c0d926 	beq	r16,r3,101032e0 <_malloc_r+0x5d0>
10102f7c:	80c00117 	ldw	r3,4(r16)
10102f80:	81000317 	ldw	r4,12(r16)
10102f84:	00bfff04 	movi	r2,-4
10102f88:	1884703a 	and	r2,r3,r2
10102f8c:	81400217 	ldw	r5,8(r16)
10102f90:	8085883a 	add	r2,r16,r2
10102f94:	10c00117 	ldw	r3,4(r2)
10102f98:	29000315 	stw	r4,12(r5)
10102f9c:	21400215 	stw	r5,8(r4)
10102fa0:	18c00054 	ori	r3,r3,1
10102fa4:	10c00115 	stw	r3,4(r2)
10102fa8:	9009883a 	mov	r4,r18
10102fac:	010ed740 	call	1010ed74 <__malloc_unlock>
10102fb0:	80800204 	addi	r2,r16,8
10102fb4:	dfc00a17 	ldw	ra,40(sp)
10102fb8:	df000917 	ldw	fp,36(sp)
10102fbc:	ddc00817 	ldw	r23,32(sp)
10102fc0:	dd800717 	ldw	r22,28(sp)
10102fc4:	dd400617 	ldw	r21,24(sp)
10102fc8:	dd000517 	ldw	r20,20(sp)
10102fcc:	dcc00417 	ldw	r19,16(sp)
10102fd0:	dc800317 	ldw	r18,12(sp)
10102fd4:	dc400217 	ldw	r17,8(sp)
10102fd8:	dc000117 	ldw	r16,4(sp)
10102fdc:	dec00b04 	addi	sp,sp,44
10102fe0:	f800283a 	ret
10102fe4:	00800304 	movi	r2,12
10102fe8:	90800015 	stw	r2,0(r18)
10102fec:	0005883a 	mov	r2,zero
10102ff0:	003ff006 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
10102ff4:	01002004 	movi	r4,128
10102ff8:	02001004 	movi	r8,64
10102ffc:	01c00fc4 	movi	r7,63
10103000:	003f6106 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103004:	4009883a 	mov	r4,r8
10103008:	003f7506 	br	10102de0 <__alt_data_end+0xfffe2de0>
1010300c:	81000317 	ldw	r4,12(r16)
10103010:	003fde06 	br	10102f8c <__alt_data_end+0xfffe2f8c>
10103014:	81c5883a 	add	r2,r16,r7
10103018:	11400117 	ldw	r5,4(r2)
1010301c:	9009883a 	mov	r4,r18
10103020:	29400054 	ori	r5,r5,1
10103024:	11400115 	stw	r5,4(r2)
10103028:	010ed740 	call	1010ed74 <__malloc_unlock>
1010302c:	80800204 	addi	r2,r16,8
10103030:	003fe006 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
10103034:	9c000217 	ldw	r16,8(r19)
10103038:	00bfff04 	movi	r2,-4
1010303c:	85800117 	ldw	r22,4(r16)
10103040:	b0ac703a 	and	r22,r22,r2
10103044:	b4400336 	bltu	r22,r17,10103054 <_malloc_r+0x344>
10103048:	b445c83a 	sub	r2,r22,r17
1010304c:	00c003c4 	movi	r3,15
10103050:	18805d16 	blt	r3,r2,101031c8 <_malloc_r+0x4b8>
10103054:	05c40474 	movhi	r23,4113
10103058:	00840474 	movhi	r2,4113
1010305c:	10940b04 	addi	r2,r2,20524
10103060:	bdcd1104 	addi	r23,r23,13380
10103064:	15400017 	ldw	r21,0(r2)
10103068:	b8c00017 	ldw	r3,0(r23)
1010306c:	00bfffc4 	movi	r2,-1
10103070:	858d883a 	add	r6,r16,r22
10103074:	8d6b883a 	add	r21,r17,r21
10103078:	1880ea26 	beq	r3,r2,10103424 <_malloc_r+0x714>
1010307c:	ad4403c4 	addi	r21,r21,4111
10103080:	00bc0004 	movi	r2,-4096
10103084:	a8aa703a 	and	r21,r21,r2
10103088:	a80b883a 	mov	r5,r21
1010308c:	9009883a 	mov	r4,r18
10103090:	d9800015 	stw	r6,0(sp)
10103094:	01039000 	call	10103900 <_sbrk_r>
10103098:	1029883a 	mov	r20,r2
1010309c:	00bfffc4 	movi	r2,-1
101030a0:	d9800017 	ldw	r6,0(sp)
101030a4:	a080e826 	beq	r20,r2,10103448 <_malloc_r+0x738>
101030a8:	a180a636 	bltu	r20,r6,10103344 <_malloc_r+0x634>
101030ac:	07040474 	movhi	fp,4113
101030b0:	e7141604 	addi	fp,fp,20568
101030b4:	e0800017 	ldw	r2,0(fp)
101030b8:	a887883a 	add	r3,r21,r2
101030bc:	e0c00015 	stw	r3,0(fp)
101030c0:	3500e626 	beq	r6,r20,1010345c <_malloc_r+0x74c>
101030c4:	b9000017 	ldw	r4,0(r23)
101030c8:	00bfffc4 	movi	r2,-1
101030cc:	2080ee26 	beq	r4,r2,10103488 <_malloc_r+0x778>
101030d0:	a185c83a 	sub	r2,r20,r6
101030d4:	10c5883a 	add	r2,r2,r3
101030d8:	e0800015 	stw	r2,0(fp)
101030dc:	a0c001cc 	andi	r3,r20,7
101030e0:	1800bc26 	beq	r3,zero,101033d4 <_malloc_r+0x6c4>
101030e4:	a0e9c83a 	sub	r20,r20,r3
101030e8:	00840204 	movi	r2,4104
101030ec:	a5000204 	addi	r20,r20,8
101030f0:	10c7c83a 	sub	r3,r2,r3
101030f4:	a545883a 	add	r2,r20,r21
101030f8:	1083ffcc 	andi	r2,r2,4095
101030fc:	18abc83a 	sub	r21,r3,r2
10103100:	a80b883a 	mov	r5,r21
10103104:	9009883a 	mov	r4,r18
10103108:	01039000 	call	10103900 <_sbrk_r>
1010310c:	00ffffc4 	movi	r3,-1
10103110:	10c0e126 	beq	r2,r3,10103498 <_malloc_r+0x788>
10103114:	1505c83a 	sub	r2,r2,r20
10103118:	1545883a 	add	r2,r2,r21
1010311c:	10800054 	ori	r2,r2,1
10103120:	e0c00017 	ldw	r3,0(fp)
10103124:	9d000215 	stw	r20,8(r19)
10103128:	a0800115 	stw	r2,4(r20)
1010312c:	a8c7883a 	add	r3,r21,r3
10103130:	e0c00015 	stw	r3,0(fp)
10103134:	84c00e26 	beq	r16,r19,10103170 <_malloc_r+0x460>
10103138:	018003c4 	movi	r6,15
1010313c:	3580a72e 	bgeu	r6,r22,101033dc <_malloc_r+0x6cc>
10103140:	81400117 	ldw	r5,4(r16)
10103144:	013ffe04 	movi	r4,-8
10103148:	b0bffd04 	addi	r2,r22,-12
1010314c:	1104703a 	and	r2,r2,r4
10103150:	2900004c 	andi	r4,r5,1
10103154:	2088b03a 	or	r4,r4,r2
10103158:	81000115 	stw	r4,4(r16)
1010315c:	01400144 	movi	r5,5
10103160:	8089883a 	add	r4,r16,r2
10103164:	21400115 	stw	r5,4(r4)
10103168:	21400215 	stw	r5,8(r4)
1010316c:	3080cd36 	bltu	r6,r2,101034a4 <_malloc_r+0x794>
10103170:	00840474 	movhi	r2,4113
10103174:	10940a04 	addi	r2,r2,20520
10103178:	11000017 	ldw	r4,0(r2)
1010317c:	20c0012e 	bgeu	r4,r3,10103184 <_malloc_r+0x474>
10103180:	10c00015 	stw	r3,0(r2)
10103184:	00840474 	movhi	r2,4113
10103188:	10940904 	addi	r2,r2,20516
1010318c:	11000017 	ldw	r4,0(r2)
10103190:	9c000217 	ldw	r16,8(r19)
10103194:	20c0012e 	bgeu	r4,r3,1010319c <_malloc_r+0x48c>
10103198:	10c00015 	stw	r3,0(r2)
1010319c:	80c00117 	ldw	r3,4(r16)
101031a0:	00bfff04 	movi	r2,-4
101031a4:	1886703a 	and	r3,r3,r2
101031a8:	1c45c83a 	sub	r2,r3,r17
101031ac:	1c400236 	bltu	r3,r17,101031b8 <_malloc_r+0x4a8>
101031b0:	00c003c4 	movi	r3,15
101031b4:	18800416 	blt	r3,r2,101031c8 <_malloc_r+0x4b8>
101031b8:	9009883a 	mov	r4,r18
101031bc:	010ed740 	call	1010ed74 <__malloc_unlock>
101031c0:	0005883a 	mov	r2,zero
101031c4:	003f7b06 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
101031c8:	88c00054 	ori	r3,r17,1
101031cc:	80c00115 	stw	r3,4(r16)
101031d0:	8463883a 	add	r17,r16,r17
101031d4:	10800054 	ori	r2,r2,1
101031d8:	9c400215 	stw	r17,8(r19)
101031dc:	88800115 	stw	r2,4(r17)
101031e0:	9009883a 	mov	r4,r18
101031e4:	010ed740 	call	1010ed74 <__malloc_unlock>
101031e8:	80800204 	addi	r2,r16,8
101031ec:	003f7106 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
101031f0:	00c00504 	movi	r3,20
101031f4:	18804a2e 	bgeu	r3,r2,10103320 <_malloc_r+0x610>
101031f8:	00c01504 	movi	r3,84
101031fc:	18806e36 	bltu	r3,r2,101033b8 <_malloc_r+0x6a8>
10103200:	8804d33a 	srli	r2,r17,12
10103204:	12001bc4 	addi	r8,r2,111
10103208:	11c01b84 	addi	r7,r2,110
1010320c:	4209883a 	add	r4,r8,r8
10103210:	003edd06 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103214:	3804d27a 	srli	r2,r7,9
10103218:	00c00104 	movi	r3,4
1010321c:	1880442e 	bgeu	r3,r2,10103330 <_malloc_r+0x620>
10103220:	00c00504 	movi	r3,20
10103224:	18808136 	bltu	r3,r2,1010342c <_malloc_r+0x71c>
10103228:	11401704 	addi	r5,r2,92
1010322c:	10c016c4 	addi	r3,r2,91
10103230:	294b883a 	add	r5,r5,r5
10103234:	294b883a 	add	r5,r5,r5
10103238:	294b883a 	add	r5,r5,r5
1010323c:	994b883a 	add	r5,r19,r5
10103240:	28800017 	ldw	r2,0(r5)
10103244:	01840474 	movhi	r6,4113
10103248:	297ffe04 	addi	r5,r5,-8
1010324c:	31876304 	addi	r6,r6,7564
10103250:	28806526 	beq	r5,r2,101033e8 <_malloc_r+0x6d8>
10103254:	01bfff04 	movi	r6,-4
10103258:	10c00117 	ldw	r3,4(r2)
1010325c:	1986703a 	and	r3,r3,r6
10103260:	38c0022e 	bgeu	r7,r3,1010326c <_malloc_r+0x55c>
10103264:	10800217 	ldw	r2,8(r2)
10103268:	28bffb1e 	bne	r5,r2,10103258 <__alt_data_end+0xfffe3258>
1010326c:	11400317 	ldw	r5,12(r2)
10103270:	98c00117 	ldw	r3,4(r19)
10103274:	81400315 	stw	r5,12(r16)
10103278:	80800215 	stw	r2,8(r16)
1010327c:	2c000215 	stw	r16,8(r5)
10103280:	14000315 	stw	r16,12(r2)
10103284:	003ef806 	br	10102e68 <__alt_data_end+0xfffe2e68>
10103288:	88c00054 	ori	r3,r17,1
1010328c:	80c00115 	stw	r3,4(r16)
10103290:	8463883a 	add	r17,r16,r17
10103294:	34400515 	stw	r17,20(r6)
10103298:	34400415 	stw	r17,16(r6)
1010329c:	10c00054 	ori	r3,r2,1
101032a0:	8a000315 	stw	r8,12(r17)
101032a4:	8a000215 	stw	r8,8(r17)
101032a8:	88c00115 	stw	r3,4(r17)
101032ac:	88a3883a 	add	r17,r17,r2
101032b0:	88800015 	stw	r2,0(r17)
101032b4:	9009883a 	mov	r4,r18
101032b8:	010ed740 	call	1010ed74 <__malloc_unlock>
101032bc:	80800204 	addi	r2,r16,8
101032c0:	003f3c06 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
101032c4:	30c00117 	ldw	r3,4(r6)
101032c8:	003ee706 	br	10102e68 <__alt_data_end+0xfffe2e68>
101032cc:	5ac00044 	addi	r11,r11,1
101032d0:	588000cc 	andi	r2,r11,3
101032d4:	31800204 	addi	r6,r6,8
101032d8:	103efd1e 	bne	r2,zero,10102ed0 <__alt_data_end+0xfffe2ed0>
101032dc:	00002406 	br	10103370 <_malloc_r+0x660>
101032e0:	14000317 	ldw	r16,12(r2)
101032e4:	143f251e 	bne	r2,r16,10102f7c <__alt_data_end+0xfffe2f7c>
101032e8:	21000084 	addi	r4,r4,2
101032ec:	003ebc06 	br	10102de0 <__alt_data_end+0xfffe2de0>
101032f0:	8085883a 	add	r2,r16,r2
101032f4:	10c00117 	ldw	r3,4(r2)
101032f8:	81000317 	ldw	r4,12(r16)
101032fc:	81400217 	ldw	r5,8(r16)
10103300:	18c00054 	ori	r3,r3,1
10103304:	10c00115 	stw	r3,4(r2)
10103308:	29000315 	stw	r4,12(r5)
1010330c:	21400215 	stw	r5,8(r4)
10103310:	9009883a 	mov	r4,r18
10103314:	010ed740 	call	1010ed74 <__malloc_unlock>
10103318:	80800204 	addi	r2,r16,8
1010331c:	003f2506 	br	10102fb4 <__alt_data_end+0xfffe2fb4>
10103320:	12001704 	addi	r8,r2,92
10103324:	11c016c4 	addi	r7,r2,91
10103328:	4209883a 	add	r4,r8,r8
1010332c:	003e9606 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103330:	3804d1ba 	srli	r2,r7,6
10103334:	11400e44 	addi	r5,r2,57
10103338:	10c00e04 	addi	r3,r2,56
1010333c:	294b883a 	add	r5,r5,r5
10103340:	003fbc06 	br	10103234 <__alt_data_end+0xfffe3234>
10103344:	84ff5926 	beq	r16,r19,101030ac <__alt_data_end+0xfffe30ac>
10103348:	00840474 	movhi	r2,4113
1010334c:	10876304 	addi	r2,r2,7564
10103350:	14000217 	ldw	r16,8(r2)
10103354:	00bfff04 	movi	r2,-4
10103358:	80c00117 	ldw	r3,4(r16)
1010335c:	1886703a 	and	r3,r3,r2
10103360:	003f9106 	br	101031a8 <__alt_data_end+0xfffe31a8>
10103364:	60800217 	ldw	r2,8(r12)
10103368:	213fffc4 	addi	r4,r4,-1
1010336c:	1300651e 	bne	r2,r12,10103504 <_malloc_r+0x7f4>
10103370:	208000cc 	andi	r2,r4,3
10103374:	633ffe04 	addi	r12,r12,-8
10103378:	103ffa1e 	bne	r2,zero,10103364 <__alt_data_end+0xfffe3364>
1010337c:	98800117 	ldw	r2,4(r19)
10103380:	0146303a 	nor	r3,zero,r5
10103384:	1884703a 	and	r2,r3,r2
10103388:	98800115 	stw	r2,4(r19)
1010338c:	294b883a 	add	r5,r5,r5
10103390:	117f2836 	bltu	r2,r5,10103034 <__alt_data_end+0xfffe3034>
10103394:	283f2726 	beq	r5,zero,10103034 <__alt_data_end+0xfffe3034>
10103398:	2886703a 	and	r3,r5,r2
1010339c:	5809883a 	mov	r4,r11
101033a0:	183ec31e 	bne	r3,zero,10102eb0 <__alt_data_end+0xfffe2eb0>
101033a4:	294b883a 	add	r5,r5,r5
101033a8:	2886703a 	and	r3,r5,r2
101033ac:	21000104 	addi	r4,r4,4
101033b0:	183ffc26 	beq	r3,zero,101033a4 <__alt_data_end+0xfffe33a4>
101033b4:	003ebe06 	br	10102eb0 <__alt_data_end+0xfffe2eb0>
101033b8:	00c05504 	movi	r3,340
101033bc:	18801236 	bltu	r3,r2,10103408 <_malloc_r+0x6f8>
101033c0:	8804d3fa 	srli	r2,r17,15
101033c4:	12001e04 	addi	r8,r2,120
101033c8:	11c01dc4 	addi	r7,r2,119
101033cc:	4209883a 	add	r4,r8,r8
101033d0:	003e6d06 	br	10102d88 <__alt_data_end+0xfffe2d88>
101033d4:	00c40004 	movi	r3,4096
101033d8:	003f4606 	br	101030f4 <__alt_data_end+0xfffe30f4>
101033dc:	00800044 	movi	r2,1
101033e0:	a0800115 	stw	r2,4(r20)
101033e4:	003f7406 	br	101031b8 <__alt_data_end+0xfffe31b8>
101033e8:	1805d0ba 	srai	r2,r3,2
101033ec:	01c00044 	movi	r7,1
101033f0:	30c00117 	ldw	r3,4(r6)
101033f4:	388e983a 	sll	r7,r7,r2
101033f8:	2805883a 	mov	r2,r5
101033fc:	38c6b03a 	or	r3,r7,r3
10103400:	30c00115 	stw	r3,4(r6)
10103404:	003f9b06 	br	10103274 <__alt_data_end+0xfffe3274>
10103408:	00c15504 	movi	r3,1364
1010340c:	18801a36 	bltu	r3,r2,10103478 <_malloc_r+0x768>
10103410:	8804d4ba 	srli	r2,r17,18
10103414:	12001f44 	addi	r8,r2,125
10103418:	11c01f04 	addi	r7,r2,124
1010341c:	4209883a 	add	r4,r8,r8
10103420:	003e5906 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103424:	ad400404 	addi	r21,r21,16
10103428:	003f1706 	br	10103088 <__alt_data_end+0xfffe3088>
1010342c:	00c01504 	movi	r3,84
10103430:	18802336 	bltu	r3,r2,101034c0 <_malloc_r+0x7b0>
10103434:	3804d33a 	srli	r2,r7,12
10103438:	11401bc4 	addi	r5,r2,111
1010343c:	10c01b84 	addi	r3,r2,110
10103440:	294b883a 	add	r5,r5,r5
10103444:	003f7b06 	br	10103234 <__alt_data_end+0xfffe3234>
10103448:	9c000217 	ldw	r16,8(r19)
1010344c:	00bfff04 	movi	r2,-4
10103450:	80c00117 	ldw	r3,4(r16)
10103454:	1886703a 	and	r3,r3,r2
10103458:	003f5306 	br	101031a8 <__alt_data_end+0xfffe31a8>
1010345c:	3083ffcc 	andi	r2,r6,4095
10103460:	103f181e 	bne	r2,zero,101030c4 <__alt_data_end+0xfffe30c4>
10103464:	99000217 	ldw	r4,8(r19)
10103468:	b545883a 	add	r2,r22,r21
1010346c:	10800054 	ori	r2,r2,1
10103470:	20800115 	stw	r2,4(r4)
10103474:	003f3e06 	br	10103170 <__alt_data_end+0xfffe3170>
10103478:	01003f84 	movi	r4,254
1010347c:	02001fc4 	movi	r8,127
10103480:	01c01f84 	movi	r7,126
10103484:	003e4006 	br	10102d88 <__alt_data_end+0xfffe2d88>
10103488:	00840474 	movhi	r2,4113
1010348c:	108d1104 	addi	r2,r2,13380
10103490:	15000015 	stw	r20,0(r2)
10103494:	003f1106 	br	101030dc <__alt_data_end+0xfffe30dc>
10103498:	00800044 	movi	r2,1
1010349c:	002b883a 	mov	r21,zero
101034a0:	003f1f06 	br	10103120 <__alt_data_end+0xfffe3120>
101034a4:	81400204 	addi	r5,r16,8
101034a8:	9009883a 	mov	r4,r18
101034ac:	01021e00 	call	101021e0 <_free_r>
101034b0:	00840474 	movhi	r2,4113
101034b4:	10941604 	addi	r2,r2,20568
101034b8:	10c00017 	ldw	r3,0(r2)
101034bc:	003f2c06 	br	10103170 <__alt_data_end+0xfffe3170>
101034c0:	00c05504 	movi	r3,340
101034c4:	18800536 	bltu	r3,r2,101034dc <_malloc_r+0x7cc>
101034c8:	3804d3fa 	srli	r2,r7,15
101034cc:	11401e04 	addi	r5,r2,120
101034d0:	10c01dc4 	addi	r3,r2,119
101034d4:	294b883a 	add	r5,r5,r5
101034d8:	003f5606 	br	10103234 <__alt_data_end+0xfffe3234>
101034dc:	00c15504 	movi	r3,1364
101034e0:	18800536 	bltu	r3,r2,101034f8 <_malloc_r+0x7e8>
101034e4:	3804d4ba 	srli	r2,r7,18
101034e8:	11401f44 	addi	r5,r2,125
101034ec:	10c01f04 	addi	r3,r2,124
101034f0:	294b883a 	add	r5,r5,r5
101034f4:	003f4f06 	br	10103234 <__alt_data_end+0xfffe3234>
101034f8:	01403f84 	movi	r5,254
101034fc:	00c01f84 	movi	r3,126
10103500:	003f4c06 	br	10103234 <__alt_data_end+0xfffe3234>
10103504:	98800117 	ldw	r2,4(r19)
10103508:	003fa006 	br	1010338c <__alt_data_end+0xfffe338c>
1010350c:	8808d0fa 	srli	r4,r17,3
10103510:	20800044 	addi	r2,r4,1
10103514:	1085883a 	add	r2,r2,r2
10103518:	003e9006 	br	10102f5c <__alt_data_end+0xfffe2f5c>

1010351c <memset>:
1010351c:	20c000cc 	andi	r3,r4,3
10103520:	2005883a 	mov	r2,r4
10103524:	18004426 	beq	r3,zero,10103638 <memset+0x11c>
10103528:	31ffffc4 	addi	r7,r6,-1
1010352c:	30004026 	beq	r6,zero,10103630 <memset+0x114>
10103530:	2813883a 	mov	r9,r5
10103534:	200d883a 	mov	r6,r4
10103538:	2007883a 	mov	r3,r4
1010353c:	00000406 	br	10103550 <memset+0x34>
10103540:	3a3fffc4 	addi	r8,r7,-1
10103544:	31800044 	addi	r6,r6,1
10103548:	38003926 	beq	r7,zero,10103630 <memset+0x114>
1010354c:	400f883a 	mov	r7,r8
10103550:	18c00044 	addi	r3,r3,1
10103554:	32400005 	stb	r9,0(r6)
10103558:	1a0000cc 	andi	r8,r3,3
1010355c:	403ff81e 	bne	r8,zero,10103540 <__alt_data_end+0xfffe3540>
10103560:	010000c4 	movi	r4,3
10103564:	21c02d2e 	bgeu	r4,r7,1010361c <memset+0x100>
10103568:	29003fcc 	andi	r4,r5,255
1010356c:	200c923a 	slli	r6,r4,8
10103570:	3108b03a 	or	r4,r6,r4
10103574:	200c943a 	slli	r6,r4,16
10103578:	218cb03a 	or	r6,r4,r6
1010357c:	010003c4 	movi	r4,15
10103580:	21c0182e 	bgeu	r4,r7,101035e4 <memset+0xc8>
10103584:	3b3ffc04 	addi	r12,r7,-16
10103588:	6018d13a 	srli	r12,r12,4
1010358c:	1a000104 	addi	r8,r3,4
10103590:	1ac00204 	addi	r11,r3,8
10103594:	6008913a 	slli	r4,r12,4
10103598:	1a800304 	addi	r10,r3,12
1010359c:	1813883a 	mov	r9,r3
101035a0:	21000504 	addi	r4,r4,20
101035a4:	1909883a 	add	r4,r3,r4
101035a8:	49800015 	stw	r6,0(r9)
101035ac:	41800015 	stw	r6,0(r8)
101035b0:	59800015 	stw	r6,0(r11)
101035b4:	51800015 	stw	r6,0(r10)
101035b8:	42000404 	addi	r8,r8,16
101035bc:	4a400404 	addi	r9,r9,16
101035c0:	5ac00404 	addi	r11,r11,16
101035c4:	52800404 	addi	r10,r10,16
101035c8:	413ff71e 	bne	r8,r4,101035a8 <__alt_data_end+0xfffe35a8>
101035cc:	63000044 	addi	r12,r12,1
101035d0:	6018913a 	slli	r12,r12,4
101035d4:	39c003cc 	andi	r7,r7,15
101035d8:	010000c4 	movi	r4,3
101035dc:	1b07883a 	add	r3,r3,r12
101035e0:	21c00e2e 	bgeu	r4,r7,1010361c <memset+0x100>
101035e4:	1813883a 	mov	r9,r3
101035e8:	3811883a 	mov	r8,r7
101035ec:	010000c4 	movi	r4,3
101035f0:	49800015 	stw	r6,0(r9)
101035f4:	423fff04 	addi	r8,r8,-4
101035f8:	4a400104 	addi	r9,r9,4
101035fc:	223ffc36 	bltu	r4,r8,101035f0 <__alt_data_end+0xfffe35f0>
10103600:	393fff04 	addi	r4,r7,-4
10103604:	2008d0ba 	srli	r4,r4,2
10103608:	39c000cc 	andi	r7,r7,3
1010360c:	21000044 	addi	r4,r4,1
10103610:	2109883a 	add	r4,r4,r4
10103614:	2109883a 	add	r4,r4,r4
10103618:	1907883a 	add	r3,r3,r4
1010361c:	38000526 	beq	r7,zero,10103634 <memset+0x118>
10103620:	19cf883a 	add	r7,r3,r7
10103624:	19400005 	stb	r5,0(r3)
10103628:	18c00044 	addi	r3,r3,1
1010362c:	38fffd1e 	bne	r7,r3,10103624 <__alt_data_end+0xfffe3624>
10103630:	f800283a 	ret
10103634:	f800283a 	ret
10103638:	2007883a 	mov	r3,r4
1010363c:	300f883a 	mov	r7,r6
10103640:	003fc706 	br	10103560 <__alt_data_end+0xfffe3560>

10103644 <_open_r>:
10103644:	defffd04 	addi	sp,sp,-12
10103648:	2805883a 	mov	r2,r5
1010364c:	dc000015 	stw	r16,0(sp)
10103650:	04040474 	movhi	r16,4113
10103654:	dc400115 	stw	r17,4(sp)
10103658:	300b883a 	mov	r5,r6
1010365c:	84140804 	addi	r16,r16,20512
10103660:	2023883a 	mov	r17,r4
10103664:	380d883a 	mov	r6,r7
10103668:	1009883a 	mov	r4,r2
1010366c:	dfc00215 	stw	ra,8(sp)
10103670:	80000015 	stw	zero,0(r16)
10103674:	010eeb40 	call	1010eeb4 <open>
10103678:	00ffffc4 	movi	r3,-1
1010367c:	10c00526 	beq	r2,r3,10103694 <_open_r+0x50>
10103680:	dfc00217 	ldw	ra,8(sp)
10103684:	dc400117 	ldw	r17,4(sp)
10103688:	dc000017 	ldw	r16,0(sp)
1010368c:	dec00304 	addi	sp,sp,12
10103690:	f800283a 	ret
10103694:	80c00017 	ldw	r3,0(r16)
10103698:	183ff926 	beq	r3,zero,10103680 <__alt_data_end+0xfffe3680>
1010369c:	88c00015 	stw	r3,0(r17)
101036a0:	003ff706 	br	10103680 <__alt_data_end+0xfffe3680>

101036a4 <_printf_r>:
101036a4:	defffd04 	addi	sp,sp,-12
101036a8:	2805883a 	mov	r2,r5
101036ac:	dfc00015 	stw	ra,0(sp)
101036b0:	d9800115 	stw	r6,4(sp)
101036b4:	d9c00215 	stw	r7,8(sp)
101036b8:	21400217 	ldw	r5,8(r4)
101036bc:	d9c00104 	addi	r7,sp,4
101036c0:	100d883a 	mov	r6,r2
101036c4:	0103a900 	call	10103a90 <___vfprintf_internal_r>
101036c8:	dfc00017 	ldw	ra,0(sp)
101036cc:	dec00304 	addi	sp,sp,12
101036d0:	f800283a 	ret

101036d4 <printf>:
101036d4:	defffc04 	addi	sp,sp,-16
101036d8:	dfc00015 	stw	ra,0(sp)
101036dc:	d9400115 	stw	r5,4(sp)
101036e0:	d9800215 	stw	r6,8(sp)
101036e4:	d9c00315 	stw	r7,12(sp)
101036e8:	00840474 	movhi	r2,4113
101036ec:	108d1004 	addi	r2,r2,13376
101036f0:	10800017 	ldw	r2,0(r2)
101036f4:	200b883a 	mov	r5,r4
101036f8:	d9800104 	addi	r6,sp,4
101036fc:	11000217 	ldw	r4,8(r2)
10103700:	0105c880 	call	10105c88 <__vfprintf_internal>
10103704:	dfc00017 	ldw	ra,0(sp)
10103708:	dec00404 	addi	sp,sp,16
1010370c:	f800283a 	ret

10103710 <lflush>:
10103710:	2080030b 	ldhu	r2,12(r4)
10103714:	00c00244 	movi	r3,9
10103718:	1080024c 	andi	r2,r2,9
1010371c:	10c00226 	beq	r2,r3,10103728 <lflush+0x18>
10103720:	0005883a 	mov	r2,zero
10103724:	f800283a 	ret
10103728:	0101b941 	jmpi	10101b94 <fflush>

1010372c <__srefill_r>:
1010372c:	defffc04 	addi	sp,sp,-16
10103730:	dc400115 	stw	r17,4(sp)
10103734:	dc000015 	stw	r16,0(sp)
10103738:	dfc00315 	stw	ra,12(sp)
1010373c:	dc800215 	stw	r18,8(sp)
10103740:	2023883a 	mov	r17,r4
10103744:	2821883a 	mov	r16,r5
10103748:	20000226 	beq	r4,zero,10103754 <__srefill_r+0x28>
1010374c:	20800e17 	ldw	r2,56(r4)
10103750:	10003c26 	beq	r2,zero,10103844 <__srefill_r+0x118>
10103754:	80c0030b 	ldhu	r3,12(r16)
10103758:	1908000c 	andi	r4,r3,8192
1010375c:	1805883a 	mov	r2,r3
10103760:	2000071e 	bne	r4,zero,10103780 <__srefill_r+0x54>
10103764:	81001917 	ldw	r4,100(r16)
10103768:	18880014 	ori	r2,r3,8192
1010376c:	00f7ffc4 	movi	r3,-8193
10103770:	20c8703a 	and	r4,r4,r3
10103774:	8080030d 	sth	r2,12(r16)
10103778:	1007883a 	mov	r3,r2
1010377c:	81001915 	stw	r4,100(r16)
10103780:	80000115 	stw	zero,4(r16)
10103784:	1100080c 	andi	r4,r2,32
10103788:	2000571e 	bne	r4,zero,101038e8 <__srefill_r+0x1bc>
1010378c:	1100010c 	andi	r4,r2,4
10103790:	20001f26 	beq	r4,zero,10103810 <__srefill_r+0xe4>
10103794:	81400c17 	ldw	r5,48(r16)
10103798:	28000826 	beq	r5,zero,101037bc <__srefill_r+0x90>
1010379c:	80801004 	addi	r2,r16,64
101037a0:	28800226 	beq	r5,r2,101037ac <__srefill_r+0x80>
101037a4:	8809883a 	mov	r4,r17
101037a8:	01021e00 	call	101021e0 <_free_r>
101037ac:	80800f17 	ldw	r2,60(r16)
101037b0:	80000c15 	stw	zero,48(r16)
101037b4:	80800115 	stw	r2,4(r16)
101037b8:	1000391e 	bne	r2,zero,101038a0 <__srefill_r+0x174>
101037bc:	80800417 	ldw	r2,16(r16)
101037c0:	10004b26 	beq	r2,zero,101038f0 <__srefill_r+0x1c4>
101037c4:	8480030b 	ldhu	r18,12(r16)
101037c8:	908000cc 	andi	r2,r18,3
101037cc:	10001f1e 	bne	r2,zero,1010384c <__srefill_r+0x120>
101037d0:	81800417 	ldw	r6,16(r16)
101037d4:	80800817 	ldw	r2,32(r16)
101037d8:	81c00517 	ldw	r7,20(r16)
101037dc:	81400717 	ldw	r5,28(r16)
101037e0:	81800015 	stw	r6,0(r16)
101037e4:	8809883a 	mov	r4,r17
101037e8:	103ee83a 	callr	r2
101037ec:	80800115 	stw	r2,4(r16)
101037f0:	00800e0e 	bge	zero,r2,1010382c <__srefill_r+0x100>
101037f4:	0005883a 	mov	r2,zero
101037f8:	dfc00317 	ldw	ra,12(sp)
101037fc:	dc800217 	ldw	r18,8(sp)
10103800:	dc400117 	ldw	r17,4(sp)
10103804:	dc000017 	ldw	r16,0(sp)
10103808:	dec00404 	addi	sp,sp,16
1010380c:	f800283a 	ret
10103810:	1100040c 	andi	r4,r2,16
10103814:	20003026 	beq	r4,zero,101038d8 <__srefill_r+0x1ac>
10103818:	1080020c 	andi	r2,r2,8
1010381c:	1000241e 	bne	r2,zero,101038b0 <__srefill_r+0x184>
10103820:	18c00114 	ori	r3,r3,4
10103824:	80c0030d 	sth	r3,12(r16)
10103828:	003fe406 	br	101037bc <__alt_data_end+0xfffe37bc>
1010382c:	80c0030b 	ldhu	r3,12(r16)
10103830:	1000161e 	bne	r2,zero,1010388c <__srefill_r+0x160>
10103834:	18c00814 	ori	r3,r3,32
10103838:	00bfffc4 	movi	r2,-1
1010383c:	80c0030d 	sth	r3,12(r16)
10103840:	003fed06 	br	101037f8 <__alt_data_end+0xfffe37f8>
10103844:	0101f140 	call	10101f14 <__sinit>
10103848:	003fc206 	br	10103754 <__alt_data_end+0xfffe3754>
1010384c:	00840474 	movhi	r2,4113
10103850:	108d0f04 	addi	r2,r2,13372
10103854:	11000017 	ldw	r4,0(r2)
10103858:	01440434 	movhi	r5,4112
1010385c:	00800044 	movi	r2,1
10103860:	294dc404 	addi	r5,r5,14096
10103864:	8080030d 	sth	r2,12(r16)
10103868:	01029cc0 	call	101029cc <_fwalk>
1010386c:	00800244 	movi	r2,9
10103870:	8480030d 	sth	r18,12(r16)
10103874:	9480024c 	andi	r18,r18,9
10103878:	90bfd51e 	bne	r18,r2,101037d0 <__alt_data_end+0xfffe37d0>
1010387c:	800b883a 	mov	r5,r16
10103880:	8809883a 	mov	r4,r17
10103884:	010191c0 	call	1010191c <__sflush_r>
10103888:	003fd106 	br	101037d0 <__alt_data_end+0xfffe37d0>
1010388c:	18c01014 	ori	r3,r3,64
10103890:	80000115 	stw	zero,4(r16)
10103894:	00bfffc4 	movi	r2,-1
10103898:	80c0030d 	sth	r3,12(r16)
1010389c:	003fd606 	br	101037f8 <__alt_data_end+0xfffe37f8>
101038a0:	80c00e17 	ldw	r3,56(r16)
101038a4:	0005883a 	mov	r2,zero
101038a8:	80c00015 	stw	r3,0(r16)
101038ac:	003fd206 	br	101037f8 <__alt_data_end+0xfffe37f8>
101038b0:	800b883a 	mov	r5,r16
101038b4:	8809883a 	mov	r4,r17
101038b8:	0101b380 	call	10101b38 <_fflush_r>
101038bc:	10000a1e 	bne	r2,zero,101038e8 <__srefill_r+0x1bc>
101038c0:	8080030b 	ldhu	r2,12(r16)
101038c4:	00fffdc4 	movi	r3,-9
101038c8:	80000215 	stw	zero,8(r16)
101038cc:	1886703a 	and	r3,r3,r2
101038d0:	80000615 	stw	zero,24(r16)
101038d4:	003fd206 	br	10103820 <__alt_data_end+0xfffe3820>
101038d8:	00800244 	movi	r2,9
101038dc:	88800015 	stw	r2,0(r17)
101038e0:	18c01014 	ori	r3,r3,64
101038e4:	80c0030d 	sth	r3,12(r16)
101038e8:	00bfffc4 	movi	r2,-1
101038ec:	003fc206 	br	101037f8 <__alt_data_end+0xfffe37f8>
101038f0:	800b883a 	mov	r5,r16
101038f4:	8809883a 	mov	r4,r17
101038f8:	0102b540 	call	10102b54 <__smakebuf_r>
101038fc:	003fb106 	br	101037c4 <__alt_data_end+0xfffe37c4>

10103900 <_sbrk_r>:
10103900:	defffd04 	addi	sp,sp,-12
10103904:	dc000015 	stw	r16,0(sp)
10103908:	04040474 	movhi	r16,4113
1010390c:	dc400115 	stw	r17,4(sp)
10103910:	84140804 	addi	r16,r16,20512
10103914:	2023883a 	mov	r17,r4
10103918:	2809883a 	mov	r4,r5
1010391c:	dfc00215 	stw	ra,8(sp)
10103920:	80000015 	stw	zero,0(r16)
10103924:	010f1bc0 	call	1010f1bc <sbrk>
10103928:	00ffffc4 	movi	r3,-1
1010392c:	10c00526 	beq	r2,r3,10103944 <_sbrk_r+0x44>
10103930:	dfc00217 	ldw	ra,8(sp)
10103934:	dc400117 	ldw	r17,4(sp)
10103938:	dc000017 	ldw	r16,0(sp)
1010393c:	dec00304 	addi	sp,sp,12
10103940:	f800283a 	ret
10103944:	80c00017 	ldw	r3,0(r16)
10103948:	183ff926 	beq	r3,zero,10103930 <__alt_data_end+0xfffe3930>
1010394c:	88c00015 	stw	r3,0(r17)
10103950:	003ff706 	br	10103930 <__alt_data_end+0xfffe3930>

10103954 <__sread>:
10103954:	defffe04 	addi	sp,sp,-8
10103958:	dc000015 	stw	r16,0(sp)
1010395c:	2821883a 	mov	r16,r5
10103960:	2940038f 	ldh	r5,14(r5)
10103964:	dfc00115 	stw	ra,4(sp)
10103968:	0108c540 	call	10108c54 <_read_r>
1010396c:	10000716 	blt	r2,zero,1010398c <__sread+0x38>
10103970:	80c01417 	ldw	r3,80(r16)
10103974:	1887883a 	add	r3,r3,r2
10103978:	80c01415 	stw	r3,80(r16)
1010397c:	dfc00117 	ldw	ra,4(sp)
10103980:	dc000017 	ldw	r16,0(sp)
10103984:	dec00204 	addi	sp,sp,8
10103988:	f800283a 	ret
1010398c:	80c0030b 	ldhu	r3,12(r16)
10103990:	18fbffcc 	andi	r3,r3,61439
10103994:	80c0030d 	sth	r3,12(r16)
10103998:	dfc00117 	ldw	ra,4(sp)
1010399c:	dc000017 	ldw	r16,0(sp)
101039a0:	dec00204 	addi	sp,sp,8
101039a4:	f800283a 	ret

101039a8 <__seofread>:
101039a8:	0005883a 	mov	r2,zero
101039ac:	f800283a 	ret

101039b0 <__swrite>:
101039b0:	2880030b 	ldhu	r2,12(r5)
101039b4:	defffb04 	addi	sp,sp,-20
101039b8:	dcc00315 	stw	r19,12(sp)
101039bc:	dc800215 	stw	r18,8(sp)
101039c0:	dc400115 	stw	r17,4(sp)
101039c4:	dc000015 	stw	r16,0(sp)
101039c8:	dfc00415 	stw	ra,16(sp)
101039cc:	10c0400c 	andi	r3,r2,256
101039d0:	2821883a 	mov	r16,r5
101039d4:	2023883a 	mov	r17,r4
101039d8:	3025883a 	mov	r18,r6
101039dc:	3827883a 	mov	r19,r7
101039e0:	18000526 	beq	r3,zero,101039f8 <__swrite+0x48>
101039e4:	2940038f 	ldh	r5,14(r5)
101039e8:	01c00084 	movi	r7,2
101039ec:	000d883a 	mov	r6,zero
101039f0:	01079cc0 	call	101079cc <_lseek_r>
101039f4:	8080030b 	ldhu	r2,12(r16)
101039f8:	8140038f 	ldh	r5,14(r16)
101039fc:	10bbffcc 	andi	r2,r2,61439
10103a00:	980f883a 	mov	r7,r19
10103a04:	900d883a 	mov	r6,r18
10103a08:	8809883a 	mov	r4,r17
10103a0c:	8080030d 	sth	r2,12(r16)
10103a10:	dfc00417 	ldw	ra,16(sp)
10103a14:	dcc00317 	ldw	r19,12(sp)
10103a18:	dc800217 	ldw	r18,8(sp)
10103a1c:	dc400117 	ldw	r17,4(sp)
10103a20:	dc000017 	ldw	r16,0(sp)
10103a24:	dec00504 	addi	sp,sp,20
10103a28:	0105d601 	jmpi	10105d60 <_write_r>

10103a2c <__sseek>:
10103a2c:	defffe04 	addi	sp,sp,-8
10103a30:	dc000015 	stw	r16,0(sp)
10103a34:	2821883a 	mov	r16,r5
10103a38:	2940038f 	ldh	r5,14(r5)
10103a3c:	dfc00115 	stw	ra,4(sp)
10103a40:	01079cc0 	call	101079cc <_lseek_r>
10103a44:	00ffffc4 	movi	r3,-1
10103a48:	10c00826 	beq	r2,r3,10103a6c <__sseek+0x40>
10103a4c:	80c0030b 	ldhu	r3,12(r16)
10103a50:	80801415 	stw	r2,80(r16)
10103a54:	18c40014 	ori	r3,r3,4096
10103a58:	80c0030d 	sth	r3,12(r16)
10103a5c:	dfc00117 	ldw	ra,4(sp)
10103a60:	dc000017 	ldw	r16,0(sp)
10103a64:	dec00204 	addi	sp,sp,8
10103a68:	f800283a 	ret
10103a6c:	80c0030b 	ldhu	r3,12(r16)
10103a70:	18fbffcc 	andi	r3,r3,61439
10103a74:	80c0030d 	sth	r3,12(r16)
10103a78:	dfc00117 	ldw	ra,4(sp)
10103a7c:	dc000017 	ldw	r16,0(sp)
10103a80:	dec00204 	addi	sp,sp,8
10103a84:	f800283a 	ret

10103a88 <__sclose>:
10103a88:	2940038f 	ldh	r5,14(r5)
10103a8c:	0105f141 	jmpi	10105f14 <_close_r>

10103a90 <___vfprintf_internal_r>:
10103a90:	deffb804 	addi	sp,sp,-288
10103a94:	dfc04715 	stw	ra,284(sp)
10103a98:	ddc04515 	stw	r23,276(sp)
10103a9c:	dd404315 	stw	r21,268(sp)
10103aa0:	d9002c15 	stw	r4,176(sp)
10103aa4:	282f883a 	mov	r23,r5
10103aa8:	302b883a 	mov	r21,r6
10103aac:	d9c02d15 	stw	r7,180(sp)
10103ab0:	df004615 	stw	fp,280(sp)
10103ab4:	dd804415 	stw	r22,272(sp)
10103ab8:	dd004215 	stw	r20,264(sp)
10103abc:	dcc04115 	stw	r19,260(sp)
10103ac0:	dc804015 	stw	r18,256(sp)
10103ac4:	dc403f15 	stw	r17,252(sp)
10103ac8:	dc003e15 	stw	r16,248(sp)
10103acc:	010799c0 	call	1010799c <_localeconv_r>
10103ad0:	10800017 	ldw	r2,0(r2)
10103ad4:	1009883a 	mov	r4,r2
10103ad8:	d8803415 	stw	r2,208(sp)
10103adc:	0108e040 	call	10108e04 <strlen>
10103ae0:	d8803715 	stw	r2,220(sp)
10103ae4:	d8802c17 	ldw	r2,176(sp)
10103ae8:	10000226 	beq	r2,zero,10103af4 <___vfprintf_internal_r+0x64>
10103aec:	10800e17 	ldw	r2,56(r2)
10103af0:	1000f926 	beq	r2,zero,10103ed8 <___vfprintf_internal_r+0x448>
10103af4:	b880030b 	ldhu	r2,12(r23)
10103af8:	10c8000c 	andi	r3,r2,8192
10103afc:	1800061e 	bne	r3,zero,10103b18 <___vfprintf_internal_r+0x88>
10103b00:	b9001917 	ldw	r4,100(r23)
10103b04:	00f7ffc4 	movi	r3,-8193
10103b08:	10880014 	ori	r2,r2,8192
10103b0c:	20c6703a 	and	r3,r4,r3
10103b10:	b880030d 	sth	r2,12(r23)
10103b14:	b8c01915 	stw	r3,100(r23)
10103b18:	10c0020c 	andi	r3,r2,8
10103b1c:	1800c126 	beq	r3,zero,10103e24 <___vfprintf_internal_r+0x394>
10103b20:	b8c00417 	ldw	r3,16(r23)
10103b24:	1800bf26 	beq	r3,zero,10103e24 <___vfprintf_internal_r+0x394>
10103b28:	1080068c 	andi	r2,r2,26
10103b2c:	00c00284 	movi	r3,10
10103b30:	10c0c426 	beq	r2,r3,10103e44 <___vfprintf_internal_r+0x3b4>
10103b34:	d8c00404 	addi	r3,sp,16
10103b38:	05040474 	movhi	r20,4113
10103b3c:	d9001e04 	addi	r4,sp,120
10103b40:	a505a984 	addi	r20,r20,5798
10103b44:	d8c01e15 	stw	r3,120(sp)
10103b48:	d8002015 	stw	zero,128(sp)
10103b4c:	d8001f15 	stw	zero,124(sp)
10103b50:	d8003315 	stw	zero,204(sp)
10103b54:	d8003615 	stw	zero,216(sp)
10103b58:	d8003815 	stw	zero,224(sp)
10103b5c:	1811883a 	mov	r8,r3
10103b60:	d8003915 	stw	zero,228(sp)
10103b64:	d8003a15 	stw	zero,232(sp)
10103b68:	d8002f15 	stw	zero,188(sp)
10103b6c:	d9002815 	stw	r4,160(sp)
10103b70:	a8800007 	ldb	r2,0(r21)
10103b74:	10027b26 	beq	r2,zero,10104564 <___vfprintf_internal_r+0xad4>
10103b78:	00c00944 	movi	r3,37
10103b7c:	a821883a 	mov	r16,r21
10103b80:	10c0021e 	bne	r2,r3,10103b8c <___vfprintf_internal_r+0xfc>
10103b84:	00001406 	br	10103bd8 <___vfprintf_internal_r+0x148>
10103b88:	10c00326 	beq	r2,r3,10103b98 <___vfprintf_internal_r+0x108>
10103b8c:	84000044 	addi	r16,r16,1
10103b90:	80800007 	ldb	r2,0(r16)
10103b94:	103ffc1e 	bne	r2,zero,10103b88 <__alt_data_end+0xfffe3b88>
10103b98:	8563c83a 	sub	r17,r16,r21
10103b9c:	88000e26 	beq	r17,zero,10103bd8 <___vfprintf_internal_r+0x148>
10103ba0:	d8c02017 	ldw	r3,128(sp)
10103ba4:	d8801f17 	ldw	r2,124(sp)
10103ba8:	45400015 	stw	r21,0(r8)
10103bac:	1c47883a 	add	r3,r3,r17
10103bb0:	10800044 	addi	r2,r2,1
10103bb4:	d8c02015 	stw	r3,128(sp)
10103bb8:	44400115 	stw	r17,4(r8)
10103bbc:	d8801f15 	stw	r2,124(sp)
10103bc0:	00c001c4 	movi	r3,7
10103bc4:	1880a716 	blt	r3,r2,10103e64 <___vfprintf_internal_r+0x3d4>
10103bc8:	42000204 	addi	r8,r8,8
10103bcc:	d9402f17 	ldw	r5,188(sp)
10103bd0:	2c4b883a 	add	r5,r5,r17
10103bd4:	d9402f15 	stw	r5,188(sp)
10103bd8:	80800007 	ldb	r2,0(r16)
10103bdc:	1000a826 	beq	r2,zero,10103e80 <___vfprintf_internal_r+0x3f0>
10103be0:	84400047 	ldb	r17,1(r16)
10103be4:	00bfffc4 	movi	r2,-1
10103be8:	85400044 	addi	r21,r16,1
10103bec:	d8002785 	stb	zero,158(sp)
10103bf0:	0007883a 	mov	r3,zero
10103bf4:	000f883a 	mov	r7,zero
10103bf8:	d8802915 	stw	r2,164(sp)
10103bfc:	d8003115 	stw	zero,196(sp)
10103c00:	0025883a 	mov	r18,zero
10103c04:	01401604 	movi	r5,88
10103c08:	01800244 	movi	r6,9
10103c0c:	02800a84 	movi	r10,42
10103c10:	02401b04 	movi	r9,108
10103c14:	ad400044 	addi	r21,r21,1
10103c18:	88bff804 	addi	r2,r17,-32
10103c1c:	28830436 	bltu	r5,r2,10104830 <___vfprintf_internal_r+0xda0>
10103c20:	100490ba 	slli	r2,r2,2
10103c24:	01040434 	movhi	r4,4112
10103c28:	210f0e04 	addi	r4,r4,15416
10103c2c:	1105883a 	add	r2,r2,r4
10103c30:	10800017 	ldw	r2,0(r2)
10103c34:	1000683a 	jmp	r2
10103c38:	10104750 	cmplti	zero,r2,16669
10103c3c:	10104830 	cmpltui	zero,r2,16672
10103c40:	10104830 	cmpltui	zero,r2,16672
10103c44:	10104770 	cmpltui	zero,r2,16669
10103c48:	10104830 	cmpltui	zero,r2,16672
10103c4c:	10104830 	cmpltui	zero,r2,16672
10103c50:	10104830 	cmpltui	zero,r2,16672
10103c54:	10104830 	cmpltui	zero,r2,16672
10103c58:	10104830 	cmpltui	zero,r2,16672
10103c5c:	10104830 	cmpltui	zero,r2,16672
10103c60:	10103ee4 	muli	zero,r2,16635
10103c64:	1010468c 	andi	zero,r2,16666
10103c68:	10104830 	cmpltui	zero,r2,16672
10103c6c:	10103dac 	andhi	zero,r2,16630
10103c70:	10103f0c 	andi	zero,r2,16636
10103c74:	10104830 	cmpltui	zero,r2,16672
10103c78:	10103f4c 	andi	zero,r2,16637
10103c7c:	10103f58 	cmpnei	zero,r2,16637
10103c80:	10103f58 	cmpnei	zero,r2,16637
10103c84:	10103f58 	cmpnei	zero,r2,16637
10103c88:	10103f58 	cmpnei	zero,r2,16637
10103c8c:	10103f58 	cmpnei	zero,r2,16637
10103c90:	10103f58 	cmpnei	zero,r2,16637
10103c94:	10103f58 	cmpnei	zero,r2,16637
10103c98:	10103f58 	cmpnei	zero,r2,16637
10103c9c:	10103f58 	cmpnei	zero,r2,16637
10103ca0:	10104830 	cmpltui	zero,r2,16672
10103ca4:	10104830 	cmpltui	zero,r2,16672
10103ca8:	10104830 	cmpltui	zero,r2,16672
10103cac:	10104830 	cmpltui	zero,r2,16672
10103cb0:	10104830 	cmpltui	zero,r2,16672
10103cb4:	10104830 	cmpltui	zero,r2,16672
10103cb8:	10104830 	cmpltui	zero,r2,16672
10103cbc:	10104830 	cmpltui	zero,r2,16672
10103cc0:	10104830 	cmpltui	zero,r2,16672
10103cc4:	10104830 	cmpltui	zero,r2,16672
10103cc8:	10103f8c 	andi	zero,r2,16638
10103ccc:	10104048 	cmpgei	zero,r2,16641
10103cd0:	10104830 	cmpltui	zero,r2,16672
10103cd4:	10104048 	cmpgei	zero,r2,16641
10103cd8:	10104830 	cmpltui	zero,r2,16672
10103cdc:	10104830 	cmpltui	zero,r2,16672
10103ce0:	10104830 	cmpltui	zero,r2,16672
10103ce4:	10104830 	cmpltui	zero,r2,16672
10103ce8:	101040e8 	cmpgeui	zero,r2,16643
10103cec:	10104830 	cmpltui	zero,r2,16672
10103cf0:	10104830 	cmpltui	zero,r2,16672
10103cf4:	101040f4 	orhi	zero,r2,16643
10103cf8:	10104830 	cmpltui	zero,r2,16672
10103cfc:	10104830 	cmpltui	zero,r2,16672
10103d00:	10104830 	cmpltui	zero,r2,16672
10103d04:	10104830 	cmpltui	zero,r2,16672
10103d08:	10104830 	cmpltui	zero,r2,16672
10103d0c:	1010456c 	andhi	zero,r2,16661
10103d10:	10104830 	cmpltui	zero,r2,16672
10103d14:	10104830 	cmpltui	zero,r2,16672
10103d18:	101045cc 	andi	zero,r2,16663
10103d1c:	10104830 	cmpltui	zero,r2,16672
10103d20:	10104830 	cmpltui	zero,r2,16672
10103d24:	10104830 	cmpltui	zero,r2,16672
10103d28:	10104830 	cmpltui	zero,r2,16672
10103d2c:	10104830 	cmpltui	zero,r2,16672
10103d30:	10104830 	cmpltui	zero,r2,16672
10103d34:	10104830 	cmpltui	zero,r2,16672
10103d38:	10104830 	cmpltui	zero,r2,16672
10103d3c:	10104830 	cmpltui	zero,r2,16672
10103d40:	10104830 	cmpltui	zero,r2,16672
10103d44:	101047dc 	xori	zero,r2,16671
10103d48:	1010477c 	xorhi	zero,r2,16669
10103d4c:	10104048 	cmpgei	zero,r2,16641
10103d50:	10104048 	cmpgei	zero,r2,16641
10103d54:	10104048 	cmpgei	zero,r2,16641
10103d58:	1010478c 	andi	zero,r2,16670
10103d5c:	1010477c 	xorhi	zero,r2,16669
10103d60:	10104830 	cmpltui	zero,r2,16672
10103d64:	10104830 	cmpltui	zero,r2,16672
10103d68:	10104798 	cmpnei	zero,r2,16670
10103d6c:	10104830 	cmpltui	zero,r2,16672
10103d70:	101047a8 	cmpgeui	zero,r2,16670
10103d74:	1010467c 	xorhi	zero,r2,16665
10103d78:	10103db8 	rdprs	zero,r2,16630
10103d7c:	1010469c 	xori	zero,r2,16666
10103d80:	10104830 	cmpltui	zero,r2,16672
10103d84:	101046a8 	cmpgeui	zero,r2,16666
10103d88:	10104830 	cmpltui	zero,r2,16672
10103d8c:	10104704 	addi	zero,r2,16668
10103d90:	10104830 	cmpltui	zero,r2,16672
10103d94:	10104830 	cmpltui	zero,r2,16672
10103d98:	10104714 	ori	zero,r2,16668
10103d9c:	d9003117 	ldw	r4,196(sp)
10103da0:	d8802d15 	stw	r2,180(sp)
10103da4:	0109c83a 	sub	r4,zero,r4
10103da8:	d9003115 	stw	r4,196(sp)
10103dac:	94800114 	ori	r18,r18,4
10103db0:	ac400007 	ldb	r17,0(r21)
10103db4:	003f9706 	br	10103c14 <__alt_data_end+0xfffe3c14>
10103db8:	00800c04 	movi	r2,48
10103dbc:	d9002d17 	ldw	r4,180(sp)
10103dc0:	d9402917 	ldw	r5,164(sp)
10103dc4:	d8802705 	stb	r2,156(sp)
10103dc8:	00801e04 	movi	r2,120
10103dcc:	d8802745 	stb	r2,157(sp)
10103dd0:	d8002785 	stb	zero,158(sp)
10103dd4:	20c00104 	addi	r3,r4,4
10103dd8:	24c00017 	ldw	r19,0(r4)
10103ddc:	002d883a 	mov	r22,zero
10103de0:	90800094 	ori	r2,r18,2
10103de4:	28029a16 	blt	r5,zero,10104850 <___vfprintf_internal_r+0xdc0>
10103de8:	00bfdfc4 	movi	r2,-129
10103dec:	90a4703a 	and	r18,r18,r2
10103df0:	d8c02d15 	stw	r3,180(sp)
10103df4:	94800094 	ori	r18,r18,2
10103df8:	9802871e 	bne	r19,zero,10104818 <___vfprintf_internal_r+0xd88>
10103dfc:	00840474 	movhi	r2,4113
10103e00:	1085a204 	addi	r2,r2,5768
10103e04:	d8803915 	stw	r2,228(sp)
10103e08:	04401e04 	movi	r17,120
10103e0c:	d8802917 	ldw	r2,164(sp)
10103e10:	0039883a 	mov	fp,zero
10103e14:	1001e926 	beq	r2,zero,101045bc <___vfprintf_internal_r+0xb2c>
10103e18:	0027883a 	mov	r19,zero
10103e1c:	002d883a 	mov	r22,zero
10103e20:	00020506 	br	10104638 <___vfprintf_internal_r+0xba8>
10103e24:	d9002c17 	ldw	r4,176(sp)
10103e28:	b80b883a 	mov	r5,r23
10103e2c:	0105dc00 	call	10105dc0 <__swsetup_r>
10103e30:	1005ac1e 	bne	r2,zero,101054e4 <___vfprintf_internal_r+0x1a54>
10103e34:	b880030b 	ldhu	r2,12(r23)
10103e38:	00c00284 	movi	r3,10
10103e3c:	1080068c 	andi	r2,r2,26
10103e40:	10ff3c1e 	bne	r2,r3,10103b34 <__alt_data_end+0xfffe3b34>
10103e44:	b880038f 	ldh	r2,14(r23)
10103e48:	103f3a16 	blt	r2,zero,10103b34 <__alt_data_end+0xfffe3b34>
10103e4c:	d9c02d17 	ldw	r7,180(sp)
10103e50:	d9002c17 	ldw	r4,176(sp)
10103e54:	a80d883a 	mov	r6,r21
10103e58:	b80b883a 	mov	r5,r23
10103e5c:	0105ca40 	call	10105ca4 <__sbprintf>
10103e60:	00001106 	br	10103ea8 <___vfprintf_internal_r+0x418>
10103e64:	d9002c17 	ldw	r4,176(sp)
10103e68:	d9801e04 	addi	r6,sp,120
10103e6c:	b80b883a 	mov	r5,r23
10103e70:	0108f980 	call	10108f98 <__sprint_r>
10103e74:	1000081e 	bne	r2,zero,10103e98 <___vfprintf_internal_r+0x408>
10103e78:	da000404 	addi	r8,sp,16
10103e7c:	003f5306 	br	10103bcc <__alt_data_end+0xfffe3bcc>
10103e80:	d8802017 	ldw	r2,128(sp)
10103e84:	10000426 	beq	r2,zero,10103e98 <___vfprintf_internal_r+0x408>
10103e88:	d9002c17 	ldw	r4,176(sp)
10103e8c:	d9801e04 	addi	r6,sp,120
10103e90:	b80b883a 	mov	r5,r23
10103e94:	0108f980 	call	10108f98 <__sprint_r>
10103e98:	b880030b 	ldhu	r2,12(r23)
10103e9c:	1080100c 	andi	r2,r2,64
10103ea0:	1005901e 	bne	r2,zero,101054e4 <___vfprintf_internal_r+0x1a54>
10103ea4:	d8802f17 	ldw	r2,188(sp)
10103ea8:	dfc04717 	ldw	ra,284(sp)
10103eac:	df004617 	ldw	fp,280(sp)
10103eb0:	ddc04517 	ldw	r23,276(sp)
10103eb4:	dd804417 	ldw	r22,272(sp)
10103eb8:	dd404317 	ldw	r21,268(sp)
10103ebc:	dd004217 	ldw	r20,264(sp)
10103ec0:	dcc04117 	ldw	r19,260(sp)
10103ec4:	dc804017 	ldw	r18,256(sp)
10103ec8:	dc403f17 	ldw	r17,252(sp)
10103ecc:	dc003e17 	ldw	r16,248(sp)
10103ed0:	dec04804 	addi	sp,sp,288
10103ed4:	f800283a 	ret
10103ed8:	d9002c17 	ldw	r4,176(sp)
10103edc:	0101f140 	call	10101f14 <__sinit>
10103ee0:	003f0406 	br	10103af4 <__alt_data_end+0xfffe3af4>
10103ee4:	d8802d17 	ldw	r2,180(sp)
10103ee8:	d9002d17 	ldw	r4,180(sp)
10103eec:	10800017 	ldw	r2,0(r2)
10103ef0:	d8803115 	stw	r2,196(sp)
10103ef4:	20800104 	addi	r2,r4,4
10103ef8:	d9003117 	ldw	r4,196(sp)
10103efc:	203fa716 	blt	r4,zero,10103d9c <__alt_data_end+0xfffe3d9c>
10103f00:	d8802d15 	stw	r2,180(sp)
10103f04:	ac400007 	ldb	r17,0(r21)
10103f08:	003f4206 	br	10103c14 <__alt_data_end+0xfffe3c14>
10103f0c:	ac400007 	ldb	r17,0(r21)
10103f10:	aac00044 	addi	r11,r21,1
10103f14:	8a872826 	beq	r17,r10,10105bb8 <___vfprintf_internal_r+0x2128>
10103f18:	88bff404 	addi	r2,r17,-48
10103f1c:	0009883a 	mov	r4,zero
10103f20:	30867d36 	bltu	r6,r2,10105918 <___vfprintf_internal_r+0x1e88>
10103f24:	5c400007 	ldb	r17,0(r11)
10103f28:	210002a4 	muli	r4,r4,10
10103f2c:	5d400044 	addi	r21,r11,1
10103f30:	a817883a 	mov	r11,r21
10103f34:	2089883a 	add	r4,r4,r2
10103f38:	88bff404 	addi	r2,r17,-48
10103f3c:	30bff92e 	bgeu	r6,r2,10103f24 <__alt_data_end+0xfffe3f24>
10103f40:	2005c916 	blt	r4,zero,10105668 <___vfprintf_internal_r+0x1bd8>
10103f44:	d9002915 	stw	r4,164(sp)
10103f48:	003f3306 	br	10103c18 <__alt_data_end+0xfffe3c18>
10103f4c:	94802014 	ori	r18,r18,128
10103f50:	ac400007 	ldb	r17,0(r21)
10103f54:	003f2f06 	br	10103c14 <__alt_data_end+0xfffe3c14>
10103f58:	a809883a 	mov	r4,r21
10103f5c:	d8003115 	stw	zero,196(sp)
10103f60:	88bff404 	addi	r2,r17,-48
10103f64:	0017883a 	mov	r11,zero
10103f68:	24400007 	ldb	r17,0(r4)
10103f6c:	5ac002a4 	muli	r11,r11,10
10103f70:	ad400044 	addi	r21,r21,1
10103f74:	a809883a 	mov	r4,r21
10103f78:	12d7883a 	add	r11,r2,r11
10103f7c:	88bff404 	addi	r2,r17,-48
10103f80:	30bff92e 	bgeu	r6,r2,10103f68 <__alt_data_end+0xfffe3f68>
10103f84:	dac03115 	stw	r11,196(sp)
10103f88:	003f2306 	br	10103c18 <__alt_data_end+0xfffe3c18>
10103f8c:	18c03fcc 	andi	r3,r3,255
10103f90:	18072b1e 	bne	r3,zero,10105c40 <___vfprintf_internal_r+0x21b0>
10103f94:	94800414 	ori	r18,r18,16
10103f98:	9080080c 	andi	r2,r18,32
10103f9c:	10037b26 	beq	r2,zero,10104d8c <___vfprintf_internal_r+0x12fc>
10103fa0:	d9402d17 	ldw	r5,180(sp)
10103fa4:	28800117 	ldw	r2,4(r5)
10103fa8:	2cc00017 	ldw	r19,0(r5)
10103fac:	29400204 	addi	r5,r5,8
10103fb0:	d9402d15 	stw	r5,180(sp)
10103fb4:	102d883a 	mov	r22,r2
10103fb8:	10044b16 	blt	r2,zero,101050e8 <___vfprintf_internal_r+0x1658>
10103fbc:	d9402917 	ldw	r5,164(sp)
10103fc0:	df002783 	ldbu	fp,158(sp)
10103fc4:	2803bc16 	blt	r5,zero,10104eb8 <___vfprintf_internal_r+0x1428>
10103fc8:	00ffdfc4 	movi	r3,-129
10103fcc:	9d84b03a 	or	r2,r19,r22
10103fd0:	90e4703a 	and	r18,r18,r3
10103fd4:	10017726 	beq	r2,zero,101045b4 <___vfprintf_internal_r+0xb24>
10103fd8:	b0038326 	beq	r22,zero,10104de8 <___vfprintf_internal_r+0x1358>
10103fdc:	dc402a15 	stw	r17,168(sp)
10103fe0:	dc001e04 	addi	r16,sp,120
10103fe4:	b023883a 	mov	r17,r22
10103fe8:	402d883a 	mov	r22,r8
10103fec:	9809883a 	mov	r4,r19
10103ff0:	880b883a 	mov	r5,r17
10103ff4:	01800284 	movi	r6,10
10103ff8:	000f883a 	mov	r7,zero
10103ffc:	010bbe40 	call	1010bbe4 <__umoddi3>
10104000:	10800c04 	addi	r2,r2,48
10104004:	843fffc4 	addi	r16,r16,-1
10104008:	9809883a 	mov	r4,r19
1010400c:	880b883a 	mov	r5,r17
10104010:	80800005 	stb	r2,0(r16)
10104014:	01800284 	movi	r6,10
10104018:	000f883a 	mov	r7,zero
1010401c:	010b66c0 	call	1010b66c <__udivdi3>
10104020:	1027883a 	mov	r19,r2
10104024:	10c4b03a 	or	r2,r2,r3
10104028:	1823883a 	mov	r17,r3
1010402c:	103fef1e 	bne	r2,zero,10103fec <__alt_data_end+0xfffe3fec>
10104030:	d8c02817 	ldw	r3,160(sp)
10104034:	dc402a17 	ldw	r17,168(sp)
10104038:	b011883a 	mov	r8,r22
1010403c:	1c07c83a 	sub	r3,r3,r16
10104040:	d8c02e15 	stw	r3,184(sp)
10104044:	00005906 	br	101041ac <___vfprintf_internal_r+0x71c>
10104048:	18c03fcc 	andi	r3,r3,255
1010404c:	1806fa1e 	bne	r3,zero,10105c38 <___vfprintf_internal_r+0x21a8>
10104050:	9080020c 	andi	r2,r18,8
10104054:	10048a26 	beq	r2,zero,10105280 <___vfprintf_internal_r+0x17f0>
10104058:	d8c02d17 	ldw	r3,180(sp)
1010405c:	d9002d17 	ldw	r4,180(sp)
10104060:	d9402d17 	ldw	r5,180(sp)
10104064:	18c00017 	ldw	r3,0(r3)
10104068:	21000117 	ldw	r4,4(r4)
1010406c:	29400204 	addi	r5,r5,8
10104070:	d8c03615 	stw	r3,216(sp)
10104074:	d9003815 	stw	r4,224(sp)
10104078:	d9402d15 	stw	r5,180(sp)
1010407c:	d9003617 	ldw	r4,216(sp)
10104080:	d9403817 	ldw	r5,224(sp)
10104084:	da003d15 	stw	r8,244(sp)
10104088:	04000044 	movi	r16,1
1010408c:	0108cb40 	call	10108cb4 <__fpclassifyd>
10104090:	da003d17 	ldw	r8,244(sp)
10104094:	14041f1e 	bne	r2,r16,10105114 <___vfprintf_internal_r+0x1684>
10104098:	d9003617 	ldw	r4,216(sp)
1010409c:	d9403817 	ldw	r5,224(sp)
101040a0:	000d883a 	mov	r6,zero
101040a4:	000f883a 	mov	r7,zero
101040a8:	010d4140 	call	1010d414 <__ledf2>
101040ac:	da003d17 	ldw	r8,244(sp)
101040b0:	1005be16 	blt	r2,zero,101057ac <___vfprintf_internal_r+0x1d1c>
101040b4:	df002783 	ldbu	fp,158(sp)
101040b8:	008011c4 	movi	r2,71
101040bc:	1445330e 	bge	r2,r17,1010558c <___vfprintf_internal_r+0x1afc>
101040c0:	04040474 	movhi	r16,4113
101040c4:	84059a04 	addi	r16,r16,5736
101040c8:	00c000c4 	movi	r3,3
101040cc:	00bfdfc4 	movi	r2,-129
101040d0:	d8c02a15 	stw	r3,168(sp)
101040d4:	90a4703a 	and	r18,r18,r2
101040d8:	d8c02e15 	stw	r3,184(sp)
101040dc:	d8002915 	stw	zero,164(sp)
101040e0:	d8003215 	stw	zero,200(sp)
101040e4:	00003706 	br	101041c4 <___vfprintf_internal_r+0x734>
101040e8:	94800214 	ori	r18,r18,8
101040ec:	ac400007 	ldb	r17,0(r21)
101040f0:	003ec806 	br	10103c14 <__alt_data_end+0xfffe3c14>
101040f4:	18c03fcc 	andi	r3,r3,255
101040f8:	1806db1e 	bne	r3,zero,10105c68 <___vfprintf_internal_r+0x21d8>
101040fc:	94800414 	ori	r18,r18,16
10104100:	9080080c 	andi	r2,r18,32
10104104:	1002d826 	beq	r2,zero,10104c68 <___vfprintf_internal_r+0x11d8>
10104108:	d9402d17 	ldw	r5,180(sp)
1010410c:	d8c02917 	ldw	r3,164(sp)
10104110:	d8002785 	stb	zero,158(sp)
10104114:	28800204 	addi	r2,r5,8
10104118:	2cc00017 	ldw	r19,0(r5)
1010411c:	2d800117 	ldw	r22,4(r5)
10104120:	18048f16 	blt	r3,zero,10105360 <___vfprintf_internal_r+0x18d0>
10104124:	013fdfc4 	movi	r4,-129
10104128:	9d86b03a 	or	r3,r19,r22
1010412c:	d8802d15 	stw	r2,180(sp)
10104130:	9124703a 	and	r18,r18,r4
10104134:	1802d91e 	bne	r3,zero,10104c9c <___vfprintf_internal_r+0x120c>
10104138:	d8c02917 	ldw	r3,164(sp)
1010413c:	0039883a 	mov	fp,zero
10104140:	1805c326 	beq	r3,zero,10105850 <___vfprintf_internal_r+0x1dc0>
10104144:	0027883a 	mov	r19,zero
10104148:	002d883a 	mov	r22,zero
1010414c:	dc001e04 	addi	r16,sp,120
10104150:	9806d0fa 	srli	r3,r19,3
10104154:	b008977a 	slli	r4,r22,29
10104158:	b02cd0fa 	srli	r22,r22,3
1010415c:	9cc001cc 	andi	r19,r19,7
10104160:	98800c04 	addi	r2,r19,48
10104164:	843fffc4 	addi	r16,r16,-1
10104168:	20e6b03a 	or	r19,r4,r3
1010416c:	80800005 	stb	r2,0(r16)
10104170:	9d86b03a 	or	r3,r19,r22
10104174:	183ff61e 	bne	r3,zero,10104150 <__alt_data_end+0xfffe4150>
10104178:	90c0004c 	andi	r3,r18,1
1010417c:	18013b26 	beq	r3,zero,1010466c <___vfprintf_internal_r+0xbdc>
10104180:	10803fcc 	andi	r2,r2,255
10104184:	1080201c 	xori	r2,r2,128
10104188:	10bfe004 	addi	r2,r2,-128
1010418c:	00c00c04 	movi	r3,48
10104190:	10c13626 	beq	r2,r3,1010466c <___vfprintf_internal_r+0xbdc>
10104194:	80ffffc5 	stb	r3,-1(r16)
10104198:	d8c02817 	ldw	r3,160(sp)
1010419c:	80bfffc4 	addi	r2,r16,-1
101041a0:	1021883a 	mov	r16,r2
101041a4:	1887c83a 	sub	r3,r3,r2
101041a8:	d8c02e15 	stw	r3,184(sp)
101041ac:	d8802e17 	ldw	r2,184(sp)
101041b0:	d9002917 	ldw	r4,164(sp)
101041b4:	1100010e 	bge	r2,r4,101041bc <___vfprintf_internal_r+0x72c>
101041b8:	2005883a 	mov	r2,r4
101041bc:	d8802a15 	stw	r2,168(sp)
101041c0:	d8003215 	stw	zero,200(sp)
101041c4:	e7003fcc 	andi	fp,fp,255
101041c8:	e700201c 	xori	fp,fp,128
101041cc:	e73fe004 	addi	fp,fp,-128
101041d0:	e0000326 	beq	fp,zero,101041e0 <___vfprintf_internal_r+0x750>
101041d4:	d8c02a17 	ldw	r3,168(sp)
101041d8:	18c00044 	addi	r3,r3,1
101041dc:	d8c02a15 	stw	r3,168(sp)
101041e0:	90c0008c 	andi	r3,r18,2
101041e4:	d8c02b15 	stw	r3,172(sp)
101041e8:	18000326 	beq	r3,zero,101041f8 <___vfprintf_internal_r+0x768>
101041ec:	d8c02a17 	ldw	r3,168(sp)
101041f0:	18c00084 	addi	r3,r3,2
101041f4:	d8c02a15 	stw	r3,168(sp)
101041f8:	90c0210c 	andi	r3,r18,132
101041fc:	d8c03015 	stw	r3,192(sp)
10104200:	1801a31e 	bne	r3,zero,10104890 <___vfprintf_internal_r+0xe00>
10104204:	d9003117 	ldw	r4,196(sp)
10104208:	d8c02a17 	ldw	r3,168(sp)
1010420c:	20e7c83a 	sub	r19,r4,r3
10104210:	04c19f0e 	bge	zero,r19,10104890 <___vfprintf_internal_r+0xe00>
10104214:	02400404 	movi	r9,16
10104218:	d8c02017 	ldw	r3,128(sp)
1010421c:	d8801f17 	ldw	r2,124(sp)
10104220:	4cc50d0e 	bge	r9,r19,10105658 <___vfprintf_internal_r+0x1bc8>
10104224:	01440474 	movhi	r5,4113
10104228:	2945ad84 	addi	r5,r5,5814
1010422c:	dc403b15 	stw	r17,236(sp)
10104230:	d9403515 	stw	r5,212(sp)
10104234:	9823883a 	mov	r17,r19
10104238:	482d883a 	mov	r22,r9
1010423c:	9027883a 	mov	r19,r18
10104240:	070001c4 	movi	fp,7
10104244:	8025883a 	mov	r18,r16
10104248:	dc002c17 	ldw	r16,176(sp)
1010424c:	00000306 	br	1010425c <___vfprintf_internal_r+0x7cc>
10104250:	8c7ffc04 	addi	r17,r17,-16
10104254:	42000204 	addi	r8,r8,8
10104258:	b440130e 	bge	r22,r17,101042a8 <___vfprintf_internal_r+0x818>
1010425c:	01040474 	movhi	r4,4113
10104260:	18c00404 	addi	r3,r3,16
10104264:	10800044 	addi	r2,r2,1
10104268:	2105ad84 	addi	r4,r4,5814
1010426c:	41000015 	stw	r4,0(r8)
10104270:	45800115 	stw	r22,4(r8)
10104274:	d8c02015 	stw	r3,128(sp)
10104278:	d8801f15 	stw	r2,124(sp)
1010427c:	e0bff40e 	bge	fp,r2,10104250 <__alt_data_end+0xfffe4250>
10104280:	d9801e04 	addi	r6,sp,120
10104284:	b80b883a 	mov	r5,r23
10104288:	8009883a 	mov	r4,r16
1010428c:	0108f980 	call	10108f98 <__sprint_r>
10104290:	103f011e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104294:	8c7ffc04 	addi	r17,r17,-16
10104298:	d8c02017 	ldw	r3,128(sp)
1010429c:	d8801f17 	ldw	r2,124(sp)
101042a0:	da000404 	addi	r8,sp,16
101042a4:	b47fed16 	blt	r22,r17,1010425c <__alt_data_end+0xfffe425c>
101042a8:	9021883a 	mov	r16,r18
101042ac:	9825883a 	mov	r18,r19
101042b0:	8827883a 	mov	r19,r17
101042b4:	dc403b17 	ldw	r17,236(sp)
101042b8:	d9403517 	ldw	r5,212(sp)
101042bc:	98c7883a 	add	r3,r19,r3
101042c0:	10800044 	addi	r2,r2,1
101042c4:	41400015 	stw	r5,0(r8)
101042c8:	44c00115 	stw	r19,4(r8)
101042cc:	d8c02015 	stw	r3,128(sp)
101042d0:	d8801f15 	stw	r2,124(sp)
101042d4:	010001c4 	movi	r4,7
101042d8:	2082a316 	blt	r4,r2,10104d68 <___vfprintf_internal_r+0x12d8>
101042dc:	df002787 	ldb	fp,158(sp)
101042e0:	42000204 	addi	r8,r8,8
101042e4:	e0000c26 	beq	fp,zero,10104318 <___vfprintf_internal_r+0x888>
101042e8:	d8801f17 	ldw	r2,124(sp)
101042ec:	d9002784 	addi	r4,sp,158
101042f0:	18c00044 	addi	r3,r3,1
101042f4:	10800044 	addi	r2,r2,1
101042f8:	41000015 	stw	r4,0(r8)
101042fc:	01000044 	movi	r4,1
10104300:	41000115 	stw	r4,4(r8)
10104304:	d8c02015 	stw	r3,128(sp)
10104308:	d8801f15 	stw	r2,124(sp)
1010430c:	010001c4 	movi	r4,7
10104310:	20823c16 	blt	r4,r2,10104c04 <___vfprintf_internal_r+0x1174>
10104314:	42000204 	addi	r8,r8,8
10104318:	d8802b17 	ldw	r2,172(sp)
1010431c:	10000c26 	beq	r2,zero,10104350 <___vfprintf_internal_r+0x8c0>
10104320:	d8801f17 	ldw	r2,124(sp)
10104324:	d9002704 	addi	r4,sp,156
10104328:	18c00084 	addi	r3,r3,2
1010432c:	10800044 	addi	r2,r2,1
10104330:	41000015 	stw	r4,0(r8)
10104334:	01000084 	movi	r4,2
10104338:	41000115 	stw	r4,4(r8)
1010433c:	d8c02015 	stw	r3,128(sp)
10104340:	d8801f15 	stw	r2,124(sp)
10104344:	010001c4 	movi	r4,7
10104348:	20823616 	blt	r4,r2,10104c24 <___vfprintf_internal_r+0x1194>
1010434c:	42000204 	addi	r8,r8,8
10104350:	d9003017 	ldw	r4,192(sp)
10104354:	00802004 	movi	r2,128
10104358:	20819926 	beq	r4,r2,101049c0 <___vfprintf_internal_r+0xf30>
1010435c:	d9402917 	ldw	r5,164(sp)
10104360:	d8802e17 	ldw	r2,184(sp)
10104364:	28adc83a 	sub	r22,r5,r2
10104368:	0580310e 	bge	zero,r22,10104430 <___vfprintf_internal_r+0x9a0>
1010436c:	07000404 	movi	fp,16
10104370:	d8801f17 	ldw	r2,124(sp)
10104374:	e584140e 	bge	fp,r22,101053c8 <___vfprintf_internal_r+0x1938>
10104378:	01440474 	movhi	r5,4113
1010437c:	2945a984 	addi	r5,r5,5798
10104380:	dc402915 	stw	r17,164(sp)
10104384:	d9402b15 	stw	r5,172(sp)
10104388:	b023883a 	mov	r17,r22
1010438c:	04c001c4 	movi	r19,7
10104390:	a82d883a 	mov	r22,r21
10104394:	902b883a 	mov	r21,r18
10104398:	8025883a 	mov	r18,r16
1010439c:	dc002c17 	ldw	r16,176(sp)
101043a0:	00000306 	br	101043b0 <___vfprintf_internal_r+0x920>
101043a4:	8c7ffc04 	addi	r17,r17,-16
101043a8:	42000204 	addi	r8,r8,8
101043ac:	e440110e 	bge	fp,r17,101043f4 <___vfprintf_internal_r+0x964>
101043b0:	18c00404 	addi	r3,r3,16
101043b4:	10800044 	addi	r2,r2,1
101043b8:	45000015 	stw	r20,0(r8)
101043bc:	47000115 	stw	fp,4(r8)
101043c0:	d8c02015 	stw	r3,128(sp)
101043c4:	d8801f15 	stw	r2,124(sp)
101043c8:	98bff60e 	bge	r19,r2,101043a4 <__alt_data_end+0xfffe43a4>
101043cc:	d9801e04 	addi	r6,sp,120
101043d0:	b80b883a 	mov	r5,r23
101043d4:	8009883a 	mov	r4,r16
101043d8:	0108f980 	call	10108f98 <__sprint_r>
101043dc:	103eae1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101043e0:	8c7ffc04 	addi	r17,r17,-16
101043e4:	d8c02017 	ldw	r3,128(sp)
101043e8:	d8801f17 	ldw	r2,124(sp)
101043ec:	da000404 	addi	r8,sp,16
101043f0:	e47fef16 	blt	fp,r17,101043b0 <__alt_data_end+0xfffe43b0>
101043f4:	9021883a 	mov	r16,r18
101043f8:	a825883a 	mov	r18,r21
101043fc:	b02b883a 	mov	r21,r22
10104400:	882d883a 	mov	r22,r17
10104404:	dc402917 	ldw	r17,164(sp)
10104408:	d9002b17 	ldw	r4,172(sp)
1010440c:	1d87883a 	add	r3,r3,r22
10104410:	10800044 	addi	r2,r2,1
10104414:	41000015 	stw	r4,0(r8)
10104418:	45800115 	stw	r22,4(r8)
1010441c:	d8c02015 	stw	r3,128(sp)
10104420:	d8801f15 	stw	r2,124(sp)
10104424:	010001c4 	movi	r4,7
10104428:	2081ee16 	blt	r4,r2,10104be4 <___vfprintf_internal_r+0x1154>
1010442c:	42000204 	addi	r8,r8,8
10104430:	9080400c 	andi	r2,r18,256
10104434:	1001181e 	bne	r2,zero,10104898 <___vfprintf_internal_r+0xe08>
10104438:	d9402e17 	ldw	r5,184(sp)
1010443c:	d8801f17 	ldw	r2,124(sp)
10104440:	44000015 	stw	r16,0(r8)
10104444:	1947883a 	add	r3,r3,r5
10104448:	10800044 	addi	r2,r2,1
1010444c:	41400115 	stw	r5,4(r8)
10104450:	d8c02015 	stw	r3,128(sp)
10104454:	d8801f15 	stw	r2,124(sp)
10104458:	010001c4 	movi	r4,7
1010445c:	2081d316 	blt	r4,r2,10104bac <___vfprintf_internal_r+0x111c>
10104460:	42000204 	addi	r8,r8,8
10104464:	9480010c 	andi	r18,r18,4
10104468:	90003226 	beq	r18,zero,10104534 <___vfprintf_internal_r+0xaa4>
1010446c:	d9403117 	ldw	r5,196(sp)
10104470:	d8802a17 	ldw	r2,168(sp)
10104474:	28a1c83a 	sub	r16,r5,r2
10104478:	04002e0e 	bge	zero,r16,10104534 <___vfprintf_internal_r+0xaa4>
1010447c:	04400404 	movi	r17,16
10104480:	d8801f17 	ldw	r2,124(sp)
10104484:	8c04a20e 	bge	r17,r16,10105710 <___vfprintf_internal_r+0x1c80>
10104488:	01440474 	movhi	r5,4113
1010448c:	2945ad84 	addi	r5,r5,5814
10104490:	d9403515 	stw	r5,212(sp)
10104494:	048001c4 	movi	r18,7
10104498:	dcc02c17 	ldw	r19,176(sp)
1010449c:	00000306 	br	101044ac <___vfprintf_internal_r+0xa1c>
101044a0:	843ffc04 	addi	r16,r16,-16
101044a4:	42000204 	addi	r8,r8,8
101044a8:	8c00130e 	bge	r17,r16,101044f8 <___vfprintf_internal_r+0xa68>
101044ac:	01040474 	movhi	r4,4113
101044b0:	18c00404 	addi	r3,r3,16
101044b4:	10800044 	addi	r2,r2,1
101044b8:	2105ad84 	addi	r4,r4,5814
101044bc:	41000015 	stw	r4,0(r8)
101044c0:	44400115 	stw	r17,4(r8)
101044c4:	d8c02015 	stw	r3,128(sp)
101044c8:	d8801f15 	stw	r2,124(sp)
101044cc:	90bff40e 	bge	r18,r2,101044a0 <__alt_data_end+0xfffe44a0>
101044d0:	d9801e04 	addi	r6,sp,120
101044d4:	b80b883a 	mov	r5,r23
101044d8:	9809883a 	mov	r4,r19
101044dc:	0108f980 	call	10108f98 <__sprint_r>
101044e0:	103e6d1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101044e4:	843ffc04 	addi	r16,r16,-16
101044e8:	d8c02017 	ldw	r3,128(sp)
101044ec:	d8801f17 	ldw	r2,124(sp)
101044f0:	da000404 	addi	r8,sp,16
101044f4:	8c3fed16 	blt	r17,r16,101044ac <__alt_data_end+0xfffe44ac>
101044f8:	d9403517 	ldw	r5,212(sp)
101044fc:	1c07883a 	add	r3,r3,r16
10104500:	10800044 	addi	r2,r2,1
10104504:	41400015 	stw	r5,0(r8)
10104508:	44000115 	stw	r16,4(r8)
1010450c:	d8c02015 	stw	r3,128(sp)
10104510:	d8801f15 	stw	r2,124(sp)
10104514:	010001c4 	movi	r4,7
10104518:	2080060e 	bge	r4,r2,10104534 <___vfprintf_internal_r+0xaa4>
1010451c:	d9002c17 	ldw	r4,176(sp)
10104520:	d9801e04 	addi	r6,sp,120
10104524:	b80b883a 	mov	r5,r23
10104528:	0108f980 	call	10108f98 <__sprint_r>
1010452c:	103e5a1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104530:	d8c02017 	ldw	r3,128(sp)
10104534:	d8803117 	ldw	r2,196(sp)
10104538:	d9002a17 	ldw	r4,168(sp)
1010453c:	1100010e 	bge	r2,r4,10104544 <___vfprintf_internal_r+0xab4>
10104540:	2005883a 	mov	r2,r4
10104544:	d9402f17 	ldw	r5,188(sp)
10104548:	288b883a 	add	r5,r5,r2
1010454c:	d9402f15 	stw	r5,188(sp)
10104550:	18019e1e 	bne	r3,zero,10104bcc <___vfprintf_internal_r+0x113c>
10104554:	a8800007 	ldb	r2,0(r21)
10104558:	d8001f15 	stw	zero,124(sp)
1010455c:	da000404 	addi	r8,sp,16
10104560:	103d851e 	bne	r2,zero,10103b78 <__alt_data_end+0xfffe3b78>
10104564:	a821883a 	mov	r16,r21
10104568:	003d9b06 	br	10103bd8 <__alt_data_end+0xfffe3bd8>
1010456c:	18c03fcc 	andi	r3,r3,255
10104570:	1805c11e 	bne	r3,zero,10105c78 <___vfprintf_internal_r+0x21e8>
10104574:	94800414 	ori	r18,r18,16
10104578:	9080080c 	andi	r2,r18,32
1010457c:	10020c26 	beq	r2,zero,10104db0 <___vfprintf_internal_r+0x1320>
10104580:	d8802d17 	ldw	r2,180(sp)
10104584:	d9002917 	ldw	r4,164(sp)
10104588:	d8002785 	stb	zero,158(sp)
1010458c:	10c00204 	addi	r3,r2,8
10104590:	14c00017 	ldw	r19,0(r2)
10104594:	15800117 	ldw	r22,4(r2)
10104598:	20040f16 	blt	r4,zero,101055d8 <___vfprintf_internal_r+0x1b48>
1010459c:	013fdfc4 	movi	r4,-129
101045a0:	9d84b03a 	or	r2,r19,r22
101045a4:	d8c02d15 	stw	r3,180(sp)
101045a8:	9124703a 	and	r18,r18,r4
101045ac:	0039883a 	mov	fp,zero
101045b0:	103e891e 	bne	r2,zero,10103fd8 <__alt_data_end+0xfffe3fd8>
101045b4:	d9002917 	ldw	r4,164(sp)
101045b8:	2002c11e 	bne	r4,zero,101050c0 <___vfprintf_internal_r+0x1630>
101045bc:	d8002915 	stw	zero,164(sp)
101045c0:	d8002e15 	stw	zero,184(sp)
101045c4:	dc001e04 	addi	r16,sp,120
101045c8:	003ef806 	br	101041ac <__alt_data_end+0xfffe41ac>
101045cc:	18c03fcc 	andi	r3,r3,255
101045d0:	18059d1e 	bne	r3,zero,10105c48 <___vfprintf_internal_r+0x21b8>
101045d4:	01440474 	movhi	r5,4113
101045d8:	29459d04 	addi	r5,r5,5748
101045dc:	d9403915 	stw	r5,228(sp)
101045e0:	9080080c 	andi	r2,r18,32
101045e4:	10005226 	beq	r2,zero,10104730 <___vfprintf_internal_r+0xca0>
101045e8:	d8802d17 	ldw	r2,180(sp)
101045ec:	14c00017 	ldw	r19,0(r2)
101045f0:	15800117 	ldw	r22,4(r2)
101045f4:	10800204 	addi	r2,r2,8
101045f8:	d8802d15 	stw	r2,180(sp)
101045fc:	9080004c 	andi	r2,r18,1
10104600:	10019026 	beq	r2,zero,10104c44 <___vfprintf_internal_r+0x11b4>
10104604:	9d84b03a 	or	r2,r19,r22
10104608:	10036926 	beq	r2,zero,101053b0 <___vfprintf_internal_r+0x1920>
1010460c:	d8c02917 	ldw	r3,164(sp)
10104610:	00800c04 	movi	r2,48
10104614:	d8802705 	stb	r2,156(sp)
10104618:	dc402745 	stb	r17,157(sp)
1010461c:	d8002785 	stb	zero,158(sp)
10104620:	90800094 	ori	r2,r18,2
10104624:	18045d16 	blt	r3,zero,1010579c <___vfprintf_internal_r+0x1d0c>
10104628:	00bfdfc4 	movi	r2,-129
1010462c:	90a4703a 	and	r18,r18,r2
10104630:	94800094 	ori	r18,r18,2
10104634:	0039883a 	mov	fp,zero
10104638:	d9003917 	ldw	r4,228(sp)
1010463c:	dc001e04 	addi	r16,sp,120
10104640:	988003cc 	andi	r2,r19,15
10104644:	b006973a 	slli	r3,r22,28
10104648:	2085883a 	add	r2,r4,r2
1010464c:	9826d13a 	srli	r19,r19,4
10104650:	10800003 	ldbu	r2,0(r2)
10104654:	b02cd13a 	srli	r22,r22,4
10104658:	843fffc4 	addi	r16,r16,-1
1010465c:	1ce6b03a 	or	r19,r3,r19
10104660:	80800005 	stb	r2,0(r16)
10104664:	9d84b03a 	or	r2,r19,r22
10104668:	103ff51e 	bne	r2,zero,10104640 <__alt_data_end+0xfffe4640>
1010466c:	d8c02817 	ldw	r3,160(sp)
10104670:	1c07c83a 	sub	r3,r3,r16
10104674:	d8c02e15 	stw	r3,184(sp)
10104678:	003ecc06 	br	101041ac <__alt_data_end+0xfffe41ac>
1010467c:	18c03fcc 	andi	r3,r3,255
10104680:	183e9f26 	beq	r3,zero,10104100 <__alt_data_end+0xfffe4100>
10104684:	d9c02785 	stb	r7,158(sp)
10104688:	003e9d06 	br	10104100 <__alt_data_end+0xfffe4100>
1010468c:	00c00044 	movi	r3,1
10104690:	01c00ac4 	movi	r7,43
10104694:	ac400007 	ldb	r17,0(r21)
10104698:	003d5e06 	br	10103c14 <__alt_data_end+0xfffe3c14>
1010469c:	94800814 	ori	r18,r18,32
101046a0:	ac400007 	ldb	r17,0(r21)
101046a4:	003d5b06 	br	10103c14 <__alt_data_end+0xfffe3c14>
101046a8:	d8c02d17 	ldw	r3,180(sp)
101046ac:	d8002785 	stb	zero,158(sp)
101046b0:	1c000017 	ldw	r16,0(r3)
101046b4:	1cc00104 	addi	r19,r3,4
101046b8:	80041926 	beq	r16,zero,10105720 <___vfprintf_internal_r+0x1c90>
101046bc:	d9002917 	ldw	r4,164(sp)
101046c0:	2003d016 	blt	r4,zero,10105604 <___vfprintf_internal_r+0x1b74>
101046c4:	200d883a 	mov	r6,r4
101046c8:	000b883a 	mov	r5,zero
101046cc:	8009883a 	mov	r4,r16
101046d0:	da003d15 	stw	r8,244(sp)
101046d4:	0107a2c0 	call	10107a2c <memchr>
101046d8:	da003d17 	ldw	r8,244(sp)
101046dc:	10045426 	beq	r2,zero,10105830 <___vfprintf_internal_r+0x1da0>
101046e0:	1405c83a 	sub	r2,r2,r16
101046e4:	d8802e15 	stw	r2,184(sp)
101046e8:	1003cc16 	blt	r2,zero,1010561c <___vfprintf_internal_r+0x1b8c>
101046ec:	df002783 	ldbu	fp,158(sp)
101046f0:	d8802a15 	stw	r2,168(sp)
101046f4:	dcc02d15 	stw	r19,180(sp)
101046f8:	d8002915 	stw	zero,164(sp)
101046fc:	d8003215 	stw	zero,200(sp)
10104700:	003eb006 	br	101041c4 <__alt_data_end+0xfffe41c4>
10104704:	18c03fcc 	andi	r3,r3,255
10104708:	183f9b26 	beq	r3,zero,10104578 <__alt_data_end+0xfffe4578>
1010470c:	d9c02785 	stb	r7,158(sp)
10104710:	003f9906 	br	10104578 <__alt_data_end+0xfffe4578>
10104714:	18c03fcc 	andi	r3,r3,255
10104718:	1805551e 	bne	r3,zero,10105c70 <___vfprintf_internal_r+0x21e0>
1010471c:	01440474 	movhi	r5,4113
10104720:	2945a204 	addi	r5,r5,5768
10104724:	d9403915 	stw	r5,228(sp)
10104728:	9080080c 	andi	r2,r18,32
1010472c:	103fae1e 	bne	r2,zero,101045e8 <__alt_data_end+0xfffe45e8>
10104730:	9080040c 	andi	r2,r18,16
10104734:	1002de26 	beq	r2,zero,101052b0 <___vfprintf_internal_r+0x1820>
10104738:	d8c02d17 	ldw	r3,180(sp)
1010473c:	002d883a 	mov	r22,zero
10104740:	1cc00017 	ldw	r19,0(r3)
10104744:	18c00104 	addi	r3,r3,4
10104748:	d8c02d15 	stw	r3,180(sp)
1010474c:	003fab06 	br	101045fc <__alt_data_end+0xfffe45fc>
10104750:	38803fcc 	andi	r2,r7,255
10104754:	1080201c 	xori	r2,r2,128
10104758:	10bfe004 	addi	r2,r2,-128
1010475c:	1002d21e 	bne	r2,zero,101052a8 <___vfprintf_internal_r+0x1818>
10104760:	00c00044 	movi	r3,1
10104764:	01c00804 	movi	r7,32
10104768:	ac400007 	ldb	r17,0(r21)
1010476c:	003d2906 	br	10103c14 <__alt_data_end+0xfffe3c14>
10104770:	94800054 	ori	r18,r18,1
10104774:	ac400007 	ldb	r17,0(r21)
10104778:	003d2606 	br	10103c14 <__alt_data_end+0xfffe3c14>
1010477c:	18c03fcc 	andi	r3,r3,255
10104780:	183e0526 	beq	r3,zero,10103f98 <__alt_data_end+0xfffe3f98>
10104784:	d9c02785 	stb	r7,158(sp)
10104788:	003e0306 	br	10103f98 <__alt_data_end+0xfffe3f98>
1010478c:	94801014 	ori	r18,r18,64
10104790:	ac400007 	ldb	r17,0(r21)
10104794:	003d1f06 	br	10103c14 <__alt_data_end+0xfffe3c14>
10104798:	ac400007 	ldb	r17,0(r21)
1010479c:	8a438726 	beq	r17,r9,101055bc <___vfprintf_internal_r+0x1b2c>
101047a0:	94800414 	ori	r18,r18,16
101047a4:	003d1b06 	br	10103c14 <__alt_data_end+0xfffe3c14>
101047a8:	18c03fcc 	andi	r3,r3,255
101047ac:	1805341e 	bne	r3,zero,10105c80 <___vfprintf_internal_r+0x21f0>
101047b0:	9080080c 	andi	r2,r18,32
101047b4:	1002cd26 	beq	r2,zero,101052ec <___vfprintf_internal_r+0x185c>
101047b8:	d9402d17 	ldw	r5,180(sp)
101047bc:	d9002f17 	ldw	r4,188(sp)
101047c0:	28800017 	ldw	r2,0(r5)
101047c4:	2007d7fa 	srai	r3,r4,31
101047c8:	29400104 	addi	r5,r5,4
101047cc:	d9402d15 	stw	r5,180(sp)
101047d0:	11000015 	stw	r4,0(r2)
101047d4:	10c00115 	stw	r3,4(r2)
101047d8:	003ce506 	br	10103b70 <__alt_data_end+0xfffe3b70>
101047dc:	d8c02d17 	ldw	r3,180(sp)
101047e0:	d9002d17 	ldw	r4,180(sp)
101047e4:	d8002785 	stb	zero,158(sp)
101047e8:	18800017 	ldw	r2,0(r3)
101047ec:	21000104 	addi	r4,r4,4
101047f0:	00c00044 	movi	r3,1
101047f4:	d8c02a15 	stw	r3,168(sp)
101047f8:	d8801405 	stb	r2,80(sp)
101047fc:	d9002d15 	stw	r4,180(sp)
10104800:	d8c02e15 	stw	r3,184(sp)
10104804:	d8002915 	stw	zero,164(sp)
10104808:	d8003215 	stw	zero,200(sp)
1010480c:	dc001404 	addi	r16,sp,80
10104810:	0039883a 	mov	fp,zero
10104814:	003e7206 	br	101041e0 <__alt_data_end+0xfffe41e0>
10104818:	01040474 	movhi	r4,4113
1010481c:	2105a204 	addi	r4,r4,5768
10104820:	0039883a 	mov	fp,zero
10104824:	d9003915 	stw	r4,228(sp)
10104828:	04401e04 	movi	r17,120
1010482c:	003f8206 	br	10104638 <__alt_data_end+0xfffe4638>
10104830:	18c03fcc 	andi	r3,r3,255
10104834:	1805061e 	bne	r3,zero,10105c50 <___vfprintf_internal_r+0x21c0>
10104838:	883d9126 	beq	r17,zero,10103e80 <__alt_data_end+0xfffe3e80>
1010483c:	00c00044 	movi	r3,1
10104840:	d8c02a15 	stw	r3,168(sp)
10104844:	dc401405 	stb	r17,80(sp)
10104848:	d8002785 	stb	zero,158(sp)
1010484c:	003fec06 	br	10104800 <__alt_data_end+0xfffe4800>
10104850:	01440474 	movhi	r5,4113
10104854:	2945a204 	addi	r5,r5,5768
10104858:	d9403915 	stw	r5,228(sp)
1010485c:	d8c02d15 	stw	r3,180(sp)
10104860:	1025883a 	mov	r18,r2
10104864:	04401e04 	movi	r17,120
10104868:	9d84b03a 	or	r2,r19,r22
1010486c:	1000fc1e 	bne	r2,zero,10104c60 <___vfprintf_internal_r+0x11d0>
10104870:	0039883a 	mov	fp,zero
10104874:	00800084 	movi	r2,2
10104878:	10803fcc 	andi	r2,r2,255
1010487c:	00c00044 	movi	r3,1
10104880:	10c20f26 	beq	r2,r3,101050c0 <___vfprintf_internal_r+0x1630>
10104884:	00c00084 	movi	r3,2
10104888:	10fd6326 	beq	r2,r3,10103e18 <__alt_data_end+0xfffe3e18>
1010488c:	003e2d06 	br	10104144 <__alt_data_end+0xfffe4144>
10104890:	d8c02017 	ldw	r3,128(sp)
10104894:	003e9306 	br	101042e4 <__alt_data_end+0xfffe42e4>
10104898:	00801944 	movi	r2,101
1010489c:	14407e0e 	bge	r2,r17,10104a98 <___vfprintf_internal_r+0x1008>
101048a0:	d9003617 	ldw	r4,216(sp)
101048a4:	d9403817 	ldw	r5,224(sp)
101048a8:	000d883a 	mov	r6,zero
101048ac:	000f883a 	mov	r7,zero
101048b0:	d8c03c15 	stw	r3,240(sp)
101048b4:	da003d15 	stw	r8,244(sp)
101048b8:	010d2b00 	call	1010d2b0 <__eqdf2>
101048bc:	d8c03c17 	ldw	r3,240(sp)
101048c0:	da003d17 	ldw	r8,244(sp)
101048c4:	1000f71e 	bne	r2,zero,10104ca4 <___vfprintf_internal_r+0x1214>
101048c8:	d8801f17 	ldw	r2,124(sp)
101048cc:	01040474 	movhi	r4,4113
101048d0:	2105a904 	addi	r4,r4,5796
101048d4:	18c00044 	addi	r3,r3,1
101048d8:	10800044 	addi	r2,r2,1
101048dc:	41000015 	stw	r4,0(r8)
101048e0:	01000044 	movi	r4,1
101048e4:	41000115 	stw	r4,4(r8)
101048e8:	d8c02015 	stw	r3,128(sp)
101048ec:	d8801f15 	stw	r2,124(sp)
101048f0:	010001c4 	movi	r4,7
101048f4:	2082b816 	blt	r4,r2,101053d8 <___vfprintf_internal_r+0x1948>
101048f8:	42000204 	addi	r8,r8,8
101048fc:	d8802617 	ldw	r2,152(sp)
10104900:	d9403317 	ldw	r5,204(sp)
10104904:	11400216 	blt	r2,r5,10104910 <___vfprintf_internal_r+0xe80>
10104908:	9080004c 	andi	r2,r18,1
1010490c:	103ed526 	beq	r2,zero,10104464 <__alt_data_end+0xfffe4464>
10104910:	d8803717 	ldw	r2,220(sp)
10104914:	d9003417 	ldw	r4,208(sp)
10104918:	d9403717 	ldw	r5,220(sp)
1010491c:	1887883a 	add	r3,r3,r2
10104920:	d8801f17 	ldw	r2,124(sp)
10104924:	41000015 	stw	r4,0(r8)
10104928:	41400115 	stw	r5,4(r8)
1010492c:	10800044 	addi	r2,r2,1
10104930:	d8c02015 	stw	r3,128(sp)
10104934:	d8801f15 	stw	r2,124(sp)
10104938:	010001c4 	movi	r4,7
1010493c:	20832916 	blt	r4,r2,101055e4 <___vfprintf_internal_r+0x1b54>
10104940:	42000204 	addi	r8,r8,8
10104944:	d8803317 	ldw	r2,204(sp)
10104948:	143fffc4 	addi	r16,r2,-1
1010494c:	043ec50e 	bge	zero,r16,10104464 <__alt_data_end+0xfffe4464>
10104950:	04400404 	movi	r17,16
10104954:	d8801f17 	ldw	r2,124(sp)
10104958:	8c00880e 	bge	r17,r16,10104b7c <___vfprintf_internal_r+0x10ec>
1010495c:	01440474 	movhi	r5,4113
10104960:	2945a984 	addi	r5,r5,5798
10104964:	d9402b15 	stw	r5,172(sp)
10104968:	058001c4 	movi	r22,7
1010496c:	dcc02c17 	ldw	r19,176(sp)
10104970:	00000306 	br	10104980 <___vfprintf_internal_r+0xef0>
10104974:	42000204 	addi	r8,r8,8
10104978:	843ffc04 	addi	r16,r16,-16
1010497c:	8c00820e 	bge	r17,r16,10104b88 <___vfprintf_internal_r+0x10f8>
10104980:	18c00404 	addi	r3,r3,16
10104984:	10800044 	addi	r2,r2,1
10104988:	45000015 	stw	r20,0(r8)
1010498c:	44400115 	stw	r17,4(r8)
10104990:	d8c02015 	stw	r3,128(sp)
10104994:	d8801f15 	stw	r2,124(sp)
10104998:	b0bff60e 	bge	r22,r2,10104974 <__alt_data_end+0xfffe4974>
1010499c:	d9801e04 	addi	r6,sp,120
101049a0:	b80b883a 	mov	r5,r23
101049a4:	9809883a 	mov	r4,r19
101049a8:	0108f980 	call	10108f98 <__sprint_r>
101049ac:	103d3a1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101049b0:	d8c02017 	ldw	r3,128(sp)
101049b4:	d8801f17 	ldw	r2,124(sp)
101049b8:	da000404 	addi	r8,sp,16
101049bc:	003fee06 	br	10104978 <__alt_data_end+0xfffe4978>
101049c0:	d9403117 	ldw	r5,196(sp)
101049c4:	d8802a17 	ldw	r2,168(sp)
101049c8:	28adc83a 	sub	r22,r5,r2
101049cc:	05be630e 	bge	zero,r22,1010435c <__alt_data_end+0xfffe435c>
101049d0:	07000404 	movi	fp,16
101049d4:	d8801f17 	ldw	r2,124(sp)
101049d8:	e5838f0e 	bge	fp,r22,10105818 <___vfprintf_internal_r+0x1d88>
101049dc:	01440474 	movhi	r5,4113
101049e0:	2945a984 	addi	r5,r5,5798
101049e4:	dc403015 	stw	r17,192(sp)
101049e8:	d9402b15 	stw	r5,172(sp)
101049ec:	b023883a 	mov	r17,r22
101049f0:	04c001c4 	movi	r19,7
101049f4:	a82d883a 	mov	r22,r21
101049f8:	902b883a 	mov	r21,r18
101049fc:	8025883a 	mov	r18,r16
10104a00:	dc002c17 	ldw	r16,176(sp)
10104a04:	00000306 	br	10104a14 <___vfprintf_internal_r+0xf84>
10104a08:	8c7ffc04 	addi	r17,r17,-16
10104a0c:	42000204 	addi	r8,r8,8
10104a10:	e440110e 	bge	fp,r17,10104a58 <___vfprintf_internal_r+0xfc8>
10104a14:	18c00404 	addi	r3,r3,16
10104a18:	10800044 	addi	r2,r2,1
10104a1c:	45000015 	stw	r20,0(r8)
10104a20:	47000115 	stw	fp,4(r8)
10104a24:	d8c02015 	stw	r3,128(sp)
10104a28:	d8801f15 	stw	r2,124(sp)
10104a2c:	98bff60e 	bge	r19,r2,10104a08 <__alt_data_end+0xfffe4a08>
10104a30:	d9801e04 	addi	r6,sp,120
10104a34:	b80b883a 	mov	r5,r23
10104a38:	8009883a 	mov	r4,r16
10104a3c:	0108f980 	call	10108f98 <__sprint_r>
10104a40:	103d151e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104a44:	8c7ffc04 	addi	r17,r17,-16
10104a48:	d8c02017 	ldw	r3,128(sp)
10104a4c:	d8801f17 	ldw	r2,124(sp)
10104a50:	da000404 	addi	r8,sp,16
10104a54:	e47fef16 	blt	fp,r17,10104a14 <__alt_data_end+0xfffe4a14>
10104a58:	9021883a 	mov	r16,r18
10104a5c:	a825883a 	mov	r18,r21
10104a60:	b02b883a 	mov	r21,r22
10104a64:	882d883a 	mov	r22,r17
10104a68:	dc403017 	ldw	r17,192(sp)
10104a6c:	d9002b17 	ldw	r4,172(sp)
10104a70:	1d87883a 	add	r3,r3,r22
10104a74:	10800044 	addi	r2,r2,1
10104a78:	41000015 	stw	r4,0(r8)
10104a7c:	45800115 	stw	r22,4(r8)
10104a80:	d8c02015 	stw	r3,128(sp)
10104a84:	d8801f15 	stw	r2,124(sp)
10104a88:	010001c4 	movi	r4,7
10104a8c:	20818e16 	blt	r4,r2,101050c8 <___vfprintf_internal_r+0x1638>
10104a90:	42000204 	addi	r8,r8,8
10104a94:	003e3106 	br	1010435c <__alt_data_end+0xfffe435c>
10104a98:	d9403317 	ldw	r5,204(sp)
10104a9c:	00800044 	movi	r2,1
10104aa0:	18c00044 	addi	r3,r3,1
10104aa4:	1141530e 	bge	r2,r5,10104ff4 <___vfprintf_internal_r+0x1564>
10104aa8:	dc401f17 	ldw	r17,124(sp)
10104aac:	00800044 	movi	r2,1
10104ab0:	40800115 	stw	r2,4(r8)
10104ab4:	8c400044 	addi	r17,r17,1
10104ab8:	44000015 	stw	r16,0(r8)
10104abc:	d8c02015 	stw	r3,128(sp)
10104ac0:	dc401f15 	stw	r17,124(sp)
10104ac4:	008001c4 	movi	r2,7
10104ac8:	14416b16 	blt	r2,r17,10105078 <___vfprintf_internal_r+0x15e8>
10104acc:	42000204 	addi	r8,r8,8
10104ad0:	d8803717 	ldw	r2,220(sp)
10104ad4:	d9003417 	ldw	r4,208(sp)
10104ad8:	8c400044 	addi	r17,r17,1
10104adc:	10c7883a 	add	r3,r2,r3
10104ae0:	40800115 	stw	r2,4(r8)
10104ae4:	41000015 	stw	r4,0(r8)
10104ae8:	d8c02015 	stw	r3,128(sp)
10104aec:	dc401f15 	stw	r17,124(sp)
10104af0:	008001c4 	movi	r2,7
10104af4:	14416916 	blt	r2,r17,1010509c <___vfprintf_internal_r+0x160c>
10104af8:	45800204 	addi	r22,r8,8
10104afc:	d9003617 	ldw	r4,216(sp)
10104b00:	d9403817 	ldw	r5,224(sp)
10104b04:	000d883a 	mov	r6,zero
10104b08:	000f883a 	mov	r7,zero
10104b0c:	d8c03c15 	stw	r3,240(sp)
10104b10:	010d2b00 	call	1010d2b0 <__eqdf2>
10104b14:	d8c03c17 	ldw	r3,240(sp)
10104b18:	1000bc26 	beq	r2,zero,10104e0c <___vfprintf_internal_r+0x137c>
10104b1c:	d9403317 	ldw	r5,204(sp)
10104b20:	84000044 	addi	r16,r16,1
10104b24:	8c400044 	addi	r17,r17,1
10104b28:	28bfffc4 	addi	r2,r5,-1
10104b2c:	1887883a 	add	r3,r3,r2
10104b30:	b0800115 	stw	r2,4(r22)
10104b34:	b4000015 	stw	r16,0(r22)
10104b38:	d8c02015 	stw	r3,128(sp)
10104b3c:	dc401f15 	stw	r17,124(sp)
10104b40:	008001c4 	movi	r2,7
10104b44:	14414316 	blt	r2,r17,10105054 <___vfprintf_internal_r+0x15c4>
10104b48:	b5800204 	addi	r22,r22,8
10104b4c:	d9003a17 	ldw	r4,232(sp)
10104b50:	df0022c4 	addi	fp,sp,139
10104b54:	8c400044 	addi	r17,r17,1
10104b58:	20c7883a 	add	r3,r4,r3
10104b5c:	b7000015 	stw	fp,0(r22)
10104b60:	b1000115 	stw	r4,4(r22)
10104b64:	d8c02015 	stw	r3,128(sp)
10104b68:	dc401f15 	stw	r17,124(sp)
10104b6c:	008001c4 	movi	r2,7
10104b70:	14400e16 	blt	r2,r17,10104bac <___vfprintf_internal_r+0x111c>
10104b74:	b2000204 	addi	r8,r22,8
10104b78:	003e3a06 	br	10104464 <__alt_data_end+0xfffe4464>
10104b7c:	01040474 	movhi	r4,4113
10104b80:	2105a984 	addi	r4,r4,5798
10104b84:	d9002b15 	stw	r4,172(sp)
10104b88:	d9002b17 	ldw	r4,172(sp)
10104b8c:	1c07883a 	add	r3,r3,r16
10104b90:	44000115 	stw	r16,4(r8)
10104b94:	41000015 	stw	r4,0(r8)
10104b98:	10800044 	addi	r2,r2,1
10104b9c:	d8c02015 	stw	r3,128(sp)
10104ba0:	d8801f15 	stw	r2,124(sp)
10104ba4:	010001c4 	movi	r4,7
10104ba8:	20be2d0e 	bge	r4,r2,10104460 <__alt_data_end+0xfffe4460>
10104bac:	d9002c17 	ldw	r4,176(sp)
10104bb0:	d9801e04 	addi	r6,sp,120
10104bb4:	b80b883a 	mov	r5,r23
10104bb8:	0108f980 	call	10108f98 <__sprint_r>
10104bbc:	103cb61e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104bc0:	d8c02017 	ldw	r3,128(sp)
10104bc4:	da000404 	addi	r8,sp,16
10104bc8:	003e2606 	br	10104464 <__alt_data_end+0xfffe4464>
10104bcc:	d9002c17 	ldw	r4,176(sp)
10104bd0:	d9801e04 	addi	r6,sp,120
10104bd4:	b80b883a 	mov	r5,r23
10104bd8:	0108f980 	call	10108f98 <__sprint_r>
10104bdc:	103e5d26 	beq	r2,zero,10104554 <__alt_data_end+0xfffe4554>
10104be0:	003cad06 	br	10103e98 <__alt_data_end+0xfffe3e98>
10104be4:	d9002c17 	ldw	r4,176(sp)
10104be8:	d9801e04 	addi	r6,sp,120
10104bec:	b80b883a 	mov	r5,r23
10104bf0:	0108f980 	call	10108f98 <__sprint_r>
10104bf4:	103ca81e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104bf8:	d8c02017 	ldw	r3,128(sp)
10104bfc:	da000404 	addi	r8,sp,16
10104c00:	003e0b06 	br	10104430 <__alt_data_end+0xfffe4430>
10104c04:	d9002c17 	ldw	r4,176(sp)
10104c08:	d9801e04 	addi	r6,sp,120
10104c0c:	b80b883a 	mov	r5,r23
10104c10:	0108f980 	call	10108f98 <__sprint_r>
10104c14:	103ca01e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104c18:	d8c02017 	ldw	r3,128(sp)
10104c1c:	da000404 	addi	r8,sp,16
10104c20:	003dbd06 	br	10104318 <__alt_data_end+0xfffe4318>
10104c24:	d9002c17 	ldw	r4,176(sp)
10104c28:	d9801e04 	addi	r6,sp,120
10104c2c:	b80b883a 	mov	r5,r23
10104c30:	0108f980 	call	10108f98 <__sprint_r>
10104c34:	103c981e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104c38:	d8c02017 	ldw	r3,128(sp)
10104c3c:	da000404 	addi	r8,sp,16
10104c40:	003dc306 	br	10104350 <__alt_data_end+0xfffe4350>
10104c44:	d8802917 	ldw	r2,164(sp)
10104c48:	d8002785 	stb	zero,158(sp)
10104c4c:	103f0616 	blt	r2,zero,10104868 <__alt_data_end+0xfffe4868>
10104c50:	00ffdfc4 	movi	r3,-129
10104c54:	9d84b03a 	or	r2,r19,r22
10104c58:	90e4703a 	and	r18,r18,r3
10104c5c:	103c6b26 	beq	r2,zero,10103e0c <__alt_data_end+0xfffe3e0c>
10104c60:	0039883a 	mov	fp,zero
10104c64:	003e7406 	br	10104638 <__alt_data_end+0xfffe4638>
10104c68:	9080040c 	andi	r2,r18,16
10104c6c:	1001b326 	beq	r2,zero,1010533c <___vfprintf_internal_r+0x18ac>
10104c70:	d9002d17 	ldw	r4,180(sp)
10104c74:	d9402917 	ldw	r5,164(sp)
10104c78:	d8002785 	stb	zero,158(sp)
10104c7c:	20800104 	addi	r2,r4,4
10104c80:	24c00017 	ldw	r19,0(r4)
10104c84:	002d883a 	mov	r22,zero
10104c88:	2801b516 	blt	r5,zero,10105360 <___vfprintf_internal_r+0x18d0>
10104c8c:	00ffdfc4 	movi	r3,-129
10104c90:	d8802d15 	stw	r2,180(sp)
10104c94:	90e4703a 	and	r18,r18,r3
10104c98:	983d2726 	beq	r19,zero,10104138 <__alt_data_end+0xfffe4138>
10104c9c:	0039883a 	mov	fp,zero
10104ca0:	003d2a06 	br	1010414c <__alt_data_end+0xfffe414c>
10104ca4:	dc402617 	ldw	r17,152(sp)
10104ca8:	0441d30e 	bge	zero,r17,101053f8 <___vfprintf_internal_r+0x1968>
10104cac:	dc403217 	ldw	r17,200(sp)
10104cb0:	d8803317 	ldw	r2,204(sp)
10104cb4:	1440010e 	bge	r2,r17,10104cbc <___vfprintf_internal_r+0x122c>
10104cb8:	1023883a 	mov	r17,r2
10104cbc:	04400a0e 	bge	zero,r17,10104ce8 <___vfprintf_internal_r+0x1258>
10104cc0:	d8801f17 	ldw	r2,124(sp)
10104cc4:	1c47883a 	add	r3,r3,r17
10104cc8:	44000015 	stw	r16,0(r8)
10104ccc:	10800044 	addi	r2,r2,1
10104cd0:	44400115 	stw	r17,4(r8)
10104cd4:	d8c02015 	stw	r3,128(sp)
10104cd8:	d8801f15 	stw	r2,124(sp)
10104cdc:	010001c4 	movi	r4,7
10104ce0:	20826516 	blt	r4,r2,10105678 <___vfprintf_internal_r+0x1be8>
10104ce4:	42000204 	addi	r8,r8,8
10104ce8:	88026116 	blt	r17,zero,10105670 <___vfprintf_internal_r+0x1be0>
10104cec:	d9003217 	ldw	r4,200(sp)
10104cf0:	2463c83a 	sub	r17,r4,r17
10104cf4:	04407b0e 	bge	zero,r17,10104ee4 <___vfprintf_internal_r+0x1454>
10104cf8:	05800404 	movi	r22,16
10104cfc:	d8801f17 	ldw	r2,124(sp)
10104d00:	b4419d0e 	bge	r22,r17,10105378 <___vfprintf_internal_r+0x18e8>
10104d04:	01040474 	movhi	r4,4113
10104d08:	2105a984 	addi	r4,r4,5798
10104d0c:	d9002b15 	stw	r4,172(sp)
10104d10:	070001c4 	movi	fp,7
10104d14:	dcc02c17 	ldw	r19,176(sp)
10104d18:	00000306 	br	10104d28 <___vfprintf_internal_r+0x1298>
10104d1c:	42000204 	addi	r8,r8,8
10104d20:	8c7ffc04 	addi	r17,r17,-16
10104d24:	b441970e 	bge	r22,r17,10105384 <___vfprintf_internal_r+0x18f4>
10104d28:	18c00404 	addi	r3,r3,16
10104d2c:	10800044 	addi	r2,r2,1
10104d30:	45000015 	stw	r20,0(r8)
10104d34:	45800115 	stw	r22,4(r8)
10104d38:	d8c02015 	stw	r3,128(sp)
10104d3c:	d8801f15 	stw	r2,124(sp)
10104d40:	e0bff60e 	bge	fp,r2,10104d1c <__alt_data_end+0xfffe4d1c>
10104d44:	d9801e04 	addi	r6,sp,120
10104d48:	b80b883a 	mov	r5,r23
10104d4c:	9809883a 	mov	r4,r19
10104d50:	0108f980 	call	10108f98 <__sprint_r>
10104d54:	103c501e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104d58:	d8c02017 	ldw	r3,128(sp)
10104d5c:	d8801f17 	ldw	r2,124(sp)
10104d60:	da000404 	addi	r8,sp,16
10104d64:	003fee06 	br	10104d20 <__alt_data_end+0xfffe4d20>
10104d68:	d9002c17 	ldw	r4,176(sp)
10104d6c:	d9801e04 	addi	r6,sp,120
10104d70:	b80b883a 	mov	r5,r23
10104d74:	0108f980 	call	10108f98 <__sprint_r>
10104d78:	103c471e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104d7c:	d8c02017 	ldw	r3,128(sp)
10104d80:	df002787 	ldb	fp,158(sp)
10104d84:	da000404 	addi	r8,sp,16
10104d88:	003d5606 	br	101042e4 <__alt_data_end+0xfffe42e4>
10104d8c:	9080040c 	andi	r2,r18,16
10104d90:	10016126 	beq	r2,zero,10105318 <___vfprintf_internal_r+0x1888>
10104d94:	d8802d17 	ldw	r2,180(sp)
10104d98:	14c00017 	ldw	r19,0(r2)
10104d9c:	10800104 	addi	r2,r2,4
10104da0:	d8802d15 	stw	r2,180(sp)
10104da4:	982dd7fa 	srai	r22,r19,31
10104da8:	b005883a 	mov	r2,r22
10104dac:	003c8206 	br	10103fb8 <__alt_data_end+0xfffe3fb8>
10104db0:	9080040c 	andi	r2,r18,16
10104db4:	10003526 	beq	r2,zero,10104e8c <___vfprintf_internal_r+0x13fc>
10104db8:	d9402d17 	ldw	r5,180(sp)
10104dbc:	d8c02917 	ldw	r3,164(sp)
10104dc0:	d8002785 	stb	zero,158(sp)
10104dc4:	28800104 	addi	r2,r5,4
10104dc8:	2cc00017 	ldw	r19,0(r5)
10104dcc:	002d883a 	mov	r22,zero
10104dd0:	18003716 	blt	r3,zero,10104eb0 <___vfprintf_internal_r+0x1420>
10104dd4:	00ffdfc4 	movi	r3,-129
10104dd8:	d8802d15 	stw	r2,180(sp)
10104ddc:	90e4703a 	and	r18,r18,r3
10104de0:	0039883a 	mov	fp,zero
10104de4:	983df326 	beq	r19,zero,101045b4 <__alt_data_end+0xfffe45b4>
10104de8:	00800244 	movi	r2,9
10104dec:	14fc7b36 	bltu	r2,r19,10103fdc <__alt_data_end+0xfffe3fdc>
10104df0:	d8c02817 	ldw	r3,160(sp)
10104df4:	dc001dc4 	addi	r16,sp,119
10104df8:	9cc00c04 	addi	r19,r19,48
10104dfc:	1c07c83a 	sub	r3,r3,r16
10104e00:	dcc01dc5 	stb	r19,119(sp)
10104e04:	d8c02e15 	stw	r3,184(sp)
10104e08:	003ce806 	br	101041ac <__alt_data_end+0xfffe41ac>
10104e0c:	d8803317 	ldw	r2,204(sp)
10104e10:	143fffc4 	addi	r16,r2,-1
10104e14:	043f4d0e 	bge	zero,r16,10104b4c <__alt_data_end+0xfffe4b4c>
10104e18:	07000404 	movi	fp,16
10104e1c:	e400810e 	bge	fp,r16,10105024 <___vfprintf_internal_r+0x1594>
10104e20:	01440474 	movhi	r5,4113
10104e24:	2945a984 	addi	r5,r5,5798
10104e28:	d9402b15 	stw	r5,172(sp)
10104e2c:	01c001c4 	movi	r7,7
10104e30:	dcc02c17 	ldw	r19,176(sp)
10104e34:	00000306 	br	10104e44 <___vfprintf_internal_r+0x13b4>
10104e38:	b5800204 	addi	r22,r22,8
10104e3c:	843ffc04 	addi	r16,r16,-16
10104e40:	e4007b0e 	bge	fp,r16,10105030 <___vfprintf_internal_r+0x15a0>
10104e44:	18c00404 	addi	r3,r3,16
10104e48:	8c400044 	addi	r17,r17,1
10104e4c:	b5000015 	stw	r20,0(r22)
10104e50:	b7000115 	stw	fp,4(r22)
10104e54:	d8c02015 	stw	r3,128(sp)
10104e58:	dc401f15 	stw	r17,124(sp)
10104e5c:	3c7ff60e 	bge	r7,r17,10104e38 <__alt_data_end+0xfffe4e38>
10104e60:	d9801e04 	addi	r6,sp,120
10104e64:	b80b883a 	mov	r5,r23
10104e68:	9809883a 	mov	r4,r19
10104e6c:	d9c03c15 	stw	r7,240(sp)
10104e70:	0108f980 	call	10108f98 <__sprint_r>
10104e74:	d9c03c17 	ldw	r7,240(sp)
10104e78:	103c071e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104e7c:	d8c02017 	ldw	r3,128(sp)
10104e80:	dc401f17 	ldw	r17,124(sp)
10104e84:	dd800404 	addi	r22,sp,16
10104e88:	003fec06 	br	10104e3c <__alt_data_end+0xfffe4e3c>
10104e8c:	9080100c 	andi	r2,r18,64
10104e90:	d8002785 	stb	zero,158(sp)
10104e94:	10010e26 	beq	r2,zero,101052d0 <___vfprintf_internal_r+0x1840>
10104e98:	d9002d17 	ldw	r4,180(sp)
10104e9c:	d9402917 	ldw	r5,164(sp)
10104ea0:	002d883a 	mov	r22,zero
10104ea4:	20800104 	addi	r2,r4,4
10104ea8:	24c0000b 	ldhu	r19,0(r4)
10104eac:	283fc90e 	bge	r5,zero,10104dd4 <__alt_data_end+0xfffe4dd4>
10104eb0:	d8802d15 	stw	r2,180(sp)
10104eb4:	0039883a 	mov	fp,zero
10104eb8:	9d84b03a 	or	r2,r19,r22
10104ebc:	103c461e 	bne	r2,zero,10103fd8 <__alt_data_end+0xfffe3fd8>
10104ec0:	00800044 	movi	r2,1
10104ec4:	003e6c06 	br	10104878 <__alt_data_end+0xfffe4878>
10104ec8:	d9002c17 	ldw	r4,176(sp)
10104ecc:	d9801e04 	addi	r6,sp,120
10104ed0:	b80b883a 	mov	r5,r23
10104ed4:	0108f980 	call	10108f98 <__sprint_r>
10104ed8:	103bef1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104edc:	d8c02017 	ldw	r3,128(sp)
10104ee0:	da000404 	addi	r8,sp,16
10104ee4:	d9003217 	ldw	r4,200(sp)
10104ee8:	d8802617 	ldw	r2,152(sp)
10104eec:	d9403317 	ldw	r5,204(sp)
10104ef0:	8123883a 	add	r17,r16,r4
10104ef4:	11400216 	blt	r2,r5,10104f00 <___vfprintf_internal_r+0x1470>
10104ef8:	9100004c 	andi	r4,r18,1
10104efc:	20000d26 	beq	r4,zero,10104f34 <___vfprintf_internal_r+0x14a4>
10104f00:	d9003717 	ldw	r4,220(sp)
10104f04:	d9403417 	ldw	r5,208(sp)
10104f08:	1907883a 	add	r3,r3,r4
10104f0c:	d9001f17 	ldw	r4,124(sp)
10104f10:	41400015 	stw	r5,0(r8)
10104f14:	d9403717 	ldw	r5,220(sp)
10104f18:	21000044 	addi	r4,r4,1
10104f1c:	d8c02015 	stw	r3,128(sp)
10104f20:	41400115 	stw	r5,4(r8)
10104f24:	d9001f15 	stw	r4,124(sp)
10104f28:	014001c4 	movi	r5,7
10104f2c:	2901e816 	blt	r5,r4,101056d0 <___vfprintf_internal_r+0x1c40>
10104f30:	42000204 	addi	r8,r8,8
10104f34:	d9003317 	ldw	r4,204(sp)
10104f38:	8121883a 	add	r16,r16,r4
10104f3c:	2085c83a 	sub	r2,r4,r2
10104f40:	8461c83a 	sub	r16,r16,r17
10104f44:	1400010e 	bge	r2,r16,10104f4c <___vfprintf_internal_r+0x14bc>
10104f48:	1021883a 	mov	r16,r2
10104f4c:	04000a0e 	bge	zero,r16,10104f78 <___vfprintf_internal_r+0x14e8>
10104f50:	d9001f17 	ldw	r4,124(sp)
10104f54:	1c07883a 	add	r3,r3,r16
10104f58:	44400015 	stw	r17,0(r8)
10104f5c:	21000044 	addi	r4,r4,1
10104f60:	44000115 	stw	r16,4(r8)
10104f64:	d8c02015 	stw	r3,128(sp)
10104f68:	d9001f15 	stw	r4,124(sp)
10104f6c:	014001c4 	movi	r5,7
10104f70:	2901fb16 	blt	r5,r4,10105760 <___vfprintf_internal_r+0x1cd0>
10104f74:	42000204 	addi	r8,r8,8
10104f78:	8001f716 	blt	r16,zero,10105758 <___vfprintf_internal_r+0x1cc8>
10104f7c:	1421c83a 	sub	r16,r2,r16
10104f80:	043d380e 	bge	zero,r16,10104464 <__alt_data_end+0xfffe4464>
10104f84:	04400404 	movi	r17,16
10104f88:	d8801f17 	ldw	r2,124(sp)
10104f8c:	8c3efb0e 	bge	r17,r16,10104b7c <__alt_data_end+0xfffe4b7c>
10104f90:	01440474 	movhi	r5,4113
10104f94:	2945a984 	addi	r5,r5,5798
10104f98:	d9402b15 	stw	r5,172(sp)
10104f9c:	058001c4 	movi	r22,7
10104fa0:	dcc02c17 	ldw	r19,176(sp)
10104fa4:	00000306 	br	10104fb4 <___vfprintf_internal_r+0x1524>
10104fa8:	42000204 	addi	r8,r8,8
10104fac:	843ffc04 	addi	r16,r16,-16
10104fb0:	8c3ef50e 	bge	r17,r16,10104b88 <__alt_data_end+0xfffe4b88>
10104fb4:	18c00404 	addi	r3,r3,16
10104fb8:	10800044 	addi	r2,r2,1
10104fbc:	45000015 	stw	r20,0(r8)
10104fc0:	44400115 	stw	r17,4(r8)
10104fc4:	d8c02015 	stw	r3,128(sp)
10104fc8:	d8801f15 	stw	r2,124(sp)
10104fcc:	b0bff60e 	bge	r22,r2,10104fa8 <__alt_data_end+0xfffe4fa8>
10104fd0:	d9801e04 	addi	r6,sp,120
10104fd4:	b80b883a 	mov	r5,r23
10104fd8:	9809883a 	mov	r4,r19
10104fdc:	0108f980 	call	10108f98 <__sprint_r>
10104fe0:	103bad1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10104fe4:	d8c02017 	ldw	r3,128(sp)
10104fe8:	d8801f17 	ldw	r2,124(sp)
10104fec:	da000404 	addi	r8,sp,16
10104ff0:	003fee06 	br	10104fac <__alt_data_end+0xfffe4fac>
10104ff4:	9088703a 	and	r4,r18,r2
10104ff8:	203eab1e 	bne	r4,zero,10104aa8 <__alt_data_end+0xfffe4aa8>
10104ffc:	dc401f17 	ldw	r17,124(sp)
10105000:	40800115 	stw	r2,4(r8)
10105004:	44000015 	stw	r16,0(r8)
10105008:	8c400044 	addi	r17,r17,1
1010500c:	d8c02015 	stw	r3,128(sp)
10105010:	dc401f15 	stw	r17,124(sp)
10105014:	008001c4 	movi	r2,7
10105018:	14400e16 	blt	r2,r17,10105054 <___vfprintf_internal_r+0x15c4>
1010501c:	45800204 	addi	r22,r8,8
10105020:	003eca06 	br	10104b4c <__alt_data_end+0xfffe4b4c>
10105024:	01040474 	movhi	r4,4113
10105028:	2105a984 	addi	r4,r4,5798
1010502c:	d9002b15 	stw	r4,172(sp)
10105030:	d8802b17 	ldw	r2,172(sp)
10105034:	1c07883a 	add	r3,r3,r16
10105038:	8c400044 	addi	r17,r17,1
1010503c:	b0800015 	stw	r2,0(r22)
10105040:	b4000115 	stw	r16,4(r22)
10105044:	d8c02015 	stw	r3,128(sp)
10105048:	dc401f15 	stw	r17,124(sp)
1010504c:	008001c4 	movi	r2,7
10105050:	147ebd0e 	bge	r2,r17,10104b48 <__alt_data_end+0xfffe4b48>
10105054:	d9002c17 	ldw	r4,176(sp)
10105058:	d9801e04 	addi	r6,sp,120
1010505c:	b80b883a 	mov	r5,r23
10105060:	0108f980 	call	10108f98 <__sprint_r>
10105064:	103b8c1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10105068:	d8c02017 	ldw	r3,128(sp)
1010506c:	dc401f17 	ldw	r17,124(sp)
10105070:	dd800404 	addi	r22,sp,16
10105074:	003eb506 	br	10104b4c <__alt_data_end+0xfffe4b4c>
10105078:	d9002c17 	ldw	r4,176(sp)
1010507c:	d9801e04 	addi	r6,sp,120
10105080:	b80b883a 	mov	r5,r23
10105084:	0108f980 	call	10108f98 <__sprint_r>
10105088:	103b831e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
1010508c:	d8c02017 	ldw	r3,128(sp)
10105090:	dc401f17 	ldw	r17,124(sp)
10105094:	da000404 	addi	r8,sp,16
10105098:	003e8d06 	br	10104ad0 <__alt_data_end+0xfffe4ad0>
1010509c:	d9002c17 	ldw	r4,176(sp)
101050a0:	d9801e04 	addi	r6,sp,120
101050a4:	b80b883a 	mov	r5,r23
101050a8:	0108f980 	call	10108f98 <__sprint_r>
101050ac:	103b7a1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101050b0:	d8c02017 	ldw	r3,128(sp)
101050b4:	dc401f17 	ldw	r17,124(sp)
101050b8:	dd800404 	addi	r22,sp,16
101050bc:	003e8f06 	br	10104afc <__alt_data_end+0xfffe4afc>
101050c0:	0027883a 	mov	r19,zero
101050c4:	003f4a06 	br	10104df0 <__alt_data_end+0xfffe4df0>
101050c8:	d9002c17 	ldw	r4,176(sp)
101050cc:	d9801e04 	addi	r6,sp,120
101050d0:	b80b883a 	mov	r5,r23
101050d4:	0108f980 	call	10108f98 <__sprint_r>
101050d8:	103b6f1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101050dc:	d8c02017 	ldw	r3,128(sp)
101050e0:	da000404 	addi	r8,sp,16
101050e4:	003c9d06 	br	1010435c <__alt_data_end+0xfffe435c>
101050e8:	04e7c83a 	sub	r19,zero,r19
101050ec:	9804c03a 	cmpne	r2,r19,zero
101050f0:	05adc83a 	sub	r22,zero,r22
101050f4:	b0adc83a 	sub	r22,r22,r2
101050f8:	d8802917 	ldw	r2,164(sp)
101050fc:	07000b44 	movi	fp,45
10105100:	df002785 	stb	fp,158(sp)
10105104:	10017b16 	blt	r2,zero,101056f4 <___vfprintf_internal_r+0x1c64>
10105108:	00bfdfc4 	movi	r2,-129
1010510c:	90a4703a 	and	r18,r18,r2
10105110:	003bb106 	br	10103fd8 <__alt_data_end+0xfffe3fd8>
10105114:	d9003617 	ldw	r4,216(sp)
10105118:	d9403817 	ldw	r5,224(sp)
1010511c:	da003d15 	stw	r8,244(sp)
10105120:	0108cb40 	call	10108cb4 <__fpclassifyd>
10105124:	da003d17 	ldw	r8,244(sp)
10105128:	1000f026 	beq	r2,zero,101054ec <___vfprintf_internal_r+0x1a5c>
1010512c:	d9002917 	ldw	r4,164(sp)
10105130:	05bff7c4 	movi	r22,-33
10105134:	00bfffc4 	movi	r2,-1
10105138:	8dac703a 	and	r22,r17,r22
1010513c:	20820026 	beq	r4,r2,10105940 <___vfprintf_internal_r+0x1eb0>
10105140:	008011c4 	movi	r2,71
10105144:	b081f726 	beq	r22,r2,10105924 <___vfprintf_internal_r+0x1e94>
10105148:	d9003817 	ldw	r4,224(sp)
1010514c:	90c04014 	ori	r3,r18,256
10105150:	d8c02b15 	stw	r3,172(sp)
10105154:	20021516 	blt	r4,zero,101059ac <___vfprintf_internal_r+0x1f1c>
10105158:	dcc03817 	ldw	r19,224(sp)
1010515c:	d8002a05 	stb	zero,168(sp)
10105160:	00801984 	movi	r2,102
10105164:	8881f926 	beq	r17,r2,1010594c <___vfprintf_internal_r+0x1ebc>
10105168:	00801184 	movi	r2,70
1010516c:	88821c26 	beq	r17,r2,101059e0 <___vfprintf_internal_r+0x1f50>
10105170:	00801144 	movi	r2,69
10105174:	b081ef26 	beq	r22,r2,10105934 <___vfprintf_internal_r+0x1ea4>
10105178:	d8c02917 	ldw	r3,164(sp)
1010517c:	d8802104 	addi	r2,sp,132
10105180:	d8800315 	stw	r2,12(sp)
10105184:	d9403617 	ldw	r5,216(sp)
10105188:	d8802504 	addi	r2,sp,148
1010518c:	d9002c17 	ldw	r4,176(sp)
10105190:	d8800215 	stw	r2,8(sp)
10105194:	d8802604 	addi	r2,sp,152
10105198:	d8c00015 	stw	r3,0(sp)
1010519c:	d8800115 	stw	r2,4(sp)
101051a0:	01c00084 	movi	r7,2
101051a4:	980d883a 	mov	r6,r19
101051a8:	d8c03c15 	stw	r3,240(sp)
101051ac:	da003d15 	stw	r8,244(sp)
101051b0:	01061680 	call	10106168 <_dtoa_r>
101051b4:	1021883a 	mov	r16,r2
101051b8:	008019c4 	movi	r2,103
101051bc:	d8c03c17 	ldw	r3,240(sp)
101051c0:	da003d17 	ldw	r8,244(sp)
101051c4:	88817126 	beq	r17,r2,1010578c <___vfprintf_internal_r+0x1cfc>
101051c8:	008011c4 	movi	r2,71
101051cc:	88829226 	beq	r17,r2,10105c18 <___vfprintf_internal_r+0x2188>
101051d0:	80f9883a 	add	fp,r16,r3
101051d4:	d9003617 	ldw	r4,216(sp)
101051d8:	000d883a 	mov	r6,zero
101051dc:	000f883a 	mov	r7,zero
101051e0:	980b883a 	mov	r5,r19
101051e4:	da003d15 	stw	r8,244(sp)
101051e8:	010d2b00 	call	1010d2b0 <__eqdf2>
101051ec:	da003d17 	ldw	r8,244(sp)
101051f0:	10018d26 	beq	r2,zero,10105828 <___vfprintf_internal_r+0x1d98>
101051f4:	d8802117 	ldw	r2,132(sp)
101051f8:	1700062e 	bgeu	r2,fp,10105214 <___vfprintf_internal_r+0x1784>
101051fc:	01000c04 	movi	r4,48
10105200:	10c00044 	addi	r3,r2,1
10105204:	d8c02115 	stw	r3,132(sp)
10105208:	11000005 	stb	r4,0(r2)
1010520c:	d8802117 	ldw	r2,132(sp)
10105210:	173ffb36 	bltu	r2,fp,10105200 <__alt_data_end+0xfffe5200>
10105214:	1405c83a 	sub	r2,r2,r16
10105218:	d8803315 	stw	r2,204(sp)
1010521c:	008011c4 	movi	r2,71
10105220:	b0817626 	beq	r22,r2,101057fc <___vfprintf_internal_r+0x1d6c>
10105224:	00801944 	movi	r2,101
10105228:	1442810e 	bge	r2,r17,10105c30 <___vfprintf_internal_r+0x21a0>
1010522c:	d8c02617 	ldw	r3,152(sp)
10105230:	00801984 	movi	r2,102
10105234:	d8c03215 	stw	r3,200(sp)
10105238:	8881fe26 	beq	r17,r2,10105a34 <___vfprintf_internal_r+0x1fa4>
1010523c:	d8c03217 	ldw	r3,200(sp)
10105240:	d9003317 	ldw	r4,204(sp)
10105244:	1901dd16 	blt	r3,r4,101059bc <___vfprintf_internal_r+0x1f2c>
10105248:	9480004c 	andi	r18,r18,1
1010524c:	90022b1e 	bne	r18,zero,10105afc <___vfprintf_internal_r+0x206c>
10105250:	1805883a 	mov	r2,r3
10105254:	18028016 	blt	r3,zero,10105c58 <___vfprintf_internal_r+0x21c8>
10105258:	d8c03217 	ldw	r3,200(sp)
1010525c:	044019c4 	movi	r17,103
10105260:	d8c02e15 	stw	r3,184(sp)
10105264:	df002a07 	ldb	fp,168(sp)
10105268:	e001531e 	bne	fp,zero,101057b8 <___vfprintf_internal_r+0x1d28>
1010526c:	df002783 	ldbu	fp,158(sp)
10105270:	d8802a15 	stw	r2,168(sp)
10105274:	dc802b17 	ldw	r18,172(sp)
10105278:	d8002915 	stw	zero,164(sp)
1010527c:	003bd106 	br	101041c4 <__alt_data_end+0xfffe41c4>
10105280:	d8802d17 	ldw	r2,180(sp)
10105284:	d8c02d17 	ldw	r3,180(sp)
10105288:	d9002d17 	ldw	r4,180(sp)
1010528c:	10800017 	ldw	r2,0(r2)
10105290:	18c00117 	ldw	r3,4(r3)
10105294:	21000204 	addi	r4,r4,8
10105298:	d8803615 	stw	r2,216(sp)
1010529c:	d8c03815 	stw	r3,224(sp)
101052a0:	d9002d15 	stw	r4,180(sp)
101052a4:	003b7506 	br	1010407c <__alt_data_end+0xfffe407c>
101052a8:	ac400007 	ldb	r17,0(r21)
101052ac:	003a5906 	br	10103c14 <__alt_data_end+0xfffe3c14>
101052b0:	9080100c 	andi	r2,r18,64
101052b4:	1000a826 	beq	r2,zero,10105558 <___vfprintf_internal_r+0x1ac8>
101052b8:	d9002d17 	ldw	r4,180(sp)
101052bc:	002d883a 	mov	r22,zero
101052c0:	24c0000b 	ldhu	r19,0(r4)
101052c4:	21000104 	addi	r4,r4,4
101052c8:	d9002d15 	stw	r4,180(sp)
101052cc:	003ccb06 	br	101045fc <__alt_data_end+0xfffe45fc>
101052d0:	d8c02d17 	ldw	r3,180(sp)
101052d4:	d9002917 	ldw	r4,164(sp)
101052d8:	002d883a 	mov	r22,zero
101052dc:	18800104 	addi	r2,r3,4
101052e0:	1cc00017 	ldw	r19,0(r3)
101052e4:	203ebb0e 	bge	r4,zero,10104dd4 <__alt_data_end+0xfffe4dd4>
101052e8:	003ef106 	br	10104eb0 <__alt_data_end+0xfffe4eb0>
101052ec:	9080040c 	andi	r2,r18,16
101052f0:	1000921e 	bne	r2,zero,1010553c <___vfprintf_internal_r+0x1aac>
101052f4:	9480100c 	andi	r18,r18,64
101052f8:	90013926 	beq	r18,zero,101057e0 <___vfprintf_internal_r+0x1d50>
101052fc:	d9002d17 	ldw	r4,180(sp)
10105300:	d9402f17 	ldw	r5,188(sp)
10105304:	20800017 	ldw	r2,0(r4)
10105308:	21000104 	addi	r4,r4,4
1010530c:	d9002d15 	stw	r4,180(sp)
10105310:	1140000d 	sth	r5,0(r2)
10105314:	003a1606 	br	10103b70 <__alt_data_end+0xfffe3b70>
10105318:	9080100c 	andi	r2,r18,64
1010531c:	10008026 	beq	r2,zero,10105520 <___vfprintf_internal_r+0x1a90>
10105320:	d8c02d17 	ldw	r3,180(sp)
10105324:	1cc0000f 	ldh	r19,0(r3)
10105328:	18c00104 	addi	r3,r3,4
1010532c:	d8c02d15 	stw	r3,180(sp)
10105330:	982dd7fa 	srai	r22,r19,31
10105334:	b005883a 	mov	r2,r22
10105338:	003b1f06 	br	10103fb8 <__alt_data_end+0xfffe3fb8>
1010533c:	9080100c 	andi	r2,r18,64
10105340:	d8002785 	stb	zero,158(sp)
10105344:	10008a1e 	bne	r2,zero,10105570 <___vfprintf_internal_r+0x1ae0>
10105348:	d9402d17 	ldw	r5,180(sp)
1010534c:	d8c02917 	ldw	r3,164(sp)
10105350:	002d883a 	mov	r22,zero
10105354:	28800104 	addi	r2,r5,4
10105358:	2cc00017 	ldw	r19,0(r5)
1010535c:	183e4b0e 	bge	r3,zero,10104c8c <__alt_data_end+0xfffe4c8c>
10105360:	9d86b03a 	or	r3,r19,r22
10105364:	d8802d15 	stw	r2,180(sp)
10105368:	183e4c1e 	bne	r3,zero,10104c9c <__alt_data_end+0xfffe4c9c>
1010536c:	0039883a 	mov	fp,zero
10105370:	0005883a 	mov	r2,zero
10105374:	003d4006 	br	10104878 <__alt_data_end+0xfffe4878>
10105378:	01440474 	movhi	r5,4113
1010537c:	2945a984 	addi	r5,r5,5798
10105380:	d9402b15 	stw	r5,172(sp)
10105384:	d9402b17 	ldw	r5,172(sp)
10105388:	1c47883a 	add	r3,r3,r17
1010538c:	10800044 	addi	r2,r2,1
10105390:	41400015 	stw	r5,0(r8)
10105394:	44400115 	stw	r17,4(r8)
10105398:	d8c02015 	stw	r3,128(sp)
1010539c:	d8801f15 	stw	r2,124(sp)
101053a0:	010001c4 	movi	r4,7
101053a4:	20bec816 	blt	r4,r2,10104ec8 <__alt_data_end+0xfffe4ec8>
101053a8:	42000204 	addi	r8,r8,8
101053ac:	003ecd06 	br	10104ee4 <__alt_data_end+0xfffe4ee4>
101053b0:	d9002917 	ldw	r4,164(sp)
101053b4:	d8002785 	stb	zero,158(sp)
101053b8:	203d2d16 	blt	r4,zero,10104870 <__alt_data_end+0xfffe4870>
101053bc:	00bfdfc4 	movi	r2,-129
101053c0:	90a4703a 	and	r18,r18,r2
101053c4:	003a9106 	br	10103e0c <__alt_data_end+0xfffe3e0c>
101053c8:	01040474 	movhi	r4,4113
101053cc:	2105a984 	addi	r4,r4,5798
101053d0:	d9002b15 	stw	r4,172(sp)
101053d4:	003c0c06 	br	10104408 <__alt_data_end+0xfffe4408>
101053d8:	d9002c17 	ldw	r4,176(sp)
101053dc:	d9801e04 	addi	r6,sp,120
101053e0:	b80b883a 	mov	r5,r23
101053e4:	0108f980 	call	10108f98 <__sprint_r>
101053e8:	103aab1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101053ec:	d8c02017 	ldw	r3,128(sp)
101053f0:	da000404 	addi	r8,sp,16
101053f4:	003d4106 	br	101048fc <__alt_data_end+0xfffe48fc>
101053f8:	d8801f17 	ldw	r2,124(sp)
101053fc:	01440474 	movhi	r5,4113
10105400:	01000044 	movi	r4,1
10105404:	18c00044 	addi	r3,r3,1
10105408:	10800044 	addi	r2,r2,1
1010540c:	2945a904 	addi	r5,r5,5796
10105410:	41000115 	stw	r4,4(r8)
10105414:	41400015 	stw	r5,0(r8)
10105418:	d8c02015 	stw	r3,128(sp)
1010541c:	d8801f15 	stw	r2,124(sp)
10105420:	010001c4 	movi	r4,7
10105424:	20805c16 	blt	r4,r2,10105598 <___vfprintf_internal_r+0x1b08>
10105428:	42000204 	addi	r8,r8,8
1010542c:	8800041e 	bne	r17,zero,10105440 <___vfprintf_internal_r+0x19b0>
10105430:	d8803317 	ldw	r2,204(sp)
10105434:	1000021e 	bne	r2,zero,10105440 <___vfprintf_internal_r+0x19b0>
10105438:	9080004c 	andi	r2,r18,1
1010543c:	103c0926 	beq	r2,zero,10104464 <__alt_data_end+0xfffe4464>
10105440:	d9003717 	ldw	r4,220(sp)
10105444:	d8801f17 	ldw	r2,124(sp)
10105448:	d9403417 	ldw	r5,208(sp)
1010544c:	20c7883a 	add	r3,r4,r3
10105450:	10800044 	addi	r2,r2,1
10105454:	41000115 	stw	r4,4(r8)
10105458:	41400015 	stw	r5,0(r8)
1010545c:	d8c02015 	stw	r3,128(sp)
10105460:	d8801f15 	stw	r2,124(sp)
10105464:	010001c4 	movi	r4,7
10105468:	20812116 	blt	r4,r2,101058f0 <___vfprintf_internal_r+0x1e60>
1010546c:	42000204 	addi	r8,r8,8
10105470:	0463c83a 	sub	r17,zero,r17
10105474:	0440730e 	bge	zero,r17,10105644 <___vfprintf_internal_r+0x1bb4>
10105478:	05800404 	movi	r22,16
1010547c:	b440860e 	bge	r22,r17,10105698 <___vfprintf_internal_r+0x1c08>
10105480:	01440474 	movhi	r5,4113
10105484:	2945a984 	addi	r5,r5,5798
10105488:	d9402b15 	stw	r5,172(sp)
1010548c:	070001c4 	movi	fp,7
10105490:	dcc02c17 	ldw	r19,176(sp)
10105494:	00000306 	br	101054a4 <___vfprintf_internal_r+0x1a14>
10105498:	42000204 	addi	r8,r8,8
1010549c:	8c7ffc04 	addi	r17,r17,-16
101054a0:	b440800e 	bge	r22,r17,101056a4 <___vfprintf_internal_r+0x1c14>
101054a4:	18c00404 	addi	r3,r3,16
101054a8:	10800044 	addi	r2,r2,1
101054ac:	45000015 	stw	r20,0(r8)
101054b0:	45800115 	stw	r22,4(r8)
101054b4:	d8c02015 	stw	r3,128(sp)
101054b8:	d8801f15 	stw	r2,124(sp)
101054bc:	e0bff60e 	bge	fp,r2,10105498 <__alt_data_end+0xfffe5498>
101054c0:	d9801e04 	addi	r6,sp,120
101054c4:	b80b883a 	mov	r5,r23
101054c8:	9809883a 	mov	r4,r19
101054cc:	0108f980 	call	10108f98 <__sprint_r>
101054d0:	103a711e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101054d4:	d8c02017 	ldw	r3,128(sp)
101054d8:	d8801f17 	ldw	r2,124(sp)
101054dc:	da000404 	addi	r8,sp,16
101054e0:	003fee06 	br	1010549c <__alt_data_end+0xfffe549c>
101054e4:	00bfffc4 	movi	r2,-1
101054e8:	003a6f06 	br	10103ea8 <__alt_data_end+0xfffe3ea8>
101054ec:	008011c4 	movi	r2,71
101054f0:	1440b816 	blt	r2,r17,101057d4 <___vfprintf_internal_r+0x1d44>
101054f4:	04040474 	movhi	r16,4113
101054f8:	84059b04 	addi	r16,r16,5740
101054fc:	00c000c4 	movi	r3,3
10105500:	00bfdfc4 	movi	r2,-129
10105504:	d8c02a15 	stw	r3,168(sp)
10105508:	90a4703a 	and	r18,r18,r2
1010550c:	df002783 	ldbu	fp,158(sp)
10105510:	d8c02e15 	stw	r3,184(sp)
10105514:	d8002915 	stw	zero,164(sp)
10105518:	d8003215 	stw	zero,200(sp)
1010551c:	003b2906 	br	101041c4 <__alt_data_end+0xfffe41c4>
10105520:	d9002d17 	ldw	r4,180(sp)
10105524:	24c00017 	ldw	r19,0(r4)
10105528:	21000104 	addi	r4,r4,4
1010552c:	d9002d15 	stw	r4,180(sp)
10105530:	982dd7fa 	srai	r22,r19,31
10105534:	b005883a 	mov	r2,r22
10105538:	003a9f06 	br	10103fb8 <__alt_data_end+0xfffe3fb8>
1010553c:	d9402d17 	ldw	r5,180(sp)
10105540:	d8c02f17 	ldw	r3,188(sp)
10105544:	28800017 	ldw	r2,0(r5)
10105548:	29400104 	addi	r5,r5,4
1010554c:	d9402d15 	stw	r5,180(sp)
10105550:	10c00015 	stw	r3,0(r2)
10105554:	00398606 	br	10103b70 <__alt_data_end+0xfffe3b70>
10105558:	d9402d17 	ldw	r5,180(sp)
1010555c:	002d883a 	mov	r22,zero
10105560:	2cc00017 	ldw	r19,0(r5)
10105564:	29400104 	addi	r5,r5,4
10105568:	d9402d15 	stw	r5,180(sp)
1010556c:	003c2306 	br	101045fc <__alt_data_end+0xfffe45fc>
10105570:	d8c02d17 	ldw	r3,180(sp)
10105574:	d9002917 	ldw	r4,164(sp)
10105578:	002d883a 	mov	r22,zero
1010557c:	18800104 	addi	r2,r3,4
10105580:	1cc0000b 	ldhu	r19,0(r3)
10105584:	203dc10e 	bge	r4,zero,10104c8c <__alt_data_end+0xfffe4c8c>
10105588:	003f7506 	br	10105360 <__alt_data_end+0xfffe5360>
1010558c:	04040474 	movhi	r16,4113
10105590:	84059904 	addi	r16,r16,5732
10105594:	003acc06 	br	101040c8 <__alt_data_end+0xfffe40c8>
10105598:	d9002c17 	ldw	r4,176(sp)
1010559c:	d9801e04 	addi	r6,sp,120
101055a0:	b80b883a 	mov	r5,r23
101055a4:	0108f980 	call	10108f98 <__sprint_r>
101055a8:	103a3b1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101055ac:	dc402617 	ldw	r17,152(sp)
101055b0:	d8c02017 	ldw	r3,128(sp)
101055b4:	da000404 	addi	r8,sp,16
101055b8:	003f9c06 	br	1010542c <__alt_data_end+0xfffe542c>
101055bc:	ac400043 	ldbu	r17,1(r21)
101055c0:	94800814 	ori	r18,r18,32
101055c4:	ad400044 	addi	r21,r21,1
101055c8:	8c403fcc 	andi	r17,r17,255
101055cc:	8c40201c 	xori	r17,r17,128
101055d0:	8c7fe004 	addi	r17,r17,-128
101055d4:	00398f06 	br	10103c14 <__alt_data_end+0xfffe3c14>
101055d8:	d8c02d15 	stw	r3,180(sp)
101055dc:	0039883a 	mov	fp,zero
101055e0:	003e3506 	br	10104eb8 <__alt_data_end+0xfffe4eb8>
101055e4:	d9002c17 	ldw	r4,176(sp)
101055e8:	d9801e04 	addi	r6,sp,120
101055ec:	b80b883a 	mov	r5,r23
101055f0:	0108f980 	call	10108f98 <__sprint_r>
101055f4:	103a281e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101055f8:	d8c02017 	ldw	r3,128(sp)
101055fc:	da000404 	addi	r8,sp,16
10105600:	003cd006 	br	10104944 <__alt_data_end+0xfffe4944>
10105604:	8009883a 	mov	r4,r16
10105608:	da003d15 	stw	r8,244(sp)
1010560c:	0108e040 	call	10108e04 <strlen>
10105610:	d8802e15 	stw	r2,184(sp)
10105614:	da003d17 	ldw	r8,244(sp)
10105618:	103c340e 	bge	r2,zero,101046ec <__alt_data_end+0xfffe46ec>
1010561c:	0005883a 	mov	r2,zero
10105620:	003c3206 	br	101046ec <__alt_data_end+0xfffe46ec>
10105624:	d9002c17 	ldw	r4,176(sp)
10105628:	d9801e04 	addi	r6,sp,120
1010562c:	b80b883a 	mov	r5,r23
10105630:	0108f980 	call	10108f98 <__sprint_r>
10105634:	103a181e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10105638:	d8c02017 	ldw	r3,128(sp)
1010563c:	d8801f17 	ldw	r2,124(sp)
10105640:	da000404 	addi	r8,sp,16
10105644:	d9403317 	ldw	r5,204(sp)
10105648:	10800044 	addi	r2,r2,1
1010564c:	44000015 	stw	r16,0(r8)
10105650:	28c7883a 	add	r3,r5,r3
10105654:	003b7d06 	br	1010444c <__alt_data_end+0xfffe444c>
10105658:	01040474 	movhi	r4,4113
1010565c:	2105ad84 	addi	r4,r4,5814
10105660:	d9003515 	stw	r4,212(sp)
10105664:	003b1406 	br	101042b8 <__alt_data_end+0xfffe42b8>
10105668:	013fffc4 	movi	r4,-1
1010566c:	003a3506 	br	10103f44 <__alt_data_end+0xfffe3f44>
10105670:	0023883a 	mov	r17,zero
10105674:	003d9d06 	br	10104cec <__alt_data_end+0xfffe4cec>
10105678:	d9002c17 	ldw	r4,176(sp)
1010567c:	d9801e04 	addi	r6,sp,120
10105680:	b80b883a 	mov	r5,r23
10105684:	0108f980 	call	10108f98 <__sprint_r>
10105688:	103a031e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
1010568c:	d8c02017 	ldw	r3,128(sp)
10105690:	da000404 	addi	r8,sp,16
10105694:	003d9406 	br	10104ce8 <__alt_data_end+0xfffe4ce8>
10105698:	01040474 	movhi	r4,4113
1010569c:	2105a984 	addi	r4,r4,5798
101056a0:	d9002b15 	stw	r4,172(sp)
101056a4:	d9002b17 	ldw	r4,172(sp)
101056a8:	1c47883a 	add	r3,r3,r17
101056ac:	10800044 	addi	r2,r2,1
101056b0:	41000015 	stw	r4,0(r8)
101056b4:	44400115 	stw	r17,4(r8)
101056b8:	d8c02015 	stw	r3,128(sp)
101056bc:	d8801f15 	stw	r2,124(sp)
101056c0:	010001c4 	movi	r4,7
101056c4:	20bfd716 	blt	r4,r2,10105624 <__alt_data_end+0xfffe5624>
101056c8:	42000204 	addi	r8,r8,8
101056cc:	003fdd06 	br	10105644 <__alt_data_end+0xfffe5644>
101056d0:	d9002c17 	ldw	r4,176(sp)
101056d4:	d9801e04 	addi	r6,sp,120
101056d8:	b80b883a 	mov	r5,r23
101056dc:	0108f980 	call	10108f98 <__sprint_r>
101056e0:	1039ed1e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
101056e4:	d8802617 	ldw	r2,152(sp)
101056e8:	d8c02017 	ldw	r3,128(sp)
101056ec:	da000404 	addi	r8,sp,16
101056f0:	003e1006 	br	10104f34 <__alt_data_end+0xfffe4f34>
101056f4:	00800044 	movi	r2,1
101056f8:	10803fcc 	andi	r2,r2,255
101056fc:	00c00044 	movi	r3,1
10105700:	10fa3526 	beq	r2,r3,10103fd8 <__alt_data_end+0xfffe3fd8>
10105704:	00c00084 	movi	r3,2
10105708:	10fbcb26 	beq	r2,r3,10104638 <__alt_data_end+0xfffe4638>
1010570c:	003a8f06 	br	1010414c <__alt_data_end+0xfffe414c>
10105710:	01040474 	movhi	r4,4113
10105714:	2105ad84 	addi	r4,r4,5814
10105718:	d9003515 	stw	r4,212(sp)
1010571c:	003b7606 	br	101044f8 <__alt_data_end+0xfffe44f8>
10105720:	d8802917 	ldw	r2,164(sp)
10105724:	00c00184 	movi	r3,6
10105728:	1880012e 	bgeu	r3,r2,10105730 <___vfprintf_internal_r+0x1ca0>
1010572c:	1805883a 	mov	r2,r3
10105730:	d8802e15 	stw	r2,184(sp)
10105734:	1000ef16 	blt	r2,zero,10105af4 <___vfprintf_internal_r+0x2064>
10105738:	04040474 	movhi	r16,4113
1010573c:	d8802a15 	stw	r2,168(sp)
10105740:	dcc02d15 	stw	r19,180(sp)
10105744:	d8002915 	stw	zero,164(sp)
10105748:	d8003215 	stw	zero,200(sp)
1010574c:	8405a704 	addi	r16,r16,5788
10105750:	0039883a 	mov	fp,zero
10105754:	003aa206 	br	101041e0 <__alt_data_end+0xfffe41e0>
10105758:	0021883a 	mov	r16,zero
1010575c:	003e0706 	br	10104f7c <__alt_data_end+0xfffe4f7c>
10105760:	d9002c17 	ldw	r4,176(sp)
10105764:	d9801e04 	addi	r6,sp,120
10105768:	b80b883a 	mov	r5,r23
1010576c:	0108f980 	call	10108f98 <__sprint_r>
10105770:	1039c91e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10105774:	d8802617 	ldw	r2,152(sp)
10105778:	d9403317 	ldw	r5,204(sp)
1010577c:	d8c02017 	ldw	r3,128(sp)
10105780:	da000404 	addi	r8,sp,16
10105784:	2885c83a 	sub	r2,r5,r2
10105788:	003dfb06 	br	10104f78 <__alt_data_end+0xfffe4f78>
1010578c:	9080004c 	andi	r2,r18,1
10105790:	103e8f1e 	bne	r2,zero,101051d0 <__alt_data_end+0xfffe51d0>
10105794:	d8802117 	ldw	r2,132(sp)
10105798:	003e9e06 	br	10105214 <__alt_data_end+0xfffe5214>
1010579c:	1025883a 	mov	r18,r2
101057a0:	0039883a 	mov	fp,zero
101057a4:	00800084 	movi	r2,2
101057a8:	003fd306 	br	101056f8 <__alt_data_end+0xfffe56f8>
101057ac:	07000b44 	movi	fp,45
101057b0:	df002785 	stb	fp,158(sp)
101057b4:	003a4006 	br	101040b8 <__alt_data_end+0xfffe40b8>
101057b8:	00c00b44 	movi	r3,45
101057bc:	d8c02785 	stb	r3,158(sp)
101057c0:	d8802a15 	stw	r2,168(sp)
101057c4:	dc802b17 	ldw	r18,172(sp)
101057c8:	d8002915 	stw	zero,164(sp)
101057cc:	07000b44 	movi	fp,45
101057d0:	003a8006 	br	101041d4 <__alt_data_end+0xfffe41d4>
101057d4:	04040474 	movhi	r16,4113
101057d8:	84059c04 	addi	r16,r16,5744
101057dc:	003f4706 	br	101054fc <__alt_data_end+0xfffe54fc>
101057e0:	d8c02d17 	ldw	r3,180(sp)
101057e4:	d9002f17 	ldw	r4,188(sp)
101057e8:	18800017 	ldw	r2,0(r3)
101057ec:	18c00104 	addi	r3,r3,4
101057f0:	d8c02d15 	stw	r3,180(sp)
101057f4:	11000015 	stw	r4,0(r2)
101057f8:	0038dd06 	br	10103b70 <__alt_data_end+0xfffe3b70>
101057fc:	dd802617 	ldw	r22,152(sp)
10105800:	00bfff44 	movi	r2,-3
10105804:	b0801c16 	blt	r22,r2,10105878 <___vfprintf_internal_r+0x1de8>
10105808:	d9402917 	ldw	r5,164(sp)
1010580c:	2d801a16 	blt	r5,r22,10105878 <___vfprintf_internal_r+0x1de8>
10105810:	dd803215 	stw	r22,200(sp)
10105814:	003e8906 	br	1010523c <__alt_data_end+0xfffe523c>
10105818:	01040474 	movhi	r4,4113
1010581c:	2105a984 	addi	r4,r4,5798
10105820:	d9002b15 	stw	r4,172(sp)
10105824:	003c9106 	br	10104a6c <__alt_data_end+0xfffe4a6c>
10105828:	e005883a 	mov	r2,fp
1010582c:	003e7906 	br	10105214 <__alt_data_end+0xfffe5214>
10105830:	d9402917 	ldw	r5,164(sp)
10105834:	df002783 	ldbu	fp,158(sp)
10105838:	dcc02d15 	stw	r19,180(sp)
1010583c:	d9402a15 	stw	r5,168(sp)
10105840:	d9402e15 	stw	r5,184(sp)
10105844:	d8002915 	stw	zero,164(sp)
10105848:	d8003215 	stw	zero,200(sp)
1010584c:	003a5d06 	br	101041c4 <__alt_data_end+0xfffe41c4>
10105850:	9080004c 	andi	r2,r18,1
10105854:	0039883a 	mov	fp,zero
10105858:	10000426 	beq	r2,zero,1010586c <___vfprintf_internal_r+0x1ddc>
1010585c:	00800c04 	movi	r2,48
10105860:	dc001dc4 	addi	r16,sp,119
10105864:	d8801dc5 	stb	r2,119(sp)
10105868:	003b8006 	br	1010466c <__alt_data_end+0xfffe466c>
1010586c:	d8002e15 	stw	zero,184(sp)
10105870:	dc001e04 	addi	r16,sp,120
10105874:	003a4d06 	br	101041ac <__alt_data_end+0xfffe41ac>
10105878:	8c7fff84 	addi	r17,r17,-2
1010587c:	b5bfffc4 	addi	r22,r22,-1
10105880:	dd802615 	stw	r22,152(sp)
10105884:	dc4022c5 	stb	r17,139(sp)
10105888:	b000bf16 	blt	r22,zero,10105b88 <___vfprintf_internal_r+0x20f8>
1010588c:	00800ac4 	movi	r2,43
10105890:	d8802305 	stb	r2,140(sp)
10105894:	00800244 	movi	r2,9
10105898:	15807016 	blt	r2,r22,10105a5c <___vfprintf_internal_r+0x1fcc>
1010589c:	00800c04 	movi	r2,48
101058a0:	b5800c04 	addi	r22,r22,48
101058a4:	d8802345 	stb	r2,141(sp)
101058a8:	dd802385 	stb	r22,142(sp)
101058ac:	d88023c4 	addi	r2,sp,143
101058b0:	df0022c4 	addi	fp,sp,139
101058b4:	d8c03317 	ldw	r3,204(sp)
101058b8:	1739c83a 	sub	fp,r2,fp
101058bc:	d9003317 	ldw	r4,204(sp)
101058c0:	e0c7883a 	add	r3,fp,r3
101058c4:	df003a15 	stw	fp,232(sp)
101058c8:	d8c02e15 	stw	r3,184(sp)
101058cc:	00800044 	movi	r2,1
101058d0:	1100b30e 	bge	r2,r4,10105ba0 <___vfprintf_internal_r+0x2110>
101058d4:	d8c02e17 	ldw	r3,184(sp)
101058d8:	18c00044 	addi	r3,r3,1
101058dc:	d8c02e15 	stw	r3,184(sp)
101058e0:	1805883a 	mov	r2,r3
101058e4:	1800ac16 	blt	r3,zero,10105b98 <___vfprintf_internal_r+0x2108>
101058e8:	d8003215 	stw	zero,200(sp)
101058ec:	003e5d06 	br	10105264 <__alt_data_end+0xfffe5264>
101058f0:	d9002c17 	ldw	r4,176(sp)
101058f4:	d9801e04 	addi	r6,sp,120
101058f8:	b80b883a 	mov	r5,r23
101058fc:	0108f980 	call	10108f98 <__sprint_r>
10105900:	1039651e 	bne	r2,zero,10103e98 <__alt_data_end+0xfffe3e98>
10105904:	dc402617 	ldw	r17,152(sp)
10105908:	d8c02017 	ldw	r3,128(sp)
1010590c:	d8801f17 	ldw	r2,124(sp)
10105910:	da000404 	addi	r8,sp,16
10105914:	003ed606 	br	10105470 <__alt_data_end+0xfffe5470>
10105918:	582b883a 	mov	r21,r11
1010591c:	d8002915 	stw	zero,164(sp)
10105920:	0038bd06 	br	10103c18 <__alt_data_end+0xfffe3c18>
10105924:	d8802917 	ldw	r2,164(sp)
10105928:	103e071e 	bne	r2,zero,10105148 <__alt_data_end+0xfffe5148>
1010592c:	dc002915 	stw	r16,164(sp)
10105930:	003e0506 	br	10105148 <__alt_data_end+0xfffe5148>
10105934:	d9002917 	ldw	r4,164(sp)
10105938:	20c00044 	addi	r3,r4,1
1010593c:	003e0f06 	br	1010517c <__alt_data_end+0xfffe517c>
10105940:	01400184 	movi	r5,6
10105944:	d9402915 	stw	r5,164(sp)
10105948:	003dff06 	br	10105148 <__alt_data_end+0xfffe5148>
1010594c:	d8802104 	addi	r2,sp,132
10105950:	d8800315 	stw	r2,12(sp)
10105954:	d8802504 	addi	r2,sp,148
10105958:	d8800215 	stw	r2,8(sp)
1010595c:	d8802604 	addi	r2,sp,152
10105960:	d8800115 	stw	r2,4(sp)
10105964:	d8802917 	ldw	r2,164(sp)
10105968:	d9403617 	ldw	r5,216(sp)
1010596c:	d9002c17 	ldw	r4,176(sp)
10105970:	d8800015 	stw	r2,0(sp)
10105974:	01c000c4 	movi	r7,3
10105978:	980d883a 	mov	r6,r19
1010597c:	da003d15 	stw	r8,244(sp)
10105980:	01061680 	call	10106168 <_dtoa_r>
10105984:	d8c02917 	ldw	r3,164(sp)
10105988:	da003d17 	ldw	r8,244(sp)
1010598c:	1021883a 	mov	r16,r2
10105990:	10f9883a 	add	fp,r2,r3
10105994:	81000007 	ldb	r4,0(r16)
10105998:	00800c04 	movi	r2,48
1010599c:	20805e26 	beq	r4,r2,10105b18 <___vfprintf_internal_r+0x2088>
101059a0:	d8c02617 	ldw	r3,152(sp)
101059a4:	e0f9883a 	add	fp,fp,r3
101059a8:	003e0a06 	br	101051d4 <__alt_data_end+0xfffe51d4>
101059ac:	00c00b44 	movi	r3,45
101059b0:	24e0003c 	xorhi	r19,r4,32768
101059b4:	d8c02a05 	stb	r3,168(sp)
101059b8:	003de906 	br	10105160 <__alt_data_end+0xfffe5160>
101059bc:	d8c03217 	ldw	r3,200(sp)
101059c0:	00c07a0e 	bge	zero,r3,10105bac <___vfprintf_internal_r+0x211c>
101059c4:	00800044 	movi	r2,1
101059c8:	d9003317 	ldw	r4,204(sp)
101059cc:	1105883a 	add	r2,r2,r4
101059d0:	d8802e15 	stw	r2,184(sp)
101059d4:	10004e16 	blt	r2,zero,10105b10 <___vfprintf_internal_r+0x2080>
101059d8:	044019c4 	movi	r17,103
101059dc:	003e2106 	br	10105264 <__alt_data_end+0xfffe5264>
101059e0:	d9002917 	ldw	r4,164(sp)
101059e4:	d8802104 	addi	r2,sp,132
101059e8:	d8800315 	stw	r2,12(sp)
101059ec:	d9000015 	stw	r4,0(sp)
101059f0:	d8802504 	addi	r2,sp,148
101059f4:	d9403617 	ldw	r5,216(sp)
101059f8:	d9002c17 	ldw	r4,176(sp)
101059fc:	d8800215 	stw	r2,8(sp)
10105a00:	d8802604 	addi	r2,sp,152
10105a04:	d8800115 	stw	r2,4(sp)
10105a08:	01c000c4 	movi	r7,3
10105a0c:	980d883a 	mov	r6,r19
10105a10:	da003d15 	stw	r8,244(sp)
10105a14:	01061680 	call	10106168 <_dtoa_r>
10105a18:	d8c02917 	ldw	r3,164(sp)
10105a1c:	da003d17 	ldw	r8,244(sp)
10105a20:	1021883a 	mov	r16,r2
10105a24:	00801184 	movi	r2,70
10105a28:	80f9883a 	add	fp,r16,r3
10105a2c:	88bfd926 	beq	r17,r2,10105994 <__alt_data_end+0xfffe5994>
10105a30:	003de806 	br	101051d4 <__alt_data_end+0xfffe51d4>
10105a34:	d9002917 	ldw	r4,164(sp)
10105a38:	00c04d0e 	bge	zero,r3,10105b70 <___vfprintf_internal_r+0x20e0>
10105a3c:	2000441e 	bne	r4,zero,10105b50 <___vfprintf_internal_r+0x20c0>
10105a40:	9480004c 	andi	r18,r18,1
10105a44:	9000421e 	bne	r18,zero,10105b50 <___vfprintf_internal_r+0x20c0>
10105a48:	1805883a 	mov	r2,r3
10105a4c:	18007016 	blt	r3,zero,10105c10 <___vfprintf_internal_r+0x2180>
10105a50:	d8c03217 	ldw	r3,200(sp)
10105a54:	d8c02e15 	stw	r3,184(sp)
10105a58:	003e0206 	br	10105264 <__alt_data_end+0xfffe5264>
10105a5c:	df0022c4 	addi	fp,sp,139
10105a60:	dc002915 	stw	r16,164(sp)
10105a64:	4027883a 	mov	r19,r8
10105a68:	e021883a 	mov	r16,fp
10105a6c:	b009883a 	mov	r4,r22
10105a70:	01400284 	movi	r5,10
10105a74:	01016e80 	call	101016e8 <__modsi3>
10105a78:	10800c04 	addi	r2,r2,48
10105a7c:	843fffc4 	addi	r16,r16,-1
10105a80:	b009883a 	mov	r4,r22
10105a84:	01400284 	movi	r5,10
10105a88:	80800005 	stb	r2,0(r16)
10105a8c:	01016640 	call	10101664 <__divsi3>
10105a90:	102d883a 	mov	r22,r2
10105a94:	00800244 	movi	r2,9
10105a98:	15bff416 	blt	r2,r22,10105a6c <__alt_data_end+0xfffe5a6c>
10105a9c:	9811883a 	mov	r8,r19
10105aa0:	b0800c04 	addi	r2,r22,48
10105aa4:	8027883a 	mov	r19,r16
10105aa8:	997fffc4 	addi	r5,r19,-1
10105aac:	98bfffc5 	stb	r2,-1(r19)
10105ab0:	dc002917 	ldw	r16,164(sp)
10105ab4:	2f006a2e 	bgeu	r5,fp,10105c60 <___vfprintf_internal_r+0x21d0>
10105ab8:	d9c02384 	addi	r7,sp,142
10105abc:	3ccfc83a 	sub	r7,r7,r19
10105ac0:	d9002344 	addi	r4,sp,141
10105ac4:	e1cf883a 	add	r7,fp,r7
10105ac8:	00000106 	br	10105ad0 <___vfprintf_internal_r+0x2040>
10105acc:	28800003 	ldbu	r2,0(r5)
10105ad0:	20800005 	stb	r2,0(r4)
10105ad4:	21000044 	addi	r4,r4,1
10105ad8:	29400044 	addi	r5,r5,1
10105adc:	393ffb1e 	bne	r7,r4,10105acc <__alt_data_end+0xfffe5acc>
10105ae0:	d8802304 	addi	r2,sp,140
10105ae4:	14c5c83a 	sub	r2,r2,r19
10105ae8:	d8c02344 	addi	r3,sp,141
10105aec:	1885883a 	add	r2,r3,r2
10105af0:	003f7006 	br	101058b4 <__alt_data_end+0xfffe58b4>
10105af4:	0005883a 	mov	r2,zero
10105af8:	003f0f06 	br	10105738 <__alt_data_end+0xfffe5738>
10105afc:	d8c03217 	ldw	r3,200(sp)
10105b00:	18c00044 	addi	r3,r3,1
10105b04:	d8c02e15 	stw	r3,184(sp)
10105b08:	1805883a 	mov	r2,r3
10105b0c:	183fb20e 	bge	r3,zero,101059d8 <__alt_data_end+0xfffe59d8>
10105b10:	0005883a 	mov	r2,zero
10105b14:	003fb006 	br	101059d8 <__alt_data_end+0xfffe59d8>
10105b18:	d9003617 	ldw	r4,216(sp)
10105b1c:	000d883a 	mov	r6,zero
10105b20:	000f883a 	mov	r7,zero
10105b24:	980b883a 	mov	r5,r19
10105b28:	d8c03c15 	stw	r3,240(sp)
10105b2c:	da003d15 	stw	r8,244(sp)
10105b30:	010d2b00 	call	1010d2b0 <__eqdf2>
10105b34:	d8c03c17 	ldw	r3,240(sp)
10105b38:	da003d17 	ldw	r8,244(sp)
10105b3c:	103f9826 	beq	r2,zero,101059a0 <__alt_data_end+0xfffe59a0>
10105b40:	00800044 	movi	r2,1
10105b44:	10c7c83a 	sub	r3,r2,r3
10105b48:	d8c02615 	stw	r3,152(sp)
10105b4c:	003f9506 	br	101059a4 <__alt_data_end+0xfffe59a4>
10105b50:	d9002917 	ldw	r4,164(sp)
10105b54:	d8c03217 	ldw	r3,200(sp)
10105b58:	20800044 	addi	r2,r4,1
10105b5c:	1885883a 	add	r2,r3,r2
10105b60:	d8802e15 	stw	r2,184(sp)
10105b64:	103dbf0e 	bge	r2,zero,10105264 <__alt_data_end+0xfffe5264>
10105b68:	0005883a 	mov	r2,zero
10105b6c:	003dbd06 	br	10105264 <__alt_data_end+0xfffe5264>
10105b70:	2000211e 	bne	r4,zero,10105bf8 <___vfprintf_internal_r+0x2168>
10105b74:	9480004c 	andi	r18,r18,1
10105b78:	90001f1e 	bne	r18,zero,10105bf8 <___vfprintf_internal_r+0x2168>
10105b7c:	00800044 	movi	r2,1
10105b80:	d8802e15 	stw	r2,184(sp)
10105b84:	003db706 	br	10105264 <__alt_data_end+0xfffe5264>
10105b88:	00800b44 	movi	r2,45
10105b8c:	05adc83a 	sub	r22,zero,r22
10105b90:	d8802305 	stb	r2,140(sp)
10105b94:	003f3f06 	br	10105894 <__alt_data_end+0xfffe5894>
10105b98:	0005883a 	mov	r2,zero
10105b9c:	003f5206 	br	101058e8 <__alt_data_end+0xfffe58e8>
10105ba0:	90a4703a 	and	r18,r18,r2
10105ba4:	903f4e26 	beq	r18,zero,101058e0 <__alt_data_end+0xfffe58e0>
10105ba8:	003f4a06 	br	101058d4 <__alt_data_end+0xfffe58d4>
10105bac:	00800084 	movi	r2,2
10105bb0:	10c5c83a 	sub	r2,r2,r3
10105bb4:	003f8406 	br	101059c8 <__alt_data_end+0xfffe59c8>
10105bb8:	d8802d17 	ldw	r2,180(sp)
10105bbc:	d9002d17 	ldw	r4,180(sp)
10105bc0:	ac400043 	ldbu	r17,1(r21)
10105bc4:	10800017 	ldw	r2,0(r2)
10105bc8:	582b883a 	mov	r21,r11
10105bcc:	d8802915 	stw	r2,164(sp)
10105bd0:	20800104 	addi	r2,r4,4
10105bd4:	d9002917 	ldw	r4,164(sp)
10105bd8:	d8802d15 	stw	r2,180(sp)
10105bdc:	203e7a0e 	bge	r4,zero,101055c8 <__alt_data_end+0xfffe55c8>
10105be0:	8c403fcc 	andi	r17,r17,255
10105be4:	00bfffc4 	movi	r2,-1
10105be8:	8c40201c 	xori	r17,r17,128
10105bec:	d8802915 	stw	r2,164(sp)
10105bf0:	8c7fe004 	addi	r17,r17,-128
10105bf4:	00380706 	br	10103c14 <__alt_data_end+0xfffe3c14>
10105bf8:	d8c02917 	ldw	r3,164(sp)
10105bfc:	18c00084 	addi	r3,r3,2
10105c00:	d8c02e15 	stw	r3,184(sp)
10105c04:	1805883a 	mov	r2,r3
10105c08:	183d960e 	bge	r3,zero,10105264 <__alt_data_end+0xfffe5264>
10105c0c:	003fd606 	br	10105b68 <__alt_data_end+0xfffe5b68>
10105c10:	0005883a 	mov	r2,zero
10105c14:	003f8e06 	br	10105a50 <__alt_data_end+0xfffe5a50>
10105c18:	9080004c 	andi	r2,r18,1
10105c1c:	103f811e 	bne	r2,zero,10105a24 <__alt_data_end+0xfffe5a24>
10105c20:	d8802117 	ldw	r2,132(sp)
10105c24:	1405c83a 	sub	r2,r2,r16
10105c28:	d8803315 	stw	r2,204(sp)
10105c2c:	b47ef326 	beq	r22,r17,101057fc <__alt_data_end+0xfffe57fc>
10105c30:	dd802617 	ldw	r22,152(sp)
10105c34:	003f1106 	br	1010587c <__alt_data_end+0xfffe587c>
10105c38:	d9c02785 	stb	r7,158(sp)
10105c3c:	00390406 	br	10104050 <__alt_data_end+0xfffe4050>
10105c40:	d9c02785 	stb	r7,158(sp)
10105c44:	0038d306 	br	10103f94 <__alt_data_end+0xfffe3f94>
10105c48:	d9c02785 	stb	r7,158(sp)
10105c4c:	003a6106 	br	101045d4 <__alt_data_end+0xfffe45d4>
10105c50:	d9c02785 	stb	r7,158(sp)
10105c54:	003af806 	br	10104838 <__alt_data_end+0xfffe4838>
10105c58:	0005883a 	mov	r2,zero
10105c5c:	003d7e06 	br	10105258 <__alt_data_end+0xfffe5258>
10105c60:	d8802344 	addi	r2,sp,141
10105c64:	003f1306 	br	101058b4 <__alt_data_end+0xfffe58b4>
10105c68:	d9c02785 	stb	r7,158(sp)
10105c6c:	00392306 	br	101040fc <__alt_data_end+0xfffe40fc>
10105c70:	d9c02785 	stb	r7,158(sp)
10105c74:	003aa906 	br	1010471c <__alt_data_end+0xfffe471c>
10105c78:	d9c02785 	stb	r7,158(sp)
10105c7c:	003a3d06 	br	10104574 <__alt_data_end+0xfffe4574>
10105c80:	d9c02785 	stb	r7,158(sp)
10105c84:	003aca06 	br	101047b0 <__alt_data_end+0xfffe47b0>

10105c88 <__vfprintf_internal>:
10105c88:	00840474 	movhi	r2,4113
10105c8c:	108d1004 	addi	r2,r2,13376
10105c90:	300f883a 	mov	r7,r6
10105c94:	280d883a 	mov	r6,r5
10105c98:	200b883a 	mov	r5,r4
10105c9c:	11000017 	ldw	r4,0(r2)
10105ca0:	0103a901 	jmpi	10103a90 <___vfprintf_internal_r>

10105ca4 <__sbprintf>:
10105ca4:	2880030b 	ldhu	r2,12(r5)
10105ca8:	2ac01917 	ldw	r11,100(r5)
10105cac:	2a80038b 	ldhu	r10,14(r5)
10105cb0:	2a400717 	ldw	r9,28(r5)
10105cb4:	2a000917 	ldw	r8,36(r5)
10105cb8:	defee204 	addi	sp,sp,-1144
10105cbc:	00c10004 	movi	r3,1024
10105cc0:	dc011a15 	stw	r16,1128(sp)
10105cc4:	10bfff4c 	andi	r2,r2,65533
10105cc8:	2821883a 	mov	r16,r5
10105ccc:	d8cb883a 	add	r5,sp,r3
10105cd0:	dc811c15 	stw	r18,1136(sp)
10105cd4:	dc411b15 	stw	r17,1132(sp)
10105cd8:	dfc11d15 	stw	ra,1140(sp)
10105cdc:	2025883a 	mov	r18,r4
10105ce0:	d881030d 	sth	r2,1036(sp)
10105ce4:	dac11915 	stw	r11,1124(sp)
10105ce8:	da81038d 	sth	r10,1038(sp)
10105cec:	da410715 	stw	r9,1052(sp)
10105cf0:	da010915 	stw	r8,1060(sp)
10105cf4:	dec10015 	stw	sp,1024(sp)
10105cf8:	dec10415 	stw	sp,1040(sp)
10105cfc:	d8c10215 	stw	r3,1032(sp)
10105d00:	d8c10515 	stw	r3,1044(sp)
10105d04:	d8010615 	stw	zero,1048(sp)
10105d08:	0103a900 	call	10103a90 <___vfprintf_internal_r>
10105d0c:	1023883a 	mov	r17,r2
10105d10:	10000416 	blt	r2,zero,10105d24 <__sbprintf+0x80>
10105d14:	d9410004 	addi	r5,sp,1024
10105d18:	9009883a 	mov	r4,r18
10105d1c:	0101b380 	call	10101b38 <_fflush_r>
10105d20:	10000d1e 	bne	r2,zero,10105d58 <__sbprintf+0xb4>
10105d24:	d881030b 	ldhu	r2,1036(sp)
10105d28:	1080100c 	andi	r2,r2,64
10105d2c:	10000326 	beq	r2,zero,10105d3c <__sbprintf+0x98>
10105d30:	8080030b 	ldhu	r2,12(r16)
10105d34:	10801014 	ori	r2,r2,64
10105d38:	8080030d 	sth	r2,12(r16)
10105d3c:	8805883a 	mov	r2,r17
10105d40:	dfc11d17 	ldw	ra,1140(sp)
10105d44:	dc811c17 	ldw	r18,1136(sp)
10105d48:	dc411b17 	ldw	r17,1132(sp)
10105d4c:	dc011a17 	ldw	r16,1128(sp)
10105d50:	dec11e04 	addi	sp,sp,1144
10105d54:	f800283a 	ret
10105d58:	047fffc4 	movi	r17,-1
10105d5c:	003ff106 	br	10105d24 <__alt_data_end+0xfffe5d24>

10105d60 <_write_r>:
10105d60:	defffd04 	addi	sp,sp,-12
10105d64:	2805883a 	mov	r2,r5
10105d68:	dc000015 	stw	r16,0(sp)
10105d6c:	04040474 	movhi	r16,4113
10105d70:	dc400115 	stw	r17,4(sp)
10105d74:	300b883a 	mov	r5,r6
10105d78:	84140804 	addi	r16,r16,20512
10105d7c:	2023883a 	mov	r17,r4
10105d80:	380d883a 	mov	r6,r7
10105d84:	1009883a 	mov	r4,r2
10105d88:	dfc00215 	stw	ra,8(sp)
10105d8c:	80000015 	stw	zero,0(r16)
10105d90:	010f2ec0 	call	1010f2ec <write>
10105d94:	00ffffc4 	movi	r3,-1
10105d98:	10c00526 	beq	r2,r3,10105db0 <_write_r+0x50>
10105d9c:	dfc00217 	ldw	ra,8(sp)
10105da0:	dc400117 	ldw	r17,4(sp)
10105da4:	dc000017 	ldw	r16,0(sp)
10105da8:	dec00304 	addi	sp,sp,12
10105dac:	f800283a 	ret
10105db0:	80c00017 	ldw	r3,0(r16)
10105db4:	183ff926 	beq	r3,zero,10105d9c <__alt_data_end+0xfffe5d9c>
10105db8:	88c00015 	stw	r3,0(r17)
10105dbc:	003ff706 	br	10105d9c <__alt_data_end+0xfffe5d9c>

10105dc0 <__swsetup_r>:
10105dc0:	00840474 	movhi	r2,4113
10105dc4:	defffd04 	addi	sp,sp,-12
10105dc8:	108d1004 	addi	r2,r2,13376
10105dcc:	dc400115 	stw	r17,4(sp)
10105dd0:	2023883a 	mov	r17,r4
10105dd4:	11000017 	ldw	r4,0(r2)
10105dd8:	dc000015 	stw	r16,0(sp)
10105ddc:	dfc00215 	stw	ra,8(sp)
10105de0:	2821883a 	mov	r16,r5
10105de4:	20000226 	beq	r4,zero,10105df0 <__swsetup_r+0x30>
10105de8:	20800e17 	ldw	r2,56(r4)
10105dec:	10003126 	beq	r2,zero,10105eb4 <__swsetup_r+0xf4>
10105df0:	8080030b 	ldhu	r2,12(r16)
10105df4:	10c0020c 	andi	r3,r2,8
10105df8:	1009883a 	mov	r4,r2
10105dfc:	18000f26 	beq	r3,zero,10105e3c <__swsetup_r+0x7c>
10105e00:	80c00417 	ldw	r3,16(r16)
10105e04:	18001526 	beq	r3,zero,10105e5c <__swsetup_r+0x9c>
10105e08:	1100004c 	andi	r4,r2,1
10105e0c:	20001c1e 	bne	r4,zero,10105e80 <__swsetup_r+0xc0>
10105e10:	1080008c 	andi	r2,r2,2
10105e14:	1000291e 	bne	r2,zero,10105ebc <__swsetup_r+0xfc>
10105e18:	80800517 	ldw	r2,20(r16)
10105e1c:	80800215 	stw	r2,8(r16)
10105e20:	18001c26 	beq	r3,zero,10105e94 <__swsetup_r+0xd4>
10105e24:	0005883a 	mov	r2,zero
10105e28:	dfc00217 	ldw	ra,8(sp)
10105e2c:	dc400117 	ldw	r17,4(sp)
10105e30:	dc000017 	ldw	r16,0(sp)
10105e34:	dec00304 	addi	sp,sp,12
10105e38:	f800283a 	ret
10105e3c:	2080040c 	andi	r2,r4,16
10105e40:	10002e26 	beq	r2,zero,10105efc <__swsetup_r+0x13c>
10105e44:	2080010c 	andi	r2,r4,4
10105e48:	10001e1e 	bne	r2,zero,10105ec4 <__swsetup_r+0x104>
10105e4c:	80c00417 	ldw	r3,16(r16)
10105e50:	20800214 	ori	r2,r4,8
10105e54:	8080030d 	sth	r2,12(r16)
10105e58:	183feb1e 	bne	r3,zero,10105e08 <__alt_data_end+0xfffe5e08>
10105e5c:	1100a00c 	andi	r4,r2,640
10105e60:	01408004 	movi	r5,512
10105e64:	217fe826 	beq	r4,r5,10105e08 <__alt_data_end+0xfffe5e08>
10105e68:	800b883a 	mov	r5,r16
10105e6c:	8809883a 	mov	r4,r17
10105e70:	0102b540 	call	10102b54 <__smakebuf_r>
10105e74:	8080030b 	ldhu	r2,12(r16)
10105e78:	80c00417 	ldw	r3,16(r16)
10105e7c:	003fe206 	br	10105e08 <__alt_data_end+0xfffe5e08>
10105e80:	80800517 	ldw	r2,20(r16)
10105e84:	80000215 	stw	zero,8(r16)
10105e88:	0085c83a 	sub	r2,zero,r2
10105e8c:	80800615 	stw	r2,24(r16)
10105e90:	183fe41e 	bne	r3,zero,10105e24 <__alt_data_end+0xfffe5e24>
10105e94:	80c0030b 	ldhu	r3,12(r16)
10105e98:	0005883a 	mov	r2,zero
10105e9c:	1900200c 	andi	r4,r3,128
10105ea0:	203fe126 	beq	r4,zero,10105e28 <__alt_data_end+0xfffe5e28>
10105ea4:	18c01014 	ori	r3,r3,64
10105ea8:	80c0030d 	sth	r3,12(r16)
10105eac:	00bfffc4 	movi	r2,-1
10105eb0:	003fdd06 	br	10105e28 <__alt_data_end+0xfffe5e28>
10105eb4:	0101f140 	call	10101f14 <__sinit>
10105eb8:	003fcd06 	br	10105df0 <__alt_data_end+0xfffe5df0>
10105ebc:	0005883a 	mov	r2,zero
10105ec0:	003fd606 	br	10105e1c <__alt_data_end+0xfffe5e1c>
10105ec4:	81400c17 	ldw	r5,48(r16)
10105ec8:	28000626 	beq	r5,zero,10105ee4 <__swsetup_r+0x124>
10105ecc:	80801004 	addi	r2,r16,64
10105ed0:	28800326 	beq	r5,r2,10105ee0 <__swsetup_r+0x120>
10105ed4:	8809883a 	mov	r4,r17
10105ed8:	01021e00 	call	101021e0 <_free_r>
10105edc:	8100030b 	ldhu	r4,12(r16)
10105ee0:	80000c15 	stw	zero,48(r16)
10105ee4:	80c00417 	ldw	r3,16(r16)
10105ee8:	00bff6c4 	movi	r2,-37
10105eec:	1108703a 	and	r4,r2,r4
10105ef0:	80000115 	stw	zero,4(r16)
10105ef4:	80c00015 	stw	r3,0(r16)
10105ef8:	003fd506 	br	10105e50 <__alt_data_end+0xfffe5e50>
10105efc:	00800244 	movi	r2,9
10105f00:	88800015 	stw	r2,0(r17)
10105f04:	20801014 	ori	r2,r4,64
10105f08:	8080030d 	sth	r2,12(r16)
10105f0c:	00bfffc4 	movi	r2,-1
10105f10:	003fc506 	br	10105e28 <__alt_data_end+0xfffe5e28>

10105f14 <_close_r>:
10105f14:	defffd04 	addi	sp,sp,-12
10105f18:	dc000015 	stw	r16,0(sp)
10105f1c:	04040474 	movhi	r16,4113
10105f20:	dc400115 	stw	r17,4(sp)
10105f24:	84140804 	addi	r16,r16,20512
10105f28:	2023883a 	mov	r17,r4
10105f2c:	2809883a 	mov	r4,r5
10105f30:	dfc00215 	stw	ra,8(sp)
10105f34:	80000015 	stw	zero,0(r16)
10105f38:	010e7d40 	call	1010e7d4 <close>
10105f3c:	00ffffc4 	movi	r3,-1
10105f40:	10c00526 	beq	r2,r3,10105f58 <_close_r+0x44>
10105f44:	dfc00217 	ldw	ra,8(sp)
10105f48:	dc400117 	ldw	r17,4(sp)
10105f4c:	dc000017 	ldw	r16,0(sp)
10105f50:	dec00304 	addi	sp,sp,12
10105f54:	f800283a 	ret
10105f58:	80c00017 	ldw	r3,0(r16)
10105f5c:	183ff926 	beq	r3,zero,10105f44 <__alt_data_end+0xfffe5f44>
10105f60:	88c00015 	stw	r3,0(r17)
10105f64:	003ff706 	br	10105f44 <__alt_data_end+0xfffe5f44>

10105f68 <quorem>:
10105f68:	defff704 	addi	sp,sp,-36
10105f6c:	dc800215 	stw	r18,8(sp)
10105f70:	20800417 	ldw	r2,16(r4)
10105f74:	2c800417 	ldw	r18,16(r5)
10105f78:	dfc00815 	stw	ra,32(sp)
10105f7c:	ddc00715 	stw	r23,28(sp)
10105f80:	dd800615 	stw	r22,24(sp)
10105f84:	dd400515 	stw	r21,20(sp)
10105f88:	dd000415 	stw	r20,16(sp)
10105f8c:	dcc00315 	stw	r19,12(sp)
10105f90:	dc400115 	stw	r17,4(sp)
10105f94:	dc000015 	stw	r16,0(sp)
10105f98:	14807116 	blt	r2,r18,10106160 <quorem+0x1f8>
10105f9c:	94bfffc4 	addi	r18,r18,-1
10105fa0:	94ad883a 	add	r22,r18,r18
10105fa4:	b5ad883a 	add	r22,r22,r22
10105fa8:	2c400504 	addi	r17,r5,20
10105fac:	8da9883a 	add	r20,r17,r22
10105fb0:	25400504 	addi	r21,r4,20
10105fb4:	282f883a 	mov	r23,r5
10105fb8:	adad883a 	add	r22,r21,r22
10105fbc:	a1400017 	ldw	r5,0(r20)
10105fc0:	2021883a 	mov	r16,r4
10105fc4:	b1000017 	ldw	r4,0(r22)
10105fc8:	29400044 	addi	r5,r5,1
10105fcc:	010175c0 	call	1010175c <__udivsi3>
10105fd0:	1027883a 	mov	r19,r2
10105fd4:	10002c26 	beq	r2,zero,10106088 <quorem+0x120>
10105fd8:	a813883a 	mov	r9,r21
10105fdc:	880b883a 	mov	r5,r17
10105fe0:	0009883a 	mov	r4,zero
10105fe4:	000d883a 	mov	r6,zero
10105fe8:	2a000017 	ldw	r8,0(r5)
10105fec:	49c00017 	ldw	r7,0(r9)
10105ff0:	29400104 	addi	r5,r5,4
10105ff4:	40bfffcc 	andi	r2,r8,65535
10105ff8:	14c5383a 	mul	r2,r2,r19
10105ffc:	4010d43a 	srli	r8,r8,16
10106000:	38ffffcc 	andi	r3,r7,65535
10106004:	1105883a 	add	r2,r2,r4
10106008:	1008d43a 	srli	r4,r2,16
1010600c:	44d1383a 	mul	r8,r8,r19
10106010:	198d883a 	add	r6,r3,r6
10106014:	10ffffcc 	andi	r3,r2,65535
10106018:	30c7c83a 	sub	r3,r6,r3
1010601c:	380ed43a 	srli	r7,r7,16
10106020:	4105883a 	add	r2,r8,r4
10106024:	180dd43a 	srai	r6,r3,16
10106028:	113fffcc 	andi	r4,r2,65535
1010602c:	390fc83a 	sub	r7,r7,r4
10106030:	398d883a 	add	r6,r7,r6
10106034:	300e943a 	slli	r7,r6,16
10106038:	18ffffcc 	andi	r3,r3,65535
1010603c:	1008d43a 	srli	r4,r2,16
10106040:	38ceb03a 	or	r7,r7,r3
10106044:	49c00015 	stw	r7,0(r9)
10106048:	300dd43a 	srai	r6,r6,16
1010604c:	4a400104 	addi	r9,r9,4
10106050:	a17fe52e 	bgeu	r20,r5,10105fe8 <__alt_data_end+0xfffe5fe8>
10106054:	b0800017 	ldw	r2,0(r22)
10106058:	10000b1e 	bne	r2,zero,10106088 <quorem+0x120>
1010605c:	b0bfff04 	addi	r2,r22,-4
10106060:	a880082e 	bgeu	r21,r2,10106084 <quorem+0x11c>
10106064:	b0ffff17 	ldw	r3,-4(r22)
10106068:	18000326 	beq	r3,zero,10106078 <quorem+0x110>
1010606c:	00000506 	br	10106084 <quorem+0x11c>
10106070:	10c00017 	ldw	r3,0(r2)
10106074:	1800031e 	bne	r3,zero,10106084 <quorem+0x11c>
10106078:	10bfff04 	addi	r2,r2,-4
1010607c:	94bfffc4 	addi	r18,r18,-1
10106080:	a8bffb36 	bltu	r21,r2,10106070 <__alt_data_end+0xfffe6070>
10106084:	84800415 	stw	r18,16(r16)
10106088:	b80b883a 	mov	r5,r23
1010608c:	8009883a 	mov	r4,r16
10106090:	01085200 	call	10108520 <__mcmp>
10106094:	10002616 	blt	r2,zero,10106130 <quorem+0x1c8>
10106098:	9cc00044 	addi	r19,r19,1
1010609c:	a805883a 	mov	r2,r21
101060a0:	000b883a 	mov	r5,zero
101060a4:	11000017 	ldw	r4,0(r2)
101060a8:	89800017 	ldw	r6,0(r17)
101060ac:	10800104 	addi	r2,r2,4
101060b0:	20ffffcc 	andi	r3,r4,65535
101060b4:	194b883a 	add	r5,r3,r5
101060b8:	30ffffcc 	andi	r3,r6,65535
101060bc:	28c7c83a 	sub	r3,r5,r3
101060c0:	300cd43a 	srli	r6,r6,16
101060c4:	2008d43a 	srli	r4,r4,16
101060c8:	180bd43a 	srai	r5,r3,16
101060cc:	18ffffcc 	andi	r3,r3,65535
101060d0:	2189c83a 	sub	r4,r4,r6
101060d4:	2149883a 	add	r4,r4,r5
101060d8:	200c943a 	slli	r6,r4,16
101060dc:	8c400104 	addi	r17,r17,4
101060e0:	200bd43a 	srai	r5,r4,16
101060e4:	30c6b03a 	or	r3,r6,r3
101060e8:	10ffff15 	stw	r3,-4(r2)
101060ec:	a47fed2e 	bgeu	r20,r17,101060a4 <__alt_data_end+0xfffe60a4>
101060f0:	9485883a 	add	r2,r18,r18
101060f4:	1085883a 	add	r2,r2,r2
101060f8:	a887883a 	add	r3,r21,r2
101060fc:	18800017 	ldw	r2,0(r3)
10106100:	10000b1e 	bne	r2,zero,10106130 <quorem+0x1c8>
10106104:	18bfff04 	addi	r2,r3,-4
10106108:	a880082e 	bgeu	r21,r2,1010612c <quorem+0x1c4>
1010610c:	18ffff17 	ldw	r3,-4(r3)
10106110:	18000326 	beq	r3,zero,10106120 <quorem+0x1b8>
10106114:	00000506 	br	1010612c <quorem+0x1c4>
10106118:	10c00017 	ldw	r3,0(r2)
1010611c:	1800031e 	bne	r3,zero,1010612c <quorem+0x1c4>
10106120:	10bfff04 	addi	r2,r2,-4
10106124:	94bfffc4 	addi	r18,r18,-1
10106128:	a8bffb36 	bltu	r21,r2,10106118 <__alt_data_end+0xfffe6118>
1010612c:	84800415 	stw	r18,16(r16)
10106130:	9805883a 	mov	r2,r19
10106134:	dfc00817 	ldw	ra,32(sp)
10106138:	ddc00717 	ldw	r23,28(sp)
1010613c:	dd800617 	ldw	r22,24(sp)
10106140:	dd400517 	ldw	r21,20(sp)
10106144:	dd000417 	ldw	r20,16(sp)
10106148:	dcc00317 	ldw	r19,12(sp)
1010614c:	dc800217 	ldw	r18,8(sp)
10106150:	dc400117 	ldw	r17,4(sp)
10106154:	dc000017 	ldw	r16,0(sp)
10106158:	dec00904 	addi	sp,sp,36
1010615c:	f800283a 	ret
10106160:	0005883a 	mov	r2,zero
10106164:	003ff306 	br	10106134 <__alt_data_end+0xfffe6134>

10106168 <_dtoa_r>:
10106168:	20801017 	ldw	r2,64(r4)
1010616c:	deffde04 	addi	sp,sp,-136
10106170:	df002015 	stw	fp,128(sp)
10106174:	dcc01b15 	stw	r19,108(sp)
10106178:	dc801a15 	stw	r18,104(sp)
1010617c:	dc401915 	stw	r17,100(sp)
10106180:	dc001815 	stw	r16,96(sp)
10106184:	dfc02115 	stw	ra,132(sp)
10106188:	ddc01f15 	stw	r23,124(sp)
1010618c:	dd801e15 	stw	r22,120(sp)
10106190:	dd401d15 	stw	r21,116(sp)
10106194:	dd001c15 	stw	r20,112(sp)
10106198:	d9c00315 	stw	r7,12(sp)
1010619c:	2039883a 	mov	fp,r4
101061a0:	3023883a 	mov	r17,r6
101061a4:	2825883a 	mov	r18,r5
101061a8:	dc002417 	ldw	r16,144(sp)
101061ac:	3027883a 	mov	r19,r6
101061b0:	10000826 	beq	r2,zero,101061d4 <_dtoa_r+0x6c>
101061b4:	21801117 	ldw	r6,68(r4)
101061b8:	00c00044 	movi	r3,1
101061bc:	100b883a 	mov	r5,r2
101061c0:	1986983a 	sll	r3,r3,r6
101061c4:	11800115 	stw	r6,4(r2)
101061c8:	10c00215 	stw	r3,8(r2)
101061cc:	0107d000 	call	10107d00 <_Bfree>
101061d0:	e0001015 	stw	zero,64(fp)
101061d4:	88002e16 	blt	r17,zero,10106290 <_dtoa_r+0x128>
101061d8:	80000015 	stw	zero,0(r16)
101061dc:	889ffc2c 	andhi	r2,r17,32752
101061e0:	00dffc34 	movhi	r3,32752
101061e4:	10c01c26 	beq	r2,r3,10106258 <_dtoa_r+0xf0>
101061e8:	000d883a 	mov	r6,zero
101061ec:	000f883a 	mov	r7,zero
101061f0:	9009883a 	mov	r4,r18
101061f4:	980b883a 	mov	r5,r19
101061f8:	010d2b00 	call	1010d2b0 <__eqdf2>
101061fc:	10002b1e 	bne	r2,zero,101062ac <_dtoa_r+0x144>
10106200:	d9c02317 	ldw	r7,140(sp)
10106204:	00800044 	movi	r2,1
10106208:	38800015 	stw	r2,0(r7)
1010620c:	d8802517 	ldw	r2,148(sp)
10106210:	10019e26 	beq	r2,zero,1010688c <_dtoa_r+0x724>
10106214:	d8c02517 	ldw	r3,148(sp)
10106218:	00840474 	movhi	r2,4113
1010621c:	1085a944 	addi	r2,r2,5797
10106220:	18800015 	stw	r2,0(r3)
10106224:	10bfffc4 	addi	r2,r2,-1
10106228:	dfc02117 	ldw	ra,132(sp)
1010622c:	df002017 	ldw	fp,128(sp)
10106230:	ddc01f17 	ldw	r23,124(sp)
10106234:	dd801e17 	ldw	r22,120(sp)
10106238:	dd401d17 	ldw	r21,116(sp)
1010623c:	dd001c17 	ldw	r20,112(sp)
10106240:	dcc01b17 	ldw	r19,108(sp)
10106244:	dc801a17 	ldw	r18,104(sp)
10106248:	dc401917 	ldw	r17,100(sp)
1010624c:	dc001817 	ldw	r16,96(sp)
10106250:	dec02204 	addi	sp,sp,136
10106254:	f800283a 	ret
10106258:	d8c02317 	ldw	r3,140(sp)
1010625c:	0089c3c4 	movi	r2,9999
10106260:	18800015 	stw	r2,0(r3)
10106264:	90017726 	beq	r18,zero,10106844 <_dtoa_r+0x6dc>
10106268:	00840474 	movhi	r2,4113
1010626c:	1085b504 	addi	r2,r2,5844
10106270:	d9002517 	ldw	r4,148(sp)
10106274:	203fec26 	beq	r4,zero,10106228 <__alt_data_end+0xfffe6228>
10106278:	10c000c7 	ldb	r3,3(r2)
1010627c:	1801781e 	bne	r3,zero,10106860 <_dtoa_r+0x6f8>
10106280:	10c000c4 	addi	r3,r2,3
10106284:	d9802517 	ldw	r6,148(sp)
10106288:	30c00015 	stw	r3,0(r6)
1010628c:	003fe606 	br	10106228 <__alt_data_end+0xfffe6228>
10106290:	04e00034 	movhi	r19,32768
10106294:	9cffffc4 	addi	r19,r19,-1
10106298:	00800044 	movi	r2,1
1010629c:	8ce6703a 	and	r19,r17,r19
101062a0:	80800015 	stw	r2,0(r16)
101062a4:	9823883a 	mov	r17,r19
101062a8:	003fcc06 	br	101061dc <__alt_data_end+0xfffe61dc>
101062ac:	d8800204 	addi	r2,sp,8
101062b0:	d8800015 	stw	r2,0(sp)
101062b4:	d9c00104 	addi	r7,sp,4
101062b8:	900b883a 	mov	r5,r18
101062bc:	980d883a 	mov	r6,r19
101062c0:	e009883a 	mov	r4,fp
101062c4:	8820d53a 	srli	r16,r17,20
101062c8:	01088ec0 	call	101088ec <__d2b>
101062cc:	d8800915 	stw	r2,36(sp)
101062d0:	8001651e 	bne	r16,zero,10106868 <_dtoa_r+0x700>
101062d4:	dd800217 	ldw	r22,8(sp)
101062d8:	dc000117 	ldw	r16,4(sp)
101062dc:	00800804 	movi	r2,32
101062e0:	b421883a 	add	r16,r22,r16
101062e4:	80c10c84 	addi	r3,r16,1074
101062e8:	10c2d10e 	bge	r2,r3,10106e30 <_dtoa_r+0xcc8>
101062ec:	00801004 	movi	r2,64
101062f0:	81010484 	addi	r4,r16,1042
101062f4:	10c7c83a 	sub	r3,r2,r3
101062f8:	9108d83a 	srl	r4,r18,r4
101062fc:	88e2983a 	sll	r17,r17,r3
10106300:	2448b03a 	or	r4,r4,r17
10106304:	010e6780 	call	1010e678 <__floatunsidf>
10106308:	017f8434 	movhi	r5,65040
1010630c:	01800044 	movi	r6,1
10106310:	1009883a 	mov	r4,r2
10106314:	194b883a 	add	r5,r3,r5
10106318:	843fffc4 	addi	r16,r16,-1
1010631c:	d9801115 	stw	r6,68(sp)
10106320:	000d883a 	mov	r6,zero
10106324:	01cffe34 	movhi	r7,16376
10106328:	010dc200 	call	1010dc20 <__subdf3>
1010632c:	0198dbf4 	movhi	r6,25455
10106330:	01cff4f4 	movhi	r7,16339
10106334:	3190d844 	addi	r6,r6,17249
10106338:	39e1e9c4 	addi	r7,r7,-30809
1010633c:	1009883a 	mov	r4,r2
10106340:	180b883a 	mov	r5,r3
10106344:	010d5080 	call	1010d508 <__muldf3>
10106348:	01a2d874 	movhi	r6,35681
1010634c:	01cff1f4 	movhi	r7,16327
10106350:	31b22cc4 	addi	r6,r6,-14157
10106354:	39e28a04 	addi	r7,r7,-30168
10106358:	180b883a 	mov	r5,r3
1010635c:	1009883a 	mov	r4,r2
10106360:	010c11c0 	call	1010c11c <__adddf3>
10106364:	8009883a 	mov	r4,r16
10106368:	1029883a 	mov	r20,r2
1010636c:	1823883a 	mov	r17,r3
10106370:	010e59c0 	call	1010e59c <__floatsidf>
10106374:	019427f4 	movhi	r6,20639
10106378:	01cff4f4 	movhi	r7,16339
1010637c:	319e7ec4 	addi	r6,r6,31227
10106380:	39d104c4 	addi	r7,r7,17427
10106384:	1009883a 	mov	r4,r2
10106388:	180b883a 	mov	r5,r3
1010638c:	010d5080 	call	1010d508 <__muldf3>
10106390:	100d883a 	mov	r6,r2
10106394:	180f883a 	mov	r7,r3
10106398:	a009883a 	mov	r4,r20
1010639c:	880b883a 	mov	r5,r17
101063a0:	010c11c0 	call	1010c11c <__adddf3>
101063a4:	1009883a 	mov	r4,r2
101063a8:	180b883a 	mov	r5,r3
101063ac:	1029883a 	mov	r20,r2
101063b0:	1823883a 	mov	r17,r3
101063b4:	010e51c0 	call	1010e51c <__fixdfsi>
101063b8:	000d883a 	mov	r6,zero
101063bc:	000f883a 	mov	r7,zero
101063c0:	a009883a 	mov	r4,r20
101063c4:	880b883a 	mov	r5,r17
101063c8:	d8800515 	stw	r2,20(sp)
101063cc:	010d4140 	call	1010d414 <__ledf2>
101063d0:	10028716 	blt	r2,zero,10106df0 <_dtoa_r+0xc88>
101063d4:	d8c00517 	ldw	r3,20(sp)
101063d8:	00800584 	movi	r2,22
101063dc:	10c27536 	bltu	r2,r3,10106db4 <_dtoa_r+0xc4c>
101063e0:	180490fa 	slli	r2,r3,3
101063e4:	00c40474 	movhi	r3,4113
101063e8:	18c5d004 	addi	r3,r3,5952
101063ec:	1885883a 	add	r2,r3,r2
101063f0:	11000017 	ldw	r4,0(r2)
101063f4:	11400117 	ldw	r5,4(r2)
101063f8:	900d883a 	mov	r6,r18
101063fc:	980f883a 	mov	r7,r19
10106400:	010d3380 	call	1010d338 <__gedf2>
10106404:	00828d0e 	bge	zero,r2,10106e3c <_dtoa_r+0xcd4>
10106408:	d9000517 	ldw	r4,20(sp)
1010640c:	d8000e15 	stw	zero,56(sp)
10106410:	213fffc4 	addi	r4,r4,-1
10106414:	d9000515 	stw	r4,20(sp)
10106418:	b42dc83a 	sub	r22,r22,r16
1010641c:	b5bfffc4 	addi	r22,r22,-1
10106420:	b0026f16 	blt	r22,zero,10106de0 <_dtoa_r+0xc78>
10106424:	d8000815 	stw	zero,32(sp)
10106428:	d9c00517 	ldw	r7,20(sp)
1010642c:	38026416 	blt	r7,zero,10106dc0 <_dtoa_r+0xc58>
10106430:	b1ed883a 	add	r22,r22,r7
10106434:	d9c00d15 	stw	r7,52(sp)
10106438:	d8000a15 	stw	zero,40(sp)
1010643c:	d9800317 	ldw	r6,12(sp)
10106440:	00800244 	movi	r2,9
10106444:	11811436 	bltu	r2,r6,10106898 <_dtoa_r+0x730>
10106448:	00800144 	movi	r2,5
1010644c:	1184e10e 	bge	r2,r6,101077d4 <_dtoa_r+0x166c>
10106450:	31bfff04 	addi	r6,r6,-4
10106454:	d9800315 	stw	r6,12(sp)
10106458:	0023883a 	mov	r17,zero
1010645c:	d9800317 	ldw	r6,12(sp)
10106460:	008000c4 	movi	r2,3
10106464:	30836726 	beq	r6,r2,10107204 <_dtoa_r+0x109c>
10106468:	1183410e 	bge	r2,r6,10107170 <_dtoa_r+0x1008>
1010646c:	d9c00317 	ldw	r7,12(sp)
10106470:	00800104 	movi	r2,4
10106474:	38827c26 	beq	r7,r2,10106e68 <_dtoa_r+0xd00>
10106478:	00800144 	movi	r2,5
1010647c:	3884c41e 	bne	r7,r2,10107790 <_dtoa_r+0x1628>
10106480:	00800044 	movi	r2,1
10106484:	d8800b15 	stw	r2,44(sp)
10106488:	d8c00517 	ldw	r3,20(sp)
1010648c:	d9002217 	ldw	r4,136(sp)
10106490:	1907883a 	add	r3,r3,r4
10106494:	19800044 	addi	r6,r3,1
10106498:	d8c00c15 	stw	r3,48(sp)
1010649c:	d9800615 	stw	r6,24(sp)
101064a0:	0183a40e 	bge	zero,r6,10107334 <_dtoa_r+0x11cc>
101064a4:	d9800617 	ldw	r6,24(sp)
101064a8:	3021883a 	mov	r16,r6
101064ac:	e0001115 	stw	zero,68(fp)
101064b0:	008005c4 	movi	r2,23
101064b4:	1184c92e 	bgeu	r2,r6,101077dc <_dtoa_r+0x1674>
101064b8:	00c00044 	movi	r3,1
101064bc:	00800104 	movi	r2,4
101064c0:	1085883a 	add	r2,r2,r2
101064c4:	11000504 	addi	r4,r2,20
101064c8:	180b883a 	mov	r5,r3
101064cc:	18c00044 	addi	r3,r3,1
101064d0:	313ffb2e 	bgeu	r6,r4,101064c0 <__alt_data_end+0xfffe64c0>
101064d4:	e1401115 	stw	r5,68(fp)
101064d8:	e009883a 	mov	r4,fp
101064dc:	0107c580 	call	10107c58 <_Balloc>
101064e0:	d8800715 	stw	r2,28(sp)
101064e4:	e0801015 	stw	r2,64(fp)
101064e8:	00800384 	movi	r2,14
101064ec:	1400f736 	bltu	r2,r16,101068cc <_dtoa_r+0x764>
101064f0:	8800f626 	beq	r17,zero,101068cc <_dtoa_r+0x764>
101064f4:	d9c00517 	ldw	r7,20(sp)
101064f8:	01c39a0e 	bge	zero,r7,10107364 <_dtoa_r+0x11fc>
101064fc:	388003cc 	andi	r2,r7,15
10106500:	100490fa 	slli	r2,r2,3
10106504:	382bd13a 	srai	r21,r7,4
10106508:	00c40474 	movhi	r3,4113
1010650c:	18c5d004 	addi	r3,r3,5952
10106510:	1885883a 	add	r2,r3,r2
10106514:	a8c0040c 	andi	r3,r21,16
10106518:	12400017 	ldw	r9,0(r2)
1010651c:	12000117 	ldw	r8,4(r2)
10106520:	18037926 	beq	r3,zero,10107308 <_dtoa_r+0x11a0>
10106524:	00840474 	movhi	r2,4113
10106528:	1085c604 	addi	r2,r2,5912
1010652c:	11800817 	ldw	r6,32(r2)
10106530:	11c00917 	ldw	r7,36(r2)
10106534:	9009883a 	mov	r4,r18
10106538:	980b883a 	mov	r5,r19
1010653c:	da001715 	stw	r8,92(sp)
10106540:	da401615 	stw	r9,88(sp)
10106544:	010c9c80 	call	1010c9c8 <__divdf3>
10106548:	da001717 	ldw	r8,92(sp)
1010654c:	da401617 	ldw	r9,88(sp)
10106550:	ad4003cc 	andi	r21,r21,15
10106554:	040000c4 	movi	r16,3
10106558:	1023883a 	mov	r17,r2
1010655c:	1829883a 	mov	r20,r3
10106560:	a8001126 	beq	r21,zero,101065a8 <_dtoa_r+0x440>
10106564:	05c40474 	movhi	r23,4113
10106568:	bdc5c604 	addi	r23,r23,5912
1010656c:	4805883a 	mov	r2,r9
10106570:	4007883a 	mov	r3,r8
10106574:	a980004c 	andi	r6,r21,1
10106578:	1009883a 	mov	r4,r2
1010657c:	a82bd07a 	srai	r21,r21,1
10106580:	180b883a 	mov	r5,r3
10106584:	30000426 	beq	r6,zero,10106598 <_dtoa_r+0x430>
10106588:	b9800017 	ldw	r6,0(r23)
1010658c:	b9c00117 	ldw	r7,4(r23)
10106590:	84000044 	addi	r16,r16,1
10106594:	010d5080 	call	1010d508 <__muldf3>
10106598:	bdc00204 	addi	r23,r23,8
1010659c:	a83ff51e 	bne	r21,zero,10106574 <__alt_data_end+0xfffe6574>
101065a0:	1013883a 	mov	r9,r2
101065a4:	1811883a 	mov	r8,r3
101065a8:	480d883a 	mov	r6,r9
101065ac:	400f883a 	mov	r7,r8
101065b0:	8809883a 	mov	r4,r17
101065b4:	a00b883a 	mov	r5,r20
101065b8:	010c9c80 	call	1010c9c8 <__divdf3>
101065bc:	d8800f15 	stw	r2,60(sp)
101065c0:	d8c01015 	stw	r3,64(sp)
101065c4:	d8c00e17 	ldw	r3,56(sp)
101065c8:	18000626 	beq	r3,zero,101065e4 <_dtoa_r+0x47c>
101065cc:	d9000f17 	ldw	r4,60(sp)
101065d0:	d9401017 	ldw	r5,64(sp)
101065d4:	000d883a 	mov	r6,zero
101065d8:	01cffc34 	movhi	r7,16368
101065dc:	010d4140 	call	1010d414 <__ledf2>
101065e0:	10040b16 	blt	r2,zero,10107610 <_dtoa_r+0x14a8>
101065e4:	8009883a 	mov	r4,r16
101065e8:	010e59c0 	call	1010e59c <__floatsidf>
101065ec:	d9800f17 	ldw	r6,60(sp)
101065f0:	d9c01017 	ldw	r7,64(sp)
101065f4:	1009883a 	mov	r4,r2
101065f8:	180b883a 	mov	r5,r3
101065fc:	010d5080 	call	1010d508 <__muldf3>
10106600:	000d883a 	mov	r6,zero
10106604:	01d00734 	movhi	r7,16412
10106608:	1009883a 	mov	r4,r2
1010660c:	180b883a 	mov	r5,r3
10106610:	010c11c0 	call	1010c11c <__adddf3>
10106614:	1021883a 	mov	r16,r2
10106618:	d8800617 	ldw	r2,24(sp)
1010661c:	047f3034 	movhi	r17,64704
10106620:	1c63883a 	add	r17,r3,r17
10106624:	10031826 	beq	r2,zero,10107288 <_dtoa_r+0x1120>
10106628:	d8c00517 	ldw	r3,20(sp)
1010662c:	db000617 	ldw	r12,24(sp)
10106630:	d8c01315 	stw	r3,76(sp)
10106634:	d9000b17 	ldw	r4,44(sp)
10106638:	20038f26 	beq	r4,zero,10107478 <_dtoa_r+0x1310>
1010663c:	60bfffc4 	addi	r2,r12,-1
10106640:	100490fa 	slli	r2,r2,3
10106644:	00c40474 	movhi	r3,4113
10106648:	18c5d004 	addi	r3,r3,5952
1010664c:	1885883a 	add	r2,r3,r2
10106650:	11800017 	ldw	r6,0(r2)
10106654:	11c00117 	ldw	r7,4(r2)
10106658:	d8800717 	ldw	r2,28(sp)
1010665c:	0009883a 	mov	r4,zero
10106660:	014ff834 	movhi	r5,16352
10106664:	db001615 	stw	r12,88(sp)
10106668:	15c00044 	addi	r23,r2,1
1010666c:	010c9c80 	call	1010c9c8 <__divdf3>
10106670:	800d883a 	mov	r6,r16
10106674:	880f883a 	mov	r7,r17
10106678:	1009883a 	mov	r4,r2
1010667c:	180b883a 	mov	r5,r3
10106680:	010dc200 	call	1010dc20 <__subdf3>
10106684:	d9401017 	ldw	r5,64(sp)
10106688:	d9000f17 	ldw	r4,60(sp)
1010668c:	102b883a 	mov	r21,r2
10106690:	d8c01215 	stw	r3,72(sp)
10106694:	010e51c0 	call	1010e51c <__fixdfsi>
10106698:	1009883a 	mov	r4,r2
1010669c:	1029883a 	mov	r20,r2
101066a0:	010e59c0 	call	1010e59c <__floatsidf>
101066a4:	d9000f17 	ldw	r4,60(sp)
101066a8:	d9401017 	ldw	r5,64(sp)
101066ac:	100d883a 	mov	r6,r2
101066b0:	180f883a 	mov	r7,r3
101066b4:	010dc200 	call	1010dc20 <__subdf3>
101066b8:	1823883a 	mov	r17,r3
101066bc:	d8c00717 	ldw	r3,28(sp)
101066c0:	d9401217 	ldw	r5,72(sp)
101066c4:	a2000c04 	addi	r8,r20,48
101066c8:	1021883a 	mov	r16,r2
101066cc:	1a000005 	stb	r8,0(r3)
101066d0:	800d883a 	mov	r6,r16
101066d4:	880f883a 	mov	r7,r17
101066d8:	a809883a 	mov	r4,r21
101066dc:	4029883a 	mov	r20,r8
101066e0:	010d3380 	call	1010d338 <__gedf2>
101066e4:	00841d16 	blt	zero,r2,1010775c <_dtoa_r+0x15f4>
101066e8:	800d883a 	mov	r6,r16
101066ec:	880f883a 	mov	r7,r17
101066f0:	0009883a 	mov	r4,zero
101066f4:	014ffc34 	movhi	r5,16368
101066f8:	010dc200 	call	1010dc20 <__subdf3>
101066fc:	d9401217 	ldw	r5,72(sp)
10106700:	100d883a 	mov	r6,r2
10106704:	180f883a 	mov	r7,r3
10106708:	a809883a 	mov	r4,r21
1010670c:	010d3380 	call	1010d338 <__gedf2>
10106710:	db001617 	ldw	r12,88(sp)
10106714:	00840e16 	blt	zero,r2,10107750 <_dtoa_r+0x15e8>
10106718:	00800044 	movi	r2,1
1010671c:	13006b0e 	bge	r2,r12,101068cc <_dtoa_r+0x764>
10106720:	d9000717 	ldw	r4,28(sp)
10106724:	dd800f15 	stw	r22,60(sp)
10106728:	dcc01015 	stw	r19,64(sp)
1010672c:	2319883a 	add	r12,r4,r12
10106730:	dcc01217 	ldw	r19,72(sp)
10106734:	602d883a 	mov	r22,r12
10106738:	dc801215 	stw	r18,72(sp)
1010673c:	b825883a 	mov	r18,r23
10106740:	00000906 	br	10106768 <_dtoa_r+0x600>
10106744:	010dc200 	call	1010dc20 <__subdf3>
10106748:	a80d883a 	mov	r6,r21
1010674c:	980f883a 	mov	r7,r19
10106750:	1009883a 	mov	r4,r2
10106754:	180b883a 	mov	r5,r3
10106758:	010d4140 	call	1010d414 <__ledf2>
1010675c:	1003e816 	blt	r2,zero,10107700 <_dtoa_r+0x1598>
10106760:	b825883a 	mov	r18,r23
10106764:	bd83e926 	beq	r23,r22,1010770c <_dtoa_r+0x15a4>
10106768:	a809883a 	mov	r4,r21
1010676c:	980b883a 	mov	r5,r19
10106770:	000d883a 	mov	r6,zero
10106774:	01d00934 	movhi	r7,16420
10106778:	010d5080 	call	1010d508 <__muldf3>
1010677c:	000d883a 	mov	r6,zero
10106780:	01d00934 	movhi	r7,16420
10106784:	8009883a 	mov	r4,r16
10106788:	880b883a 	mov	r5,r17
1010678c:	102b883a 	mov	r21,r2
10106790:	1827883a 	mov	r19,r3
10106794:	010d5080 	call	1010d508 <__muldf3>
10106798:	180b883a 	mov	r5,r3
1010679c:	1009883a 	mov	r4,r2
101067a0:	1821883a 	mov	r16,r3
101067a4:	1023883a 	mov	r17,r2
101067a8:	010e51c0 	call	1010e51c <__fixdfsi>
101067ac:	1009883a 	mov	r4,r2
101067b0:	1029883a 	mov	r20,r2
101067b4:	010e59c0 	call	1010e59c <__floatsidf>
101067b8:	8809883a 	mov	r4,r17
101067bc:	800b883a 	mov	r5,r16
101067c0:	100d883a 	mov	r6,r2
101067c4:	180f883a 	mov	r7,r3
101067c8:	010dc200 	call	1010dc20 <__subdf3>
101067cc:	a5000c04 	addi	r20,r20,48
101067d0:	a80d883a 	mov	r6,r21
101067d4:	980f883a 	mov	r7,r19
101067d8:	1009883a 	mov	r4,r2
101067dc:	180b883a 	mov	r5,r3
101067e0:	95000005 	stb	r20,0(r18)
101067e4:	1021883a 	mov	r16,r2
101067e8:	1823883a 	mov	r17,r3
101067ec:	010d4140 	call	1010d414 <__ledf2>
101067f0:	bdc00044 	addi	r23,r23,1
101067f4:	800d883a 	mov	r6,r16
101067f8:	880f883a 	mov	r7,r17
101067fc:	0009883a 	mov	r4,zero
10106800:	014ffc34 	movhi	r5,16368
10106804:	103fcf0e 	bge	r2,zero,10106744 <__alt_data_end+0xfffe6744>
10106808:	d8c01317 	ldw	r3,76(sp)
1010680c:	d8c00515 	stw	r3,20(sp)
10106810:	d9400917 	ldw	r5,36(sp)
10106814:	e009883a 	mov	r4,fp
10106818:	0107d000 	call	10107d00 <_Bfree>
1010681c:	d9000517 	ldw	r4,20(sp)
10106820:	d9802317 	ldw	r6,140(sp)
10106824:	d9c02517 	ldw	r7,148(sp)
10106828:	b8000005 	stb	zero,0(r23)
1010682c:	20800044 	addi	r2,r4,1
10106830:	30800015 	stw	r2,0(r6)
10106834:	3802aa26 	beq	r7,zero,101072e0 <_dtoa_r+0x1178>
10106838:	3dc00015 	stw	r23,0(r7)
1010683c:	d8800717 	ldw	r2,28(sp)
10106840:	003e7906 	br	10106228 <__alt_data_end+0xfffe6228>
10106844:	00800434 	movhi	r2,16
10106848:	10bfffc4 	addi	r2,r2,-1
1010684c:	88a2703a 	and	r17,r17,r2
10106850:	883e851e 	bne	r17,zero,10106268 <__alt_data_end+0xfffe6268>
10106854:	00840474 	movhi	r2,4113
10106858:	1085b204 	addi	r2,r2,5832
1010685c:	003e8406 	br	10106270 <__alt_data_end+0xfffe6270>
10106860:	10c00204 	addi	r3,r2,8
10106864:	003e8706 	br	10106284 <__alt_data_end+0xfffe6284>
10106868:	01400434 	movhi	r5,16
1010686c:	297fffc4 	addi	r5,r5,-1
10106870:	994a703a 	and	r5,r19,r5
10106874:	9009883a 	mov	r4,r18
10106878:	843f0044 	addi	r16,r16,-1023
1010687c:	294ffc34 	orhi	r5,r5,16368
10106880:	dd800217 	ldw	r22,8(sp)
10106884:	d8001115 	stw	zero,68(sp)
10106888:	003ea506 	br	10106320 <__alt_data_end+0xfffe6320>
1010688c:	00840474 	movhi	r2,4113
10106890:	1085a904 	addi	r2,r2,5796
10106894:	003e6406 	br	10106228 <__alt_data_end+0xfffe6228>
10106898:	e0001115 	stw	zero,68(fp)
1010689c:	000b883a 	mov	r5,zero
101068a0:	e009883a 	mov	r4,fp
101068a4:	0107c580 	call	10107c58 <_Balloc>
101068a8:	01bfffc4 	movi	r6,-1
101068ac:	01c00044 	movi	r7,1
101068b0:	d8800715 	stw	r2,28(sp)
101068b4:	d9800c15 	stw	r6,48(sp)
101068b8:	e0801015 	stw	r2,64(fp)
101068bc:	d8000315 	stw	zero,12(sp)
101068c0:	d9c00b15 	stw	r7,44(sp)
101068c4:	d9800615 	stw	r6,24(sp)
101068c8:	d8002215 	stw	zero,136(sp)
101068cc:	d8800117 	ldw	r2,4(sp)
101068d0:	10008916 	blt	r2,zero,10106af8 <_dtoa_r+0x990>
101068d4:	d9000517 	ldw	r4,20(sp)
101068d8:	00c00384 	movi	r3,14
101068dc:	19008616 	blt	r3,r4,10106af8 <_dtoa_r+0x990>
101068e0:	200490fa 	slli	r2,r4,3
101068e4:	00c40474 	movhi	r3,4113
101068e8:	d9802217 	ldw	r6,136(sp)
101068ec:	18c5d004 	addi	r3,r3,5952
101068f0:	1885883a 	add	r2,r3,r2
101068f4:	14000017 	ldw	r16,0(r2)
101068f8:	14400117 	ldw	r17,4(r2)
101068fc:	30016316 	blt	r6,zero,10106e8c <_dtoa_r+0xd24>
10106900:	800d883a 	mov	r6,r16
10106904:	880f883a 	mov	r7,r17
10106908:	9009883a 	mov	r4,r18
1010690c:	980b883a 	mov	r5,r19
10106910:	010c9c80 	call	1010c9c8 <__divdf3>
10106914:	180b883a 	mov	r5,r3
10106918:	1009883a 	mov	r4,r2
1010691c:	010e51c0 	call	1010e51c <__fixdfsi>
10106920:	1009883a 	mov	r4,r2
10106924:	102b883a 	mov	r21,r2
10106928:	010e59c0 	call	1010e59c <__floatsidf>
1010692c:	800d883a 	mov	r6,r16
10106930:	880f883a 	mov	r7,r17
10106934:	1009883a 	mov	r4,r2
10106938:	180b883a 	mov	r5,r3
1010693c:	010d5080 	call	1010d508 <__muldf3>
10106940:	100d883a 	mov	r6,r2
10106944:	180f883a 	mov	r7,r3
10106948:	9009883a 	mov	r4,r18
1010694c:	980b883a 	mov	r5,r19
10106950:	010dc200 	call	1010dc20 <__subdf3>
10106954:	d9c00717 	ldw	r7,28(sp)
10106958:	1009883a 	mov	r4,r2
1010695c:	a8800c04 	addi	r2,r21,48
10106960:	38800005 	stb	r2,0(r7)
10106964:	3dc00044 	addi	r23,r7,1
10106968:	d9c00617 	ldw	r7,24(sp)
1010696c:	01800044 	movi	r6,1
10106970:	180b883a 	mov	r5,r3
10106974:	2005883a 	mov	r2,r4
10106978:	39803826 	beq	r7,r6,10106a5c <_dtoa_r+0x8f4>
1010697c:	000d883a 	mov	r6,zero
10106980:	01d00934 	movhi	r7,16420
10106984:	010d5080 	call	1010d508 <__muldf3>
10106988:	000d883a 	mov	r6,zero
1010698c:	000f883a 	mov	r7,zero
10106990:	1009883a 	mov	r4,r2
10106994:	180b883a 	mov	r5,r3
10106998:	1025883a 	mov	r18,r2
1010699c:	1827883a 	mov	r19,r3
101069a0:	010d2b00 	call	1010d2b0 <__eqdf2>
101069a4:	103f9a26 	beq	r2,zero,10106810 <__alt_data_end+0xfffe6810>
101069a8:	d9c00617 	ldw	r7,24(sp)
101069ac:	d8c00717 	ldw	r3,28(sp)
101069b0:	b829883a 	mov	r20,r23
101069b4:	38bfffc4 	addi	r2,r7,-1
101069b8:	18ad883a 	add	r22,r3,r2
101069bc:	00000a06 	br	101069e8 <_dtoa_r+0x880>
101069c0:	010d5080 	call	1010d508 <__muldf3>
101069c4:	000d883a 	mov	r6,zero
101069c8:	000f883a 	mov	r7,zero
101069cc:	1009883a 	mov	r4,r2
101069d0:	180b883a 	mov	r5,r3
101069d4:	1025883a 	mov	r18,r2
101069d8:	1827883a 	mov	r19,r3
101069dc:	b829883a 	mov	r20,r23
101069e0:	010d2b00 	call	1010d2b0 <__eqdf2>
101069e4:	103f8a26 	beq	r2,zero,10106810 <__alt_data_end+0xfffe6810>
101069e8:	800d883a 	mov	r6,r16
101069ec:	880f883a 	mov	r7,r17
101069f0:	9009883a 	mov	r4,r18
101069f4:	980b883a 	mov	r5,r19
101069f8:	010c9c80 	call	1010c9c8 <__divdf3>
101069fc:	180b883a 	mov	r5,r3
10106a00:	1009883a 	mov	r4,r2
10106a04:	010e51c0 	call	1010e51c <__fixdfsi>
10106a08:	1009883a 	mov	r4,r2
10106a0c:	102b883a 	mov	r21,r2
10106a10:	010e59c0 	call	1010e59c <__floatsidf>
10106a14:	800d883a 	mov	r6,r16
10106a18:	880f883a 	mov	r7,r17
10106a1c:	1009883a 	mov	r4,r2
10106a20:	180b883a 	mov	r5,r3
10106a24:	010d5080 	call	1010d508 <__muldf3>
10106a28:	100d883a 	mov	r6,r2
10106a2c:	180f883a 	mov	r7,r3
10106a30:	9009883a 	mov	r4,r18
10106a34:	980b883a 	mov	r5,r19
10106a38:	010dc200 	call	1010dc20 <__subdf3>
10106a3c:	aa000c04 	addi	r8,r21,48
10106a40:	a2000005 	stb	r8,0(r20)
10106a44:	000d883a 	mov	r6,zero
10106a48:	01d00934 	movhi	r7,16420
10106a4c:	1009883a 	mov	r4,r2
10106a50:	180b883a 	mov	r5,r3
10106a54:	a5c00044 	addi	r23,r20,1
10106a58:	b53fd91e 	bne	r22,r20,101069c0 <__alt_data_end+0xfffe69c0>
10106a5c:	100d883a 	mov	r6,r2
10106a60:	180f883a 	mov	r7,r3
10106a64:	1009883a 	mov	r4,r2
10106a68:	180b883a 	mov	r5,r3
10106a6c:	010c11c0 	call	1010c11c <__adddf3>
10106a70:	100d883a 	mov	r6,r2
10106a74:	180f883a 	mov	r7,r3
10106a78:	8009883a 	mov	r4,r16
10106a7c:	880b883a 	mov	r5,r17
10106a80:	1027883a 	mov	r19,r2
10106a84:	1825883a 	mov	r18,r3
10106a88:	010d4140 	call	1010d414 <__ledf2>
10106a8c:	10000816 	blt	r2,zero,10106ab0 <_dtoa_r+0x948>
10106a90:	980d883a 	mov	r6,r19
10106a94:	900f883a 	mov	r7,r18
10106a98:	8009883a 	mov	r4,r16
10106a9c:	880b883a 	mov	r5,r17
10106aa0:	010d2b00 	call	1010d2b0 <__eqdf2>
10106aa4:	103f5a1e 	bne	r2,zero,10106810 <__alt_data_end+0xfffe6810>
10106aa8:	ad40004c 	andi	r21,r21,1
10106aac:	a83f5826 	beq	r21,zero,10106810 <__alt_data_end+0xfffe6810>
10106ab0:	bd3fffc3 	ldbu	r20,-1(r23)
10106ab4:	b8bfffc4 	addi	r2,r23,-1
10106ab8:	1007883a 	mov	r3,r2
10106abc:	01400e44 	movi	r5,57
10106ac0:	d9800717 	ldw	r6,28(sp)
10106ac4:	00000506 	br	10106adc <_dtoa_r+0x974>
10106ac8:	18ffffc4 	addi	r3,r3,-1
10106acc:	11824726 	beq	r2,r6,101073ec <_dtoa_r+0x1284>
10106ad0:	1d000003 	ldbu	r20,0(r3)
10106ad4:	102f883a 	mov	r23,r2
10106ad8:	10bfffc4 	addi	r2,r2,-1
10106adc:	a1003fcc 	andi	r4,r20,255
10106ae0:	2100201c 	xori	r4,r4,128
10106ae4:	213fe004 	addi	r4,r4,-128
10106ae8:	217ff726 	beq	r4,r5,10106ac8 <__alt_data_end+0xfffe6ac8>
10106aec:	a2000044 	addi	r8,r20,1
10106af0:	12000005 	stb	r8,0(r2)
10106af4:	003f4606 	br	10106810 <__alt_data_end+0xfffe6810>
10106af8:	d9000b17 	ldw	r4,44(sp)
10106afc:	2000c826 	beq	r4,zero,10106e20 <_dtoa_r+0xcb8>
10106b00:	d9800317 	ldw	r6,12(sp)
10106b04:	00c00044 	movi	r3,1
10106b08:	1980f90e 	bge	r3,r6,10106ef0 <_dtoa_r+0xd88>
10106b0c:	d8800617 	ldw	r2,24(sp)
10106b10:	d8c00a17 	ldw	r3,40(sp)
10106b14:	157fffc4 	addi	r21,r2,-1
10106b18:	1d41f316 	blt	r3,r21,101072e8 <_dtoa_r+0x1180>
10106b1c:	1d6bc83a 	sub	r21,r3,r21
10106b20:	d9c00617 	ldw	r7,24(sp)
10106b24:	3802aa16 	blt	r7,zero,101075d0 <_dtoa_r+0x1468>
10106b28:	dd000817 	ldw	r20,32(sp)
10106b2c:	d8800617 	ldw	r2,24(sp)
10106b30:	d8c00817 	ldw	r3,32(sp)
10106b34:	01400044 	movi	r5,1
10106b38:	e009883a 	mov	r4,fp
10106b3c:	1887883a 	add	r3,r3,r2
10106b40:	d8c00815 	stw	r3,32(sp)
10106b44:	b0ad883a 	add	r22,r22,r2
10106b48:	01080640 	call	10108064 <__i2b>
10106b4c:	1023883a 	mov	r17,r2
10106b50:	a0000826 	beq	r20,zero,10106b74 <_dtoa_r+0xa0c>
10106b54:	0580070e 	bge	zero,r22,10106b74 <_dtoa_r+0xa0c>
10106b58:	a005883a 	mov	r2,r20
10106b5c:	b500b916 	blt	r22,r20,10106e44 <_dtoa_r+0xcdc>
10106b60:	d9000817 	ldw	r4,32(sp)
10106b64:	a0a9c83a 	sub	r20,r20,r2
10106b68:	b0adc83a 	sub	r22,r22,r2
10106b6c:	2089c83a 	sub	r4,r4,r2
10106b70:	d9000815 	stw	r4,32(sp)
10106b74:	d9800a17 	ldw	r6,40(sp)
10106b78:	0181810e 	bge	zero,r6,10107180 <_dtoa_r+0x1018>
10106b7c:	d9c00b17 	ldw	r7,44(sp)
10106b80:	3800b326 	beq	r7,zero,10106e50 <_dtoa_r+0xce8>
10106b84:	a800b226 	beq	r21,zero,10106e50 <_dtoa_r+0xce8>
10106b88:	880b883a 	mov	r5,r17
10106b8c:	a80d883a 	mov	r6,r21
10106b90:	e009883a 	mov	r4,fp
10106b94:	01082980 	call	10108298 <__pow5mult>
10106b98:	d9800917 	ldw	r6,36(sp)
10106b9c:	100b883a 	mov	r5,r2
10106ba0:	e009883a 	mov	r4,fp
10106ba4:	1023883a 	mov	r17,r2
10106ba8:	01080a00 	call	101080a0 <__multiply>
10106bac:	1021883a 	mov	r16,r2
10106bb0:	d8800a17 	ldw	r2,40(sp)
10106bb4:	d9400917 	ldw	r5,36(sp)
10106bb8:	e009883a 	mov	r4,fp
10106bbc:	1545c83a 	sub	r2,r2,r21
10106bc0:	d8800a15 	stw	r2,40(sp)
10106bc4:	0107d000 	call	10107d00 <_Bfree>
10106bc8:	d8c00a17 	ldw	r3,40(sp)
10106bcc:	18009f1e 	bne	r3,zero,10106e4c <_dtoa_r+0xce4>
10106bd0:	05c00044 	movi	r23,1
10106bd4:	e009883a 	mov	r4,fp
10106bd8:	b80b883a 	mov	r5,r23
10106bdc:	01080640 	call	10108064 <__i2b>
10106be0:	d9000d17 	ldw	r4,52(sp)
10106be4:	102b883a 	mov	r21,r2
10106be8:	2000ce26 	beq	r4,zero,10106f24 <_dtoa_r+0xdbc>
10106bec:	200d883a 	mov	r6,r4
10106bf0:	100b883a 	mov	r5,r2
10106bf4:	e009883a 	mov	r4,fp
10106bf8:	01082980 	call	10108298 <__pow5mult>
10106bfc:	d9800317 	ldw	r6,12(sp)
10106c00:	102b883a 	mov	r21,r2
10106c04:	b981810e 	bge	r23,r6,1010720c <_dtoa_r+0x10a4>
10106c08:	0027883a 	mov	r19,zero
10106c0c:	a8800417 	ldw	r2,16(r21)
10106c10:	05c00804 	movi	r23,32
10106c14:	10800104 	addi	r2,r2,4
10106c18:	1085883a 	add	r2,r2,r2
10106c1c:	1085883a 	add	r2,r2,r2
10106c20:	a885883a 	add	r2,r21,r2
10106c24:	11000017 	ldw	r4,0(r2)
10106c28:	0107f4c0 	call	10107f4c <__hi0bits>
10106c2c:	b885c83a 	sub	r2,r23,r2
10106c30:	1585883a 	add	r2,r2,r22
10106c34:	108007cc 	andi	r2,r2,31
10106c38:	1000b326 	beq	r2,zero,10106f08 <_dtoa_r+0xda0>
10106c3c:	00c00804 	movi	r3,32
10106c40:	1887c83a 	sub	r3,r3,r2
10106c44:	01000104 	movi	r4,4
10106c48:	20c2cd0e 	bge	r4,r3,10107780 <_dtoa_r+0x1618>
10106c4c:	00c00704 	movi	r3,28
10106c50:	1885c83a 	sub	r2,r3,r2
10106c54:	d8c00817 	ldw	r3,32(sp)
10106c58:	a0a9883a 	add	r20,r20,r2
10106c5c:	b0ad883a 	add	r22,r22,r2
10106c60:	1887883a 	add	r3,r3,r2
10106c64:	d8c00815 	stw	r3,32(sp)
10106c68:	d9800817 	ldw	r6,32(sp)
10106c6c:	0180040e 	bge	zero,r6,10106c80 <_dtoa_r+0xb18>
10106c70:	800b883a 	mov	r5,r16
10106c74:	e009883a 	mov	r4,fp
10106c78:	01083d80 	call	101083d8 <__lshift>
10106c7c:	1021883a 	mov	r16,r2
10106c80:	0580050e 	bge	zero,r22,10106c98 <_dtoa_r+0xb30>
10106c84:	a80b883a 	mov	r5,r21
10106c88:	b00d883a 	mov	r6,r22
10106c8c:	e009883a 	mov	r4,fp
10106c90:	01083d80 	call	101083d8 <__lshift>
10106c94:	102b883a 	mov	r21,r2
10106c98:	d9c00e17 	ldw	r7,56(sp)
10106c9c:	3801211e 	bne	r7,zero,10107124 <_dtoa_r+0xfbc>
10106ca0:	d9800617 	ldw	r6,24(sp)
10106ca4:	0181380e 	bge	zero,r6,10107188 <_dtoa_r+0x1020>
10106ca8:	d8c00b17 	ldw	r3,44(sp)
10106cac:	1800ab1e 	bne	r3,zero,10106f5c <_dtoa_r+0xdf4>
10106cb0:	dc800717 	ldw	r18,28(sp)
10106cb4:	dcc00617 	ldw	r19,24(sp)
10106cb8:	9029883a 	mov	r20,r18
10106cbc:	00000206 	br	10106cc8 <_dtoa_r+0xb60>
10106cc0:	0107d280 	call	10107d28 <__multadd>
10106cc4:	1021883a 	mov	r16,r2
10106cc8:	a80b883a 	mov	r5,r21
10106ccc:	8009883a 	mov	r4,r16
10106cd0:	0105f680 	call	10105f68 <quorem>
10106cd4:	10800c04 	addi	r2,r2,48
10106cd8:	90800005 	stb	r2,0(r18)
10106cdc:	94800044 	addi	r18,r18,1
10106ce0:	9507c83a 	sub	r3,r18,r20
10106ce4:	000f883a 	mov	r7,zero
10106ce8:	01800284 	movi	r6,10
10106cec:	800b883a 	mov	r5,r16
10106cf0:	e009883a 	mov	r4,fp
10106cf4:	1cfff216 	blt	r3,r19,10106cc0 <__alt_data_end+0xfffe6cc0>
10106cf8:	1011883a 	mov	r8,r2
10106cfc:	d8800617 	ldw	r2,24(sp)
10106d00:	0082370e 	bge	zero,r2,101075e0 <_dtoa_r+0x1478>
10106d04:	d9000717 	ldw	r4,28(sp)
10106d08:	0025883a 	mov	r18,zero
10106d0c:	20af883a 	add	r23,r4,r2
10106d10:	01800044 	movi	r6,1
10106d14:	800b883a 	mov	r5,r16
10106d18:	e009883a 	mov	r4,fp
10106d1c:	da001715 	stw	r8,92(sp)
10106d20:	01083d80 	call	101083d8 <__lshift>
10106d24:	a80b883a 	mov	r5,r21
10106d28:	1009883a 	mov	r4,r2
10106d2c:	d8800915 	stw	r2,36(sp)
10106d30:	01085200 	call	10108520 <__mcmp>
10106d34:	da001717 	ldw	r8,92(sp)
10106d38:	0081800e 	bge	zero,r2,1010733c <_dtoa_r+0x11d4>
10106d3c:	b93fffc3 	ldbu	r4,-1(r23)
10106d40:	b8bfffc4 	addi	r2,r23,-1
10106d44:	1007883a 	mov	r3,r2
10106d48:	01800e44 	movi	r6,57
10106d4c:	d9c00717 	ldw	r7,28(sp)
10106d50:	00000506 	br	10106d68 <_dtoa_r+0xc00>
10106d54:	18ffffc4 	addi	r3,r3,-1
10106d58:	11c12326 	beq	r2,r7,101071e8 <_dtoa_r+0x1080>
10106d5c:	19000003 	ldbu	r4,0(r3)
10106d60:	102f883a 	mov	r23,r2
10106d64:	10bfffc4 	addi	r2,r2,-1
10106d68:	21403fcc 	andi	r5,r4,255
10106d6c:	2940201c 	xori	r5,r5,128
10106d70:	297fe004 	addi	r5,r5,-128
10106d74:	29bff726 	beq	r5,r6,10106d54 <__alt_data_end+0xfffe6d54>
10106d78:	21000044 	addi	r4,r4,1
10106d7c:	11000005 	stb	r4,0(r2)
10106d80:	a80b883a 	mov	r5,r21
10106d84:	e009883a 	mov	r4,fp
10106d88:	0107d000 	call	10107d00 <_Bfree>
10106d8c:	883ea026 	beq	r17,zero,10106810 <__alt_data_end+0xfffe6810>
10106d90:	90000426 	beq	r18,zero,10106da4 <_dtoa_r+0xc3c>
10106d94:	94400326 	beq	r18,r17,10106da4 <_dtoa_r+0xc3c>
10106d98:	900b883a 	mov	r5,r18
10106d9c:	e009883a 	mov	r4,fp
10106da0:	0107d000 	call	10107d00 <_Bfree>
10106da4:	880b883a 	mov	r5,r17
10106da8:	e009883a 	mov	r4,fp
10106dac:	0107d000 	call	10107d00 <_Bfree>
10106db0:	003e9706 	br	10106810 <__alt_data_end+0xfffe6810>
10106db4:	01800044 	movi	r6,1
10106db8:	d9800e15 	stw	r6,56(sp)
10106dbc:	003d9606 	br	10106418 <__alt_data_end+0xfffe6418>
10106dc0:	d8800817 	ldw	r2,32(sp)
10106dc4:	d8c00517 	ldw	r3,20(sp)
10106dc8:	d8000d15 	stw	zero,52(sp)
10106dcc:	10c5c83a 	sub	r2,r2,r3
10106dd0:	00c9c83a 	sub	r4,zero,r3
10106dd4:	d8800815 	stw	r2,32(sp)
10106dd8:	d9000a15 	stw	r4,40(sp)
10106ddc:	003d9706 	br	1010643c <__alt_data_end+0xfffe643c>
10106de0:	05adc83a 	sub	r22,zero,r22
10106de4:	dd800815 	stw	r22,32(sp)
10106de8:	002d883a 	mov	r22,zero
10106dec:	003d8e06 	br	10106428 <__alt_data_end+0xfffe6428>
10106df0:	d9000517 	ldw	r4,20(sp)
10106df4:	010e59c0 	call	1010e59c <__floatsidf>
10106df8:	100d883a 	mov	r6,r2
10106dfc:	180f883a 	mov	r7,r3
10106e00:	a009883a 	mov	r4,r20
10106e04:	880b883a 	mov	r5,r17
10106e08:	010d2b00 	call	1010d2b0 <__eqdf2>
10106e0c:	103d7126 	beq	r2,zero,101063d4 <__alt_data_end+0xfffe63d4>
10106e10:	d9c00517 	ldw	r7,20(sp)
10106e14:	39ffffc4 	addi	r7,r7,-1
10106e18:	d9c00515 	stw	r7,20(sp)
10106e1c:	003d6d06 	br	101063d4 <__alt_data_end+0xfffe63d4>
10106e20:	dd400a17 	ldw	r21,40(sp)
10106e24:	dd000817 	ldw	r20,32(sp)
10106e28:	0023883a 	mov	r17,zero
10106e2c:	003f4806 	br	10106b50 <__alt_data_end+0xfffe6b50>
10106e30:	10e3c83a 	sub	r17,r2,r3
10106e34:	9448983a 	sll	r4,r18,r17
10106e38:	003d3206 	br	10106304 <__alt_data_end+0xfffe6304>
10106e3c:	d8000e15 	stw	zero,56(sp)
10106e40:	003d7506 	br	10106418 <__alt_data_end+0xfffe6418>
10106e44:	b005883a 	mov	r2,r22
10106e48:	003f4506 	br	10106b60 <__alt_data_end+0xfffe6b60>
10106e4c:	dc000915 	stw	r16,36(sp)
10106e50:	d9800a17 	ldw	r6,40(sp)
10106e54:	d9400917 	ldw	r5,36(sp)
10106e58:	e009883a 	mov	r4,fp
10106e5c:	01082980 	call	10108298 <__pow5mult>
10106e60:	1021883a 	mov	r16,r2
10106e64:	003f5a06 	br	10106bd0 <__alt_data_end+0xfffe6bd0>
10106e68:	01c00044 	movi	r7,1
10106e6c:	d9c00b15 	stw	r7,44(sp)
10106e70:	d8802217 	ldw	r2,136(sp)
10106e74:	0081280e 	bge	zero,r2,10107318 <_dtoa_r+0x11b0>
10106e78:	100d883a 	mov	r6,r2
10106e7c:	1021883a 	mov	r16,r2
10106e80:	d8800c15 	stw	r2,48(sp)
10106e84:	d8800615 	stw	r2,24(sp)
10106e88:	003d8806 	br	101064ac <__alt_data_end+0xfffe64ac>
10106e8c:	d8800617 	ldw	r2,24(sp)
10106e90:	00be9b16 	blt	zero,r2,10106900 <__alt_data_end+0xfffe6900>
10106e94:	10010f1e 	bne	r2,zero,101072d4 <_dtoa_r+0x116c>
10106e98:	880b883a 	mov	r5,r17
10106e9c:	000d883a 	mov	r6,zero
10106ea0:	01d00534 	movhi	r7,16404
10106ea4:	8009883a 	mov	r4,r16
10106ea8:	010d5080 	call	1010d508 <__muldf3>
10106eac:	900d883a 	mov	r6,r18
10106eb0:	980f883a 	mov	r7,r19
10106eb4:	1009883a 	mov	r4,r2
10106eb8:	180b883a 	mov	r5,r3
10106ebc:	010d3380 	call	1010d338 <__gedf2>
10106ec0:	002b883a 	mov	r21,zero
10106ec4:	0023883a 	mov	r17,zero
10106ec8:	1000bf16 	blt	r2,zero,101071c8 <_dtoa_r+0x1060>
10106ecc:	d9802217 	ldw	r6,136(sp)
10106ed0:	ddc00717 	ldw	r23,28(sp)
10106ed4:	018c303a 	nor	r6,zero,r6
10106ed8:	d9800515 	stw	r6,20(sp)
10106edc:	a80b883a 	mov	r5,r21
10106ee0:	e009883a 	mov	r4,fp
10106ee4:	0107d000 	call	10107d00 <_Bfree>
10106ee8:	883e4926 	beq	r17,zero,10106810 <__alt_data_end+0xfffe6810>
10106eec:	003fad06 	br	10106da4 <__alt_data_end+0xfffe6da4>
10106ef0:	d9c01117 	ldw	r7,68(sp)
10106ef4:	3801bc26 	beq	r7,zero,101075e8 <_dtoa_r+0x1480>
10106ef8:	10810cc4 	addi	r2,r2,1075
10106efc:	dd400a17 	ldw	r21,40(sp)
10106f00:	dd000817 	ldw	r20,32(sp)
10106f04:	003f0a06 	br	10106b30 <__alt_data_end+0xfffe6b30>
10106f08:	00800704 	movi	r2,28
10106f0c:	d9000817 	ldw	r4,32(sp)
10106f10:	a0a9883a 	add	r20,r20,r2
10106f14:	b0ad883a 	add	r22,r22,r2
10106f18:	2089883a 	add	r4,r4,r2
10106f1c:	d9000815 	stw	r4,32(sp)
10106f20:	003f5106 	br	10106c68 <__alt_data_end+0xfffe6c68>
10106f24:	d8c00317 	ldw	r3,12(sp)
10106f28:	b8c1fc0e 	bge	r23,r3,1010771c <_dtoa_r+0x15b4>
10106f2c:	0027883a 	mov	r19,zero
10106f30:	b805883a 	mov	r2,r23
10106f34:	003f3e06 	br	10106c30 <__alt_data_end+0xfffe6c30>
10106f38:	880b883a 	mov	r5,r17
10106f3c:	e009883a 	mov	r4,fp
10106f40:	000f883a 	mov	r7,zero
10106f44:	01800284 	movi	r6,10
10106f48:	0107d280 	call	10107d28 <__multadd>
10106f4c:	d9000c17 	ldw	r4,48(sp)
10106f50:	1023883a 	mov	r17,r2
10106f54:	0102040e 	bge	zero,r4,10107768 <_dtoa_r+0x1600>
10106f58:	d9000615 	stw	r4,24(sp)
10106f5c:	0500050e 	bge	zero,r20,10106f74 <_dtoa_r+0xe0c>
10106f60:	880b883a 	mov	r5,r17
10106f64:	a00d883a 	mov	r6,r20
10106f68:	e009883a 	mov	r4,fp
10106f6c:	01083d80 	call	101083d8 <__lshift>
10106f70:	1023883a 	mov	r17,r2
10106f74:	9801241e 	bne	r19,zero,10107408 <_dtoa_r+0x12a0>
10106f78:	8829883a 	mov	r20,r17
10106f7c:	d9000617 	ldw	r4,24(sp)
10106f80:	dcc00717 	ldw	r19,28(sp)
10106f84:	9480004c 	andi	r18,r18,1
10106f88:	20bfffc4 	addi	r2,r4,-1
10106f8c:	9885883a 	add	r2,r19,r2
10106f90:	d8800415 	stw	r2,16(sp)
10106f94:	dc800615 	stw	r18,24(sp)
10106f98:	a80b883a 	mov	r5,r21
10106f9c:	8009883a 	mov	r4,r16
10106fa0:	0105f680 	call	10105f68 <quorem>
10106fa4:	880b883a 	mov	r5,r17
10106fa8:	8009883a 	mov	r4,r16
10106fac:	102f883a 	mov	r23,r2
10106fb0:	01085200 	call	10108520 <__mcmp>
10106fb4:	a80b883a 	mov	r5,r21
10106fb8:	a00d883a 	mov	r6,r20
10106fbc:	e009883a 	mov	r4,fp
10106fc0:	102d883a 	mov	r22,r2
10106fc4:	01085800 	call	10108580 <__mdiff>
10106fc8:	1007883a 	mov	r3,r2
10106fcc:	10800317 	ldw	r2,12(r2)
10106fd0:	bc800c04 	addi	r18,r23,48
10106fd4:	180b883a 	mov	r5,r3
10106fd8:	10004e1e 	bne	r2,zero,10107114 <_dtoa_r+0xfac>
10106fdc:	8009883a 	mov	r4,r16
10106fe0:	d8c01615 	stw	r3,88(sp)
10106fe4:	01085200 	call	10108520 <__mcmp>
10106fe8:	d8c01617 	ldw	r3,88(sp)
10106fec:	e009883a 	mov	r4,fp
10106ff0:	d8801615 	stw	r2,88(sp)
10106ff4:	180b883a 	mov	r5,r3
10106ff8:	0107d000 	call	10107d00 <_Bfree>
10106ffc:	d8801617 	ldw	r2,88(sp)
10107000:	1000041e 	bne	r2,zero,10107014 <_dtoa_r+0xeac>
10107004:	d9800317 	ldw	r6,12(sp)
10107008:	3000021e 	bne	r6,zero,10107014 <_dtoa_r+0xeac>
1010700c:	d8c00617 	ldw	r3,24(sp)
10107010:	18003726 	beq	r3,zero,101070f0 <_dtoa_r+0xf88>
10107014:	b0002016 	blt	r22,zero,10107098 <_dtoa_r+0xf30>
10107018:	b000041e 	bne	r22,zero,1010702c <_dtoa_r+0xec4>
1010701c:	d9000317 	ldw	r4,12(sp)
10107020:	2000021e 	bne	r4,zero,1010702c <_dtoa_r+0xec4>
10107024:	d8c00617 	ldw	r3,24(sp)
10107028:	18001b26 	beq	r3,zero,10107098 <_dtoa_r+0xf30>
1010702c:	00810716 	blt	zero,r2,1010744c <_dtoa_r+0x12e4>
10107030:	d8c00417 	ldw	r3,16(sp)
10107034:	9d800044 	addi	r22,r19,1
10107038:	9c800005 	stb	r18,0(r19)
1010703c:	b02f883a 	mov	r23,r22
10107040:	98c10626 	beq	r19,r3,1010745c <_dtoa_r+0x12f4>
10107044:	800b883a 	mov	r5,r16
10107048:	000f883a 	mov	r7,zero
1010704c:	01800284 	movi	r6,10
10107050:	e009883a 	mov	r4,fp
10107054:	0107d280 	call	10107d28 <__multadd>
10107058:	1021883a 	mov	r16,r2
1010705c:	000f883a 	mov	r7,zero
10107060:	01800284 	movi	r6,10
10107064:	880b883a 	mov	r5,r17
10107068:	e009883a 	mov	r4,fp
1010706c:	8d002526 	beq	r17,r20,10107104 <_dtoa_r+0xf9c>
10107070:	0107d280 	call	10107d28 <__multadd>
10107074:	a00b883a 	mov	r5,r20
10107078:	000f883a 	mov	r7,zero
1010707c:	01800284 	movi	r6,10
10107080:	e009883a 	mov	r4,fp
10107084:	1023883a 	mov	r17,r2
10107088:	0107d280 	call	10107d28 <__multadd>
1010708c:	1029883a 	mov	r20,r2
10107090:	b027883a 	mov	r19,r22
10107094:	003fc006 	br	10106f98 <__alt_data_end+0xfffe6f98>
10107098:	9011883a 	mov	r8,r18
1010709c:	00800e0e 	bge	zero,r2,101070d8 <_dtoa_r+0xf70>
101070a0:	800b883a 	mov	r5,r16
101070a4:	01800044 	movi	r6,1
101070a8:	e009883a 	mov	r4,fp
101070ac:	da001715 	stw	r8,92(sp)
101070b0:	01083d80 	call	101083d8 <__lshift>
101070b4:	a80b883a 	mov	r5,r21
101070b8:	1009883a 	mov	r4,r2
101070bc:	1021883a 	mov	r16,r2
101070c0:	01085200 	call	10108520 <__mcmp>
101070c4:	da001717 	ldw	r8,92(sp)
101070c8:	0081960e 	bge	zero,r2,10107724 <_dtoa_r+0x15bc>
101070cc:	00800e44 	movi	r2,57
101070d0:	40817026 	beq	r8,r2,10107694 <_dtoa_r+0x152c>
101070d4:	ba000c44 	addi	r8,r23,49
101070d8:	8825883a 	mov	r18,r17
101070dc:	9dc00044 	addi	r23,r19,1
101070e0:	9a000005 	stb	r8,0(r19)
101070e4:	a023883a 	mov	r17,r20
101070e8:	dc000915 	stw	r16,36(sp)
101070ec:	003f2406 	br	10106d80 <__alt_data_end+0xfffe6d80>
101070f0:	00800e44 	movi	r2,57
101070f4:	9011883a 	mov	r8,r18
101070f8:	90816626 	beq	r18,r2,10107694 <_dtoa_r+0x152c>
101070fc:	05bff516 	blt	zero,r22,101070d4 <__alt_data_end+0xfffe70d4>
10107100:	003ff506 	br	101070d8 <__alt_data_end+0xfffe70d8>
10107104:	0107d280 	call	10107d28 <__multadd>
10107108:	1023883a 	mov	r17,r2
1010710c:	1029883a 	mov	r20,r2
10107110:	003fdf06 	br	10107090 <__alt_data_end+0xfffe7090>
10107114:	e009883a 	mov	r4,fp
10107118:	0107d000 	call	10107d00 <_Bfree>
1010711c:	00800044 	movi	r2,1
10107120:	003fbc06 	br	10107014 <__alt_data_end+0xfffe7014>
10107124:	a80b883a 	mov	r5,r21
10107128:	8009883a 	mov	r4,r16
1010712c:	01085200 	call	10108520 <__mcmp>
10107130:	103edb0e 	bge	r2,zero,10106ca0 <__alt_data_end+0xfffe6ca0>
10107134:	800b883a 	mov	r5,r16
10107138:	000f883a 	mov	r7,zero
1010713c:	01800284 	movi	r6,10
10107140:	e009883a 	mov	r4,fp
10107144:	0107d280 	call	10107d28 <__multadd>
10107148:	1021883a 	mov	r16,r2
1010714c:	d8800517 	ldw	r2,20(sp)
10107150:	d8c00b17 	ldw	r3,44(sp)
10107154:	10bfffc4 	addi	r2,r2,-1
10107158:	d8800515 	stw	r2,20(sp)
1010715c:	183f761e 	bne	r3,zero,10106f38 <__alt_data_end+0xfffe6f38>
10107160:	d9000c17 	ldw	r4,48(sp)
10107164:	0101730e 	bge	zero,r4,10107734 <_dtoa_r+0x15cc>
10107168:	d9000615 	stw	r4,24(sp)
1010716c:	003ed006 	br	10106cb0 <__alt_data_end+0xfffe6cb0>
10107170:	00800084 	movi	r2,2
10107174:	3081861e 	bne	r6,r2,10107790 <_dtoa_r+0x1628>
10107178:	d8000b15 	stw	zero,44(sp)
1010717c:	003f3c06 	br	10106e70 <__alt_data_end+0xfffe6e70>
10107180:	dc000917 	ldw	r16,36(sp)
10107184:	003e9206 	br	10106bd0 <__alt_data_end+0xfffe6bd0>
10107188:	d9c00317 	ldw	r7,12(sp)
1010718c:	00800084 	movi	r2,2
10107190:	11fec50e 	bge	r2,r7,10106ca8 <__alt_data_end+0xfffe6ca8>
10107194:	d9000617 	ldw	r4,24(sp)
10107198:	20013c1e 	bne	r4,zero,1010768c <_dtoa_r+0x1524>
1010719c:	a80b883a 	mov	r5,r21
101071a0:	000f883a 	mov	r7,zero
101071a4:	01800144 	movi	r6,5
101071a8:	e009883a 	mov	r4,fp
101071ac:	0107d280 	call	10107d28 <__multadd>
101071b0:	100b883a 	mov	r5,r2
101071b4:	8009883a 	mov	r4,r16
101071b8:	102b883a 	mov	r21,r2
101071bc:	01085200 	call	10108520 <__mcmp>
101071c0:	dc000915 	stw	r16,36(sp)
101071c4:	00bf410e 	bge	zero,r2,10106ecc <__alt_data_end+0xfffe6ecc>
101071c8:	d9c00717 	ldw	r7,28(sp)
101071cc:	00800c44 	movi	r2,49
101071d0:	38800005 	stb	r2,0(r7)
101071d4:	d8800517 	ldw	r2,20(sp)
101071d8:	3dc00044 	addi	r23,r7,1
101071dc:	10800044 	addi	r2,r2,1
101071e0:	d8800515 	stw	r2,20(sp)
101071e4:	003f3d06 	br	10106edc <__alt_data_end+0xfffe6edc>
101071e8:	d9800517 	ldw	r6,20(sp)
101071ec:	d9c00717 	ldw	r7,28(sp)
101071f0:	00800c44 	movi	r2,49
101071f4:	31800044 	addi	r6,r6,1
101071f8:	d9800515 	stw	r6,20(sp)
101071fc:	38800005 	stb	r2,0(r7)
10107200:	003edf06 	br	10106d80 <__alt_data_end+0xfffe6d80>
10107204:	d8000b15 	stw	zero,44(sp)
10107208:	003c9f06 	br	10106488 <__alt_data_end+0xfffe6488>
1010720c:	903e7e1e 	bne	r18,zero,10106c08 <__alt_data_end+0xfffe6c08>
10107210:	00800434 	movhi	r2,16
10107214:	10bfffc4 	addi	r2,r2,-1
10107218:	9884703a 	and	r2,r19,r2
1010721c:	1000ea1e 	bne	r2,zero,101075c8 <_dtoa_r+0x1460>
10107220:	9cdffc2c 	andhi	r19,r19,32752
10107224:	9800e826 	beq	r19,zero,101075c8 <_dtoa_r+0x1460>
10107228:	d9c00817 	ldw	r7,32(sp)
1010722c:	b5800044 	addi	r22,r22,1
10107230:	04c00044 	movi	r19,1
10107234:	39c00044 	addi	r7,r7,1
10107238:	d9c00815 	stw	r7,32(sp)
1010723c:	d8800d17 	ldw	r2,52(sp)
10107240:	103e721e 	bne	r2,zero,10106c0c <__alt_data_end+0xfffe6c0c>
10107244:	00800044 	movi	r2,1
10107248:	003e7906 	br	10106c30 <__alt_data_end+0xfffe6c30>
1010724c:	8009883a 	mov	r4,r16
10107250:	010e59c0 	call	1010e59c <__floatsidf>
10107254:	d9800f17 	ldw	r6,60(sp)
10107258:	d9c01017 	ldw	r7,64(sp)
1010725c:	1009883a 	mov	r4,r2
10107260:	180b883a 	mov	r5,r3
10107264:	010d5080 	call	1010d508 <__muldf3>
10107268:	000d883a 	mov	r6,zero
1010726c:	01d00734 	movhi	r7,16412
10107270:	1009883a 	mov	r4,r2
10107274:	180b883a 	mov	r5,r3
10107278:	010c11c0 	call	1010c11c <__adddf3>
1010727c:	047f3034 	movhi	r17,64704
10107280:	1021883a 	mov	r16,r2
10107284:	1c63883a 	add	r17,r3,r17
10107288:	d9000f17 	ldw	r4,60(sp)
1010728c:	d9401017 	ldw	r5,64(sp)
10107290:	000d883a 	mov	r6,zero
10107294:	01d00534 	movhi	r7,16404
10107298:	010dc200 	call	1010dc20 <__subdf3>
1010729c:	800d883a 	mov	r6,r16
101072a0:	880f883a 	mov	r7,r17
101072a4:	1009883a 	mov	r4,r2
101072a8:	180b883a 	mov	r5,r3
101072ac:	102b883a 	mov	r21,r2
101072b0:	1829883a 	mov	r20,r3
101072b4:	010d3380 	call	1010d338 <__gedf2>
101072b8:	00806c16 	blt	zero,r2,1010746c <_dtoa_r+0x1304>
101072bc:	89e0003c 	xorhi	r7,r17,32768
101072c0:	800d883a 	mov	r6,r16
101072c4:	a809883a 	mov	r4,r21
101072c8:	a00b883a 	mov	r5,r20
101072cc:	010d4140 	call	1010d414 <__ledf2>
101072d0:	103d7e0e 	bge	r2,zero,101068cc <__alt_data_end+0xfffe68cc>
101072d4:	002b883a 	mov	r21,zero
101072d8:	0023883a 	mov	r17,zero
101072dc:	003efb06 	br	10106ecc <__alt_data_end+0xfffe6ecc>
101072e0:	d8800717 	ldw	r2,28(sp)
101072e4:	003bd006 	br	10106228 <__alt_data_end+0xfffe6228>
101072e8:	d9000a17 	ldw	r4,40(sp)
101072ec:	d9800d17 	ldw	r6,52(sp)
101072f0:	dd400a15 	stw	r21,40(sp)
101072f4:	a905c83a 	sub	r2,r21,r4
101072f8:	308d883a 	add	r6,r6,r2
101072fc:	d9800d15 	stw	r6,52(sp)
10107300:	002b883a 	mov	r21,zero
10107304:	003e0606 	br	10106b20 <__alt_data_end+0xfffe6b20>
10107308:	9023883a 	mov	r17,r18
1010730c:	9829883a 	mov	r20,r19
10107310:	04000084 	movi	r16,2
10107314:	003c9206 	br	10106560 <__alt_data_end+0xfffe6560>
10107318:	04000044 	movi	r16,1
1010731c:	dc000c15 	stw	r16,48(sp)
10107320:	dc000615 	stw	r16,24(sp)
10107324:	dc002215 	stw	r16,136(sp)
10107328:	e0001115 	stw	zero,68(fp)
1010732c:	000b883a 	mov	r5,zero
10107330:	003c6906 	br	101064d8 <__alt_data_end+0xfffe64d8>
10107334:	3021883a 	mov	r16,r6
10107338:	003ffb06 	br	10107328 <__alt_data_end+0xfffe7328>
1010733c:	1000021e 	bne	r2,zero,10107348 <_dtoa_r+0x11e0>
10107340:	4200004c 	andi	r8,r8,1
10107344:	403e7d1e 	bne	r8,zero,10106d3c <__alt_data_end+0xfffe6d3c>
10107348:	01000c04 	movi	r4,48
1010734c:	00000106 	br	10107354 <_dtoa_r+0x11ec>
10107350:	102f883a 	mov	r23,r2
10107354:	b8bfffc4 	addi	r2,r23,-1
10107358:	10c00007 	ldb	r3,0(r2)
1010735c:	193ffc26 	beq	r3,r4,10107350 <__alt_data_end+0xfffe7350>
10107360:	003e8706 	br	10106d80 <__alt_data_end+0xfffe6d80>
10107364:	d8800517 	ldw	r2,20(sp)
10107368:	00a3c83a 	sub	r17,zero,r2
1010736c:	8800a426 	beq	r17,zero,10107600 <_dtoa_r+0x1498>
10107370:	888003cc 	andi	r2,r17,15
10107374:	100490fa 	slli	r2,r2,3
10107378:	00c40474 	movhi	r3,4113
1010737c:	18c5d004 	addi	r3,r3,5952
10107380:	1885883a 	add	r2,r3,r2
10107384:	11800017 	ldw	r6,0(r2)
10107388:	11c00117 	ldw	r7,4(r2)
1010738c:	9009883a 	mov	r4,r18
10107390:	980b883a 	mov	r5,r19
10107394:	8823d13a 	srai	r17,r17,4
10107398:	010d5080 	call	1010d508 <__muldf3>
1010739c:	d8800f15 	stw	r2,60(sp)
101073a0:	d8c01015 	stw	r3,64(sp)
101073a4:	8800e826 	beq	r17,zero,10107748 <_dtoa_r+0x15e0>
101073a8:	05040474 	movhi	r20,4113
101073ac:	a505c604 	addi	r20,r20,5912
101073b0:	04000084 	movi	r16,2
101073b4:	8980004c 	andi	r6,r17,1
101073b8:	1009883a 	mov	r4,r2
101073bc:	8823d07a 	srai	r17,r17,1
101073c0:	180b883a 	mov	r5,r3
101073c4:	30000426 	beq	r6,zero,101073d8 <_dtoa_r+0x1270>
101073c8:	a1800017 	ldw	r6,0(r20)
101073cc:	a1c00117 	ldw	r7,4(r20)
101073d0:	84000044 	addi	r16,r16,1
101073d4:	010d5080 	call	1010d508 <__muldf3>
101073d8:	a5000204 	addi	r20,r20,8
101073dc:	883ff51e 	bne	r17,zero,101073b4 <__alt_data_end+0xfffe73b4>
101073e0:	d8800f15 	stw	r2,60(sp)
101073e4:	d8c01015 	stw	r3,64(sp)
101073e8:	003c7606 	br	101065c4 <__alt_data_end+0xfffe65c4>
101073ec:	00c00c04 	movi	r3,48
101073f0:	10c00005 	stb	r3,0(r2)
101073f4:	d8c00517 	ldw	r3,20(sp)
101073f8:	bd3fffc3 	ldbu	r20,-1(r23)
101073fc:	18c00044 	addi	r3,r3,1
10107400:	d8c00515 	stw	r3,20(sp)
10107404:	003db906 	br	10106aec <__alt_data_end+0xfffe6aec>
10107408:	89400117 	ldw	r5,4(r17)
1010740c:	e009883a 	mov	r4,fp
10107410:	0107c580 	call	10107c58 <_Balloc>
10107414:	89800417 	ldw	r6,16(r17)
10107418:	89400304 	addi	r5,r17,12
1010741c:	11000304 	addi	r4,r2,12
10107420:	31800084 	addi	r6,r6,2
10107424:	318d883a 	add	r6,r6,r6
10107428:	318d883a 	add	r6,r6,r6
1010742c:	1027883a 	mov	r19,r2
10107430:	0107b100 	call	10107b10 <memcpy>
10107434:	01800044 	movi	r6,1
10107438:	980b883a 	mov	r5,r19
1010743c:	e009883a 	mov	r4,fp
10107440:	01083d80 	call	101083d8 <__lshift>
10107444:	1029883a 	mov	r20,r2
10107448:	003ecc06 	br	10106f7c <__alt_data_end+0xfffe6f7c>
1010744c:	00800e44 	movi	r2,57
10107450:	90809026 	beq	r18,r2,10107694 <_dtoa_r+0x152c>
10107454:	92000044 	addi	r8,r18,1
10107458:	003f1f06 	br	101070d8 <__alt_data_end+0xfffe70d8>
1010745c:	9011883a 	mov	r8,r18
10107460:	8825883a 	mov	r18,r17
10107464:	a023883a 	mov	r17,r20
10107468:	003e2906 	br	10106d10 <__alt_data_end+0xfffe6d10>
1010746c:	002b883a 	mov	r21,zero
10107470:	0023883a 	mov	r17,zero
10107474:	003f5406 	br	101071c8 <__alt_data_end+0xfffe71c8>
10107478:	61bfffc4 	addi	r6,r12,-1
1010747c:	300490fa 	slli	r2,r6,3
10107480:	00c40474 	movhi	r3,4113
10107484:	18c5d004 	addi	r3,r3,5952
10107488:	1885883a 	add	r2,r3,r2
1010748c:	11000017 	ldw	r4,0(r2)
10107490:	11400117 	ldw	r5,4(r2)
10107494:	d8800717 	ldw	r2,28(sp)
10107498:	880f883a 	mov	r7,r17
1010749c:	d9801215 	stw	r6,72(sp)
101074a0:	800d883a 	mov	r6,r16
101074a4:	db001615 	stw	r12,88(sp)
101074a8:	15c00044 	addi	r23,r2,1
101074ac:	010d5080 	call	1010d508 <__muldf3>
101074b0:	d9401017 	ldw	r5,64(sp)
101074b4:	d9000f17 	ldw	r4,60(sp)
101074b8:	d8c01515 	stw	r3,84(sp)
101074bc:	d8801415 	stw	r2,80(sp)
101074c0:	010e51c0 	call	1010e51c <__fixdfsi>
101074c4:	1009883a 	mov	r4,r2
101074c8:	1021883a 	mov	r16,r2
101074cc:	010e59c0 	call	1010e59c <__floatsidf>
101074d0:	d9000f17 	ldw	r4,60(sp)
101074d4:	d9401017 	ldw	r5,64(sp)
101074d8:	100d883a 	mov	r6,r2
101074dc:	180f883a 	mov	r7,r3
101074e0:	010dc200 	call	1010dc20 <__subdf3>
101074e4:	1829883a 	mov	r20,r3
101074e8:	d8c00717 	ldw	r3,28(sp)
101074ec:	84000c04 	addi	r16,r16,48
101074f0:	1023883a 	mov	r17,r2
101074f4:	1c000005 	stb	r16,0(r3)
101074f8:	db001617 	ldw	r12,88(sp)
101074fc:	00800044 	movi	r2,1
10107500:	60802226 	beq	r12,r2,1010758c <_dtoa_r+0x1424>
10107504:	d9c00717 	ldw	r7,28(sp)
10107508:	8805883a 	mov	r2,r17
1010750c:	b82b883a 	mov	r21,r23
10107510:	3b19883a 	add	r12,r7,r12
10107514:	6023883a 	mov	r17,r12
10107518:	a007883a 	mov	r3,r20
1010751c:	dc800f15 	stw	r18,60(sp)
10107520:	000d883a 	mov	r6,zero
10107524:	01d00934 	movhi	r7,16420
10107528:	1009883a 	mov	r4,r2
1010752c:	180b883a 	mov	r5,r3
10107530:	010d5080 	call	1010d508 <__muldf3>
10107534:	180b883a 	mov	r5,r3
10107538:	1009883a 	mov	r4,r2
1010753c:	1829883a 	mov	r20,r3
10107540:	1025883a 	mov	r18,r2
10107544:	010e51c0 	call	1010e51c <__fixdfsi>
10107548:	1009883a 	mov	r4,r2
1010754c:	1021883a 	mov	r16,r2
10107550:	010e59c0 	call	1010e59c <__floatsidf>
10107554:	100d883a 	mov	r6,r2
10107558:	180f883a 	mov	r7,r3
1010755c:	9009883a 	mov	r4,r18
10107560:	a00b883a 	mov	r5,r20
10107564:	84000c04 	addi	r16,r16,48
10107568:	010dc200 	call	1010dc20 <__subdf3>
1010756c:	ad400044 	addi	r21,r21,1
10107570:	ac3fffc5 	stb	r16,-1(r21)
10107574:	ac7fea1e 	bne	r21,r17,10107520 <__alt_data_end+0xfffe7520>
10107578:	1023883a 	mov	r17,r2
1010757c:	d8801217 	ldw	r2,72(sp)
10107580:	dc800f17 	ldw	r18,60(sp)
10107584:	1829883a 	mov	r20,r3
10107588:	b8af883a 	add	r23,r23,r2
1010758c:	d9001417 	ldw	r4,80(sp)
10107590:	d9401517 	ldw	r5,84(sp)
10107594:	000d883a 	mov	r6,zero
10107598:	01cff834 	movhi	r7,16352
1010759c:	010c11c0 	call	1010c11c <__adddf3>
101075a0:	880d883a 	mov	r6,r17
101075a4:	a00f883a 	mov	r7,r20
101075a8:	1009883a 	mov	r4,r2
101075ac:	180b883a 	mov	r5,r3
101075b0:	010d4140 	call	1010d414 <__ledf2>
101075b4:	10003e0e 	bge	r2,zero,101076b0 <_dtoa_r+0x1548>
101075b8:	d9001317 	ldw	r4,76(sp)
101075bc:	bd3fffc3 	ldbu	r20,-1(r23)
101075c0:	d9000515 	stw	r4,20(sp)
101075c4:	003d3b06 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
101075c8:	0027883a 	mov	r19,zero
101075cc:	003f1b06 	br	1010723c <__alt_data_end+0xfffe723c>
101075d0:	d8800817 	ldw	r2,32(sp)
101075d4:	11e9c83a 	sub	r20,r2,r7
101075d8:	0005883a 	mov	r2,zero
101075dc:	003d5406 	br	10106b30 <__alt_data_end+0xfffe6b30>
101075e0:	00800044 	movi	r2,1
101075e4:	003dc706 	br	10106d04 <__alt_data_end+0xfffe6d04>
101075e8:	d8c00217 	ldw	r3,8(sp)
101075ec:	00800d84 	movi	r2,54
101075f0:	dd400a17 	ldw	r21,40(sp)
101075f4:	10c5c83a 	sub	r2,r2,r3
101075f8:	dd000817 	ldw	r20,32(sp)
101075fc:	003d4c06 	br	10106b30 <__alt_data_end+0xfffe6b30>
10107600:	dc800f15 	stw	r18,60(sp)
10107604:	dcc01015 	stw	r19,64(sp)
10107608:	04000084 	movi	r16,2
1010760c:	003bed06 	br	101065c4 <__alt_data_end+0xfffe65c4>
10107610:	d9000617 	ldw	r4,24(sp)
10107614:	203f0d26 	beq	r4,zero,1010724c <__alt_data_end+0xfffe724c>
10107618:	d9800c17 	ldw	r6,48(sp)
1010761c:	01bcab0e 	bge	zero,r6,101068cc <__alt_data_end+0xfffe68cc>
10107620:	d9401017 	ldw	r5,64(sp)
10107624:	d9000f17 	ldw	r4,60(sp)
10107628:	000d883a 	mov	r6,zero
1010762c:	01d00934 	movhi	r7,16420
10107630:	010d5080 	call	1010d508 <__muldf3>
10107634:	81000044 	addi	r4,r16,1
10107638:	d8800f15 	stw	r2,60(sp)
1010763c:	d8c01015 	stw	r3,64(sp)
10107640:	010e59c0 	call	1010e59c <__floatsidf>
10107644:	d9800f17 	ldw	r6,60(sp)
10107648:	d9c01017 	ldw	r7,64(sp)
1010764c:	1009883a 	mov	r4,r2
10107650:	180b883a 	mov	r5,r3
10107654:	010d5080 	call	1010d508 <__muldf3>
10107658:	01d00734 	movhi	r7,16412
1010765c:	000d883a 	mov	r6,zero
10107660:	1009883a 	mov	r4,r2
10107664:	180b883a 	mov	r5,r3
10107668:	010c11c0 	call	1010c11c <__adddf3>
1010766c:	d9c00517 	ldw	r7,20(sp)
10107670:	047f3034 	movhi	r17,64704
10107674:	1021883a 	mov	r16,r2
10107678:	39ffffc4 	addi	r7,r7,-1
1010767c:	d9c01315 	stw	r7,76(sp)
10107680:	1c63883a 	add	r17,r3,r17
10107684:	db000c17 	ldw	r12,48(sp)
10107688:	003bea06 	br	10106634 <__alt_data_end+0xfffe6634>
1010768c:	dc000915 	stw	r16,36(sp)
10107690:	003e0e06 	br	10106ecc <__alt_data_end+0xfffe6ecc>
10107694:	01000e44 	movi	r4,57
10107698:	8825883a 	mov	r18,r17
1010769c:	9dc00044 	addi	r23,r19,1
101076a0:	99000005 	stb	r4,0(r19)
101076a4:	a023883a 	mov	r17,r20
101076a8:	dc000915 	stw	r16,36(sp)
101076ac:	003da406 	br	10106d40 <__alt_data_end+0xfffe6d40>
101076b0:	d9801417 	ldw	r6,80(sp)
101076b4:	d9c01517 	ldw	r7,84(sp)
101076b8:	0009883a 	mov	r4,zero
101076bc:	014ff834 	movhi	r5,16352
101076c0:	010dc200 	call	1010dc20 <__subdf3>
101076c4:	880d883a 	mov	r6,r17
101076c8:	a00f883a 	mov	r7,r20
101076cc:	1009883a 	mov	r4,r2
101076d0:	180b883a 	mov	r5,r3
101076d4:	010d3380 	call	1010d338 <__gedf2>
101076d8:	00bc7c0e 	bge	zero,r2,101068cc <__alt_data_end+0xfffe68cc>
101076dc:	01000c04 	movi	r4,48
101076e0:	00000106 	br	101076e8 <_dtoa_r+0x1580>
101076e4:	102f883a 	mov	r23,r2
101076e8:	b8bfffc4 	addi	r2,r23,-1
101076ec:	10c00007 	ldb	r3,0(r2)
101076f0:	193ffc26 	beq	r3,r4,101076e4 <__alt_data_end+0xfffe76e4>
101076f4:	d9801317 	ldw	r6,76(sp)
101076f8:	d9800515 	stw	r6,20(sp)
101076fc:	003c4406 	br	10106810 <__alt_data_end+0xfffe6810>
10107700:	d9801317 	ldw	r6,76(sp)
10107704:	d9800515 	stw	r6,20(sp)
10107708:	003cea06 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
1010770c:	dd800f17 	ldw	r22,60(sp)
10107710:	dcc01017 	ldw	r19,64(sp)
10107714:	dc801217 	ldw	r18,72(sp)
10107718:	003c6c06 	br	101068cc <__alt_data_end+0xfffe68cc>
1010771c:	903e031e 	bne	r18,zero,10106f2c <__alt_data_end+0xfffe6f2c>
10107720:	003ebb06 	br	10107210 <__alt_data_end+0xfffe7210>
10107724:	103e6c1e 	bne	r2,zero,101070d8 <__alt_data_end+0xfffe70d8>
10107728:	4080004c 	andi	r2,r8,1
1010772c:	103e6a26 	beq	r2,zero,101070d8 <__alt_data_end+0xfffe70d8>
10107730:	003e6606 	br	101070cc <__alt_data_end+0xfffe70cc>
10107734:	d8c00317 	ldw	r3,12(sp)
10107738:	00800084 	movi	r2,2
1010773c:	10c02916 	blt	r2,r3,101077e4 <_dtoa_r+0x167c>
10107740:	d9000c17 	ldw	r4,48(sp)
10107744:	003e8806 	br	10107168 <__alt_data_end+0xfffe7168>
10107748:	04000084 	movi	r16,2
1010774c:	003b9d06 	br	101065c4 <__alt_data_end+0xfffe65c4>
10107750:	d9001317 	ldw	r4,76(sp)
10107754:	d9000515 	stw	r4,20(sp)
10107758:	003cd606 	br	10106ab4 <__alt_data_end+0xfffe6ab4>
1010775c:	d8801317 	ldw	r2,76(sp)
10107760:	d8800515 	stw	r2,20(sp)
10107764:	003c2a06 	br	10106810 <__alt_data_end+0xfffe6810>
10107768:	d9800317 	ldw	r6,12(sp)
1010776c:	00800084 	movi	r2,2
10107770:	11801516 	blt	r2,r6,101077c8 <_dtoa_r+0x1660>
10107774:	d9c00c17 	ldw	r7,48(sp)
10107778:	d9c00615 	stw	r7,24(sp)
1010777c:	003df706 	br	10106f5c <__alt_data_end+0xfffe6f5c>
10107780:	193d3926 	beq	r3,r4,10106c68 <__alt_data_end+0xfffe6c68>
10107784:	00c00f04 	movi	r3,60
10107788:	1885c83a 	sub	r2,r3,r2
1010778c:	003ddf06 	br	10106f0c <__alt_data_end+0xfffe6f0c>
10107790:	e009883a 	mov	r4,fp
10107794:	e0001115 	stw	zero,68(fp)
10107798:	000b883a 	mov	r5,zero
1010779c:	0107c580 	call	10107c58 <_Balloc>
101077a0:	d8800715 	stw	r2,28(sp)
101077a4:	d8c00717 	ldw	r3,28(sp)
101077a8:	00bfffc4 	movi	r2,-1
101077ac:	01000044 	movi	r4,1
101077b0:	d8800c15 	stw	r2,48(sp)
101077b4:	e0c01015 	stw	r3,64(fp)
101077b8:	d9000b15 	stw	r4,44(sp)
101077bc:	d8800615 	stw	r2,24(sp)
101077c0:	d8002215 	stw	zero,136(sp)
101077c4:	003c4106 	br	101068cc <__alt_data_end+0xfffe68cc>
101077c8:	d8c00c17 	ldw	r3,48(sp)
101077cc:	d8c00615 	stw	r3,24(sp)
101077d0:	003e7006 	br	10107194 <__alt_data_end+0xfffe7194>
101077d4:	04400044 	movi	r17,1
101077d8:	003b2006 	br	1010645c <__alt_data_end+0xfffe645c>
101077dc:	000b883a 	mov	r5,zero
101077e0:	003b3d06 	br	101064d8 <__alt_data_end+0xfffe64d8>
101077e4:	d8800c17 	ldw	r2,48(sp)
101077e8:	d8800615 	stw	r2,24(sp)
101077ec:	003e6906 	br	10107194 <__alt_data_end+0xfffe7194>

101077f0 <__sflags>:
101077f0:	28800007 	ldb	r2,0(r5)
101077f4:	00c01c84 	movi	r3,114
101077f8:	10c02426 	beq	r2,r3,1010788c <__sflags+0x9c>
101077fc:	00c01dc4 	movi	r3,119
10107800:	10c01e26 	beq	r2,r3,1010787c <__sflags+0x8c>
10107804:	00c01844 	movi	r3,97
10107808:	10c00426 	beq	r2,r3,1010781c <__sflags+0x2c>
1010780c:	00800584 	movi	r2,22
10107810:	20800015 	stw	r2,0(r4)
10107814:	0005883a 	mov	r2,zero
10107818:	f800283a 	ret
1010781c:	02c08204 	movi	r11,520
10107820:	01000044 	movi	r4,1
10107824:	00804204 	movi	r2,264
10107828:	01c00ac4 	movi	r7,43
1010782c:	02bff8c4 	movi	r10,-29
10107830:	027fff04 	movi	r9,-4
10107834:	02001e04 	movi	r8,120
10107838:	29400044 	addi	r5,r5,1
1010783c:	28c00007 	ldb	r3,0(r5)
10107840:	18000626 	beq	r3,zero,1010785c <__sflags+0x6c>
10107844:	19c00826 	beq	r3,r7,10107868 <__sflags+0x78>
10107848:	1a3ffb1e 	bne	r3,r8,10107838 <__alt_data_end+0xfffe7838>
1010784c:	29400044 	addi	r5,r5,1
10107850:	28c00007 	ldb	r3,0(r5)
10107854:	21020014 	ori	r4,r4,2048
10107858:	183ffa1e 	bne	r3,zero,10107844 <__alt_data_end+0xfffe7844>
1010785c:	22c8b03a 	or	r4,r4,r11
10107860:	31000015 	stw	r4,0(r6)
10107864:	f800283a 	ret
10107868:	1284703a 	and	r2,r2,r10
1010786c:	2248703a 	and	r4,r4,r9
10107870:	10800414 	ori	r2,r2,16
10107874:	21000094 	ori	r4,r4,2
10107878:	003fef06 	br	10107838 <__alt_data_end+0xfffe7838>
1010787c:	02c18004 	movi	r11,1536
10107880:	01000044 	movi	r4,1
10107884:	00800204 	movi	r2,8
10107888:	003fe706 	br	10107828 <__alt_data_end+0xfffe7828>
1010788c:	0017883a 	mov	r11,zero
10107890:	0009883a 	mov	r4,zero
10107894:	00800104 	movi	r2,4
10107898:	003fe306 	br	10107828 <__alt_data_end+0xfffe7828>

1010789c <_isatty_r>:
1010789c:	defffd04 	addi	sp,sp,-12
101078a0:	dc000015 	stw	r16,0(sp)
101078a4:	04040474 	movhi	r16,4113
101078a8:	dc400115 	stw	r17,4(sp)
101078ac:	84140804 	addi	r16,r16,20512
101078b0:	2023883a 	mov	r17,r4
101078b4:	2809883a 	mov	r4,r5
101078b8:	dfc00215 	stw	ra,8(sp)
101078bc:	80000015 	stw	zero,0(r16)
101078c0:	010ea200 	call	1010ea20 <isatty>
101078c4:	00ffffc4 	movi	r3,-1
101078c8:	10c00526 	beq	r2,r3,101078e0 <_isatty_r+0x44>
101078cc:	dfc00217 	ldw	ra,8(sp)
101078d0:	dc400117 	ldw	r17,4(sp)
101078d4:	dc000017 	ldw	r16,0(sp)
101078d8:	dec00304 	addi	sp,sp,12
101078dc:	f800283a 	ret
101078e0:	80c00017 	ldw	r3,0(r16)
101078e4:	183ff926 	beq	r3,zero,101078cc <__alt_data_end+0xfffe78cc>
101078e8:	88c00015 	stw	r3,0(r17)
101078ec:	003ff706 	br	101078cc <__alt_data_end+0xfffe78cc>

101078f0 <_setlocale_r>:
101078f0:	30001b26 	beq	r6,zero,10107960 <_setlocale_r+0x70>
101078f4:	01440474 	movhi	r5,4113
101078f8:	defffe04 	addi	sp,sp,-8
101078fc:	2945b604 	addi	r5,r5,5848
10107900:	3009883a 	mov	r4,r6
10107904:	dc000015 	stw	r16,0(sp)
10107908:	dfc00115 	stw	ra,4(sp)
1010790c:	3021883a 	mov	r16,r6
10107910:	0108d280 	call	10108d28 <strcmp>
10107914:	1000061e 	bne	r2,zero,10107930 <_setlocale_r+0x40>
10107918:	00840474 	movhi	r2,4113
1010791c:	10859804 	addi	r2,r2,5728
10107920:	dfc00117 	ldw	ra,4(sp)
10107924:	dc000017 	ldw	r16,0(sp)
10107928:	dec00204 	addi	sp,sp,8
1010792c:	f800283a 	ret
10107930:	01440474 	movhi	r5,4113
10107934:	29459804 	addi	r5,r5,5728
10107938:	8009883a 	mov	r4,r16
1010793c:	0108d280 	call	10108d28 <strcmp>
10107940:	103ff526 	beq	r2,zero,10107918 <__alt_data_end+0xfffe7918>
10107944:	01440474 	movhi	r5,4113
10107948:	2945a104 	addi	r5,r5,5764
1010794c:	8009883a 	mov	r4,r16
10107950:	0108d280 	call	10108d28 <strcmp>
10107954:	103ff026 	beq	r2,zero,10107918 <__alt_data_end+0xfffe7918>
10107958:	0005883a 	mov	r2,zero
1010795c:	003ff006 	br	10107920 <__alt_data_end+0xfffe7920>
10107960:	00840474 	movhi	r2,4113
10107964:	10859804 	addi	r2,r2,5728
10107968:	f800283a 	ret

1010796c <__locale_charset>:
1010796c:	00840474 	movhi	r2,4113
10107970:	10886d04 	addi	r2,r2,8628
10107974:	f800283a 	ret

10107978 <__locale_mb_cur_max>:
10107978:	00840474 	movhi	r2,4113
1010797c:	108d1304 	addi	r2,r2,13388
10107980:	10800017 	ldw	r2,0(r2)
10107984:	f800283a 	ret

10107988 <__locale_msgcharset>:
10107988:	00840474 	movhi	r2,4113
1010798c:	10886504 	addi	r2,r2,8596
10107990:	f800283a 	ret

10107994 <__locale_cjk_lang>:
10107994:	0005883a 	mov	r2,zero
10107998:	f800283a 	ret

1010799c <_localeconv_r>:
1010799c:	00840474 	movhi	r2,4113
101079a0:	10887504 	addi	r2,r2,8660
101079a4:	f800283a 	ret

101079a8 <setlocale>:
101079a8:	00840474 	movhi	r2,4113
101079ac:	108d1004 	addi	r2,r2,13376
101079b0:	280d883a 	mov	r6,r5
101079b4:	200b883a 	mov	r5,r4
101079b8:	11000017 	ldw	r4,0(r2)
101079bc:	01078f01 	jmpi	101078f0 <_setlocale_r>

101079c0 <localeconv>:
101079c0:	00840474 	movhi	r2,4113
101079c4:	10887504 	addi	r2,r2,8660
101079c8:	f800283a 	ret

101079cc <_lseek_r>:
101079cc:	defffd04 	addi	sp,sp,-12
101079d0:	2805883a 	mov	r2,r5
101079d4:	dc000015 	stw	r16,0(sp)
101079d8:	04040474 	movhi	r16,4113
101079dc:	dc400115 	stw	r17,4(sp)
101079e0:	300b883a 	mov	r5,r6
101079e4:	84140804 	addi	r16,r16,20512
101079e8:	2023883a 	mov	r17,r4
101079ec:	380d883a 	mov	r6,r7
101079f0:	1009883a 	mov	r4,r2
101079f4:	dfc00215 	stw	ra,8(sp)
101079f8:	80000015 	stw	zero,0(r16)
101079fc:	010ec000 	call	1010ec00 <lseek>
10107a00:	00ffffc4 	movi	r3,-1
10107a04:	10c00526 	beq	r2,r3,10107a1c <_lseek_r+0x50>
10107a08:	dfc00217 	ldw	ra,8(sp)
10107a0c:	dc400117 	ldw	r17,4(sp)
10107a10:	dc000017 	ldw	r16,0(sp)
10107a14:	dec00304 	addi	sp,sp,12
10107a18:	f800283a 	ret
10107a1c:	80c00017 	ldw	r3,0(r16)
10107a20:	183ff926 	beq	r3,zero,10107a08 <__alt_data_end+0xfffe7a08>
10107a24:	88c00015 	stw	r3,0(r17)
10107a28:	003ff706 	br	10107a08 <__alt_data_end+0xfffe7a08>

10107a2c <memchr>:
10107a2c:	208000cc 	andi	r2,r4,3
10107a30:	280f883a 	mov	r7,r5
10107a34:	10003426 	beq	r2,zero,10107b08 <memchr+0xdc>
10107a38:	30bfffc4 	addi	r2,r6,-1
10107a3c:	30001a26 	beq	r6,zero,10107aa8 <memchr+0x7c>
10107a40:	20c00003 	ldbu	r3,0(r4)
10107a44:	29803fcc 	andi	r6,r5,255
10107a48:	30c0051e 	bne	r6,r3,10107a60 <memchr+0x34>
10107a4c:	00001806 	br	10107ab0 <memchr+0x84>
10107a50:	10001526 	beq	r2,zero,10107aa8 <memchr+0x7c>
10107a54:	20c00003 	ldbu	r3,0(r4)
10107a58:	10bfffc4 	addi	r2,r2,-1
10107a5c:	30c01426 	beq	r6,r3,10107ab0 <memchr+0x84>
10107a60:	21000044 	addi	r4,r4,1
10107a64:	20c000cc 	andi	r3,r4,3
10107a68:	183ff91e 	bne	r3,zero,10107a50 <__alt_data_end+0xfffe7a50>
10107a6c:	020000c4 	movi	r8,3
10107a70:	40801136 	bltu	r8,r2,10107ab8 <memchr+0x8c>
10107a74:	10000c26 	beq	r2,zero,10107aa8 <memchr+0x7c>
10107a78:	20c00003 	ldbu	r3,0(r4)
10107a7c:	29403fcc 	andi	r5,r5,255
10107a80:	28c00b26 	beq	r5,r3,10107ab0 <memchr+0x84>
10107a84:	20c00044 	addi	r3,r4,1
10107a88:	39803fcc 	andi	r6,r7,255
10107a8c:	2089883a 	add	r4,r4,r2
10107a90:	00000306 	br	10107aa0 <memchr+0x74>
10107a94:	18c00044 	addi	r3,r3,1
10107a98:	197fffc3 	ldbu	r5,-1(r3)
10107a9c:	31400526 	beq	r6,r5,10107ab4 <memchr+0x88>
10107aa0:	1805883a 	mov	r2,r3
10107aa4:	20fffb1e 	bne	r4,r3,10107a94 <__alt_data_end+0xfffe7a94>
10107aa8:	0005883a 	mov	r2,zero
10107aac:	f800283a 	ret
10107ab0:	2005883a 	mov	r2,r4
10107ab4:	f800283a 	ret
10107ab8:	28c03fcc 	andi	r3,r5,255
10107abc:	1812923a 	slli	r9,r3,8
10107ac0:	02ffbff4 	movhi	r11,65279
10107ac4:	02a02074 	movhi	r10,32897
10107ac8:	48d2b03a 	or	r9,r9,r3
10107acc:	4806943a 	slli	r3,r9,16
10107ad0:	5affbfc4 	addi	r11,r11,-257
10107ad4:	52a02004 	addi	r10,r10,-32640
10107ad8:	48d2b03a 	or	r9,r9,r3
10107adc:	20c00017 	ldw	r3,0(r4)
10107ae0:	48c6f03a 	xor	r3,r9,r3
10107ae4:	1acd883a 	add	r6,r3,r11
10107ae8:	00c6303a 	nor	r3,zero,r3
10107aec:	30c6703a 	and	r3,r6,r3
10107af0:	1a86703a 	and	r3,r3,r10
10107af4:	183fe01e 	bne	r3,zero,10107a78 <__alt_data_end+0xfffe7a78>
10107af8:	10bfff04 	addi	r2,r2,-4
10107afc:	21000104 	addi	r4,r4,4
10107b00:	40bff636 	bltu	r8,r2,10107adc <__alt_data_end+0xfffe7adc>
10107b04:	003fdb06 	br	10107a74 <__alt_data_end+0xfffe7a74>
10107b08:	3005883a 	mov	r2,r6
10107b0c:	003fd706 	br	10107a6c <__alt_data_end+0xfffe7a6c>

10107b10 <memcpy>:
10107b10:	defffd04 	addi	sp,sp,-12
10107b14:	dfc00215 	stw	ra,8(sp)
10107b18:	dc400115 	stw	r17,4(sp)
10107b1c:	dc000015 	stw	r16,0(sp)
10107b20:	00c003c4 	movi	r3,15
10107b24:	2005883a 	mov	r2,r4
10107b28:	1980452e 	bgeu	r3,r6,10107c40 <memcpy+0x130>
10107b2c:	2906b03a 	or	r3,r5,r4
10107b30:	18c000cc 	andi	r3,r3,3
10107b34:	1800441e 	bne	r3,zero,10107c48 <memcpy+0x138>
10107b38:	347ffc04 	addi	r17,r6,-16
10107b3c:	8822d13a 	srli	r17,r17,4
10107b40:	28c00104 	addi	r3,r5,4
10107b44:	23400104 	addi	r13,r4,4
10107b48:	8820913a 	slli	r16,r17,4
10107b4c:	2b000204 	addi	r12,r5,8
10107b50:	22c00204 	addi	r11,r4,8
10107b54:	84000504 	addi	r16,r16,20
10107b58:	2a800304 	addi	r10,r5,12
10107b5c:	22400304 	addi	r9,r4,12
10107b60:	2c21883a 	add	r16,r5,r16
10107b64:	2811883a 	mov	r8,r5
10107b68:	200f883a 	mov	r7,r4
10107b6c:	41000017 	ldw	r4,0(r8)
10107b70:	1fc00017 	ldw	ra,0(r3)
10107b74:	63c00017 	ldw	r15,0(r12)
10107b78:	39000015 	stw	r4,0(r7)
10107b7c:	53800017 	ldw	r14,0(r10)
10107b80:	6fc00015 	stw	ra,0(r13)
10107b84:	5bc00015 	stw	r15,0(r11)
10107b88:	4b800015 	stw	r14,0(r9)
10107b8c:	18c00404 	addi	r3,r3,16
10107b90:	39c00404 	addi	r7,r7,16
10107b94:	42000404 	addi	r8,r8,16
10107b98:	6b400404 	addi	r13,r13,16
10107b9c:	63000404 	addi	r12,r12,16
10107ba0:	5ac00404 	addi	r11,r11,16
10107ba4:	52800404 	addi	r10,r10,16
10107ba8:	4a400404 	addi	r9,r9,16
10107bac:	1c3fef1e 	bne	r3,r16,10107b6c <__alt_data_end+0xfffe7b6c>
10107bb0:	89c00044 	addi	r7,r17,1
10107bb4:	380e913a 	slli	r7,r7,4
10107bb8:	310003cc 	andi	r4,r6,15
10107bbc:	02c000c4 	movi	r11,3
10107bc0:	11c7883a 	add	r3,r2,r7
10107bc4:	29cb883a 	add	r5,r5,r7
10107bc8:	5900212e 	bgeu	r11,r4,10107c50 <memcpy+0x140>
10107bcc:	1813883a 	mov	r9,r3
10107bd0:	2811883a 	mov	r8,r5
10107bd4:	200f883a 	mov	r7,r4
10107bd8:	42800017 	ldw	r10,0(r8)
10107bdc:	4a400104 	addi	r9,r9,4
10107be0:	39ffff04 	addi	r7,r7,-4
10107be4:	4abfff15 	stw	r10,-4(r9)
10107be8:	42000104 	addi	r8,r8,4
10107bec:	59fffa36 	bltu	r11,r7,10107bd8 <__alt_data_end+0xfffe7bd8>
10107bf0:	213fff04 	addi	r4,r4,-4
10107bf4:	2008d0ba 	srli	r4,r4,2
10107bf8:	318000cc 	andi	r6,r6,3
10107bfc:	21000044 	addi	r4,r4,1
10107c00:	2109883a 	add	r4,r4,r4
10107c04:	2109883a 	add	r4,r4,r4
10107c08:	1907883a 	add	r3,r3,r4
10107c0c:	290b883a 	add	r5,r5,r4
10107c10:	30000626 	beq	r6,zero,10107c2c <memcpy+0x11c>
10107c14:	198d883a 	add	r6,r3,r6
10107c18:	29c00003 	ldbu	r7,0(r5)
10107c1c:	18c00044 	addi	r3,r3,1
10107c20:	29400044 	addi	r5,r5,1
10107c24:	19ffffc5 	stb	r7,-1(r3)
10107c28:	19bffb1e 	bne	r3,r6,10107c18 <__alt_data_end+0xfffe7c18>
10107c2c:	dfc00217 	ldw	ra,8(sp)
10107c30:	dc400117 	ldw	r17,4(sp)
10107c34:	dc000017 	ldw	r16,0(sp)
10107c38:	dec00304 	addi	sp,sp,12
10107c3c:	f800283a 	ret
10107c40:	2007883a 	mov	r3,r4
10107c44:	003ff206 	br	10107c10 <__alt_data_end+0xfffe7c10>
10107c48:	2007883a 	mov	r3,r4
10107c4c:	003ff106 	br	10107c14 <__alt_data_end+0xfffe7c14>
10107c50:	200d883a 	mov	r6,r4
10107c54:	003fee06 	br	10107c10 <__alt_data_end+0xfffe7c10>

10107c58 <_Balloc>:
10107c58:	20801317 	ldw	r2,76(r4)
10107c5c:	defffc04 	addi	sp,sp,-16
10107c60:	dc400115 	stw	r17,4(sp)
10107c64:	dc000015 	stw	r16,0(sp)
10107c68:	dfc00315 	stw	ra,12(sp)
10107c6c:	dc800215 	stw	r18,8(sp)
10107c70:	2023883a 	mov	r17,r4
10107c74:	2821883a 	mov	r16,r5
10107c78:	10000f26 	beq	r2,zero,10107cb8 <_Balloc+0x60>
10107c7c:	8407883a 	add	r3,r16,r16
10107c80:	18c7883a 	add	r3,r3,r3
10107c84:	10c7883a 	add	r3,r2,r3
10107c88:	18800017 	ldw	r2,0(r3)
10107c8c:	10001126 	beq	r2,zero,10107cd4 <_Balloc+0x7c>
10107c90:	11000017 	ldw	r4,0(r2)
10107c94:	19000015 	stw	r4,0(r3)
10107c98:	10000415 	stw	zero,16(r2)
10107c9c:	10000315 	stw	zero,12(r2)
10107ca0:	dfc00317 	ldw	ra,12(sp)
10107ca4:	dc800217 	ldw	r18,8(sp)
10107ca8:	dc400117 	ldw	r17,4(sp)
10107cac:	dc000017 	ldw	r16,0(sp)
10107cb0:	dec00404 	addi	sp,sp,16
10107cb4:	f800283a 	ret
10107cb8:	01800844 	movi	r6,33
10107cbc:	01400104 	movi	r5,4
10107cc0:	010a4e40 	call	1010a4e4 <_calloc_r>
10107cc4:	88801315 	stw	r2,76(r17)
10107cc8:	103fec1e 	bne	r2,zero,10107c7c <__alt_data_end+0xfffe7c7c>
10107ccc:	0005883a 	mov	r2,zero
10107cd0:	003ff306 	br	10107ca0 <__alt_data_end+0xfffe7ca0>
10107cd4:	01400044 	movi	r5,1
10107cd8:	2c24983a 	sll	r18,r5,r16
10107cdc:	8809883a 	mov	r4,r17
10107ce0:	91800144 	addi	r6,r18,5
10107ce4:	318d883a 	add	r6,r6,r6
10107ce8:	318d883a 	add	r6,r6,r6
10107cec:	010a4e40 	call	1010a4e4 <_calloc_r>
10107cf0:	103ff626 	beq	r2,zero,10107ccc <__alt_data_end+0xfffe7ccc>
10107cf4:	14000115 	stw	r16,4(r2)
10107cf8:	14800215 	stw	r18,8(r2)
10107cfc:	003fe606 	br	10107c98 <__alt_data_end+0xfffe7c98>

10107d00 <_Bfree>:
10107d00:	28000826 	beq	r5,zero,10107d24 <_Bfree+0x24>
10107d04:	28c00117 	ldw	r3,4(r5)
10107d08:	20801317 	ldw	r2,76(r4)
10107d0c:	18c7883a 	add	r3,r3,r3
10107d10:	18c7883a 	add	r3,r3,r3
10107d14:	10c5883a 	add	r2,r2,r3
10107d18:	10c00017 	ldw	r3,0(r2)
10107d1c:	28c00015 	stw	r3,0(r5)
10107d20:	11400015 	stw	r5,0(r2)
10107d24:	f800283a 	ret

10107d28 <__multadd>:
10107d28:	defffa04 	addi	sp,sp,-24
10107d2c:	dc800315 	stw	r18,12(sp)
10107d30:	dc400215 	stw	r17,8(sp)
10107d34:	dc000115 	stw	r16,4(sp)
10107d38:	2823883a 	mov	r17,r5
10107d3c:	2c000417 	ldw	r16,16(r5)
10107d40:	dfc00515 	stw	ra,20(sp)
10107d44:	dcc00415 	stw	r19,16(sp)
10107d48:	2025883a 	mov	r18,r4
10107d4c:	29400504 	addi	r5,r5,20
10107d50:	0011883a 	mov	r8,zero
10107d54:	28c00017 	ldw	r3,0(r5)
10107d58:	29400104 	addi	r5,r5,4
10107d5c:	42000044 	addi	r8,r8,1
10107d60:	18bfffcc 	andi	r2,r3,65535
10107d64:	1185383a 	mul	r2,r2,r6
10107d68:	1806d43a 	srli	r3,r3,16
10107d6c:	11cf883a 	add	r7,r2,r7
10107d70:	3808d43a 	srli	r4,r7,16
10107d74:	1987383a 	mul	r3,r3,r6
10107d78:	38bfffcc 	andi	r2,r7,65535
10107d7c:	1907883a 	add	r3,r3,r4
10107d80:	1808943a 	slli	r4,r3,16
10107d84:	180ed43a 	srli	r7,r3,16
10107d88:	2085883a 	add	r2,r4,r2
10107d8c:	28bfff15 	stw	r2,-4(r5)
10107d90:	443ff016 	blt	r8,r16,10107d54 <__alt_data_end+0xfffe7d54>
10107d94:	38000926 	beq	r7,zero,10107dbc <__multadd+0x94>
10107d98:	88800217 	ldw	r2,8(r17)
10107d9c:	80800f0e 	bge	r16,r2,10107ddc <__multadd+0xb4>
10107da0:	80800144 	addi	r2,r16,5
10107da4:	1085883a 	add	r2,r2,r2
10107da8:	1085883a 	add	r2,r2,r2
10107dac:	8885883a 	add	r2,r17,r2
10107db0:	11c00015 	stw	r7,0(r2)
10107db4:	84000044 	addi	r16,r16,1
10107db8:	8c000415 	stw	r16,16(r17)
10107dbc:	8805883a 	mov	r2,r17
10107dc0:	dfc00517 	ldw	ra,20(sp)
10107dc4:	dcc00417 	ldw	r19,16(sp)
10107dc8:	dc800317 	ldw	r18,12(sp)
10107dcc:	dc400217 	ldw	r17,8(sp)
10107dd0:	dc000117 	ldw	r16,4(sp)
10107dd4:	dec00604 	addi	sp,sp,24
10107dd8:	f800283a 	ret
10107ddc:	89400117 	ldw	r5,4(r17)
10107de0:	9009883a 	mov	r4,r18
10107de4:	d9c00015 	stw	r7,0(sp)
10107de8:	29400044 	addi	r5,r5,1
10107dec:	0107c580 	call	10107c58 <_Balloc>
10107df0:	89800417 	ldw	r6,16(r17)
10107df4:	89400304 	addi	r5,r17,12
10107df8:	11000304 	addi	r4,r2,12
10107dfc:	31800084 	addi	r6,r6,2
10107e00:	318d883a 	add	r6,r6,r6
10107e04:	318d883a 	add	r6,r6,r6
10107e08:	1027883a 	mov	r19,r2
10107e0c:	0107b100 	call	10107b10 <memcpy>
10107e10:	d9c00017 	ldw	r7,0(sp)
10107e14:	88000a26 	beq	r17,zero,10107e40 <__multadd+0x118>
10107e18:	88c00117 	ldw	r3,4(r17)
10107e1c:	90801317 	ldw	r2,76(r18)
10107e20:	18c7883a 	add	r3,r3,r3
10107e24:	18c7883a 	add	r3,r3,r3
10107e28:	10c5883a 	add	r2,r2,r3
10107e2c:	10c00017 	ldw	r3,0(r2)
10107e30:	88c00015 	stw	r3,0(r17)
10107e34:	14400015 	stw	r17,0(r2)
10107e38:	9823883a 	mov	r17,r19
10107e3c:	003fd806 	br	10107da0 <__alt_data_end+0xfffe7da0>
10107e40:	9823883a 	mov	r17,r19
10107e44:	003fd606 	br	10107da0 <__alt_data_end+0xfffe7da0>

10107e48 <__s2b>:
10107e48:	defff904 	addi	sp,sp,-28
10107e4c:	dc400115 	stw	r17,4(sp)
10107e50:	dc000015 	stw	r16,0(sp)
10107e54:	2023883a 	mov	r17,r4
10107e58:	2821883a 	mov	r16,r5
10107e5c:	39000204 	addi	r4,r7,8
10107e60:	01400244 	movi	r5,9
10107e64:	dcc00315 	stw	r19,12(sp)
10107e68:	dc800215 	stw	r18,8(sp)
10107e6c:	dfc00615 	stw	ra,24(sp)
10107e70:	dd400515 	stw	r21,20(sp)
10107e74:	dd000415 	stw	r20,16(sp)
10107e78:	3825883a 	mov	r18,r7
10107e7c:	3027883a 	mov	r19,r6
10107e80:	01016640 	call	10101664 <__divsi3>
10107e84:	00c00044 	movi	r3,1
10107e88:	000b883a 	mov	r5,zero
10107e8c:	1880030e 	bge	r3,r2,10107e9c <__s2b+0x54>
10107e90:	18c7883a 	add	r3,r3,r3
10107e94:	29400044 	addi	r5,r5,1
10107e98:	18bffd16 	blt	r3,r2,10107e90 <__alt_data_end+0xfffe7e90>
10107e9c:	8809883a 	mov	r4,r17
10107ea0:	0107c580 	call	10107c58 <_Balloc>
10107ea4:	d8c00717 	ldw	r3,28(sp)
10107ea8:	10c00515 	stw	r3,20(r2)
10107eac:	00c00044 	movi	r3,1
10107eb0:	10c00415 	stw	r3,16(r2)
10107eb4:	00c00244 	movi	r3,9
10107eb8:	1cc0210e 	bge	r3,r19,10107f40 <__s2b+0xf8>
10107ebc:	80eb883a 	add	r21,r16,r3
10107ec0:	a829883a 	mov	r20,r21
10107ec4:	84e1883a 	add	r16,r16,r19
10107ec8:	a1c00007 	ldb	r7,0(r20)
10107ecc:	01800284 	movi	r6,10
10107ed0:	a5000044 	addi	r20,r20,1
10107ed4:	100b883a 	mov	r5,r2
10107ed8:	39fff404 	addi	r7,r7,-48
10107edc:	8809883a 	mov	r4,r17
10107ee0:	0107d280 	call	10107d28 <__multadd>
10107ee4:	a43ff81e 	bne	r20,r16,10107ec8 <__alt_data_end+0xfffe7ec8>
10107ee8:	ace1883a 	add	r16,r21,r19
10107eec:	843ffe04 	addi	r16,r16,-8
10107ef0:	9c800a0e 	bge	r19,r18,10107f1c <__s2b+0xd4>
10107ef4:	94e5c83a 	sub	r18,r18,r19
10107ef8:	84a5883a 	add	r18,r16,r18
10107efc:	81c00007 	ldb	r7,0(r16)
10107f00:	01800284 	movi	r6,10
10107f04:	84000044 	addi	r16,r16,1
10107f08:	100b883a 	mov	r5,r2
10107f0c:	39fff404 	addi	r7,r7,-48
10107f10:	8809883a 	mov	r4,r17
10107f14:	0107d280 	call	10107d28 <__multadd>
10107f18:	84bff81e 	bne	r16,r18,10107efc <__alt_data_end+0xfffe7efc>
10107f1c:	dfc00617 	ldw	ra,24(sp)
10107f20:	dd400517 	ldw	r21,20(sp)
10107f24:	dd000417 	ldw	r20,16(sp)
10107f28:	dcc00317 	ldw	r19,12(sp)
10107f2c:	dc800217 	ldw	r18,8(sp)
10107f30:	dc400117 	ldw	r17,4(sp)
10107f34:	dc000017 	ldw	r16,0(sp)
10107f38:	dec00704 	addi	sp,sp,28
10107f3c:	f800283a 	ret
10107f40:	84000284 	addi	r16,r16,10
10107f44:	1827883a 	mov	r19,r3
10107f48:	003fe906 	br	10107ef0 <__alt_data_end+0xfffe7ef0>

10107f4c <__hi0bits>:
10107f4c:	20bfffec 	andhi	r2,r4,65535
10107f50:	1000141e 	bne	r2,zero,10107fa4 <__hi0bits+0x58>
10107f54:	2008943a 	slli	r4,r4,16
10107f58:	00800404 	movi	r2,16
10107f5c:	20ffc02c 	andhi	r3,r4,65280
10107f60:	1800021e 	bne	r3,zero,10107f6c <__hi0bits+0x20>
10107f64:	2008923a 	slli	r4,r4,8
10107f68:	10800204 	addi	r2,r2,8
10107f6c:	20fc002c 	andhi	r3,r4,61440
10107f70:	1800021e 	bne	r3,zero,10107f7c <__hi0bits+0x30>
10107f74:	2008913a 	slli	r4,r4,4
10107f78:	10800104 	addi	r2,r2,4
10107f7c:	20f0002c 	andhi	r3,r4,49152
10107f80:	1800031e 	bne	r3,zero,10107f90 <__hi0bits+0x44>
10107f84:	2109883a 	add	r4,r4,r4
10107f88:	10800084 	addi	r2,r2,2
10107f8c:	2109883a 	add	r4,r4,r4
10107f90:	20000316 	blt	r4,zero,10107fa0 <__hi0bits+0x54>
10107f94:	2110002c 	andhi	r4,r4,16384
10107f98:	2000041e 	bne	r4,zero,10107fac <__hi0bits+0x60>
10107f9c:	00800804 	movi	r2,32
10107fa0:	f800283a 	ret
10107fa4:	0005883a 	mov	r2,zero
10107fa8:	003fec06 	br	10107f5c <__alt_data_end+0xfffe7f5c>
10107fac:	10800044 	addi	r2,r2,1
10107fb0:	f800283a 	ret

10107fb4 <__lo0bits>:
10107fb4:	20c00017 	ldw	r3,0(r4)
10107fb8:	188001cc 	andi	r2,r3,7
10107fbc:	10000826 	beq	r2,zero,10107fe0 <__lo0bits+0x2c>
10107fc0:	1880004c 	andi	r2,r3,1
10107fc4:	1000211e 	bne	r2,zero,1010804c <__lo0bits+0x98>
10107fc8:	1880008c 	andi	r2,r3,2
10107fcc:	1000211e 	bne	r2,zero,10108054 <__lo0bits+0xa0>
10107fd0:	1806d0ba 	srli	r3,r3,2
10107fd4:	00800084 	movi	r2,2
10107fd8:	20c00015 	stw	r3,0(r4)
10107fdc:	f800283a 	ret
10107fe0:	18bfffcc 	andi	r2,r3,65535
10107fe4:	10001326 	beq	r2,zero,10108034 <__lo0bits+0x80>
10107fe8:	0005883a 	mov	r2,zero
10107fec:	19403fcc 	andi	r5,r3,255
10107ff0:	2800021e 	bne	r5,zero,10107ffc <__lo0bits+0x48>
10107ff4:	1806d23a 	srli	r3,r3,8
10107ff8:	10800204 	addi	r2,r2,8
10107ffc:	194003cc 	andi	r5,r3,15
10108000:	2800021e 	bne	r5,zero,1010800c <__lo0bits+0x58>
10108004:	1806d13a 	srli	r3,r3,4
10108008:	10800104 	addi	r2,r2,4
1010800c:	194000cc 	andi	r5,r3,3
10108010:	2800021e 	bne	r5,zero,1010801c <__lo0bits+0x68>
10108014:	1806d0ba 	srli	r3,r3,2
10108018:	10800084 	addi	r2,r2,2
1010801c:	1940004c 	andi	r5,r3,1
10108020:	2800081e 	bne	r5,zero,10108044 <__lo0bits+0x90>
10108024:	1806d07a 	srli	r3,r3,1
10108028:	1800051e 	bne	r3,zero,10108040 <__lo0bits+0x8c>
1010802c:	00800804 	movi	r2,32
10108030:	f800283a 	ret
10108034:	1806d43a 	srli	r3,r3,16
10108038:	00800404 	movi	r2,16
1010803c:	003feb06 	br	10107fec <__alt_data_end+0xfffe7fec>
10108040:	10800044 	addi	r2,r2,1
10108044:	20c00015 	stw	r3,0(r4)
10108048:	f800283a 	ret
1010804c:	0005883a 	mov	r2,zero
10108050:	f800283a 	ret
10108054:	1806d07a 	srli	r3,r3,1
10108058:	00800044 	movi	r2,1
1010805c:	20c00015 	stw	r3,0(r4)
10108060:	f800283a 	ret

10108064 <__i2b>:
10108064:	defffd04 	addi	sp,sp,-12
10108068:	dc000015 	stw	r16,0(sp)
1010806c:	04000044 	movi	r16,1
10108070:	dc400115 	stw	r17,4(sp)
10108074:	2823883a 	mov	r17,r5
10108078:	800b883a 	mov	r5,r16
1010807c:	dfc00215 	stw	ra,8(sp)
10108080:	0107c580 	call	10107c58 <_Balloc>
10108084:	14400515 	stw	r17,20(r2)
10108088:	14000415 	stw	r16,16(r2)
1010808c:	dfc00217 	ldw	ra,8(sp)
10108090:	dc400117 	ldw	r17,4(sp)
10108094:	dc000017 	ldw	r16,0(sp)
10108098:	dec00304 	addi	sp,sp,12
1010809c:	f800283a 	ret

101080a0 <__multiply>:
101080a0:	defffa04 	addi	sp,sp,-24
101080a4:	dcc00315 	stw	r19,12(sp)
101080a8:	dc800215 	stw	r18,8(sp)
101080ac:	34c00417 	ldw	r19,16(r6)
101080b0:	2c800417 	ldw	r18,16(r5)
101080b4:	dd000415 	stw	r20,16(sp)
101080b8:	dc400115 	stw	r17,4(sp)
101080bc:	dfc00515 	stw	ra,20(sp)
101080c0:	dc000015 	stw	r16,0(sp)
101080c4:	2829883a 	mov	r20,r5
101080c8:	3023883a 	mov	r17,r6
101080cc:	94c0050e 	bge	r18,r19,101080e4 <__multiply+0x44>
101080d0:	9007883a 	mov	r3,r18
101080d4:	3029883a 	mov	r20,r6
101080d8:	9825883a 	mov	r18,r19
101080dc:	2823883a 	mov	r17,r5
101080e0:	1827883a 	mov	r19,r3
101080e4:	a0800217 	ldw	r2,8(r20)
101080e8:	94e1883a 	add	r16,r18,r19
101080ec:	a1400117 	ldw	r5,4(r20)
101080f0:	1400010e 	bge	r2,r16,101080f8 <__multiply+0x58>
101080f4:	29400044 	addi	r5,r5,1
101080f8:	0107c580 	call	10107c58 <_Balloc>
101080fc:	8415883a 	add	r10,r16,r16
10108100:	12c00504 	addi	r11,r2,20
10108104:	5295883a 	add	r10,r10,r10
10108108:	5a95883a 	add	r10,r11,r10
1010810c:	5807883a 	mov	r3,r11
10108110:	5a80032e 	bgeu	r11,r10,10108120 <__multiply+0x80>
10108114:	18000015 	stw	zero,0(r3)
10108118:	18c00104 	addi	r3,r3,4
1010811c:	1abffd36 	bltu	r3,r10,10108114 <__alt_data_end+0xfffe8114>
10108120:	9ce7883a 	add	r19,r19,r19
10108124:	94a5883a 	add	r18,r18,r18
10108128:	89800504 	addi	r6,r17,20
1010812c:	9ce7883a 	add	r19,r19,r19
10108130:	a3400504 	addi	r13,r20,20
10108134:	94a5883a 	add	r18,r18,r18
10108138:	34d9883a 	add	r12,r6,r19
1010813c:	6c93883a 	add	r9,r13,r18
10108140:	3300422e 	bgeu	r6,r12,1010824c <__multiply+0x1ac>
10108144:	37c00017 	ldw	ra,0(r6)
10108148:	fbffffcc 	andi	r15,ra,65535
1010814c:	78001b26 	beq	r15,zero,101081bc <__multiply+0x11c>
10108150:	5811883a 	mov	r8,r11
10108154:	681d883a 	mov	r14,r13
10108158:	000f883a 	mov	r7,zero
1010815c:	71000017 	ldw	r4,0(r14)
10108160:	40c00017 	ldw	r3,0(r8)
10108164:	73800104 	addi	r14,r14,4
10108168:	217fffcc 	andi	r5,r4,65535
1010816c:	2bcb383a 	mul	r5,r5,r15
10108170:	2008d43a 	srli	r4,r4,16
10108174:	1c7fffcc 	andi	r17,r3,65535
10108178:	2c4b883a 	add	r5,r5,r17
1010817c:	29cb883a 	add	r5,r5,r7
10108180:	23c9383a 	mul	r4,r4,r15
10108184:	1806d43a 	srli	r3,r3,16
10108188:	280ed43a 	srli	r7,r5,16
1010818c:	297fffcc 	andi	r5,r5,65535
10108190:	20c7883a 	add	r3,r4,r3
10108194:	19c7883a 	add	r3,r3,r7
10108198:	1808943a 	slli	r4,r3,16
1010819c:	4023883a 	mov	r17,r8
101081a0:	180ed43a 	srli	r7,r3,16
101081a4:	214ab03a 	or	r5,r4,r5
101081a8:	41400015 	stw	r5,0(r8)
101081ac:	42000104 	addi	r8,r8,4
101081b0:	727fea36 	bltu	r14,r9,1010815c <__alt_data_end+0xfffe815c>
101081b4:	89c00115 	stw	r7,4(r17)
101081b8:	37c00017 	ldw	ra,0(r6)
101081bc:	f83ed43a 	srli	ra,ra,16
101081c0:	f8001f26 	beq	ra,zero,10108240 <__multiply+0x1a0>
101081c4:	58c00017 	ldw	r3,0(r11)
101081c8:	681d883a 	mov	r14,r13
101081cc:	581f883a 	mov	r15,r11
101081d0:	1811883a 	mov	r8,r3
101081d4:	5825883a 	mov	r18,r11
101081d8:	000f883a 	mov	r7,zero
101081dc:	00000106 	br	101081e4 <__multiply+0x144>
101081e0:	8825883a 	mov	r18,r17
101081e4:	7140000b 	ldhu	r5,0(r14)
101081e8:	4010d43a 	srli	r8,r8,16
101081ec:	193fffcc 	andi	r4,r3,65535
101081f0:	2fcb383a 	mul	r5,r5,ra
101081f4:	7bc00104 	addi	r15,r15,4
101081f8:	73800104 	addi	r14,r14,4
101081fc:	2a0b883a 	add	r5,r5,r8
10108200:	29cb883a 	add	r5,r5,r7
10108204:	2806943a 	slli	r3,r5,16
10108208:	94400104 	addi	r17,r18,4
1010820c:	280ad43a 	srli	r5,r5,16
10108210:	1908b03a 	or	r4,r3,r4
10108214:	793fff15 	stw	r4,-4(r15)
10108218:	70ffff17 	ldw	r3,-4(r14)
1010821c:	8a000017 	ldw	r8,0(r17)
10108220:	1806d43a 	srli	r3,r3,16
10108224:	413fffcc 	andi	r4,r8,65535
10108228:	1fc7383a 	mul	r3,r3,ra
1010822c:	1907883a 	add	r3,r3,r4
10108230:	1947883a 	add	r3,r3,r5
10108234:	180ed43a 	srli	r7,r3,16
10108238:	727fe936 	bltu	r14,r9,101081e0 <__alt_data_end+0xfffe81e0>
1010823c:	90c00115 	stw	r3,4(r18)
10108240:	31800104 	addi	r6,r6,4
10108244:	5ac00104 	addi	r11,r11,4
10108248:	333fbe36 	bltu	r6,r12,10108144 <__alt_data_end+0xfffe8144>
1010824c:	0400090e 	bge	zero,r16,10108274 <__multiply+0x1d4>
10108250:	50ffff17 	ldw	r3,-4(r10)
10108254:	52bfff04 	addi	r10,r10,-4
10108258:	18000326 	beq	r3,zero,10108268 <__multiply+0x1c8>
1010825c:	00000506 	br	10108274 <__multiply+0x1d4>
10108260:	50c00017 	ldw	r3,0(r10)
10108264:	1800031e 	bne	r3,zero,10108274 <__multiply+0x1d4>
10108268:	843fffc4 	addi	r16,r16,-1
1010826c:	52bfff04 	addi	r10,r10,-4
10108270:	803ffb1e 	bne	r16,zero,10108260 <__alt_data_end+0xfffe8260>
10108274:	14000415 	stw	r16,16(r2)
10108278:	dfc00517 	ldw	ra,20(sp)
1010827c:	dd000417 	ldw	r20,16(sp)
10108280:	dcc00317 	ldw	r19,12(sp)
10108284:	dc800217 	ldw	r18,8(sp)
10108288:	dc400117 	ldw	r17,4(sp)
1010828c:	dc000017 	ldw	r16,0(sp)
10108290:	dec00604 	addi	sp,sp,24
10108294:	f800283a 	ret

10108298 <__pow5mult>:
10108298:	defffa04 	addi	sp,sp,-24
1010829c:	dcc00315 	stw	r19,12(sp)
101082a0:	dc000015 	stw	r16,0(sp)
101082a4:	dfc00515 	stw	ra,20(sp)
101082a8:	dd000415 	stw	r20,16(sp)
101082ac:	dc800215 	stw	r18,8(sp)
101082b0:	dc400115 	stw	r17,4(sp)
101082b4:	308000cc 	andi	r2,r6,3
101082b8:	3021883a 	mov	r16,r6
101082bc:	2027883a 	mov	r19,r4
101082c0:	10002f1e 	bne	r2,zero,10108380 <__pow5mult+0xe8>
101082c4:	2825883a 	mov	r18,r5
101082c8:	8021d0ba 	srai	r16,r16,2
101082cc:	80001a26 	beq	r16,zero,10108338 <__pow5mult+0xa0>
101082d0:	9c401217 	ldw	r17,72(r19)
101082d4:	8800061e 	bne	r17,zero,101082f0 <__pow5mult+0x58>
101082d8:	00003406 	br	101083ac <__pow5mult+0x114>
101082dc:	8021d07a 	srai	r16,r16,1
101082e0:	80001526 	beq	r16,zero,10108338 <__pow5mult+0xa0>
101082e4:	88800017 	ldw	r2,0(r17)
101082e8:	10001c26 	beq	r2,zero,1010835c <__pow5mult+0xc4>
101082ec:	1023883a 	mov	r17,r2
101082f0:	8080004c 	andi	r2,r16,1
101082f4:	103ff926 	beq	r2,zero,101082dc <__alt_data_end+0xfffe82dc>
101082f8:	880d883a 	mov	r6,r17
101082fc:	900b883a 	mov	r5,r18
10108300:	9809883a 	mov	r4,r19
10108304:	01080a00 	call	101080a0 <__multiply>
10108308:	90001b26 	beq	r18,zero,10108378 <__pow5mult+0xe0>
1010830c:	91000117 	ldw	r4,4(r18)
10108310:	98c01317 	ldw	r3,76(r19)
10108314:	8021d07a 	srai	r16,r16,1
10108318:	2109883a 	add	r4,r4,r4
1010831c:	2109883a 	add	r4,r4,r4
10108320:	1907883a 	add	r3,r3,r4
10108324:	19000017 	ldw	r4,0(r3)
10108328:	91000015 	stw	r4,0(r18)
1010832c:	1c800015 	stw	r18,0(r3)
10108330:	1025883a 	mov	r18,r2
10108334:	803feb1e 	bne	r16,zero,101082e4 <__alt_data_end+0xfffe82e4>
10108338:	9005883a 	mov	r2,r18
1010833c:	dfc00517 	ldw	ra,20(sp)
10108340:	dd000417 	ldw	r20,16(sp)
10108344:	dcc00317 	ldw	r19,12(sp)
10108348:	dc800217 	ldw	r18,8(sp)
1010834c:	dc400117 	ldw	r17,4(sp)
10108350:	dc000017 	ldw	r16,0(sp)
10108354:	dec00604 	addi	sp,sp,24
10108358:	f800283a 	ret
1010835c:	880d883a 	mov	r6,r17
10108360:	880b883a 	mov	r5,r17
10108364:	9809883a 	mov	r4,r19
10108368:	01080a00 	call	101080a0 <__multiply>
1010836c:	88800015 	stw	r2,0(r17)
10108370:	10000015 	stw	zero,0(r2)
10108374:	003fdd06 	br	101082ec <__alt_data_end+0xfffe82ec>
10108378:	1025883a 	mov	r18,r2
1010837c:	003fd706 	br	101082dc <__alt_data_end+0xfffe82dc>
10108380:	10bfffc4 	addi	r2,r2,-1
10108384:	1085883a 	add	r2,r2,r2
10108388:	00c40474 	movhi	r3,4113
1010838c:	18c5b904 	addi	r3,r3,5860
10108390:	1085883a 	add	r2,r2,r2
10108394:	1885883a 	add	r2,r3,r2
10108398:	11800017 	ldw	r6,0(r2)
1010839c:	000f883a 	mov	r7,zero
101083a0:	0107d280 	call	10107d28 <__multadd>
101083a4:	1025883a 	mov	r18,r2
101083a8:	003fc706 	br	101082c8 <__alt_data_end+0xfffe82c8>
101083ac:	05000044 	movi	r20,1
101083b0:	a00b883a 	mov	r5,r20
101083b4:	9809883a 	mov	r4,r19
101083b8:	0107c580 	call	10107c58 <_Balloc>
101083bc:	1023883a 	mov	r17,r2
101083c0:	00809c44 	movi	r2,625
101083c4:	88800515 	stw	r2,20(r17)
101083c8:	8d000415 	stw	r20,16(r17)
101083cc:	9c401215 	stw	r17,72(r19)
101083d0:	88000015 	stw	zero,0(r17)
101083d4:	003fc606 	br	101082f0 <__alt_data_end+0xfffe82f0>

101083d8 <__lshift>:
101083d8:	defff904 	addi	sp,sp,-28
101083dc:	dd400515 	stw	r21,20(sp)
101083e0:	dcc00315 	stw	r19,12(sp)
101083e4:	302bd17a 	srai	r21,r6,5
101083e8:	2cc00417 	ldw	r19,16(r5)
101083ec:	28800217 	ldw	r2,8(r5)
101083f0:	dd000415 	stw	r20,16(sp)
101083f4:	ace7883a 	add	r19,r21,r19
101083f8:	dc800215 	stw	r18,8(sp)
101083fc:	dc400115 	stw	r17,4(sp)
10108400:	dc000015 	stw	r16,0(sp)
10108404:	dfc00615 	stw	ra,24(sp)
10108408:	9c000044 	addi	r16,r19,1
1010840c:	2823883a 	mov	r17,r5
10108410:	3029883a 	mov	r20,r6
10108414:	2025883a 	mov	r18,r4
10108418:	29400117 	ldw	r5,4(r5)
1010841c:	1400030e 	bge	r2,r16,1010842c <__lshift+0x54>
10108420:	1085883a 	add	r2,r2,r2
10108424:	29400044 	addi	r5,r5,1
10108428:	143ffd16 	blt	r2,r16,10108420 <__alt_data_end+0xfffe8420>
1010842c:	9009883a 	mov	r4,r18
10108430:	0107c580 	call	10107c58 <_Balloc>
10108434:	10c00504 	addi	r3,r2,20
10108438:	0540070e 	bge	zero,r21,10108458 <__lshift+0x80>
1010843c:	ad6b883a 	add	r21,r21,r21
10108440:	ad6b883a 	add	r21,r21,r21
10108444:	1809883a 	mov	r4,r3
10108448:	1d47883a 	add	r3,r3,r21
1010844c:	20000015 	stw	zero,0(r4)
10108450:	21000104 	addi	r4,r4,4
10108454:	193ffd1e 	bne	r3,r4,1010844c <__alt_data_end+0xfffe844c>
10108458:	8a000417 	ldw	r8,16(r17)
1010845c:	89000504 	addi	r4,r17,20
10108460:	a18007cc 	andi	r6,r20,31
10108464:	4211883a 	add	r8,r8,r8
10108468:	4211883a 	add	r8,r8,r8
1010846c:	2211883a 	add	r8,r4,r8
10108470:	30002326 	beq	r6,zero,10108500 <__lshift+0x128>
10108474:	02400804 	movi	r9,32
10108478:	4993c83a 	sub	r9,r9,r6
1010847c:	000b883a 	mov	r5,zero
10108480:	21c00017 	ldw	r7,0(r4)
10108484:	1815883a 	mov	r10,r3
10108488:	18c00104 	addi	r3,r3,4
1010848c:	398e983a 	sll	r7,r7,r6
10108490:	21000104 	addi	r4,r4,4
10108494:	394ab03a 	or	r5,r7,r5
10108498:	197fff15 	stw	r5,-4(r3)
1010849c:	217fff17 	ldw	r5,-4(r4)
101084a0:	2a4ad83a 	srl	r5,r5,r9
101084a4:	223ff636 	bltu	r4,r8,10108480 <__alt_data_end+0xfffe8480>
101084a8:	51400115 	stw	r5,4(r10)
101084ac:	28001a1e 	bne	r5,zero,10108518 <__lshift+0x140>
101084b0:	843fffc4 	addi	r16,r16,-1
101084b4:	14000415 	stw	r16,16(r2)
101084b8:	88000826 	beq	r17,zero,101084dc <__lshift+0x104>
101084bc:	89000117 	ldw	r4,4(r17)
101084c0:	90c01317 	ldw	r3,76(r18)
101084c4:	2109883a 	add	r4,r4,r4
101084c8:	2109883a 	add	r4,r4,r4
101084cc:	1907883a 	add	r3,r3,r4
101084d0:	19000017 	ldw	r4,0(r3)
101084d4:	89000015 	stw	r4,0(r17)
101084d8:	1c400015 	stw	r17,0(r3)
101084dc:	dfc00617 	ldw	ra,24(sp)
101084e0:	dd400517 	ldw	r21,20(sp)
101084e4:	dd000417 	ldw	r20,16(sp)
101084e8:	dcc00317 	ldw	r19,12(sp)
101084ec:	dc800217 	ldw	r18,8(sp)
101084f0:	dc400117 	ldw	r17,4(sp)
101084f4:	dc000017 	ldw	r16,0(sp)
101084f8:	dec00704 	addi	sp,sp,28
101084fc:	f800283a 	ret
10108500:	21400017 	ldw	r5,0(r4)
10108504:	18c00104 	addi	r3,r3,4
10108508:	21000104 	addi	r4,r4,4
1010850c:	197fff15 	stw	r5,-4(r3)
10108510:	223ffb36 	bltu	r4,r8,10108500 <__alt_data_end+0xfffe8500>
10108514:	003fe606 	br	101084b0 <__alt_data_end+0xfffe84b0>
10108518:	9c000084 	addi	r16,r19,2
1010851c:	003fe406 	br	101084b0 <__alt_data_end+0xfffe84b0>

10108520 <__mcmp>:
10108520:	20800417 	ldw	r2,16(r4)
10108524:	28c00417 	ldw	r3,16(r5)
10108528:	10c5c83a 	sub	r2,r2,r3
1010852c:	1000111e 	bne	r2,zero,10108574 <__mcmp+0x54>
10108530:	18c7883a 	add	r3,r3,r3
10108534:	18c7883a 	add	r3,r3,r3
10108538:	21000504 	addi	r4,r4,20
1010853c:	29400504 	addi	r5,r5,20
10108540:	20c5883a 	add	r2,r4,r3
10108544:	28cb883a 	add	r5,r5,r3
10108548:	00000106 	br	10108550 <__mcmp+0x30>
1010854c:	20800a2e 	bgeu	r4,r2,10108578 <__mcmp+0x58>
10108550:	10bfff04 	addi	r2,r2,-4
10108554:	297fff04 	addi	r5,r5,-4
10108558:	11800017 	ldw	r6,0(r2)
1010855c:	28c00017 	ldw	r3,0(r5)
10108560:	30fffa26 	beq	r6,r3,1010854c <__alt_data_end+0xfffe854c>
10108564:	30c00236 	bltu	r6,r3,10108570 <__mcmp+0x50>
10108568:	00800044 	movi	r2,1
1010856c:	f800283a 	ret
10108570:	00bfffc4 	movi	r2,-1
10108574:	f800283a 	ret
10108578:	0005883a 	mov	r2,zero
1010857c:	f800283a 	ret

10108580 <__mdiff>:
10108580:	28c00417 	ldw	r3,16(r5)
10108584:	30800417 	ldw	r2,16(r6)
10108588:	defffa04 	addi	sp,sp,-24
1010858c:	dcc00315 	stw	r19,12(sp)
10108590:	dc800215 	stw	r18,8(sp)
10108594:	dfc00515 	stw	ra,20(sp)
10108598:	dd000415 	stw	r20,16(sp)
1010859c:	dc400115 	stw	r17,4(sp)
101085a0:	dc000015 	stw	r16,0(sp)
101085a4:	1887c83a 	sub	r3,r3,r2
101085a8:	2825883a 	mov	r18,r5
101085ac:	3027883a 	mov	r19,r6
101085b0:	1800141e 	bne	r3,zero,10108604 <__mdiff+0x84>
101085b4:	1085883a 	add	r2,r2,r2
101085b8:	1085883a 	add	r2,r2,r2
101085bc:	2a000504 	addi	r8,r5,20
101085c0:	34000504 	addi	r16,r6,20
101085c4:	4087883a 	add	r3,r8,r2
101085c8:	8085883a 	add	r2,r16,r2
101085cc:	00000106 	br	101085d4 <__mdiff+0x54>
101085d0:	40c0592e 	bgeu	r8,r3,10108738 <__mdiff+0x1b8>
101085d4:	18ffff04 	addi	r3,r3,-4
101085d8:	10bfff04 	addi	r2,r2,-4
101085dc:	19c00017 	ldw	r7,0(r3)
101085e0:	11400017 	ldw	r5,0(r2)
101085e4:	397ffa26 	beq	r7,r5,101085d0 <__alt_data_end+0xfffe85d0>
101085e8:	3940592e 	bgeu	r7,r5,10108750 <__mdiff+0x1d0>
101085ec:	9005883a 	mov	r2,r18
101085f0:	4023883a 	mov	r17,r8
101085f4:	9825883a 	mov	r18,r19
101085f8:	05000044 	movi	r20,1
101085fc:	1027883a 	mov	r19,r2
10108600:	00000406 	br	10108614 <__mdiff+0x94>
10108604:	18005616 	blt	r3,zero,10108760 <__mdiff+0x1e0>
10108608:	34400504 	addi	r17,r6,20
1010860c:	2c000504 	addi	r16,r5,20
10108610:	0029883a 	mov	r20,zero
10108614:	91400117 	ldw	r5,4(r18)
10108618:	0107c580 	call	10107c58 <_Balloc>
1010861c:	92400417 	ldw	r9,16(r18)
10108620:	9b000417 	ldw	r12,16(r19)
10108624:	12c00504 	addi	r11,r2,20
10108628:	4a51883a 	add	r8,r9,r9
1010862c:	6319883a 	add	r12,r12,r12
10108630:	4211883a 	add	r8,r8,r8
10108634:	6319883a 	add	r12,r12,r12
10108638:	15000315 	stw	r20,12(r2)
1010863c:	8211883a 	add	r8,r16,r8
10108640:	8b19883a 	add	r12,r17,r12
10108644:	0007883a 	mov	r3,zero
10108648:	81400017 	ldw	r5,0(r16)
1010864c:	89c00017 	ldw	r7,0(r17)
10108650:	59800104 	addi	r6,r11,4
10108654:	293fffcc 	andi	r4,r5,65535
10108658:	20c7883a 	add	r3,r4,r3
1010865c:	393fffcc 	andi	r4,r7,65535
10108660:	1909c83a 	sub	r4,r3,r4
10108664:	280ad43a 	srli	r5,r5,16
10108668:	380ed43a 	srli	r7,r7,16
1010866c:	2007d43a 	srai	r3,r4,16
10108670:	213fffcc 	andi	r4,r4,65535
10108674:	29cbc83a 	sub	r5,r5,r7
10108678:	28c7883a 	add	r3,r5,r3
1010867c:	180a943a 	slli	r5,r3,16
10108680:	8c400104 	addi	r17,r17,4
10108684:	84000104 	addi	r16,r16,4
10108688:	2908b03a 	or	r4,r5,r4
1010868c:	59000015 	stw	r4,0(r11)
10108690:	1807d43a 	srai	r3,r3,16
10108694:	3015883a 	mov	r10,r6
10108698:	3017883a 	mov	r11,r6
1010869c:	8b3fea36 	bltu	r17,r12,10108648 <__alt_data_end+0xfffe8648>
101086a0:	8200162e 	bgeu	r16,r8,101086fc <__mdiff+0x17c>
101086a4:	8017883a 	mov	r11,r16
101086a8:	59400017 	ldw	r5,0(r11)
101086ac:	31800104 	addi	r6,r6,4
101086b0:	5ac00104 	addi	r11,r11,4
101086b4:	293fffcc 	andi	r4,r5,65535
101086b8:	20c7883a 	add	r3,r4,r3
101086bc:	280ed43a 	srli	r7,r5,16
101086c0:	180bd43a 	srai	r5,r3,16
101086c4:	193fffcc 	andi	r4,r3,65535
101086c8:	3947883a 	add	r3,r7,r5
101086cc:	180a943a 	slli	r5,r3,16
101086d0:	1807d43a 	srai	r3,r3,16
101086d4:	2908b03a 	or	r4,r5,r4
101086d8:	313fff15 	stw	r4,-4(r6)
101086dc:	5a3ff236 	bltu	r11,r8,101086a8 <__alt_data_end+0xfffe86a8>
101086e0:	0406303a 	nor	r3,zero,r16
101086e4:	1a07883a 	add	r3,r3,r8
101086e8:	1806d0ba 	srli	r3,r3,2
101086ec:	18c00044 	addi	r3,r3,1
101086f0:	18c7883a 	add	r3,r3,r3
101086f4:	18c7883a 	add	r3,r3,r3
101086f8:	50d5883a 	add	r10,r10,r3
101086fc:	50ffff04 	addi	r3,r10,-4
10108700:	2000041e 	bne	r4,zero,10108714 <__mdiff+0x194>
10108704:	18ffff04 	addi	r3,r3,-4
10108708:	19000017 	ldw	r4,0(r3)
1010870c:	4a7fffc4 	addi	r9,r9,-1
10108710:	203ffc26 	beq	r4,zero,10108704 <__alt_data_end+0xfffe8704>
10108714:	12400415 	stw	r9,16(r2)
10108718:	dfc00517 	ldw	ra,20(sp)
1010871c:	dd000417 	ldw	r20,16(sp)
10108720:	dcc00317 	ldw	r19,12(sp)
10108724:	dc800217 	ldw	r18,8(sp)
10108728:	dc400117 	ldw	r17,4(sp)
1010872c:	dc000017 	ldw	r16,0(sp)
10108730:	dec00604 	addi	sp,sp,24
10108734:	f800283a 	ret
10108738:	000b883a 	mov	r5,zero
1010873c:	0107c580 	call	10107c58 <_Balloc>
10108740:	00c00044 	movi	r3,1
10108744:	10c00415 	stw	r3,16(r2)
10108748:	10000515 	stw	zero,20(r2)
1010874c:	003ff206 	br	10108718 <__alt_data_end+0xfffe8718>
10108750:	8023883a 	mov	r17,r16
10108754:	0029883a 	mov	r20,zero
10108758:	4021883a 	mov	r16,r8
1010875c:	003fad06 	br	10108614 <__alt_data_end+0xfffe8614>
10108760:	9005883a 	mov	r2,r18
10108764:	94400504 	addi	r17,r18,20
10108768:	9c000504 	addi	r16,r19,20
1010876c:	9825883a 	mov	r18,r19
10108770:	05000044 	movi	r20,1
10108774:	1027883a 	mov	r19,r2
10108778:	003fa606 	br	10108614 <__alt_data_end+0xfffe8614>

1010877c <__ulp>:
1010877c:	295ffc2c 	andhi	r5,r5,32752
10108780:	00bf3034 	movhi	r2,64704
10108784:	2887883a 	add	r3,r5,r2
10108788:	00c0020e 	bge	zero,r3,10108794 <__ulp+0x18>
1010878c:	0005883a 	mov	r2,zero
10108790:	f800283a 	ret
10108794:	00c7c83a 	sub	r3,zero,r3
10108798:	1807d53a 	srai	r3,r3,20
1010879c:	008004c4 	movi	r2,19
101087a0:	10c00b0e 	bge	r2,r3,101087d0 <__ulp+0x54>
101087a4:	18bffb04 	addi	r2,r3,-20
101087a8:	01000784 	movi	r4,30
101087ac:	0007883a 	mov	r3,zero
101087b0:	20800516 	blt	r4,r2,101087c8 <__ulp+0x4c>
101087b4:	010007c4 	movi	r4,31
101087b8:	2089c83a 	sub	r4,r4,r2
101087bc:	00800044 	movi	r2,1
101087c0:	1104983a 	sll	r2,r2,r4
101087c4:	f800283a 	ret
101087c8:	00800044 	movi	r2,1
101087cc:	f800283a 	ret
101087d0:	01400234 	movhi	r5,8
101087d4:	28c7d83a 	sra	r3,r5,r3
101087d8:	0005883a 	mov	r2,zero
101087dc:	f800283a 	ret

101087e0 <__b2d>:
101087e0:	defffa04 	addi	sp,sp,-24
101087e4:	dc000015 	stw	r16,0(sp)
101087e8:	24000417 	ldw	r16,16(r4)
101087ec:	dc400115 	stw	r17,4(sp)
101087f0:	24400504 	addi	r17,r4,20
101087f4:	8421883a 	add	r16,r16,r16
101087f8:	8421883a 	add	r16,r16,r16
101087fc:	8c21883a 	add	r16,r17,r16
10108800:	dc800215 	stw	r18,8(sp)
10108804:	84bfff17 	ldw	r18,-4(r16)
10108808:	dd000415 	stw	r20,16(sp)
1010880c:	dcc00315 	stw	r19,12(sp)
10108810:	9009883a 	mov	r4,r18
10108814:	2829883a 	mov	r20,r5
10108818:	dfc00515 	stw	ra,20(sp)
1010881c:	0107f4c0 	call	10107f4c <__hi0bits>
10108820:	00c00804 	movi	r3,32
10108824:	1889c83a 	sub	r4,r3,r2
10108828:	a1000015 	stw	r4,0(r20)
1010882c:	01000284 	movi	r4,10
10108830:	84ffff04 	addi	r19,r16,-4
10108834:	20801216 	blt	r4,r2,10108880 <__b2d+0xa0>
10108838:	018002c4 	movi	r6,11
1010883c:	308dc83a 	sub	r6,r6,r2
10108840:	9186d83a 	srl	r3,r18,r6
10108844:	18cffc34 	orhi	r3,r3,16368
10108848:	8cc0212e 	bgeu	r17,r19,101088d0 <__b2d+0xf0>
1010884c:	813ffe17 	ldw	r4,-8(r16)
10108850:	218cd83a 	srl	r6,r4,r6
10108854:	10800544 	addi	r2,r2,21
10108858:	9084983a 	sll	r2,r18,r2
1010885c:	1184b03a 	or	r2,r2,r6
10108860:	dfc00517 	ldw	ra,20(sp)
10108864:	dd000417 	ldw	r20,16(sp)
10108868:	dcc00317 	ldw	r19,12(sp)
1010886c:	dc800217 	ldw	r18,8(sp)
10108870:	dc400117 	ldw	r17,4(sp)
10108874:	dc000017 	ldw	r16,0(sp)
10108878:	dec00604 	addi	sp,sp,24
1010887c:	f800283a 	ret
10108880:	8cc00f2e 	bgeu	r17,r19,101088c0 <__b2d+0xe0>
10108884:	117ffd44 	addi	r5,r2,-11
10108888:	80bffe17 	ldw	r2,-8(r16)
1010888c:	28000e26 	beq	r5,zero,101088c8 <__b2d+0xe8>
10108890:	1949c83a 	sub	r4,r3,r5
10108894:	9164983a 	sll	r18,r18,r5
10108898:	1106d83a 	srl	r3,r2,r4
1010889c:	81bffe04 	addi	r6,r16,-8
101088a0:	948ffc34 	orhi	r18,r18,16368
101088a4:	90c6b03a 	or	r3,r18,r3
101088a8:	89800e2e 	bgeu	r17,r6,101088e4 <__b2d+0x104>
101088ac:	81bffd17 	ldw	r6,-12(r16)
101088b0:	1144983a 	sll	r2,r2,r5
101088b4:	310ad83a 	srl	r5,r6,r4
101088b8:	2884b03a 	or	r2,r5,r2
101088bc:	003fe806 	br	10108860 <__alt_data_end+0xfffe8860>
101088c0:	10bffd44 	addi	r2,r2,-11
101088c4:	1000041e 	bne	r2,zero,101088d8 <__b2d+0xf8>
101088c8:	90cffc34 	orhi	r3,r18,16368
101088cc:	003fe406 	br	10108860 <__alt_data_end+0xfffe8860>
101088d0:	000d883a 	mov	r6,zero
101088d4:	003fdf06 	br	10108854 <__alt_data_end+0xfffe8854>
101088d8:	90a4983a 	sll	r18,r18,r2
101088dc:	0005883a 	mov	r2,zero
101088e0:	003ff906 	br	101088c8 <__alt_data_end+0xfffe88c8>
101088e4:	1144983a 	sll	r2,r2,r5
101088e8:	003fdd06 	br	10108860 <__alt_data_end+0xfffe8860>

101088ec <__d2b>:
101088ec:	defff804 	addi	sp,sp,-32
101088f0:	dc000215 	stw	r16,8(sp)
101088f4:	3021883a 	mov	r16,r6
101088f8:	dc400315 	stw	r17,12(sp)
101088fc:	8022907a 	slli	r17,r16,1
10108900:	dd000615 	stw	r20,24(sp)
10108904:	2829883a 	mov	r20,r5
10108908:	01400044 	movi	r5,1
1010890c:	dcc00515 	stw	r19,20(sp)
10108910:	dc800415 	stw	r18,16(sp)
10108914:	dfc00715 	stw	ra,28(sp)
10108918:	3825883a 	mov	r18,r7
1010891c:	8822d57a 	srli	r17,r17,21
10108920:	0107c580 	call	10107c58 <_Balloc>
10108924:	1027883a 	mov	r19,r2
10108928:	00800434 	movhi	r2,16
1010892c:	10bfffc4 	addi	r2,r2,-1
10108930:	808c703a 	and	r6,r16,r2
10108934:	88000126 	beq	r17,zero,1010893c <__d2b+0x50>
10108938:	31800434 	orhi	r6,r6,16
1010893c:	d9800015 	stw	r6,0(sp)
10108940:	a0002426 	beq	r20,zero,101089d4 <__d2b+0xe8>
10108944:	d9000104 	addi	r4,sp,4
10108948:	dd000115 	stw	r20,4(sp)
1010894c:	0107fb40 	call	10107fb4 <__lo0bits>
10108950:	d8c00017 	ldw	r3,0(sp)
10108954:	10002f1e 	bne	r2,zero,10108a14 <__d2b+0x128>
10108958:	d9000117 	ldw	r4,4(sp)
1010895c:	99000515 	stw	r4,20(r19)
10108960:	1821003a 	cmpeq	r16,r3,zero
10108964:	01000084 	movi	r4,2
10108968:	2421c83a 	sub	r16,r4,r16
1010896c:	98c00615 	stw	r3,24(r19)
10108970:	9c000415 	stw	r16,16(r19)
10108974:	88001f1e 	bne	r17,zero,101089f4 <__d2b+0x108>
10108978:	10bef384 	addi	r2,r2,-1074
1010897c:	90800015 	stw	r2,0(r18)
10108980:	00900034 	movhi	r2,16384
10108984:	10bfffc4 	addi	r2,r2,-1
10108988:	8085883a 	add	r2,r16,r2
1010898c:	1085883a 	add	r2,r2,r2
10108990:	1085883a 	add	r2,r2,r2
10108994:	9885883a 	add	r2,r19,r2
10108998:	11000517 	ldw	r4,20(r2)
1010899c:	8020917a 	slli	r16,r16,5
101089a0:	0107f4c0 	call	10107f4c <__hi0bits>
101089a4:	d8c00817 	ldw	r3,32(sp)
101089a8:	8085c83a 	sub	r2,r16,r2
101089ac:	18800015 	stw	r2,0(r3)
101089b0:	9805883a 	mov	r2,r19
101089b4:	dfc00717 	ldw	ra,28(sp)
101089b8:	dd000617 	ldw	r20,24(sp)
101089bc:	dcc00517 	ldw	r19,20(sp)
101089c0:	dc800417 	ldw	r18,16(sp)
101089c4:	dc400317 	ldw	r17,12(sp)
101089c8:	dc000217 	ldw	r16,8(sp)
101089cc:	dec00804 	addi	sp,sp,32
101089d0:	f800283a 	ret
101089d4:	d809883a 	mov	r4,sp
101089d8:	0107fb40 	call	10107fb4 <__lo0bits>
101089dc:	d8c00017 	ldw	r3,0(sp)
101089e0:	04000044 	movi	r16,1
101089e4:	9c000415 	stw	r16,16(r19)
101089e8:	98c00515 	stw	r3,20(r19)
101089ec:	10800804 	addi	r2,r2,32
101089f0:	883fe126 	beq	r17,zero,10108978 <__alt_data_end+0xfffe8978>
101089f4:	00c00d44 	movi	r3,53
101089f8:	8c7ef344 	addi	r17,r17,-1075
101089fc:	88a3883a 	add	r17,r17,r2
10108a00:	1885c83a 	sub	r2,r3,r2
10108a04:	d8c00817 	ldw	r3,32(sp)
10108a08:	94400015 	stw	r17,0(r18)
10108a0c:	18800015 	stw	r2,0(r3)
10108a10:	003fe706 	br	101089b0 <__alt_data_end+0xfffe89b0>
10108a14:	01000804 	movi	r4,32
10108a18:	2089c83a 	sub	r4,r4,r2
10108a1c:	1908983a 	sll	r4,r3,r4
10108a20:	d9400117 	ldw	r5,4(sp)
10108a24:	1886d83a 	srl	r3,r3,r2
10108a28:	2148b03a 	or	r4,r4,r5
10108a2c:	99000515 	stw	r4,20(r19)
10108a30:	d8c00015 	stw	r3,0(sp)
10108a34:	003fca06 	br	10108960 <__alt_data_end+0xfffe8960>

10108a38 <__ratio>:
10108a38:	defff904 	addi	sp,sp,-28
10108a3c:	dc400315 	stw	r17,12(sp)
10108a40:	2823883a 	mov	r17,r5
10108a44:	d9400104 	addi	r5,sp,4
10108a48:	dfc00615 	stw	ra,24(sp)
10108a4c:	dcc00515 	stw	r19,20(sp)
10108a50:	dc800415 	stw	r18,16(sp)
10108a54:	2027883a 	mov	r19,r4
10108a58:	dc000215 	stw	r16,8(sp)
10108a5c:	01087e00 	call	101087e0 <__b2d>
10108a60:	d80b883a 	mov	r5,sp
10108a64:	8809883a 	mov	r4,r17
10108a68:	1025883a 	mov	r18,r2
10108a6c:	1821883a 	mov	r16,r3
10108a70:	01087e00 	call	101087e0 <__b2d>
10108a74:	8a000417 	ldw	r8,16(r17)
10108a78:	99000417 	ldw	r4,16(r19)
10108a7c:	d9400117 	ldw	r5,4(sp)
10108a80:	2209c83a 	sub	r4,r4,r8
10108a84:	2010917a 	slli	r8,r4,5
10108a88:	d9000017 	ldw	r4,0(sp)
10108a8c:	2909c83a 	sub	r4,r5,r4
10108a90:	4109883a 	add	r4,r8,r4
10108a94:	01000e0e 	bge	zero,r4,10108ad0 <__ratio+0x98>
10108a98:	2008953a 	slli	r4,r4,20
10108a9c:	2421883a 	add	r16,r4,r16
10108aa0:	100d883a 	mov	r6,r2
10108aa4:	180f883a 	mov	r7,r3
10108aa8:	9009883a 	mov	r4,r18
10108aac:	800b883a 	mov	r5,r16
10108ab0:	010c9c80 	call	1010c9c8 <__divdf3>
10108ab4:	dfc00617 	ldw	ra,24(sp)
10108ab8:	dcc00517 	ldw	r19,20(sp)
10108abc:	dc800417 	ldw	r18,16(sp)
10108ac0:	dc400317 	ldw	r17,12(sp)
10108ac4:	dc000217 	ldw	r16,8(sp)
10108ac8:	dec00704 	addi	sp,sp,28
10108acc:	f800283a 	ret
10108ad0:	2008953a 	slli	r4,r4,20
10108ad4:	1907c83a 	sub	r3,r3,r4
10108ad8:	003ff106 	br	10108aa0 <__alt_data_end+0xfffe8aa0>

10108adc <_mprec_log10>:
10108adc:	defffe04 	addi	sp,sp,-8
10108ae0:	dc000015 	stw	r16,0(sp)
10108ae4:	dfc00115 	stw	ra,4(sp)
10108ae8:	008005c4 	movi	r2,23
10108aec:	2021883a 	mov	r16,r4
10108af0:	11000d0e 	bge	r2,r4,10108b28 <_mprec_log10+0x4c>
10108af4:	0005883a 	mov	r2,zero
10108af8:	00cffc34 	movhi	r3,16368
10108afc:	843fffc4 	addi	r16,r16,-1
10108b00:	000d883a 	mov	r6,zero
10108b04:	01d00934 	movhi	r7,16420
10108b08:	1009883a 	mov	r4,r2
10108b0c:	180b883a 	mov	r5,r3
10108b10:	010d5080 	call	1010d508 <__muldf3>
10108b14:	803ff91e 	bne	r16,zero,10108afc <__alt_data_end+0xfffe8afc>
10108b18:	dfc00117 	ldw	ra,4(sp)
10108b1c:	dc000017 	ldw	r16,0(sp)
10108b20:	dec00204 	addi	sp,sp,8
10108b24:	f800283a 	ret
10108b28:	202090fa 	slli	r16,r4,3
10108b2c:	00840474 	movhi	r2,4113
10108b30:	1085d004 	addi	r2,r2,5952
10108b34:	1421883a 	add	r16,r2,r16
10108b38:	80800017 	ldw	r2,0(r16)
10108b3c:	80c00117 	ldw	r3,4(r16)
10108b40:	dfc00117 	ldw	ra,4(sp)
10108b44:	dc000017 	ldw	r16,0(sp)
10108b48:	dec00204 	addi	sp,sp,8
10108b4c:	f800283a 	ret

10108b50 <__copybits>:
10108b50:	297fffc4 	addi	r5,r5,-1
10108b54:	280fd17a 	srai	r7,r5,5
10108b58:	30c00417 	ldw	r3,16(r6)
10108b5c:	30800504 	addi	r2,r6,20
10108b60:	39c00044 	addi	r7,r7,1
10108b64:	18c7883a 	add	r3,r3,r3
10108b68:	39cf883a 	add	r7,r7,r7
10108b6c:	18c7883a 	add	r3,r3,r3
10108b70:	39cf883a 	add	r7,r7,r7
10108b74:	10c7883a 	add	r3,r2,r3
10108b78:	21cf883a 	add	r7,r4,r7
10108b7c:	10c00d2e 	bgeu	r2,r3,10108bb4 <__copybits+0x64>
10108b80:	200b883a 	mov	r5,r4
10108b84:	12000017 	ldw	r8,0(r2)
10108b88:	29400104 	addi	r5,r5,4
10108b8c:	10800104 	addi	r2,r2,4
10108b90:	2a3fff15 	stw	r8,-4(r5)
10108b94:	10fffb36 	bltu	r2,r3,10108b84 <__alt_data_end+0xfffe8b84>
10108b98:	1985c83a 	sub	r2,r3,r6
10108b9c:	10bffac4 	addi	r2,r2,-21
10108ba0:	1004d0ba 	srli	r2,r2,2
10108ba4:	10800044 	addi	r2,r2,1
10108ba8:	1085883a 	add	r2,r2,r2
10108bac:	1085883a 	add	r2,r2,r2
10108bb0:	2089883a 	add	r4,r4,r2
10108bb4:	21c0032e 	bgeu	r4,r7,10108bc4 <__copybits+0x74>
10108bb8:	20000015 	stw	zero,0(r4)
10108bbc:	21000104 	addi	r4,r4,4
10108bc0:	21fffd36 	bltu	r4,r7,10108bb8 <__alt_data_end+0xfffe8bb8>
10108bc4:	f800283a 	ret

10108bc8 <__any_on>:
10108bc8:	20c00417 	ldw	r3,16(r4)
10108bcc:	2805d17a 	srai	r2,r5,5
10108bd0:	21000504 	addi	r4,r4,20
10108bd4:	18800d0e 	bge	r3,r2,10108c0c <__any_on+0x44>
10108bd8:	18c7883a 	add	r3,r3,r3
10108bdc:	18c7883a 	add	r3,r3,r3
10108be0:	20c7883a 	add	r3,r4,r3
10108be4:	20c0192e 	bgeu	r4,r3,10108c4c <__any_on+0x84>
10108be8:	18bfff17 	ldw	r2,-4(r3)
10108bec:	18ffff04 	addi	r3,r3,-4
10108bf0:	1000041e 	bne	r2,zero,10108c04 <__any_on+0x3c>
10108bf4:	20c0142e 	bgeu	r4,r3,10108c48 <__any_on+0x80>
10108bf8:	18ffff04 	addi	r3,r3,-4
10108bfc:	19400017 	ldw	r5,0(r3)
10108c00:	283ffc26 	beq	r5,zero,10108bf4 <__alt_data_end+0xfffe8bf4>
10108c04:	00800044 	movi	r2,1
10108c08:	f800283a 	ret
10108c0c:	10c00a0e 	bge	r2,r3,10108c38 <__any_on+0x70>
10108c10:	1085883a 	add	r2,r2,r2
10108c14:	1085883a 	add	r2,r2,r2
10108c18:	294007cc 	andi	r5,r5,31
10108c1c:	2087883a 	add	r3,r4,r2
10108c20:	283ff026 	beq	r5,zero,10108be4 <__alt_data_end+0xfffe8be4>
10108c24:	19800017 	ldw	r6,0(r3)
10108c28:	3144d83a 	srl	r2,r6,r5
10108c2c:	114a983a 	sll	r5,r2,r5
10108c30:	317ff41e 	bne	r6,r5,10108c04 <__alt_data_end+0xfffe8c04>
10108c34:	003feb06 	br	10108be4 <__alt_data_end+0xfffe8be4>
10108c38:	1085883a 	add	r2,r2,r2
10108c3c:	1085883a 	add	r2,r2,r2
10108c40:	2087883a 	add	r3,r4,r2
10108c44:	003fe706 	br	10108be4 <__alt_data_end+0xfffe8be4>
10108c48:	f800283a 	ret
10108c4c:	0005883a 	mov	r2,zero
10108c50:	f800283a 	ret

10108c54 <_read_r>:
10108c54:	defffd04 	addi	sp,sp,-12
10108c58:	2805883a 	mov	r2,r5
10108c5c:	dc000015 	stw	r16,0(sp)
10108c60:	04040474 	movhi	r16,4113
10108c64:	dc400115 	stw	r17,4(sp)
10108c68:	300b883a 	mov	r5,r6
10108c6c:	84140804 	addi	r16,r16,20512
10108c70:	2023883a 	mov	r17,r4
10108c74:	380d883a 	mov	r6,r7
10108c78:	1009883a 	mov	r4,r2
10108c7c:	dfc00215 	stw	ra,8(sp)
10108c80:	80000015 	stw	zero,0(r16)
10108c84:	010f05c0 	call	1010f05c <read>
10108c88:	00ffffc4 	movi	r3,-1
10108c8c:	10c00526 	beq	r2,r3,10108ca4 <_read_r+0x50>
10108c90:	dfc00217 	ldw	ra,8(sp)
10108c94:	dc400117 	ldw	r17,4(sp)
10108c98:	dc000017 	ldw	r16,0(sp)
10108c9c:	dec00304 	addi	sp,sp,12
10108ca0:	f800283a 	ret
10108ca4:	80c00017 	ldw	r3,0(r16)
10108ca8:	183ff926 	beq	r3,zero,10108c90 <__alt_data_end+0xfffe8c90>
10108cac:	88c00015 	stw	r3,0(r17)
10108cb0:	003ff706 	br	10108c90 <__alt_data_end+0xfffe8c90>

10108cb4 <__fpclassifyd>:
10108cb4:	00a00034 	movhi	r2,32768
10108cb8:	10bfffc4 	addi	r2,r2,-1
10108cbc:	2884703a 	and	r2,r5,r2
10108cc0:	10000726 	beq	r2,zero,10108ce0 <__fpclassifyd+0x2c>
10108cc4:	00fffc34 	movhi	r3,65520
10108cc8:	019ff834 	movhi	r6,32736
10108ccc:	28c7883a 	add	r3,r5,r3
10108cd0:	31bfffc4 	addi	r6,r6,-1
10108cd4:	30c00536 	bltu	r6,r3,10108cec <__fpclassifyd+0x38>
10108cd8:	00800104 	movi	r2,4
10108cdc:	f800283a 	ret
10108ce0:	2000021e 	bne	r4,zero,10108cec <__fpclassifyd+0x38>
10108ce4:	00800084 	movi	r2,2
10108ce8:	f800283a 	ret
10108cec:	00dffc34 	movhi	r3,32752
10108cf0:	019ff834 	movhi	r6,32736
10108cf4:	28cb883a 	add	r5,r5,r3
10108cf8:	31bfffc4 	addi	r6,r6,-1
10108cfc:	317ff62e 	bgeu	r6,r5,10108cd8 <__alt_data_end+0xfffe8cd8>
10108d00:	01400434 	movhi	r5,16
10108d04:	297fffc4 	addi	r5,r5,-1
10108d08:	28800236 	bltu	r5,r2,10108d14 <__fpclassifyd+0x60>
10108d0c:	008000c4 	movi	r2,3
10108d10:	f800283a 	ret
10108d14:	10c00226 	beq	r2,r3,10108d20 <__fpclassifyd+0x6c>
10108d18:	0005883a 	mov	r2,zero
10108d1c:	f800283a 	ret
10108d20:	2005003a 	cmpeq	r2,r4,zero
10108d24:	f800283a 	ret

10108d28 <strcmp>:
10108d28:	2144b03a 	or	r2,r4,r5
10108d2c:	108000cc 	andi	r2,r2,3
10108d30:	1000171e 	bne	r2,zero,10108d90 <strcmp+0x68>
10108d34:	20800017 	ldw	r2,0(r4)
10108d38:	28c00017 	ldw	r3,0(r5)
10108d3c:	10c0141e 	bne	r2,r3,10108d90 <strcmp+0x68>
10108d40:	027fbff4 	movhi	r9,65279
10108d44:	4a7fbfc4 	addi	r9,r9,-257
10108d48:	0086303a 	nor	r3,zero,r2
10108d4c:	02202074 	movhi	r8,32897
10108d50:	1245883a 	add	r2,r2,r9
10108d54:	42202004 	addi	r8,r8,-32640
10108d58:	10c4703a 	and	r2,r2,r3
10108d5c:	1204703a 	and	r2,r2,r8
10108d60:	10000226 	beq	r2,zero,10108d6c <strcmp+0x44>
10108d64:	00002306 	br	10108df4 <strcmp+0xcc>
10108d68:	1000221e 	bne	r2,zero,10108df4 <strcmp+0xcc>
10108d6c:	21000104 	addi	r4,r4,4
10108d70:	20c00017 	ldw	r3,0(r4)
10108d74:	29400104 	addi	r5,r5,4
10108d78:	29800017 	ldw	r6,0(r5)
10108d7c:	1a4f883a 	add	r7,r3,r9
10108d80:	00c4303a 	nor	r2,zero,r3
10108d84:	3884703a 	and	r2,r7,r2
10108d88:	1204703a 	and	r2,r2,r8
10108d8c:	19bff626 	beq	r3,r6,10108d68 <__alt_data_end+0xfffe8d68>
10108d90:	20800003 	ldbu	r2,0(r4)
10108d94:	10c03fcc 	andi	r3,r2,255
10108d98:	18c0201c 	xori	r3,r3,128
10108d9c:	18ffe004 	addi	r3,r3,-128
10108da0:	18000c26 	beq	r3,zero,10108dd4 <strcmp+0xac>
10108da4:	29800007 	ldb	r6,0(r5)
10108da8:	19800326 	beq	r3,r6,10108db8 <strcmp+0x90>
10108dac:	00001306 	br	10108dfc <strcmp+0xd4>
10108db0:	29800007 	ldb	r6,0(r5)
10108db4:	11800b1e 	bne	r2,r6,10108de4 <strcmp+0xbc>
10108db8:	21000044 	addi	r4,r4,1
10108dbc:	20c00003 	ldbu	r3,0(r4)
10108dc0:	29400044 	addi	r5,r5,1
10108dc4:	18803fcc 	andi	r2,r3,255
10108dc8:	1080201c 	xori	r2,r2,128
10108dcc:	10bfe004 	addi	r2,r2,-128
10108dd0:	103ff71e 	bne	r2,zero,10108db0 <__alt_data_end+0xfffe8db0>
10108dd4:	0007883a 	mov	r3,zero
10108dd8:	28800003 	ldbu	r2,0(r5)
10108ddc:	1885c83a 	sub	r2,r3,r2
10108de0:	f800283a 	ret
10108de4:	28800003 	ldbu	r2,0(r5)
10108de8:	18c03fcc 	andi	r3,r3,255
10108dec:	1885c83a 	sub	r2,r3,r2
10108df0:	f800283a 	ret
10108df4:	0005883a 	mov	r2,zero
10108df8:	f800283a 	ret
10108dfc:	10c03fcc 	andi	r3,r2,255
10108e00:	003ff506 	br	10108dd8 <__alt_data_end+0xfffe8dd8>

10108e04 <strlen>:
10108e04:	208000cc 	andi	r2,r4,3
10108e08:	10002026 	beq	r2,zero,10108e8c <strlen+0x88>
10108e0c:	20800007 	ldb	r2,0(r4)
10108e10:	10002026 	beq	r2,zero,10108e94 <strlen+0x90>
10108e14:	2005883a 	mov	r2,r4
10108e18:	00000206 	br	10108e24 <strlen+0x20>
10108e1c:	10c00007 	ldb	r3,0(r2)
10108e20:	18001826 	beq	r3,zero,10108e84 <strlen+0x80>
10108e24:	10800044 	addi	r2,r2,1
10108e28:	10c000cc 	andi	r3,r2,3
10108e2c:	183ffb1e 	bne	r3,zero,10108e1c <__alt_data_end+0xfffe8e1c>
10108e30:	10c00017 	ldw	r3,0(r2)
10108e34:	01ffbff4 	movhi	r7,65279
10108e38:	39ffbfc4 	addi	r7,r7,-257
10108e3c:	00ca303a 	nor	r5,zero,r3
10108e40:	01a02074 	movhi	r6,32897
10108e44:	19c7883a 	add	r3,r3,r7
10108e48:	31a02004 	addi	r6,r6,-32640
10108e4c:	1946703a 	and	r3,r3,r5
10108e50:	1986703a 	and	r3,r3,r6
10108e54:	1800091e 	bne	r3,zero,10108e7c <strlen+0x78>
10108e58:	10800104 	addi	r2,r2,4
10108e5c:	10c00017 	ldw	r3,0(r2)
10108e60:	19cb883a 	add	r5,r3,r7
10108e64:	00c6303a 	nor	r3,zero,r3
10108e68:	28c6703a 	and	r3,r5,r3
10108e6c:	1986703a 	and	r3,r3,r6
10108e70:	183ff926 	beq	r3,zero,10108e58 <__alt_data_end+0xfffe8e58>
10108e74:	00000106 	br	10108e7c <strlen+0x78>
10108e78:	10800044 	addi	r2,r2,1
10108e7c:	10c00007 	ldb	r3,0(r2)
10108e80:	183ffd1e 	bne	r3,zero,10108e78 <__alt_data_end+0xfffe8e78>
10108e84:	1105c83a 	sub	r2,r2,r4
10108e88:	f800283a 	ret
10108e8c:	2005883a 	mov	r2,r4
10108e90:	003fe706 	br	10108e30 <__alt_data_end+0xfffe8e30>
10108e94:	0005883a 	mov	r2,zero
10108e98:	f800283a 	ret

10108e9c <__sprint_r.part.0>:
10108e9c:	28801917 	ldw	r2,100(r5)
10108ea0:	defff604 	addi	sp,sp,-40
10108ea4:	dd400515 	stw	r21,20(sp)
10108ea8:	dfc00915 	stw	ra,36(sp)
10108eac:	df000815 	stw	fp,32(sp)
10108eb0:	ddc00715 	stw	r23,28(sp)
10108eb4:	dd800615 	stw	r22,24(sp)
10108eb8:	dd000415 	stw	r20,16(sp)
10108ebc:	dcc00315 	stw	r19,12(sp)
10108ec0:	dc800215 	stw	r18,8(sp)
10108ec4:	dc400115 	stw	r17,4(sp)
10108ec8:	dc000015 	stw	r16,0(sp)
10108ecc:	1088000c 	andi	r2,r2,8192
10108ed0:	302b883a 	mov	r21,r6
10108ed4:	10002e26 	beq	r2,zero,10108f90 <__sprint_r.part.0+0xf4>
10108ed8:	30800217 	ldw	r2,8(r6)
10108edc:	35800017 	ldw	r22,0(r6)
10108ee0:	10002926 	beq	r2,zero,10108f88 <__sprint_r.part.0+0xec>
10108ee4:	2827883a 	mov	r19,r5
10108ee8:	2029883a 	mov	r20,r4
10108eec:	b5c00104 	addi	r23,r22,4
10108ef0:	04bfffc4 	movi	r18,-1
10108ef4:	bc400017 	ldw	r17,0(r23)
10108ef8:	b4000017 	ldw	r16,0(r22)
10108efc:	0039883a 	mov	fp,zero
10108f00:	8822d0ba 	srli	r17,r17,2
10108f04:	8800031e 	bne	r17,zero,10108f14 <__sprint_r.part.0+0x78>
10108f08:	00001806 	br	10108f6c <__sprint_r.part.0+0xd0>
10108f0c:	84000104 	addi	r16,r16,4
10108f10:	8f001526 	beq	r17,fp,10108f68 <__sprint_r.part.0+0xcc>
10108f14:	81400017 	ldw	r5,0(r16)
10108f18:	980d883a 	mov	r6,r19
10108f1c:	a009883a 	mov	r4,r20
10108f20:	010a70c0 	call	1010a70c <_fputwc_r>
10108f24:	e7000044 	addi	fp,fp,1
10108f28:	14bff81e 	bne	r2,r18,10108f0c <__alt_data_end+0xfffe8f0c>
10108f2c:	9005883a 	mov	r2,r18
10108f30:	a8000215 	stw	zero,8(r21)
10108f34:	a8000115 	stw	zero,4(r21)
10108f38:	dfc00917 	ldw	ra,36(sp)
10108f3c:	df000817 	ldw	fp,32(sp)
10108f40:	ddc00717 	ldw	r23,28(sp)
10108f44:	dd800617 	ldw	r22,24(sp)
10108f48:	dd400517 	ldw	r21,20(sp)
10108f4c:	dd000417 	ldw	r20,16(sp)
10108f50:	dcc00317 	ldw	r19,12(sp)
10108f54:	dc800217 	ldw	r18,8(sp)
10108f58:	dc400117 	ldw	r17,4(sp)
10108f5c:	dc000017 	ldw	r16,0(sp)
10108f60:	dec00a04 	addi	sp,sp,40
10108f64:	f800283a 	ret
10108f68:	a8800217 	ldw	r2,8(r21)
10108f6c:	8c63883a 	add	r17,r17,r17
10108f70:	8c63883a 	add	r17,r17,r17
10108f74:	1445c83a 	sub	r2,r2,r17
10108f78:	a8800215 	stw	r2,8(r21)
10108f7c:	b5800204 	addi	r22,r22,8
10108f80:	bdc00204 	addi	r23,r23,8
10108f84:	103fdb1e 	bne	r2,zero,10108ef4 <__alt_data_end+0xfffe8ef4>
10108f88:	0005883a 	mov	r2,zero
10108f8c:	003fe806 	br	10108f30 <__alt_data_end+0xfffe8f30>
10108f90:	010a7b00 	call	1010a7b0 <__sfvwrite_r>
10108f94:	003fe606 	br	10108f30 <__alt_data_end+0xfffe8f30>

10108f98 <__sprint_r>:
10108f98:	30c00217 	ldw	r3,8(r6)
10108f9c:	18000126 	beq	r3,zero,10108fa4 <__sprint_r+0xc>
10108fa0:	0108e9c1 	jmpi	10108e9c <__sprint_r.part.0>
10108fa4:	30000115 	stw	zero,4(r6)
10108fa8:	0005883a 	mov	r2,zero
10108fac:	f800283a 	ret

10108fb0 <___vfiprintf_internal_r>:
10108fb0:	deffc904 	addi	sp,sp,-220
10108fb4:	df003515 	stw	fp,212(sp)
10108fb8:	dd003115 	stw	r20,196(sp)
10108fbc:	dfc03615 	stw	ra,216(sp)
10108fc0:	ddc03415 	stw	r23,208(sp)
10108fc4:	dd803315 	stw	r22,204(sp)
10108fc8:	dd403215 	stw	r21,200(sp)
10108fcc:	dcc03015 	stw	r19,192(sp)
10108fd0:	dc802f15 	stw	r18,188(sp)
10108fd4:	dc402e15 	stw	r17,184(sp)
10108fd8:	dc002d15 	stw	r16,180(sp)
10108fdc:	d9002015 	stw	r4,128(sp)
10108fe0:	d9c02215 	stw	r7,136(sp)
10108fe4:	2829883a 	mov	r20,r5
10108fe8:	3039883a 	mov	fp,r6
10108fec:	20000226 	beq	r4,zero,10108ff8 <___vfiprintf_internal_r+0x48>
10108ff0:	20800e17 	ldw	r2,56(r4)
10108ff4:	1000cf26 	beq	r2,zero,10109334 <___vfiprintf_internal_r+0x384>
10108ff8:	a080030b 	ldhu	r2,12(r20)
10108ffc:	10c8000c 	andi	r3,r2,8192
10109000:	1800061e 	bne	r3,zero,1010901c <___vfiprintf_internal_r+0x6c>
10109004:	a1001917 	ldw	r4,100(r20)
10109008:	00f7ffc4 	movi	r3,-8193
1010900c:	10880014 	ori	r2,r2,8192
10109010:	20c6703a 	and	r3,r4,r3
10109014:	a080030d 	sth	r2,12(r20)
10109018:	a0c01915 	stw	r3,100(r20)
1010901c:	10c0020c 	andi	r3,r2,8
10109020:	1800a926 	beq	r3,zero,101092c8 <___vfiprintf_internal_r+0x318>
10109024:	a0c00417 	ldw	r3,16(r20)
10109028:	1800a726 	beq	r3,zero,101092c8 <___vfiprintf_internal_r+0x318>
1010902c:	1080068c 	andi	r2,r2,26
10109030:	00c00284 	movi	r3,10
10109034:	10c0ac26 	beq	r2,r3,101092e8 <___vfiprintf_internal_r+0x338>
10109038:	da801a04 	addi	r10,sp,104
1010903c:	da801e15 	stw	r10,120(sp)
10109040:	d8801e17 	ldw	r2,120(sp)
10109044:	da8019c4 	addi	r10,sp,103
10109048:	05840474 	movhi	r22,4113
1010904c:	05c40474 	movhi	r23,4113
10109050:	da801f15 	stw	r10,124(sp)
10109054:	1295c83a 	sub	r10,r2,r10
10109058:	b5860604 	addi	r22,r22,6168
1010905c:	bdc60204 	addi	r23,r23,6152
10109060:	dec01a15 	stw	sp,104(sp)
10109064:	d8001c15 	stw	zero,112(sp)
10109068:	d8001b15 	stw	zero,108(sp)
1010906c:	d8002615 	stw	zero,152(sp)
10109070:	d8002315 	stw	zero,140(sp)
10109074:	da802715 	stw	r10,156(sp)
10109078:	d811883a 	mov	r8,sp
1010907c:	dd002115 	stw	r20,132(sp)
10109080:	e021883a 	mov	r16,fp
10109084:	80800007 	ldb	r2,0(r16)
10109088:	1003ea26 	beq	r2,zero,1010a034 <___vfiprintf_internal_r+0x1084>
1010908c:	00c00944 	movi	r3,37
10109090:	8025883a 	mov	r18,r16
10109094:	10c0021e 	bne	r2,r3,101090a0 <___vfiprintf_internal_r+0xf0>
10109098:	00001606 	br	101090f4 <___vfiprintf_internal_r+0x144>
1010909c:	10c00326 	beq	r2,r3,101090ac <___vfiprintf_internal_r+0xfc>
101090a0:	94800044 	addi	r18,r18,1
101090a4:	90800007 	ldb	r2,0(r18)
101090a8:	103ffc1e 	bne	r2,zero,1010909c <__alt_data_end+0xfffe909c>
101090ac:	9423c83a 	sub	r17,r18,r16
101090b0:	88001026 	beq	r17,zero,101090f4 <___vfiprintf_internal_r+0x144>
101090b4:	d8c01c17 	ldw	r3,112(sp)
101090b8:	d8801b17 	ldw	r2,108(sp)
101090bc:	44000015 	stw	r16,0(r8)
101090c0:	88c7883a 	add	r3,r17,r3
101090c4:	10800044 	addi	r2,r2,1
101090c8:	44400115 	stw	r17,4(r8)
101090cc:	d8c01c15 	stw	r3,112(sp)
101090d0:	d8801b15 	stw	r2,108(sp)
101090d4:	010001c4 	movi	r4,7
101090d8:	2080760e 	bge	r4,r2,101092b4 <___vfiprintf_internal_r+0x304>
101090dc:	1803821e 	bne	r3,zero,10109ee8 <___vfiprintf_internal_r+0xf38>
101090e0:	da802317 	ldw	r10,140(sp)
101090e4:	d8001b15 	stw	zero,108(sp)
101090e8:	d811883a 	mov	r8,sp
101090ec:	5455883a 	add	r10,r10,r17
101090f0:	da802315 	stw	r10,140(sp)
101090f4:	90800007 	ldb	r2,0(r18)
101090f8:	10044626 	beq	r2,zero,1010a214 <___vfiprintf_internal_r+0x1264>
101090fc:	90c00047 	ldb	r3,1(r18)
10109100:	94000044 	addi	r16,r18,1
10109104:	d8001d85 	stb	zero,118(sp)
10109108:	0009883a 	mov	r4,zero
1010910c:	000f883a 	mov	r7,zero
10109110:	027fffc4 	movi	r9,-1
10109114:	0023883a 	mov	r17,zero
10109118:	0029883a 	mov	r20,zero
1010911c:	01401604 	movi	r5,88
10109120:	01800244 	movi	r6,9
10109124:	03400a84 	movi	r13,42
10109128:	03001b04 	movi	r12,108
1010912c:	84000044 	addi	r16,r16,1
10109130:	18bff804 	addi	r2,r3,-32
10109134:	28827336 	bltu	r5,r2,10109b04 <___vfiprintf_internal_r+0xb54>
10109138:	100490ba 	slli	r2,r2,2
1010913c:	02840474 	movhi	r10,4113
10109140:	52a45404 	addi	r10,r10,-28336
10109144:	1285883a 	add	r2,r2,r10
10109148:	10800017 	ldw	r2,0(r2)
1010914c:	1000683a 	jmp	r2
10109150:	10109838 	rdprs	zero,r2,16992
10109154:	10109b04 	addi	zero,r2,17004
10109158:	10109b04 	addi	zero,r2,17004
1010915c:	10109858 	cmpnei	zero,r2,16993
10109160:	10109b04 	addi	zero,r2,17004
10109164:	10109b04 	addi	zero,r2,17004
10109168:	10109b04 	addi	zero,r2,17004
1010916c:	10109b04 	addi	zero,r2,17004
10109170:	10109b04 	addi	zero,r2,17004
10109174:	10109b04 	addi	zero,r2,17004
10109178:	10109a40 	call	110109a4 <__alt_data_end+0xef09a4>
1010917c:	10109a5c 	xori	zero,r2,17001
10109180:	10109b04 	addi	zero,r2,17004
10109184:	10109344 	addi	zero,r2,16973
10109188:	10109a6c 	andhi	zero,r2,17001
1010918c:	10109b04 	addi	zero,r2,17004
10109190:	10109864 	muli	zero,r2,16993
10109194:	10109870 	cmpltui	zero,r2,16993
10109198:	10109870 	cmpltui	zero,r2,16993
1010919c:	10109870 	cmpltui	zero,r2,16993
101091a0:	10109870 	cmpltui	zero,r2,16993
101091a4:	10109870 	cmpltui	zero,r2,16993
101091a8:	10109870 	cmpltui	zero,r2,16993
101091ac:	10109870 	cmpltui	zero,r2,16993
101091b0:	10109870 	cmpltui	zero,r2,16993
101091b4:	10109870 	cmpltui	zero,r2,16993
101091b8:	10109b04 	addi	zero,r2,17004
101091bc:	10109b04 	addi	zero,r2,17004
101091c0:	10109b04 	addi	zero,r2,17004
101091c4:	10109b04 	addi	zero,r2,17004
101091c8:	10109b04 	addi	zero,r2,17004
101091cc:	10109b04 	addi	zero,r2,17004
101091d0:	10109b04 	addi	zero,r2,17004
101091d4:	10109b04 	addi	zero,r2,17004
101091d8:	10109b04 	addi	zero,r2,17004
101091dc:	10109b04 	addi	zero,r2,17004
101091e0:	1010989c 	xori	zero,r2,16994
101091e4:	10109b04 	addi	zero,r2,17004
101091e8:	10109b04 	addi	zero,r2,17004
101091ec:	10109b04 	addi	zero,r2,17004
101091f0:	10109b04 	addi	zero,r2,17004
101091f4:	10109b04 	addi	zero,r2,17004
101091f8:	10109b04 	addi	zero,r2,17004
101091fc:	10109b04 	addi	zero,r2,17004
10109200:	10109b04 	addi	zero,r2,17004
10109204:	10109b04 	addi	zero,r2,17004
10109208:	10109b04 	addi	zero,r2,17004
1010920c:	101098d4 	ori	zero,r2,16995
10109210:	10109b04 	addi	zero,r2,17004
10109214:	10109b04 	addi	zero,r2,17004
10109218:	10109b04 	addi	zero,r2,17004
1010921c:	10109b04 	addi	zero,r2,17004
10109220:	10109b04 	addi	zero,r2,17004
10109224:	1010992c 	andhi	zero,r2,16996
10109228:	10109b04 	addi	zero,r2,17004
1010922c:	10109b04 	addi	zero,r2,17004
10109230:	1010999c 	xori	zero,r2,16998
10109234:	10109b04 	addi	zero,r2,17004
10109238:	10109b04 	addi	zero,r2,17004
1010923c:	10109b04 	addi	zero,r2,17004
10109240:	10109b04 	addi	zero,r2,17004
10109244:	10109b04 	addi	zero,r2,17004
10109248:	10109b04 	addi	zero,r2,17004
1010924c:	10109b04 	addi	zero,r2,17004
10109250:	10109b04 	addi	zero,r2,17004
10109254:	10109b04 	addi	zero,r2,17004
10109258:	10109b04 	addi	zero,r2,17004
1010925c:	10109748 	cmpgei	zero,r2,16989
10109260:	10109774 	orhi	zero,r2,16989
10109264:	10109b04 	addi	zero,r2,17004
10109268:	10109b04 	addi	zero,r2,17004
1010926c:	10109b04 	addi	zero,r2,17004
10109270:	10109aac 	andhi	zero,r2,17002
10109274:	10109774 	orhi	zero,r2,16989
10109278:	10109b04 	addi	zero,r2,17004
1010927c:	10109b04 	addi	zero,r2,17004
10109280:	10109608 	cmpgei	zero,r2,16984
10109284:	10109b04 	addi	zero,r2,17004
10109288:	10109618 	cmpnei	zero,r2,16984
1010928c:	10109654 	ori	zero,r2,16985
10109290:	10109350 	cmplti	zero,r2,16973
10109294:	101095fc 	xorhi	zero,r2,16983
10109298:	10109b04 	addi	zero,r2,17004
1010929c:	101099d8 	cmpnei	zero,r2,16999
101092a0:	10109b04 	addi	zero,r2,17004
101092a4:	10109a30 	cmpltui	zero,r2,17000
101092a8:	10109b04 	addi	zero,r2,17004
101092ac:	10109b04 	addi	zero,r2,17004
101092b0:	101096f4 	orhi	zero,r2,16987
101092b4:	42000204 	addi	r8,r8,8
101092b8:	da802317 	ldw	r10,140(sp)
101092bc:	5455883a 	add	r10,r10,r17
101092c0:	da802315 	stw	r10,140(sp)
101092c4:	003f8b06 	br	101090f4 <__alt_data_end+0xfffe90f4>
101092c8:	d9002017 	ldw	r4,128(sp)
101092cc:	a00b883a 	mov	r5,r20
101092d0:	0105dc00 	call	10105dc0 <__swsetup_r>
101092d4:	1003b11e 	bne	r2,zero,1010a19c <___vfiprintf_internal_r+0x11ec>
101092d8:	a080030b 	ldhu	r2,12(r20)
101092dc:	00c00284 	movi	r3,10
101092e0:	1080068c 	andi	r2,r2,26
101092e4:	10ff541e 	bne	r2,r3,10109038 <__alt_data_end+0xfffe9038>
101092e8:	a080038f 	ldh	r2,14(r20)
101092ec:	103f5216 	blt	r2,zero,10109038 <__alt_data_end+0xfffe9038>
101092f0:	d9c02217 	ldw	r7,136(sp)
101092f4:	d9002017 	ldw	r4,128(sp)
101092f8:	e00d883a 	mov	r6,fp
101092fc:	a00b883a 	mov	r5,r20
10109300:	010a4280 	call	1010a428 <__sbprintf>
10109304:	dfc03617 	ldw	ra,216(sp)
10109308:	df003517 	ldw	fp,212(sp)
1010930c:	ddc03417 	ldw	r23,208(sp)
10109310:	dd803317 	ldw	r22,204(sp)
10109314:	dd403217 	ldw	r21,200(sp)
10109318:	dd003117 	ldw	r20,196(sp)
1010931c:	dcc03017 	ldw	r19,192(sp)
10109320:	dc802f17 	ldw	r18,188(sp)
10109324:	dc402e17 	ldw	r17,184(sp)
10109328:	dc002d17 	ldw	r16,180(sp)
1010932c:	dec03704 	addi	sp,sp,220
10109330:	f800283a 	ret
10109334:	0101f140 	call	10101f14 <__sinit>
10109338:	003f2f06 	br	10108ff8 <__alt_data_end+0xfffe8ff8>
1010933c:	0463c83a 	sub	r17,zero,r17
10109340:	d8802215 	stw	r2,136(sp)
10109344:	a5000114 	ori	r20,r20,4
10109348:	80c00007 	ldb	r3,0(r16)
1010934c:	003f7706 	br	1010912c <__alt_data_end+0xfffe912c>
10109350:	00800c04 	movi	r2,48
10109354:	da802217 	ldw	r10,136(sp)
10109358:	d8801d05 	stb	r2,116(sp)
1010935c:	00801e04 	movi	r2,120
10109360:	d8801d45 	stb	r2,117(sp)
10109364:	d8001d85 	stb	zero,118(sp)
10109368:	50c00104 	addi	r3,r10,4
1010936c:	54800017 	ldw	r18,0(r10)
10109370:	0027883a 	mov	r19,zero
10109374:	a0800094 	ori	r2,r20,2
10109378:	48030b16 	blt	r9,zero,10109fa8 <___vfiprintf_internal_r+0xff8>
1010937c:	00bfdfc4 	movi	r2,-129
10109380:	a096703a 	and	r11,r20,r2
10109384:	d8c02215 	stw	r3,136(sp)
10109388:	5d000094 	ori	r20,r11,2
1010938c:	90032b1e 	bne	r18,zero,1010a03c <___vfiprintf_internal_r+0x108c>
10109390:	00840474 	movhi	r2,4113
10109394:	1085a204 	addi	r2,r2,5768
10109398:	d8802615 	stw	r2,152(sp)
1010939c:	0039883a 	mov	fp,zero
101093a0:	48017b1e 	bne	r9,zero,10109990 <___vfiprintf_internal_r+0x9e0>
101093a4:	0013883a 	mov	r9,zero
101093a8:	0027883a 	mov	r19,zero
101093ac:	dd401a04 	addi	r21,sp,104
101093b0:	4825883a 	mov	r18,r9
101093b4:	4cc0010e 	bge	r9,r19,101093bc <___vfiprintf_internal_r+0x40c>
101093b8:	9825883a 	mov	r18,r19
101093bc:	e7003fcc 	andi	fp,fp,255
101093c0:	e700201c 	xori	fp,fp,128
101093c4:	e73fe004 	addi	fp,fp,-128
101093c8:	e0000126 	beq	fp,zero,101093d0 <___vfiprintf_internal_r+0x420>
101093cc:	94800044 	addi	r18,r18,1
101093d0:	a380008c 	andi	r14,r20,2
101093d4:	70000126 	beq	r14,zero,101093dc <___vfiprintf_internal_r+0x42c>
101093d8:	94800084 	addi	r18,r18,2
101093dc:	a700210c 	andi	fp,r20,132
101093e0:	e001df1e 	bne	fp,zero,10109b60 <___vfiprintf_internal_r+0xbb0>
101093e4:	8c87c83a 	sub	r3,r17,r18
101093e8:	00c1dd0e 	bge	zero,r3,10109b60 <___vfiprintf_internal_r+0xbb0>
101093ec:	01c00404 	movi	r7,16
101093f0:	d8801c17 	ldw	r2,112(sp)
101093f4:	38c3ad0e 	bge	r7,r3,1010a2ac <___vfiprintf_internal_r+0x12fc>
101093f8:	02840474 	movhi	r10,4113
101093fc:	52860604 	addi	r10,r10,6168
10109400:	dc002915 	stw	r16,164(sp)
10109404:	d9801b17 	ldw	r6,108(sp)
10109408:	da802415 	stw	r10,144(sp)
1010940c:	03c001c4 	movi	r15,7
10109410:	da402515 	stw	r9,148(sp)
10109414:	db802815 	stw	r14,160(sp)
10109418:	1821883a 	mov	r16,r3
1010941c:	00000506 	br	10109434 <___vfiprintf_internal_r+0x484>
10109420:	31400084 	addi	r5,r6,2
10109424:	42000204 	addi	r8,r8,8
10109428:	200d883a 	mov	r6,r4
1010942c:	843ffc04 	addi	r16,r16,-16
10109430:	3c000d0e 	bge	r7,r16,10109468 <___vfiprintf_internal_r+0x4b8>
10109434:	10800404 	addi	r2,r2,16
10109438:	31000044 	addi	r4,r6,1
1010943c:	45800015 	stw	r22,0(r8)
10109440:	41c00115 	stw	r7,4(r8)
10109444:	d8801c15 	stw	r2,112(sp)
10109448:	d9001b15 	stw	r4,108(sp)
1010944c:	793ff40e 	bge	r15,r4,10109420 <__alt_data_end+0xfffe9420>
10109450:	1001b51e 	bne	r2,zero,10109b28 <___vfiprintf_internal_r+0xb78>
10109454:	843ffc04 	addi	r16,r16,-16
10109458:	000d883a 	mov	r6,zero
1010945c:	01400044 	movi	r5,1
10109460:	d811883a 	mov	r8,sp
10109464:	3c3ff316 	blt	r7,r16,10109434 <__alt_data_end+0xfffe9434>
10109468:	8007883a 	mov	r3,r16
1010946c:	da402517 	ldw	r9,148(sp)
10109470:	db802817 	ldw	r14,160(sp)
10109474:	dc002917 	ldw	r16,164(sp)
10109478:	da802417 	ldw	r10,144(sp)
1010947c:	1885883a 	add	r2,r3,r2
10109480:	40c00115 	stw	r3,4(r8)
10109484:	42800015 	stw	r10,0(r8)
10109488:	d8801c15 	stw	r2,112(sp)
1010948c:	d9401b15 	stw	r5,108(sp)
10109490:	00c001c4 	movi	r3,7
10109494:	19426016 	blt	r3,r5,10109e18 <___vfiprintf_internal_r+0xe68>
10109498:	d8c01d87 	ldb	r3,118(sp)
1010949c:	42000204 	addi	r8,r8,8
101094a0:	29000044 	addi	r4,r5,1
101094a4:	1801b31e 	bne	r3,zero,10109b74 <___vfiprintf_internal_r+0xbc4>
101094a8:	7001c026 	beq	r14,zero,10109bac <___vfiprintf_internal_r+0xbfc>
101094ac:	d8c01d04 	addi	r3,sp,116
101094b0:	10800084 	addi	r2,r2,2
101094b4:	40c00015 	stw	r3,0(r8)
101094b8:	00c00084 	movi	r3,2
101094bc:	40c00115 	stw	r3,4(r8)
101094c0:	d8801c15 	stw	r2,112(sp)
101094c4:	d9001b15 	stw	r4,108(sp)
101094c8:	00c001c4 	movi	r3,7
101094cc:	1902650e 	bge	r3,r4,10109e64 <___vfiprintf_internal_r+0xeb4>
101094d0:	10029a1e 	bne	r2,zero,10109f3c <___vfiprintf_internal_r+0xf8c>
101094d4:	00c02004 	movi	r3,128
101094d8:	01000044 	movi	r4,1
101094dc:	000b883a 	mov	r5,zero
101094e0:	d811883a 	mov	r8,sp
101094e4:	e0c1b31e 	bne	fp,r3,10109bb4 <___vfiprintf_internal_r+0xc04>
101094e8:	8cb9c83a 	sub	fp,r17,r18
101094ec:	0701b10e 	bge	zero,fp,10109bb4 <___vfiprintf_internal_r+0xc04>
101094f0:	01c00404 	movi	r7,16
101094f4:	3f03890e 	bge	r7,fp,1010a31c <___vfiprintf_internal_r+0x136c>
101094f8:	00c40474 	movhi	r3,4113
101094fc:	18c60204 	addi	r3,r3,6152
10109500:	d8c02415 	stw	r3,144(sp)
10109504:	8007883a 	mov	r3,r16
10109508:	034001c4 	movi	r13,7
1010950c:	e021883a 	mov	r16,fp
10109510:	da402515 	stw	r9,148(sp)
10109514:	1839883a 	mov	fp,r3
10109518:	00000506 	br	10109530 <___vfiprintf_internal_r+0x580>
1010951c:	29800084 	addi	r6,r5,2
10109520:	42000204 	addi	r8,r8,8
10109524:	180b883a 	mov	r5,r3
10109528:	843ffc04 	addi	r16,r16,-16
1010952c:	3c000d0e 	bge	r7,r16,10109564 <___vfiprintf_internal_r+0x5b4>
10109530:	10800404 	addi	r2,r2,16
10109534:	28c00044 	addi	r3,r5,1
10109538:	45c00015 	stw	r23,0(r8)
1010953c:	41c00115 	stw	r7,4(r8)
10109540:	d8801c15 	stw	r2,112(sp)
10109544:	d8c01b15 	stw	r3,108(sp)
10109548:	68fff40e 	bge	r13,r3,1010951c <__alt_data_end+0xfffe951c>
1010954c:	1002241e 	bne	r2,zero,10109de0 <___vfiprintf_internal_r+0xe30>
10109550:	843ffc04 	addi	r16,r16,-16
10109554:	01800044 	movi	r6,1
10109558:	000b883a 	mov	r5,zero
1010955c:	d811883a 	mov	r8,sp
10109560:	3c3ff316 	blt	r7,r16,10109530 <__alt_data_end+0xfffe9530>
10109564:	da402517 	ldw	r9,148(sp)
10109568:	e007883a 	mov	r3,fp
1010956c:	8039883a 	mov	fp,r16
10109570:	1821883a 	mov	r16,r3
10109574:	d8c02417 	ldw	r3,144(sp)
10109578:	1705883a 	add	r2,r2,fp
1010957c:	47000115 	stw	fp,4(r8)
10109580:	40c00015 	stw	r3,0(r8)
10109584:	d8801c15 	stw	r2,112(sp)
10109588:	d9801b15 	stw	r6,108(sp)
1010958c:	00c001c4 	movi	r3,7
10109590:	19827616 	blt	r3,r6,10109f6c <___vfiprintf_internal_r+0xfbc>
10109594:	4cf9c83a 	sub	fp,r9,r19
10109598:	42000204 	addi	r8,r8,8
1010959c:	31000044 	addi	r4,r6,1
101095a0:	300b883a 	mov	r5,r6
101095a4:	07018516 	blt	zero,fp,10109bbc <___vfiprintf_internal_r+0xc0c>
101095a8:	9885883a 	add	r2,r19,r2
101095ac:	45400015 	stw	r21,0(r8)
101095b0:	44c00115 	stw	r19,4(r8)
101095b4:	d8801c15 	stw	r2,112(sp)
101095b8:	d9001b15 	stw	r4,108(sp)
101095bc:	00c001c4 	movi	r3,7
101095c0:	1901dd0e 	bge	r3,r4,10109d38 <___vfiprintf_internal_r+0xd88>
101095c4:	1002401e 	bne	r2,zero,10109ec8 <___vfiprintf_internal_r+0xf18>
101095c8:	d8001b15 	stw	zero,108(sp)
101095cc:	a2c0010c 	andi	r11,r20,4
101095d0:	58000226 	beq	r11,zero,101095dc <___vfiprintf_internal_r+0x62c>
101095d4:	8ca7c83a 	sub	r19,r17,r18
101095d8:	04c2f216 	blt	zero,r19,1010a1a4 <___vfiprintf_internal_r+0x11f4>
101095dc:	8c80010e 	bge	r17,r18,101095e4 <___vfiprintf_internal_r+0x634>
101095e0:	9023883a 	mov	r17,r18
101095e4:	da802317 	ldw	r10,140(sp)
101095e8:	5455883a 	add	r10,r10,r17
101095ec:	da802315 	stw	r10,140(sp)
101095f0:	d8001b15 	stw	zero,108(sp)
101095f4:	d811883a 	mov	r8,sp
101095f8:	003ea206 	br	10109084 <__alt_data_end+0xfffe9084>
101095fc:	a5000814 	ori	r20,r20,32
10109600:	80c00007 	ldb	r3,0(r16)
10109604:	003ec906 	br	1010912c <__alt_data_end+0xfffe912c>
10109608:	80c00007 	ldb	r3,0(r16)
1010960c:	1b030926 	beq	r3,r12,1010a234 <___vfiprintf_internal_r+0x1284>
10109610:	a5000414 	ori	r20,r20,16
10109614:	003ec506 	br	1010912c <__alt_data_end+0xfffe912c>
10109618:	21003fcc 	andi	r4,r4,255
1010961c:	20035e1e 	bne	r4,zero,1010a398 <___vfiprintf_internal_r+0x13e8>
10109620:	a080080c 	andi	r2,r20,32
10109624:	1002a526 	beq	r2,zero,1010a0bc <___vfiprintf_internal_r+0x110c>
10109628:	da802217 	ldw	r10,136(sp)
1010962c:	50800017 	ldw	r2,0(r10)
10109630:	da802317 	ldw	r10,140(sp)
10109634:	5007d7fa 	srai	r3,r10,31
10109638:	da802217 	ldw	r10,136(sp)
1010963c:	10c00115 	stw	r3,4(r2)
10109640:	52800104 	addi	r10,r10,4
10109644:	da802215 	stw	r10,136(sp)
10109648:	da802317 	ldw	r10,140(sp)
1010964c:	12800015 	stw	r10,0(r2)
10109650:	003e8c06 	br	10109084 <__alt_data_end+0xfffe9084>
10109654:	21003fcc 	andi	r4,r4,255
10109658:	2003511e 	bne	r4,zero,1010a3a0 <___vfiprintf_internal_r+0x13f0>
1010965c:	a080080c 	andi	r2,r20,32
10109660:	1000a126 	beq	r2,zero,101098e8 <___vfiprintf_internal_r+0x938>
10109664:	da802217 	ldw	r10,136(sp)
10109668:	d8001d85 	stb	zero,118(sp)
1010966c:	50800204 	addi	r2,r10,8
10109670:	54800017 	ldw	r18,0(r10)
10109674:	54c00117 	ldw	r19,4(r10)
10109678:	4802b416 	blt	r9,zero,1010a14c <___vfiprintf_internal_r+0x119c>
1010967c:	013fdfc4 	movi	r4,-129
10109680:	94c6b03a 	or	r3,r18,r19
10109684:	d8802215 	stw	r2,136(sp)
10109688:	a128703a 	and	r20,r20,r4
1010968c:	1800a226 	beq	r3,zero,10109918 <___vfiprintf_internal_r+0x968>
10109690:	0039883a 	mov	fp,zero
10109694:	dd401a04 	addi	r21,sp,104
10109698:	9006d0fa 	srli	r3,r18,3
1010969c:	9808977a 	slli	r4,r19,29
101096a0:	9826d0fa 	srli	r19,r19,3
101096a4:	948001cc 	andi	r18,r18,7
101096a8:	90800c04 	addi	r2,r18,48
101096ac:	ad7fffc4 	addi	r21,r21,-1
101096b0:	20e4b03a 	or	r18,r4,r3
101096b4:	a8800005 	stb	r2,0(r21)
101096b8:	94c6b03a 	or	r3,r18,r19
101096bc:	183ff61e 	bne	r3,zero,10109698 <__alt_data_end+0xfffe9698>
101096c0:	a0c0004c 	andi	r3,r20,1
101096c4:	18005926 	beq	r3,zero,1010982c <___vfiprintf_internal_r+0x87c>
101096c8:	10803fcc 	andi	r2,r2,255
101096cc:	1080201c 	xori	r2,r2,128
101096d0:	10bfe004 	addi	r2,r2,-128
101096d4:	00c00c04 	movi	r3,48
101096d8:	10c05426 	beq	r2,r3,1010982c <___vfiprintf_internal_r+0x87c>
101096dc:	da801e17 	ldw	r10,120(sp)
101096e0:	a8bfffc4 	addi	r2,r21,-1
101096e4:	a8ffffc5 	stb	r3,-1(r21)
101096e8:	50a7c83a 	sub	r19,r10,r2
101096ec:	102b883a 	mov	r21,r2
101096f0:	003f2f06 	br	101093b0 <__alt_data_end+0xfffe93b0>
101096f4:	21003fcc 	andi	r4,r4,255
101096f8:	2003421e 	bne	r4,zero,1010a404 <___vfiprintf_internal_r+0x1454>
101096fc:	00840474 	movhi	r2,4113
10109700:	1085a204 	addi	r2,r2,5768
10109704:	d8802615 	stw	r2,152(sp)
10109708:	a080080c 	andi	r2,r20,32
1010970c:	1000aa26 	beq	r2,zero,101099b8 <___vfiprintf_internal_r+0xa08>
10109710:	da802217 	ldw	r10,136(sp)
10109714:	54800017 	ldw	r18,0(r10)
10109718:	54c00117 	ldw	r19,4(r10)
1010971c:	52800204 	addi	r10,r10,8
10109720:	da802215 	stw	r10,136(sp)
10109724:	a080004c 	andi	r2,r20,1
10109728:	1001d226 	beq	r2,zero,10109e74 <___vfiprintf_internal_r+0xec4>
1010972c:	94c4b03a 	or	r2,r18,r19
10109730:	1002351e 	bne	r2,zero,1010a008 <___vfiprintf_internal_r+0x1058>
10109734:	d8001d85 	stb	zero,118(sp)
10109738:	48022216 	blt	r9,zero,10109fc4 <___vfiprintf_internal_r+0x1014>
1010973c:	00bfdfc4 	movi	r2,-129
10109740:	a0a8703a 	and	r20,r20,r2
10109744:	003f1506 	br	1010939c <__alt_data_end+0xfffe939c>
10109748:	da802217 	ldw	r10,136(sp)
1010974c:	04800044 	movi	r18,1
10109750:	d8001d85 	stb	zero,118(sp)
10109754:	50800017 	ldw	r2,0(r10)
10109758:	52800104 	addi	r10,r10,4
1010975c:	da802215 	stw	r10,136(sp)
10109760:	d8801005 	stb	r2,64(sp)
10109764:	9027883a 	mov	r19,r18
10109768:	dd401004 	addi	r21,sp,64
1010976c:	0013883a 	mov	r9,zero
10109770:	003f1706 	br	101093d0 <__alt_data_end+0xfffe93d0>
10109774:	21003fcc 	andi	r4,r4,255
10109778:	2003201e 	bne	r4,zero,1010a3fc <___vfiprintf_internal_r+0x144c>
1010977c:	a080080c 	andi	r2,r20,32
10109780:	10004b26 	beq	r2,zero,101098b0 <___vfiprintf_internal_r+0x900>
10109784:	da802217 	ldw	r10,136(sp)
10109788:	50800117 	ldw	r2,4(r10)
1010978c:	54800017 	ldw	r18,0(r10)
10109790:	52800204 	addi	r10,r10,8
10109794:	da802215 	stw	r10,136(sp)
10109798:	1027883a 	mov	r19,r2
1010979c:	10022c16 	blt	r2,zero,1010a050 <___vfiprintf_internal_r+0x10a0>
101097a0:	df001d83 	ldbu	fp,118(sp)
101097a4:	48007216 	blt	r9,zero,10109970 <___vfiprintf_internal_r+0x9c0>
101097a8:	00ffdfc4 	movi	r3,-129
101097ac:	94c4b03a 	or	r2,r18,r19
101097b0:	a0e8703a 	and	r20,r20,r3
101097b4:	1000cc26 	beq	r2,zero,10109ae8 <___vfiprintf_internal_r+0xb38>
101097b8:	98021026 	beq	r19,zero,10109ffc <___vfiprintf_internal_r+0x104c>
101097bc:	dc402415 	stw	r17,144(sp)
101097c0:	dc002515 	stw	r16,148(sp)
101097c4:	9823883a 	mov	r17,r19
101097c8:	9021883a 	mov	r16,r18
101097cc:	dd401a04 	addi	r21,sp,104
101097d0:	4825883a 	mov	r18,r9
101097d4:	4027883a 	mov	r19,r8
101097d8:	8009883a 	mov	r4,r16
101097dc:	880b883a 	mov	r5,r17
101097e0:	01800284 	movi	r6,10
101097e4:	000f883a 	mov	r7,zero
101097e8:	010bbe40 	call	1010bbe4 <__umoddi3>
101097ec:	10800c04 	addi	r2,r2,48
101097f0:	ad7fffc4 	addi	r21,r21,-1
101097f4:	8009883a 	mov	r4,r16
101097f8:	880b883a 	mov	r5,r17
101097fc:	a8800005 	stb	r2,0(r21)
10109800:	01800284 	movi	r6,10
10109804:	000f883a 	mov	r7,zero
10109808:	010b66c0 	call	1010b66c <__udivdi3>
1010980c:	1021883a 	mov	r16,r2
10109810:	10c4b03a 	or	r2,r2,r3
10109814:	1823883a 	mov	r17,r3
10109818:	103fef1e 	bne	r2,zero,101097d8 <__alt_data_end+0xfffe97d8>
1010981c:	dc402417 	ldw	r17,144(sp)
10109820:	dc002517 	ldw	r16,148(sp)
10109824:	9013883a 	mov	r9,r18
10109828:	9811883a 	mov	r8,r19
1010982c:	da801e17 	ldw	r10,120(sp)
10109830:	5567c83a 	sub	r19,r10,r21
10109834:	003ede06 	br	101093b0 <__alt_data_end+0xfffe93b0>
10109838:	38803fcc 	andi	r2,r7,255
1010983c:	1080201c 	xori	r2,r2,128
10109840:	10bfe004 	addi	r2,r2,-128
10109844:	1002371e 	bne	r2,zero,1010a124 <___vfiprintf_internal_r+0x1174>
10109848:	01000044 	movi	r4,1
1010984c:	01c00804 	movi	r7,32
10109850:	80c00007 	ldb	r3,0(r16)
10109854:	003e3506 	br	1010912c <__alt_data_end+0xfffe912c>
10109858:	a5000054 	ori	r20,r20,1
1010985c:	80c00007 	ldb	r3,0(r16)
10109860:	003e3206 	br	1010912c <__alt_data_end+0xfffe912c>
10109864:	a5002014 	ori	r20,r20,128
10109868:	80c00007 	ldb	r3,0(r16)
1010986c:	003e2f06 	br	1010912c <__alt_data_end+0xfffe912c>
10109870:	8015883a 	mov	r10,r16
10109874:	0023883a 	mov	r17,zero
10109878:	18bff404 	addi	r2,r3,-48
1010987c:	50c00007 	ldb	r3,0(r10)
10109880:	8c4002a4 	muli	r17,r17,10
10109884:	84000044 	addi	r16,r16,1
10109888:	8015883a 	mov	r10,r16
1010988c:	1463883a 	add	r17,r2,r17
10109890:	18bff404 	addi	r2,r3,-48
10109894:	30bff92e 	bgeu	r6,r2,1010987c <__alt_data_end+0xfffe987c>
10109898:	003e2506 	br	10109130 <__alt_data_end+0xfffe9130>
1010989c:	21003fcc 	andi	r4,r4,255
101098a0:	2002d41e 	bne	r4,zero,1010a3f4 <___vfiprintf_internal_r+0x1444>
101098a4:	a5000414 	ori	r20,r20,16
101098a8:	a080080c 	andi	r2,r20,32
101098ac:	103fb51e 	bne	r2,zero,10109784 <__alt_data_end+0xfffe9784>
101098b0:	a080040c 	andi	r2,r20,16
101098b4:	1001f826 	beq	r2,zero,1010a098 <___vfiprintf_internal_r+0x10e8>
101098b8:	da802217 	ldw	r10,136(sp)
101098bc:	54800017 	ldw	r18,0(r10)
101098c0:	52800104 	addi	r10,r10,4
101098c4:	da802215 	stw	r10,136(sp)
101098c8:	9027d7fa 	srai	r19,r18,31
101098cc:	9805883a 	mov	r2,r19
101098d0:	003fb206 	br	1010979c <__alt_data_end+0xfffe979c>
101098d4:	21003fcc 	andi	r4,r4,255
101098d8:	2002c41e 	bne	r4,zero,1010a3ec <___vfiprintf_internal_r+0x143c>
101098dc:	a5000414 	ori	r20,r20,16
101098e0:	a080080c 	andi	r2,r20,32
101098e4:	103f5f1e 	bne	r2,zero,10109664 <__alt_data_end+0xfffe9664>
101098e8:	a080040c 	andi	r2,r20,16
101098ec:	10020f26 	beq	r2,zero,1010a12c <___vfiprintf_internal_r+0x117c>
101098f0:	da802217 	ldw	r10,136(sp)
101098f4:	d8001d85 	stb	zero,118(sp)
101098f8:	0027883a 	mov	r19,zero
101098fc:	50800104 	addi	r2,r10,4
10109900:	54800017 	ldw	r18,0(r10)
10109904:	48021116 	blt	r9,zero,1010a14c <___vfiprintf_internal_r+0x119c>
10109908:	00ffdfc4 	movi	r3,-129
1010990c:	d8802215 	stw	r2,136(sp)
10109910:	a0e8703a 	and	r20,r20,r3
10109914:	903f5e1e 	bne	r18,zero,10109690 <__alt_data_end+0xfffe9690>
10109918:	0039883a 	mov	fp,zero
1010991c:	4802a626 	beq	r9,zero,1010a3b8 <___vfiprintf_internal_r+0x1408>
10109920:	0025883a 	mov	r18,zero
10109924:	0027883a 	mov	r19,zero
10109928:	003f5a06 	br	10109694 <__alt_data_end+0xfffe9694>
1010992c:	21003fcc 	andi	r4,r4,255
10109930:	20029f1e 	bne	r4,zero,1010a3b0 <___vfiprintf_internal_r+0x1400>
10109934:	a5000414 	ori	r20,r20,16
10109938:	a080080c 	andi	r2,r20,32
1010993c:	10005e1e 	bne	r2,zero,10109ab8 <___vfiprintf_internal_r+0xb08>
10109940:	a080040c 	andi	r2,r20,16
10109944:	1001a21e 	bne	r2,zero,10109fd0 <___vfiprintf_internal_r+0x1020>
10109948:	a080100c 	andi	r2,r20,64
1010994c:	d8001d85 	stb	zero,118(sp)
10109950:	da802217 	ldw	r10,136(sp)
10109954:	1002231e 	bne	r2,zero,1010a1e4 <___vfiprintf_internal_r+0x1234>
10109958:	50800104 	addi	r2,r10,4
1010995c:	54800017 	ldw	r18,0(r10)
10109960:	0027883a 	mov	r19,zero
10109964:	4801a00e 	bge	r9,zero,10109fe8 <___vfiprintf_internal_r+0x1038>
10109968:	d8802215 	stw	r2,136(sp)
1010996c:	0039883a 	mov	fp,zero
10109970:	94c4b03a 	or	r2,r18,r19
10109974:	103f901e 	bne	r2,zero,101097b8 <__alt_data_end+0xfffe97b8>
10109978:	00800044 	movi	r2,1
1010997c:	10803fcc 	andi	r2,r2,255
10109980:	00c00044 	movi	r3,1
10109984:	10c05926 	beq	r2,r3,10109aec <___vfiprintf_internal_r+0xb3c>
10109988:	00c00084 	movi	r3,2
1010998c:	10ffe41e 	bne	r2,r3,10109920 <__alt_data_end+0xfffe9920>
10109990:	0025883a 	mov	r18,zero
10109994:	0027883a 	mov	r19,zero
10109998:	00013d06 	br	10109e90 <___vfiprintf_internal_r+0xee0>
1010999c:	21003fcc 	andi	r4,r4,255
101099a0:	2002811e 	bne	r4,zero,1010a3a8 <___vfiprintf_internal_r+0x13f8>
101099a4:	00840474 	movhi	r2,4113
101099a8:	10859d04 	addi	r2,r2,5748
101099ac:	d8802615 	stw	r2,152(sp)
101099b0:	a080080c 	andi	r2,r20,32
101099b4:	103f561e 	bne	r2,zero,10109710 <__alt_data_end+0xfffe9710>
101099b8:	a080040c 	andi	r2,r20,16
101099bc:	1001d126 	beq	r2,zero,1010a104 <___vfiprintf_internal_r+0x1154>
101099c0:	da802217 	ldw	r10,136(sp)
101099c4:	0027883a 	mov	r19,zero
101099c8:	54800017 	ldw	r18,0(r10)
101099cc:	52800104 	addi	r10,r10,4
101099d0:	da802215 	stw	r10,136(sp)
101099d4:	003f5306 	br	10109724 <__alt_data_end+0xfffe9724>
101099d8:	da802217 	ldw	r10,136(sp)
101099dc:	d8001d85 	stb	zero,118(sp)
101099e0:	55400017 	ldw	r21,0(r10)
101099e4:	50c00104 	addi	r3,r10,4
101099e8:	a8024226 	beq	r21,zero,1010a2f4 <___vfiprintf_internal_r+0x1344>
101099ec:	48021816 	blt	r9,zero,1010a250 <___vfiprintf_internal_r+0x12a0>
101099f0:	480d883a 	mov	r6,r9
101099f4:	000b883a 	mov	r5,zero
101099f8:	a809883a 	mov	r4,r21
101099fc:	d8c02a15 	stw	r3,168(sp)
10109a00:	da002b15 	stw	r8,172(sp)
10109a04:	da402c15 	stw	r9,176(sp)
10109a08:	0107a2c0 	call	10107a2c <memchr>
10109a0c:	d8c02a17 	ldw	r3,168(sp)
10109a10:	da002b17 	ldw	r8,172(sp)
10109a14:	da402c17 	ldw	r9,176(sp)
10109a18:	10024826 	beq	r2,zero,1010a33c <___vfiprintf_internal_r+0x138c>
10109a1c:	1567c83a 	sub	r19,r2,r21
10109a20:	df001d83 	ldbu	fp,118(sp)
10109a24:	d8c02215 	stw	r3,136(sp)
10109a28:	0013883a 	mov	r9,zero
10109a2c:	003e6006 	br	101093b0 <__alt_data_end+0xfffe93b0>
10109a30:	21003fcc 	andi	r4,r4,255
10109a34:	203fc026 	beq	r4,zero,10109938 <__alt_data_end+0xfffe9938>
10109a38:	d9c01d85 	stb	r7,118(sp)
10109a3c:	003fbe06 	br	10109938 <__alt_data_end+0xfffe9938>
10109a40:	da802217 	ldw	r10,136(sp)
10109a44:	54400017 	ldw	r17,0(r10)
10109a48:	50800104 	addi	r2,r10,4
10109a4c:	883e3b16 	blt	r17,zero,1010933c <__alt_data_end+0xfffe933c>
10109a50:	d8802215 	stw	r2,136(sp)
10109a54:	80c00007 	ldb	r3,0(r16)
10109a58:	003db406 	br	1010912c <__alt_data_end+0xfffe912c>
10109a5c:	01000044 	movi	r4,1
10109a60:	01c00ac4 	movi	r7,43
10109a64:	80c00007 	ldb	r3,0(r16)
10109a68:	003db006 	br	1010912c <__alt_data_end+0xfffe912c>
10109a6c:	80c00007 	ldb	r3,0(r16)
10109a70:	82800044 	addi	r10,r16,1
10109a74:	1b423c26 	beq	r3,r13,1010a368 <___vfiprintf_internal_r+0x13b8>
10109a78:	18bff404 	addi	r2,r3,-48
10109a7c:	0013883a 	mov	r9,zero
10109a80:	30822b36 	bltu	r6,r2,1010a330 <___vfiprintf_internal_r+0x1380>
10109a84:	50c00007 	ldb	r3,0(r10)
10109a88:	4a4002a4 	muli	r9,r9,10
10109a8c:	54000044 	addi	r16,r10,1
10109a90:	8015883a 	mov	r10,r16
10109a94:	4893883a 	add	r9,r9,r2
10109a98:	18bff404 	addi	r2,r3,-48
10109a9c:	30bff92e 	bgeu	r6,r2,10109a84 <__alt_data_end+0xfffe9a84>
10109aa0:	483da30e 	bge	r9,zero,10109130 <__alt_data_end+0xfffe9130>
10109aa4:	027fffc4 	movi	r9,-1
10109aa8:	003da106 	br	10109130 <__alt_data_end+0xfffe9130>
10109aac:	a5001014 	ori	r20,r20,64
10109ab0:	80c00007 	ldb	r3,0(r16)
10109ab4:	003d9d06 	br	1010912c <__alt_data_end+0xfffe912c>
10109ab8:	da802217 	ldw	r10,136(sp)
10109abc:	d8001d85 	stb	zero,118(sp)
10109ac0:	50c00204 	addi	r3,r10,8
10109ac4:	54800017 	ldw	r18,0(r10)
10109ac8:	54c00117 	ldw	r19,4(r10)
10109acc:	4801ca16 	blt	r9,zero,1010a1f8 <___vfiprintf_internal_r+0x1248>
10109ad0:	013fdfc4 	movi	r4,-129
10109ad4:	94c4b03a 	or	r2,r18,r19
10109ad8:	d8c02215 	stw	r3,136(sp)
10109adc:	a128703a 	and	r20,r20,r4
10109ae0:	0039883a 	mov	fp,zero
10109ae4:	103f341e 	bne	r2,zero,101097b8 <__alt_data_end+0xfffe97b8>
10109ae8:	483e2e26 	beq	r9,zero,101093a4 <__alt_data_end+0xfffe93a4>
10109aec:	0025883a 	mov	r18,zero
10109af0:	94800c04 	addi	r18,r18,48
10109af4:	dc8019c5 	stb	r18,103(sp)
10109af8:	dcc02717 	ldw	r19,156(sp)
10109afc:	dd4019c4 	addi	r21,sp,103
10109b00:	003e2b06 	br	101093b0 <__alt_data_end+0xfffe93b0>
10109b04:	21003fcc 	andi	r4,r4,255
10109b08:	2002361e 	bne	r4,zero,1010a3e4 <___vfiprintf_internal_r+0x1434>
10109b0c:	1801c126 	beq	r3,zero,1010a214 <___vfiprintf_internal_r+0x1264>
10109b10:	04800044 	movi	r18,1
10109b14:	d8c01005 	stb	r3,64(sp)
10109b18:	d8001d85 	stb	zero,118(sp)
10109b1c:	9027883a 	mov	r19,r18
10109b20:	dd401004 	addi	r21,sp,64
10109b24:	003f1106 	br	1010976c <__alt_data_end+0xfffe976c>
10109b28:	d9402117 	ldw	r5,132(sp)
10109b2c:	d9002017 	ldw	r4,128(sp)
10109b30:	d9801a04 	addi	r6,sp,104
10109b34:	d9c02b15 	stw	r7,172(sp)
10109b38:	dbc02a15 	stw	r15,168(sp)
10109b3c:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109b40:	d9c02b17 	ldw	r7,172(sp)
10109b44:	dbc02a17 	ldw	r15,168(sp)
10109b48:	10006d1e 	bne	r2,zero,10109d00 <___vfiprintf_internal_r+0xd50>
10109b4c:	d9801b17 	ldw	r6,108(sp)
10109b50:	d8801c17 	ldw	r2,112(sp)
10109b54:	d811883a 	mov	r8,sp
10109b58:	31400044 	addi	r5,r6,1
10109b5c:	003e3306 	br	1010942c <__alt_data_end+0xfffe942c>
10109b60:	d9401b17 	ldw	r5,108(sp)
10109b64:	d8801c17 	ldw	r2,112(sp)
10109b68:	29000044 	addi	r4,r5,1
10109b6c:	d8c01d87 	ldb	r3,118(sp)
10109b70:	183e4d26 	beq	r3,zero,101094a8 <__alt_data_end+0xfffe94a8>
10109b74:	00c00044 	movi	r3,1
10109b78:	d9401d84 	addi	r5,sp,118
10109b7c:	10c5883a 	add	r2,r2,r3
10109b80:	41400015 	stw	r5,0(r8)
10109b84:	40c00115 	stw	r3,4(r8)
10109b88:	d8801c15 	stw	r2,112(sp)
10109b8c:	d9001b15 	stw	r4,108(sp)
10109b90:	014001c4 	movi	r5,7
10109b94:	2900a90e 	bge	r5,r4,10109e3c <___vfiprintf_internal_r+0xe8c>
10109b98:	1000da1e 	bne	r2,zero,10109f04 <___vfiprintf_internal_r+0xf54>
10109b9c:	7000ab1e 	bne	r14,zero,10109e4c <___vfiprintf_internal_r+0xe9c>
10109ba0:	000b883a 	mov	r5,zero
10109ba4:	1809883a 	mov	r4,r3
10109ba8:	d811883a 	mov	r8,sp
10109bac:	00c02004 	movi	r3,128
10109bb0:	e0fe4d26 	beq	fp,r3,101094e8 <__alt_data_end+0xfffe94e8>
10109bb4:	4cf9c83a 	sub	fp,r9,r19
10109bb8:	073e7b0e 	bge	zero,fp,101095a8 <__alt_data_end+0xfffe95a8>
10109bbc:	01c00404 	movi	r7,16
10109bc0:	3f01900e 	bge	r7,fp,1010a204 <___vfiprintf_internal_r+0x1254>
10109bc4:	00c40474 	movhi	r3,4113
10109bc8:	18c60204 	addi	r3,r3,6152
10109bcc:	d8c02415 	stw	r3,144(sp)
10109bd0:	034001c4 	movi	r13,7
10109bd4:	00000506 	br	10109bec <___vfiprintf_internal_r+0xc3c>
10109bd8:	29000084 	addi	r4,r5,2
10109bdc:	42000204 	addi	r8,r8,8
10109be0:	180b883a 	mov	r5,r3
10109be4:	e73ffc04 	addi	fp,fp,-16
10109be8:	3f000d0e 	bge	r7,fp,10109c20 <___vfiprintf_internal_r+0xc70>
10109bec:	10800404 	addi	r2,r2,16
10109bf0:	28c00044 	addi	r3,r5,1
10109bf4:	45c00015 	stw	r23,0(r8)
10109bf8:	41c00115 	stw	r7,4(r8)
10109bfc:	d8801c15 	stw	r2,112(sp)
10109c00:	d8c01b15 	stw	r3,108(sp)
10109c04:	68fff40e 	bge	r13,r3,10109bd8 <__alt_data_end+0xfffe9bd8>
10109c08:	1000101e 	bne	r2,zero,10109c4c <___vfiprintf_internal_r+0xc9c>
10109c0c:	e73ffc04 	addi	fp,fp,-16
10109c10:	01000044 	movi	r4,1
10109c14:	000b883a 	mov	r5,zero
10109c18:	d811883a 	mov	r8,sp
10109c1c:	3f3ff316 	blt	r7,fp,10109bec <__alt_data_end+0xfffe9bec>
10109c20:	da802417 	ldw	r10,144(sp)
10109c24:	1705883a 	add	r2,r2,fp
10109c28:	47000115 	stw	fp,4(r8)
10109c2c:	42800015 	stw	r10,0(r8)
10109c30:	d8801c15 	stw	r2,112(sp)
10109c34:	d9001b15 	stw	r4,108(sp)
10109c38:	00c001c4 	movi	r3,7
10109c3c:	19003616 	blt	r3,r4,10109d18 <___vfiprintf_internal_r+0xd68>
10109c40:	42000204 	addi	r8,r8,8
10109c44:	21000044 	addi	r4,r4,1
10109c48:	003e5706 	br	101095a8 <__alt_data_end+0xfffe95a8>
10109c4c:	d9402117 	ldw	r5,132(sp)
10109c50:	d9002017 	ldw	r4,128(sp)
10109c54:	d9801a04 	addi	r6,sp,104
10109c58:	d9c02b15 	stw	r7,172(sp)
10109c5c:	db402a15 	stw	r13,168(sp)
10109c60:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109c64:	d9c02b17 	ldw	r7,172(sp)
10109c68:	db402a17 	ldw	r13,168(sp)
10109c6c:	1000241e 	bne	r2,zero,10109d00 <___vfiprintf_internal_r+0xd50>
10109c70:	d9401b17 	ldw	r5,108(sp)
10109c74:	d8801c17 	ldw	r2,112(sp)
10109c78:	d811883a 	mov	r8,sp
10109c7c:	29000044 	addi	r4,r5,1
10109c80:	003fd806 	br	10109be4 <__alt_data_end+0xfffe9be4>
10109c84:	d9401b17 	ldw	r5,108(sp)
10109c88:	00c40474 	movhi	r3,4113
10109c8c:	18c60604 	addi	r3,r3,6168
10109c90:	d8c02415 	stw	r3,144(sp)
10109c94:	29400044 	addi	r5,r5,1
10109c98:	d8c02417 	ldw	r3,144(sp)
10109c9c:	14c5883a 	add	r2,r2,r19
10109ca0:	44c00115 	stw	r19,4(r8)
10109ca4:	40c00015 	stw	r3,0(r8)
10109ca8:	d8801c15 	stw	r2,112(sp)
10109cac:	d9401b15 	stw	r5,108(sp)
10109cb0:	00c001c4 	movi	r3,7
10109cb4:	1940070e 	bge	r3,r5,10109cd4 <___vfiprintf_internal_r+0xd24>
10109cb8:	103e4826 	beq	r2,zero,101095dc <__alt_data_end+0xfffe95dc>
10109cbc:	d9402117 	ldw	r5,132(sp)
10109cc0:	d9002017 	ldw	r4,128(sp)
10109cc4:	d9801a04 	addi	r6,sp,104
10109cc8:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109ccc:	10000c1e 	bne	r2,zero,10109d00 <___vfiprintf_internal_r+0xd50>
10109cd0:	d8801c17 	ldw	r2,112(sp)
10109cd4:	8c80010e 	bge	r17,r18,10109cdc <___vfiprintf_internal_r+0xd2c>
10109cd8:	9023883a 	mov	r17,r18
10109cdc:	da802317 	ldw	r10,140(sp)
10109ce0:	5455883a 	add	r10,r10,r17
10109ce4:	da802315 	stw	r10,140(sp)
10109ce8:	103e4126 	beq	r2,zero,101095f0 <__alt_data_end+0xfffe95f0>
10109cec:	d9402117 	ldw	r5,132(sp)
10109cf0:	d9002017 	ldw	r4,128(sp)
10109cf4:	d9801a04 	addi	r6,sp,104
10109cf8:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109cfc:	103e3c26 	beq	r2,zero,101095f0 <__alt_data_end+0xfffe95f0>
10109d00:	dd002117 	ldw	r20,132(sp)
10109d04:	a080030b 	ldhu	r2,12(r20)
10109d08:	1080100c 	andi	r2,r2,64
10109d0c:	1001231e 	bne	r2,zero,1010a19c <___vfiprintf_internal_r+0x11ec>
10109d10:	d8802317 	ldw	r2,140(sp)
10109d14:	003d7b06 	br	10109304 <__alt_data_end+0xfffe9304>
10109d18:	1000991e 	bne	r2,zero,10109f80 <___vfiprintf_internal_r+0xfd0>
10109d1c:	00c00044 	movi	r3,1
10109d20:	9805883a 	mov	r2,r19
10109d24:	dd400015 	stw	r21,0(sp)
10109d28:	dcc00115 	stw	r19,4(sp)
10109d2c:	dcc01c15 	stw	r19,112(sp)
10109d30:	d8c01b15 	stw	r3,108(sp)
10109d34:	d811883a 	mov	r8,sp
10109d38:	42000204 	addi	r8,r8,8
10109d3c:	a2c0010c 	andi	r11,r20,4
10109d40:	583fe426 	beq	r11,zero,10109cd4 <__alt_data_end+0xfffe9cd4>
10109d44:	8ca7c83a 	sub	r19,r17,r18
10109d48:	04ffe20e 	bge	zero,r19,10109cd4 <__alt_data_end+0xfffe9cd4>
10109d4c:	01c00404 	movi	r7,16
10109d50:	3cffcc0e 	bge	r7,r19,10109c84 <__alt_data_end+0xfffe9c84>
10109d54:	02840474 	movhi	r10,4113
10109d58:	52860604 	addi	r10,r10,6168
10109d5c:	d9001b17 	ldw	r4,108(sp)
10109d60:	da802415 	stw	r10,144(sp)
10109d64:	382b883a 	mov	r21,r7
10109d68:	050001c4 	movi	r20,7
10109d6c:	df002017 	ldw	fp,128(sp)
10109d70:	00000506 	br	10109d88 <___vfiprintf_internal_r+0xdd8>
10109d74:	21400084 	addi	r5,r4,2
10109d78:	42000204 	addi	r8,r8,8
10109d7c:	1809883a 	mov	r4,r3
10109d80:	9cfffc04 	addi	r19,r19,-16
10109d84:	acffc40e 	bge	r21,r19,10109c98 <__alt_data_end+0xfffe9c98>
10109d88:	10800404 	addi	r2,r2,16
10109d8c:	20c00044 	addi	r3,r4,1
10109d90:	45800015 	stw	r22,0(r8)
10109d94:	45400115 	stw	r21,4(r8)
10109d98:	d8801c15 	stw	r2,112(sp)
10109d9c:	d8c01b15 	stw	r3,108(sp)
10109da0:	a0fff40e 	bge	r20,r3,10109d74 <__alt_data_end+0xfffe9d74>
10109da4:	1000041e 	bne	r2,zero,10109db8 <___vfiprintf_internal_r+0xe08>
10109da8:	01400044 	movi	r5,1
10109dac:	0009883a 	mov	r4,zero
10109db0:	d811883a 	mov	r8,sp
10109db4:	003ff206 	br	10109d80 <__alt_data_end+0xfffe9d80>
10109db8:	d9402117 	ldw	r5,132(sp)
10109dbc:	d9801a04 	addi	r6,sp,104
10109dc0:	e009883a 	mov	r4,fp
10109dc4:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109dc8:	103fcd1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109dcc:	d9001b17 	ldw	r4,108(sp)
10109dd0:	d8801c17 	ldw	r2,112(sp)
10109dd4:	d811883a 	mov	r8,sp
10109dd8:	21400044 	addi	r5,r4,1
10109ddc:	003fe806 	br	10109d80 <__alt_data_end+0xfffe9d80>
10109de0:	d9402117 	ldw	r5,132(sp)
10109de4:	d9002017 	ldw	r4,128(sp)
10109de8:	d9801a04 	addi	r6,sp,104
10109dec:	d9c02b15 	stw	r7,172(sp)
10109df0:	db402a15 	stw	r13,168(sp)
10109df4:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109df8:	d9c02b17 	ldw	r7,172(sp)
10109dfc:	db402a17 	ldw	r13,168(sp)
10109e00:	103fbf1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109e04:	d9401b17 	ldw	r5,108(sp)
10109e08:	d8801c17 	ldw	r2,112(sp)
10109e0c:	d811883a 	mov	r8,sp
10109e10:	29800044 	addi	r6,r5,1
10109e14:	003dc406 	br	10109528 <__alt_data_end+0xfffe9528>
10109e18:	1000d21e 	bne	r2,zero,1010a164 <___vfiprintf_internal_r+0x11b4>
10109e1c:	d8c01d87 	ldb	r3,118(sp)
10109e20:	18009526 	beq	r3,zero,1010a078 <___vfiprintf_internal_r+0x10c8>
10109e24:	00800044 	movi	r2,1
10109e28:	d8c01d84 	addi	r3,sp,118
10109e2c:	1009883a 	mov	r4,r2
10109e30:	d8c00015 	stw	r3,0(sp)
10109e34:	d8800115 	stw	r2,4(sp)
10109e38:	d811883a 	mov	r8,sp
10109e3c:	200b883a 	mov	r5,r4
10109e40:	42000204 	addi	r8,r8,8
10109e44:	21000044 	addi	r4,r4,1
10109e48:	003d9706 	br	101094a8 <__alt_data_end+0xfffe94a8>
10109e4c:	d9001d04 	addi	r4,sp,116
10109e50:	00800084 	movi	r2,2
10109e54:	d9000015 	stw	r4,0(sp)
10109e58:	d8800115 	stw	r2,4(sp)
10109e5c:	1809883a 	mov	r4,r3
10109e60:	d811883a 	mov	r8,sp
10109e64:	200b883a 	mov	r5,r4
10109e68:	42000204 	addi	r8,r8,8
10109e6c:	21000044 	addi	r4,r4,1
10109e70:	003f4e06 	br	10109bac <__alt_data_end+0xfffe9bac>
10109e74:	d8001d85 	stb	zero,118(sp)
10109e78:	48005016 	blt	r9,zero,10109fbc <___vfiprintf_internal_r+0x100c>
10109e7c:	00ffdfc4 	movi	r3,-129
10109e80:	94c4b03a 	or	r2,r18,r19
10109e84:	a0e8703a 	and	r20,r20,r3
10109e88:	103d4426 	beq	r2,zero,1010939c <__alt_data_end+0xfffe939c>
10109e8c:	0039883a 	mov	fp,zero
10109e90:	d9002617 	ldw	r4,152(sp)
10109e94:	dd401a04 	addi	r21,sp,104
10109e98:	908003cc 	andi	r2,r18,15
10109e9c:	9806973a 	slli	r3,r19,28
10109ea0:	2085883a 	add	r2,r4,r2
10109ea4:	9024d13a 	srli	r18,r18,4
10109ea8:	10800003 	ldbu	r2,0(r2)
10109eac:	9826d13a 	srli	r19,r19,4
10109eb0:	ad7fffc4 	addi	r21,r21,-1
10109eb4:	1ca4b03a 	or	r18,r3,r18
10109eb8:	a8800005 	stb	r2,0(r21)
10109ebc:	94c4b03a 	or	r2,r18,r19
10109ec0:	103ff51e 	bne	r2,zero,10109e98 <__alt_data_end+0xfffe9e98>
10109ec4:	003e5906 	br	1010982c <__alt_data_end+0xfffe982c>
10109ec8:	d9402117 	ldw	r5,132(sp)
10109ecc:	d9002017 	ldw	r4,128(sp)
10109ed0:	d9801a04 	addi	r6,sp,104
10109ed4:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109ed8:	103f891e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109edc:	d8801c17 	ldw	r2,112(sp)
10109ee0:	d811883a 	mov	r8,sp
10109ee4:	003f9506 	br	10109d3c <__alt_data_end+0xfffe9d3c>
10109ee8:	d9402117 	ldw	r5,132(sp)
10109eec:	d9002017 	ldw	r4,128(sp)
10109ef0:	d9801a04 	addi	r6,sp,104
10109ef4:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109ef8:	103f811e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109efc:	d811883a 	mov	r8,sp
10109f00:	003ced06 	br	101092b8 <__alt_data_end+0xfffe92b8>
10109f04:	d9402117 	ldw	r5,132(sp)
10109f08:	d9002017 	ldw	r4,128(sp)
10109f0c:	d9801a04 	addi	r6,sp,104
10109f10:	da402c15 	stw	r9,176(sp)
10109f14:	db802a15 	stw	r14,168(sp)
10109f18:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109f1c:	da402c17 	ldw	r9,176(sp)
10109f20:	db802a17 	ldw	r14,168(sp)
10109f24:	103f761e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109f28:	d9401b17 	ldw	r5,108(sp)
10109f2c:	d8801c17 	ldw	r2,112(sp)
10109f30:	d811883a 	mov	r8,sp
10109f34:	29000044 	addi	r4,r5,1
10109f38:	003d5b06 	br	101094a8 <__alt_data_end+0xfffe94a8>
10109f3c:	d9402117 	ldw	r5,132(sp)
10109f40:	d9002017 	ldw	r4,128(sp)
10109f44:	d9801a04 	addi	r6,sp,104
10109f48:	da402c15 	stw	r9,176(sp)
10109f4c:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109f50:	da402c17 	ldw	r9,176(sp)
10109f54:	103f6a1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109f58:	d9401b17 	ldw	r5,108(sp)
10109f5c:	d8801c17 	ldw	r2,112(sp)
10109f60:	d811883a 	mov	r8,sp
10109f64:	29000044 	addi	r4,r5,1
10109f68:	003f1006 	br	10109bac <__alt_data_end+0xfffe9bac>
10109f6c:	1000c31e 	bne	r2,zero,1010a27c <___vfiprintf_internal_r+0x12cc>
10109f70:	01000044 	movi	r4,1
10109f74:	000b883a 	mov	r5,zero
10109f78:	d811883a 	mov	r8,sp
10109f7c:	003f0d06 	br	10109bb4 <__alt_data_end+0xfffe9bb4>
10109f80:	d9402117 	ldw	r5,132(sp)
10109f84:	d9002017 	ldw	r4,128(sp)
10109f88:	d9801a04 	addi	r6,sp,104
10109f8c:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
10109f90:	103f5b1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
10109f94:	d9001b17 	ldw	r4,108(sp)
10109f98:	d8801c17 	ldw	r2,112(sp)
10109f9c:	d811883a 	mov	r8,sp
10109fa0:	21000044 	addi	r4,r4,1
10109fa4:	003d8006 	br	101095a8 <__alt_data_end+0xfffe95a8>
10109fa8:	01040474 	movhi	r4,4113
10109fac:	2105a204 	addi	r4,r4,5768
10109fb0:	d9002615 	stw	r4,152(sp)
10109fb4:	d8c02215 	stw	r3,136(sp)
10109fb8:	1029883a 	mov	r20,r2
10109fbc:	94c4b03a 	or	r2,r18,r19
10109fc0:	103fb21e 	bne	r2,zero,10109e8c <__alt_data_end+0xfffe9e8c>
10109fc4:	0039883a 	mov	fp,zero
10109fc8:	00800084 	movi	r2,2
10109fcc:	003e6b06 	br	1010997c <__alt_data_end+0xfffe997c>
10109fd0:	da802217 	ldw	r10,136(sp)
10109fd4:	d8001d85 	stb	zero,118(sp)
10109fd8:	0027883a 	mov	r19,zero
10109fdc:	50800104 	addi	r2,r10,4
10109fe0:	54800017 	ldw	r18,0(r10)
10109fe4:	483e6016 	blt	r9,zero,10109968 <__alt_data_end+0xfffe9968>
10109fe8:	00ffdfc4 	movi	r3,-129
10109fec:	d8802215 	stw	r2,136(sp)
10109ff0:	a0e8703a 	and	r20,r20,r3
10109ff4:	0039883a 	mov	fp,zero
10109ff8:	903ebb26 	beq	r18,zero,10109ae8 <__alt_data_end+0xfffe9ae8>
10109ffc:	00800244 	movi	r2,9
1010a000:	14bdee36 	bltu	r2,r18,101097bc <__alt_data_end+0xfffe97bc>
1010a004:	003eba06 	br	10109af0 <__alt_data_end+0xfffe9af0>
1010a008:	00800c04 	movi	r2,48
1010a00c:	d8c01d45 	stb	r3,117(sp)
1010a010:	d8801d05 	stb	r2,116(sp)
1010a014:	d8001d85 	stb	zero,118(sp)
1010a018:	a0c00094 	ori	r3,r20,2
1010a01c:	4800a916 	blt	r9,zero,1010a2c4 <___vfiprintf_internal_r+0x1314>
1010a020:	00bfdfc4 	movi	r2,-129
1010a024:	a096703a 	and	r11,r20,r2
1010a028:	5d000094 	ori	r20,r11,2
1010a02c:	0039883a 	mov	fp,zero
1010a030:	003f9706 	br	10109e90 <__alt_data_end+0xfffe9e90>
1010a034:	8025883a 	mov	r18,r16
1010a038:	003c2e06 	br	101090f4 <__alt_data_end+0xfffe90f4>
1010a03c:	00840474 	movhi	r2,4113
1010a040:	1085a204 	addi	r2,r2,5768
1010a044:	0039883a 	mov	fp,zero
1010a048:	d8802615 	stw	r2,152(sp)
1010a04c:	003f9006 	br	10109e90 <__alt_data_end+0xfffe9e90>
1010a050:	04a5c83a 	sub	r18,zero,r18
1010a054:	07000b44 	movi	fp,45
1010a058:	9004c03a 	cmpne	r2,r18,zero
1010a05c:	04e7c83a 	sub	r19,zero,r19
1010a060:	df001d85 	stb	fp,118(sp)
1010a064:	98a7c83a 	sub	r19,r19,r2
1010a068:	48009f16 	blt	r9,zero,1010a2e8 <___vfiprintf_internal_r+0x1338>
1010a06c:	00bfdfc4 	movi	r2,-129
1010a070:	a0a8703a 	and	r20,r20,r2
1010a074:	003dd006 	br	101097b8 <__alt_data_end+0xfffe97b8>
1010a078:	70004c26 	beq	r14,zero,1010a1ac <___vfiprintf_internal_r+0x11fc>
1010a07c:	00800084 	movi	r2,2
1010a080:	d8c01d04 	addi	r3,sp,116
1010a084:	d8c00015 	stw	r3,0(sp)
1010a088:	d8800115 	stw	r2,4(sp)
1010a08c:	01000044 	movi	r4,1
1010a090:	d811883a 	mov	r8,sp
1010a094:	003f7306 	br	10109e64 <__alt_data_end+0xfffe9e64>
1010a098:	a080100c 	andi	r2,r20,64
1010a09c:	da802217 	ldw	r10,136(sp)
1010a0a0:	103e0626 	beq	r2,zero,101098bc <__alt_data_end+0xfffe98bc>
1010a0a4:	5480000f 	ldh	r18,0(r10)
1010a0a8:	52800104 	addi	r10,r10,4
1010a0ac:	da802215 	stw	r10,136(sp)
1010a0b0:	9027d7fa 	srai	r19,r18,31
1010a0b4:	9805883a 	mov	r2,r19
1010a0b8:	003db806 	br	1010979c <__alt_data_end+0xfffe979c>
1010a0bc:	a080040c 	andi	r2,r20,16
1010a0c0:	1000091e 	bne	r2,zero,1010a0e8 <___vfiprintf_internal_r+0x1138>
1010a0c4:	a2c0100c 	andi	r11,r20,64
1010a0c8:	58000726 	beq	r11,zero,1010a0e8 <___vfiprintf_internal_r+0x1138>
1010a0cc:	da802217 	ldw	r10,136(sp)
1010a0d0:	50800017 	ldw	r2,0(r10)
1010a0d4:	52800104 	addi	r10,r10,4
1010a0d8:	da802215 	stw	r10,136(sp)
1010a0dc:	da802317 	ldw	r10,140(sp)
1010a0e0:	1280000d 	sth	r10,0(r2)
1010a0e4:	003be706 	br	10109084 <__alt_data_end+0xfffe9084>
1010a0e8:	da802217 	ldw	r10,136(sp)
1010a0ec:	50800017 	ldw	r2,0(r10)
1010a0f0:	52800104 	addi	r10,r10,4
1010a0f4:	da802215 	stw	r10,136(sp)
1010a0f8:	da802317 	ldw	r10,140(sp)
1010a0fc:	12800015 	stw	r10,0(r2)
1010a100:	003be006 	br	10109084 <__alt_data_end+0xfffe9084>
1010a104:	a080100c 	andi	r2,r20,64
1010a108:	da802217 	ldw	r10,136(sp)
1010a10c:	10003026 	beq	r2,zero,1010a1d0 <___vfiprintf_internal_r+0x1220>
1010a110:	5480000b 	ldhu	r18,0(r10)
1010a114:	52800104 	addi	r10,r10,4
1010a118:	0027883a 	mov	r19,zero
1010a11c:	da802215 	stw	r10,136(sp)
1010a120:	003d8006 	br	10109724 <__alt_data_end+0xfffe9724>
1010a124:	80c00007 	ldb	r3,0(r16)
1010a128:	003c0006 	br	1010912c <__alt_data_end+0xfffe912c>
1010a12c:	a080100c 	andi	r2,r20,64
1010a130:	d8001d85 	stb	zero,118(sp)
1010a134:	da802217 	ldw	r10,136(sp)
1010a138:	1000201e 	bne	r2,zero,1010a1bc <___vfiprintf_internal_r+0x120c>
1010a13c:	50800104 	addi	r2,r10,4
1010a140:	54800017 	ldw	r18,0(r10)
1010a144:	0027883a 	mov	r19,zero
1010a148:	483def0e 	bge	r9,zero,10109908 <__alt_data_end+0xfffe9908>
1010a14c:	94c6b03a 	or	r3,r18,r19
1010a150:	d8802215 	stw	r2,136(sp)
1010a154:	183d4e1e 	bne	r3,zero,10109690 <__alt_data_end+0xfffe9690>
1010a158:	0039883a 	mov	fp,zero
1010a15c:	0005883a 	mov	r2,zero
1010a160:	003e0606 	br	1010997c <__alt_data_end+0xfffe997c>
1010a164:	d9402117 	ldw	r5,132(sp)
1010a168:	d9002017 	ldw	r4,128(sp)
1010a16c:	d9801a04 	addi	r6,sp,104
1010a170:	da402c15 	stw	r9,176(sp)
1010a174:	db802a15 	stw	r14,168(sp)
1010a178:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
1010a17c:	da402c17 	ldw	r9,176(sp)
1010a180:	db802a17 	ldw	r14,168(sp)
1010a184:	103ede1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
1010a188:	d9401b17 	ldw	r5,108(sp)
1010a18c:	d8801c17 	ldw	r2,112(sp)
1010a190:	d811883a 	mov	r8,sp
1010a194:	29000044 	addi	r4,r5,1
1010a198:	003e7406 	br	10109b6c <__alt_data_end+0xfffe9b6c>
1010a19c:	00bfffc4 	movi	r2,-1
1010a1a0:	003c5806 	br	10109304 <__alt_data_end+0xfffe9304>
1010a1a4:	d811883a 	mov	r8,sp
1010a1a8:	003ee806 	br	10109d4c <__alt_data_end+0xfffe9d4c>
1010a1ac:	000b883a 	mov	r5,zero
1010a1b0:	01000044 	movi	r4,1
1010a1b4:	d811883a 	mov	r8,sp
1010a1b8:	003e7c06 	br	10109bac <__alt_data_end+0xfffe9bac>
1010a1bc:	50800104 	addi	r2,r10,4
1010a1c0:	5480000b 	ldhu	r18,0(r10)
1010a1c4:	0027883a 	mov	r19,zero
1010a1c8:	483dcf0e 	bge	r9,zero,10109908 <__alt_data_end+0xfffe9908>
1010a1cc:	003fdf06 	br	1010a14c <__alt_data_end+0xfffea14c>
1010a1d0:	54800017 	ldw	r18,0(r10)
1010a1d4:	52800104 	addi	r10,r10,4
1010a1d8:	0027883a 	mov	r19,zero
1010a1dc:	da802215 	stw	r10,136(sp)
1010a1e0:	003d5006 	br	10109724 <__alt_data_end+0xfffe9724>
1010a1e4:	50800104 	addi	r2,r10,4
1010a1e8:	5480000b 	ldhu	r18,0(r10)
1010a1ec:	0027883a 	mov	r19,zero
1010a1f0:	483f7d0e 	bge	r9,zero,10109fe8 <__alt_data_end+0xfffe9fe8>
1010a1f4:	003ddc06 	br	10109968 <__alt_data_end+0xfffe9968>
1010a1f8:	d8c02215 	stw	r3,136(sp)
1010a1fc:	0039883a 	mov	fp,zero
1010a200:	003ddb06 	br	10109970 <__alt_data_end+0xfffe9970>
1010a204:	02840474 	movhi	r10,4113
1010a208:	52860204 	addi	r10,r10,6152
1010a20c:	da802415 	stw	r10,144(sp)
1010a210:	003e8306 	br	10109c20 <__alt_data_end+0xfffe9c20>
1010a214:	d8801c17 	ldw	r2,112(sp)
1010a218:	dd002117 	ldw	r20,132(sp)
1010a21c:	103eb926 	beq	r2,zero,10109d04 <__alt_data_end+0xfffe9d04>
1010a220:	d9002017 	ldw	r4,128(sp)
1010a224:	d9801a04 	addi	r6,sp,104
1010a228:	a00b883a 	mov	r5,r20
1010a22c:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
1010a230:	003eb406 	br	10109d04 <__alt_data_end+0xfffe9d04>
1010a234:	80c00043 	ldbu	r3,1(r16)
1010a238:	a5000814 	ori	r20,r20,32
1010a23c:	84000044 	addi	r16,r16,1
1010a240:	18c03fcc 	andi	r3,r3,255
1010a244:	18c0201c 	xori	r3,r3,128
1010a248:	18ffe004 	addi	r3,r3,-128
1010a24c:	003bb706 	br	1010912c <__alt_data_end+0xfffe912c>
1010a250:	a809883a 	mov	r4,r21
1010a254:	d8c02a15 	stw	r3,168(sp)
1010a258:	da002b15 	stw	r8,172(sp)
1010a25c:	0108e040 	call	10108e04 <strlen>
1010a260:	d8c02a17 	ldw	r3,168(sp)
1010a264:	1027883a 	mov	r19,r2
1010a268:	df001d83 	ldbu	fp,118(sp)
1010a26c:	d8c02215 	stw	r3,136(sp)
1010a270:	0013883a 	mov	r9,zero
1010a274:	da002b17 	ldw	r8,172(sp)
1010a278:	003c4d06 	br	101093b0 <__alt_data_end+0xfffe93b0>
1010a27c:	d9402117 	ldw	r5,132(sp)
1010a280:	d9002017 	ldw	r4,128(sp)
1010a284:	d9801a04 	addi	r6,sp,104
1010a288:	da402c15 	stw	r9,176(sp)
1010a28c:	0108e9c0 	call	10108e9c <__sprint_r.part.0>
1010a290:	da402c17 	ldw	r9,176(sp)
1010a294:	103e9a1e 	bne	r2,zero,10109d00 <__alt_data_end+0xfffe9d00>
1010a298:	d9401b17 	ldw	r5,108(sp)
1010a29c:	d8801c17 	ldw	r2,112(sp)
1010a2a0:	d811883a 	mov	r8,sp
1010a2a4:	29000044 	addi	r4,r5,1
1010a2a8:	003e4206 	br	10109bb4 <__alt_data_end+0xfffe9bb4>
1010a2ac:	d9401b17 	ldw	r5,108(sp)
1010a2b0:	01040474 	movhi	r4,4113
1010a2b4:	21060604 	addi	r4,r4,6168
1010a2b8:	d9002415 	stw	r4,144(sp)
1010a2bc:	29400044 	addi	r5,r5,1
1010a2c0:	003c6d06 	br	10109478 <__alt_data_end+0xfffe9478>
1010a2c4:	0039883a 	mov	fp,zero
1010a2c8:	00800084 	movi	r2,2
1010a2cc:	10803fcc 	andi	r2,r2,255
1010a2d0:	01000044 	movi	r4,1
1010a2d4:	11001e26 	beq	r2,r4,1010a350 <___vfiprintf_internal_r+0x13a0>
1010a2d8:	01000084 	movi	r4,2
1010a2dc:	11001e1e 	bne	r2,r4,1010a358 <___vfiprintf_internal_r+0x13a8>
1010a2e0:	1829883a 	mov	r20,r3
1010a2e4:	003eea06 	br	10109e90 <__alt_data_end+0xfffe9e90>
1010a2e8:	a007883a 	mov	r3,r20
1010a2ec:	00800044 	movi	r2,1
1010a2f0:	003ff606 	br	1010a2cc <__alt_data_end+0xfffea2cc>
1010a2f4:	00800184 	movi	r2,6
1010a2f8:	1240012e 	bgeu	r2,r9,1010a300 <___vfiprintf_internal_r+0x1350>
1010a2fc:	1013883a 	mov	r9,r2
1010a300:	4827883a 	mov	r19,r9
1010a304:	4825883a 	mov	r18,r9
1010a308:	48001516 	blt	r9,zero,1010a360 <___vfiprintf_internal_r+0x13b0>
1010a30c:	05440474 	movhi	r21,4113
1010a310:	d8c02215 	stw	r3,136(sp)
1010a314:	ad45a704 	addi	r21,r21,5788
1010a318:	003d1406 	br	1010976c <__alt_data_end+0xfffe976c>
1010a31c:	02840474 	movhi	r10,4113
1010a320:	52860204 	addi	r10,r10,6152
1010a324:	da802415 	stw	r10,144(sp)
1010a328:	200d883a 	mov	r6,r4
1010a32c:	003c9106 	br	10109574 <__alt_data_end+0xfffe9574>
1010a330:	5021883a 	mov	r16,r10
1010a334:	0013883a 	mov	r9,zero
1010a338:	003b7d06 	br	10109130 <__alt_data_end+0xfffe9130>
1010a33c:	4827883a 	mov	r19,r9
1010a340:	df001d83 	ldbu	fp,118(sp)
1010a344:	d8c02215 	stw	r3,136(sp)
1010a348:	0013883a 	mov	r9,zero
1010a34c:	003c1806 	br	101093b0 <__alt_data_end+0xfffe93b0>
1010a350:	1829883a 	mov	r20,r3
1010a354:	003d1806 	br	101097b8 <__alt_data_end+0xfffe97b8>
1010a358:	1829883a 	mov	r20,r3
1010a35c:	003ccd06 	br	10109694 <__alt_data_end+0xfffe9694>
1010a360:	0025883a 	mov	r18,zero
1010a364:	003fe906 	br	1010a30c <__alt_data_end+0xfffea30c>
1010a368:	d8802217 	ldw	r2,136(sp)
1010a36c:	80c00043 	ldbu	r3,1(r16)
1010a370:	5021883a 	mov	r16,r10
1010a374:	12400017 	ldw	r9,0(r2)
1010a378:	10800104 	addi	r2,r2,4
1010a37c:	d8802215 	stw	r2,136(sp)
1010a380:	483faf0e 	bge	r9,zero,1010a240 <__alt_data_end+0xfffea240>
1010a384:	18c03fcc 	andi	r3,r3,255
1010a388:	18c0201c 	xori	r3,r3,128
1010a38c:	027fffc4 	movi	r9,-1
1010a390:	18ffe004 	addi	r3,r3,-128
1010a394:	003b6506 	br	1010912c <__alt_data_end+0xfffe912c>
1010a398:	d9c01d85 	stb	r7,118(sp)
1010a39c:	003ca006 	br	10109620 <__alt_data_end+0xfffe9620>
1010a3a0:	d9c01d85 	stb	r7,118(sp)
1010a3a4:	003cad06 	br	1010965c <__alt_data_end+0xfffe965c>
1010a3a8:	d9c01d85 	stb	r7,118(sp)
1010a3ac:	003d7d06 	br	101099a4 <__alt_data_end+0xfffe99a4>
1010a3b0:	d9c01d85 	stb	r7,118(sp)
1010a3b4:	003d5f06 	br	10109934 <__alt_data_end+0xfffe9934>
1010a3b8:	a080004c 	andi	r2,r20,1
1010a3bc:	0039883a 	mov	fp,zero
1010a3c0:	10000526 	beq	r2,zero,1010a3d8 <___vfiprintf_internal_r+0x1428>
1010a3c4:	00800c04 	movi	r2,48
1010a3c8:	d88019c5 	stb	r2,103(sp)
1010a3cc:	dcc02717 	ldw	r19,156(sp)
1010a3d0:	dd4019c4 	addi	r21,sp,103
1010a3d4:	003bf606 	br	101093b0 <__alt_data_end+0xfffe93b0>
1010a3d8:	0027883a 	mov	r19,zero
1010a3dc:	dd401a04 	addi	r21,sp,104
1010a3e0:	003bf306 	br	101093b0 <__alt_data_end+0xfffe93b0>
1010a3e4:	d9c01d85 	stb	r7,118(sp)
1010a3e8:	003dc806 	br	10109b0c <__alt_data_end+0xfffe9b0c>
1010a3ec:	d9c01d85 	stb	r7,118(sp)
1010a3f0:	003d3a06 	br	101098dc <__alt_data_end+0xfffe98dc>
1010a3f4:	d9c01d85 	stb	r7,118(sp)
1010a3f8:	003d2a06 	br	101098a4 <__alt_data_end+0xfffe98a4>
1010a3fc:	d9c01d85 	stb	r7,118(sp)
1010a400:	003cde06 	br	1010977c <__alt_data_end+0xfffe977c>
1010a404:	d9c01d85 	stb	r7,118(sp)
1010a408:	003cbc06 	br	101096fc <__alt_data_end+0xfffe96fc>

1010a40c <__vfiprintf_internal>:
1010a40c:	00840474 	movhi	r2,4113
1010a410:	108d1004 	addi	r2,r2,13376
1010a414:	300f883a 	mov	r7,r6
1010a418:	280d883a 	mov	r6,r5
1010a41c:	200b883a 	mov	r5,r4
1010a420:	11000017 	ldw	r4,0(r2)
1010a424:	0108fb01 	jmpi	10108fb0 <___vfiprintf_internal_r>

1010a428 <__sbprintf>:
1010a428:	2880030b 	ldhu	r2,12(r5)
1010a42c:	2ac01917 	ldw	r11,100(r5)
1010a430:	2a80038b 	ldhu	r10,14(r5)
1010a434:	2a400717 	ldw	r9,28(r5)
1010a438:	2a000917 	ldw	r8,36(r5)
1010a43c:	defee204 	addi	sp,sp,-1144
1010a440:	00c10004 	movi	r3,1024
1010a444:	dc011a15 	stw	r16,1128(sp)
1010a448:	10bfff4c 	andi	r2,r2,65533
1010a44c:	2821883a 	mov	r16,r5
1010a450:	d8cb883a 	add	r5,sp,r3
1010a454:	dc811c15 	stw	r18,1136(sp)
1010a458:	dc411b15 	stw	r17,1132(sp)
1010a45c:	dfc11d15 	stw	ra,1140(sp)
1010a460:	2025883a 	mov	r18,r4
1010a464:	d881030d 	sth	r2,1036(sp)
1010a468:	dac11915 	stw	r11,1124(sp)
1010a46c:	da81038d 	sth	r10,1038(sp)
1010a470:	da410715 	stw	r9,1052(sp)
1010a474:	da010915 	stw	r8,1060(sp)
1010a478:	dec10015 	stw	sp,1024(sp)
1010a47c:	dec10415 	stw	sp,1040(sp)
1010a480:	d8c10215 	stw	r3,1032(sp)
1010a484:	d8c10515 	stw	r3,1044(sp)
1010a488:	d8010615 	stw	zero,1048(sp)
1010a48c:	0108fb00 	call	10108fb0 <___vfiprintf_internal_r>
1010a490:	1023883a 	mov	r17,r2
1010a494:	10000416 	blt	r2,zero,1010a4a8 <__sbprintf+0x80>
1010a498:	d9410004 	addi	r5,sp,1024
1010a49c:	9009883a 	mov	r4,r18
1010a4a0:	0101b380 	call	10101b38 <_fflush_r>
1010a4a4:	10000d1e 	bne	r2,zero,1010a4dc <__sbprintf+0xb4>
1010a4a8:	d881030b 	ldhu	r2,1036(sp)
1010a4ac:	1080100c 	andi	r2,r2,64
1010a4b0:	10000326 	beq	r2,zero,1010a4c0 <__sbprintf+0x98>
1010a4b4:	8080030b 	ldhu	r2,12(r16)
1010a4b8:	10801014 	ori	r2,r2,64
1010a4bc:	8080030d 	sth	r2,12(r16)
1010a4c0:	8805883a 	mov	r2,r17
1010a4c4:	dfc11d17 	ldw	ra,1140(sp)
1010a4c8:	dc811c17 	ldw	r18,1136(sp)
1010a4cc:	dc411b17 	ldw	r17,1132(sp)
1010a4d0:	dc011a17 	ldw	r16,1128(sp)
1010a4d4:	dec11e04 	addi	sp,sp,1144
1010a4d8:	f800283a 	ret
1010a4dc:	047fffc4 	movi	r17,-1
1010a4e0:	003ff106 	br	1010a4a8 <__alt_data_end+0xfffea4a8>

1010a4e4 <_calloc_r>:
1010a4e4:	298b383a 	mul	r5,r5,r6
1010a4e8:	defffe04 	addi	sp,sp,-8
1010a4ec:	dfc00115 	stw	ra,4(sp)
1010a4f0:	dc000015 	stw	r16,0(sp)
1010a4f4:	0102d100 	call	10102d10 <_malloc_r>
1010a4f8:	10002926 	beq	r2,zero,1010a5a0 <_calloc_r+0xbc>
1010a4fc:	11bfff17 	ldw	r6,-4(r2)
1010a500:	1021883a 	mov	r16,r2
1010a504:	00bfff04 	movi	r2,-4
1010a508:	308c703a 	and	r6,r6,r2
1010a50c:	00c00904 	movi	r3,36
1010a510:	308d883a 	add	r6,r6,r2
1010a514:	19801636 	bltu	r3,r6,1010a570 <_calloc_r+0x8c>
1010a518:	008004c4 	movi	r2,19
1010a51c:	11800b2e 	bgeu	r2,r6,1010a54c <_calloc_r+0x68>
1010a520:	80000015 	stw	zero,0(r16)
1010a524:	80000115 	stw	zero,4(r16)
1010a528:	008006c4 	movi	r2,27
1010a52c:	11801a2e 	bgeu	r2,r6,1010a598 <_calloc_r+0xb4>
1010a530:	80000215 	stw	zero,8(r16)
1010a534:	80000315 	stw	zero,12(r16)
1010a538:	30c0151e 	bne	r6,r3,1010a590 <_calloc_r+0xac>
1010a53c:	80000415 	stw	zero,16(r16)
1010a540:	80800604 	addi	r2,r16,24
1010a544:	80000515 	stw	zero,20(r16)
1010a548:	00000106 	br	1010a550 <_calloc_r+0x6c>
1010a54c:	8005883a 	mov	r2,r16
1010a550:	10000015 	stw	zero,0(r2)
1010a554:	10000115 	stw	zero,4(r2)
1010a558:	10000215 	stw	zero,8(r2)
1010a55c:	8005883a 	mov	r2,r16
1010a560:	dfc00117 	ldw	ra,4(sp)
1010a564:	dc000017 	ldw	r16,0(sp)
1010a568:	dec00204 	addi	sp,sp,8
1010a56c:	f800283a 	ret
1010a570:	000b883a 	mov	r5,zero
1010a574:	8009883a 	mov	r4,r16
1010a578:	010351c0 	call	1010351c <memset>
1010a57c:	8005883a 	mov	r2,r16
1010a580:	dfc00117 	ldw	ra,4(sp)
1010a584:	dc000017 	ldw	r16,0(sp)
1010a588:	dec00204 	addi	sp,sp,8
1010a58c:	f800283a 	ret
1010a590:	80800404 	addi	r2,r16,16
1010a594:	003fee06 	br	1010a550 <__alt_data_end+0xfffea550>
1010a598:	80800204 	addi	r2,r16,8
1010a59c:	003fec06 	br	1010a550 <__alt_data_end+0xfffea550>
1010a5a0:	0005883a 	mov	r2,zero
1010a5a4:	003fee06 	br	1010a560 <__alt_data_end+0xfffea560>

1010a5a8 <__fputwc>:
1010a5a8:	defff804 	addi	sp,sp,-32
1010a5ac:	dcc00415 	stw	r19,16(sp)
1010a5b0:	dc800315 	stw	r18,12(sp)
1010a5b4:	dc000115 	stw	r16,4(sp)
1010a5b8:	dfc00715 	stw	ra,28(sp)
1010a5bc:	dd400615 	stw	r21,24(sp)
1010a5c0:	dd000515 	stw	r20,20(sp)
1010a5c4:	dc400215 	stw	r17,8(sp)
1010a5c8:	2027883a 	mov	r19,r4
1010a5cc:	2825883a 	mov	r18,r5
1010a5d0:	3021883a 	mov	r16,r6
1010a5d4:	01079780 	call	10107978 <__locale_mb_cur_max>
1010a5d8:	00c00044 	movi	r3,1
1010a5dc:	10c03e26 	beq	r2,r3,1010a6d8 <__fputwc+0x130>
1010a5e0:	81c01704 	addi	r7,r16,92
1010a5e4:	900d883a 	mov	r6,r18
1010a5e8:	d80b883a 	mov	r5,sp
1010a5ec:	9809883a 	mov	r4,r19
1010a5f0:	010b4840 	call	1010b484 <_wcrtomb_r>
1010a5f4:	1029883a 	mov	r20,r2
1010a5f8:	00bfffc4 	movi	r2,-1
1010a5fc:	a0802026 	beq	r20,r2,1010a680 <__fputwc+0xd8>
1010a600:	d9400003 	ldbu	r5,0(sp)
1010a604:	a0001c26 	beq	r20,zero,1010a678 <__fputwc+0xd0>
1010a608:	0023883a 	mov	r17,zero
1010a60c:	05400284 	movi	r21,10
1010a610:	00000906 	br	1010a638 <__fputwc+0x90>
1010a614:	80800017 	ldw	r2,0(r16)
1010a618:	11400005 	stb	r5,0(r2)
1010a61c:	80c00017 	ldw	r3,0(r16)
1010a620:	18c00044 	addi	r3,r3,1
1010a624:	80c00015 	stw	r3,0(r16)
1010a628:	8c400044 	addi	r17,r17,1
1010a62c:	dc45883a 	add	r2,sp,r17
1010a630:	8d00112e 	bgeu	r17,r20,1010a678 <__fputwc+0xd0>
1010a634:	11400003 	ldbu	r5,0(r2)
1010a638:	80c00217 	ldw	r3,8(r16)
1010a63c:	18ffffc4 	addi	r3,r3,-1
1010a640:	80c00215 	stw	r3,8(r16)
1010a644:	183ff30e 	bge	r3,zero,1010a614 <__alt_data_end+0xfffea614>
1010a648:	80800617 	ldw	r2,24(r16)
1010a64c:	18801916 	blt	r3,r2,1010a6b4 <__fputwc+0x10c>
1010a650:	80800017 	ldw	r2,0(r16)
1010a654:	11400005 	stb	r5,0(r2)
1010a658:	80800017 	ldw	r2,0(r16)
1010a65c:	10c00003 	ldbu	r3,0(r2)
1010a660:	10800044 	addi	r2,r2,1
1010a664:	1d402326 	beq	r3,r21,1010a6f4 <__fputwc+0x14c>
1010a668:	80800015 	stw	r2,0(r16)
1010a66c:	8c400044 	addi	r17,r17,1
1010a670:	dc45883a 	add	r2,sp,r17
1010a674:	8d3fef36 	bltu	r17,r20,1010a634 <__alt_data_end+0xfffea634>
1010a678:	9005883a 	mov	r2,r18
1010a67c:	00000406 	br	1010a690 <__fputwc+0xe8>
1010a680:	80c0030b 	ldhu	r3,12(r16)
1010a684:	a005883a 	mov	r2,r20
1010a688:	18c01014 	ori	r3,r3,64
1010a68c:	80c0030d 	sth	r3,12(r16)
1010a690:	dfc00717 	ldw	ra,28(sp)
1010a694:	dd400617 	ldw	r21,24(sp)
1010a698:	dd000517 	ldw	r20,20(sp)
1010a69c:	dcc00417 	ldw	r19,16(sp)
1010a6a0:	dc800317 	ldw	r18,12(sp)
1010a6a4:	dc400217 	ldw	r17,8(sp)
1010a6a8:	dc000117 	ldw	r16,4(sp)
1010a6ac:	dec00804 	addi	sp,sp,32
1010a6b0:	f800283a 	ret
1010a6b4:	800d883a 	mov	r6,r16
1010a6b8:	29403fcc 	andi	r5,r5,255
1010a6bc:	9809883a 	mov	r4,r19
1010a6c0:	010b32c0 	call	1010b32c <__swbuf_r>
1010a6c4:	10bfffe0 	cmpeqi	r2,r2,-1
1010a6c8:	10803fcc 	andi	r2,r2,255
1010a6cc:	103fd626 	beq	r2,zero,1010a628 <__alt_data_end+0xfffea628>
1010a6d0:	00bfffc4 	movi	r2,-1
1010a6d4:	003fee06 	br	1010a690 <__alt_data_end+0xfffea690>
1010a6d8:	90ffffc4 	addi	r3,r18,-1
1010a6dc:	01003f84 	movi	r4,254
1010a6e0:	20ffbf36 	bltu	r4,r3,1010a5e0 <__alt_data_end+0xfffea5e0>
1010a6e4:	900b883a 	mov	r5,r18
1010a6e8:	dc800005 	stb	r18,0(sp)
1010a6ec:	1029883a 	mov	r20,r2
1010a6f0:	003fc506 	br	1010a608 <__alt_data_end+0xfffea608>
1010a6f4:	800d883a 	mov	r6,r16
1010a6f8:	a80b883a 	mov	r5,r21
1010a6fc:	9809883a 	mov	r4,r19
1010a700:	010b32c0 	call	1010b32c <__swbuf_r>
1010a704:	10bfffe0 	cmpeqi	r2,r2,-1
1010a708:	003fef06 	br	1010a6c8 <__alt_data_end+0xfffea6c8>

1010a70c <_fputwc_r>:
1010a70c:	3080030b 	ldhu	r2,12(r6)
1010a710:	10c8000c 	andi	r3,r2,8192
1010a714:	1800051e 	bne	r3,zero,1010a72c <_fputwc_r+0x20>
1010a718:	30c01917 	ldw	r3,100(r6)
1010a71c:	10880014 	ori	r2,r2,8192
1010a720:	3080030d 	sth	r2,12(r6)
1010a724:	18880014 	ori	r2,r3,8192
1010a728:	30801915 	stw	r2,100(r6)
1010a72c:	010a5a81 	jmpi	1010a5a8 <__fputwc>

1010a730 <fputwc>:
1010a730:	00840474 	movhi	r2,4113
1010a734:	defffc04 	addi	sp,sp,-16
1010a738:	108d1004 	addi	r2,r2,13376
1010a73c:	dc000115 	stw	r16,4(sp)
1010a740:	14000017 	ldw	r16,0(r2)
1010a744:	dc400215 	stw	r17,8(sp)
1010a748:	dfc00315 	stw	ra,12(sp)
1010a74c:	2023883a 	mov	r17,r4
1010a750:	80000226 	beq	r16,zero,1010a75c <fputwc+0x2c>
1010a754:	80800e17 	ldw	r2,56(r16)
1010a758:	10001026 	beq	r2,zero,1010a79c <fputwc+0x6c>
1010a75c:	2880030b 	ldhu	r2,12(r5)
1010a760:	10c8000c 	andi	r3,r2,8192
1010a764:	1800051e 	bne	r3,zero,1010a77c <fputwc+0x4c>
1010a768:	28c01917 	ldw	r3,100(r5)
1010a76c:	10880014 	ori	r2,r2,8192
1010a770:	2880030d 	sth	r2,12(r5)
1010a774:	18880014 	ori	r2,r3,8192
1010a778:	28801915 	stw	r2,100(r5)
1010a77c:	280d883a 	mov	r6,r5
1010a780:	8009883a 	mov	r4,r16
1010a784:	880b883a 	mov	r5,r17
1010a788:	dfc00317 	ldw	ra,12(sp)
1010a78c:	dc400217 	ldw	r17,8(sp)
1010a790:	dc000117 	ldw	r16,4(sp)
1010a794:	dec00404 	addi	sp,sp,16
1010a798:	010a5a81 	jmpi	1010a5a8 <__fputwc>
1010a79c:	8009883a 	mov	r4,r16
1010a7a0:	d9400015 	stw	r5,0(sp)
1010a7a4:	0101f140 	call	10101f14 <__sinit>
1010a7a8:	d9400017 	ldw	r5,0(sp)
1010a7ac:	003feb06 	br	1010a75c <__alt_data_end+0xfffea75c>

1010a7b0 <__sfvwrite_r>:
1010a7b0:	30800217 	ldw	r2,8(r6)
1010a7b4:	10006726 	beq	r2,zero,1010a954 <__sfvwrite_r+0x1a4>
1010a7b8:	28c0030b 	ldhu	r3,12(r5)
1010a7bc:	defff404 	addi	sp,sp,-48
1010a7c0:	dd400715 	stw	r21,28(sp)
1010a7c4:	dd000615 	stw	r20,24(sp)
1010a7c8:	dc000215 	stw	r16,8(sp)
1010a7cc:	dfc00b15 	stw	ra,44(sp)
1010a7d0:	df000a15 	stw	fp,40(sp)
1010a7d4:	ddc00915 	stw	r23,36(sp)
1010a7d8:	dd800815 	stw	r22,32(sp)
1010a7dc:	dcc00515 	stw	r19,20(sp)
1010a7e0:	dc800415 	stw	r18,16(sp)
1010a7e4:	dc400315 	stw	r17,12(sp)
1010a7e8:	1880020c 	andi	r2,r3,8
1010a7ec:	2821883a 	mov	r16,r5
1010a7f0:	202b883a 	mov	r21,r4
1010a7f4:	3029883a 	mov	r20,r6
1010a7f8:	10002726 	beq	r2,zero,1010a898 <__sfvwrite_r+0xe8>
1010a7fc:	28800417 	ldw	r2,16(r5)
1010a800:	10002526 	beq	r2,zero,1010a898 <__sfvwrite_r+0xe8>
1010a804:	1880008c 	andi	r2,r3,2
1010a808:	a4400017 	ldw	r17,0(r20)
1010a80c:	10002a26 	beq	r2,zero,1010a8b8 <__sfvwrite_r+0x108>
1010a810:	05a00034 	movhi	r22,32768
1010a814:	0027883a 	mov	r19,zero
1010a818:	0025883a 	mov	r18,zero
1010a81c:	b5bf0004 	addi	r22,r22,-1024
1010a820:	980d883a 	mov	r6,r19
1010a824:	a809883a 	mov	r4,r21
1010a828:	90004626 	beq	r18,zero,1010a944 <__sfvwrite_r+0x194>
1010a82c:	900f883a 	mov	r7,r18
1010a830:	b480022e 	bgeu	r22,r18,1010a83c <__sfvwrite_r+0x8c>
1010a834:	01e00034 	movhi	r7,32768
1010a838:	39ff0004 	addi	r7,r7,-1024
1010a83c:	80800917 	ldw	r2,36(r16)
1010a840:	81400717 	ldw	r5,28(r16)
1010a844:	103ee83a 	callr	r2
1010a848:	0080570e 	bge	zero,r2,1010a9a8 <__sfvwrite_r+0x1f8>
1010a84c:	a0c00217 	ldw	r3,8(r20)
1010a850:	98a7883a 	add	r19,r19,r2
1010a854:	90a5c83a 	sub	r18,r18,r2
1010a858:	1885c83a 	sub	r2,r3,r2
1010a85c:	a0800215 	stw	r2,8(r20)
1010a860:	103fef1e 	bne	r2,zero,1010a820 <__alt_data_end+0xfffea820>
1010a864:	0005883a 	mov	r2,zero
1010a868:	dfc00b17 	ldw	ra,44(sp)
1010a86c:	df000a17 	ldw	fp,40(sp)
1010a870:	ddc00917 	ldw	r23,36(sp)
1010a874:	dd800817 	ldw	r22,32(sp)
1010a878:	dd400717 	ldw	r21,28(sp)
1010a87c:	dd000617 	ldw	r20,24(sp)
1010a880:	dcc00517 	ldw	r19,20(sp)
1010a884:	dc800417 	ldw	r18,16(sp)
1010a888:	dc400317 	ldw	r17,12(sp)
1010a88c:	dc000217 	ldw	r16,8(sp)
1010a890:	dec00c04 	addi	sp,sp,48
1010a894:	f800283a 	ret
1010a898:	800b883a 	mov	r5,r16
1010a89c:	a809883a 	mov	r4,r21
1010a8a0:	0105dc00 	call	10105dc0 <__swsetup_r>
1010a8a4:	1000eb1e 	bne	r2,zero,1010ac54 <__sfvwrite_r+0x4a4>
1010a8a8:	80c0030b 	ldhu	r3,12(r16)
1010a8ac:	a4400017 	ldw	r17,0(r20)
1010a8b0:	1880008c 	andi	r2,r3,2
1010a8b4:	103fd61e 	bne	r2,zero,1010a810 <__alt_data_end+0xfffea810>
1010a8b8:	1880004c 	andi	r2,r3,1
1010a8bc:	10003f1e 	bne	r2,zero,1010a9bc <__sfvwrite_r+0x20c>
1010a8c0:	0039883a 	mov	fp,zero
1010a8c4:	0025883a 	mov	r18,zero
1010a8c8:	90001a26 	beq	r18,zero,1010a934 <__sfvwrite_r+0x184>
1010a8cc:	1880800c 	andi	r2,r3,512
1010a8d0:	84c00217 	ldw	r19,8(r16)
1010a8d4:	10002126 	beq	r2,zero,1010a95c <__sfvwrite_r+0x1ac>
1010a8d8:	982f883a 	mov	r23,r19
1010a8dc:	94c09336 	bltu	r18,r19,1010ab2c <__sfvwrite_r+0x37c>
1010a8e0:	1881200c 	andi	r2,r3,1152
1010a8e4:	10009e1e 	bne	r2,zero,1010ab60 <__sfvwrite_r+0x3b0>
1010a8e8:	81000017 	ldw	r4,0(r16)
1010a8ec:	b80d883a 	mov	r6,r23
1010a8f0:	e00b883a 	mov	r5,fp
1010a8f4:	010ac6c0 	call	1010ac6c <memmove>
1010a8f8:	80c00217 	ldw	r3,8(r16)
1010a8fc:	81000017 	ldw	r4,0(r16)
1010a900:	9005883a 	mov	r2,r18
1010a904:	1ce7c83a 	sub	r19,r3,r19
1010a908:	25cf883a 	add	r7,r4,r23
1010a90c:	84c00215 	stw	r19,8(r16)
1010a910:	81c00015 	stw	r7,0(r16)
1010a914:	a0c00217 	ldw	r3,8(r20)
1010a918:	e0b9883a 	add	fp,fp,r2
1010a91c:	90a5c83a 	sub	r18,r18,r2
1010a920:	18a7c83a 	sub	r19,r3,r2
1010a924:	a4c00215 	stw	r19,8(r20)
1010a928:	983fce26 	beq	r19,zero,1010a864 <__alt_data_end+0xfffea864>
1010a92c:	80c0030b 	ldhu	r3,12(r16)
1010a930:	903fe61e 	bne	r18,zero,1010a8cc <__alt_data_end+0xfffea8cc>
1010a934:	8f000017 	ldw	fp,0(r17)
1010a938:	8c800117 	ldw	r18,4(r17)
1010a93c:	8c400204 	addi	r17,r17,8
1010a940:	003fe106 	br	1010a8c8 <__alt_data_end+0xfffea8c8>
1010a944:	8cc00017 	ldw	r19,0(r17)
1010a948:	8c800117 	ldw	r18,4(r17)
1010a94c:	8c400204 	addi	r17,r17,8
1010a950:	003fb306 	br	1010a820 <__alt_data_end+0xfffea820>
1010a954:	0005883a 	mov	r2,zero
1010a958:	f800283a 	ret
1010a95c:	81000017 	ldw	r4,0(r16)
1010a960:	80800417 	ldw	r2,16(r16)
1010a964:	11005736 	bltu	r2,r4,1010aac4 <__sfvwrite_r+0x314>
1010a968:	85c00517 	ldw	r23,20(r16)
1010a96c:	95c05536 	bltu	r18,r23,1010aac4 <__sfvwrite_r+0x314>
1010a970:	00a00034 	movhi	r2,32768
1010a974:	10bfffc4 	addi	r2,r2,-1
1010a978:	9009883a 	mov	r4,r18
1010a97c:	1480012e 	bgeu	r2,r18,1010a984 <__sfvwrite_r+0x1d4>
1010a980:	1009883a 	mov	r4,r2
1010a984:	b80b883a 	mov	r5,r23
1010a988:	01016640 	call	10101664 <__divsi3>
1010a98c:	15cf383a 	mul	r7,r2,r23
1010a990:	81400717 	ldw	r5,28(r16)
1010a994:	80800917 	ldw	r2,36(r16)
1010a998:	e00d883a 	mov	r6,fp
1010a99c:	a809883a 	mov	r4,r21
1010a9a0:	103ee83a 	callr	r2
1010a9a4:	00bfdb16 	blt	zero,r2,1010a914 <__alt_data_end+0xfffea914>
1010a9a8:	8080030b 	ldhu	r2,12(r16)
1010a9ac:	10801014 	ori	r2,r2,64
1010a9b0:	8080030d 	sth	r2,12(r16)
1010a9b4:	00bfffc4 	movi	r2,-1
1010a9b8:	003fab06 	br	1010a868 <__alt_data_end+0xfffea868>
1010a9bc:	0027883a 	mov	r19,zero
1010a9c0:	0011883a 	mov	r8,zero
1010a9c4:	0039883a 	mov	fp,zero
1010a9c8:	0025883a 	mov	r18,zero
1010a9cc:	90001f26 	beq	r18,zero,1010aa4c <__sfvwrite_r+0x29c>
1010a9d0:	40005a26 	beq	r8,zero,1010ab3c <__sfvwrite_r+0x38c>
1010a9d4:	982d883a 	mov	r22,r19
1010a9d8:	94c0012e 	bgeu	r18,r19,1010a9e0 <__sfvwrite_r+0x230>
1010a9dc:	902d883a 	mov	r22,r18
1010a9e0:	81000017 	ldw	r4,0(r16)
1010a9e4:	80800417 	ldw	r2,16(r16)
1010a9e8:	b02f883a 	mov	r23,r22
1010a9ec:	81c00517 	ldw	r7,20(r16)
1010a9f0:	1100032e 	bgeu	r2,r4,1010aa00 <__sfvwrite_r+0x250>
1010a9f4:	80c00217 	ldw	r3,8(r16)
1010a9f8:	38c7883a 	add	r3,r7,r3
1010a9fc:	1d801816 	blt	r3,r22,1010aa60 <__sfvwrite_r+0x2b0>
1010aa00:	b1c03e16 	blt	r22,r7,1010aafc <__sfvwrite_r+0x34c>
1010aa04:	80800917 	ldw	r2,36(r16)
1010aa08:	81400717 	ldw	r5,28(r16)
1010aa0c:	e00d883a 	mov	r6,fp
1010aa10:	da000115 	stw	r8,4(sp)
1010aa14:	a809883a 	mov	r4,r21
1010aa18:	103ee83a 	callr	r2
1010aa1c:	102f883a 	mov	r23,r2
1010aa20:	da000117 	ldw	r8,4(sp)
1010aa24:	00bfe00e 	bge	zero,r2,1010a9a8 <__alt_data_end+0xfffea9a8>
1010aa28:	9de7c83a 	sub	r19,r19,r23
1010aa2c:	98001f26 	beq	r19,zero,1010aaac <__sfvwrite_r+0x2fc>
1010aa30:	a0800217 	ldw	r2,8(r20)
1010aa34:	e5f9883a 	add	fp,fp,r23
1010aa38:	95e5c83a 	sub	r18,r18,r23
1010aa3c:	15efc83a 	sub	r23,r2,r23
1010aa40:	a5c00215 	stw	r23,8(r20)
1010aa44:	b83f8726 	beq	r23,zero,1010a864 <__alt_data_end+0xfffea864>
1010aa48:	903fe11e 	bne	r18,zero,1010a9d0 <__alt_data_end+0xfffea9d0>
1010aa4c:	8f000017 	ldw	fp,0(r17)
1010aa50:	8c800117 	ldw	r18,4(r17)
1010aa54:	0011883a 	mov	r8,zero
1010aa58:	8c400204 	addi	r17,r17,8
1010aa5c:	003fdb06 	br	1010a9cc <__alt_data_end+0xfffea9cc>
1010aa60:	180d883a 	mov	r6,r3
1010aa64:	e00b883a 	mov	r5,fp
1010aa68:	da000115 	stw	r8,4(sp)
1010aa6c:	d8c00015 	stw	r3,0(sp)
1010aa70:	010ac6c0 	call	1010ac6c <memmove>
1010aa74:	d8c00017 	ldw	r3,0(sp)
1010aa78:	80800017 	ldw	r2,0(r16)
1010aa7c:	800b883a 	mov	r5,r16
1010aa80:	a809883a 	mov	r4,r21
1010aa84:	10c5883a 	add	r2,r2,r3
1010aa88:	80800015 	stw	r2,0(r16)
1010aa8c:	d8c00015 	stw	r3,0(sp)
1010aa90:	0101b380 	call	10101b38 <_fflush_r>
1010aa94:	d8c00017 	ldw	r3,0(sp)
1010aa98:	da000117 	ldw	r8,4(sp)
1010aa9c:	103fc21e 	bne	r2,zero,1010a9a8 <__alt_data_end+0xfffea9a8>
1010aaa0:	182f883a 	mov	r23,r3
1010aaa4:	9de7c83a 	sub	r19,r19,r23
1010aaa8:	983fe11e 	bne	r19,zero,1010aa30 <__alt_data_end+0xfffeaa30>
1010aaac:	800b883a 	mov	r5,r16
1010aab0:	a809883a 	mov	r4,r21
1010aab4:	0101b380 	call	10101b38 <_fflush_r>
1010aab8:	103fbb1e 	bne	r2,zero,1010a9a8 <__alt_data_end+0xfffea9a8>
1010aabc:	0011883a 	mov	r8,zero
1010aac0:	003fdb06 	br	1010aa30 <__alt_data_end+0xfffeaa30>
1010aac4:	94c0012e 	bgeu	r18,r19,1010aacc <__sfvwrite_r+0x31c>
1010aac8:	9027883a 	mov	r19,r18
1010aacc:	980d883a 	mov	r6,r19
1010aad0:	e00b883a 	mov	r5,fp
1010aad4:	010ac6c0 	call	1010ac6c <memmove>
1010aad8:	80800217 	ldw	r2,8(r16)
1010aadc:	80c00017 	ldw	r3,0(r16)
1010aae0:	14c5c83a 	sub	r2,r2,r19
1010aae4:	1cc7883a 	add	r3,r3,r19
1010aae8:	80800215 	stw	r2,8(r16)
1010aaec:	80c00015 	stw	r3,0(r16)
1010aaf0:	10004326 	beq	r2,zero,1010ac00 <__sfvwrite_r+0x450>
1010aaf4:	9805883a 	mov	r2,r19
1010aaf8:	003f8606 	br	1010a914 <__alt_data_end+0xfffea914>
1010aafc:	b00d883a 	mov	r6,r22
1010ab00:	e00b883a 	mov	r5,fp
1010ab04:	da000115 	stw	r8,4(sp)
1010ab08:	010ac6c0 	call	1010ac6c <memmove>
1010ab0c:	80800217 	ldw	r2,8(r16)
1010ab10:	80c00017 	ldw	r3,0(r16)
1010ab14:	da000117 	ldw	r8,4(sp)
1010ab18:	1585c83a 	sub	r2,r2,r22
1010ab1c:	1dad883a 	add	r22,r3,r22
1010ab20:	80800215 	stw	r2,8(r16)
1010ab24:	85800015 	stw	r22,0(r16)
1010ab28:	003fbf06 	br	1010aa28 <__alt_data_end+0xfffeaa28>
1010ab2c:	81000017 	ldw	r4,0(r16)
1010ab30:	9027883a 	mov	r19,r18
1010ab34:	902f883a 	mov	r23,r18
1010ab38:	003f6c06 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010ab3c:	900d883a 	mov	r6,r18
1010ab40:	01400284 	movi	r5,10
1010ab44:	e009883a 	mov	r4,fp
1010ab48:	0107a2c0 	call	10107a2c <memchr>
1010ab4c:	10003e26 	beq	r2,zero,1010ac48 <__sfvwrite_r+0x498>
1010ab50:	10800044 	addi	r2,r2,1
1010ab54:	1727c83a 	sub	r19,r2,fp
1010ab58:	02000044 	movi	r8,1
1010ab5c:	003f9d06 	br	1010a9d4 <__alt_data_end+0xfffea9d4>
1010ab60:	80800517 	ldw	r2,20(r16)
1010ab64:	81400417 	ldw	r5,16(r16)
1010ab68:	81c00017 	ldw	r7,0(r16)
1010ab6c:	10a7883a 	add	r19,r2,r2
1010ab70:	9885883a 	add	r2,r19,r2
1010ab74:	1026d7fa 	srli	r19,r2,31
1010ab78:	396dc83a 	sub	r22,r7,r5
1010ab7c:	b1000044 	addi	r4,r22,1
1010ab80:	9885883a 	add	r2,r19,r2
1010ab84:	1027d07a 	srai	r19,r2,1
1010ab88:	2485883a 	add	r2,r4,r18
1010ab8c:	980d883a 	mov	r6,r19
1010ab90:	9880022e 	bgeu	r19,r2,1010ab9c <__sfvwrite_r+0x3ec>
1010ab94:	1027883a 	mov	r19,r2
1010ab98:	100d883a 	mov	r6,r2
1010ab9c:	18c1000c 	andi	r3,r3,1024
1010aba0:	18001c26 	beq	r3,zero,1010ac14 <__sfvwrite_r+0x464>
1010aba4:	300b883a 	mov	r5,r6
1010aba8:	a809883a 	mov	r4,r21
1010abac:	0102d100 	call	10102d10 <_malloc_r>
1010abb0:	102f883a 	mov	r23,r2
1010abb4:	10002926 	beq	r2,zero,1010ac5c <__sfvwrite_r+0x4ac>
1010abb8:	81400417 	ldw	r5,16(r16)
1010abbc:	b00d883a 	mov	r6,r22
1010abc0:	1009883a 	mov	r4,r2
1010abc4:	0107b100 	call	10107b10 <memcpy>
1010abc8:	8080030b 	ldhu	r2,12(r16)
1010abcc:	00fedfc4 	movi	r3,-1153
1010abd0:	10c4703a 	and	r2,r2,r3
1010abd4:	10802014 	ori	r2,r2,128
1010abd8:	8080030d 	sth	r2,12(r16)
1010abdc:	bd89883a 	add	r4,r23,r22
1010abe0:	9d8fc83a 	sub	r7,r19,r22
1010abe4:	85c00415 	stw	r23,16(r16)
1010abe8:	84c00515 	stw	r19,20(r16)
1010abec:	81000015 	stw	r4,0(r16)
1010abf0:	9027883a 	mov	r19,r18
1010abf4:	81c00215 	stw	r7,8(r16)
1010abf8:	902f883a 	mov	r23,r18
1010abfc:	003f3b06 	br	1010a8ec <__alt_data_end+0xfffea8ec>
1010ac00:	800b883a 	mov	r5,r16
1010ac04:	a809883a 	mov	r4,r21
1010ac08:	0101b380 	call	10101b38 <_fflush_r>
1010ac0c:	103fb926 	beq	r2,zero,1010aaf4 <__alt_data_end+0xfffeaaf4>
1010ac10:	003f6506 	br	1010a9a8 <__alt_data_end+0xfffea9a8>
1010ac14:	a809883a 	mov	r4,r21
1010ac18:	010adc80 	call	1010adc8 <_realloc_r>
1010ac1c:	102f883a 	mov	r23,r2
1010ac20:	103fee1e 	bne	r2,zero,1010abdc <__alt_data_end+0xfffeabdc>
1010ac24:	81400417 	ldw	r5,16(r16)
1010ac28:	a809883a 	mov	r4,r21
1010ac2c:	01021e00 	call	101021e0 <_free_r>
1010ac30:	8080030b 	ldhu	r2,12(r16)
1010ac34:	00ffdfc4 	movi	r3,-129
1010ac38:	1884703a 	and	r2,r3,r2
1010ac3c:	00c00304 	movi	r3,12
1010ac40:	a8c00015 	stw	r3,0(r21)
1010ac44:	003f5906 	br	1010a9ac <__alt_data_end+0xfffea9ac>
1010ac48:	94c00044 	addi	r19,r18,1
1010ac4c:	02000044 	movi	r8,1
1010ac50:	003f6006 	br	1010a9d4 <__alt_data_end+0xfffea9d4>
1010ac54:	00bfffc4 	movi	r2,-1
1010ac58:	003f0306 	br	1010a868 <__alt_data_end+0xfffea868>
1010ac5c:	00800304 	movi	r2,12
1010ac60:	a8800015 	stw	r2,0(r21)
1010ac64:	8080030b 	ldhu	r2,12(r16)
1010ac68:	003f5006 	br	1010a9ac <__alt_data_end+0xfffea9ac>

1010ac6c <memmove>:
1010ac6c:	2005883a 	mov	r2,r4
1010ac70:	29000b2e 	bgeu	r5,r4,1010aca0 <memmove+0x34>
1010ac74:	298f883a 	add	r7,r5,r6
1010ac78:	21c0092e 	bgeu	r4,r7,1010aca0 <memmove+0x34>
1010ac7c:	2187883a 	add	r3,r4,r6
1010ac80:	198bc83a 	sub	r5,r3,r6
1010ac84:	30004826 	beq	r6,zero,1010ada8 <memmove+0x13c>
1010ac88:	39ffffc4 	addi	r7,r7,-1
1010ac8c:	39000003 	ldbu	r4,0(r7)
1010ac90:	18ffffc4 	addi	r3,r3,-1
1010ac94:	19000005 	stb	r4,0(r3)
1010ac98:	28fffb1e 	bne	r5,r3,1010ac88 <__alt_data_end+0xfffeac88>
1010ac9c:	f800283a 	ret
1010aca0:	00c003c4 	movi	r3,15
1010aca4:	1980412e 	bgeu	r3,r6,1010adac <memmove+0x140>
1010aca8:	2886b03a 	or	r3,r5,r2
1010acac:	18c000cc 	andi	r3,r3,3
1010acb0:	1800401e 	bne	r3,zero,1010adb4 <memmove+0x148>
1010acb4:	33fffc04 	addi	r15,r6,-16
1010acb8:	781ed13a 	srli	r15,r15,4
1010acbc:	28c00104 	addi	r3,r5,4
1010acc0:	13400104 	addi	r13,r2,4
1010acc4:	781c913a 	slli	r14,r15,4
1010acc8:	2b000204 	addi	r12,r5,8
1010accc:	12c00204 	addi	r11,r2,8
1010acd0:	73800504 	addi	r14,r14,20
1010acd4:	2a800304 	addi	r10,r5,12
1010acd8:	12400304 	addi	r9,r2,12
1010acdc:	2b9d883a 	add	r14,r5,r14
1010ace0:	2811883a 	mov	r8,r5
1010ace4:	100f883a 	mov	r7,r2
1010ace8:	41000017 	ldw	r4,0(r8)
1010acec:	39c00404 	addi	r7,r7,16
1010acf0:	18c00404 	addi	r3,r3,16
1010acf4:	393ffc15 	stw	r4,-16(r7)
1010acf8:	193ffc17 	ldw	r4,-16(r3)
1010acfc:	6b400404 	addi	r13,r13,16
1010ad00:	5ac00404 	addi	r11,r11,16
1010ad04:	693ffc15 	stw	r4,-16(r13)
1010ad08:	61000017 	ldw	r4,0(r12)
1010ad0c:	4a400404 	addi	r9,r9,16
1010ad10:	42000404 	addi	r8,r8,16
1010ad14:	593ffc15 	stw	r4,-16(r11)
1010ad18:	51000017 	ldw	r4,0(r10)
1010ad1c:	63000404 	addi	r12,r12,16
1010ad20:	52800404 	addi	r10,r10,16
1010ad24:	493ffc15 	stw	r4,-16(r9)
1010ad28:	1bbfef1e 	bne	r3,r14,1010ace8 <__alt_data_end+0xfffeace8>
1010ad2c:	79000044 	addi	r4,r15,1
1010ad30:	2008913a 	slli	r4,r4,4
1010ad34:	328003cc 	andi	r10,r6,15
1010ad38:	02c000c4 	movi	r11,3
1010ad3c:	1107883a 	add	r3,r2,r4
1010ad40:	290b883a 	add	r5,r5,r4
1010ad44:	5a801e2e 	bgeu	r11,r10,1010adc0 <memmove+0x154>
1010ad48:	1813883a 	mov	r9,r3
1010ad4c:	2811883a 	mov	r8,r5
1010ad50:	500f883a 	mov	r7,r10
1010ad54:	41000017 	ldw	r4,0(r8)
1010ad58:	4a400104 	addi	r9,r9,4
1010ad5c:	39ffff04 	addi	r7,r7,-4
1010ad60:	493fff15 	stw	r4,-4(r9)
1010ad64:	42000104 	addi	r8,r8,4
1010ad68:	59fffa36 	bltu	r11,r7,1010ad54 <__alt_data_end+0xfffead54>
1010ad6c:	513fff04 	addi	r4,r10,-4
1010ad70:	2008d0ba 	srli	r4,r4,2
1010ad74:	318000cc 	andi	r6,r6,3
1010ad78:	21000044 	addi	r4,r4,1
1010ad7c:	2109883a 	add	r4,r4,r4
1010ad80:	2109883a 	add	r4,r4,r4
1010ad84:	1907883a 	add	r3,r3,r4
1010ad88:	290b883a 	add	r5,r5,r4
1010ad8c:	30000b26 	beq	r6,zero,1010adbc <memmove+0x150>
1010ad90:	198d883a 	add	r6,r3,r6
1010ad94:	29c00003 	ldbu	r7,0(r5)
1010ad98:	18c00044 	addi	r3,r3,1
1010ad9c:	29400044 	addi	r5,r5,1
1010ada0:	19ffffc5 	stb	r7,-1(r3)
1010ada4:	19bffb1e 	bne	r3,r6,1010ad94 <__alt_data_end+0xfffead94>
1010ada8:	f800283a 	ret
1010adac:	1007883a 	mov	r3,r2
1010adb0:	003ff606 	br	1010ad8c <__alt_data_end+0xfffead8c>
1010adb4:	1007883a 	mov	r3,r2
1010adb8:	003ff506 	br	1010ad90 <__alt_data_end+0xfffead90>
1010adbc:	f800283a 	ret
1010adc0:	500d883a 	mov	r6,r10
1010adc4:	003ff106 	br	1010ad8c <__alt_data_end+0xfffead8c>

1010adc8 <_realloc_r>:
1010adc8:	defff604 	addi	sp,sp,-40
1010adcc:	dc400115 	stw	r17,4(sp)
1010add0:	dfc00915 	stw	ra,36(sp)
1010add4:	df000815 	stw	fp,32(sp)
1010add8:	ddc00715 	stw	r23,28(sp)
1010addc:	dd800615 	stw	r22,24(sp)
1010ade0:	dd400515 	stw	r21,20(sp)
1010ade4:	dd000415 	stw	r20,16(sp)
1010ade8:	dcc00315 	stw	r19,12(sp)
1010adec:	dc800215 	stw	r18,8(sp)
1010adf0:	dc000015 	stw	r16,0(sp)
1010adf4:	3023883a 	mov	r17,r6
1010adf8:	2800b626 	beq	r5,zero,1010b0d4 <_realloc_r+0x30c>
1010adfc:	2829883a 	mov	r20,r5
1010ae00:	2025883a 	mov	r18,r4
1010ae04:	010ed500 	call	1010ed50 <__malloc_lock>
1010ae08:	a0ffff17 	ldw	r3,-4(r20)
1010ae0c:	043fff04 	movi	r16,-4
1010ae10:	888002c4 	addi	r2,r17,11
1010ae14:	01000584 	movi	r4,22
1010ae18:	a57ffe04 	addi	r21,r20,-8
1010ae1c:	1c20703a 	and	r16,r3,r16
1010ae20:	2080332e 	bgeu	r4,r2,1010aef0 <_realloc_r+0x128>
1010ae24:	05bffe04 	movi	r22,-8
1010ae28:	15ac703a 	and	r22,r2,r22
1010ae2c:	b005883a 	mov	r2,r22
1010ae30:	b0005716 	blt	r22,zero,1010af90 <_realloc_r+0x1c8>
1010ae34:	b4405636 	bltu	r22,r17,1010af90 <_realloc_r+0x1c8>
1010ae38:	8080300e 	bge	r16,r2,1010aefc <_realloc_r+0x134>
1010ae3c:	07040474 	movhi	fp,4113
1010ae40:	e7076304 	addi	fp,fp,7564
1010ae44:	e2000217 	ldw	r8,8(fp)
1010ae48:	ac09883a 	add	r4,r21,r16
1010ae4c:	22006126 	beq	r4,r8,1010afd4 <_realloc_r+0x20c>
1010ae50:	22400117 	ldw	r9,4(r4)
1010ae54:	01ffff84 	movi	r7,-2
1010ae58:	49ce703a 	and	r7,r9,r7
1010ae5c:	21cf883a 	add	r7,r4,r7
1010ae60:	39800117 	ldw	r6,4(r7)
1010ae64:	3180004c 	andi	r6,r6,1
1010ae68:	30003e26 	beq	r6,zero,1010af64 <_realloc_r+0x19c>
1010ae6c:	18c0004c 	andi	r3,r3,1
1010ae70:	18008126 	beq	r3,zero,1010b078 <_realloc_r+0x2b0>
1010ae74:	880b883a 	mov	r5,r17
1010ae78:	9009883a 	mov	r4,r18
1010ae7c:	0102d100 	call	10102d10 <_malloc_r>
1010ae80:	1023883a 	mov	r17,r2
1010ae84:	10011e26 	beq	r2,zero,1010b300 <_realloc_r+0x538>
1010ae88:	a0ffff17 	ldw	r3,-4(r20)
1010ae8c:	113ffe04 	addi	r4,r2,-8
1010ae90:	00bfff84 	movi	r2,-2
1010ae94:	1884703a 	and	r2,r3,r2
1010ae98:	a885883a 	add	r2,r21,r2
1010ae9c:	2080ee26 	beq	r4,r2,1010b258 <_realloc_r+0x490>
1010aea0:	81bfff04 	addi	r6,r16,-4
1010aea4:	00800904 	movi	r2,36
1010aea8:	1180b836 	bltu	r2,r6,1010b18c <_realloc_r+0x3c4>
1010aeac:	00c004c4 	movi	r3,19
1010aeb0:	19809536 	bltu	r3,r6,1010b108 <_realloc_r+0x340>
1010aeb4:	8805883a 	mov	r2,r17
1010aeb8:	a007883a 	mov	r3,r20
1010aebc:	19000017 	ldw	r4,0(r3)
1010aec0:	11000015 	stw	r4,0(r2)
1010aec4:	19000117 	ldw	r4,4(r3)
1010aec8:	11000115 	stw	r4,4(r2)
1010aecc:	18c00217 	ldw	r3,8(r3)
1010aed0:	10c00215 	stw	r3,8(r2)
1010aed4:	a00b883a 	mov	r5,r20
1010aed8:	9009883a 	mov	r4,r18
1010aedc:	01021e00 	call	101021e0 <_free_r>
1010aee0:	9009883a 	mov	r4,r18
1010aee4:	010ed740 	call	1010ed74 <__malloc_unlock>
1010aee8:	8805883a 	mov	r2,r17
1010aeec:	00001106 	br	1010af34 <_realloc_r+0x16c>
1010aef0:	00800404 	movi	r2,16
1010aef4:	102d883a 	mov	r22,r2
1010aef8:	003fce06 	br	1010ae34 <__alt_data_end+0xfffeae34>
1010aefc:	a023883a 	mov	r17,r20
1010af00:	858fc83a 	sub	r7,r16,r22
1010af04:	008003c4 	movi	r2,15
1010af08:	18c0004c 	andi	r3,r3,1
1010af0c:	11c02436 	bltu	r2,r7,1010afa0 <_realloc_r+0x1d8>
1010af10:	1c06b03a 	or	r3,r3,r16
1010af14:	a8c00115 	stw	r3,4(r21)
1010af18:	ac21883a 	add	r16,r21,r16
1010af1c:	80800117 	ldw	r2,4(r16)
1010af20:	10800054 	ori	r2,r2,1
1010af24:	80800115 	stw	r2,4(r16)
1010af28:	9009883a 	mov	r4,r18
1010af2c:	010ed740 	call	1010ed74 <__malloc_unlock>
1010af30:	8805883a 	mov	r2,r17
1010af34:	dfc00917 	ldw	ra,36(sp)
1010af38:	df000817 	ldw	fp,32(sp)
1010af3c:	ddc00717 	ldw	r23,28(sp)
1010af40:	dd800617 	ldw	r22,24(sp)
1010af44:	dd400517 	ldw	r21,20(sp)
1010af48:	dd000417 	ldw	r20,16(sp)
1010af4c:	dcc00317 	ldw	r19,12(sp)
1010af50:	dc800217 	ldw	r18,8(sp)
1010af54:	dc400117 	ldw	r17,4(sp)
1010af58:	dc000017 	ldw	r16,0(sp)
1010af5c:	dec00a04 	addi	sp,sp,40
1010af60:	f800283a 	ret
1010af64:	017fff04 	movi	r5,-4
1010af68:	494a703a 	and	r5,r9,r5
1010af6c:	814d883a 	add	r6,r16,r5
1010af70:	30801e16 	blt	r6,r2,1010afec <_realloc_r+0x224>
1010af74:	20800317 	ldw	r2,12(r4)
1010af78:	21000217 	ldw	r4,8(r4)
1010af7c:	a023883a 	mov	r17,r20
1010af80:	3021883a 	mov	r16,r6
1010af84:	20800315 	stw	r2,12(r4)
1010af88:	11000215 	stw	r4,8(r2)
1010af8c:	003fdc06 	br	1010af00 <__alt_data_end+0xfffeaf00>
1010af90:	00800304 	movi	r2,12
1010af94:	90800015 	stw	r2,0(r18)
1010af98:	0005883a 	mov	r2,zero
1010af9c:	003fe506 	br	1010af34 <__alt_data_end+0xfffeaf34>
1010afa0:	1d86b03a 	or	r3,r3,r22
1010afa4:	a8c00115 	stw	r3,4(r21)
1010afa8:	ad8b883a 	add	r5,r21,r22
1010afac:	38c00054 	ori	r3,r7,1
1010afb0:	28c00115 	stw	r3,4(r5)
1010afb4:	29cf883a 	add	r7,r5,r7
1010afb8:	38c00117 	ldw	r3,4(r7)
1010afbc:	29400204 	addi	r5,r5,8
1010afc0:	9009883a 	mov	r4,r18
1010afc4:	18800054 	ori	r2,r3,1
1010afc8:	38800115 	stw	r2,4(r7)
1010afcc:	01021e00 	call	101021e0 <_free_r>
1010afd0:	003fd506 	br	1010af28 <__alt_data_end+0xfffeaf28>
1010afd4:	21c00117 	ldw	r7,4(r4)
1010afd8:	017fff04 	movi	r5,-4
1010afdc:	b1800404 	addi	r6,r22,16
1010afe0:	394a703a 	and	r5,r7,r5
1010afe4:	814f883a 	add	r7,r16,r5
1010afe8:	39805b0e 	bge	r7,r6,1010b158 <_realloc_r+0x390>
1010afec:	18c0004c 	andi	r3,r3,1
1010aff0:	183fa01e 	bne	r3,zero,1010ae74 <__alt_data_end+0xfffeae74>
1010aff4:	a4fffe17 	ldw	r19,-8(r20)
1010aff8:	00ffff04 	movi	r3,-4
1010affc:	ace7c83a 	sub	r19,r21,r19
1010b000:	99800117 	ldw	r6,4(r19)
1010b004:	30c6703a 	and	r3,r6,r3
1010b008:	20002026 	beq	r4,zero,1010b08c <_realloc_r+0x2c4>
1010b00c:	80ef883a 	add	r23,r16,r3
1010b010:	b96f883a 	add	r23,r23,r5
1010b014:	22006126 	beq	r4,r8,1010b19c <_realloc_r+0x3d4>
1010b018:	b8801c16 	blt	r23,r2,1010b08c <_realloc_r+0x2c4>
1010b01c:	20800317 	ldw	r2,12(r4)
1010b020:	20c00217 	ldw	r3,8(r4)
1010b024:	81bfff04 	addi	r6,r16,-4
1010b028:	01000904 	movi	r4,36
1010b02c:	18800315 	stw	r2,12(r3)
1010b030:	10c00215 	stw	r3,8(r2)
1010b034:	98c00217 	ldw	r3,8(r19)
1010b038:	98800317 	ldw	r2,12(r19)
1010b03c:	9c400204 	addi	r17,r19,8
1010b040:	18800315 	stw	r2,12(r3)
1010b044:	10c00215 	stw	r3,8(r2)
1010b048:	21801b36 	bltu	r4,r6,1010b0b8 <_realloc_r+0x2f0>
1010b04c:	008004c4 	movi	r2,19
1010b050:	1180362e 	bgeu	r2,r6,1010b12c <_realloc_r+0x364>
1010b054:	a0800017 	ldw	r2,0(r20)
1010b058:	98800215 	stw	r2,8(r19)
1010b05c:	a0800117 	ldw	r2,4(r20)
1010b060:	98800315 	stw	r2,12(r19)
1010b064:	008006c4 	movi	r2,27
1010b068:	11808136 	bltu	r2,r6,1010b270 <_realloc_r+0x4a8>
1010b06c:	98800404 	addi	r2,r19,16
1010b070:	a5000204 	addi	r20,r20,8
1010b074:	00002e06 	br	1010b130 <_realloc_r+0x368>
1010b078:	a4fffe17 	ldw	r19,-8(r20)
1010b07c:	00ffff04 	movi	r3,-4
1010b080:	ace7c83a 	sub	r19,r21,r19
1010b084:	99000117 	ldw	r4,4(r19)
1010b088:	20c6703a 	and	r3,r4,r3
1010b08c:	983f7926 	beq	r19,zero,1010ae74 <__alt_data_end+0xfffeae74>
1010b090:	80ef883a 	add	r23,r16,r3
1010b094:	b8bf7716 	blt	r23,r2,1010ae74 <__alt_data_end+0xfffeae74>
1010b098:	98800317 	ldw	r2,12(r19)
1010b09c:	98c00217 	ldw	r3,8(r19)
1010b0a0:	81bfff04 	addi	r6,r16,-4
1010b0a4:	01000904 	movi	r4,36
1010b0a8:	18800315 	stw	r2,12(r3)
1010b0ac:	10c00215 	stw	r3,8(r2)
1010b0b0:	9c400204 	addi	r17,r19,8
1010b0b4:	21bfe52e 	bgeu	r4,r6,1010b04c <__alt_data_end+0xfffeb04c>
1010b0b8:	a00b883a 	mov	r5,r20
1010b0bc:	8809883a 	mov	r4,r17
1010b0c0:	010ac6c0 	call	1010ac6c <memmove>
1010b0c4:	98c00117 	ldw	r3,4(r19)
1010b0c8:	b821883a 	mov	r16,r23
1010b0cc:	982b883a 	mov	r21,r19
1010b0d0:	003f8b06 	br	1010af00 <__alt_data_end+0xfffeaf00>
1010b0d4:	300b883a 	mov	r5,r6
1010b0d8:	dfc00917 	ldw	ra,36(sp)
1010b0dc:	df000817 	ldw	fp,32(sp)
1010b0e0:	ddc00717 	ldw	r23,28(sp)
1010b0e4:	dd800617 	ldw	r22,24(sp)
1010b0e8:	dd400517 	ldw	r21,20(sp)
1010b0ec:	dd000417 	ldw	r20,16(sp)
1010b0f0:	dcc00317 	ldw	r19,12(sp)
1010b0f4:	dc800217 	ldw	r18,8(sp)
1010b0f8:	dc400117 	ldw	r17,4(sp)
1010b0fc:	dc000017 	ldw	r16,0(sp)
1010b100:	dec00a04 	addi	sp,sp,40
1010b104:	0102d101 	jmpi	10102d10 <_malloc_r>
1010b108:	a0c00017 	ldw	r3,0(r20)
1010b10c:	88c00015 	stw	r3,0(r17)
1010b110:	a0c00117 	ldw	r3,4(r20)
1010b114:	88c00115 	stw	r3,4(r17)
1010b118:	00c006c4 	movi	r3,27
1010b11c:	19804636 	bltu	r3,r6,1010b238 <_realloc_r+0x470>
1010b120:	88800204 	addi	r2,r17,8
1010b124:	a0c00204 	addi	r3,r20,8
1010b128:	003f6406 	br	1010aebc <__alt_data_end+0xfffeaebc>
1010b12c:	8805883a 	mov	r2,r17
1010b130:	a0c00017 	ldw	r3,0(r20)
1010b134:	b821883a 	mov	r16,r23
1010b138:	982b883a 	mov	r21,r19
1010b13c:	10c00015 	stw	r3,0(r2)
1010b140:	a0c00117 	ldw	r3,4(r20)
1010b144:	10c00115 	stw	r3,4(r2)
1010b148:	a0c00217 	ldw	r3,8(r20)
1010b14c:	10c00215 	stw	r3,8(r2)
1010b150:	98c00117 	ldw	r3,4(r19)
1010b154:	003f6a06 	br	1010af00 <__alt_data_end+0xfffeaf00>
1010b158:	adab883a 	add	r21,r21,r22
1010b15c:	3d85c83a 	sub	r2,r7,r22
1010b160:	e5400215 	stw	r21,8(fp)
1010b164:	10800054 	ori	r2,r2,1
1010b168:	a8800115 	stw	r2,4(r21)
1010b16c:	a0bfff17 	ldw	r2,-4(r20)
1010b170:	9009883a 	mov	r4,r18
1010b174:	1080004c 	andi	r2,r2,1
1010b178:	1584b03a 	or	r2,r2,r22
1010b17c:	a0bfff15 	stw	r2,-4(r20)
1010b180:	010ed740 	call	1010ed74 <__malloc_unlock>
1010b184:	a005883a 	mov	r2,r20
1010b188:	003f6a06 	br	1010af34 <__alt_data_end+0xfffeaf34>
1010b18c:	a00b883a 	mov	r5,r20
1010b190:	8809883a 	mov	r4,r17
1010b194:	010ac6c0 	call	1010ac6c <memmove>
1010b198:	003f4e06 	br	1010aed4 <__alt_data_end+0xfffeaed4>
1010b19c:	b1000404 	addi	r4,r22,16
1010b1a0:	b93fba16 	blt	r23,r4,1010b08c <__alt_data_end+0xfffeb08c>
1010b1a4:	98800317 	ldw	r2,12(r19)
1010b1a8:	98c00217 	ldw	r3,8(r19)
1010b1ac:	81bfff04 	addi	r6,r16,-4
1010b1b0:	01000904 	movi	r4,36
1010b1b4:	18800315 	stw	r2,12(r3)
1010b1b8:	10c00215 	stw	r3,8(r2)
1010b1bc:	9c400204 	addi	r17,r19,8
1010b1c0:	21804336 	bltu	r4,r6,1010b2d0 <_realloc_r+0x508>
1010b1c4:	008004c4 	movi	r2,19
1010b1c8:	11803f2e 	bgeu	r2,r6,1010b2c8 <_realloc_r+0x500>
1010b1cc:	a0800017 	ldw	r2,0(r20)
1010b1d0:	98800215 	stw	r2,8(r19)
1010b1d4:	a0800117 	ldw	r2,4(r20)
1010b1d8:	98800315 	stw	r2,12(r19)
1010b1dc:	008006c4 	movi	r2,27
1010b1e0:	11803f36 	bltu	r2,r6,1010b2e0 <_realloc_r+0x518>
1010b1e4:	98800404 	addi	r2,r19,16
1010b1e8:	a5000204 	addi	r20,r20,8
1010b1ec:	a0c00017 	ldw	r3,0(r20)
1010b1f0:	10c00015 	stw	r3,0(r2)
1010b1f4:	a0c00117 	ldw	r3,4(r20)
1010b1f8:	10c00115 	stw	r3,4(r2)
1010b1fc:	a0c00217 	ldw	r3,8(r20)
1010b200:	10c00215 	stw	r3,8(r2)
1010b204:	9d87883a 	add	r3,r19,r22
1010b208:	bd85c83a 	sub	r2,r23,r22
1010b20c:	e0c00215 	stw	r3,8(fp)
1010b210:	10800054 	ori	r2,r2,1
1010b214:	18800115 	stw	r2,4(r3)
1010b218:	98800117 	ldw	r2,4(r19)
1010b21c:	9009883a 	mov	r4,r18
1010b220:	1080004c 	andi	r2,r2,1
1010b224:	1584b03a 	or	r2,r2,r22
1010b228:	98800115 	stw	r2,4(r19)
1010b22c:	010ed740 	call	1010ed74 <__malloc_unlock>
1010b230:	8805883a 	mov	r2,r17
1010b234:	003f3f06 	br	1010af34 <__alt_data_end+0xfffeaf34>
1010b238:	a0c00217 	ldw	r3,8(r20)
1010b23c:	88c00215 	stw	r3,8(r17)
1010b240:	a0c00317 	ldw	r3,12(r20)
1010b244:	88c00315 	stw	r3,12(r17)
1010b248:	30801126 	beq	r6,r2,1010b290 <_realloc_r+0x4c8>
1010b24c:	88800404 	addi	r2,r17,16
1010b250:	a0c00404 	addi	r3,r20,16
1010b254:	003f1906 	br	1010aebc <__alt_data_end+0xfffeaebc>
1010b258:	893fff17 	ldw	r4,-4(r17)
1010b25c:	00bfff04 	movi	r2,-4
1010b260:	a023883a 	mov	r17,r20
1010b264:	2084703a 	and	r2,r4,r2
1010b268:	80a1883a 	add	r16,r16,r2
1010b26c:	003f2406 	br	1010af00 <__alt_data_end+0xfffeaf00>
1010b270:	a0800217 	ldw	r2,8(r20)
1010b274:	98800415 	stw	r2,16(r19)
1010b278:	a0800317 	ldw	r2,12(r20)
1010b27c:	98800515 	stw	r2,20(r19)
1010b280:	31000a26 	beq	r6,r4,1010b2ac <_realloc_r+0x4e4>
1010b284:	98800604 	addi	r2,r19,24
1010b288:	a5000404 	addi	r20,r20,16
1010b28c:	003fa806 	br	1010b130 <__alt_data_end+0xfffeb130>
1010b290:	a1000417 	ldw	r4,16(r20)
1010b294:	88800604 	addi	r2,r17,24
1010b298:	a0c00604 	addi	r3,r20,24
1010b29c:	89000415 	stw	r4,16(r17)
1010b2a0:	a1000517 	ldw	r4,20(r20)
1010b2a4:	89000515 	stw	r4,20(r17)
1010b2a8:	003f0406 	br	1010aebc <__alt_data_end+0xfffeaebc>
1010b2ac:	a0c00417 	ldw	r3,16(r20)
1010b2b0:	a5000604 	addi	r20,r20,24
1010b2b4:	98800804 	addi	r2,r19,32
1010b2b8:	98c00615 	stw	r3,24(r19)
1010b2bc:	a0ffff17 	ldw	r3,-4(r20)
1010b2c0:	98c00715 	stw	r3,28(r19)
1010b2c4:	003f9a06 	br	1010b130 <__alt_data_end+0xfffeb130>
1010b2c8:	8805883a 	mov	r2,r17
1010b2cc:	003fc706 	br	1010b1ec <__alt_data_end+0xfffeb1ec>
1010b2d0:	a00b883a 	mov	r5,r20
1010b2d4:	8809883a 	mov	r4,r17
1010b2d8:	010ac6c0 	call	1010ac6c <memmove>
1010b2dc:	003fc906 	br	1010b204 <__alt_data_end+0xfffeb204>
1010b2e0:	a0800217 	ldw	r2,8(r20)
1010b2e4:	98800415 	stw	r2,16(r19)
1010b2e8:	a0800317 	ldw	r2,12(r20)
1010b2ec:	98800515 	stw	r2,20(r19)
1010b2f0:	31000726 	beq	r6,r4,1010b310 <_realloc_r+0x548>
1010b2f4:	98800604 	addi	r2,r19,24
1010b2f8:	a5000404 	addi	r20,r20,16
1010b2fc:	003fbb06 	br	1010b1ec <__alt_data_end+0xfffeb1ec>
1010b300:	9009883a 	mov	r4,r18
1010b304:	010ed740 	call	1010ed74 <__malloc_unlock>
1010b308:	0005883a 	mov	r2,zero
1010b30c:	003f0906 	br	1010af34 <__alt_data_end+0xfffeaf34>
1010b310:	a0c00417 	ldw	r3,16(r20)
1010b314:	a5000604 	addi	r20,r20,24
1010b318:	98800804 	addi	r2,r19,32
1010b31c:	98c00615 	stw	r3,24(r19)
1010b320:	a0ffff17 	ldw	r3,-4(r20)
1010b324:	98c00715 	stw	r3,28(r19)
1010b328:	003fb006 	br	1010b1ec <__alt_data_end+0xfffeb1ec>

1010b32c <__swbuf_r>:
1010b32c:	defffb04 	addi	sp,sp,-20
1010b330:	dcc00315 	stw	r19,12(sp)
1010b334:	dc800215 	stw	r18,8(sp)
1010b338:	dc000015 	stw	r16,0(sp)
1010b33c:	dfc00415 	stw	ra,16(sp)
1010b340:	dc400115 	stw	r17,4(sp)
1010b344:	2025883a 	mov	r18,r4
1010b348:	2827883a 	mov	r19,r5
1010b34c:	3021883a 	mov	r16,r6
1010b350:	20000226 	beq	r4,zero,1010b35c <__swbuf_r+0x30>
1010b354:	20800e17 	ldw	r2,56(r4)
1010b358:	10004226 	beq	r2,zero,1010b464 <__swbuf_r+0x138>
1010b35c:	80800617 	ldw	r2,24(r16)
1010b360:	8100030b 	ldhu	r4,12(r16)
1010b364:	80800215 	stw	r2,8(r16)
1010b368:	2080020c 	andi	r2,r4,8
1010b36c:	10003626 	beq	r2,zero,1010b448 <__swbuf_r+0x11c>
1010b370:	80c00417 	ldw	r3,16(r16)
1010b374:	18003426 	beq	r3,zero,1010b448 <__swbuf_r+0x11c>
1010b378:	2088000c 	andi	r2,r4,8192
1010b37c:	9c403fcc 	andi	r17,r19,255
1010b380:	10001a26 	beq	r2,zero,1010b3ec <__swbuf_r+0xc0>
1010b384:	80800017 	ldw	r2,0(r16)
1010b388:	81000517 	ldw	r4,20(r16)
1010b38c:	10c7c83a 	sub	r3,r2,r3
1010b390:	1900200e 	bge	r3,r4,1010b414 <__swbuf_r+0xe8>
1010b394:	18c00044 	addi	r3,r3,1
1010b398:	81000217 	ldw	r4,8(r16)
1010b39c:	11400044 	addi	r5,r2,1
1010b3a0:	81400015 	stw	r5,0(r16)
1010b3a4:	213fffc4 	addi	r4,r4,-1
1010b3a8:	81000215 	stw	r4,8(r16)
1010b3ac:	14c00005 	stb	r19,0(r2)
1010b3b0:	80800517 	ldw	r2,20(r16)
1010b3b4:	10c01e26 	beq	r2,r3,1010b430 <__swbuf_r+0x104>
1010b3b8:	8080030b 	ldhu	r2,12(r16)
1010b3bc:	1080004c 	andi	r2,r2,1
1010b3c0:	10000226 	beq	r2,zero,1010b3cc <__swbuf_r+0xa0>
1010b3c4:	00800284 	movi	r2,10
1010b3c8:	88801926 	beq	r17,r2,1010b430 <__swbuf_r+0x104>
1010b3cc:	8805883a 	mov	r2,r17
1010b3d0:	dfc00417 	ldw	ra,16(sp)
1010b3d4:	dcc00317 	ldw	r19,12(sp)
1010b3d8:	dc800217 	ldw	r18,8(sp)
1010b3dc:	dc400117 	ldw	r17,4(sp)
1010b3e0:	dc000017 	ldw	r16,0(sp)
1010b3e4:	dec00504 	addi	sp,sp,20
1010b3e8:	f800283a 	ret
1010b3ec:	81401917 	ldw	r5,100(r16)
1010b3f0:	00b7ffc4 	movi	r2,-8193
1010b3f4:	21080014 	ori	r4,r4,8192
1010b3f8:	2884703a 	and	r2,r5,r2
1010b3fc:	80801915 	stw	r2,100(r16)
1010b400:	80800017 	ldw	r2,0(r16)
1010b404:	8100030d 	sth	r4,12(r16)
1010b408:	81000517 	ldw	r4,20(r16)
1010b40c:	10c7c83a 	sub	r3,r2,r3
1010b410:	193fe016 	blt	r3,r4,1010b394 <__alt_data_end+0xfffeb394>
1010b414:	800b883a 	mov	r5,r16
1010b418:	9009883a 	mov	r4,r18
1010b41c:	0101b380 	call	10101b38 <_fflush_r>
1010b420:	1000071e 	bne	r2,zero,1010b440 <__swbuf_r+0x114>
1010b424:	80800017 	ldw	r2,0(r16)
1010b428:	00c00044 	movi	r3,1
1010b42c:	003fda06 	br	1010b398 <__alt_data_end+0xfffeb398>
1010b430:	800b883a 	mov	r5,r16
1010b434:	9009883a 	mov	r4,r18
1010b438:	0101b380 	call	10101b38 <_fflush_r>
1010b43c:	103fe326 	beq	r2,zero,1010b3cc <__alt_data_end+0xfffeb3cc>
1010b440:	00bfffc4 	movi	r2,-1
1010b444:	003fe206 	br	1010b3d0 <__alt_data_end+0xfffeb3d0>
1010b448:	800b883a 	mov	r5,r16
1010b44c:	9009883a 	mov	r4,r18
1010b450:	0105dc00 	call	10105dc0 <__swsetup_r>
1010b454:	103ffa1e 	bne	r2,zero,1010b440 <__alt_data_end+0xfffeb440>
1010b458:	8100030b 	ldhu	r4,12(r16)
1010b45c:	80c00417 	ldw	r3,16(r16)
1010b460:	003fc506 	br	1010b378 <__alt_data_end+0xfffeb378>
1010b464:	0101f140 	call	10101f14 <__sinit>
1010b468:	003fbc06 	br	1010b35c <__alt_data_end+0xfffeb35c>

1010b46c <__swbuf>:
1010b46c:	00840474 	movhi	r2,4113
1010b470:	108d1004 	addi	r2,r2,13376
1010b474:	280d883a 	mov	r6,r5
1010b478:	200b883a 	mov	r5,r4
1010b47c:	11000017 	ldw	r4,0(r2)
1010b480:	010b32c1 	jmpi	1010b32c <__swbuf_r>

1010b484 <_wcrtomb_r>:
1010b484:	defff604 	addi	sp,sp,-40
1010b488:	00840474 	movhi	r2,4113
1010b48c:	dc800815 	stw	r18,32(sp)
1010b490:	dc400715 	stw	r17,28(sp)
1010b494:	dc000615 	stw	r16,24(sp)
1010b498:	108d1404 	addi	r2,r2,13392
1010b49c:	dfc00915 	stw	ra,36(sp)
1010b4a0:	2021883a 	mov	r16,r4
1010b4a4:	3823883a 	mov	r17,r7
1010b4a8:	14800017 	ldw	r18,0(r2)
1010b4ac:	28001426 	beq	r5,zero,1010b500 <_wcrtomb_r+0x7c>
1010b4b0:	d9400415 	stw	r5,16(sp)
1010b4b4:	d9800515 	stw	r6,20(sp)
1010b4b8:	010796c0 	call	1010796c <__locale_charset>
1010b4bc:	d9800517 	ldw	r6,20(sp)
1010b4c0:	d9400417 	ldw	r5,16(sp)
1010b4c4:	100f883a 	mov	r7,r2
1010b4c8:	dc400015 	stw	r17,0(sp)
1010b4cc:	8009883a 	mov	r4,r16
1010b4d0:	903ee83a 	callr	r18
1010b4d4:	00ffffc4 	movi	r3,-1
1010b4d8:	10c0031e 	bne	r2,r3,1010b4e8 <_wcrtomb_r+0x64>
1010b4dc:	88000015 	stw	zero,0(r17)
1010b4e0:	00c02284 	movi	r3,138
1010b4e4:	80c00015 	stw	r3,0(r16)
1010b4e8:	dfc00917 	ldw	ra,36(sp)
1010b4ec:	dc800817 	ldw	r18,32(sp)
1010b4f0:	dc400717 	ldw	r17,28(sp)
1010b4f4:	dc000617 	ldw	r16,24(sp)
1010b4f8:	dec00a04 	addi	sp,sp,40
1010b4fc:	f800283a 	ret
1010b500:	010796c0 	call	1010796c <__locale_charset>
1010b504:	100f883a 	mov	r7,r2
1010b508:	dc400015 	stw	r17,0(sp)
1010b50c:	000d883a 	mov	r6,zero
1010b510:	d9400104 	addi	r5,sp,4
1010b514:	8009883a 	mov	r4,r16
1010b518:	903ee83a 	callr	r18
1010b51c:	003fed06 	br	1010b4d4 <__alt_data_end+0xfffeb4d4>

1010b520 <wcrtomb>:
1010b520:	defff604 	addi	sp,sp,-40
1010b524:	00840474 	movhi	r2,4113
1010b528:	dc800615 	stw	r18,24(sp)
1010b52c:	dc400515 	stw	r17,20(sp)
1010b530:	108d1004 	addi	r2,r2,13376
1010b534:	dfc00915 	stw	ra,36(sp)
1010b538:	dd000815 	stw	r20,32(sp)
1010b53c:	dcc00715 	stw	r19,28(sp)
1010b540:	dc000415 	stw	r16,16(sp)
1010b544:	3025883a 	mov	r18,r6
1010b548:	14400017 	ldw	r17,0(r2)
1010b54c:	20001926 	beq	r4,zero,1010b5b4 <wcrtomb+0x94>
1010b550:	00840474 	movhi	r2,4113
1010b554:	108d1404 	addi	r2,r2,13392
1010b558:	15000017 	ldw	r20,0(r2)
1010b55c:	2021883a 	mov	r16,r4
1010b560:	2827883a 	mov	r19,r5
1010b564:	010796c0 	call	1010796c <__locale_charset>
1010b568:	100f883a 	mov	r7,r2
1010b56c:	dc800015 	stw	r18,0(sp)
1010b570:	980d883a 	mov	r6,r19
1010b574:	800b883a 	mov	r5,r16
1010b578:	8809883a 	mov	r4,r17
1010b57c:	a03ee83a 	callr	r20
1010b580:	00ffffc4 	movi	r3,-1
1010b584:	10c0031e 	bne	r2,r3,1010b594 <wcrtomb+0x74>
1010b588:	90000015 	stw	zero,0(r18)
1010b58c:	00c02284 	movi	r3,138
1010b590:	88c00015 	stw	r3,0(r17)
1010b594:	dfc00917 	ldw	ra,36(sp)
1010b598:	dd000817 	ldw	r20,32(sp)
1010b59c:	dcc00717 	ldw	r19,28(sp)
1010b5a0:	dc800617 	ldw	r18,24(sp)
1010b5a4:	dc400517 	ldw	r17,20(sp)
1010b5a8:	dc000417 	ldw	r16,16(sp)
1010b5ac:	dec00a04 	addi	sp,sp,40
1010b5b0:	f800283a 	ret
1010b5b4:	00840474 	movhi	r2,4113
1010b5b8:	108d1404 	addi	r2,r2,13392
1010b5bc:	14000017 	ldw	r16,0(r2)
1010b5c0:	010796c0 	call	1010796c <__locale_charset>
1010b5c4:	100f883a 	mov	r7,r2
1010b5c8:	dc800015 	stw	r18,0(sp)
1010b5cc:	000d883a 	mov	r6,zero
1010b5d0:	d9400104 	addi	r5,sp,4
1010b5d4:	8809883a 	mov	r4,r17
1010b5d8:	803ee83a 	callr	r16
1010b5dc:	003fe806 	br	1010b580 <__alt_data_end+0xfffeb580>

1010b5e0 <__ascii_wctomb>:
1010b5e0:	28000526 	beq	r5,zero,1010b5f8 <__ascii_wctomb+0x18>
1010b5e4:	00803fc4 	movi	r2,255
1010b5e8:	11800536 	bltu	r2,r6,1010b600 <__ascii_wctomb+0x20>
1010b5ec:	29800005 	stb	r6,0(r5)
1010b5f0:	00800044 	movi	r2,1
1010b5f4:	f800283a 	ret
1010b5f8:	0005883a 	mov	r2,zero
1010b5fc:	f800283a 	ret
1010b600:	00802284 	movi	r2,138
1010b604:	20800015 	stw	r2,0(r4)
1010b608:	00bfffc4 	movi	r2,-1
1010b60c:	f800283a 	ret

1010b610 <_wctomb_r>:
1010b610:	00840474 	movhi	r2,4113
1010b614:	defff904 	addi	sp,sp,-28
1010b618:	108d1404 	addi	r2,r2,13392
1010b61c:	dfc00615 	stw	ra,24(sp)
1010b620:	dc400515 	stw	r17,20(sp)
1010b624:	dc000415 	stw	r16,16(sp)
1010b628:	3823883a 	mov	r17,r7
1010b62c:	14000017 	ldw	r16,0(r2)
1010b630:	d9000115 	stw	r4,4(sp)
1010b634:	d9400215 	stw	r5,8(sp)
1010b638:	d9800315 	stw	r6,12(sp)
1010b63c:	010796c0 	call	1010796c <__locale_charset>
1010b640:	d9800317 	ldw	r6,12(sp)
1010b644:	d9400217 	ldw	r5,8(sp)
1010b648:	d9000117 	ldw	r4,4(sp)
1010b64c:	100f883a 	mov	r7,r2
1010b650:	dc400015 	stw	r17,0(sp)
1010b654:	803ee83a 	callr	r16
1010b658:	dfc00617 	ldw	ra,24(sp)
1010b65c:	dc400517 	ldw	r17,20(sp)
1010b660:	dc000417 	ldw	r16,16(sp)
1010b664:	dec00704 	addi	sp,sp,28
1010b668:	f800283a 	ret

1010b66c <__udivdi3>:
1010b66c:	defff504 	addi	sp,sp,-44
1010b670:	dcc00415 	stw	r19,16(sp)
1010b674:	dc000115 	stw	r16,4(sp)
1010b678:	dfc00a15 	stw	ra,40(sp)
1010b67c:	df000915 	stw	fp,36(sp)
1010b680:	ddc00815 	stw	r23,32(sp)
1010b684:	dd800715 	stw	r22,28(sp)
1010b688:	dd400615 	stw	r21,24(sp)
1010b68c:	dd000515 	stw	r20,20(sp)
1010b690:	dc800315 	stw	r18,12(sp)
1010b694:	dc400215 	stw	r17,8(sp)
1010b698:	2027883a 	mov	r19,r4
1010b69c:	2821883a 	mov	r16,r5
1010b6a0:	3800411e 	bne	r7,zero,1010b7a8 <__udivdi3+0x13c>
1010b6a4:	3023883a 	mov	r17,r6
1010b6a8:	2025883a 	mov	r18,r4
1010b6ac:	2980522e 	bgeu	r5,r6,1010b7f8 <__udivdi3+0x18c>
1010b6b0:	00bfffd4 	movui	r2,65535
1010b6b4:	282d883a 	mov	r22,r5
1010b6b8:	1180a836 	bltu	r2,r6,1010b95c <__udivdi3+0x2f0>
1010b6bc:	00803fc4 	movi	r2,255
1010b6c0:	1185803a 	cmpltu	r2,r2,r6
1010b6c4:	100490fa 	slli	r2,r2,3
1010b6c8:	3086d83a 	srl	r3,r6,r2
1010b6cc:	01040474 	movhi	r4,4113
1010b6d0:	21060a04 	addi	r4,r4,6184
1010b6d4:	20c7883a 	add	r3,r4,r3
1010b6d8:	18c00003 	ldbu	r3,0(r3)
1010b6dc:	1885883a 	add	r2,r3,r2
1010b6e0:	00c00804 	movi	r3,32
1010b6e4:	1887c83a 	sub	r3,r3,r2
1010b6e8:	18000526 	beq	r3,zero,1010b700 <__udivdi3+0x94>
1010b6ec:	80e0983a 	sll	r16,r16,r3
1010b6f0:	9884d83a 	srl	r2,r19,r2
1010b6f4:	30e2983a 	sll	r17,r6,r3
1010b6f8:	98e4983a 	sll	r18,r19,r3
1010b6fc:	142cb03a 	or	r22,r2,r16
1010b700:	882ad43a 	srli	r21,r17,16
1010b704:	b009883a 	mov	r4,r22
1010b708:	8d3fffcc 	andi	r20,r17,65535
1010b70c:	a80b883a 	mov	r5,r21
1010b710:	01017c00 	call	101017c0 <__umodsi3>
1010b714:	b009883a 	mov	r4,r22
1010b718:	a80b883a 	mov	r5,r21
1010b71c:	1027883a 	mov	r19,r2
1010b720:	010175c0 	call	1010175c <__udivsi3>
1010b724:	102d883a 	mov	r22,r2
1010b728:	9826943a 	slli	r19,r19,16
1010b72c:	9004d43a 	srli	r2,r18,16
1010b730:	a5a1383a 	mul	r16,r20,r22
1010b734:	14c4b03a 	or	r2,r2,r19
1010b738:	1400052e 	bgeu	r2,r16,1010b750 <__udivdi3+0xe4>
1010b73c:	1445883a 	add	r2,r2,r17
1010b740:	b0ffffc4 	addi	r3,r22,-1
1010b744:	14400136 	bltu	r2,r17,1010b74c <__udivdi3+0xe0>
1010b748:	14012336 	bltu	r2,r16,1010bbd8 <__udivdi3+0x56c>
1010b74c:	182d883a 	mov	r22,r3
1010b750:	1421c83a 	sub	r16,r2,r16
1010b754:	a80b883a 	mov	r5,r21
1010b758:	8009883a 	mov	r4,r16
1010b75c:	01017c00 	call	101017c0 <__umodsi3>
1010b760:	1027883a 	mov	r19,r2
1010b764:	a80b883a 	mov	r5,r21
1010b768:	8009883a 	mov	r4,r16
1010b76c:	010175c0 	call	1010175c <__udivsi3>
1010b770:	9826943a 	slli	r19,r19,16
1010b774:	a0a9383a 	mul	r20,r20,r2
1010b778:	94bfffcc 	andi	r18,r18,65535
1010b77c:	94e4b03a 	or	r18,r18,r19
1010b780:	9500052e 	bgeu	r18,r20,1010b798 <__udivdi3+0x12c>
1010b784:	8ca5883a 	add	r18,r17,r18
1010b788:	10ffffc4 	addi	r3,r2,-1
1010b78c:	9440f136 	bltu	r18,r17,1010bb54 <__udivdi3+0x4e8>
1010b790:	9500f02e 	bgeu	r18,r20,1010bb54 <__udivdi3+0x4e8>
1010b794:	10bfff84 	addi	r2,r2,-2
1010b798:	b00c943a 	slli	r6,r22,16
1010b79c:	0007883a 	mov	r3,zero
1010b7a0:	3084b03a 	or	r2,r6,r2
1010b7a4:	00005906 	br	1010b90c <__udivdi3+0x2a0>
1010b7a8:	29c05636 	bltu	r5,r7,1010b904 <__udivdi3+0x298>
1010b7ac:	00bfffd4 	movui	r2,65535
1010b7b0:	11c0622e 	bgeu	r2,r7,1010b93c <__udivdi3+0x2d0>
1010b7b4:	00804034 	movhi	r2,256
1010b7b8:	10bfffc4 	addi	r2,r2,-1
1010b7bc:	11c0ee36 	bltu	r2,r7,1010bb78 <__udivdi3+0x50c>
1010b7c0:	00800404 	movi	r2,16
1010b7c4:	3886d83a 	srl	r3,r7,r2
1010b7c8:	01040474 	movhi	r4,4113
1010b7cc:	21060a04 	addi	r4,r4,6184
1010b7d0:	20c7883a 	add	r3,r4,r3
1010b7d4:	18c00003 	ldbu	r3,0(r3)
1010b7d8:	05400804 	movi	r21,32
1010b7dc:	1885883a 	add	r2,r3,r2
1010b7e0:	a8abc83a 	sub	r21,r21,r2
1010b7e4:	a800621e 	bne	r21,zero,1010b970 <__udivdi3+0x304>
1010b7e8:	3c00e936 	bltu	r7,r16,1010bb90 <__udivdi3+0x524>
1010b7ec:	9985403a 	cmpgeu	r2,r19,r6
1010b7f0:	0007883a 	mov	r3,zero
1010b7f4:	00004506 	br	1010b90c <__udivdi3+0x2a0>
1010b7f8:	3000041e 	bne	r6,zero,1010b80c <__udivdi3+0x1a0>
1010b7fc:	000b883a 	mov	r5,zero
1010b800:	01000044 	movi	r4,1
1010b804:	010175c0 	call	1010175c <__udivsi3>
1010b808:	1023883a 	mov	r17,r2
1010b80c:	00bfffd4 	movui	r2,65535
1010b810:	14404e2e 	bgeu	r2,r17,1010b94c <__udivdi3+0x2e0>
1010b814:	00804034 	movhi	r2,256
1010b818:	10bfffc4 	addi	r2,r2,-1
1010b81c:	1440d836 	bltu	r2,r17,1010bb80 <__udivdi3+0x514>
1010b820:	00800404 	movi	r2,16
1010b824:	8886d83a 	srl	r3,r17,r2
1010b828:	01040474 	movhi	r4,4113
1010b82c:	21060a04 	addi	r4,r4,6184
1010b830:	20c7883a 	add	r3,r4,r3
1010b834:	18c00003 	ldbu	r3,0(r3)
1010b838:	1885883a 	add	r2,r3,r2
1010b83c:	00c00804 	movi	r3,32
1010b840:	1887c83a 	sub	r3,r3,r2
1010b844:	18008f1e 	bne	r3,zero,1010ba84 <__udivdi3+0x418>
1010b848:	882ad43a 	srli	r21,r17,16
1010b84c:	8461c83a 	sub	r16,r16,r17
1010b850:	8d3fffcc 	andi	r20,r17,65535
1010b854:	00c00044 	movi	r3,1
1010b858:	8009883a 	mov	r4,r16
1010b85c:	a80b883a 	mov	r5,r21
1010b860:	d8c00015 	stw	r3,0(sp)
1010b864:	01017c00 	call	101017c0 <__umodsi3>
1010b868:	8009883a 	mov	r4,r16
1010b86c:	a80b883a 	mov	r5,r21
1010b870:	1027883a 	mov	r19,r2
1010b874:	010175c0 	call	1010175c <__udivsi3>
1010b878:	9826943a 	slli	r19,r19,16
1010b87c:	9008d43a 	srli	r4,r18,16
1010b880:	1521383a 	mul	r16,r2,r20
1010b884:	102d883a 	mov	r22,r2
1010b888:	24c8b03a 	or	r4,r4,r19
1010b88c:	d8c00017 	ldw	r3,0(sp)
1010b890:	2400052e 	bgeu	r4,r16,1010b8a8 <__udivdi3+0x23c>
1010b894:	2449883a 	add	r4,r4,r17
1010b898:	b0bfffc4 	addi	r2,r22,-1
1010b89c:	24400136 	bltu	r4,r17,1010b8a4 <__udivdi3+0x238>
1010b8a0:	2400ca36 	bltu	r4,r16,1010bbcc <__udivdi3+0x560>
1010b8a4:	102d883a 	mov	r22,r2
1010b8a8:	2421c83a 	sub	r16,r4,r16
1010b8ac:	a80b883a 	mov	r5,r21
1010b8b0:	8009883a 	mov	r4,r16
1010b8b4:	d8c00015 	stw	r3,0(sp)
1010b8b8:	01017c00 	call	101017c0 <__umodsi3>
1010b8bc:	1027883a 	mov	r19,r2
1010b8c0:	a80b883a 	mov	r5,r21
1010b8c4:	8009883a 	mov	r4,r16
1010b8c8:	010175c0 	call	1010175c <__udivsi3>
1010b8cc:	9826943a 	slli	r19,r19,16
1010b8d0:	1529383a 	mul	r20,r2,r20
1010b8d4:	94bfffcc 	andi	r18,r18,65535
1010b8d8:	94e4b03a 	or	r18,r18,r19
1010b8dc:	d8c00017 	ldw	r3,0(sp)
1010b8e0:	9500052e 	bgeu	r18,r20,1010b8f8 <__udivdi3+0x28c>
1010b8e4:	8ca5883a 	add	r18,r17,r18
1010b8e8:	113fffc4 	addi	r4,r2,-1
1010b8ec:	94409736 	bltu	r18,r17,1010bb4c <__udivdi3+0x4e0>
1010b8f0:	9500962e 	bgeu	r18,r20,1010bb4c <__udivdi3+0x4e0>
1010b8f4:	10bfff84 	addi	r2,r2,-2
1010b8f8:	b00c943a 	slli	r6,r22,16
1010b8fc:	3084b03a 	or	r2,r6,r2
1010b900:	00000206 	br	1010b90c <__udivdi3+0x2a0>
1010b904:	0007883a 	mov	r3,zero
1010b908:	0005883a 	mov	r2,zero
1010b90c:	dfc00a17 	ldw	ra,40(sp)
1010b910:	df000917 	ldw	fp,36(sp)
1010b914:	ddc00817 	ldw	r23,32(sp)
1010b918:	dd800717 	ldw	r22,28(sp)
1010b91c:	dd400617 	ldw	r21,24(sp)
1010b920:	dd000517 	ldw	r20,20(sp)
1010b924:	dcc00417 	ldw	r19,16(sp)
1010b928:	dc800317 	ldw	r18,12(sp)
1010b92c:	dc400217 	ldw	r17,8(sp)
1010b930:	dc000117 	ldw	r16,4(sp)
1010b934:	dec00b04 	addi	sp,sp,44
1010b938:	f800283a 	ret
1010b93c:	00803fc4 	movi	r2,255
1010b940:	11c5803a 	cmpltu	r2,r2,r7
1010b944:	100490fa 	slli	r2,r2,3
1010b948:	003f9e06 	br	1010b7c4 <__alt_data_end+0xfffeb7c4>
1010b94c:	00803fc4 	movi	r2,255
1010b950:	1445803a 	cmpltu	r2,r2,r17
1010b954:	100490fa 	slli	r2,r2,3
1010b958:	003fb206 	br	1010b824 <__alt_data_end+0xfffeb824>
1010b95c:	00804034 	movhi	r2,256
1010b960:	10bfffc4 	addi	r2,r2,-1
1010b964:	11808836 	bltu	r2,r6,1010bb88 <__udivdi3+0x51c>
1010b968:	00800404 	movi	r2,16
1010b96c:	003f5606 	br	1010b6c8 <__alt_data_end+0xfffeb6c8>
1010b970:	30aed83a 	srl	r23,r6,r2
1010b974:	3d4e983a 	sll	r7,r7,r21
1010b978:	80acd83a 	srl	r22,r16,r2
1010b97c:	9884d83a 	srl	r2,r19,r2
1010b980:	3deeb03a 	or	r23,r7,r23
1010b984:	b824d43a 	srli	r18,r23,16
1010b988:	8560983a 	sll	r16,r16,r21
1010b98c:	b009883a 	mov	r4,r22
1010b990:	900b883a 	mov	r5,r18
1010b994:	3568983a 	sll	r20,r6,r21
1010b998:	1420b03a 	or	r16,r2,r16
1010b99c:	01017c00 	call	101017c0 <__umodsi3>
1010b9a0:	b009883a 	mov	r4,r22
1010b9a4:	900b883a 	mov	r5,r18
1010b9a8:	1023883a 	mov	r17,r2
1010b9ac:	010175c0 	call	1010175c <__udivsi3>
1010b9b0:	8808943a 	slli	r4,r17,16
1010b9b4:	bf3fffcc 	andi	fp,r23,65535
1010b9b8:	8006d43a 	srli	r3,r16,16
1010b9bc:	e0a3383a 	mul	r17,fp,r2
1010b9c0:	100d883a 	mov	r6,r2
1010b9c4:	1906b03a 	or	r3,r3,r4
1010b9c8:	1c40042e 	bgeu	r3,r17,1010b9dc <__udivdi3+0x370>
1010b9cc:	1dc7883a 	add	r3,r3,r23
1010b9d0:	10bfffc4 	addi	r2,r2,-1
1010b9d4:	1dc0752e 	bgeu	r3,r23,1010bbac <__udivdi3+0x540>
1010b9d8:	100d883a 	mov	r6,r2
1010b9dc:	1c63c83a 	sub	r17,r3,r17
1010b9e0:	900b883a 	mov	r5,r18
1010b9e4:	8809883a 	mov	r4,r17
1010b9e8:	d9800015 	stw	r6,0(sp)
1010b9ec:	01017c00 	call	101017c0 <__umodsi3>
1010b9f0:	102d883a 	mov	r22,r2
1010b9f4:	8809883a 	mov	r4,r17
1010b9f8:	900b883a 	mov	r5,r18
1010b9fc:	010175c0 	call	1010175c <__udivsi3>
1010ba00:	b02c943a 	slli	r22,r22,16
1010ba04:	e089383a 	mul	r4,fp,r2
1010ba08:	843fffcc 	andi	r16,r16,65535
1010ba0c:	85a0b03a 	or	r16,r16,r22
1010ba10:	d9800017 	ldw	r6,0(sp)
1010ba14:	8100042e 	bgeu	r16,r4,1010ba28 <__udivdi3+0x3bc>
1010ba18:	85e1883a 	add	r16,r16,r23
1010ba1c:	10ffffc4 	addi	r3,r2,-1
1010ba20:	85c05e2e 	bgeu	r16,r23,1010bb9c <__udivdi3+0x530>
1010ba24:	1805883a 	mov	r2,r3
1010ba28:	300c943a 	slli	r6,r6,16
1010ba2c:	a17fffcc 	andi	r5,r20,65535
1010ba30:	a028d43a 	srli	r20,r20,16
1010ba34:	3084b03a 	or	r2,r6,r2
1010ba38:	10ffffcc 	andi	r3,r2,65535
1010ba3c:	100cd43a 	srli	r6,r2,16
1010ba40:	194f383a 	mul	r7,r3,r5
1010ba44:	1d07383a 	mul	r3,r3,r20
1010ba48:	314b383a 	mul	r5,r6,r5
1010ba4c:	3810d43a 	srli	r8,r7,16
1010ba50:	8121c83a 	sub	r16,r16,r4
1010ba54:	1947883a 	add	r3,r3,r5
1010ba58:	40c7883a 	add	r3,r8,r3
1010ba5c:	350d383a 	mul	r6,r6,r20
1010ba60:	1940022e 	bgeu	r3,r5,1010ba6c <__udivdi3+0x400>
1010ba64:	01000074 	movhi	r4,1
1010ba68:	310d883a 	add	r6,r6,r4
1010ba6c:	1828d43a 	srli	r20,r3,16
1010ba70:	a18d883a 	add	r6,r20,r6
1010ba74:	81803e36 	bltu	r16,r6,1010bb70 <__udivdi3+0x504>
1010ba78:	81803826 	beq	r16,r6,1010bb5c <__udivdi3+0x4f0>
1010ba7c:	0007883a 	mov	r3,zero
1010ba80:	003fa206 	br	1010b90c <__alt_data_end+0xfffeb90c>
1010ba84:	88e2983a 	sll	r17,r17,r3
1010ba88:	80a8d83a 	srl	r20,r16,r2
1010ba8c:	80e0983a 	sll	r16,r16,r3
1010ba90:	882ad43a 	srli	r21,r17,16
1010ba94:	9884d83a 	srl	r2,r19,r2
1010ba98:	a009883a 	mov	r4,r20
1010ba9c:	a80b883a 	mov	r5,r21
1010baa0:	142eb03a 	or	r23,r2,r16
1010baa4:	98e4983a 	sll	r18,r19,r3
1010baa8:	01017c00 	call	101017c0 <__umodsi3>
1010baac:	a009883a 	mov	r4,r20
1010bab0:	a80b883a 	mov	r5,r21
1010bab4:	1021883a 	mov	r16,r2
1010bab8:	010175c0 	call	1010175c <__udivsi3>
1010babc:	1039883a 	mov	fp,r2
1010bac0:	8d3fffcc 	andi	r20,r17,65535
1010bac4:	8020943a 	slli	r16,r16,16
1010bac8:	b804d43a 	srli	r2,r23,16
1010bacc:	a72d383a 	mul	r22,r20,fp
1010bad0:	1404b03a 	or	r2,r2,r16
1010bad4:	1580062e 	bgeu	r2,r22,1010baf0 <__udivdi3+0x484>
1010bad8:	1445883a 	add	r2,r2,r17
1010badc:	e0ffffc4 	addi	r3,fp,-1
1010bae0:	14403836 	bltu	r2,r17,1010bbc4 <__udivdi3+0x558>
1010bae4:	1580372e 	bgeu	r2,r22,1010bbc4 <__udivdi3+0x558>
1010bae8:	e73fff84 	addi	fp,fp,-2
1010baec:	1445883a 	add	r2,r2,r17
1010baf0:	15adc83a 	sub	r22,r2,r22
1010baf4:	a80b883a 	mov	r5,r21
1010baf8:	b009883a 	mov	r4,r22
1010bafc:	01017c00 	call	101017c0 <__umodsi3>
1010bb00:	1027883a 	mov	r19,r2
1010bb04:	b009883a 	mov	r4,r22
1010bb08:	a80b883a 	mov	r5,r21
1010bb0c:	010175c0 	call	1010175c <__udivsi3>
1010bb10:	9826943a 	slli	r19,r19,16
1010bb14:	a0a1383a 	mul	r16,r20,r2
1010bb18:	b93fffcc 	andi	r4,r23,65535
1010bb1c:	24c8b03a 	or	r4,r4,r19
1010bb20:	2400062e 	bgeu	r4,r16,1010bb3c <__udivdi3+0x4d0>
1010bb24:	2449883a 	add	r4,r4,r17
1010bb28:	10ffffc4 	addi	r3,r2,-1
1010bb2c:	24402336 	bltu	r4,r17,1010bbbc <__udivdi3+0x550>
1010bb30:	2400222e 	bgeu	r4,r16,1010bbbc <__udivdi3+0x550>
1010bb34:	10bfff84 	addi	r2,r2,-2
1010bb38:	2449883a 	add	r4,r4,r17
1010bb3c:	e038943a 	slli	fp,fp,16
1010bb40:	2421c83a 	sub	r16,r4,r16
1010bb44:	e086b03a 	or	r3,fp,r2
1010bb48:	003f4306 	br	1010b858 <__alt_data_end+0xfffeb858>
1010bb4c:	2005883a 	mov	r2,r4
1010bb50:	003f6906 	br	1010b8f8 <__alt_data_end+0xfffeb8f8>
1010bb54:	1805883a 	mov	r2,r3
1010bb58:	003f0f06 	br	1010b798 <__alt_data_end+0xfffeb798>
1010bb5c:	1806943a 	slli	r3,r3,16
1010bb60:	9d66983a 	sll	r19,r19,r21
1010bb64:	39ffffcc 	andi	r7,r7,65535
1010bb68:	19c7883a 	add	r3,r3,r7
1010bb6c:	98ffc32e 	bgeu	r19,r3,1010ba7c <__alt_data_end+0xfffeba7c>
1010bb70:	10bfffc4 	addi	r2,r2,-1
1010bb74:	003fc106 	br	1010ba7c <__alt_data_end+0xfffeba7c>
1010bb78:	00800604 	movi	r2,24
1010bb7c:	003f1106 	br	1010b7c4 <__alt_data_end+0xfffeb7c4>
1010bb80:	00800604 	movi	r2,24
1010bb84:	003f2706 	br	1010b824 <__alt_data_end+0xfffeb824>
1010bb88:	00800604 	movi	r2,24
1010bb8c:	003ece06 	br	1010b6c8 <__alt_data_end+0xfffeb6c8>
1010bb90:	0007883a 	mov	r3,zero
1010bb94:	00800044 	movi	r2,1
1010bb98:	003f5c06 	br	1010b90c <__alt_data_end+0xfffeb90c>
1010bb9c:	813fa12e 	bgeu	r16,r4,1010ba24 <__alt_data_end+0xfffeba24>
1010bba0:	10bfff84 	addi	r2,r2,-2
1010bba4:	85e1883a 	add	r16,r16,r23
1010bba8:	003f9f06 	br	1010ba28 <__alt_data_end+0xfffeba28>
1010bbac:	1c7f8a2e 	bgeu	r3,r17,1010b9d8 <__alt_data_end+0xfffeb9d8>
1010bbb0:	31bfff84 	addi	r6,r6,-2
1010bbb4:	1dc7883a 	add	r3,r3,r23
1010bbb8:	003f8806 	br	1010b9dc <__alt_data_end+0xfffeb9dc>
1010bbbc:	1805883a 	mov	r2,r3
1010bbc0:	003fde06 	br	1010bb3c <__alt_data_end+0xfffebb3c>
1010bbc4:	1839883a 	mov	fp,r3
1010bbc8:	003fc906 	br	1010baf0 <__alt_data_end+0xfffebaf0>
1010bbcc:	b5bfff84 	addi	r22,r22,-2
1010bbd0:	2449883a 	add	r4,r4,r17
1010bbd4:	003f3406 	br	1010b8a8 <__alt_data_end+0xfffeb8a8>
1010bbd8:	b5bfff84 	addi	r22,r22,-2
1010bbdc:	1445883a 	add	r2,r2,r17
1010bbe0:	003edb06 	br	1010b750 <__alt_data_end+0xfffeb750>

1010bbe4 <__umoddi3>:
1010bbe4:	defff404 	addi	sp,sp,-48
1010bbe8:	df000a15 	stw	fp,40(sp)
1010bbec:	dc400315 	stw	r17,12(sp)
1010bbf0:	dc000215 	stw	r16,8(sp)
1010bbf4:	dfc00b15 	stw	ra,44(sp)
1010bbf8:	ddc00915 	stw	r23,36(sp)
1010bbfc:	dd800815 	stw	r22,32(sp)
1010bc00:	dd400715 	stw	r21,28(sp)
1010bc04:	dd000615 	stw	r20,24(sp)
1010bc08:	dcc00515 	stw	r19,20(sp)
1010bc0c:	dc800415 	stw	r18,16(sp)
1010bc10:	2021883a 	mov	r16,r4
1010bc14:	2823883a 	mov	r17,r5
1010bc18:	2839883a 	mov	fp,r5
1010bc1c:	38003c1e 	bne	r7,zero,1010bd10 <__umoddi3+0x12c>
1010bc20:	3027883a 	mov	r19,r6
1010bc24:	2029883a 	mov	r20,r4
1010bc28:	2980512e 	bgeu	r5,r6,1010bd70 <__umoddi3+0x18c>
1010bc2c:	00bfffd4 	movui	r2,65535
1010bc30:	11809a36 	bltu	r2,r6,1010be9c <__umoddi3+0x2b8>
1010bc34:	01003fc4 	movi	r4,255
1010bc38:	2189803a 	cmpltu	r4,r4,r6
1010bc3c:	200890fa 	slli	r4,r4,3
1010bc40:	3104d83a 	srl	r2,r6,r4
1010bc44:	00c40474 	movhi	r3,4113
1010bc48:	18c60a04 	addi	r3,r3,6184
1010bc4c:	1885883a 	add	r2,r3,r2
1010bc50:	10c00003 	ldbu	r3,0(r2)
1010bc54:	00800804 	movi	r2,32
1010bc58:	1909883a 	add	r4,r3,r4
1010bc5c:	1125c83a 	sub	r18,r2,r4
1010bc60:	90000526 	beq	r18,zero,1010bc78 <__umoddi3+0x94>
1010bc64:	8ca2983a 	sll	r17,r17,r18
1010bc68:	8108d83a 	srl	r4,r16,r4
1010bc6c:	34a6983a 	sll	r19,r6,r18
1010bc70:	84a8983a 	sll	r20,r16,r18
1010bc74:	2478b03a 	or	fp,r4,r17
1010bc78:	982ed43a 	srli	r23,r19,16
1010bc7c:	e009883a 	mov	r4,fp
1010bc80:	9dbfffcc 	andi	r22,r19,65535
1010bc84:	b80b883a 	mov	r5,r23
1010bc88:	01017c00 	call	101017c0 <__umodsi3>
1010bc8c:	e009883a 	mov	r4,fp
1010bc90:	b80b883a 	mov	r5,r23
1010bc94:	102b883a 	mov	r21,r2
1010bc98:	010175c0 	call	1010175c <__udivsi3>
1010bc9c:	a806943a 	slli	r3,r21,16
1010bca0:	a008d43a 	srli	r4,r20,16
1010bca4:	b085383a 	mul	r2,r22,r2
1010bca8:	20c8b03a 	or	r4,r4,r3
1010bcac:	2080032e 	bgeu	r4,r2,1010bcbc <__umoddi3+0xd8>
1010bcb0:	24c9883a 	add	r4,r4,r19
1010bcb4:	24c00136 	bltu	r4,r19,1010bcbc <__umoddi3+0xd8>
1010bcb8:	20811036 	bltu	r4,r2,1010c0fc <__umoddi3+0x518>
1010bcbc:	20abc83a 	sub	r21,r4,r2
1010bcc0:	b80b883a 	mov	r5,r23
1010bcc4:	a809883a 	mov	r4,r21
1010bcc8:	01017c00 	call	101017c0 <__umodsi3>
1010bccc:	1023883a 	mov	r17,r2
1010bcd0:	b80b883a 	mov	r5,r23
1010bcd4:	a809883a 	mov	r4,r21
1010bcd8:	010175c0 	call	1010175c <__udivsi3>
1010bcdc:	8822943a 	slli	r17,r17,16
1010bce0:	b085383a 	mul	r2,r22,r2
1010bce4:	a0ffffcc 	andi	r3,r20,65535
1010bce8:	1c46b03a 	or	r3,r3,r17
1010bcec:	1880042e 	bgeu	r3,r2,1010bd00 <__umoddi3+0x11c>
1010bcf0:	1cc7883a 	add	r3,r3,r19
1010bcf4:	1cc00236 	bltu	r3,r19,1010bd00 <__umoddi3+0x11c>
1010bcf8:	1880012e 	bgeu	r3,r2,1010bd00 <__umoddi3+0x11c>
1010bcfc:	1cc7883a 	add	r3,r3,r19
1010bd00:	1885c83a 	sub	r2,r3,r2
1010bd04:	1484d83a 	srl	r2,r2,r18
1010bd08:	0007883a 	mov	r3,zero
1010bd0c:	00004f06 	br	1010be4c <__umoddi3+0x268>
1010bd10:	29c04c36 	bltu	r5,r7,1010be44 <__umoddi3+0x260>
1010bd14:	00bfffd4 	movui	r2,65535
1010bd18:	11c0582e 	bgeu	r2,r7,1010be7c <__umoddi3+0x298>
1010bd1c:	00804034 	movhi	r2,256
1010bd20:	10bfffc4 	addi	r2,r2,-1
1010bd24:	11c0e736 	bltu	r2,r7,1010c0c4 <__umoddi3+0x4e0>
1010bd28:	01000404 	movi	r4,16
1010bd2c:	3904d83a 	srl	r2,r7,r4
1010bd30:	00c40474 	movhi	r3,4113
1010bd34:	18c60a04 	addi	r3,r3,6184
1010bd38:	1885883a 	add	r2,r3,r2
1010bd3c:	14c00003 	ldbu	r19,0(r2)
1010bd40:	00c00804 	movi	r3,32
1010bd44:	9927883a 	add	r19,r19,r4
1010bd48:	1ce9c83a 	sub	r20,r3,r19
1010bd4c:	a000581e 	bne	r20,zero,1010beb0 <__umoddi3+0x2cc>
1010bd50:	3c400136 	bltu	r7,r17,1010bd58 <__umoddi3+0x174>
1010bd54:	8180eb36 	bltu	r16,r6,1010c104 <__umoddi3+0x520>
1010bd58:	8185c83a 	sub	r2,r16,r6
1010bd5c:	89e3c83a 	sub	r17,r17,r7
1010bd60:	8089803a 	cmpltu	r4,r16,r2
1010bd64:	8939c83a 	sub	fp,r17,r4
1010bd68:	e007883a 	mov	r3,fp
1010bd6c:	00003706 	br	1010be4c <__umoddi3+0x268>
1010bd70:	3000041e 	bne	r6,zero,1010bd84 <__umoddi3+0x1a0>
1010bd74:	000b883a 	mov	r5,zero
1010bd78:	01000044 	movi	r4,1
1010bd7c:	010175c0 	call	1010175c <__udivsi3>
1010bd80:	1027883a 	mov	r19,r2
1010bd84:	00bfffd4 	movui	r2,65535
1010bd88:	14c0402e 	bgeu	r2,r19,1010be8c <__umoddi3+0x2a8>
1010bd8c:	00804034 	movhi	r2,256
1010bd90:	10bfffc4 	addi	r2,r2,-1
1010bd94:	14c0cd36 	bltu	r2,r19,1010c0cc <__umoddi3+0x4e8>
1010bd98:	00800404 	movi	r2,16
1010bd9c:	9886d83a 	srl	r3,r19,r2
1010bda0:	01040474 	movhi	r4,4113
1010bda4:	21060a04 	addi	r4,r4,6184
1010bda8:	20c7883a 	add	r3,r4,r3
1010bdac:	18c00003 	ldbu	r3,0(r3)
1010bdb0:	1887883a 	add	r3,r3,r2
1010bdb4:	00800804 	movi	r2,32
1010bdb8:	10e5c83a 	sub	r18,r2,r3
1010bdbc:	9000901e 	bne	r18,zero,1010c000 <__umoddi3+0x41c>
1010bdc0:	982cd43a 	srli	r22,r19,16
1010bdc4:	8ce3c83a 	sub	r17,r17,r19
1010bdc8:	9d7fffcc 	andi	r21,r19,65535
1010bdcc:	b00b883a 	mov	r5,r22
1010bdd0:	8809883a 	mov	r4,r17
1010bdd4:	01017c00 	call	101017c0 <__umodsi3>
1010bdd8:	8809883a 	mov	r4,r17
1010bddc:	b00b883a 	mov	r5,r22
1010bde0:	1021883a 	mov	r16,r2
1010bde4:	010175c0 	call	1010175c <__udivsi3>
1010bde8:	8006943a 	slli	r3,r16,16
1010bdec:	a008d43a 	srli	r4,r20,16
1010bdf0:	1545383a 	mul	r2,r2,r21
1010bdf4:	20c8b03a 	or	r4,r4,r3
1010bdf8:	2080042e 	bgeu	r4,r2,1010be0c <__umoddi3+0x228>
1010bdfc:	24c9883a 	add	r4,r4,r19
1010be00:	24c00236 	bltu	r4,r19,1010be0c <__umoddi3+0x228>
1010be04:	2080012e 	bgeu	r4,r2,1010be0c <__umoddi3+0x228>
1010be08:	24c9883a 	add	r4,r4,r19
1010be0c:	20a1c83a 	sub	r16,r4,r2
1010be10:	b00b883a 	mov	r5,r22
1010be14:	8009883a 	mov	r4,r16
1010be18:	01017c00 	call	101017c0 <__umodsi3>
1010be1c:	1023883a 	mov	r17,r2
1010be20:	b00b883a 	mov	r5,r22
1010be24:	8009883a 	mov	r4,r16
1010be28:	010175c0 	call	1010175c <__udivsi3>
1010be2c:	8822943a 	slli	r17,r17,16
1010be30:	1545383a 	mul	r2,r2,r21
1010be34:	a53fffcc 	andi	r20,r20,65535
1010be38:	a446b03a 	or	r3,r20,r17
1010be3c:	18bfb02e 	bgeu	r3,r2,1010bd00 <__alt_data_end+0xfffebd00>
1010be40:	003fab06 	br	1010bcf0 <__alt_data_end+0xfffebcf0>
1010be44:	2005883a 	mov	r2,r4
1010be48:	2807883a 	mov	r3,r5
1010be4c:	dfc00b17 	ldw	ra,44(sp)
1010be50:	df000a17 	ldw	fp,40(sp)
1010be54:	ddc00917 	ldw	r23,36(sp)
1010be58:	dd800817 	ldw	r22,32(sp)
1010be5c:	dd400717 	ldw	r21,28(sp)
1010be60:	dd000617 	ldw	r20,24(sp)
1010be64:	dcc00517 	ldw	r19,20(sp)
1010be68:	dc800417 	ldw	r18,16(sp)
1010be6c:	dc400317 	ldw	r17,12(sp)
1010be70:	dc000217 	ldw	r16,8(sp)
1010be74:	dec00c04 	addi	sp,sp,48
1010be78:	f800283a 	ret
1010be7c:	04c03fc4 	movi	r19,255
1010be80:	99c9803a 	cmpltu	r4,r19,r7
1010be84:	200890fa 	slli	r4,r4,3
1010be88:	003fa806 	br	1010bd2c <__alt_data_end+0xfffebd2c>
1010be8c:	00803fc4 	movi	r2,255
1010be90:	14c5803a 	cmpltu	r2,r2,r19
1010be94:	100490fa 	slli	r2,r2,3
1010be98:	003fc006 	br	1010bd9c <__alt_data_end+0xfffebd9c>
1010be9c:	00804034 	movhi	r2,256
1010bea0:	10bfffc4 	addi	r2,r2,-1
1010bea4:	11808b36 	bltu	r2,r6,1010c0d4 <__umoddi3+0x4f0>
1010bea8:	01000404 	movi	r4,16
1010beac:	003f6406 	br	1010bc40 <__alt_data_end+0xfffebc40>
1010beb0:	34c4d83a 	srl	r2,r6,r19
1010beb4:	3d0e983a 	sll	r7,r7,r20
1010beb8:	8cf8d83a 	srl	fp,r17,r19
1010bebc:	8d10983a 	sll	r8,r17,r20
1010bec0:	38aab03a 	or	r21,r7,r2
1010bec4:	a82cd43a 	srli	r22,r21,16
1010bec8:	84e2d83a 	srl	r17,r16,r19
1010becc:	e009883a 	mov	r4,fp
1010bed0:	b00b883a 	mov	r5,r22
1010bed4:	8a22b03a 	or	r17,r17,r8
1010bed8:	3524983a 	sll	r18,r6,r20
1010bedc:	01017c00 	call	101017c0 <__umodsi3>
1010bee0:	e009883a 	mov	r4,fp
1010bee4:	b00b883a 	mov	r5,r22
1010bee8:	102f883a 	mov	r23,r2
1010beec:	010175c0 	call	1010175c <__udivsi3>
1010bef0:	100d883a 	mov	r6,r2
1010bef4:	b808943a 	slli	r4,r23,16
1010bef8:	aa3fffcc 	andi	r8,r21,65535
1010befc:	8804d43a 	srli	r2,r17,16
1010bf00:	41af383a 	mul	r23,r8,r6
1010bf04:	8520983a 	sll	r16,r16,r20
1010bf08:	1104b03a 	or	r2,r2,r4
1010bf0c:	15c0042e 	bgeu	r2,r23,1010bf20 <__umoddi3+0x33c>
1010bf10:	1545883a 	add	r2,r2,r21
1010bf14:	30ffffc4 	addi	r3,r6,-1
1010bf18:	1540742e 	bgeu	r2,r21,1010c0ec <__umoddi3+0x508>
1010bf1c:	180d883a 	mov	r6,r3
1010bf20:	15efc83a 	sub	r23,r2,r23
1010bf24:	b00b883a 	mov	r5,r22
1010bf28:	b809883a 	mov	r4,r23
1010bf2c:	d9800115 	stw	r6,4(sp)
1010bf30:	da000015 	stw	r8,0(sp)
1010bf34:	01017c00 	call	101017c0 <__umodsi3>
1010bf38:	b00b883a 	mov	r5,r22
1010bf3c:	b809883a 	mov	r4,r23
1010bf40:	1039883a 	mov	fp,r2
1010bf44:	010175c0 	call	1010175c <__udivsi3>
1010bf48:	da000017 	ldw	r8,0(sp)
1010bf4c:	e038943a 	slli	fp,fp,16
1010bf50:	100b883a 	mov	r5,r2
1010bf54:	4089383a 	mul	r4,r8,r2
1010bf58:	8a3fffcc 	andi	r8,r17,65535
1010bf5c:	4710b03a 	or	r8,r8,fp
1010bf60:	d9800117 	ldw	r6,4(sp)
1010bf64:	4100042e 	bgeu	r8,r4,1010bf78 <__umoddi3+0x394>
1010bf68:	4551883a 	add	r8,r8,r21
1010bf6c:	10bfffc4 	addi	r2,r2,-1
1010bf70:	45405a2e 	bgeu	r8,r21,1010c0dc <__umoddi3+0x4f8>
1010bf74:	100b883a 	mov	r5,r2
1010bf78:	300c943a 	slli	r6,r6,16
1010bf7c:	91ffffcc 	andi	r7,r18,65535
1010bf80:	9004d43a 	srli	r2,r18,16
1010bf84:	314cb03a 	or	r6,r6,r5
1010bf88:	317fffcc 	andi	r5,r6,65535
1010bf8c:	300cd43a 	srli	r6,r6,16
1010bf90:	29d3383a 	mul	r9,r5,r7
1010bf94:	288b383a 	mul	r5,r5,r2
1010bf98:	31cf383a 	mul	r7,r6,r7
1010bf9c:	4806d43a 	srli	r3,r9,16
1010bfa0:	4111c83a 	sub	r8,r8,r4
1010bfa4:	29cb883a 	add	r5,r5,r7
1010bfa8:	194b883a 	add	r5,r3,r5
1010bfac:	3085383a 	mul	r2,r6,r2
1010bfb0:	29c0022e 	bgeu	r5,r7,1010bfbc <__umoddi3+0x3d8>
1010bfb4:	00c00074 	movhi	r3,1
1010bfb8:	10c5883a 	add	r2,r2,r3
1010bfbc:	2808d43a 	srli	r4,r5,16
1010bfc0:	280a943a 	slli	r5,r5,16
1010bfc4:	4a7fffcc 	andi	r9,r9,65535
1010bfc8:	2085883a 	add	r2,r4,r2
1010bfcc:	2a4b883a 	add	r5,r5,r9
1010bfd0:	40803636 	bltu	r8,r2,1010c0ac <__umoddi3+0x4c8>
1010bfd4:	40804d26 	beq	r8,r2,1010c10c <__umoddi3+0x528>
1010bfd8:	4089c83a 	sub	r4,r8,r2
1010bfdc:	280f883a 	mov	r7,r5
1010bfe0:	81cfc83a 	sub	r7,r16,r7
1010bfe4:	81c7803a 	cmpltu	r3,r16,r7
1010bfe8:	20c7c83a 	sub	r3,r4,r3
1010bfec:	1cc4983a 	sll	r2,r3,r19
1010bff0:	3d0ed83a 	srl	r7,r7,r20
1010bff4:	1d06d83a 	srl	r3,r3,r20
1010bff8:	11c4b03a 	or	r2,r2,r7
1010bffc:	003f9306 	br	1010be4c <__alt_data_end+0xfffebe4c>
1010c000:	9ca6983a 	sll	r19,r19,r18
1010c004:	88e8d83a 	srl	r20,r17,r3
1010c008:	80c4d83a 	srl	r2,r16,r3
1010c00c:	982cd43a 	srli	r22,r19,16
1010c010:	8ca2983a 	sll	r17,r17,r18
1010c014:	a009883a 	mov	r4,r20
1010c018:	b00b883a 	mov	r5,r22
1010c01c:	1478b03a 	or	fp,r2,r17
1010c020:	01017c00 	call	101017c0 <__umodsi3>
1010c024:	a009883a 	mov	r4,r20
1010c028:	b00b883a 	mov	r5,r22
1010c02c:	1023883a 	mov	r17,r2
1010c030:	010175c0 	call	1010175c <__udivsi3>
1010c034:	9d7fffcc 	andi	r21,r19,65535
1010c038:	880a943a 	slli	r5,r17,16
1010c03c:	e008d43a 	srli	r4,fp,16
1010c040:	a885383a 	mul	r2,r21,r2
1010c044:	84a8983a 	sll	r20,r16,r18
1010c048:	2148b03a 	or	r4,r4,r5
1010c04c:	2080042e 	bgeu	r4,r2,1010c060 <__umoddi3+0x47c>
1010c050:	24c9883a 	add	r4,r4,r19
1010c054:	24c00236 	bltu	r4,r19,1010c060 <__umoddi3+0x47c>
1010c058:	2080012e 	bgeu	r4,r2,1010c060 <__umoddi3+0x47c>
1010c05c:	24c9883a 	add	r4,r4,r19
1010c060:	20a3c83a 	sub	r17,r4,r2
1010c064:	b00b883a 	mov	r5,r22
1010c068:	8809883a 	mov	r4,r17
1010c06c:	01017c00 	call	101017c0 <__umodsi3>
1010c070:	102f883a 	mov	r23,r2
1010c074:	8809883a 	mov	r4,r17
1010c078:	b00b883a 	mov	r5,r22
1010c07c:	010175c0 	call	1010175c <__udivsi3>
1010c080:	b82e943a 	slli	r23,r23,16
1010c084:	a885383a 	mul	r2,r21,r2
1010c088:	e13fffcc 	andi	r4,fp,65535
1010c08c:	25c8b03a 	or	r4,r4,r23
1010c090:	2080042e 	bgeu	r4,r2,1010c0a4 <__umoddi3+0x4c0>
1010c094:	24c9883a 	add	r4,r4,r19
1010c098:	24c00236 	bltu	r4,r19,1010c0a4 <__umoddi3+0x4c0>
1010c09c:	2080012e 	bgeu	r4,r2,1010c0a4 <__umoddi3+0x4c0>
1010c0a0:	24c9883a 	add	r4,r4,r19
1010c0a4:	20a3c83a 	sub	r17,r4,r2
1010c0a8:	003f4806 	br	1010bdcc <__alt_data_end+0xfffebdcc>
1010c0ac:	2c8fc83a 	sub	r7,r5,r18
1010c0b0:	1545c83a 	sub	r2,r2,r21
1010c0b4:	29cb803a 	cmpltu	r5,r5,r7
1010c0b8:	1145c83a 	sub	r2,r2,r5
1010c0bc:	4089c83a 	sub	r4,r8,r2
1010c0c0:	003fc706 	br	1010bfe0 <__alt_data_end+0xfffebfe0>
1010c0c4:	01000604 	movi	r4,24
1010c0c8:	003f1806 	br	1010bd2c <__alt_data_end+0xfffebd2c>
1010c0cc:	00800604 	movi	r2,24
1010c0d0:	003f3206 	br	1010bd9c <__alt_data_end+0xfffebd9c>
1010c0d4:	01000604 	movi	r4,24
1010c0d8:	003ed906 	br	1010bc40 <__alt_data_end+0xfffebc40>
1010c0dc:	413fa52e 	bgeu	r8,r4,1010bf74 <__alt_data_end+0xfffebf74>
1010c0e0:	297fff84 	addi	r5,r5,-2
1010c0e4:	4551883a 	add	r8,r8,r21
1010c0e8:	003fa306 	br	1010bf78 <__alt_data_end+0xfffebf78>
1010c0ec:	15ff8b2e 	bgeu	r2,r23,1010bf1c <__alt_data_end+0xfffebf1c>
1010c0f0:	31bfff84 	addi	r6,r6,-2
1010c0f4:	1545883a 	add	r2,r2,r21
1010c0f8:	003f8906 	br	1010bf20 <__alt_data_end+0xfffebf20>
1010c0fc:	24c9883a 	add	r4,r4,r19
1010c100:	003eee06 	br	1010bcbc <__alt_data_end+0xfffebcbc>
1010c104:	8005883a 	mov	r2,r16
1010c108:	003f1706 	br	1010bd68 <__alt_data_end+0xfffebd68>
1010c10c:	817fe736 	bltu	r16,r5,1010c0ac <__alt_data_end+0xfffec0ac>
1010c110:	280f883a 	mov	r7,r5
1010c114:	0009883a 	mov	r4,zero
1010c118:	003fb106 	br	1010bfe0 <__alt_data_end+0xfffebfe0>

1010c11c <__adddf3>:
1010c11c:	02c00434 	movhi	r11,16
1010c120:	5affffc4 	addi	r11,r11,-1
1010c124:	2806d7fa 	srli	r3,r5,31
1010c128:	2ad4703a 	and	r10,r5,r11
1010c12c:	3ad2703a 	and	r9,r7,r11
1010c130:	3804d53a 	srli	r2,r7,20
1010c134:	3018d77a 	srli	r12,r6,29
1010c138:	280ad53a 	srli	r5,r5,20
1010c13c:	501490fa 	slli	r10,r10,3
1010c140:	2010d77a 	srli	r8,r4,29
1010c144:	481290fa 	slli	r9,r9,3
1010c148:	380ed7fa 	srli	r7,r7,31
1010c14c:	defffb04 	addi	sp,sp,-20
1010c150:	dc800215 	stw	r18,8(sp)
1010c154:	dc400115 	stw	r17,4(sp)
1010c158:	dc000015 	stw	r16,0(sp)
1010c15c:	dfc00415 	stw	ra,16(sp)
1010c160:	dcc00315 	stw	r19,12(sp)
1010c164:	1c803fcc 	andi	r18,r3,255
1010c168:	2c01ffcc 	andi	r16,r5,2047
1010c16c:	5210b03a 	or	r8,r10,r8
1010c170:	202290fa 	slli	r17,r4,3
1010c174:	1081ffcc 	andi	r2,r2,2047
1010c178:	4b12b03a 	or	r9,r9,r12
1010c17c:	300c90fa 	slli	r6,r6,3
1010c180:	91c07526 	beq	r18,r7,1010c358 <__adddf3+0x23c>
1010c184:	8087c83a 	sub	r3,r16,r2
1010c188:	00c0ab0e 	bge	zero,r3,1010c438 <__adddf3+0x31c>
1010c18c:	10002a1e 	bne	r2,zero,1010c238 <__adddf3+0x11c>
1010c190:	4984b03a 	or	r2,r9,r6
1010c194:	1000961e 	bne	r2,zero,1010c3f0 <__adddf3+0x2d4>
1010c198:	888001cc 	andi	r2,r17,7
1010c19c:	10000726 	beq	r2,zero,1010c1bc <__adddf3+0xa0>
1010c1a0:	888003cc 	andi	r2,r17,15
1010c1a4:	00c00104 	movi	r3,4
1010c1a8:	10c00426 	beq	r2,r3,1010c1bc <__adddf3+0xa0>
1010c1ac:	88c7883a 	add	r3,r17,r3
1010c1b0:	1c63803a 	cmpltu	r17,r3,r17
1010c1b4:	4451883a 	add	r8,r8,r17
1010c1b8:	1823883a 	mov	r17,r3
1010c1bc:	4080202c 	andhi	r2,r8,128
1010c1c0:	10005926 	beq	r2,zero,1010c328 <__adddf3+0x20c>
1010c1c4:	84000044 	addi	r16,r16,1
1010c1c8:	0081ffc4 	movi	r2,2047
1010c1cc:	8080ba26 	beq	r16,r2,1010c4b8 <__adddf3+0x39c>
1010c1d0:	00bfe034 	movhi	r2,65408
1010c1d4:	10bfffc4 	addi	r2,r2,-1
1010c1d8:	4090703a 	and	r8,r8,r2
1010c1dc:	4004977a 	slli	r2,r8,29
1010c1e0:	4010927a 	slli	r8,r8,9
1010c1e4:	8822d0fa 	srli	r17,r17,3
1010c1e8:	8401ffcc 	andi	r16,r16,2047
1010c1ec:	4010d33a 	srli	r8,r8,12
1010c1f0:	9007883a 	mov	r3,r18
1010c1f4:	1444b03a 	or	r2,r2,r17
1010c1f8:	8401ffcc 	andi	r16,r16,2047
1010c1fc:	8020953a 	slli	r16,r16,20
1010c200:	18c03fcc 	andi	r3,r3,255
1010c204:	01000434 	movhi	r4,16
1010c208:	213fffc4 	addi	r4,r4,-1
1010c20c:	180697fa 	slli	r3,r3,31
1010c210:	4110703a 	and	r8,r8,r4
1010c214:	4410b03a 	or	r8,r8,r16
1010c218:	40c6b03a 	or	r3,r8,r3
1010c21c:	dfc00417 	ldw	ra,16(sp)
1010c220:	dcc00317 	ldw	r19,12(sp)
1010c224:	dc800217 	ldw	r18,8(sp)
1010c228:	dc400117 	ldw	r17,4(sp)
1010c22c:	dc000017 	ldw	r16,0(sp)
1010c230:	dec00504 	addi	sp,sp,20
1010c234:	f800283a 	ret
1010c238:	0081ffc4 	movi	r2,2047
1010c23c:	80bfd626 	beq	r16,r2,1010c198 <__alt_data_end+0xfffec198>
1010c240:	4a402034 	orhi	r9,r9,128
1010c244:	00800e04 	movi	r2,56
1010c248:	10c09f16 	blt	r2,r3,1010c4c8 <__adddf3+0x3ac>
1010c24c:	008007c4 	movi	r2,31
1010c250:	10c0c216 	blt	r2,r3,1010c55c <__adddf3+0x440>
1010c254:	00800804 	movi	r2,32
1010c258:	10c5c83a 	sub	r2,r2,r3
1010c25c:	488a983a 	sll	r5,r9,r2
1010c260:	30c8d83a 	srl	r4,r6,r3
1010c264:	3084983a 	sll	r2,r6,r2
1010c268:	48c6d83a 	srl	r3,r9,r3
1010c26c:	290cb03a 	or	r6,r5,r4
1010c270:	1004c03a 	cmpne	r2,r2,zero
1010c274:	308cb03a 	or	r6,r6,r2
1010c278:	898dc83a 	sub	r6,r17,r6
1010c27c:	89a3803a 	cmpltu	r17,r17,r6
1010c280:	40d1c83a 	sub	r8,r8,r3
1010c284:	4451c83a 	sub	r8,r8,r17
1010c288:	3023883a 	mov	r17,r6
1010c28c:	4080202c 	andhi	r2,r8,128
1010c290:	10002326 	beq	r2,zero,1010c320 <__adddf3+0x204>
1010c294:	04c02034 	movhi	r19,128
1010c298:	9cffffc4 	addi	r19,r19,-1
1010c29c:	44e6703a 	and	r19,r8,r19
1010c2a0:	98007626 	beq	r19,zero,1010c47c <__adddf3+0x360>
1010c2a4:	9809883a 	mov	r4,r19
1010c2a8:	010e7200 	call	1010e720 <__clzsi2>
1010c2ac:	10fffe04 	addi	r3,r2,-8
1010c2b0:	010007c4 	movi	r4,31
1010c2b4:	20c07716 	blt	r4,r3,1010c494 <__adddf3+0x378>
1010c2b8:	00800804 	movi	r2,32
1010c2bc:	10c5c83a 	sub	r2,r2,r3
1010c2c0:	8884d83a 	srl	r2,r17,r2
1010c2c4:	98d0983a 	sll	r8,r19,r3
1010c2c8:	88e2983a 	sll	r17,r17,r3
1010c2cc:	1204b03a 	or	r2,r2,r8
1010c2d0:	1c007416 	blt	r3,r16,1010c4a4 <__adddf3+0x388>
1010c2d4:	1c21c83a 	sub	r16,r3,r16
1010c2d8:	82000044 	addi	r8,r16,1
1010c2dc:	00c007c4 	movi	r3,31
1010c2e0:	1a009116 	blt	r3,r8,1010c528 <__adddf3+0x40c>
1010c2e4:	00c00804 	movi	r3,32
1010c2e8:	1a07c83a 	sub	r3,r3,r8
1010c2ec:	8a08d83a 	srl	r4,r17,r8
1010c2f0:	88e2983a 	sll	r17,r17,r3
1010c2f4:	10c6983a 	sll	r3,r2,r3
1010c2f8:	1210d83a 	srl	r8,r2,r8
1010c2fc:	8804c03a 	cmpne	r2,r17,zero
1010c300:	1906b03a 	or	r3,r3,r4
1010c304:	18a2b03a 	or	r17,r3,r2
1010c308:	0021883a 	mov	r16,zero
1010c30c:	003fa206 	br	1010c198 <__alt_data_end+0xfffec198>
1010c310:	1890b03a 	or	r8,r3,r2
1010c314:	40017d26 	beq	r8,zero,1010c90c <__adddf3+0x7f0>
1010c318:	1011883a 	mov	r8,r2
1010c31c:	1823883a 	mov	r17,r3
1010c320:	888001cc 	andi	r2,r17,7
1010c324:	103f9e1e 	bne	r2,zero,1010c1a0 <__alt_data_end+0xfffec1a0>
1010c328:	4004977a 	slli	r2,r8,29
1010c32c:	8822d0fa 	srli	r17,r17,3
1010c330:	4010d0fa 	srli	r8,r8,3
1010c334:	9007883a 	mov	r3,r18
1010c338:	1444b03a 	or	r2,r2,r17
1010c33c:	0101ffc4 	movi	r4,2047
1010c340:	81002426 	beq	r16,r4,1010c3d4 <__adddf3+0x2b8>
1010c344:	8120703a 	and	r16,r16,r4
1010c348:	01000434 	movhi	r4,16
1010c34c:	213fffc4 	addi	r4,r4,-1
1010c350:	4110703a 	and	r8,r8,r4
1010c354:	003fa806 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c358:	8089c83a 	sub	r4,r16,r2
1010c35c:	01005e0e 	bge	zero,r4,1010c4d8 <__adddf3+0x3bc>
1010c360:	10002b26 	beq	r2,zero,1010c410 <__adddf3+0x2f4>
1010c364:	0081ffc4 	movi	r2,2047
1010c368:	80bf8b26 	beq	r16,r2,1010c198 <__alt_data_end+0xfffec198>
1010c36c:	4a402034 	orhi	r9,r9,128
1010c370:	00800e04 	movi	r2,56
1010c374:	1100a40e 	bge	r2,r4,1010c608 <__adddf3+0x4ec>
1010c378:	498cb03a 	or	r6,r9,r6
1010c37c:	300ac03a 	cmpne	r5,r6,zero
1010c380:	0013883a 	mov	r9,zero
1010c384:	2c4b883a 	add	r5,r5,r17
1010c388:	2c63803a 	cmpltu	r17,r5,r17
1010c38c:	4a11883a 	add	r8,r9,r8
1010c390:	8a11883a 	add	r8,r17,r8
1010c394:	2823883a 	mov	r17,r5
1010c398:	4080202c 	andhi	r2,r8,128
1010c39c:	103fe026 	beq	r2,zero,1010c320 <__alt_data_end+0xfffec320>
1010c3a0:	84000044 	addi	r16,r16,1
1010c3a4:	0081ffc4 	movi	r2,2047
1010c3a8:	8080d226 	beq	r16,r2,1010c6f4 <__adddf3+0x5d8>
1010c3ac:	00bfe034 	movhi	r2,65408
1010c3b0:	10bfffc4 	addi	r2,r2,-1
1010c3b4:	4090703a 	and	r8,r8,r2
1010c3b8:	880ad07a 	srli	r5,r17,1
1010c3bc:	400897fa 	slli	r4,r8,31
1010c3c0:	88c0004c 	andi	r3,r17,1
1010c3c4:	28e2b03a 	or	r17,r5,r3
1010c3c8:	4010d07a 	srli	r8,r8,1
1010c3cc:	2462b03a 	or	r17,r4,r17
1010c3d0:	003f7106 	br	1010c198 <__alt_data_end+0xfffec198>
1010c3d4:	4088b03a 	or	r4,r8,r2
1010c3d8:	20014526 	beq	r4,zero,1010c8f0 <__adddf3+0x7d4>
1010c3dc:	01000434 	movhi	r4,16
1010c3e0:	42000234 	orhi	r8,r8,8
1010c3e4:	213fffc4 	addi	r4,r4,-1
1010c3e8:	4110703a 	and	r8,r8,r4
1010c3ec:	003f8206 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c3f0:	18ffffc4 	addi	r3,r3,-1
1010c3f4:	1800491e 	bne	r3,zero,1010c51c <__adddf3+0x400>
1010c3f8:	898bc83a 	sub	r5,r17,r6
1010c3fc:	8963803a 	cmpltu	r17,r17,r5
1010c400:	4251c83a 	sub	r8,r8,r9
1010c404:	4451c83a 	sub	r8,r8,r17
1010c408:	2823883a 	mov	r17,r5
1010c40c:	003f9f06 	br	1010c28c <__alt_data_end+0xfffec28c>
1010c410:	4984b03a 	or	r2,r9,r6
1010c414:	103f6026 	beq	r2,zero,1010c198 <__alt_data_end+0xfffec198>
1010c418:	213fffc4 	addi	r4,r4,-1
1010c41c:	2000931e 	bne	r4,zero,1010c66c <__adddf3+0x550>
1010c420:	898d883a 	add	r6,r17,r6
1010c424:	3463803a 	cmpltu	r17,r6,r17
1010c428:	4251883a 	add	r8,r8,r9
1010c42c:	8a11883a 	add	r8,r17,r8
1010c430:	3023883a 	mov	r17,r6
1010c434:	003fd806 	br	1010c398 <__alt_data_end+0xfffec398>
1010c438:	1800541e 	bne	r3,zero,1010c58c <__adddf3+0x470>
1010c43c:	80800044 	addi	r2,r16,1
1010c440:	1081ffcc 	andi	r2,r2,2047
1010c444:	00c00044 	movi	r3,1
1010c448:	1880a00e 	bge	r3,r2,1010c6cc <__adddf3+0x5b0>
1010c44c:	8989c83a 	sub	r4,r17,r6
1010c450:	8905803a 	cmpltu	r2,r17,r4
1010c454:	4267c83a 	sub	r19,r8,r9
1010c458:	98a7c83a 	sub	r19,r19,r2
1010c45c:	9880202c 	andhi	r2,r19,128
1010c460:	10006326 	beq	r2,zero,1010c5f0 <__adddf3+0x4d4>
1010c464:	3463c83a 	sub	r17,r6,r17
1010c468:	4a07c83a 	sub	r3,r9,r8
1010c46c:	344d803a 	cmpltu	r6,r6,r17
1010c470:	19a7c83a 	sub	r19,r3,r6
1010c474:	3825883a 	mov	r18,r7
1010c478:	983f8a1e 	bne	r19,zero,1010c2a4 <__alt_data_end+0xfffec2a4>
1010c47c:	8809883a 	mov	r4,r17
1010c480:	010e7200 	call	1010e720 <__clzsi2>
1010c484:	10800804 	addi	r2,r2,32
1010c488:	10fffe04 	addi	r3,r2,-8
1010c48c:	010007c4 	movi	r4,31
1010c490:	20ff890e 	bge	r4,r3,1010c2b8 <__alt_data_end+0xfffec2b8>
1010c494:	10bff604 	addi	r2,r2,-40
1010c498:	8884983a 	sll	r2,r17,r2
1010c49c:	0023883a 	mov	r17,zero
1010c4a0:	1c3f8c0e 	bge	r3,r16,1010c2d4 <__alt_data_end+0xfffec2d4>
1010c4a4:	023fe034 	movhi	r8,65408
1010c4a8:	423fffc4 	addi	r8,r8,-1
1010c4ac:	80e1c83a 	sub	r16,r16,r3
1010c4b0:	1210703a 	and	r8,r2,r8
1010c4b4:	003f3806 	br	1010c198 <__alt_data_end+0xfffec198>
1010c4b8:	9007883a 	mov	r3,r18
1010c4bc:	0011883a 	mov	r8,zero
1010c4c0:	0005883a 	mov	r2,zero
1010c4c4:	003f4c06 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c4c8:	498cb03a 	or	r6,r9,r6
1010c4cc:	300cc03a 	cmpne	r6,r6,zero
1010c4d0:	0007883a 	mov	r3,zero
1010c4d4:	003f6806 	br	1010c278 <__alt_data_end+0xfffec278>
1010c4d8:	20009c1e 	bne	r4,zero,1010c74c <__adddf3+0x630>
1010c4dc:	80800044 	addi	r2,r16,1
1010c4e0:	1141ffcc 	andi	r5,r2,2047
1010c4e4:	01000044 	movi	r4,1
1010c4e8:	2140670e 	bge	r4,r5,1010c688 <__adddf3+0x56c>
1010c4ec:	0101ffc4 	movi	r4,2047
1010c4f0:	11007f26 	beq	r2,r4,1010c6f0 <__adddf3+0x5d4>
1010c4f4:	898d883a 	add	r6,r17,r6
1010c4f8:	4247883a 	add	r3,r8,r9
1010c4fc:	3451803a 	cmpltu	r8,r6,r17
1010c500:	40d1883a 	add	r8,r8,r3
1010c504:	402297fa 	slli	r17,r8,31
1010c508:	300cd07a 	srli	r6,r6,1
1010c50c:	4010d07a 	srli	r8,r8,1
1010c510:	1021883a 	mov	r16,r2
1010c514:	89a2b03a 	or	r17,r17,r6
1010c518:	003f1f06 	br	1010c198 <__alt_data_end+0xfffec198>
1010c51c:	0081ffc4 	movi	r2,2047
1010c520:	80bf481e 	bne	r16,r2,1010c244 <__alt_data_end+0xfffec244>
1010c524:	003f1c06 	br	1010c198 <__alt_data_end+0xfffec198>
1010c528:	843ff844 	addi	r16,r16,-31
1010c52c:	01000804 	movi	r4,32
1010c530:	1406d83a 	srl	r3,r2,r16
1010c534:	41005026 	beq	r8,r4,1010c678 <__adddf3+0x55c>
1010c538:	01001004 	movi	r4,64
1010c53c:	2211c83a 	sub	r8,r4,r8
1010c540:	1204983a 	sll	r2,r2,r8
1010c544:	88a2b03a 	or	r17,r17,r2
1010c548:	8822c03a 	cmpne	r17,r17,zero
1010c54c:	1c62b03a 	or	r17,r3,r17
1010c550:	0011883a 	mov	r8,zero
1010c554:	0021883a 	mov	r16,zero
1010c558:	003f7106 	br	1010c320 <__alt_data_end+0xfffec320>
1010c55c:	193ff804 	addi	r4,r3,-32
1010c560:	00800804 	movi	r2,32
1010c564:	4908d83a 	srl	r4,r9,r4
1010c568:	18804526 	beq	r3,r2,1010c680 <__adddf3+0x564>
1010c56c:	00801004 	movi	r2,64
1010c570:	10c5c83a 	sub	r2,r2,r3
1010c574:	4886983a 	sll	r3,r9,r2
1010c578:	198cb03a 	or	r6,r3,r6
1010c57c:	300cc03a 	cmpne	r6,r6,zero
1010c580:	218cb03a 	or	r6,r4,r6
1010c584:	0007883a 	mov	r3,zero
1010c588:	003f3b06 	br	1010c278 <__alt_data_end+0xfffec278>
1010c58c:	80002a26 	beq	r16,zero,1010c638 <__adddf3+0x51c>
1010c590:	0101ffc4 	movi	r4,2047
1010c594:	11006826 	beq	r2,r4,1010c738 <__adddf3+0x61c>
1010c598:	00c7c83a 	sub	r3,zero,r3
1010c59c:	42002034 	orhi	r8,r8,128
1010c5a0:	01000e04 	movi	r4,56
1010c5a4:	20c07c16 	blt	r4,r3,1010c798 <__adddf3+0x67c>
1010c5a8:	010007c4 	movi	r4,31
1010c5ac:	20c0da16 	blt	r4,r3,1010c918 <__adddf3+0x7fc>
1010c5b0:	01000804 	movi	r4,32
1010c5b4:	20c9c83a 	sub	r4,r4,r3
1010c5b8:	4114983a 	sll	r10,r8,r4
1010c5bc:	88cad83a 	srl	r5,r17,r3
1010c5c0:	8908983a 	sll	r4,r17,r4
1010c5c4:	40c6d83a 	srl	r3,r8,r3
1010c5c8:	5162b03a 	or	r17,r10,r5
1010c5cc:	2008c03a 	cmpne	r4,r4,zero
1010c5d0:	8922b03a 	or	r17,r17,r4
1010c5d4:	3463c83a 	sub	r17,r6,r17
1010c5d8:	48c7c83a 	sub	r3,r9,r3
1010c5dc:	344d803a 	cmpltu	r6,r6,r17
1010c5e0:	1991c83a 	sub	r8,r3,r6
1010c5e4:	1021883a 	mov	r16,r2
1010c5e8:	3825883a 	mov	r18,r7
1010c5ec:	003f2706 	br	1010c28c <__alt_data_end+0xfffec28c>
1010c5f0:	24d0b03a 	or	r8,r4,r19
1010c5f4:	40001b1e 	bne	r8,zero,1010c664 <__adddf3+0x548>
1010c5f8:	0005883a 	mov	r2,zero
1010c5fc:	0007883a 	mov	r3,zero
1010c600:	0021883a 	mov	r16,zero
1010c604:	003f4d06 	br	1010c33c <__alt_data_end+0xfffec33c>
1010c608:	008007c4 	movi	r2,31
1010c60c:	11003c16 	blt	r2,r4,1010c700 <__adddf3+0x5e4>
1010c610:	00800804 	movi	r2,32
1010c614:	1105c83a 	sub	r2,r2,r4
1010c618:	488e983a 	sll	r7,r9,r2
1010c61c:	310ad83a 	srl	r5,r6,r4
1010c620:	3084983a 	sll	r2,r6,r2
1010c624:	4912d83a 	srl	r9,r9,r4
1010c628:	394ab03a 	or	r5,r7,r5
1010c62c:	1004c03a 	cmpne	r2,r2,zero
1010c630:	288ab03a 	or	r5,r5,r2
1010c634:	003f5306 	br	1010c384 <__alt_data_end+0xfffec384>
1010c638:	4448b03a 	or	r4,r8,r17
1010c63c:	20003e26 	beq	r4,zero,1010c738 <__adddf3+0x61c>
1010c640:	00c6303a 	nor	r3,zero,r3
1010c644:	18003a1e 	bne	r3,zero,1010c730 <__adddf3+0x614>
1010c648:	3463c83a 	sub	r17,r6,r17
1010c64c:	4a07c83a 	sub	r3,r9,r8
1010c650:	344d803a 	cmpltu	r6,r6,r17
1010c654:	1991c83a 	sub	r8,r3,r6
1010c658:	1021883a 	mov	r16,r2
1010c65c:	3825883a 	mov	r18,r7
1010c660:	003f0a06 	br	1010c28c <__alt_data_end+0xfffec28c>
1010c664:	2023883a 	mov	r17,r4
1010c668:	003f0d06 	br	1010c2a0 <__alt_data_end+0xfffec2a0>
1010c66c:	0081ffc4 	movi	r2,2047
1010c670:	80bf3f1e 	bne	r16,r2,1010c370 <__alt_data_end+0xfffec370>
1010c674:	003ec806 	br	1010c198 <__alt_data_end+0xfffec198>
1010c678:	0005883a 	mov	r2,zero
1010c67c:	003fb106 	br	1010c544 <__alt_data_end+0xfffec544>
1010c680:	0007883a 	mov	r3,zero
1010c684:	003fbc06 	br	1010c578 <__alt_data_end+0xfffec578>
1010c688:	4444b03a 	or	r2,r8,r17
1010c68c:	8000871e 	bne	r16,zero,1010c8ac <__adddf3+0x790>
1010c690:	1000ba26 	beq	r2,zero,1010c97c <__adddf3+0x860>
1010c694:	4984b03a 	or	r2,r9,r6
1010c698:	103ebf26 	beq	r2,zero,1010c198 <__alt_data_end+0xfffec198>
1010c69c:	8985883a 	add	r2,r17,r6
1010c6a0:	4247883a 	add	r3,r8,r9
1010c6a4:	1451803a 	cmpltu	r8,r2,r17
1010c6a8:	40d1883a 	add	r8,r8,r3
1010c6ac:	40c0202c 	andhi	r3,r8,128
1010c6b0:	1023883a 	mov	r17,r2
1010c6b4:	183f1a26 	beq	r3,zero,1010c320 <__alt_data_end+0xfffec320>
1010c6b8:	00bfe034 	movhi	r2,65408
1010c6bc:	10bfffc4 	addi	r2,r2,-1
1010c6c0:	2021883a 	mov	r16,r4
1010c6c4:	4090703a 	and	r8,r8,r2
1010c6c8:	003eb306 	br	1010c198 <__alt_data_end+0xfffec198>
1010c6cc:	4444b03a 	or	r2,r8,r17
1010c6d0:	8000291e 	bne	r16,zero,1010c778 <__adddf3+0x65c>
1010c6d4:	10004b1e 	bne	r2,zero,1010c804 <__adddf3+0x6e8>
1010c6d8:	4990b03a 	or	r8,r9,r6
1010c6dc:	40008b26 	beq	r8,zero,1010c90c <__adddf3+0x7f0>
1010c6e0:	4811883a 	mov	r8,r9
1010c6e4:	3023883a 	mov	r17,r6
1010c6e8:	3825883a 	mov	r18,r7
1010c6ec:	003eaa06 	br	1010c198 <__alt_data_end+0xfffec198>
1010c6f0:	1021883a 	mov	r16,r2
1010c6f4:	0011883a 	mov	r8,zero
1010c6f8:	0005883a 	mov	r2,zero
1010c6fc:	003f0f06 	br	1010c33c <__alt_data_end+0xfffec33c>
1010c700:	217ff804 	addi	r5,r4,-32
1010c704:	00800804 	movi	r2,32
1010c708:	494ad83a 	srl	r5,r9,r5
1010c70c:	20807d26 	beq	r4,r2,1010c904 <__adddf3+0x7e8>
1010c710:	00801004 	movi	r2,64
1010c714:	1109c83a 	sub	r4,r2,r4
1010c718:	4912983a 	sll	r9,r9,r4
1010c71c:	498cb03a 	or	r6,r9,r6
1010c720:	300cc03a 	cmpne	r6,r6,zero
1010c724:	298ab03a 	or	r5,r5,r6
1010c728:	0013883a 	mov	r9,zero
1010c72c:	003f1506 	br	1010c384 <__alt_data_end+0xfffec384>
1010c730:	0101ffc4 	movi	r4,2047
1010c734:	113f9a1e 	bne	r2,r4,1010c5a0 <__alt_data_end+0xfffec5a0>
1010c738:	4811883a 	mov	r8,r9
1010c73c:	3023883a 	mov	r17,r6
1010c740:	1021883a 	mov	r16,r2
1010c744:	3825883a 	mov	r18,r7
1010c748:	003e9306 	br	1010c198 <__alt_data_end+0xfffec198>
1010c74c:	8000161e 	bne	r16,zero,1010c7a8 <__adddf3+0x68c>
1010c750:	444ab03a 	or	r5,r8,r17
1010c754:	28005126 	beq	r5,zero,1010c89c <__adddf3+0x780>
1010c758:	0108303a 	nor	r4,zero,r4
1010c75c:	20004d1e 	bne	r4,zero,1010c894 <__adddf3+0x778>
1010c760:	89a3883a 	add	r17,r17,r6
1010c764:	4253883a 	add	r9,r8,r9
1010c768:	898d803a 	cmpltu	r6,r17,r6
1010c76c:	3251883a 	add	r8,r6,r9
1010c770:	1021883a 	mov	r16,r2
1010c774:	003f0806 	br	1010c398 <__alt_data_end+0xfffec398>
1010c778:	1000301e 	bne	r2,zero,1010c83c <__adddf3+0x720>
1010c77c:	4984b03a 	or	r2,r9,r6
1010c780:	10007126 	beq	r2,zero,1010c948 <__adddf3+0x82c>
1010c784:	4811883a 	mov	r8,r9
1010c788:	3023883a 	mov	r17,r6
1010c78c:	3825883a 	mov	r18,r7
1010c790:	0401ffc4 	movi	r16,2047
1010c794:	003e8006 	br	1010c198 <__alt_data_end+0xfffec198>
1010c798:	4462b03a 	or	r17,r8,r17
1010c79c:	8822c03a 	cmpne	r17,r17,zero
1010c7a0:	0007883a 	mov	r3,zero
1010c7a4:	003f8b06 	br	1010c5d4 <__alt_data_end+0xfffec5d4>
1010c7a8:	0141ffc4 	movi	r5,2047
1010c7ac:	11403b26 	beq	r2,r5,1010c89c <__adddf3+0x780>
1010c7b0:	0109c83a 	sub	r4,zero,r4
1010c7b4:	42002034 	orhi	r8,r8,128
1010c7b8:	01400e04 	movi	r5,56
1010c7bc:	29006716 	blt	r5,r4,1010c95c <__adddf3+0x840>
1010c7c0:	014007c4 	movi	r5,31
1010c7c4:	29007016 	blt	r5,r4,1010c988 <__adddf3+0x86c>
1010c7c8:	01400804 	movi	r5,32
1010c7cc:	290bc83a 	sub	r5,r5,r4
1010c7d0:	4154983a 	sll	r10,r8,r5
1010c7d4:	890ed83a 	srl	r7,r17,r4
1010c7d8:	894a983a 	sll	r5,r17,r5
1010c7dc:	4108d83a 	srl	r4,r8,r4
1010c7e0:	51e2b03a 	or	r17,r10,r7
1010c7e4:	280ac03a 	cmpne	r5,r5,zero
1010c7e8:	8962b03a 	or	r17,r17,r5
1010c7ec:	89a3883a 	add	r17,r17,r6
1010c7f0:	2253883a 	add	r9,r4,r9
1010c7f4:	898d803a 	cmpltu	r6,r17,r6
1010c7f8:	3251883a 	add	r8,r6,r9
1010c7fc:	1021883a 	mov	r16,r2
1010c800:	003ee506 	br	1010c398 <__alt_data_end+0xfffec398>
1010c804:	4984b03a 	or	r2,r9,r6
1010c808:	103e6326 	beq	r2,zero,1010c198 <__alt_data_end+0xfffec198>
1010c80c:	8987c83a 	sub	r3,r17,r6
1010c810:	88c9803a 	cmpltu	r4,r17,r3
1010c814:	4245c83a 	sub	r2,r8,r9
1010c818:	1105c83a 	sub	r2,r2,r4
1010c81c:	1100202c 	andhi	r4,r2,128
1010c820:	203ebb26 	beq	r4,zero,1010c310 <__alt_data_end+0xfffec310>
1010c824:	3463c83a 	sub	r17,r6,r17
1010c828:	4a07c83a 	sub	r3,r9,r8
1010c82c:	344d803a 	cmpltu	r6,r6,r17
1010c830:	1991c83a 	sub	r8,r3,r6
1010c834:	3825883a 	mov	r18,r7
1010c838:	003e5706 	br	1010c198 <__alt_data_end+0xfffec198>
1010c83c:	4984b03a 	or	r2,r9,r6
1010c840:	10002e26 	beq	r2,zero,1010c8fc <__adddf3+0x7e0>
1010c844:	4004d0fa 	srli	r2,r8,3
1010c848:	8822d0fa 	srli	r17,r17,3
1010c84c:	4010977a 	slli	r8,r8,29
1010c850:	10c0022c 	andhi	r3,r2,8
1010c854:	4462b03a 	or	r17,r8,r17
1010c858:	18000826 	beq	r3,zero,1010c87c <__adddf3+0x760>
1010c85c:	4808d0fa 	srli	r4,r9,3
1010c860:	20c0022c 	andhi	r3,r4,8
1010c864:	1800051e 	bne	r3,zero,1010c87c <__adddf3+0x760>
1010c868:	300cd0fa 	srli	r6,r6,3
1010c86c:	4806977a 	slli	r3,r9,29
1010c870:	2005883a 	mov	r2,r4
1010c874:	3825883a 	mov	r18,r7
1010c878:	19a2b03a 	or	r17,r3,r6
1010c87c:	8810d77a 	srli	r8,r17,29
1010c880:	100490fa 	slli	r2,r2,3
1010c884:	882290fa 	slli	r17,r17,3
1010c888:	0401ffc4 	movi	r16,2047
1010c88c:	4090b03a 	or	r8,r8,r2
1010c890:	003e4106 	br	1010c198 <__alt_data_end+0xfffec198>
1010c894:	0141ffc4 	movi	r5,2047
1010c898:	117fc71e 	bne	r2,r5,1010c7b8 <__alt_data_end+0xfffec7b8>
1010c89c:	4811883a 	mov	r8,r9
1010c8a0:	3023883a 	mov	r17,r6
1010c8a4:	1021883a 	mov	r16,r2
1010c8a8:	003e3b06 	br	1010c198 <__alt_data_end+0xfffec198>
1010c8ac:	10002f26 	beq	r2,zero,1010c96c <__adddf3+0x850>
1010c8b0:	4984b03a 	or	r2,r9,r6
1010c8b4:	10001126 	beq	r2,zero,1010c8fc <__adddf3+0x7e0>
1010c8b8:	4004d0fa 	srli	r2,r8,3
1010c8bc:	8822d0fa 	srli	r17,r17,3
1010c8c0:	4010977a 	slli	r8,r8,29
1010c8c4:	10c0022c 	andhi	r3,r2,8
1010c8c8:	4462b03a 	or	r17,r8,r17
1010c8cc:	183feb26 	beq	r3,zero,1010c87c <__alt_data_end+0xfffec87c>
1010c8d0:	4808d0fa 	srli	r4,r9,3
1010c8d4:	20c0022c 	andhi	r3,r4,8
1010c8d8:	183fe81e 	bne	r3,zero,1010c87c <__alt_data_end+0xfffec87c>
1010c8dc:	300cd0fa 	srli	r6,r6,3
1010c8e0:	4806977a 	slli	r3,r9,29
1010c8e4:	2005883a 	mov	r2,r4
1010c8e8:	19a2b03a 	or	r17,r3,r6
1010c8ec:	003fe306 	br	1010c87c <__alt_data_end+0xfffec87c>
1010c8f0:	0011883a 	mov	r8,zero
1010c8f4:	0005883a 	mov	r2,zero
1010c8f8:	003e3f06 	br	1010c1f8 <__alt_data_end+0xfffec1f8>
1010c8fc:	0401ffc4 	movi	r16,2047
1010c900:	003e2506 	br	1010c198 <__alt_data_end+0xfffec198>
1010c904:	0013883a 	mov	r9,zero
1010c908:	003f8406 	br	1010c71c <__alt_data_end+0xfffec71c>
1010c90c:	0005883a 	mov	r2,zero
1010c910:	0007883a 	mov	r3,zero
1010c914:	003e8906 	br	1010c33c <__alt_data_end+0xfffec33c>
1010c918:	197ff804 	addi	r5,r3,-32
1010c91c:	01000804 	movi	r4,32
1010c920:	414ad83a 	srl	r5,r8,r5
1010c924:	19002426 	beq	r3,r4,1010c9b8 <__adddf3+0x89c>
1010c928:	01001004 	movi	r4,64
1010c92c:	20c7c83a 	sub	r3,r4,r3
1010c930:	40c6983a 	sll	r3,r8,r3
1010c934:	1c46b03a 	or	r3,r3,r17
1010c938:	1806c03a 	cmpne	r3,r3,zero
1010c93c:	28e2b03a 	or	r17,r5,r3
1010c940:	0007883a 	mov	r3,zero
1010c944:	003f2306 	br	1010c5d4 <__alt_data_end+0xfffec5d4>
1010c948:	0007883a 	mov	r3,zero
1010c94c:	5811883a 	mov	r8,r11
1010c950:	00bfffc4 	movi	r2,-1
1010c954:	0401ffc4 	movi	r16,2047
1010c958:	003e7806 	br	1010c33c <__alt_data_end+0xfffec33c>
1010c95c:	4462b03a 	or	r17,r8,r17
1010c960:	8822c03a 	cmpne	r17,r17,zero
1010c964:	0009883a 	mov	r4,zero
1010c968:	003fa006 	br	1010c7ec <__alt_data_end+0xfffec7ec>
1010c96c:	4811883a 	mov	r8,r9
1010c970:	3023883a 	mov	r17,r6
1010c974:	0401ffc4 	movi	r16,2047
1010c978:	003e0706 	br	1010c198 <__alt_data_end+0xfffec198>
1010c97c:	4811883a 	mov	r8,r9
1010c980:	3023883a 	mov	r17,r6
1010c984:	003e0406 	br	1010c198 <__alt_data_end+0xfffec198>
1010c988:	21fff804 	addi	r7,r4,-32
1010c98c:	01400804 	movi	r5,32
1010c990:	41ced83a 	srl	r7,r8,r7
1010c994:	21400a26 	beq	r4,r5,1010c9c0 <__adddf3+0x8a4>
1010c998:	01401004 	movi	r5,64
1010c99c:	2909c83a 	sub	r4,r5,r4
1010c9a0:	4108983a 	sll	r4,r8,r4
1010c9a4:	2448b03a 	or	r4,r4,r17
1010c9a8:	2008c03a 	cmpne	r4,r4,zero
1010c9ac:	3922b03a 	or	r17,r7,r4
1010c9b0:	0009883a 	mov	r4,zero
1010c9b4:	003f8d06 	br	1010c7ec <__alt_data_end+0xfffec7ec>
1010c9b8:	0007883a 	mov	r3,zero
1010c9bc:	003fdd06 	br	1010c934 <__alt_data_end+0xfffec934>
1010c9c0:	0009883a 	mov	r4,zero
1010c9c4:	003ff706 	br	1010c9a4 <__alt_data_end+0xfffec9a4>

1010c9c8 <__divdf3>:
1010c9c8:	defff204 	addi	sp,sp,-56
1010c9cc:	dd400915 	stw	r21,36(sp)
1010c9d0:	282ad53a 	srli	r21,r5,20
1010c9d4:	dd000815 	stw	r20,32(sp)
1010c9d8:	2828d7fa 	srli	r20,r5,31
1010c9dc:	dc000415 	stw	r16,16(sp)
1010c9e0:	04000434 	movhi	r16,16
1010c9e4:	df000c15 	stw	fp,48(sp)
1010c9e8:	843fffc4 	addi	r16,r16,-1
1010c9ec:	dfc00d15 	stw	ra,52(sp)
1010c9f0:	ddc00b15 	stw	r23,44(sp)
1010c9f4:	dd800a15 	stw	r22,40(sp)
1010c9f8:	dcc00715 	stw	r19,28(sp)
1010c9fc:	dc800615 	stw	r18,24(sp)
1010ca00:	dc400515 	stw	r17,20(sp)
1010ca04:	ad41ffcc 	andi	r21,r21,2047
1010ca08:	2c20703a 	and	r16,r5,r16
1010ca0c:	a7003fcc 	andi	fp,r20,255
1010ca10:	a8006126 	beq	r21,zero,1010cb98 <__divdf3+0x1d0>
1010ca14:	0081ffc4 	movi	r2,2047
1010ca18:	2025883a 	mov	r18,r4
1010ca1c:	a8803726 	beq	r21,r2,1010cafc <__divdf3+0x134>
1010ca20:	80c00434 	orhi	r3,r16,16
1010ca24:	180690fa 	slli	r3,r3,3
1010ca28:	2020d77a 	srli	r16,r4,29
1010ca2c:	202490fa 	slli	r18,r4,3
1010ca30:	ad7f0044 	addi	r21,r21,-1023
1010ca34:	80e0b03a 	or	r16,r16,r3
1010ca38:	0027883a 	mov	r19,zero
1010ca3c:	0013883a 	mov	r9,zero
1010ca40:	3808d53a 	srli	r4,r7,20
1010ca44:	382cd7fa 	srli	r22,r7,31
1010ca48:	04400434 	movhi	r17,16
1010ca4c:	8c7fffc4 	addi	r17,r17,-1
1010ca50:	2101ffcc 	andi	r4,r4,2047
1010ca54:	3011883a 	mov	r8,r6
1010ca58:	3c62703a 	and	r17,r7,r17
1010ca5c:	b5c03fcc 	andi	r23,r22,255
1010ca60:	20006c26 	beq	r4,zero,1010cc14 <__divdf3+0x24c>
1010ca64:	0081ffc4 	movi	r2,2047
1010ca68:	20806426 	beq	r4,r2,1010cbfc <__divdf3+0x234>
1010ca6c:	88c00434 	orhi	r3,r17,16
1010ca70:	180690fa 	slli	r3,r3,3
1010ca74:	3022d77a 	srli	r17,r6,29
1010ca78:	301090fa 	slli	r8,r6,3
1010ca7c:	213f0044 	addi	r4,r4,-1023
1010ca80:	88e2b03a 	or	r17,r17,r3
1010ca84:	000d883a 	mov	r6,zero
1010ca88:	a584f03a 	xor	r2,r20,r22
1010ca8c:	34cab03a 	or	r5,r6,r19
1010ca90:	1007883a 	mov	r3,r2
1010ca94:	14c03fcc 	andi	r19,r2,255
1010ca98:	008003c4 	movi	r2,15
1010ca9c:	a92bc83a 	sub	r21,r21,r4
1010caa0:	11409036 	bltu	r2,r5,1010cce4 <__divdf3+0x31c>
1010caa4:	280a90ba 	slli	r5,r5,2
1010caa8:	00840474 	movhi	r2,4113
1010caac:	10b2af04 	addi	r2,r2,-13636
1010cab0:	288b883a 	add	r5,r5,r2
1010cab4:	28800017 	ldw	r2,0(r5)
1010cab8:	1000683a 	jmp	r2
1010cabc:	1010cce4 	muli	zero,r2,17203
1010cac0:	1010cb34 	orhi	zero,r2,17196
1010cac4:	1010ccd4 	ori	zero,r2,17203
1010cac8:	1010cb28 	cmpgeui	zero,r2,17196
1010cacc:	1010ccd4 	ori	zero,r2,17203
1010cad0:	1010cca8 	cmpgeui	zero,r2,17202
1010cad4:	1010ccd4 	ori	zero,r2,17203
1010cad8:	1010cb28 	cmpgeui	zero,r2,17196
1010cadc:	1010cb34 	orhi	zero,r2,17196
1010cae0:	1010cb34 	orhi	zero,r2,17196
1010cae4:	1010cca8 	cmpgeui	zero,r2,17202
1010cae8:	1010cb28 	cmpgeui	zero,r2,17196
1010caec:	1010cb18 	cmpnei	zero,r2,17196
1010caf0:	1010cb18 	cmpnei	zero,r2,17196
1010caf4:	1010cb18 	cmpnei	zero,r2,17196
1010caf8:	1010cfc8 	cmpgei	zero,r2,17215
1010cafc:	2404b03a 	or	r2,r4,r16
1010cb00:	1000661e 	bne	r2,zero,1010cc9c <__divdf3+0x2d4>
1010cb04:	04c00204 	movi	r19,8
1010cb08:	0021883a 	mov	r16,zero
1010cb0c:	0025883a 	mov	r18,zero
1010cb10:	02400084 	movi	r9,2
1010cb14:	003fca06 	br	1010ca40 <__alt_data_end+0xfffeca40>
1010cb18:	8023883a 	mov	r17,r16
1010cb1c:	9011883a 	mov	r8,r18
1010cb20:	e02f883a 	mov	r23,fp
1010cb24:	480d883a 	mov	r6,r9
1010cb28:	00800084 	movi	r2,2
1010cb2c:	3081311e 	bne	r6,r2,1010cff4 <__divdf3+0x62c>
1010cb30:	b827883a 	mov	r19,r23
1010cb34:	98c0004c 	andi	r3,r19,1
1010cb38:	0081ffc4 	movi	r2,2047
1010cb3c:	000b883a 	mov	r5,zero
1010cb40:	0025883a 	mov	r18,zero
1010cb44:	1004953a 	slli	r2,r2,20
1010cb48:	18c03fcc 	andi	r3,r3,255
1010cb4c:	04400434 	movhi	r17,16
1010cb50:	8c7fffc4 	addi	r17,r17,-1
1010cb54:	180697fa 	slli	r3,r3,31
1010cb58:	2c4a703a 	and	r5,r5,r17
1010cb5c:	288ab03a 	or	r5,r5,r2
1010cb60:	28c6b03a 	or	r3,r5,r3
1010cb64:	9005883a 	mov	r2,r18
1010cb68:	dfc00d17 	ldw	ra,52(sp)
1010cb6c:	df000c17 	ldw	fp,48(sp)
1010cb70:	ddc00b17 	ldw	r23,44(sp)
1010cb74:	dd800a17 	ldw	r22,40(sp)
1010cb78:	dd400917 	ldw	r21,36(sp)
1010cb7c:	dd000817 	ldw	r20,32(sp)
1010cb80:	dcc00717 	ldw	r19,28(sp)
1010cb84:	dc800617 	ldw	r18,24(sp)
1010cb88:	dc400517 	ldw	r17,20(sp)
1010cb8c:	dc000417 	ldw	r16,16(sp)
1010cb90:	dec00e04 	addi	sp,sp,56
1010cb94:	f800283a 	ret
1010cb98:	2404b03a 	or	r2,r4,r16
1010cb9c:	2027883a 	mov	r19,r4
1010cba0:	10003926 	beq	r2,zero,1010cc88 <__divdf3+0x2c0>
1010cba4:	80012e26 	beq	r16,zero,1010d060 <__divdf3+0x698>
1010cba8:	8009883a 	mov	r4,r16
1010cbac:	d9800315 	stw	r6,12(sp)
1010cbb0:	d9c00215 	stw	r7,8(sp)
1010cbb4:	010e7200 	call	1010e720 <__clzsi2>
1010cbb8:	d9800317 	ldw	r6,12(sp)
1010cbbc:	d9c00217 	ldw	r7,8(sp)
1010cbc0:	10fffd44 	addi	r3,r2,-11
1010cbc4:	01000704 	movi	r4,28
1010cbc8:	20c12116 	blt	r4,r3,1010d050 <__divdf3+0x688>
1010cbcc:	01000744 	movi	r4,29
1010cbd0:	147ffe04 	addi	r17,r2,-8
1010cbd4:	20c9c83a 	sub	r4,r4,r3
1010cbd8:	8460983a 	sll	r16,r16,r17
1010cbdc:	9908d83a 	srl	r4,r19,r4
1010cbe0:	9c64983a 	sll	r18,r19,r17
1010cbe4:	2420b03a 	or	r16,r4,r16
1010cbe8:	057f0084 	movi	r21,-1022
1010cbec:	a8ebc83a 	sub	r21,r21,r3
1010cbf0:	0027883a 	mov	r19,zero
1010cbf4:	0013883a 	mov	r9,zero
1010cbf8:	003f9106 	br	1010ca40 <__alt_data_end+0xfffeca40>
1010cbfc:	3444b03a 	or	r2,r6,r17
1010cc00:	10001f1e 	bne	r2,zero,1010cc80 <__divdf3+0x2b8>
1010cc04:	0023883a 	mov	r17,zero
1010cc08:	0011883a 	mov	r8,zero
1010cc0c:	01800084 	movi	r6,2
1010cc10:	003f9d06 	br	1010ca88 <__alt_data_end+0xfffeca88>
1010cc14:	3444b03a 	or	r2,r6,r17
1010cc18:	10001526 	beq	r2,zero,1010cc70 <__divdf3+0x2a8>
1010cc1c:	88011b26 	beq	r17,zero,1010d08c <__divdf3+0x6c4>
1010cc20:	8809883a 	mov	r4,r17
1010cc24:	d9800315 	stw	r6,12(sp)
1010cc28:	da400115 	stw	r9,4(sp)
1010cc2c:	010e7200 	call	1010e720 <__clzsi2>
1010cc30:	d9800317 	ldw	r6,12(sp)
1010cc34:	da400117 	ldw	r9,4(sp)
1010cc38:	10fffd44 	addi	r3,r2,-11
1010cc3c:	01000704 	movi	r4,28
1010cc40:	20c10e16 	blt	r4,r3,1010d07c <__divdf3+0x6b4>
1010cc44:	01000744 	movi	r4,29
1010cc48:	123ffe04 	addi	r8,r2,-8
1010cc4c:	20c9c83a 	sub	r4,r4,r3
1010cc50:	8a22983a 	sll	r17,r17,r8
1010cc54:	3108d83a 	srl	r4,r6,r4
1010cc58:	3210983a 	sll	r8,r6,r8
1010cc5c:	2462b03a 	or	r17,r4,r17
1010cc60:	013f0084 	movi	r4,-1022
1010cc64:	20c9c83a 	sub	r4,r4,r3
1010cc68:	000d883a 	mov	r6,zero
1010cc6c:	003f8606 	br	1010ca88 <__alt_data_end+0xfffeca88>
1010cc70:	0023883a 	mov	r17,zero
1010cc74:	0011883a 	mov	r8,zero
1010cc78:	01800044 	movi	r6,1
1010cc7c:	003f8206 	br	1010ca88 <__alt_data_end+0xfffeca88>
1010cc80:	018000c4 	movi	r6,3
1010cc84:	003f8006 	br	1010ca88 <__alt_data_end+0xfffeca88>
1010cc88:	04c00104 	movi	r19,4
1010cc8c:	0021883a 	mov	r16,zero
1010cc90:	0025883a 	mov	r18,zero
1010cc94:	02400044 	movi	r9,1
1010cc98:	003f6906 	br	1010ca40 <__alt_data_end+0xfffeca40>
1010cc9c:	04c00304 	movi	r19,12
1010cca0:	024000c4 	movi	r9,3
1010cca4:	003f6606 	br	1010ca40 <__alt_data_end+0xfffeca40>
1010cca8:	01400434 	movhi	r5,16
1010ccac:	0007883a 	mov	r3,zero
1010ccb0:	297fffc4 	addi	r5,r5,-1
1010ccb4:	04bfffc4 	movi	r18,-1
1010ccb8:	0081ffc4 	movi	r2,2047
1010ccbc:	003fa106 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010ccc0:	00c00044 	movi	r3,1
1010ccc4:	1887c83a 	sub	r3,r3,r2
1010ccc8:	01000e04 	movi	r4,56
1010cccc:	20c1210e 	bge	r4,r3,1010d154 <__divdf3+0x78c>
1010ccd0:	98c0004c 	andi	r3,r19,1
1010ccd4:	0005883a 	mov	r2,zero
1010ccd8:	000b883a 	mov	r5,zero
1010ccdc:	0025883a 	mov	r18,zero
1010cce0:	003f9806 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010cce4:	8c00fd36 	bltu	r17,r16,1010d0dc <__divdf3+0x714>
1010cce8:	8440fb26 	beq	r16,r17,1010d0d8 <__divdf3+0x710>
1010ccec:	8007883a 	mov	r3,r16
1010ccf0:	ad7fffc4 	addi	r21,r21,-1
1010ccf4:	0021883a 	mov	r16,zero
1010ccf8:	400ad63a 	srli	r5,r8,24
1010ccfc:	8822923a 	slli	r17,r17,8
1010cd00:	1809883a 	mov	r4,r3
1010cd04:	402c923a 	slli	r22,r8,8
1010cd08:	8978b03a 	or	fp,r17,r5
1010cd0c:	e028d43a 	srli	r20,fp,16
1010cd10:	d8c00015 	stw	r3,0(sp)
1010cd14:	e5ffffcc 	andi	r23,fp,65535
1010cd18:	a00b883a 	mov	r5,r20
1010cd1c:	010175c0 	call	1010175c <__udivsi3>
1010cd20:	d8c00017 	ldw	r3,0(sp)
1010cd24:	a00b883a 	mov	r5,r20
1010cd28:	d8800315 	stw	r2,12(sp)
1010cd2c:	1809883a 	mov	r4,r3
1010cd30:	01017c00 	call	101017c0 <__umodsi3>
1010cd34:	d9800317 	ldw	r6,12(sp)
1010cd38:	1006943a 	slli	r3,r2,16
1010cd3c:	9004d43a 	srli	r2,r18,16
1010cd40:	b9a3383a 	mul	r17,r23,r6
1010cd44:	10c4b03a 	or	r2,r2,r3
1010cd48:	1440062e 	bgeu	r2,r17,1010cd64 <__divdf3+0x39c>
1010cd4c:	1705883a 	add	r2,r2,fp
1010cd50:	30ffffc4 	addi	r3,r6,-1
1010cd54:	1700ee36 	bltu	r2,fp,1010d110 <__divdf3+0x748>
1010cd58:	1440ed2e 	bgeu	r2,r17,1010d110 <__divdf3+0x748>
1010cd5c:	31bfff84 	addi	r6,r6,-2
1010cd60:	1705883a 	add	r2,r2,fp
1010cd64:	1463c83a 	sub	r17,r2,r17
1010cd68:	a00b883a 	mov	r5,r20
1010cd6c:	8809883a 	mov	r4,r17
1010cd70:	d9800315 	stw	r6,12(sp)
1010cd74:	010175c0 	call	1010175c <__udivsi3>
1010cd78:	a00b883a 	mov	r5,r20
1010cd7c:	8809883a 	mov	r4,r17
1010cd80:	d8800215 	stw	r2,8(sp)
1010cd84:	01017c00 	call	101017c0 <__umodsi3>
1010cd88:	d9c00217 	ldw	r7,8(sp)
1010cd8c:	1004943a 	slli	r2,r2,16
1010cd90:	94bfffcc 	andi	r18,r18,65535
1010cd94:	b9d1383a 	mul	r8,r23,r7
1010cd98:	90a4b03a 	or	r18,r18,r2
1010cd9c:	d9800317 	ldw	r6,12(sp)
1010cda0:	9200062e 	bgeu	r18,r8,1010cdbc <__divdf3+0x3f4>
1010cda4:	9725883a 	add	r18,r18,fp
1010cda8:	38bfffc4 	addi	r2,r7,-1
1010cdac:	9700d636 	bltu	r18,fp,1010d108 <__divdf3+0x740>
1010cdb0:	9200d52e 	bgeu	r18,r8,1010d108 <__divdf3+0x740>
1010cdb4:	39ffff84 	addi	r7,r7,-2
1010cdb8:	9725883a 	add	r18,r18,fp
1010cdbc:	3004943a 	slli	r2,r6,16
1010cdc0:	b012d43a 	srli	r9,r22,16
1010cdc4:	b1bfffcc 	andi	r6,r22,65535
1010cdc8:	11e2b03a 	or	r17,r2,r7
1010cdcc:	8806d43a 	srli	r3,r17,16
1010cdd0:	893fffcc 	andi	r4,r17,65535
1010cdd4:	218b383a 	mul	r5,r4,r6
1010cdd8:	30c5383a 	mul	r2,r6,r3
1010cddc:	2249383a 	mul	r4,r4,r9
1010cde0:	280ed43a 	srli	r7,r5,16
1010cde4:	9225c83a 	sub	r18,r18,r8
1010cde8:	2089883a 	add	r4,r4,r2
1010cdec:	3909883a 	add	r4,r7,r4
1010cdf0:	1a47383a 	mul	r3,r3,r9
1010cdf4:	2080022e 	bgeu	r4,r2,1010ce00 <__divdf3+0x438>
1010cdf8:	00800074 	movhi	r2,1
1010cdfc:	1887883a 	add	r3,r3,r2
1010ce00:	2004d43a 	srli	r2,r4,16
1010ce04:	2008943a 	slli	r4,r4,16
1010ce08:	297fffcc 	andi	r5,r5,65535
1010ce0c:	10c7883a 	add	r3,r2,r3
1010ce10:	2149883a 	add	r4,r4,r5
1010ce14:	90c0a536 	bltu	r18,r3,1010d0ac <__divdf3+0x6e4>
1010ce18:	90c0bf26 	beq	r18,r3,1010d118 <__divdf3+0x750>
1010ce1c:	90c7c83a 	sub	r3,r18,r3
1010ce20:	810fc83a 	sub	r7,r16,r4
1010ce24:	81e5803a 	cmpltu	r18,r16,r7
1010ce28:	1ca5c83a 	sub	r18,r3,r18
1010ce2c:	e480c126 	beq	fp,r18,1010d134 <__divdf3+0x76c>
1010ce30:	a00b883a 	mov	r5,r20
1010ce34:	9009883a 	mov	r4,r18
1010ce38:	d9800315 	stw	r6,12(sp)
1010ce3c:	d9c00215 	stw	r7,8(sp)
1010ce40:	da400115 	stw	r9,4(sp)
1010ce44:	010175c0 	call	1010175c <__udivsi3>
1010ce48:	a00b883a 	mov	r5,r20
1010ce4c:	9009883a 	mov	r4,r18
1010ce50:	d8800015 	stw	r2,0(sp)
1010ce54:	01017c00 	call	101017c0 <__umodsi3>
1010ce58:	d9c00217 	ldw	r7,8(sp)
1010ce5c:	da000017 	ldw	r8,0(sp)
1010ce60:	1006943a 	slli	r3,r2,16
1010ce64:	3804d43a 	srli	r2,r7,16
1010ce68:	ba21383a 	mul	r16,r23,r8
1010ce6c:	d9800317 	ldw	r6,12(sp)
1010ce70:	10c4b03a 	or	r2,r2,r3
1010ce74:	da400117 	ldw	r9,4(sp)
1010ce78:	1400062e 	bgeu	r2,r16,1010ce94 <__divdf3+0x4cc>
1010ce7c:	1705883a 	add	r2,r2,fp
1010ce80:	40ffffc4 	addi	r3,r8,-1
1010ce84:	1700ad36 	bltu	r2,fp,1010d13c <__divdf3+0x774>
1010ce88:	1400ac2e 	bgeu	r2,r16,1010d13c <__divdf3+0x774>
1010ce8c:	423fff84 	addi	r8,r8,-2
1010ce90:	1705883a 	add	r2,r2,fp
1010ce94:	1421c83a 	sub	r16,r2,r16
1010ce98:	a00b883a 	mov	r5,r20
1010ce9c:	8009883a 	mov	r4,r16
1010cea0:	d9800315 	stw	r6,12(sp)
1010cea4:	d9c00215 	stw	r7,8(sp)
1010cea8:	da000015 	stw	r8,0(sp)
1010ceac:	da400115 	stw	r9,4(sp)
1010ceb0:	010175c0 	call	1010175c <__udivsi3>
1010ceb4:	8009883a 	mov	r4,r16
1010ceb8:	a00b883a 	mov	r5,r20
1010cebc:	1025883a 	mov	r18,r2
1010cec0:	01017c00 	call	101017c0 <__umodsi3>
1010cec4:	d9c00217 	ldw	r7,8(sp)
1010cec8:	1004943a 	slli	r2,r2,16
1010cecc:	bcaf383a 	mul	r23,r23,r18
1010ced0:	393fffcc 	andi	r4,r7,65535
1010ced4:	2088b03a 	or	r4,r4,r2
1010ced8:	d9800317 	ldw	r6,12(sp)
1010cedc:	da000017 	ldw	r8,0(sp)
1010cee0:	da400117 	ldw	r9,4(sp)
1010cee4:	25c0062e 	bgeu	r4,r23,1010cf00 <__divdf3+0x538>
1010cee8:	2709883a 	add	r4,r4,fp
1010ceec:	90bfffc4 	addi	r2,r18,-1
1010cef0:	27009436 	bltu	r4,fp,1010d144 <__divdf3+0x77c>
1010cef4:	25c0932e 	bgeu	r4,r23,1010d144 <__divdf3+0x77c>
1010cef8:	94bfff84 	addi	r18,r18,-2
1010cefc:	2709883a 	add	r4,r4,fp
1010cf00:	4004943a 	slli	r2,r8,16
1010cf04:	25efc83a 	sub	r23,r4,r23
1010cf08:	1490b03a 	or	r8,r2,r18
1010cf0c:	4008d43a 	srli	r4,r8,16
1010cf10:	40ffffcc 	andi	r3,r8,65535
1010cf14:	30c5383a 	mul	r2,r6,r3
1010cf18:	1a47383a 	mul	r3,r3,r9
1010cf1c:	310d383a 	mul	r6,r6,r4
1010cf20:	100ad43a 	srli	r5,r2,16
1010cf24:	4913383a 	mul	r9,r9,r4
1010cf28:	1987883a 	add	r3,r3,r6
1010cf2c:	28c7883a 	add	r3,r5,r3
1010cf30:	1980022e 	bgeu	r3,r6,1010cf3c <__divdf3+0x574>
1010cf34:	01000074 	movhi	r4,1
1010cf38:	4913883a 	add	r9,r9,r4
1010cf3c:	1808d43a 	srli	r4,r3,16
1010cf40:	1806943a 	slli	r3,r3,16
1010cf44:	10bfffcc 	andi	r2,r2,65535
1010cf48:	2253883a 	add	r9,r4,r9
1010cf4c:	1887883a 	add	r3,r3,r2
1010cf50:	ba403836 	bltu	r23,r9,1010d034 <__divdf3+0x66c>
1010cf54:	ba403626 	beq	r23,r9,1010d030 <__divdf3+0x668>
1010cf58:	42000054 	ori	r8,r8,1
1010cf5c:	a880ffc4 	addi	r2,r21,1023
1010cf60:	00bf570e 	bge	zero,r2,1010ccc0 <__alt_data_end+0xfffeccc0>
1010cf64:	40c001cc 	andi	r3,r8,7
1010cf68:	18000726 	beq	r3,zero,1010cf88 <__divdf3+0x5c0>
1010cf6c:	40c003cc 	andi	r3,r8,15
1010cf70:	01000104 	movi	r4,4
1010cf74:	19000426 	beq	r3,r4,1010cf88 <__divdf3+0x5c0>
1010cf78:	4107883a 	add	r3,r8,r4
1010cf7c:	1a11803a 	cmpltu	r8,r3,r8
1010cf80:	8a23883a 	add	r17,r17,r8
1010cf84:	1811883a 	mov	r8,r3
1010cf88:	88c0402c 	andhi	r3,r17,256
1010cf8c:	18000426 	beq	r3,zero,1010cfa0 <__divdf3+0x5d8>
1010cf90:	00ffc034 	movhi	r3,65280
1010cf94:	18ffffc4 	addi	r3,r3,-1
1010cf98:	a8810004 	addi	r2,r21,1024
1010cf9c:	88e2703a 	and	r17,r17,r3
1010cfa0:	00c1ff84 	movi	r3,2046
1010cfa4:	18bee316 	blt	r3,r2,1010cb34 <__alt_data_end+0xfffecb34>
1010cfa8:	8824977a 	slli	r18,r17,29
1010cfac:	4010d0fa 	srli	r8,r8,3
1010cfb0:	8822927a 	slli	r17,r17,9
1010cfb4:	1081ffcc 	andi	r2,r2,2047
1010cfb8:	9224b03a 	or	r18,r18,r8
1010cfbc:	880ad33a 	srli	r5,r17,12
1010cfc0:	98c0004c 	andi	r3,r19,1
1010cfc4:	003edf06 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010cfc8:	8080022c 	andhi	r2,r16,8
1010cfcc:	10001226 	beq	r2,zero,1010d018 <__divdf3+0x650>
1010cfd0:	8880022c 	andhi	r2,r17,8
1010cfd4:	1000101e 	bne	r2,zero,1010d018 <__divdf3+0x650>
1010cfd8:	00800434 	movhi	r2,16
1010cfdc:	89400234 	orhi	r5,r17,8
1010cfe0:	10bfffc4 	addi	r2,r2,-1
1010cfe4:	b007883a 	mov	r3,r22
1010cfe8:	288a703a 	and	r5,r5,r2
1010cfec:	4025883a 	mov	r18,r8
1010cff0:	003f3106 	br	1010ccb8 <__alt_data_end+0xfffeccb8>
1010cff4:	008000c4 	movi	r2,3
1010cff8:	3080a626 	beq	r6,r2,1010d294 <__divdf3+0x8cc>
1010cffc:	00800044 	movi	r2,1
1010d000:	3080521e 	bne	r6,r2,1010d14c <__divdf3+0x784>
1010d004:	b807883a 	mov	r3,r23
1010d008:	0005883a 	mov	r2,zero
1010d00c:	000b883a 	mov	r5,zero
1010d010:	0025883a 	mov	r18,zero
1010d014:	003ecb06 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010d018:	00800434 	movhi	r2,16
1010d01c:	81400234 	orhi	r5,r16,8
1010d020:	10bfffc4 	addi	r2,r2,-1
1010d024:	a007883a 	mov	r3,r20
1010d028:	288a703a 	and	r5,r5,r2
1010d02c:	003f2206 	br	1010ccb8 <__alt_data_end+0xfffeccb8>
1010d030:	183fca26 	beq	r3,zero,1010cf5c <__alt_data_end+0xfffecf5c>
1010d034:	e5ef883a 	add	r23,fp,r23
1010d038:	40bfffc4 	addi	r2,r8,-1
1010d03c:	bf00392e 	bgeu	r23,fp,1010d124 <__divdf3+0x75c>
1010d040:	1011883a 	mov	r8,r2
1010d044:	ba7fc41e 	bne	r23,r9,1010cf58 <__alt_data_end+0xfffecf58>
1010d048:	b0ffc31e 	bne	r22,r3,1010cf58 <__alt_data_end+0xfffecf58>
1010d04c:	003fc306 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d050:	10bff604 	addi	r2,r2,-40
1010d054:	98a0983a 	sll	r16,r19,r2
1010d058:	0025883a 	mov	r18,zero
1010d05c:	003ee206 	br	1010cbe8 <__alt_data_end+0xfffecbe8>
1010d060:	d9800315 	stw	r6,12(sp)
1010d064:	d9c00215 	stw	r7,8(sp)
1010d068:	010e7200 	call	1010e720 <__clzsi2>
1010d06c:	10800804 	addi	r2,r2,32
1010d070:	d9c00217 	ldw	r7,8(sp)
1010d074:	d9800317 	ldw	r6,12(sp)
1010d078:	003ed106 	br	1010cbc0 <__alt_data_end+0xfffecbc0>
1010d07c:	10bff604 	addi	r2,r2,-40
1010d080:	30a2983a 	sll	r17,r6,r2
1010d084:	0011883a 	mov	r8,zero
1010d088:	003ef506 	br	1010cc60 <__alt_data_end+0xfffecc60>
1010d08c:	3009883a 	mov	r4,r6
1010d090:	d9800315 	stw	r6,12(sp)
1010d094:	da400115 	stw	r9,4(sp)
1010d098:	010e7200 	call	1010e720 <__clzsi2>
1010d09c:	10800804 	addi	r2,r2,32
1010d0a0:	da400117 	ldw	r9,4(sp)
1010d0a4:	d9800317 	ldw	r6,12(sp)
1010d0a8:	003ee306 	br	1010cc38 <__alt_data_end+0xfffecc38>
1010d0ac:	85a1883a 	add	r16,r16,r22
1010d0b0:	8585803a 	cmpltu	r2,r16,r22
1010d0b4:	1705883a 	add	r2,r2,fp
1010d0b8:	14a5883a 	add	r18,r2,r18
1010d0bc:	88bfffc4 	addi	r2,r17,-1
1010d0c0:	e4800c2e 	bgeu	fp,r18,1010d0f4 <__divdf3+0x72c>
1010d0c4:	90c03e36 	bltu	r18,r3,1010d1c0 <__divdf3+0x7f8>
1010d0c8:	1c806926 	beq	r3,r18,1010d270 <__divdf3+0x8a8>
1010d0cc:	90c7c83a 	sub	r3,r18,r3
1010d0d0:	1023883a 	mov	r17,r2
1010d0d4:	003f5206 	br	1010ce20 <__alt_data_end+0xfffece20>
1010d0d8:	923f0436 	bltu	r18,r8,1010ccec <__alt_data_end+0xfffeccec>
1010d0dc:	800897fa 	slli	r4,r16,31
1010d0e0:	9004d07a 	srli	r2,r18,1
1010d0e4:	8006d07a 	srli	r3,r16,1
1010d0e8:	902097fa 	slli	r16,r18,31
1010d0ec:	20a4b03a 	or	r18,r4,r2
1010d0f0:	003f0106 	br	1010ccf8 <__alt_data_end+0xfffeccf8>
1010d0f4:	e4bff51e 	bne	fp,r18,1010d0cc <__alt_data_end+0xfffed0cc>
1010d0f8:	85bff22e 	bgeu	r16,r22,1010d0c4 <__alt_data_end+0xfffed0c4>
1010d0fc:	e0c7c83a 	sub	r3,fp,r3
1010d100:	1023883a 	mov	r17,r2
1010d104:	003f4606 	br	1010ce20 <__alt_data_end+0xfffece20>
1010d108:	100f883a 	mov	r7,r2
1010d10c:	003f2b06 	br	1010cdbc <__alt_data_end+0xfffecdbc>
1010d110:	180d883a 	mov	r6,r3
1010d114:	003f1306 	br	1010cd64 <__alt_data_end+0xfffecd64>
1010d118:	813fe436 	bltu	r16,r4,1010d0ac <__alt_data_end+0xfffed0ac>
1010d11c:	0007883a 	mov	r3,zero
1010d120:	003f3f06 	br	1010ce20 <__alt_data_end+0xfffece20>
1010d124:	ba402c36 	bltu	r23,r9,1010d1d8 <__divdf3+0x810>
1010d128:	4dc05426 	beq	r9,r23,1010d27c <__divdf3+0x8b4>
1010d12c:	1011883a 	mov	r8,r2
1010d130:	003f8906 	br	1010cf58 <__alt_data_end+0xfffecf58>
1010d134:	023fffc4 	movi	r8,-1
1010d138:	003f8806 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d13c:	1811883a 	mov	r8,r3
1010d140:	003f5406 	br	1010ce94 <__alt_data_end+0xfffece94>
1010d144:	1025883a 	mov	r18,r2
1010d148:	003f6d06 	br	1010cf00 <__alt_data_end+0xfffecf00>
1010d14c:	b827883a 	mov	r19,r23
1010d150:	003f8206 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d154:	010007c4 	movi	r4,31
1010d158:	20c02616 	blt	r4,r3,1010d1f4 <__divdf3+0x82c>
1010d15c:	00800804 	movi	r2,32
1010d160:	10c5c83a 	sub	r2,r2,r3
1010d164:	888a983a 	sll	r5,r17,r2
1010d168:	40c8d83a 	srl	r4,r8,r3
1010d16c:	4084983a 	sll	r2,r8,r2
1010d170:	88e2d83a 	srl	r17,r17,r3
1010d174:	2906b03a 	or	r3,r5,r4
1010d178:	1004c03a 	cmpne	r2,r2,zero
1010d17c:	1886b03a 	or	r3,r3,r2
1010d180:	188001cc 	andi	r2,r3,7
1010d184:	10000726 	beq	r2,zero,1010d1a4 <__divdf3+0x7dc>
1010d188:	188003cc 	andi	r2,r3,15
1010d18c:	01000104 	movi	r4,4
1010d190:	11000426 	beq	r2,r4,1010d1a4 <__divdf3+0x7dc>
1010d194:	1805883a 	mov	r2,r3
1010d198:	10c00104 	addi	r3,r2,4
1010d19c:	1885803a 	cmpltu	r2,r3,r2
1010d1a0:	88a3883a 	add	r17,r17,r2
1010d1a4:	8880202c 	andhi	r2,r17,128
1010d1a8:	10002726 	beq	r2,zero,1010d248 <__divdf3+0x880>
1010d1ac:	98c0004c 	andi	r3,r19,1
1010d1b0:	00800044 	movi	r2,1
1010d1b4:	000b883a 	mov	r5,zero
1010d1b8:	0025883a 	mov	r18,zero
1010d1bc:	003e6106 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010d1c0:	85a1883a 	add	r16,r16,r22
1010d1c4:	8585803a 	cmpltu	r2,r16,r22
1010d1c8:	1705883a 	add	r2,r2,fp
1010d1cc:	14a5883a 	add	r18,r2,r18
1010d1d0:	8c7fff84 	addi	r17,r17,-2
1010d1d4:	003f1106 	br	1010ce1c <__alt_data_end+0xfffece1c>
1010d1d8:	b589883a 	add	r4,r22,r22
1010d1dc:	25ad803a 	cmpltu	r22,r4,r22
1010d1e0:	b739883a 	add	fp,r22,fp
1010d1e4:	40bfff84 	addi	r2,r8,-2
1010d1e8:	bf2f883a 	add	r23,r23,fp
1010d1ec:	202d883a 	mov	r22,r4
1010d1f0:	003f9306 	br	1010d040 <__alt_data_end+0xfffed040>
1010d1f4:	013ff844 	movi	r4,-31
1010d1f8:	2085c83a 	sub	r2,r4,r2
1010d1fc:	8888d83a 	srl	r4,r17,r2
1010d200:	00800804 	movi	r2,32
1010d204:	18802126 	beq	r3,r2,1010d28c <__divdf3+0x8c4>
1010d208:	00801004 	movi	r2,64
1010d20c:	10c5c83a 	sub	r2,r2,r3
1010d210:	8884983a 	sll	r2,r17,r2
1010d214:	1204b03a 	or	r2,r2,r8
1010d218:	1004c03a 	cmpne	r2,r2,zero
1010d21c:	2084b03a 	or	r2,r4,r2
1010d220:	144001cc 	andi	r17,r2,7
1010d224:	88000d1e 	bne	r17,zero,1010d25c <__divdf3+0x894>
1010d228:	000b883a 	mov	r5,zero
1010d22c:	1024d0fa 	srli	r18,r2,3
1010d230:	98c0004c 	andi	r3,r19,1
1010d234:	0005883a 	mov	r2,zero
1010d238:	9464b03a 	or	r18,r18,r17
1010d23c:	003e4106 	br	1010cb44 <__alt_data_end+0xfffecb44>
1010d240:	1007883a 	mov	r3,r2
1010d244:	0023883a 	mov	r17,zero
1010d248:	880a927a 	slli	r5,r17,9
1010d24c:	1805883a 	mov	r2,r3
1010d250:	8822977a 	slli	r17,r17,29
1010d254:	280ad33a 	srli	r5,r5,12
1010d258:	003ff406 	br	1010d22c <__alt_data_end+0xfffed22c>
1010d25c:	10c003cc 	andi	r3,r2,15
1010d260:	01000104 	movi	r4,4
1010d264:	193ff626 	beq	r3,r4,1010d240 <__alt_data_end+0xfffed240>
1010d268:	0023883a 	mov	r17,zero
1010d26c:	003fca06 	br	1010d198 <__alt_data_end+0xfffed198>
1010d270:	813fd336 	bltu	r16,r4,1010d1c0 <__alt_data_end+0xfffed1c0>
1010d274:	1023883a 	mov	r17,r2
1010d278:	003fa806 	br	1010d11c <__alt_data_end+0xfffed11c>
1010d27c:	b0ffd636 	bltu	r22,r3,1010d1d8 <__alt_data_end+0xfffed1d8>
1010d280:	1011883a 	mov	r8,r2
1010d284:	b0ff341e 	bne	r22,r3,1010cf58 <__alt_data_end+0xfffecf58>
1010d288:	003f3406 	br	1010cf5c <__alt_data_end+0xfffecf5c>
1010d28c:	0005883a 	mov	r2,zero
1010d290:	003fe006 	br	1010d214 <__alt_data_end+0xfffed214>
1010d294:	00800434 	movhi	r2,16
1010d298:	89400234 	orhi	r5,r17,8
1010d29c:	10bfffc4 	addi	r2,r2,-1
1010d2a0:	b807883a 	mov	r3,r23
1010d2a4:	288a703a 	and	r5,r5,r2
1010d2a8:	4025883a 	mov	r18,r8
1010d2ac:	003e8206 	br	1010ccb8 <__alt_data_end+0xfffeccb8>

1010d2b0 <__eqdf2>:
1010d2b0:	2804d53a 	srli	r2,r5,20
1010d2b4:	3806d53a 	srli	r3,r7,20
1010d2b8:	02000434 	movhi	r8,16
1010d2bc:	423fffc4 	addi	r8,r8,-1
1010d2c0:	1081ffcc 	andi	r2,r2,2047
1010d2c4:	0281ffc4 	movi	r10,2047
1010d2c8:	2a12703a 	and	r9,r5,r8
1010d2cc:	18c1ffcc 	andi	r3,r3,2047
1010d2d0:	3a10703a 	and	r8,r7,r8
1010d2d4:	280ad7fa 	srli	r5,r5,31
1010d2d8:	380ed7fa 	srli	r7,r7,31
1010d2dc:	12801026 	beq	r2,r10,1010d320 <__eqdf2+0x70>
1010d2e0:	0281ffc4 	movi	r10,2047
1010d2e4:	1a800a26 	beq	r3,r10,1010d310 <__eqdf2+0x60>
1010d2e8:	10c00226 	beq	r2,r3,1010d2f4 <__eqdf2+0x44>
1010d2ec:	00800044 	movi	r2,1
1010d2f0:	f800283a 	ret
1010d2f4:	4a3ffd1e 	bne	r9,r8,1010d2ec <__alt_data_end+0xfffed2ec>
1010d2f8:	21bffc1e 	bne	r4,r6,1010d2ec <__alt_data_end+0xfffed2ec>
1010d2fc:	29c00c26 	beq	r5,r7,1010d330 <__eqdf2+0x80>
1010d300:	103ffa1e 	bne	r2,zero,1010d2ec <__alt_data_end+0xfffed2ec>
1010d304:	2244b03a 	or	r2,r4,r9
1010d308:	1004c03a 	cmpne	r2,r2,zero
1010d30c:	f800283a 	ret
1010d310:	3214b03a 	or	r10,r6,r8
1010d314:	503ff426 	beq	r10,zero,1010d2e8 <__alt_data_end+0xfffed2e8>
1010d318:	00800044 	movi	r2,1
1010d31c:	f800283a 	ret
1010d320:	2254b03a 	or	r10,r4,r9
1010d324:	503fee26 	beq	r10,zero,1010d2e0 <__alt_data_end+0xfffed2e0>
1010d328:	00800044 	movi	r2,1
1010d32c:	f800283a 	ret
1010d330:	0005883a 	mov	r2,zero
1010d334:	f800283a 	ret

1010d338 <__gedf2>:
1010d338:	2804d53a 	srli	r2,r5,20
1010d33c:	3806d53a 	srli	r3,r7,20
1010d340:	02000434 	movhi	r8,16
1010d344:	423fffc4 	addi	r8,r8,-1
1010d348:	1081ffcc 	andi	r2,r2,2047
1010d34c:	0241ffc4 	movi	r9,2047
1010d350:	2a14703a 	and	r10,r5,r8
1010d354:	18c1ffcc 	andi	r3,r3,2047
1010d358:	3a10703a 	and	r8,r7,r8
1010d35c:	280ad7fa 	srli	r5,r5,31
1010d360:	380ed7fa 	srli	r7,r7,31
1010d364:	12401d26 	beq	r2,r9,1010d3dc <__gedf2+0xa4>
1010d368:	0241ffc4 	movi	r9,2047
1010d36c:	1a401226 	beq	r3,r9,1010d3b8 <__gedf2+0x80>
1010d370:	1000081e 	bne	r2,zero,1010d394 <__gedf2+0x5c>
1010d374:	2296b03a 	or	r11,r4,r10
1010d378:	5813003a 	cmpeq	r9,r11,zero
1010d37c:	1800091e 	bne	r3,zero,1010d3a4 <__gedf2+0x6c>
1010d380:	3218b03a 	or	r12,r6,r8
1010d384:	6000071e 	bne	r12,zero,1010d3a4 <__gedf2+0x6c>
1010d388:	0005883a 	mov	r2,zero
1010d38c:	5800101e 	bne	r11,zero,1010d3d0 <__gedf2+0x98>
1010d390:	f800283a 	ret
1010d394:	18000c1e 	bne	r3,zero,1010d3c8 <__gedf2+0x90>
1010d398:	3212b03a 	or	r9,r6,r8
1010d39c:	48000c26 	beq	r9,zero,1010d3d0 <__gedf2+0x98>
1010d3a0:	0013883a 	mov	r9,zero
1010d3a4:	39c03fcc 	andi	r7,r7,255
1010d3a8:	48000826 	beq	r9,zero,1010d3cc <__gedf2+0x94>
1010d3ac:	38000926 	beq	r7,zero,1010d3d4 <__gedf2+0x9c>
1010d3b0:	00800044 	movi	r2,1
1010d3b4:	f800283a 	ret
1010d3b8:	3212b03a 	or	r9,r6,r8
1010d3bc:	483fec26 	beq	r9,zero,1010d370 <__alt_data_end+0xfffed370>
1010d3c0:	00bfff84 	movi	r2,-2
1010d3c4:	f800283a 	ret
1010d3c8:	39c03fcc 	andi	r7,r7,255
1010d3cc:	29c00626 	beq	r5,r7,1010d3e8 <__gedf2+0xb0>
1010d3d0:	283ff726 	beq	r5,zero,1010d3b0 <__alt_data_end+0xfffed3b0>
1010d3d4:	00bfffc4 	movi	r2,-1
1010d3d8:	f800283a 	ret
1010d3dc:	2292b03a 	or	r9,r4,r10
1010d3e0:	483fe126 	beq	r9,zero,1010d368 <__alt_data_end+0xfffed368>
1010d3e4:	003ff606 	br	1010d3c0 <__alt_data_end+0xfffed3c0>
1010d3e8:	18bff916 	blt	r3,r2,1010d3d0 <__alt_data_end+0xfffed3d0>
1010d3ec:	10c00316 	blt	r2,r3,1010d3fc <__gedf2+0xc4>
1010d3f0:	42bff736 	bltu	r8,r10,1010d3d0 <__alt_data_end+0xfffed3d0>
1010d3f4:	52000326 	beq	r10,r8,1010d404 <__gedf2+0xcc>
1010d3f8:	5200042e 	bgeu	r10,r8,1010d40c <__gedf2+0xd4>
1010d3fc:	283fec1e 	bne	r5,zero,1010d3b0 <__alt_data_end+0xfffed3b0>
1010d400:	003ff406 	br	1010d3d4 <__alt_data_end+0xfffed3d4>
1010d404:	313ff236 	bltu	r6,r4,1010d3d0 <__alt_data_end+0xfffed3d0>
1010d408:	21bffc36 	bltu	r4,r6,1010d3fc <__alt_data_end+0xfffed3fc>
1010d40c:	0005883a 	mov	r2,zero
1010d410:	f800283a 	ret

1010d414 <__ledf2>:
1010d414:	2804d53a 	srli	r2,r5,20
1010d418:	3810d53a 	srli	r8,r7,20
1010d41c:	00c00434 	movhi	r3,16
1010d420:	18ffffc4 	addi	r3,r3,-1
1010d424:	1081ffcc 	andi	r2,r2,2047
1010d428:	0241ffc4 	movi	r9,2047
1010d42c:	28d4703a 	and	r10,r5,r3
1010d430:	4201ffcc 	andi	r8,r8,2047
1010d434:	38c6703a 	and	r3,r7,r3
1010d438:	280ad7fa 	srli	r5,r5,31
1010d43c:	380ed7fa 	srli	r7,r7,31
1010d440:	12401f26 	beq	r2,r9,1010d4c0 <__ledf2+0xac>
1010d444:	0241ffc4 	movi	r9,2047
1010d448:	42401426 	beq	r8,r9,1010d49c <__ledf2+0x88>
1010d44c:	1000091e 	bne	r2,zero,1010d474 <__ledf2+0x60>
1010d450:	2296b03a 	or	r11,r4,r10
1010d454:	5813003a 	cmpeq	r9,r11,zero
1010d458:	29403fcc 	andi	r5,r5,255
1010d45c:	40000a1e 	bne	r8,zero,1010d488 <__ledf2+0x74>
1010d460:	30d8b03a 	or	r12,r6,r3
1010d464:	6000081e 	bne	r12,zero,1010d488 <__ledf2+0x74>
1010d468:	0005883a 	mov	r2,zero
1010d46c:	5800111e 	bne	r11,zero,1010d4b4 <__ledf2+0xa0>
1010d470:	f800283a 	ret
1010d474:	29403fcc 	andi	r5,r5,255
1010d478:	40000c1e 	bne	r8,zero,1010d4ac <__ledf2+0x98>
1010d47c:	30d2b03a 	or	r9,r6,r3
1010d480:	48000c26 	beq	r9,zero,1010d4b4 <__ledf2+0xa0>
1010d484:	0013883a 	mov	r9,zero
1010d488:	39c03fcc 	andi	r7,r7,255
1010d48c:	48000826 	beq	r9,zero,1010d4b0 <__ledf2+0x9c>
1010d490:	38001126 	beq	r7,zero,1010d4d8 <__ledf2+0xc4>
1010d494:	00800044 	movi	r2,1
1010d498:	f800283a 	ret
1010d49c:	30d2b03a 	or	r9,r6,r3
1010d4a0:	483fea26 	beq	r9,zero,1010d44c <__alt_data_end+0xfffed44c>
1010d4a4:	00800084 	movi	r2,2
1010d4a8:	f800283a 	ret
1010d4ac:	39c03fcc 	andi	r7,r7,255
1010d4b0:	39400726 	beq	r7,r5,1010d4d0 <__ledf2+0xbc>
1010d4b4:	2800081e 	bne	r5,zero,1010d4d8 <__ledf2+0xc4>
1010d4b8:	00800044 	movi	r2,1
1010d4bc:	f800283a 	ret
1010d4c0:	2292b03a 	or	r9,r4,r10
1010d4c4:	483fdf26 	beq	r9,zero,1010d444 <__alt_data_end+0xfffed444>
1010d4c8:	00800084 	movi	r2,2
1010d4cc:	f800283a 	ret
1010d4d0:	4080030e 	bge	r8,r2,1010d4e0 <__ledf2+0xcc>
1010d4d4:	383fef26 	beq	r7,zero,1010d494 <__alt_data_end+0xfffed494>
1010d4d8:	00bfffc4 	movi	r2,-1
1010d4dc:	f800283a 	ret
1010d4e0:	123feb16 	blt	r2,r8,1010d490 <__alt_data_end+0xfffed490>
1010d4e4:	1abff336 	bltu	r3,r10,1010d4b4 <__alt_data_end+0xfffed4b4>
1010d4e8:	50c00326 	beq	r10,r3,1010d4f8 <__ledf2+0xe4>
1010d4ec:	50c0042e 	bgeu	r10,r3,1010d500 <__ledf2+0xec>
1010d4f0:	283fe81e 	bne	r5,zero,1010d494 <__alt_data_end+0xfffed494>
1010d4f4:	003ff806 	br	1010d4d8 <__alt_data_end+0xfffed4d8>
1010d4f8:	313fee36 	bltu	r6,r4,1010d4b4 <__alt_data_end+0xfffed4b4>
1010d4fc:	21bffc36 	bltu	r4,r6,1010d4f0 <__alt_data_end+0xfffed4f0>
1010d500:	0005883a 	mov	r2,zero
1010d504:	f800283a 	ret

1010d508 <__muldf3>:
1010d508:	defff304 	addi	sp,sp,-52
1010d50c:	dd400815 	stw	r21,32(sp)
1010d510:	282ad53a 	srli	r21,r5,20
1010d514:	dd800915 	stw	r22,36(sp)
1010d518:	282cd7fa 	srli	r22,r5,31
1010d51c:	dc000315 	stw	r16,12(sp)
1010d520:	04000434 	movhi	r16,16
1010d524:	dd000715 	stw	r20,28(sp)
1010d528:	843fffc4 	addi	r16,r16,-1
1010d52c:	dfc00c15 	stw	ra,48(sp)
1010d530:	df000b15 	stw	fp,44(sp)
1010d534:	ddc00a15 	stw	r23,40(sp)
1010d538:	dcc00615 	stw	r19,24(sp)
1010d53c:	dc800515 	stw	r18,20(sp)
1010d540:	dc400415 	stw	r17,16(sp)
1010d544:	ad41ffcc 	andi	r21,r21,2047
1010d548:	2c20703a 	and	r16,r5,r16
1010d54c:	b029883a 	mov	r20,r22
1010d550:	b2403fcc 	andi	r9,r22,255
1010d554:	a8006026 	beq	r21,zero,1010d6d8 <__muldf3+0x1d0>
1010d558:	0081ffc4 	movi	r2,2047
1010d55c:	2027883a 	mov	r19,r4
1010d560:	a8803626 	beq	r21,r2,1010d63c <__muldf3+0x134>
1010d564:	80c00434 	orhi	r3,r16,16
1010d568:	180690fa 	slli	r3,r3,3
1010d56c:	2020d77a 	srli	r16,r4,29
1010d570:	202690fa 	slli	r19,r4,3
1010d574:	ad7f0044 	addi	r21,r21,-1023
1010d578:	80e0b03a 	or	r16,r16,r3
1010d57c:	0025883a 	mov	r18,zero
1010d580:	0039883a 	mov	fp,zero
1010d584:	3808d53a 	srli	r4,r7,20
1010d588:	382ed7fa 	srli	r23,r7,31
1010d58c:	04400434 	movhi	r17,16
1010d590:	8c7fffc4 	addi	r17,r17,-1
1010d594:	2101ffcc 	andi	r4,r4,2047
1010d598:	3011883a 	mov	r8,r6
1010d59c:	3c62703a 	and	r17,r7,r17
1010d5a0:	ba803fcc 	andi	r10,r23,255
1010d5a4:	20006d26 	beq	r4,zero,1010d75c <__muldf3+0x254>
1010d5a8:	0081ffc4 	movi	r2,2047
1010d5ac:	20806526 	beq	r4,r2,1010d744 <__muldf3+0x23c>
1010d5b0:	88c00434 	orhi	r3,r17,16
1010d5b4:	180690fa 	slli	r3,r3,3
1010d5b8:	3022d77a 	srli	r17,r6,29
1010d5bc:	301090fa 	slli	r8,r6,3
1010d5c0:	213f0044 	addi	r4,r4,-1023
1010d5c4:	88e2b03a 	or	r17,r17,r3
1010d5c8:	000b883a 	mov	r5,zero
1010d5cc:	a909883a 	add	r4,r21,r4
1010d5d0:	2c84b03a 	or	r2,r5,r18
1010d5d4:	00c003c4 	movi	r3,15
1010d5d8:	bdacf03a 	xor	r22,r23,r22
1010d5dc:	22c00044 	addi	r11,r4,1
1010d5e0:	18809936 	bltu	r3,r2,1010d848 <__muldf3+0x340>
1010d5e4:	100490ba 	slli	r2,r2,2
1010d5e8:	00c40474 	movhi	r3,4113
1010d5ec:	18f57f04 	addi	r3,r3,-10756
1010d5f0:	10c5883a 	add	r2,r2,r3
1010d5f4:	10800017 	ldw	r2,0(r2)
1010d5f8:	1000683a 	jmp	r2
1010d5fc:	1010d848 	cmpgei	zero,r2,17249
1010d600:	1010d65c 	xori	zero,r2,17241
1010d604:	1010d65c 	xori	zero,r2,17241
1010d608:	1010d658 	cmpnei	zero,r2,17241
1010d60c:	1010d824 	muli	zero,r2,17248
1010d610:	1010d824 	muli	zero,r2,17248
1010d614:	1010d80c 	andi	zero,r2,17248
1010d618:	1010d658 	cmpnei	zero,r2,17241
1010d61c:	1010d824 	muli	zero,r2,17248
1010d620:	1010d80c 	andi	zero,r2,17248
1010d624:	1010d824 	muli	zero,r2,17248
1010d628:	1010d658 	cmpnei	zero,r2,17241
1010d62c:	1010d834 	orhi	zero,r2,17248
1010d630:	1010d834 	orhi	zero,r2,17248
1010d634:	1010d834 	orhi	zero,r2,17248
1010d638:	1010da50 	cmplti	zero,r2,17257
1010d63c:	2404b03a 	or	r2,r4,r16
1010d640:	10006f1e 	bne	r2,zero,1010d800 <__muldf3+0x2f8>
1010d644:	04800204 	movi	r18,8
1010d648:	0021883a 	mov	r16,zero
1010d64c:	0027883a 	mov	r19,zero
1010d650:	07000084 	movi	fp,2
1010d654:	003fcb06 	br	1010d584 <__alt_data_end+0xfffed584>
1010d658:	502d883a 	mov	r22,r10
1010d65c:	00800084 	movi	r2,2
1010d660:	28805726 	beq	r5,r2,1010d7c0 <__muldf3+0x2b8>
1010d664:	008000c4 	movi	r2,3
1010d668:	28816626 	beq	r5,r2,1010dc04 <__muldf3+0x6fc>
1010d66c:	00800044 	movi	r2,1
1010d670:	2881411e 	bne	r5,r2,1010db78 <__muldf3+0x670>
1010d674:	b029883a 	mov	r20,r22
1010d678:	0005883a 	mov	r2,zero
1010d67c:	000b883a 	mov	r5,zero
1010d680:	0027883a 	mov	r19,zero
1010d684:	1004953a 	slli	r2,r2,20
1010d688:	a0c03fcc 	andi	r3,r20,255
1010d68c:	04400434 	movhi	r17,16
1010d690:	8c7fffc4 	addi	r17,r17,-1
1010d694:	180697fa 	slli	r3,r3,31
1010d698:	2c4a703a 	and	r5,r5,r17
1010d69c:	288ab03a 	or	r5,r5,r2
1010d6a0:	28c6b03a 	or	r3,r5,r3
1010d6a4:	9805883a 	mov	r2,r19
1010d6a8:	dfc00c17 	ldw	ra,48(sp)
1010d6ac:	df000b17 	ldw	fp,44(sp)
1010d6b0:	ddc00a17 	ldw	r23,40(sp)
1010d6b4:	dd800917 	ldw	r22,36(sp)
1010d6b8:	dd400817 	ldw	r21,32(sp)
1010d6bc:	dd000717 	ldw	r20,28(sp)
1010d6c0:	dcc00617 	ldw	r19,24(sp)
1010d6c4:	dc800517 	ldw	r18,20(sp)
1010d6c8:	dc400417 	ldw	r17,16(sp)
1010d6cc:	dc000317 	ldw	r16,12(sp)
1010d6d0:	dec00d04 	addi	sp,sp,52
1010d6d4:	f800283a 	ret
1010d6d8:	2404b03a 	or	r2,r4,r16
1010d6dc:	2025883a 	mov	r18,r4
1010d6e0:	10004226 	beq	r2,zero,1010d7ec <__muldf3+0x2e4>
1010d6e4:	8000fc26 	beq	r16,zero,1010dad8 <__muldf3+0x5d0>
1010d6e8:	8009883a 	mov	r4,r16
1010d6ec:	d9800215 	stw	r6,8(sp)
1010d6f0:	d9c00015 	stw	r7,0(sp)
1010d6f4:	da400115 	stw	r9,4(sp)
1010d6f8:	010e7200 	call	1010e720 <__clzsi2>
1010d6fc:	d9800217 	ldw	r6,8(sp)
1010d700:	d9c00017 	ldw	r7,0(sp)
1010d704:	da400117 	ldw	r9,4(sp)
1010d708:	10fffd44 	addi	r3,r2,-11
1010d70c:	01000704 	movi	r4,28
1010d710:	20c0ed16 	blt	r4,r3,1010dac8 <__muldf3+0x5c0>
1010d714:	01000744 	movi	r4,29
1010d718:	147ffe04 	addi	r17,r2,-8
1010d71c:	20c9c83a 	sub	r4,r4,r3
1010d720:	8460983a 	sll	r16,r16,r17
1010d724:	9108d83a 	srl	r4,r18,r4
1010d728:	9466983a 	sll	r19,r18,r17
1010d72c:	2420b03a 	or	r16,r4,r16
1010d730:	013f0084 	movi	r4,-1022
1010d734:	20ebc83a 	sub	r21,r4,r3
1010d738:	0025883a 	mov	r18,zero
1010d73c:	0039883a 	mov	fp,zero
1010d740:	003f9006 	br	1010d584 <__alt_data_end+0xfffed584>
1010d744:	3444b03a 	or	r2,r6,r17
1010d748:	1000261e 	bne	r2,zero,1010d7e4 <__muldf3+0x2dc>
1010d74c:	0023883a 	mov	r17,zero
1010d750:	0011883a 	mov	r8,zero
1010d754:	01400084 	movi	r5,2
1010d758:	003f9c06 	br	1010d5cc <__alt_data_end+0xfffed5cc>
1010d75c:	3444b03a 	or	r2,r6,r17
1010d760:	10001c26 	beq	r2,zero,1010d7d4 <__muldf3+0x2cc>
1010d764:	8800ce26 	beq	r17,zero,1010daa0 <__muldf3+0x598>
1010d768:	8809883a 	mov	r4,r17
1010d76c:	d9800215 	stw	r6,8(sp)
1010d770:	da400115 	stw	r9,4(sp)
1010d774:	da800015 	stw	r10,0(sp)
1010d778:	010e7200 	call	1010e720 <__clzsi2>
1010d77c:	d9800217 	ldw	r6,8(sp)
1010d780:	da400117 	ldw	r9,4(sp)
1010d784:	da800017 	ldw	r10,0(sp)
1010d788:	113ffd44 	addi	r4,r2,-11
1010d78c:	00c00704 	movi	r3,28
1010d790:	1900bf16 	blt	r3,r4,1010da90 <__muldf3+0x588>
1010d794:	00c00744 	movi	r3,29
1010d798:	123ffe04 	addi	r8,r2,-8
1010d79c:	1907c83a 	sub	r3,r3,r4
1010d7a0:	8a22983a 	sll	r17,r17,r8
1010d7a4:	30c6d83a 	srl	r3,r6,r3
1010d7a8:	3210983a 	sll	r8,r6,r8
1010d7ac:	1c62b03a 	or	r17,r3,r17
1010d7b0:	017f0084 	movi	r5,-1022
1010d7b4:	2909c83a 	sub	r4,r5,r4
1010d7b8:	000b883a 	mov	r5,zero
1010d7bc:	003f8306 	br	1010d5cc <__alt_data_end+0xfffed5cc>
1010d7c0:	b029883a 	mov	r20,r22
1010d7c4:	0081ffc4 	movi	r2,2047
1010d7c8:	000b883a 	mov	r5,zero
1010d7cc:	0027883a 	mov	r19,zero
1010d7d0:	003fac06 	br	1010d684 <__alt_data_end+0xfffed684>
1010d7d4:	0023883a 	mov	r17,zero
1010d7d8:	0011883a 	mov	r8,zero
1010d7dc:	01400044 	movi	r5,1
1010d7e0:	003f7a06 	br	1010d5cc <__alt_data_end+0xfffed5cc>
1010d7e4:	014000c4 	movi	r5,3
1010d7e8:	003f7806 	br	1010d5cc <__alt_data_end+0xfffed5cc>
1010d7ec:	04800104 	movi	r18,4
1010d7f0:	0021883a 	mov	r16,zero
1010d7f4:	0027883a 	mov	r19,zero
1010d7f8:	07000044 	movi	fp,1
1010d7fc:	003f6106 	br	1010d584 <__alt_data_end+0xfffed584>
1010d800:	04800304 	movi	r18,12
1010d804:	070000c4 	movi	fp,3
1010d808:	003f5e06 	br	1010d584 <__alt_data_end+0xfffed584>
1010d80c:	01400434 	movhi	r5,16
1010d810:	0029883a 	mov	r20,zero
1010d814:	297fffc4 	addi	r5,r5,-1
1010d818:	04ffffc4 	movi	r19,-1
1010d81c:	0081ffc4 	movi	r2,2047
1010d820:	003f9806 	br	1010d684 <__alt_data_end+0xfffed684>
1010d824:	8023883a 	mov	r17,r16
1010d828:	9811883a 	mov	r8,r19
1010d82c:	e00b883a 	mov	r5,fp
1010d830:	003f8a06 	br	1010d65c <__alt_data_end+0xfffed65c>
1010d834:	8023883a 	mov	r17,r16
1010d838:	9811883a 	mov	r8,r19
1010d83c:	482d883a 	mov	r22,r9
1010d840:	e00b883a 	mov	r5,fp
1010d844:	003f8506 	br	1010d65c <__alt_data_end+0xfffed65c>
1010d848:	980ad43a 	srli	r5,r19,16
1010d84c:	401ad43a 	srli	r13,r8,16
1010d850:	9cffffcc 	andi	r19,r19,65535
1010d854:	423fffcc 	andi	r8,r8,65535
1010d858:	44d9383a 	mul	r12,r8,r19
1010d85c:	4145383a 	mul	r2,r8,r5
1010d860:	6ccd383a 	mul	r6,r13,r19
1010d864:	6006d43a 	srli	r3,r12,16
1010d868:	2b5d383a 	mul	r14,r5,r13
1010d86c:	308d883a 	add	r6,r6,r2
1010d870:	198d883a 	add	r6,r3,r6
1010d874:	3080022e 	bgeu	r6,r2,1010d880 <__muldf3+0x378>
1010d878:	00800074 	movhi	r2,1
1010d87c:	709d883a 	add	r14,r14,r2
1010d880:	8828d43a 	srli	r20,r17,16
1010d884:	8bffffcc 	andi	r15,r17,65535
1010d888:	7ce3383a 	mul	r17,r15,r19
1010d88c:	7945383a 	mul	r2,r15,r5
1010d890:	a4e7383a 	mul	r19,r20,r19
1010d894:	8814d43a 	srli	r10,r17,16
1010d898:	3012943a 	slli	r9,r6,16
1010d89c:	98a7883a 	add	r19,r19,r2
1010d8a0:	633fffcc 	andi	r12,r12,65535
1010d8a4:	54d5883a 	add	r10,r10,r19
1010d8a8:	3006d43a 	srli	r3,r6,16
1010d8ac:	4b13883a 	add	r9,r9,r12
1010d8b0:	2d0b383a 	mul	r5,r5,r20
1010d8b4:	5080022e 	bgeu	r10,r2,1010d8c0 <__muldf3+0x3b8>
1010d8b8:	00800074 	movhi	r2,1
1010d8bc:	288b883a 	add	r5,r5,r2
1010d8c0:	802ad43a 	srli	r21,r16,16
1010d8c4:	843fffcc 	andi	r16,r16,65535
1010d8c8:	440d383a 	mul	r6,r8,r16
1010d8cc:	4565383a 	mul	r18,r8,r21
1010d8d0:	8359383a 	mul	r12,r16,r13
1010d8d4:	500e943a 	slli	r7,r10,16
1010d8d8:	3010d43a 	srli	r8,r6,16
1010d8dc:	5026d43a 	srli	r19,r10,16
1010d8e0:	6499883a 	add	r12,r12,r18
1010d8e4:	8abfffcc 	andi	r10,r17,65535
1010d8e8:	3a95883a 	add	r10,r7,r10
1010d8ec:	4319883a 	add	r12,r8,r12
1010d8f0:	9967883a 	add	r19,r19,r5
1010d8f4:	1a87883a 	add	r3,r3,r10
1010d8f8:	6d5b383a 	mul	r13,r13,r21
1010d8fc:	6480022e 	bgeu	r12,r18,1010d908 <__muldf3+0x400>
1010d900:	00800074 	movhi	r2,1
1010d904:	689b883a 	add	r13,r13,r2
1010d908:	7c25383a 	mul	r18,r15,r16
1010d90c:	7d4b383a 	mul	r5,r15,r21
1010d910:	850f383a 	mul	r7,r16,r20
1010d914:	901ed43a 	srli	r15,r18,16
1010d918:	6004d43a 	srli	r2,r12,16
1010d91c:	6010943a 	slli	r8,r12,16
1010d920:	394f883a 	add	r7,r7,r5
1010d924:	333fffcc 	andi	r12,r6,65535
1010d928:	79df883a 	add	r15,r15,r7
1010d92c:	135b883a 	add	r13,r2,r13
1010d930:	a563383a 	mul	r17,r20,r21
1010d934:	4305883a 	add	r2,r8,r12
1010d938:	7940022e 	bgeu	r15,r5,1010d944 <__muldf3+0x43c>
1010d93c:	01400074 	movhi	r5,1
1010d940:	8963883a 	add	r17,r17,r5
1010d944:	780a943a 	slli	r5,r15,16
1010d948:	91bfffcc 	andi	r6,r18,65535
1010d94c:	70c7883a 	add	r3,r14,r3
1010d950:	298d883a 	add	r6,r5,r6
1010d954:	1a8f803a 	cmpltu	r7,r3,r10
1010d958:	34cb883a 	add	r5,r6,r19
1010d95c:	10c7883a 	add	r3,r2,r3
1010d960:	3955883a 	add	r10,r7,r5
1010d964:	1885803a 	cmpltu	r2,r3,r2
1010d968:	6a91883a 	add	r8,r13,r10
1010d96c:	780cd43a 	srli	r6,r15,16
1010d970:	1219883a 	add	r12,r2,r8
1010d974:	2ccb803a 	cmpltu	r5,r5,r19
1010d978:	51cf803a 	cmpltu	r7,r10,r7
1010d97c:	29ceb03a 	or	r7,r5,r7
1010d980:	4351803a 	cmpltu	r8,r8,r13
1010d984:	608b803a 	cmpltu	r5,r12,r2
1010d988:	4144b03a 	or	r2,r8,r5
1010d98c:	398f883a 	add	r7,r7,r6
1010d990:	3885883a 	add	r2,r7,r2
1010d994:	1810927a 	slli	r8,r3,9
1010d998:	1445883a 	add	r2,r2,r17
1010d99c:	1004927a 	slli	r2,r2,9
1010d9a0:	6022d5fa 	srli	r17,r12,23
1010d9a4:	1806d5fa 	srli	r3,r3,23
1010d9a8:	4252b03a 	or	r9,r8,r9
1010d9ac:	600a927a 	slli	r5,r12,9
1010d9b0:	4810c03a 	cmpne	r8,r9,zero
1010d9b4:	1462b03a 	or	r17,r2,r17
1010d9b8:	40c6b03a 	or	r3,r8,r3
1010d9bc:	8880402c 	andhi	r2,r17,256
1010d9c0:	1950b03a 	or	r8,r3,r5
1010d9c4:	10000726 	beq	r2,zero,1010d9e4 <__muldf3+0x4dc>
1010d9c8:	4006d07a 	srli	r3,r8,1
1010d9cc:	880497fa 	slli	r2,r17,31
1010d9d0:	4200004c 	andi	r8,r8,1
1010d9d4:	8822d07a 	srli	r17,r17,1
1010d9d8:	1a10b03a 	or	r8,r3,r8
1010d9dc:	1210b03a 	or	r8,r2,r8
1010d9e0:	5809883a 	mov	r4,r11
1010d9e4:	2080ffc4 	addi	r2,r4,1023
1010d9e8:	0080440e 	bge	zero,r2,1010dafc <__muldf3+0x5f4>
1010d9ec:	40c001cc 	andi	r3,r8,7
1010d9f0:	18000726 	beq	r3,zero,1010da10 <__muldf3+0x508>
1010d9f4:	40c003cc 	andi	r3,r8,15
1010d9f8:	01400104 	movi	r5,4
1010d9fc:	19400426 	beq	r3,r5,1010da10 <__muldf3+0x508>
1010da00:	4147883a 	add	r3,r8,r5
1010da04:	1a11803a 	cmpltu	r8,r3,r8
1010da08:	8a23883a 	add	r17,r17,r8
1010da0c:	1811883a 	mov	r8,r3
1010da10:	88c0402c 	andhi	r3,r17,256
1010da14:	18000426 	beq	r3,zero,1010da28 <__muldf3+0x520>
1010da18:	00ffc034 	movhi	r3,65280
1010da1c:	18ffffc4 	addi	r3,r3,-1
1010da20:	20810004 	addi	r2,r4,1024
1010da24:	88e2703a 	and	r17,r17,r3
1010da28:	00c1ff84 	movi	r3,2046
1010da2c:	18bf6416 	blt	r3,r2,1010d7c0 <__alt_data_end+0xfffed7c0>
1010da30:	8826977a 	slli	r19,r17,29
1010da34:	4010d0fa 	srli	r8,r8,3
1010da38:	8822927a 	slli	r17,r17,9
1010da3c:	1081ffcc 	andi	r2,r2,2047
1010da40:	9a26b03a 	or	r19,r19,r8
1010da44:	880ad33a 	srli	r5,r17,12
1010da48:	b029883a 	mov	r20,r22
1010da4c:	003f0d06 	br	1010d684 <__alt_data_end+0xfffed684>
1010da50:	8080022c 	andhi	r2,r16,8
1010da54:	10000926 	beq	r2,zero,1010da7c <__muldf3+0x574>
1010da58:	8880022c 	andhi	r2,r17,8
1010da5c:	1000071e 	bne	r2,zero,1010da7c <__muldf3+0x574>
1010da60:	00800434 	movhi	r2,16
1010da64:	89400234 	orhi	r5,r17,8
1010da68:	10bfffc4 	addi	r2,r2,-1
1010da6c:	b829883a 	mov	r20,r23
1010da70:	288a703a 	and	r5,r5,r2
1010da74:	4027883a 	mov	r19,r8
1010da78:	003f6806 	br	1010d81c <__alt_data_end+0xfffed81c>
1010da7c:	00800434 	movhi	r2,16
1010da80:	81400234 	orhi	r5,r16,8
1010da84:	10bfffc4 	addi	r2,r2,-1
1010da88:	288a703a 	and	r5,r5,r2
1010da8c:	003f6306 	br	1010d81c <__alt_data_end+0xfffed81c>
1010da90:	10bff604 	addi	r2,r2,-40
1010da94:	30a2983a 	sll	r17,r6,r2
1010da98:	0011883a 	mov	r8,zero
1010da9c:	003f4406 	br	1010d7b0 <__alt_data_end+0xfffed7b0>
1010daa0:	3009883a 	mov	r4,r6
1010daa4:	d9800215 	stw	r6,8(sp)
1010daa8:	da400115 	stw	r9,4(sp)
1010daac:	da800015 	stw	r10,0(sp)
1010dab0:	010e7200 	call	1010e720 <__clzsi2>
1010dab4:	10800804 	addi	r2,r2,32
1010dab8:	da800017 	ldw	r10,0(sp)
1010dabc:	da400117 	ldw	r9,4(sp)
1010dac0:	d9800217 	ldw	r6,8(sp)
1010dac4:	003f3006 	br	1010d788 <__alt_data_end+0xfffed788>
1010dac8:	10bff604 	addi	r2,r2,-40
1010dacc:	90a0983a 	sll	r16,r18,r2
1010dad0:	0027883a 	mov	r19,zero
1010dad4:	003f1606 	br	1010d730 <__alt_data_end+0xfffed730>
1010dad8:	d9800215 	stw	r6,8(sp)
1010dadc:	d9c00015 	stw	r7,0(sp)
1010dae0:	da400115 	stw	r9,4(sp)
1010dae4:	010e7200 	call	1010e720 <__clzsi2>
1010dae8:	10800804 	addi	r2,r2,32
1010daec:	da400117 	ldw	r9,4(sp)
1010daf0:	d9c00017 	ldw	r7,0(sp)
1010daf4:	d9800217 	ldw	r6,8(sp)
1010daf8:	003f0306 	br	1010d708 <__alt_data_end+0xfffed708>
1010dafc:	00c00044 	movi	r3,1
1010db00:	1887c83a 	sub	r3,r3,r2
1010db04:	01000e04 	movi	r4,56
1010db08:	20feda16 	blt	r4,r3,1010d674 <__alt_data_end+0xfffed674>
1010db0c:	010007c4 	movi	r4,31
1010db10:	20c01b16 	blt	r4,r3,1010db80 <__muldf3+0x678>
1010db14:	00800804 	movi	r2,32
1010db18:	10c5c83a 	sub	r2,r2,r3
1010db1c:	888a983a 	sll	r5,r17,r2
1010db20:	40c8d83a 	srl	r4,r8,r3
1010db24:	4084983a 	sll	r2,r8,r2
1010db28:	88e2d83a 	srl	r17,r17,r3
1010db2c:	2906b03a 	or	r3,r5,r4
1010db30:	1004c03a 	cmpne	r2,r2,zero
1010db34:	1886b03a 	or	r3,r3,r2
1010db38:	188001cc 	andi	r2,r3,7
1010db3c:	10000726 	beq	r2,zero,1010db5c <__muldf3+0x654>
1010db40:	188003cc 	andi	r2,r3,15
1010db44:	01000104 	movi	r4,4
1010db48:	11000426 	beq	r2,r4,1010db5c <__muldf3+0x654>
1010db4c:	1805883a 	mov	r2,r3
1010db50:	10c00104 	addi	r3,r2,4
1010db54:	1885803a 	cmpltu	r2,r3,r2
1010db58:	88a3883a 	add	r17,r17,r2
1010db5c:	8880202c 	andhi	r2,r17,128
1010db60:	10001c26 	beq	r2,zero,1010dbd4 <__muldf3+0x6cc>
1010db64:	b029883a 	mov	r20,r22
1010db68:	00800044 	movi	r2,1
1010db6c:	000b883a 	mov	r5,zero
1010db70:	0027883a 	mov	r19,zero
1010db74:	003ec306 	br	1010d684 <__alt_data_end+0xfffed684>
1010db78:	5809883a 	mov	r4,r11
1010db7c:	003f9906 	br	1010d9e4 <__alt_data_end+0xfffed9e4>
1010db80:	013ff844 	movi	r4,-31
1010db84:	2085c83a 	sub	r2,r4,r2
1010db88:	8888d83a 	srl	r4,r17,r2
1010db8c:	00800804 	movi	r2,32
1010db90:	18801a26 	beq	r3,r2,1010dbfc <__muldf3+0x6f4>
1010db94:	00801004 	movi	r2,64
1010db98:	10c5c83a 	sub	r2,r2,r3
1010db9c:	8884983a 	sll	r2,r17,r2
1010dba0:	1204b03a 	or	r2,r2,r8
1010dba4:	1004c03a 	cmpne	r2,r2,zero
1010dba8:	2084b03a 	or	r2,r4,r2
1010dbac:	144001cc 	andi	r17,r2,7
1010dbb0:	88000d1e 	bne	r17,zero,1010dbe8 <__muldf3+0x6e0>
1010dbb4:	000b883a 	mov	r5,zero
1010dbb8:	1026d0fa 	srli	r19,r2,3
1010dbbc:	b029883a 	mov	r20,r22
1010dbc0:	0005883a 	mov	r2,zero
1010dbc4:	9c66b03a 	or	r19,r19,r17
1010dbc8:	003eae06 	br	1010d684 <__alt_data_end+0xfffed684>
1010dbcc:	1007883a 	mov	r3,r2
1010dbd0:	0023883a 	mov	r17,zero
1010dbd4:	880a927a 	slli	r5,r17,9
1010dbd8:	1805883a 	mov	r2,r3
1010dbdc:	8822977a 	slli	r17,r17,29
1010dbe0:	280ad33a 	srli	r5,r5,12
1010dbe4:	003ff406 	br	1010dbb8 <__alt_data_end+0xfffedbb8>
1010dbe8:	10c003cc 	andi	r3,r2,15
1010dbec:	01000104 	movi	r4,4
1010dbf0:	193ff626 	beq	r3,r4,1010dbcc <__alt_data_end+0xfffedbcc>
1010dbf4:	0023883a 	mov	r17,zero
1010dbf8:	003fd506 	br	1010db50 <__alt_data_end+0xfffedb50>
1010dbfc:	0005883a 	mov	r2,zero
1010dc00:	003fe706 	br	1010dba0 <__alt_data_end+0xfffedba0>
1010dc04:	00800434 	movhi	r2,16
1010dc08:	89400234 	orhi	r5,r17,8
1010dc0c:	10bfffc4 	addi	r2,r2,-1
1010dc10:	b029883a 	mov	r20,r22
1010dc14:	288a703a 	and	r5,r5,r2
1010dc18:	4027883a 	mov	r19,r8
1010dc1c:	003eff06 	br	1010d81c <__alt_data_end+0xfffed81c>

1010dc20 <__subdf3>:
1010dc20:	02000434 	movhi	r8,16
1010dc24:	423fffc4 	addi	r8,r8,-1
1010dc28:	defffb04 	addi	sp,sp,-20
1010dc2c:	2a14703a 	and	r10,r5,r8
1010dc30:	3812d53a 	srli	r9,r7,20
1010dc34:	3a10703a 	and	r8,r7,r8
1010dc38:	2006d77a 	srli	r3,r4,29
1010dc3c:	3004d77a 	srli	r2,r6,29
1010dc40:	dc000015 	stw	r16,0(sp)
1010dc44:	501490fa 	slli	r10,r10,3
1010dc48:	2820d53a 	srli	r16,r5,20
1010dc4c:	401090fa 	slli	r8,r8,3
1010dc50:	dc800215 	stw	r18,8(sp)
1010dc54:	dc400115 	stw	r17,4(sp)
1010dc58:	dfc00415 	stw	ra,16(sp)
1010dc5c:	202290fa 	slli	r17,r4,3
1010dc60:	dcc00315 	stw	r19,12(sp)
1010dc64:	4a41ffcc 	andi	r9,r9,2047
1010dc68:	0101ffc4 	movi	r4,2047
1010dc6c:	2824d7fa 	srli	r18,r5,31
1010dc70:	8401ffcc 	andi	r16,r16,2047
1010dc74:	50c6b03a 	or	r3,r10,r3
1010dc78:	380ed7fa 	srli	r7,r7,31
1010dc7c:	408ab03a 	or	r5,r8,r2
1010dc80:	300c90fa 	slli	r6,r6,3
1010dc84:	49009626 	beq	r9,r4,1010dee0 <__subdf3+0x2c0>
1010dc88:	39c0005c 	xori	r7,r7,1
1010dc8c:	8245c83a 	sub	r2,r16,r9
1010dc90:	3c807426 	beq	r7,r18,1010de64 <__subdf3+0x244>
1010dc94:	0080af0e 	bge	zero,r2,1010df54 <__subdf3+0x334>
1010dc98:	48002a1e 	bne	r9,zero,1010dd44 <__subdf3+0x124>
1010dc9c:	2988b03a 	or	r4,r5,r6
1010dca0:	20009a1e 	bne	r4,zero,1010df0c <__subdf3+0x2ec>
1010dca4:	888001cc 	andi	r2,r17,7
1010dca8:	10000726 	beq	r2,zero,1010dcc8 <__subdf3+0xa8>
1010dcac:	888003cc 	andi	r2,r17,15
1010dcb0:	01000104 	movi	r4,4
1010dcb4:	11000426 	beq	r2,r4,1010dcc8 <__subdf3+0xa8>
1010dcb8:	890b883a 	add	r5,r17,r4
1010dcbc:	2c63803a 	cmpltu	r17,r5,r17
1010dcc0:	1c47883a 	add	r3,r3,r17
1010dcc4:	2823883a 	mov	r17,r5
1010dcc8:	1880202c 	andhi	r2,r3,128
1010dccc:	10005926 	beq	r2,zero,1010de34 <__subdf3+0x214>
1010dcd0:	84000044 	addi	r16,r16,1
1010dcd4:	0081ffc4 	movi	r2,2047
1010dcd8:	8080be26 	beq	r16,r2,1010dfd4 <__subdf3+0x3b4>
1010dcdc:	017fe034 	movhi	r5,65408
1010dce0:	297fffc4 	addi	r5,r5,-1
1010dce4:	1946703a 	and	r3,r3,r5
1010dce8:	1804977a 	slli	r2,r3,29
1010dcec:	1806927a 	slli	r3,r3,9
1010dcf0:	8822d0fa 	srli	r17,r17,3
1010dcf4:	8401ffcc 	andi	r16,r16,2047
1010dcf8:	180ad33a 	srli	r5,r3,12
1010dcfc:	9100004c 	andi	r4,r18,1
1010dd00:	1444b03a 	or	r2,r2,r17
1010dd04:	80c1ffcc 	andi	r3,r16,2047
1010dd08:	1820953a 	slli	r16,r3,20
1010dd0c:	20c03fcc 	andi	r3,r4,255
1010dd10:	180897fa 	slli	r4,r3,31
1010dd14:	00c00434 	movhi	r3,16
1010dd18:	18ffffc4 	addi	r3,r3,-1
1010dd1c:	28c6703a 	and	r3,r5,r3
1010dd20:	1c06b03a 	or	r3,r3,r16
1010dd24:	1906b03a 	or	r3,r3,r4
1010dd28:	dfc00417 	ldw	ra,16(sp)
1010dd2c:	dcc00317 	ldw	r19,12(sp)
1010dd30:	dc800217 	ldw	r18,8(sp)
1010dd34:	dc400117 	ldw	r17,4(sp)
1010dd38:	dc000017 	ldw	r16,0(sp)
1010dd3c:	dec00504 	addi	sp,sp,20
1010dd40:	f800283a 	ret
1010dd44:	0101ffc4 	movi	r4,2047
1010dd48:	813fd626 	beq	r16,r4,1010dca4 <__alt_data_end+0xfffedca4>
1010dd4c:	29402034 	orhi	r5,r5,128
1010dd50:	01000e04 	movi	r4,56
1010dd54:	2080a316 	blt	r4,r2,1010dfe4 <__subdf3+0x3c4>
1010dd58:	010007c4 	movi	r4,31
1010dd5c:	2080c616 	blt	r4,r2,1010e078 <__subdf3+0x458>
1010dd60:	01000804 	movi	r4,32
1010dd64:	2089c83a 	sub	r4,r4,r2
1010dd68:	2910983a 	sll	r8,r5,r4
1010dd6c:	308ed83a 	srl	r7,r6,r2
1010dd70:	3108983a 	sll	r4,r6,r4
1010dd74:	2884d83a 	srl	r2,r5,r2
1010dd78:	41ccb03a 	or	r6,r8,r7
1010dd7c:	2008c03a 	cmpne	r4,r4,zero
1010dd80:	310cb03a 	or	r6,r6,r4
1010dd84:	898dc83a 	sub	r6,r17,r6
1010dd88:	89a3803a 	cmpltu	r17,r17,r6
1010dd8c:	1887c83a 	sub	r3,r3,r2
1010dd90:	1c47c83a 	sub	r3,r3,r17
1010dd94:	3023883a 	mov	r17,r6
1010dd98:	1880202c 	andhi	r2,r3,128
1010dd9c:	10002326 	beq	r2,zero,1010de2c <__subdf3+0x20c>
1010dda0:	04c02034 	movhi	r19,128
1010dda4:	9cffffc4 	addi	r19,r19,-1
1010dda8:	1ce6703a 	and	r19,r3,r19
1010ddac:	98007a26 	beq	r19,zero,1010df98 <__subdf3+0x378>
1010ddb0:	9809883a 	mov	r4,r19
1010ddb4:	010e7200 	call	1010e720 <__clzsi2>
1010ddb8:	113ffe04 	addi	r4,r2,-8
1010ddbc:	00c007c4 	movi	r3,31
1010ddc0:	19007b16 	blt	r3,r4,1010dfb0 <__subdf3+0x390>
1010ddc4:	00800804 	movi	r2,32
1010ddc8:	1105c83a 	sub	r2,r2,r4
1010ddcc:	8884d83a 	srl	r2,r17,r2
1010ddd0:	9906983a 	sll	r3,r19,r4
1010ddd4:	8922983a 	sll	r17,r17,r4
1010ddd8:	10c4b03a 	or	r2,r2,r3
1010dddc:	24007816 	blt	r4,r16,1010dfc0 <__subdf3+0x3a0>
1010dde0:	2421c83a 	sub	r16,r4,r16
1010dde4:	80c00044 	addi	r3,r16,1
1010dde8:	010007c4 	movi	r4,31
1010ddec:	20c09516 	blt	r4,r3,1010e044 <__subdf3+0x424>
1010ddf0:	01400804 	movi	r5,32
1010ddf4:	28cbc83a 	sub	r5,r5,r3
1010ddf8:	88c8d83a 	srl	r4,r17,r3
1010ddfc:	8962983a 	sll	r17,r17,r5
1010de00:	114a983a 	sll	r5,r2,r5
1010de04:	10c6d83a 	srl	r3,r2,r3
1010de08:	8804c03a 	cmpne	r2,r17,zero
1010de0c:	290ab03a 	or	r5,r5,r4
1010de10:	28a2b03a 	or	r17,r5,r2
1010de14:	0021883a 	mov	r16,zero
1010de18:	003fa206 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010de1c:	2090b03a 	or	r8,r4,r2
1010de20:	40018e26 	beq	r8,zero,1010e45c <__subdf3+0x83c>
1010de24:	1007883a 	mov	r3,r2
1010de28:	2023883a 	mov	r17,r4
1010de2c:	888001cc 	andi	r2,r17,7
1010de30:	103f9e1e 	bne	r2,zero,1010dcac <__alt_data_end+0xfffedcac>
1010de34:	1804977a 	slli	r2,r3,29
1010de38:	8822d0fa 	srli	r17,r17,3
1010de3c:	1810d0fa 	srli	r8,r3,3
1010de40:	9100004c 	andi	r4,r18,1
1010de44:	1444b03a 	or	r2,r2,r17
1010de48:	00c1ffc4 	movi	r3,2047
1010de4c:	80c02826 	beq	r16,r3,1010def0 <__subdf3+0x2d0>
1010de50:	01400434 	movhi	r5,16
1010de54:	297fffc4 	addi	r5,r5,-1
1010de58:	80e0703a 	and	r16,r16,r3
1010de5c:	414a703a 	and	r5,r8,r5
1010de60:	003fa806 	br	1010dd04 <__alt_data_end+0xfffedd04>
1010de64:	0080630e 	bge	zero,r2,1010dff4 <__subdf3+0x3d4>
1010de68:	48003026 	beq	r9,zero,1010df2c <__subdf3+0x30c>
1010de6c:	0101ffc4 	movi	r4,2047
1010de70:	813f8c26 	beq	r16,r4,1010dca4 <__alt_data_end+0xfffedca4>
1010de74:	29402034 	orhi	r5,r5,128
1010de78:	01000e04 	movi	r4,56
1010de7c:	2080a90e 	bge	r4,r2,1010e124 <__subdf3+0x504>
1010de80:	298cb03a 	or	r6,r5,r6
1010de84:	3012c03a 	cmpne	r9,r6,zero
1010de88:	0005883a 	mov	r2,zero
1010de8c:	4c53883a 	add	r9,r9,r17
1010de90:	4c63803a 	cmpltu	r17,r9,r17
1010de94:	10c7883a 	add	r3,r2,r3
1010de98:	88c7883a 	add	r3,r17,r3
1010de9c:	4823883a 	mov	r17,r9
1010dea0:	1880202c 	andhi	r2,r3,128
1010dea4:	1000d026 	beq	r2,zero,1010e1e8 <__subdf3+0x5c8>
1010dea8:	84000044 	addi	r16,r16,1
1010deac:	0081ffc4 	movi	r2,2047
1010deb0:	8080fe26 	beq	r16,r2,1010e2ac <__subdf3+0x68c>
1010deb4:	00bfe034 	movhi	r2,65408
1010deb8:	10bfffc4 	addi	r2,r2,-1
1010debc:	1886703a 	and	r3,r3,r2
1010dec0:	880ad07a 	srli	r5,r17,1
1010dec4:	180497fa 	slli	r2,r3,31
1010dec8:	8900004c 	andi	r4,r17,1
1010decc:	2922b03a 	or	r17,r5,r4
1010ded0:	1806d07a 	srli	r3,r3,1
1010ded4:	1462b03a 	or	r17,r2,r17
1010ded8:	3825883a 	mov	r18,r7
1010dedc:	003f7106 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010dee0:	2984b03a 	or	r2,r5,r6
1010dee4:	103f6826 	beq	r2,zero,1010dc88 <__alt_data_end+0xfffedc88>
1010dee8:	39c03fcc 	andi	r7,r7,255
1010deec:	003f6706 	br	1010dc8c <__alt_data_end+0xfffedc8c>
1010def0:	4086b03a 	or	r3,r8,r2
1010def4:	18015226 	beq	r3,zero,1010e440 <__subdf3+0x820>
1010def8:	00c00434 	movhi	r3,16
1010defc:	41400234 	orhi	r5,r8,8
1010df00:	18ffffc4 	addi	r3,r3,-1
1010df04:	28ca703a 	and	r5,r5,r3
1010df08:	003f7e06 	br	1010dd04 <__alt_data_end+0xfffedd04>
1010df0c:	10bfffc4 	addi	r2,r2,-1
1010df10:	1000491e 	bne	r2,zero,1010e038 <__subdf3+0x418>
1010df14:	898fc83a 	sub	r7,r17,r6
1010df18:	89e3803a 	cmpltu	r17,r17,r7
1010df1c:	1947c83a 	sub	r3,r3,r5
1010df20:	1c47c83a 	sub	r3,r3,r17
1010df24:	3823883a 	mov	r17,r7
1010df28:	003f9b06 	br	1010dd98 <__alt_data_end+0xfffedd98>
1010df2c:	2988b03a 	or	r4,r5,r6
1010df30:	203f5c26 	beq	r4,zero,1010dca4 <__alt_data_end+0xfffedca4>
1010df34:	10bfffc4 	addi	r2,r2,-1
1010df38:	1000931e 	bne	r2,zero,1010e188 <__subdf3+0x568>
1010df3c:	898d883a 	add	r6,r17,r6
1010df40:	3463803a 	cmpltu	r17,r6,r17
1010df44:	1947883a 	add	r3,r3,r5
1010df48:	88c7883a 	add	r3,r17,r3
1010df4c:	3023883a 	mov	r17,r6
1010df50:	003fd306 	br	1010dea0 <__alt_data_end+0xfffedea0>
1010df54:	1000541e 	bne	r2,zero,1010e0a8 <__subdf3+0x488>
1010df58:	80800044 	addi	r2,r16,1
1010df5c:	1081ffcc 	andi	r2,r2,2047
1010df60:	01000044 	movi	r4,1
1010df64:	2080a20e 	bge	r4,r2,1010e1f0 <__subdf3+0x5d0>
1010df68:	8989c83a 	sub	r4,r17,r6
1010df6c:	8905803a 	cmpltu	r2,r17,r4
1010df70:	1967c83a 	sub	r19,r3,r5
1010df74:	98a7c83a 	sub	r19,r19,r2
1010df78:	9880202c 	andhi	r2,r19,128
1010df7c:	10006326 	beq	r2,zero,1010e10c <__subdf3+0x4ec>
1010df80:	3463c83a 	sub	r17,r6,r17
1010df84:	28c7c83a 	sub	r3,r5,r3
1010df88:	344d803a 	cmpltu	r6,r6,r17
1010df8c:	19a7c83a 	sub	r19,r3,r6
1010df90:	3825883a 	mov	r18,r7
1010df94:	983f861e 	bne	r19,zero,1010ddb0 <__alt_data_end+0xfffeddb0>
1010df98:	8809883a 	mov	r4,r17
1010df9c:	010e7200 	call	1010e720 <__clzsi2>
1010dfa0:	10800804 	addi	r2,r2,32
1010dfa4:	113ffe04 	addi	r4,r2,-8
1010dfa8:	00c007c4 	movi	r3,31
1010dfac:	193f850e 	bge	r3,r4,1010ddc4 <__alt_data_end+0xfffeddc4>
1010dfb0:	10bff604 	addi	r2,r2,-40
1010dfb4:	8884983a 	sll	r2,r17,r2
1010dfb8:	0023883a 	mov	r17,zero
1010dfbc:	243f880e 	bge	r4,r16,1010dde0 <__alt_data_end+0xfffedde0>
1010dfc0:	00ffe034 	movhi	r3,65408
1010dfc4:	18ffffc4 	addi	r3,r3,-1
1010dfc8:	8121c83a 	sub	r16,r16,r4
1010dfcc:	10c6703a 	and	r3,r2,r3
1010dfd0:	003f3406 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010dfd4:	9100004c 	andi	r4,r18,1
1010dfd8:	000b883a 	mov	r5,zero
1010dfdc:	0005883a 	mov	r2,zero
1010dfe0:	003f4806 	br	1010dd04 <__alt_data_end+0xfffedd04>
1010dfe4:	298cb03a 	or	r6,r5,r6
1010dfe8:	300cc03a 	cmpne	r6,r6,zero
1010dfec:	0005883a 	mov	r2,zero
1010dff0:	003f6406 	br	1010dd84 <__alt_data_end+0xfffedd84>
1010dff4:	10009a1e 	bne	r2,zero,1010e260 <__subdf3+0x640>
1010dff8:	82400044 	addi	r9,r16,1
1010dffc:	4881ffcc 	andi	r2,r9,2047
1010e000:	02800044 	movi	r10,1
1010e004:	5080670e 	bge	r10,r2,1010e1a4 <__subdf3+0x584>
1010e008:	0081ffc4 	movi	r2,2047
1010e00c:	4880af26 	beq	r9,r2,1010e2cc <__subdf3+0x6ac>
1010e010:	898d883a 	add	r6,r17,r6
1010e014:	1945883a 	add	r2,r3,r5
1010e018:	3447803a 	cmpltu	r3,r6,r17
1010e01c:	1887883a 	add	r3,r3,r2
1010e020:	182297fa 	slli	r17,r3,31
1010e024:	300cd07a 	srli	r6,r6,1
1010e028:	1806d07a 	srli	r3,r3,1
1010e02c:	4821883a 	mov	r16,r9
1010e030:	89a2b03a 	or	r17,r17,r6
1010e034:	003f1b06 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e038:	0101ffc4 	movi	r4,2047
1010e03c:	813f441e 	bne	r16,r4,1010dd50 <__alt_data_end+0xfffedd50>
1010e040:	003f1806 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e044:	843ff844 	addi	r16,r16,-31
1010e048:	01400804 	movi	r5,32
1010e04c:	1408d83a 	srl	r4,r2,r16
1010e050:	19405026 	beq	r3,r5,1010e194 <__subdf3+0x574>
1010e054:	01401004 	movi	r5,64
1010e058:	28c7c83a 	sub	r3,r5,r3
1010e05c:	10c4983a 	sll	r2,r2,r3
1010e060:	88a2b03a 	or	r17,r17,r2
1010e064:	8822c03a 	cmpne	r17,r17,zero
1010e068:	2462b03a 	or	r17,r4,r17
1010e06c:	0007883a 	mov	r3,zero
1010e070:	0021883a 	mov	r16,zero
1010e074:	003f6d06 	br	1010de2c <__alt_data_end+0xfffede2c>
1010e078:	11fff804 	addi	r7,r2,-32
1010e07c:	01000804 	movi	r4,32
1010e080:	29ced83a 	srl	r7,r5,r7
1010e084:	11004526 	beq	r2,r4,1010e19c <__subdf3+0x57c>
1010e088:	01001004 	movi	r4,64
1010e08c:	2089c83a 	sub	r4,r4,r2
1010e090:	2904983a 	sll	r2,r5,r4
1010e094:	118cb03a 	or	r6,r2,r6
1010e098:	300cc03a 	cmpne	r6,r6,zero
1010e09c:	398cb03a 	or	r6,r7,r6
1010e0a0:	0005883a 	mov	r2,zero
1010e0a4:	003f3706 	br	1010dd84 <__alt_data_end+0xfffedd84>
1010e0a8:	80002a26 	beq	r16,zero,1010e154 <__subdf3+0x534>
1010e0ac:	0101ffc4 	movi	r4,2047
1010e0b0:	49006626 	beq	r9,r4,1010e24c <__subdf3+0x62c>
1010e0b4:	0085c83a 	sub	r2,zero,r2
1010e0b8:	18c02034 	orhi	r3,r3,128
1010e0bc:	01000e04 	movi	r4,56
1010e0c0:	20807e16 	blt	r4,r2,1010e2bc <__subdf3+0x69c>
1010e0c4:	010007c4 	movi	r4,31
1010e0c8:	2080e716 	blt	r4,r2,1010e468 <__subdf3+0x848>
1010e0cc:	01000804 	movi	r4,32
1010e0d0:	2089c83a 	sub	r4,r4,r2
1010e0d4:	1914983a 	sll	r10,r3,r4
1010e0d8:	8890d83a 	srl	r8,r17,r2
1010e0dc:	8908983a 	sll	r4,r17,r4
1010e0e0:	1884d83a 	srl	r2,r3,r2
1010e0e4:	5222b03a 	or	r17,r10,r8
1010e0e8:	2006c03a 	cmpne	r3,r4,zero
1010e0ec:	88e2b03a 	or	r17,r17,r3
1010e0f0:	3463c83a 	sub	r17,r6,r17
1010e0f4:	2885c83a 	sub	r2,r5,r2
1010e0f8:	344d803a 	cmpltu	r6,r6,r17
1010e0fc:	1187c83a 	sub	r3,r2,r6
1010e100:	4821883a 	mov	r16,r9
1010e104:	3825883a 	mov	r18,r7
1010e108:	003f2306 	br	1010dd98 <__alt_data_end+0xfffedd98>
1010e10c:	24d0b03a 	or	r8,r4,r19
1010e110:	40001b1e 	bne	r8,zero,1010e180 <__subdf3+0x560>
1010e114:	0005883a 	mov	r2,zero
1010e118:	0009883a 	mov	r4,zero
1010e11c:	0021883a 	mov	r16,zero
1010e120:	003f4906 	br	1010de48 <__alt_data_end+0xfffede48>
1010e124:	010007c4 	movi	r4,31
1010e128:	20803a16 	blt	r4,r2,1010e214 <__subdf3+0x5f4>
1010e12c:	01000804 	movi	r4,32
1010e130:	2089c83a 	sub	r4,r4,r2
1010e134:	2912983a 	sll	r9,r5,r4
1010e138:	3090d83a 	srl	r8,r6,r2
1010e13c:	3108983a 	sll	r4,r6,r4
1010e140:	2884d83a 	srl	r2,r5,r2
1010e144:	4a12b03a 	or	r9,r9,r8
1010e148:	2008c03a 	cmpne	r4,r4,zero
1010e14c:	4912b03a 	or	r9,r9,r4
1010e150:	003f4e06 	br	1010de8c <__alt_data_end+0xfffede8c>
1010e154:	1c48b03a 	or	r4,r3,r17
1010e158:	20003c26 	beq	r4,zero,1010e24c <__subdf3+0x62c>
1010e15c:	0084303a 	nor	r2,zero,r2
1010e160:	1000381e 	bne	r2,zero,1010e244 <__subdf3+0x624>
1010e164:	3463c83a 	sub	r17,r6,r17
1010e168:	28c5c83a 	sub	r2,r5,r3
1010e16c:	344d803a 	cmpltu	r6,r6,r17
1010e170:	1187c83a 	sub	r3,r2,r6
1010e174:	4821883a 	mov	r16,r9
1010e178:	3825883a 	mov	r18,r7
1010e17c:	003f0606 	br	1010dd98 <__alt_data_end+0xfffedd98>
1010e180:	2023883a 	mov	r17,r4
1010e184:	003f0906 	br	1010ddac <__alt_data_end+0xfffeddac>
1010e188:	0101ffc4 	movi	r4,2047
1010e18c:	813f3a1e 	bne	r16,r4,1010de78 <__alt_data_end+0xfffede78>
1010e190:	003ec406 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e194:	0005883a 	mov	r2,zero
1010e198:	003fb106 	br	1010e060 <__alt_data_end+0xfffee060>
1010e19c:	0005883a 	mov	r2,zero
1010e1a0:	003fbc06 	br	1010e094 <__alt_data_end+0xfffee094>
1010e1a4:	1c44b03a 	or	r2,r3,r17
1010e1a8:	80008e1e 	bne	r16,zero,1010e3e4 <__subdf3+0x7c4>
1010e1ac:	1000c826 	beq	r2,zero,1010e4d0 <__subdf3+0x8b0>
1010e1b0:	2984b03a 	or	r2,r5,r6
1010e1b4:	103ebb26 	beq	r2,zero,1010dca4 <__alt_data_end+0xfffedca4>
1010e1b8:	8989883a 	add	r4,r17,r6
1010e1bc:	1945883a 	add	r2,r3,r5
1010e1c0:	2447803a 	cmpltu	r3,r4,r17
1010e1c4:	1887883a 	add	r3,r3,r2
1010e1c8:	1880202c 	andhi	r2,r3,128
1010e1cc:	2023883a 	mov	r17,r4
1010e1d0:	103f1626 	beq	r2,zero,1010de2c <__alt_data_end+0xfffede2c>
1010e1d4:	00bfe034 	movhi	r2,65408
1010e1d8:	10bfffc4 	addi	r2,r2,-1
1010e1dc:	5021883a 	mov	r16,r10
1010e1e0:	1886703a 	and	r3,r3,r2
1010e1e4:	003eaf06 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e1e8:	3825883a 	mov	r18,r7
1010e1ec:	003f0f06 	br	1010de2c <__alt_data_end+0xfffede2c>
1010e1f0:	1c44b03a 	or	r2,r3,r17
1010e1f4:	8000251e 	bne	r16,zero,1010e28c <__subdf3+0x66c>
1010e1f8:	1000661e 	bne	r2,zero,1010e394 <__subdf3+0x774>
1010e1fc:	2990b03a 	or	r8,r5,r6
1010e200:	40009626 	beq	r8,zero,1010e45c <__subdf3+0x83c>
1010e204:	2807883a 	mov	r3,r5
1010e208:	3023883a 	mov	r17,r6
1010e20c:	3825883a 	mov	r18,r7
1010e210:	003ea406 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e214:	127ff804 	addi	r9,r2,-32
1010e218:	01000804 	movi	r4,32
1010e21c:	2a52d83a 	srl	r9,r5,r9
1010e220:	11008c26 	beq	r2,r4,1010e454 <__subdf3+0x834>
1010e224:	01001004 	movi	r4,64
1010e228:	2085c83a 	sub	r2,r4,r2
1010e22c:	2884983a 	sll	r2,r5,r2
1010e230:	118cb03a 	or	r6,r2,r6
1010e234:	300cc03a 	cmpne	r6,r6,zero
1010e238:	4992b03a 	or	r9,r9,r6
1010e23c:	0005883a 	mov	r2,zero
1010e240:	003f1206 	br	1010de8c <__alt_data_end+0xfffede8c>
1010e244:	0101ffc4 	movi	r4,2047
1010e248:	493f9c1e 	bne	r9,r4,1010e0bc <__alt_data_end+0xfffee0bc>
1010e24c:	2807883a 	mov	r3,r5
1010e250:	3023883a 	mov	r17,r6
1010e254:	4821883a 	mov	r16,r9
1010e258:	3825883a 	mov	r18,r7
1010e25c:	003e9106 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e260:	80001f1e 	bne	r16,zero,1010e2e0 <__subdf3+0x6c0>
1010e264:	1c48b03a 	or	r4,r3,r17
1010e268:	20005a26 	beq	r4,zero,1010e3d4 <__subdf3+0x7b4>
1010e26c:	0084303a 	nor	r2,zero,r2
1010e270:	1000561e 	bne	r2,zero,1010e3cc <__subdf3+0x7ac>
1010e274:	89a3883a 	add	r17,r17,r6
1010e278:	1945883a 	add	r2,r3,r5
1010e27c:	898d803a 	cmpltu	r6,r17,r6
1010e280:	3087883a 	add	r3,r6,r2
1010e284:	4821883a 	mov	r16,r9
1010e288:	003f0506 	br	1010dea0 <__alt_data_end+0xfffedea0>
1010e28c:	10002b1e 	bne	r2,zero,1010e33c <__subdf3+0x71c>
1010e290:	2984b03a 	or	r2,r5,r6
1010e294:	10008026 	beq	r2,zero,1010e498 <__subdf3+0x878>
1010e298:	2807883a 	mov	r3,r5
1010e29c:	3023883a 	mov	r17,r6
1010e2a0:	3825883a 	mov	r18,r7
1010e2a4:	0401ffc4 	movi	r16,2047
1010e2a8:	003e7e06 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e2ac:	3809883a 	mov	r4,r7
1010e2b0:	0011883a 	mov	r8,zero
1010e2b4:	0005883a 	mov	r2,zero
1010e2b8:	003ee306 	br	1010de48 <__alt_data_end+0xfffede48>
1010e2bc:	1c62b03a 	or	r17,r3,r17
1010e2c0:	8822c03a 	cmpne	r17,r17,zero
1010e2c4:	0005883a 	mov	r2,zero
1010e2c8:	003f8906 	br	1010e0f0 <__alt_data_end+0xfffee0f0>
1010e2cc:	3809883a 	mov	r4,r7
1010e2d0:	4821883a 	mov	r16,r9
1010e2d4:	0011883a 	mov	r8,zero
1010e2d8:	0005883a 	mov	r2,zero
1010e2dc:	003eda06 	br	1010de48 <__alt_data_end+0xfffede48>
1010e2e0:	0101ffc4 	movi	r4,2047
1010e2e4:	49003b26 	beq	r9,r4,1010e3d4 <__subdf3+0x7b4>
1010e2e8:	0085c83a 	sub	r2,zero,r2
1010e2ec:	18c02034 	orhi	r3,r3,128
1010e2f0:	01000e04 	movi	r4,56
1010e2f4:	20806e16 	blt	r4,r2,1010e4b0 <__subdf3+0x890>
1010e2f8:	010007c4 	movi	r4,31
1010e2fc:	20807716 	blt	r4,r2,1010e4dc <__subdf3+0x8bc>
1010e300:	01000804 	movi	r4,32
1010e304:	2089c83a 	sub	r4,r4,r2
1010e308:	1914983a 	sll	r10,r3,r4
1010e30c:	8890d83a 	srl	r8,r17,r2
1010e310:	8908983a 	sll	r4,r17,r4
1010e314:	1884d83a 	srl	r2,r3,r2
1010e318:	5222b03a 	or	r17,r10,r8
1010e31c:	2006c03a 	cmpne	r3,r4,zero
1010e320:	88e2b03a 	or	r17,r17,r3
1010e324:	89a3883a 	add	r17,r17,r6
1010e328:	1145883a 	add	r2,r2,r5
1010e32c:	898d803a 	cmpltu	r6,r17,r6
1010e330:	3087883a 	add	r3,r6,r2
1010e334:	4821883a 	mov	r16,r9
1010e338:	003ed906 	br	1010dea0 <__alt_data_end+0xfffedea0>
1010e33c:	2984b03a 	or	r2,r5,r6
1010e340:	10004226 	beq	r2,zero,1010e44c <__subdf3+0x82c>
1010e344:	1808d0fa 	srli	r4,r3,3
1010e348:	8822d0fa 	srli	r17,r17,3
1010e34c:	1806977a 	slli	r3,r3,29
1010e350:	2080022c 	andhi	r2,r4,8
1010e354:	1c62b03a 	or	r17,r3,r17
1010e358:	10000826 	beq	r2,zero,1010e37c <__subdf3+0x75c>
1010e35c:	2812d0fa 	srli	r9,r5,3
1010e360:	4880022c 	andhi	r2,r9,8
1010e364:	1000051e 	bne	r2,zero,1010e37c <__subdf3+0x75c>
1010e368:	300cd0fa 	srli	r6,r6,3
1010e36c:	2804977a 	slli	r2,r5,29
1010e370:	4809883a 	mov	r4,r9
1010e374:	3825883a 	mov	r18,r7
1010e378:	11a2b03a 	or	r17,r2,r6
1010e37c:	8806d77a 	srli	r3,r17,29
1010e380:	200890fa 	slli	r4,r4,3
1010e384:	882290fa 	slli	r17,r17,3
1010e388:	0401ffc4 	movi	r16,2047
1010e38c:	1906b03a 	or	r3,r3,r4
1010e390:	003e4406 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e394:	2984b03a 	or	r2,r5,r6
1010e398:	103e4226 	beq	r2,zero,1010dca4 <__alt_data_end+0xfffedca4>
1010e39c:	8989c83a 	sub	r4,r17,r6
1010e3a0:	8911803a 	cmpltu	r8,r17,r4
1010e3a4:	1945c83a 	sub	r2,r3,r5
1010e3a8:	1205c83a 	sub	r2,r2,r8
1010e3ac:	1200202c 	andhi	r8,r2,128
1010e3b0:	403e9a26 	beq	r8,zero,1010de1c <__alt_data_end+0xfffede1c>
1010e3b4:	3463c83a 	sub	r17,r6,r17
1010e3b8:	28c5c83a 	sub	r2,r5,r3
1010e3bc:	344d803a 	cmpltu	r6,r6,r17
1010e3c0:	1187c83a 	sub	r3,r2,r6
1010e3c4:	3825883a 	mov	r18,r7
1010e3c8:	003e3606 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e3cc:	0101ffc4 	movi	r4,2047
1010e3d0:	493fc71e 	bne	r9,r4,1010e2f0 <__alt_data_end+0xfffee2f0>
1010e3d4:	2807883a 	mov	r3,r5
1010e3d8:	3023883a 	mov	r17,r6
1010e3dc:	4821883a 	mov	r16,r9
1010e3e0:	003e3006 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e3e4:	10003626 	beq	r2,zero,1010e4c0 <__subdf3+0x8a0>
1010e3e8:	2984b03a 	or	r2,r5,r6
1010e3ec:	10001726 	beq	r2,zero,1010e44c <__subdf3+0x82c>
1010e3f0:	1808d0fa 	srli	r4,r3,3
1010e3f4:	8822d0fa 	srli	r17,r17,3
1010e3f8:	1806977a 	slli	r3,r3,29
1010e3fc:	2080022c 	andhi	r2,r4,8
1010e400:	1c62b03a 	or	r17,r3,r17
1010e404:	10000726 	beq	r2,zero,1010e424 <__subdf3+0x804>
1010e408:	2812d0fa 	srli	r9,r5,3
1010e40c:	4880022c 	andhi	r2,r9,8
1010e410:	1000041e 	bne	r2,zero,1010e424 <__subdf3+0x804>
1010e414:	300cd0fa 	srli	r6,r6,3
1010e418:	2804977a 	slli	r2,r5,29
1010e41c:	4809883a 	mov	r4,r9
1010e420:	11a2b03a 	or	r17,r2,r6
1010e424:	8806d77a 	srli	r3,r17,29
1010e428:	200890fa 	slli	r4,r4,3
1010e42c:	882290fa 	slli	r17,r17,3
1010e430:	3825883a 	mov	r18,r7
1010e434:	1906b03a 	or	r3,r3,r4
1010e438:	0401ffc4 	movi	r16,2047
1010e43c:	003e1906 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e440:	000b883a 	mov	r5,zero
1010e444:	0005883a 	mov	r2,zero
1010e448:	003e2e06 	br	1010dd04 <__alt_data_end+0xfffedd04>
1010e44c:	0401ffc4 	movi	r16,2047
1010e450:	003e1406 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e454:	0005883a 	mov	r2,zero
1010e458:	003f7506 	br	1010e230 <__alt_data_end+0xfffee230>
1010e45c:	0005883a 	mov	r2,zero
1010e460:	0009883a 	mov	r4,zero
1010e464:	003e7806 	br	1010de48 <__alt_data_end+0xfffede48>
1010e468:	123ff804 	addi	r8,r2,-32
1010e46c:	01000804 	movi	r4,32
1010e470:	1a10d83a 	srl	r8,r3,r8
1010e474:	11002526 	beq	r2,r4,1010e50c <__subdf3+0x8ec>
1010e478:	01001004 	movi	r4,64
1010e47c:	2085c83a 	sub	r2,r4,r2
1010e480:	1884983a 	sll	r2,r3,r2
1010e484:	1444b03a 	or	r2,r2,r17
1010e488:	1004c03a 	cmpne	r2,r2,zero
1010e48c:	40a2b03a 	or	r17,r8,r2
1010e490:	0005883a 	mov	r2,zero
1010e494:	003f1606 	br	1010e0f0 <__alt_data_end+0xfffee0f0>
1010e498:	02000434 	movhi	r8,16
1010e49c:	0009883a 	mov	r4,zero
1010e4a0:	423fffc4 	addi	r8,r8,-1
1010e4a4:	00bfffc4 	movi	r2,-1
1010e4a8:	0401ffc4 	movi	r16,2047
1010e4ac:	003e6606 	br	1010de48 <__alt_data_end+0xfffede48>
1010e4b0:	1c62b03a 	or	r17,r3,r17
1010e4b4:	8822c03a 	cmpne	r17,r17,zero
1010e4b8:	0005883a 	mov	r2,zero
1010e4bc:	003f9906 	br	1010e324 <__alt_data_end+0xfffee324>
1010e4c0:	2807883a 	mov	r3,r5
1010e4c4:	3023883a 	mov	r17,r6
1010e4c8:	0401ffc4 	movi	r16,2047
1010e4cc:	003df506 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e4d0:	2807883a 	mov	r3,r5
1010e4d4:	3023883a 	mov	r17,r6
1010e4d8:	003df206 	br	1010dca4 <__alt_data_end+0xfffedca4>
1010e4dc:	123ff804 	addi	r8,r2,-32
1010e4e0:	01000804 	movi	r4,32
1010e4e4:	1a10d83a 	srl	r8,r3,r8
1010e4e8:	11000a26 	beq	r2,r4,1010e514 <__subdf3+0x8f4>
1010e4ec:	01001004 	movi	r4,64
1010e4f0:	2085c83a 	sub	r2,r4,r2
1010e4f4:	1884983a 	sll	r2,r3,r2
1010e4f8:	1444b03a 	or	r2,r2,r17
1010e4fc:	1004c03a 	cmpne	r2,r2,zero
1010e500:	40a2b03a 	or	r17,r8,r2
1010e504:	0005883a 	mov	r2,zero
1010e508:	003f8606 	br	1010e324 <__alt_data_end+0xfffee324>
1010e50c:	0005883a 	mov	r2,zero
1010e510:	003fdc06 	br	1010e484 <__alt_data_end+0xfffee484>
1010e514:	0005883a 	mov	r2,zero
1010e518:	003ff706 	br	1010e4f8 <__alt_data_end+0xfffee4f8>

1010e51c <__fixdfsi>:
1010e51c:	280cd53a 	srli	r6,r5,20
1010e520:	00c00434 	movhi	r3,16
1010e524:	18ffffc4 	addi	r3,r3,-1
1010e528:	3181ffcc 	andi	r6,r6,2047
1010e52c:	01c0ff84 	movi	r7,1022
1010e530:	28c6703a 	and	r3,r5,r3
1010e534:	280ad7fa 	srli	r5,r5,31
1010e538:	3980120e 	bge	r7,r6,1010e584 <__fixdfsi+0x68>
1010e53c:	00810744 	movi	r2,1053
1010e540:	11800c16 	blt	r2,r6,1010e574 <__fixdfsi+0x58>
1010e544:	00810cc4 	movi	r2,1075
1010e548:	1185c83a 	sub	r2,r2,r6
1010e54c:	01c007c4 	movi	r7,31
1010e550:	18c00434 	orhi	r3,r3,16
1010e554:	38800d16 	blt	r7,r2,1010e58c <__fixdfsi+0x70>
1010e558:	31befb44 	addi	r6,r6,-1043
1010e55c:	2084d83a 	srl	r2,r4,r2
1010e560:	1986983a 	sll	r3,r3,r6
1010e564:	1884b03a 	or	r2,r3,r2
1010e568:	28000726 	beq	r5,zero,1010e588 <__fixdfsi+0x6c>
1010e56c:	0085c83a 	sub	r2,zero,r2
1010e570:	f800283a 	ret
1010e574:	00a00034 	movhi	r2,32768
1010e578:	10bfffc4 	addi	r2,r2,-1
1010e57c:	2885883a 	add	r2,r5,r2
1010e580:	f800283a 	ret
1010e584:	0005883a 	mov	r2,zero
1010e588:	f800283a 	ret
1010e58c:	008104c4 	movi	r2,1043
1010e590:	1185c83a 	sub	r2,r2,r6
1010e594:	1884d83a 	srl	r2,r3,r2
1010e598:	003ff306 	br	1010e568 <__alt_data_end+0xfffee568>

1010e59c <__floatsidf>:
1010e59c:	defffd04 	addi	sp,sp,-12
1010e5a0:	dfc00215 	stw	ra,8(sp)
1010e5a4:	dc400115 	stw	r17,4(sp)
1010e5a8:	dc000015 	stw	r16,0(sp)
1010e5ac:	20002b26 	beq	r4,zero,1010e65c <__floatsidf+0xc0>
1010e5b0:	2023883a 	mov	r17,r4
1010e5b4:	2020d7fa 	srli	r16,r4,31
1010e5b8:	20002d16 	blt	r4,zero,1010e670 <__floatsidf+0xd4>
1010e5bc:	8809883a 	mov	r4,r17
1010e5c0:	010e7200 	call	1010e720 <__clzsi2>
1010e5c4:	01410784 	movi	r5,1054
1010e5c8:	288bc83a 	sub	r5,r5,r2
1010e5cc:	01010cc4 	movi	r4,1075
1010e5d0:	2149c83a 	sub	r4,r4,r5
1010e5d4:	00c007c4 	movi	r3,31
1010e5d8:	1900160e 	bge	r3,r4,1010e634 <__floatsidf+0x98>
1010e5dc:	00c104c4 	movi	r3,1043
1010e5e0:	1947c83a 	sub	r3,r3,r5
1010e5e4:	88c6983a 	sll	r3,r17,r3
1010e5e8:	00800434 	movhi	r2,16
1010e5ec:	10bfffc4 	addi	r2,r2,-1
1010e5f0:	1886703a 	and	r3,r3,r2
1010e5f4:	2941ffcc 	andi	r5,r5,2047
1010e5f8:	800d883a 	mov	r6,r16
1010e5fc:	0005883a 	mov	r2,zero
1010e600:	280a953a 	slli	r5,r5,20
1010e604:	31803fcc 	andi	r6,r6,255
1010e608:	01000434 	movhi	r4,16
1010e60c:	300c97fa 	slli	r6,r6,31
1010e610:	213fffc4 	addi	r4,r4,-1
1010e614:	1906703a 	and	r3,r3,r4
1010e618:	1946b03a 	or	r3,r3,r5
1010e61c:	1986b03a 	or	r3,r3,r6
1010e620:	dfc00217 	ldw	ra,8(sp)
1010e624:	dc400117 	ldw	r17,4(sp)
1010e628:	dc000017 	ldw	r16,0(sp)
1010e62c:	dec00304 	addi	sp,sp,12
1010e630:	f800283a 	ret
1010e634:	00c002c4 	movi	r3,11
1010e638:	1887c83a 	sub	r3,r3,r2
1010e63c:	88c6d83a 	srl	r3,r17,r3
1010e640:	8904983a 	sll	r2,r17,r4
1010e644:	01000434 	movhi	r4,16
1010e648:	213fffc4 	addi	r4,r4,-1
1010e64c:	2941ffcc 	andi	r5,r5,2047
1010e650:	1906703a 	and	r3,r3,r4
1010e654:	800d883a 	mov	r6,r16
1010e658:	003fe906 	br	1010e600 <__alt_data_end+0xfffee600>
1010e65c:	000d883a 	mov	r6,zero
1010e660:	000b883a 	mov	r5,zero
1010e664:	0007883a 	mov	r3,zero
1010e668:	0005883a 	mov	r2,zero
1010e66c:	003fe406 	br	1010e600 <__alt_data_end+0xfffee600>
1010e670:	0123c83a 	sub	r17,zero,r4
1010e674:	003fd106 	br	1010e5bc <__alt_data_end+0xfffee5bc>

1010e678 <__floatunsidf>:
1010e678:	defffe04 	addi	sp,sp,-8
1010e67c:	dc000015 	stw	r16,0(sp)
1010e680:	dfc00115 	stw	ra,4(sp)
1010e684:	2021883a 	mov	r16,r4
1010e688:	20002226 	beq	r4,zero,1010e714 <__floatunsidf+0x9c>
1010e68c:	010e7200 	call	1010e720 <__clzsi2>
1010e690:	01010784 	movi	r4,1054
1010e694:	2089c83a 	sub	r4,r4,r2
1010e698:	01810cc4 	movi	r6,1075
1010e69c:	310dc83a 	sub	r6,r6,r4
1010e6a0:	00c007c4 	movi	r3,31
1010e6a4:	1980120e 	bge	r3,r6,1010e6f0 <__floatunsidf+0x78>
1010e6a8:	00c104c4 	movi	r3,1043
1010e6ac:	1907c83a 	sub	r3,r3,r4
1010e6b0:	80ca983a 	sll	r5,r16,r3
1010e6b4:	00800434 	movhi	r2,16
1010e6b8:	10bfffc4 	addi	r2,r2,-1
1010e6bc:	2101ffcc 	andi	r4,r4,2047
1010e6c0:	0021883a 	mov	r16,zero
1010e6c4:	288a703a 	and	r5,r5,r2
1010e6c8:	2008953a 	slli	r4,r4,20
1010e6cc:	00c00434 	movhi	r3,16
1010e6d0:	18ffffc4 	addi	r3,r3,-1
1010e6d4:	28c6703a 	and	r3,r5,r3
1010e6d8:	8005883a 	mov	r2,r16
1010e6dc:	1906b03a 	or	r3,r3,r4
1010e6e0:	dfc00117 	ldw	ra,4(sp)
1010e6e4:	dc000017 	ldw	r16,0(sp)
1010e6e8:	dec00204 	addi	sp,sp,8
1010e6ec:	f800283a 	ret
1010e6f0:	00c002c4 	movi	r3,11
1010e6f4:	188bc83a 	sub	r5,r3,r2
1010e6f8:	814ad83a 	srl	r5,r16,r5
1010e6fc:	00c00434 	movhi	r3,16
1010e700:	18ffffc4 	addi	r3,r3,-1
1010e704:	81a0983a 	sll	r16,r16,r6
1010e708:	2101ffcc 	andi	r4,r4,2047
1010e70c:	28ca703a 	and	r5,r5,r3
1010e710:	003fed06 	br	1010e6c8 <__alt_data_end+0xfffee6c8>
1010e714:	0009883a 	mov	r4,zero
1010e718:	000b883a 	mov	r5,zero
1010e71c:	003fea06 	br	1010e6c8 <__alt_data_end+0xfffee6c8>

1010e720 <__clzsi2>:
1010e720:	00bfffd4 	movui	r2,65535
1010e724:	11000536 	bltu	r2,r4,1010e73c <__clzsi2+0x1c>
1010e728:	00803fc4 	movi	r2,255
1010e72c:	11000f36 	bltu	r2,r4,1010e76c <__clzsi2+0x4c>
1010e730:	00800804 	movi	r2,32
1010e734:	0007883a 	mov	r3,zero
1010e738:	00000506 	br	1010e750 <__clzsi2+0x30>
1010e73c:	00804034 	movhi	r2,256
1010e740:	10bfffc4 	addi	r2,r2,-1
1010e744:	11000c2e 	bgeu	r2,r4,1010e778 <__clzsi2+0x58>
1010e748:	00800204 	movi	r2,8
1010e74c:	00c00604 	movi	r3,24
1010e750:	20c8d83a 	srl	r4,r4,r3
1010e754:	00c40474 	movhi	r3,4113
1010e758:	18c60a04 	addi	r3,r3,6184
1010e75c:	1909883a 	add	r4,r3,r4
1010e760:	20c00003 	ldbu	r3,0(r4)
1010e764:	10c5c83a 	sub	r2,r2,r3
1010e768:	f800283a 	ret
1010e76c:	00800604 	movi	r2,24
1010e770:	00c00204 	movi	r3,8
1010e774:	003ff606 	br	1010e750 <__alt_data_end+0xfffee750>
1010e778:	00800404 	movi	r2,16
1010e77c:	1007883a 	mov	r3,r2
1010e780:	003ff306 	br	1010e750 <__alt_data_end+0xfffee750>

1010e784 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e784:	defffe04 	addi	sp,sp,-8
1010e788:	dfc00115 	stw	ra,4(sp)
1010e78c:	df000015 	stw	fp,0(sp)
1010e790:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e794:	00840474 	movhi	r2,4113
1010e798:	108d1a04 	addi	r2,r2,13416
1010e79c:	10800017 	ldw	r2,0(r2)
1010e7a0:	10000526 	beq	r2,zero,1010e7b8 <alt_get_errno+0x34>
1010e7a4:	00840474 	movhi	r2,4113
1010e7a8:	108d1a04 	addi	r2,r2,13416
1010e7ac:	10800017 	ldw	r2,0(r2)
1010e7b0:	103ee83a 	callr	r2
1010e7b4:	00000206 	br	1010e7c0 <alt_get_errno+0x3c>
1010e7b8:	00840474 	movhi	r2,4113
1010e7bc:	10940804 	addi	r2,r2,20512
}
1010e7c0:	e037883a 	mov	sp,fp
1010e7c4:	dfc00117 	ldw	ra,4(sp)
1010e7c8:	df000017 	ldw	fp,0(sp)
1010e7cc:	dec00204 	addi	sp,sp,8
1010e7d0:	f800283a 	ret

1010e7d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010e7d4:	defffb04 	addi	sp,sp,-20
1010e7d8:	dfc00415 	stw	ra,16(sp)
1010e7dc:	df000315 	stw	fp,12(sp)
1010e7e0:	df000304 	addi	fp,sp,12
1010e7e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010e7e8:	e0bfff17 	ldw	r2,-4(fp)
1010e7ec:	10000616 	blt	r2,zero,1010e808 <close+0x34>
1010e7f0:	e0bfff17 	ldw	r2,-4(fp)
1010e7f4:	10c00324 	muli	r3,r2,12
1010e7f8:	00840474 	movhi	r2,4113
1010e7fc:	10888d04 	addi	r2,r2,8756
1010e800:	1885883a 	add	r2,r3,r2
1010e804:	00000106 	br	1010e80c <close+0x38>
1010e808:	0005883a 	mov	r2,zero
1010e80c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010e810:	e0bffd17 	ldw	r2,-12(fp)
1010e814:	10001926 	beq	r2,zero,1010e87c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010e818:	e0bffd17 	ldw	r2,-12(fp)
1010e81c:	10800017 	ldw	r2,0(r2)
1010e820:	10800417 	ldw	r2,16(r2)
1010e824:	10000626 	beq	r2,zero,1010e840 <close+0x6c>
1010e828:	e0bffd17 	ldw	r2,-12(fp)
1010e82c:	10800017 	ldw	r2,0(r2)
1010e830:	10800417 	ldw	r2,16(r2)
1010e834:	e13ffd17 	ldw	r4,-12(fp)
1010e838:	103ee83a 	callr	r2
1010e83c:	00000106 	br	1010e844 <close+0x70>
1010e840:	0005883a 	mov	r2,zero
1010e844:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010e848:	e13fff17 	ldw	r4,-4(fp)
1010e84c:	010f1580 	call	1010f158 <alt_release_fd>
    if (rval < 0)
1010e850:	e0bffe17 	ldw	r2,-8(fp)
1010e854:	1000070e 	bge	r2,zero,1010e874 <close+0xa0>
    {
      ALT_ERRNO = -rval;
1010e858:	010e7840 	call	1010e784 <alt_get_errno>
1010e85c:	1007883a 	mov	r3,r2
1010e860:	e0bffe17 	ldw	r2,-8(fp)
1010e864:	0085c83a 	sub	r2,zero,r2
1010e868:	18800015 	stw	r2,0(r3)
      return -1;
1010e86c:	00bfffc4 	movi	r2,-1
1010e870:	00000706 	br	1010e890 <close+0xbc>
    }
    return 0;
1010e874:	0005883a 	mov	r2,zero
1010e878:	00000506 	br	1010e890 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e87c:	010e7840 	call	1010e784 <alt_get_errno>
1010e880:	1007883a 	mov	r3,r2
1010e884:	00801444 	movi	r2,81
1010e888:	18800015 	stw	r2,0(r3)
    return -1;
1010e88c:	00bfffc4 	movi	r2,-1
  }
}
1010e890:	e037883a 	mov	sp,fp
1010e894:	dfc00117 	ldw	ra,4(sp)
1010e898:	df000017 	ldw	fp,0(sp)
1010e89c:	dec00204 	addi	sp,sp,8
1010e8a0:	f800283a 	ret

1010e8a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010e8a4:	defffc04 	addi	sp,sp,-16
1010e8a8:	df000315 	stw	fp,12(sp)
1010e8ac:	df000304 	addi	fp,sp,12
1010e8b0:	e13ffd15 	stw	r4,-12(fp)
1010e8b4:	e17ffe15 	stw	r5,-8(fp)
1010e8b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010e8bc:	e0bfff17 	ldw	r2,-4(fp)
}
1010e8c0:	e037883a 	mov	sp,fp
1010e8c4:	df000017 	ldw	fp,0(sp)
1010e8c8:	dec00104 	addi	sp,sp,4
1010e8cc:	f800283a 	ret

1010e8d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e8d0:	defffe04 	addi	sp,sp,-8
1010e8d4:	dfc00115 	stw	ra,4(sp)
1010e8d8:	df000015 	stw	fp,0(sp)
1010e8dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e8e0:	00840474 	movhi	r2,4113
1010e8e4:	108d1a04 	addi	r2,r2,13416
1010e8e8:	10800017 	ldw	r2,0(r2)
1010e8ec:	10000526 	beq	r2,zero,1010e904 <alt_get_errno+0x34>
1010e8f0:	00840474 	movhi	r2,4113
1010e8f4:	108d1a04 	addi	r2,r2,13416
1010e8f8:	10800017 	ldw	r2,0(r2)
1010e8fc:	103ee83a 	callr	r2
1010e900:	00000206 	br	1010e90c <alt_get_errno+0x3c>
1010e904:	00840474 	movhi	r2,4113
1010e908:	10940804 	addi	r2,r2,20512
}
1010e90c:	e037883a 	mov	sp,fp
1010e910:	dfc00117 	ldw	ra,4(sp)
1010e914:	df000017 	ldw	fp,0(sp)
1010e918:	dec00204 	addi	sp,sp,8
1010e91c:	f800283a 	ret

1010e920 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010e920:	defffb04 	addi	sp,sp,-20
1010e924:	dfc00415 	stw	ra,16(sp)
1010e928:	df000315 	stw	fp,12(sp)
1010e92c:	df000304 	addi	fp,sp,12
1010e930:	e13ffe15 	stw	r4,-8(fp)
1010e934:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e938:	e0bffe17 	ldw	r2,-8(fp)
1010e93c:	10000616 	blt	r2,zero,1010e958 <fstat+0x38>
1010e940:	e0bffe17 	ldw	r2,-8(fp)
1010e944:	10c00324 	muli	r3,r2,12
1010e948:	00840474 	movhi	r2,4113
1010e94c:	10888d04 	addi	r2,r2,8756
1010e950:	1885883a 	add	r2,r3,r2
1010e954:	00000106 	br	1010e95c <fstat+0x3c>
1010e958:	0005883a 	mov	r2,zero
1010e95c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010e960:	e0bffd17 	ldw	r2,-12(fp)
1010e964:	10001026 	beq	r2,zero,1010e9a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010e968:	e0bffd17 	ldw	r2,-12(fp)
1010e96c:	10800017 	ldw	r2,0(r2)
1010e970:	10800817 	ldw	r2,32(r2)
1010e974:	10000726 	beq	r2,zero,1010e994 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
1010e978:	e0bffd17 	ldw	r2,-12(fp)
1010e97c:	10800017 	ldw	r2,0(r2)
1010e980:	10800817 	ldw	r2,32(r2)
1010e984:	e17fff17 	ldw	r5,-4(fp)
1010e988:	e13ffd17 	ldw	r4,-12(fp)
1010e98c:	103ee83a 	callr	r2
1010e990:	00000a06 	br	1010e9bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010e994:	e0bfff17 	ldw	r2,-4(fp)
1010e998:	00c80004 	movi	r3,8192
1010e99c:	10c00115 	stw	r3,4(r2)
      return 0;
1010e9a0:	0005883a 	mov	r2,zero
1010e9a4:	00000506 	br	1010e9bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010e9a8:	010e8d00 	call	1010e8d0 <alt_get_errno>
1010e9ac:	1007883a 	mov	r3,r2
1010e9b0:	00801444 	movi	r2,81
1010e9b4:	18800015 	stw	r2,0(r3)
    return -1;
1010e9b8:	00bfffc4 	movi	r2,-1
  }
}
1010e9bc:	e037883a 	mov	sp,fp
1010e9c0:	dfc00117 	ldw	ra,4(sp)
1010e9c4:	df000017 	ldw	fp,0(sp)
1010e9c8:	dec00204 	addi	sp,sp,8
1010e9cc:	f800283a 	ret

1010e9d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e9d0:	defffe04 	addi	sp,sp,-8
1010e9d4:	dfc00115 	stw	ra,4(sp)
1010e9d8:	df000015 	stw	fp,0(sp)
1010e9dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e9e0:	00840474 	movhi	r2,4113
1010e9e4:	108d1a04 	addi	r2,r2,13416
1010e9e8:	10800017 	ldw	r2,0(r2)
1010e9ec:	10000526 	beq	r2,zero,1010ea04 <alt_get_errno+0x34>
1010e9f0:	00840474 	movhi	r2,4113
1010e9f4:	108d1a04 	addi	r2,r2,13416
1010e9f8:	10800017 	ldw	r2,0(r2)
1010e9fc:	103ee83a 	callr	r2
1010ea00:	00000206 	br	1010ea0c <alt_get_errno+0x3c>
1010ea04:	00840474 	movhi	r2,4113
1010ea08:	10940804 	addi	r2,r2,20512
}
1010ea0c:	e037883a 	mov	sp,fp
1010ea10:	dfc00117 	ldw	ra,4(sp)
1010ea14:	df000017 	ldw	fp,0(sp)
1010ea18:	dec00204 	addi	sp,sp,8
1010ea1c:	f800283a 	ret

1010ea20 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010ea20:	deffed04 	addi	sp,sp,-76
1010ea24:	dfc01215 	stw	ra,72(sp)
1010ea28:	df001115 	stw	fp,68(sp)
1010ea2c:	df001104 	addi	fp,sp,68
1010ea30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ea34:	e0bfff17 	ldw	r2,-4(fp)
1010ea38:	10000616 	blt	r2,zero,1010ea54 <isatty+0x34>
1010ea3c:	e0bfff17 	ldw	r2,-4(fp)
1010ea40:	10c00324 	muli	r3,r2,12
1010ea44:	00840474 	movhi	r2,4113
1010ea48:	10888d04 	addi	r2,r2,8756
1010ea4c:	1885883a 	add	r2,r3,r2
1010ea50:	00000106 	br	1010ea58 <isatty+0x38>
1010ea54:	0005883a 	mov	r2,zero
1010ea58:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010ea5c:	e0bfef17 	ldw	r2,-68(fp)
1010ea60:	10000e26 	beq	r2,zero,1010ea9c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010ea64:	e0bfef17 	ldw	r2,-68(fp)
1010ea68:	10800017 	ldw	r2,0(r2)
1010ea6c:	10800817 	ldw	r2,32(r2)
1010ea70:	1000021e 	bne	r2,zero,1010ea7c <isatty+0x5c>
    {
      return 1;
1010ea74:	00800044 	movi	r2,1
1010ea78:	00000d06 	br	1010eab0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010ea7c:	e0bff004 	addi	r2,fp,-64
1010ea80:	100b883a 	mov	r5,r2
1010ea84:	e13fff17 	ldw	r4,-4(fp)
1010ea88:	010e9200 	call	1010e920 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010ea8c:	e0bff117 	ldw	r2,-60(fp)
1010ea90:	10880020 	cmpeqi	r2,r2,8192
1010ea94:	10803fcc 	andi	r2,r2,255
1010ea98:	00000506 	br	1010eab0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010ea9c:	010e9d00 	call	1010e9d0 <alt_get_errno>
1010eaa0:	1007883a 	mov	r3,r2
1010eaa4:	00801444 	movi	r2,81
1010eaa8:	18800015 	stw	r2,0(r3)
    return 0;
1010eaac:	0005883a 	mov	r2,zero
  }
}
1010eab0:	e037883a 	mov	sp,fp
1010eab4:	dfc00117 	ldw	ra,4(sp)
1010eab8:	df000017 	ldw	fp,0(sp)
1010eabc:	dec00204 	addi	sp,sp,8
1010eac0:	f800283a 	ret

1010eac4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010eac4:	defffc04 	addi	sp,sp,-16
1010eac8:	df000315 	stw	fp,12(sp)
1010eacc:	df000304 	addi	fp,sp,12
1010ead0:	e13ffd15 	stw	r4,-12(fp)
1010ead4:	e17ffe15 	stw	r5,-8(fp)
1010ead8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010eadc:	e0fffe17 	ldw	r3,-8(fp)
1010eae0:	e0bffd17 	ldw	r2,-12(fp)
1010eae4:	18800c26 	beq	r3,r2,1010eb18 <alt_load_section+0x54>
  {
    while( to != end )
1010eae8:	00000806 	br	1010eb0c <alt_load_section+0x48>
    {
      *to++ = *from++;
1010eaec:	e0bffe17 	ldw	r2,-8(fp)
1010eaf0:	10c00104 	addi	r3,r2,4
1010eaf4:	e0fffe15 	stw	r3,-8(fp)
1010eaf8:	e0fffd17 	ldw	r3,-12(fp)
1010eafc:	19000104 	addi	r4,r3,4
1010eb00:	e13ffd15 	stw	r4,-12(fp)
1010eb04:	18c00017 	ldw	r3,0(r3)
1010eb08:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010eb0c:	e0fffe17 	ldw	r3,-8(fp)
1010eb10:	e0bfff17 	ldw	r2,-4(fp)
1010eb14:	18bff51e 	bne	r3,r2,1010eaec <__alt_data_end+0xfffeeaec>
    {
      *to++ = *from++;
    }
  }
}
1010eb18:	0001883a 	nop
1010eb1c:	e037883a 	mov	sp,fp
1010eb20:	df000017 	ldw	fp,0(sp)
1010eb24:	dec00104 	addi	sp,sp,4
1010eb28:	f800283a 	ret

1010eb2c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010eb2c:	defffe04 	addi	sp,sp,-8
1010eb30:	dfc00115 	stw	ra,4(sp)
1010eb34:	df000015 	stw	fp,0(sp)
1010eb38:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010eb3c:	01840474 	movhi	r6,4113
1010eb40:	318d3104 	addi	r6,r6,13508
1010eb44:	01440474 	movhi	r5,4113
1010eb48:	29465a04 	addi	r5,r5,6504
1010eb4c:	01040474 	movhi	r4,4113
1010eb50:	210d3104 	addi	r4,r4,13508
1010eb54:	010eac40 	call	1010eac4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010eb58:	01840434 	movhi	r6,4112
1010eb5c:	31809104 	addi	r6,r6,580
1010eb60:	01440434 	movhi	r5,4112
1010eb64:	29400804 	addi	r5,r5,32
1010eb68:	01040434 	movhi	r4,4112
1010eb6c:	21000804 	addi	r4,r4,32
1010eb70:	010eac40 	call	1010eac4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010eb74:	01840474 	movhi	r6,4113
1010eb78:	31865a04 	addi	r6,r6,6504
1010eb7c:	01440474 	movhi	r5,4113
1010eb80:	29457804 	addi	r5,r5,5600
1010eb84:	01040474 	movhi	r4,4113
1010eb88:	21057804 	addi	r4,r4,5600
1010eb8c:	010eac40 	call	1010eac4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010eb90:	011063c0 	call	1011063c <alt_dcache_flush_all>
  alt_icache_flush_all();
1010eb94:	0110b140 	call	10110b14 <alt_icache_flush_all>
}
1010eb98:	0001883a 	nop
1010eb9c:	e037883a 	mov	sp,fp
1010eba0:	dfc00117 	ldw	ra,4(sp)
1010eba4:	df000017 	ldw	fp,0(sp)
1010eba8:	dec00204 	addi	sp,sp,8
1010ebac:	f800283a 	ret

1010ebb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ebb0:	defffe04 	addi	sp,sp,-8
1010ebb4:	dfc00115 	stw	ra,4(sp)
1010ebb8:	df000015 	stw	fp,0(sp)
1010ebbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010ebc0:	00840474 	movhi	r2,4113
1010ebc4:	108d1a04 	addi	r2,r2,13416
1010ebc8:	10800017 	ldw	r2,0(r2)
1010ebcc:	10000526 	beq	r2,zero,1010ebe4 <alt_get_errno+0x34>
1010ebd0:	00840474 	movhi	r2,4113
1010ebd4:	108d1a04 	addi	r2,r2,13416
1010ebd8:	10800017 	ldw	r2,0(r2)
1010ebdc:	103ee83a 	callr	r2
1010ebe0:	00000206 	br	1010ebec <alt_get_errno+0x3c>
1010ebe4:	00840474 	movhi	r2,4113
1010ebe8:	10940804 	addi	r2,r2,20512
}
1010ebec:	e037883a 	mov	sp,fp
1010ebf0:	dfc00117 	ldw	ra,4(sp)
1010ebf4:	df000017 	ldw	fp,0(sp)
1010ebf8:	dec00204 	addi	sp,sp,8
1010ebfc:	f800283a 	ret

1010ec00 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010ec00:	defff904 	addi	sp,sp,-28
1010ec04:	dfc00615 	stw	ra,24(sp)
1010ec08:	df000515 	stw	fp,20(sp)
1010ec0c:	df000504 	addi	fp,sp,20
1010ec10:	e13ffd15 	stw	r4,-12(fp)
1010ec14:	e17ffe15 	stw	r5,-8(fp)
1010ec18:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010ec1c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010ec20:	e0bffd17 	ldw	r2,-12(fp)
1010ec24:	10000616 	blt	r2,zero,1010ec40 <lseek+0x40>
1010ec28:	e0bffd17 	ldw	r2,-12(fp)
1010ec2c:	10c00324 	muli	r3,r2,12
1010ec30:	00840474 	movhi	r2,4113
1010ec34:	10888d04 	addi	r2,r2,8756
1010ec38:	1885883a 	add	r2,r3,r2
1010ec3c:	00000106 	br	1010ec44 <lseek+0x44>
1010ec40:	0005883a 	mov	r2,zero
1010ec44:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010ec48:	e0bffc17 	ldw	r2,-16(fp)
1010ec4c:	10001026 	beq	r2,zero,1010ec90 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010ec50:	e0bffc17 	ldw	r2,-16(fp)
1010ec54:	10800017 	ldw	r2,0(r2)
1010ec58:	10800717 	ldw	r2,28(r2)
1010ec5c:	10000926 	beq	r2,zero,1010ec84 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010ec60:	e0bffc17 	ldw	r2,-16(fp)
1010ec64:	10800017 	ldw	r2,0(r2)
1010ec68:	10800717 	ldw	r2,28(r2)
1010ec6c:	e1bfff17 	ldw	r6,-4(fp)
1010ec70:	e17ffe17 	ldw	r5,-8(fp)
1010ec74:	e13ffc17 	ldw	r4,-16(fp)
1010ec78:	103ee83a 	callr	r2
1010ec7c:	e0bffb15 	stw	r2,-20(fp)
1010ec80:	00000506 	br	1010ec98 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010ec84:	00bfde84 	movi	r2,-134
1010ec88:	e0bffb15 	stw	r2,-20(fp)
1010ec8c:	00000206 	br	1010ec98 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
1010ec90:	00bfebc4 	movi	r2,-81
1010ec94:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010ec98:	e0bffb17 	ldw	r2,-20(fp)
1010ec9c:	1000070e 	bge	r2,zero,1010ecbc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
1010eca0:	010ebb00 	call	1010ebb0 <alt_get_errno>
1010eca4:	1007883a 	mov	r3,r2
1010eca8:	e0bffb17 	ldw	r2,-20(fp)
1010ecac:	0085c83a 	sub	r2,zero,r2
1010ecb0:	18800015 	stw	r2,0(r3)
    rc = -1;
1010ecb4:	00bfffc4 	movi	r2,-1
1010ecb8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010ecbc:	e0bffb17 	ldw	r2,-20(fp)
}
1010ecc0:	e037883a 	mov	sp,fp
1010ecc4:	dfc00117 	ldw	ra,4(sp)
1010ecc8:	df000017 	ldw	fp,0(sp)
1010eccc:	dec00204 	addi	sp,sp,8
1010ecd0:	f800283a 	ret

1010ecd4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010ecd4:	defffd04 	addi	sp,sp,-12
1010ecd8:	dfc00215 	stw	ra,8(sp)
1010ecdc:	df000115 	stw	fp,4(sp)
1010ece0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010ece4:	0009883a 	mov	r4,zero
1010ece8:	010f41c0 	call	1010f41c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010ecec:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010ecf0:	010f4540 	call	1010f454 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010ecf4:	01840474 	movhi	r6,4113
1010ecf8:	31864d04 	addi	r6,r6,6452
1010ecfc:	01440474 	movhi	r5,4113
1010ed00:	29464d04 	addi	r5,r5,6452
1010ed04:	01040474 	movhi	r4,4113
1010ed08:	21064d04 	addi	r4,r4,6452
1010ed0c:	0110edc0 	call	10110edc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010ed10:	01107780 	call	10110778 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010ed14:	01040474 	movhi	r4,4113
1010ed18:	2101f604 	addi	r4,r4,2008
1010ed1c:	011124c0 	call	1011124c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010ed20:	d0a70017 	ldw	r2,-25600(gp)
1010ed24:	d0e70117 	ldw	r3,-25596(gp)
1010ed28:	d1270217 	ldw	r4,-25592(gp)
1010ed2c:	200d883a 	mov	r6,r4
1010ed30:	180b883a 	mov	r5,r3
1010ed34:	1009883a 	mov	r4,r2
1010ed38:	0100b440 	call	10100b44 <main>
1010ed3c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010ed40:	01000044 	movi	r4,1
1010ed44:	010e7d40 	call	1010e7d4 <close>
  exit (result);
1010ed48:	e13fff17 	ldw	r4,-4(fp)
1010ed4c:	01112600 	call	10111260 <exit>

1010ed50 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010ed50:	defffe04 	addi	sp,sp,-8
1010ed54:	df000115 	stw	fp,4(sp)
1010ed58:	df000104 	addi	fp,sp,4
1010ed5c:	e13fff15 	stw	r4,-4(fp)
}
1010ed60:	0001883a 	nop
1010ed64:	e037883a 	mov	sp,fp
1010ed68:	df000017 	ldw	fp,0(sp)
1010ed6c:	dec00104 	addi	sp,sp,4
1010ed70:	f800283a 	ret

1010ed74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010ed74:	defffe04 	addi	sp,sp,-8
1010ed78:	df000115 	stw	fp,4(sp)
1010ed7c:	df000104 	addi	fp,sp,4
1010ed80:	e13fff15 	stw	r4,-4(fp)
}
1010ed84:	0001883a 	nop
1010ed88:	e037883a 	mov	sp,fp
1010ed8c:	df000017 	ldw	fp,0(sp)
1010ed90:	dec00104 	addi	sp,sp,4
1010ed94:	f800283a 	ret

1010ed98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010ed98:	defffe04 	addi	sp,sp,-8
1010ed9c:	dfc00115 	stw	ra,4(sp)
1010eda0:	df000015 	stw	fp,0(sp)
1010eda4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010eda8:	00840474 	movhi	r2,4113
1010edac:	108d1a04 	addi	r2,r2,13416
1010edb0:	10800017 	ldw	r2,0(r2)
1010edb4:	10000526 	beq	r2,zero,1010edcc <alt_get_errno+0x34>
1010edb8:	00840474 	movhi	r2,4113
1010edbc:	108d1a04 	addi	r2,r2,13416
1010edc0:	10800017 	ldw	r2,0(r2)
1010edc4:	103ee83a 	callr	r2
1010edc8:	00000206 	br	1010edd4 <alt_get_errno+0x3c>
1010edcc:	00840474 	movhi	r2,4113
1010edd0:	10940804 	addi	r2,r2,20512
}
1010edd4:	e037883a 	mov	sp,fp
1010edd8:	dfc00117 	ldw	ra,4(sp)
1010eddc:	df000017 	ldw	fp,0(sp)
1010ede0:	dec00204 	addi	sp,sp,8
1010ede4:	f800283a 	ret

1010ede8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010ede8:	defffd04 	addi	sp,sp,-12
1010edec:	df000215 	stw	fp,8(sp)
1010edf0:	df000204 	addi	fp,sp,8
1010edf4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010edf8:	e0bfff17 	ldw	r2,-4(fp)
1010edfc:	10800217 	ldw	r2,8(r2)
1010ee00:	10d00034 	orhi	r3,r2,16384
1010ee04:	e0bfff17 	ldw	r2,-4(fp)
1010ee08:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ee0c:	e03ffe15 	stw	zero,-8(fp)
1010ee10:	00001d06 	br	1010ee88 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ee14:	00840474 	movhi	r2,4113
1010ee18:	10888d04 	addi	r2,r2,8756
1010ee1c:	e0fffe17 	ldw	r3,-8(fp)
1010ee20:	18c00324 	muli	r3,r3,12
1010ee24:	10c5883a 	add	r2,r2,r3
1010ee28:	10c00017 	ldw	r3,0(r2)
1010ee2c:	e0bfff17 	ldw	r2,-4(fp)
1010ee30:	10800017 	ldw	r2,0(r2)
1010ee34:	1880111e 	bne	r3,r2,1010ee7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010ee38:	00840474 	movhi	r2,4113
1010ee3c:	10888d04 	addi	r2,r2,8756
1010ee40:	e0fffe17 	ldw	r3,-8(fp)
1010ee44:	18c00324 	muli	r3,r3,12
1010ee48:	10c5883a 	add	r2,r2,r3
1010ee4c:	10800204 	addi	r2,r2,8
1010ee50:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010ee54:	1000090e 	bge	r2,zero,1010ee7c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010ee58:	e0bffe17 	ldw	r2,-8(fp)
1010ee5c:	10c00324 	muli	r3,r2,12
1010ee60:	00840474 	movhi	r2,4113
1010ee64:	10888d04 	addi	r2,r2,8756
1010ee68:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010ee6c:	e0bfff17 	ldw	r2,-4(fp)
1010ee70:	18800226 	beq	r3,r2,1010ee7c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010ee74:	00bffcc4 	movi	r2,-13
1010ee78:	00000a06 	br	1010eea4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010ee7c:	e0bffe17 	ldw	r2,-8(fp)
1010ee80:	10800044 	addi	r2,r2,1
1010ee84:	e0bffe15 	stw	r2,-8(fp)
1010ee88:	00840474 	movhi	r2,4113
1010ee8c:	108d1904 	addi	r2,r2,13412
1010ee90:	10800017 	ldw	r2,0(r2)
1010ee94:	1007883a 	mov	r3,r2
1010ee98:	e0bffe17 	ldw	r2,-8(fp)
1010ee9c:	18bfdd2e 	bgeu	r3,r2,1010ee14 <__alt_data_end+0xfffeee14>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010eea0:	0005883a 	mov	r2,zero
}
1010eea4:	e037883a 	mov	sp,fp
1010eea8:	df000017 	ldw	fp,0(sp)
1010eeac:	dec00104 	addi	sp,sp,4
1010eeb0:	f800283a 	ret

1010eeb4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010eeb4:	defff604 	addi	sp,sp,-40
1010eeb8:	dfc00915 	stw	ra,36(sp)
1010eebc:	df000815 	stw	fp,32(sp)
1010eec0:	df000804 	addi	fp,sp,32
1010eec4:	e13ffd15 	stw	r4,-12(fp)
1010eec8:	e17ffe15 	stw	r5,-8(fp)
1010eecc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010eed0:	00bfffc4 	movi	r2,-1
1010eed4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010eed8:	00bffb44 	movi	r2,-19
1010eedc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010eee0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010eee4:	01440474 	movhi	r5,4113
1010eee8:	294d1704 	addi	r5,r5,13404
1010eeec:	e13ffd17 	ldw	r4,-12(fp)
1010eef0:	01108380 	call	10110838 <alt_find_dev>
1010eef4:	e0bff815 	stw	r2,-32(fp)
1010eef8:	e0bff817 	ldw	r2,-32(fp)
1010eefc:	1000051e 	bne	r2,zero,1010ef14 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010ef00:	e13ffd17 	ldw	r4,-12(fp)
1010ef04:	01108c80 	call	101108c8 <alt_find_file>
1010ef08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010ef0c:	00800044 	movi	r2,1
1010ef10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010ef14:	e0bff817 	ldw	r2,-32(fp)
1010ef18:	10002926 	beq	r2,zero,1010efc0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010ef1c:	e13ff817 	ldw	r4,-32(fp)
1010ef20:	0110a600 	call	10110a60 <alt_get_fd>
1010ef24:	e0bff915 	stw	r2,-28(fp)
1010ef28:	e0bff917 	ldw	r2,-28(fp)
1010ef2c:	1000030e 	bge	r2,zero,1010ef3c <open+0x88>
    {
      status = index;
1010ef30:	e0bff917 	ldw	r2,-28(fp)
1010ef34:	e0bffa15 	stw	r2,-24(fp)
1010ef38:	00002306 	br	1010efc8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
1010ef3c:	e0bff917 	ldw	r2,-28(fp)
1010ef40:	10c00324 	muli	r3,r2,12
1010ef44:	00840474 	movhi	r2,4113
1010ef48:	10888d04 	addi	r2,r2,8756
1010ef4c:	1885883a 	add	r2,r3,r2
1010ef50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010ef54:	e0fffe17 	ldw	r3,-8(fp)
1010ef58:	00900034 	movhi	r2,16384
1010ef5c:	10bfffc4 	addi	r2,r2,-1
1010ef60:	1886703a 	and	r3,r3,r2
1010ef64:	e0bffc17 	ldw	r2,-16(fp)
1010ef68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010ef6c:	e0bffb17 	ldw	r2,-20(fp)
1010ef70:	1000051e 	bne	r2,zero,1010ef88 <open+0xd4>
1010ef74:	e13ffc17 	ldw	r4,-16(fp)
1010ef78:	010ede80 	call	1010ede8 <alt_file_locked>
1010ef7c:	e0bffa15 	stw	r2,-24(fp)
1010ef80:	e0bffa17 	ldw	r2,-24(fp)
1010ef84:	10001016 	blt	r2,zero,1010efc8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010ef88:	e0bff817 	ldw	r2,-32(fp)
1010ef8c:	10800317 	ldw	r2,12(r2)
1010ef90:	10000826 	beq	r2,zero,1010efb4 <open+0x100>
1010ef94:	e0bff817 	ldw	r2,-32(fp)
1010ef98:	10800317 	ldw	r2,12(r2)
1010ef9c:	e1ffff17 	ldw	r7,-4(fp)
1010efa0:	e1bffe17 	ldw	r6,-8(fp)
1010efa4:	e17ffd17 	ldw	r5,-12(fp)
1010efa8:	e13ffc17 	ldw	r4,-16(fp)
1010efac:	103ee83a 	callr	r2
1010efb0:	00000106 	br	1010efb8 <open+0x104>
1010efb4:	0005883a 	mov	r2,zero
1010efb8:	e0bffa15 	stw	r2,-24(fp)
1010efbc:	00000206 	br	1010efc8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010efc0:	00bffb44 	movi	r2,-19
1010efc4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010efc8:	e0bffa17 	ldw	r2,-24(fp)
1010efcc:	1000090e 	bge	r2,zero,1010eff4 <open+0x140>
  {
    alt_release_fd (index);  
1010efd0:	e13ff917 	ldw	r4,-28(fp)
1010efd4:	010f1580 	call	1010f158 <alt_release_fd>
    ALT_ERRNO = -status;
1010efd8:	010ed980 	call	1010ed98 <alt_get_errno>
1010efdc:	1007883a 	mov	r3,r2
1010efe0:	e0bffa17 	ldw	r2,-24(fp)
1010efe4:	0085c83a 	sub	r2,zero,r2
1010efe8:	18800015 	stw	r2,0(r3)
    return -1;
1010efec:	00bfffc4 	movi	r2,-1
1010eff0:	00000106 	br	1010eff8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
1010eff4:	e0bff917 	ldw	r2,-28(fp)
}
1010eff8:	e037883a 	mov	sp,fp
1010effc:	dfc00117 	ldw	ra,4(sp)
1010f000:	df000017 	ldw	fp,0(sp)
1010f004:	dec00204 	addi	sp,sp,8
1010f008:	f800283a 	ret

1010f00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f00c:	defffe04 	addi	sp,sp,-8
1010f010:	dfc00115 	stw	ra,4(sp)
1010f014:	df000015 	stw	fp,0(sp)
1010f018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f01c:	00840474 	movhi	r2,4113
1010f020:	108d1a04 	addi	r2,r2,13416
1010f024:	10800017 	ldw	r2,0(r2)
1010f028:	10000526 	beq	r2,zero,1010f040 <alt_get_errno+0x34>
1010f02c:	00840474 	movhi	r2,4113
1010f030:	108d1a04 	addi	r2,r2,13416
1010f034:	10800017 	ldw	r2,0(r2)
1010f038:	103ee83a 	callr	r2
1010f03c:	00000206 	br	1010f048 <alt_get_errno+0x3c>
1010f040:	00840474 	movhi	r2,4113
1010f044:	10940804 	addi	r2,r2,20512
}
1010f048:	e037883a 	mov	sp,fp
1010f04c:	dfc00117 	ldw	ra,4(sp)
1010f050:	df000017 	ldw	fp,0(sp)
1010f054:	dec00204 	addi	sp,sp,8
1010f058:	f800283a 	ret

1010f05c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010f05c:	defff904 	addi	sp,sp,-28
1010f060:	dfc00615 	stw	ra,24(sp)
1010f064:	df000515 	stw	fp,20(sp)
1010f068:	df000504 	addi	fp,sp,20
1010f06c:	e13ffd15 	stw	r4,-12(fp)
1010f070:	e17ffe15 	stw	r5,-8(fp)
1010f074:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f078:	e0bffd17 	ldw	r2,-12(fp)
1010f07c:	10000616 	blt	r2,zero,1010f098 <read+0x3c>
1010f080:	e0bffd17 	ldw	r2,-12(fp)
1010f084:	10c00324 	muli	r3,r2,12
1010f088:	00840474 	movhi	r2,4113
1010f08c:	10888d04 	addi	r2,r2,8756
1010f090:	1885883a 	add	r2,r3,r2
1010f094:	00000106 	br	1010f09c <read+0x40>
1010f098:	0005883a 	mov	r2,zero
1010f09c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f0a0:	e0bffb17 	ldw	r2,-20(fp)
1010f0a4:	10002226 	beq	r2,zero,1010f130 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f0a8:	e0bffb17 	ldw	r2,-20(fp)
1010f0ac:	10800217 	ldw	r2,8(r2)
1010f0b0:	108000cc 	andi	r2,r2,3
1010f0b4:	10800060 	cmpeqi	r2,r2,1
1010f0b8:	1000181e 	bne	r2,zero,1010f11c <read+0xc0>
        (fd->dev->read))
1010f0bc:	e0bffb17 	ldw	r2,-20(fp)
1010f0c0:	10800017 	ldw	r2,0(r2)
1010f0c4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010f0c8:	10001426 	beq	r2,zero,1010f11c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010f0cc:	e0bffb17 	ldw	r2,-20(fp)
1010f0d0:	10800017 	ldw	r2,0(r2)
1010f0d4:	10800517 	ldw	r2,20(r2)
1010f0d8:	e0ffff17 	ldw	r3,-4(fp)
1010f0dc:	180d883a 	mov	r6,r3
1010f0e0:	e17ffe17 	ldw	r5,-8(fp)
1010f0e4:	e13ffb17 	ldw	r4,-20(fp)
1010f0e8:	103ee83a 	callr	r2
1010f0ec:	e0bffc15 	stw	r2,-16(fp)
1010f0f0:	e0bffc17 	ldw	r2,-16(fp)
1010f0f4:	1000070e 	bge	r2,zero,1010f114 <read+0xb8>
        {
          ALT_ERRNO = -rval;
1010f0f8:	010f00c0 	call	1010f00c <alt_get_errno>
1010f0fc:	1007883a 	mov	r3,r2
1010f100:	e0bffc17 	ldw	r2,-16(fp)
1010f104:	0085c83a 	sub	r2,zero,r2
1010f108:	18800015 	stw	r2,0(r3)
          return -1;
1010f10c:	00bfffc4 	movi	r2,-1
1010f110:	00000c06 	br	1010f144 <read+0xe8>
        }
        return rval;
1010f114:	e0bffc17 	ldw	r2,-16(fp)
1010f118:	00000a06 	br	1010f144 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010f11c:	010f00c0 	call	1010f00c <alt_get_errno>
1010f120:	1007883a 	mov	r3,r2
1010f124:	00800344 	movi	r2,13
1010f128:	18800015 	stw	r2,0(r3)
1010f12c:	00000406 	br	1010f140 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010f130:	010f00c0 	call	1010f00c <alt_get_errno>
1010f134:	1007883a 	mov	r3,r2
1010f138:	00801444 	movi	r2,81
1010f13c:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f140:	00bfffc4 	movi	r2,-1
}
1010f144:	e037883a 	mov	sp,fp
1010f148:	dfc00117 	ldw	ra,4(sp)
1010f14c:	df000017 	ldw	fp,0(sp)
1010f150:	dec00204 	addi	sp,sp,8
1010f154:	f800283a 	ret

1010f158 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010f158:	defffe04 	addi	sp,sp,-8
1010f15c:	df000115 	stw	fp,4(sp)
1010f160:	df000104 	addi	fp,sp,4
1010f164:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
1010f168:	e0bfff17 	ldw	r2,-4(fp)
1010f16c:	108000d0 	cmplti	r2,r2,3
1010f170:	10000d1e 	bne	r2,zero,1010f1a8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
1010f174:	00840474 	movhi	r2,4113
1010f178:	10888d04 	addi	r2,r2,8756
1010f17c:	e0ffff17 	ldw	r3,-4(fp)
1010f180:	18c00324 	muli	r3,r3,12
1010f184:	10c5883a 	add	r2,r2,r3
1010f188:	10800204 	addi	r2,r2,8
1010f18c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010f190:	00840474 	movhi	r2,4113
1010f194:	10888d04 	addi	r2,r2,8756
1010f198:	e0ffff17 	ldw	r3,-4(fp)
1010f19c:	18c00324 	muli	r3,r3,12
1010f1a0:	10c5883a 	add	r2,r2,r3
1010f1a4:	10000015 	stw	zero,0(r2)
  }
}
1010f1a8:	0001883a 	nop
1010f1ac:	e037883a 	mov	sp,fp
1010f1b0:	df000017 	ldw	fp,0(sp)
1010f1b4:	dec00104 	addi	sp,sp,4
1010f1b8:	f800283a 	ret

1010f1bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010f1bc:	defff904 	addi	sp,sp,-28
1010f1c0:	df000615 	stw	fp,24(sp)
1010f1c4:	df000604 	addi	fp,sp,24
1010f1c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f1cc:	0005303a 	rdctl	r2,status
1010f1d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f1d4:	e0fffe17 	ldw	r3,-8(fp)
1010f1d8:	00bfff84 	movi	r2,-2
1010f1dc:	1884703a 	and	r2,r3,r2
1010f1e0:	1001703a 	wrctl	status,r2
  
  return context;
1010f1e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010f1e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010f1ec:	d0a00c17 	ldw	r2,-32720(gp)
1010f1f0:	10c000c4 	addi	r3,r2,3
1010f1f4:	00bfff04 	movi	r2,-4
1010f1f8:	1884703a 	and	r2,r3,r2
1010f1fc:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010f200:	d0e00c17 	ldw	r3,-32720(gp)
1010f204:	e0bfff17 	ldw	r2,-4(fp)
1010f208:	1887883a 	add	r3,r3,r2
1010f20c:	008404b4 	movhi	r2,4114
1010f210:	10800004 	addi	r2,r2,0
1010f214:	10c0062e 	bgeu	r2,r3,1010f230 <sbrk+0x74>
1010f218:	e0bffb17 	ldw	r2,-20(fp)
1010f21c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f220:	e0bffa17 	ldw	r2,-24(fp)
1010f224:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010f228:	00bfffc4 	movi	r2,-1
1010f22c:	00000b06 	br	1010f25c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010f230:	d0a00c17 	ldw	r2,-32720(gp)
1010f234:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010f238:	d0e00c17 	ldw	r3,-32720(gp)
1010f23c:	e0bfff17 	ldw	r2,-4(fp)
1010f240:	1885883a 	add	r2,r3,r2
1010f244:	d0a00c15 	stw	r2,-32720(gp)
1010f248:	e0bffb17 	ldw	r2,-20(fp)
1010f24c:	e0bffc15 	stw	r2,-16(fp)
1010f250:	e0bffc17 	ldw	r2,-16(fp)
1010f254:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010f258:	e0bffd17 	ldw	r2,-12(fp)
} 
1010f25c:	e037883a 	mov	sp,fp
1010f260:	df000017 	ldw	fp,0(sp)
1010f264:	dec00104 	addi	sp,sp,4
1010f268:	f800283a 	ret

1010f26c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1010f26c:	defffd04 	addi	sp,sp,-12
1010f270:	dfc00215 	stw	ra,8(sp)
1010f274:	df000115 	stw	fp,4(sp)
1010f278:	df000104 	addi	fp,sp,4
1010f27c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1010f280:	e13fff17 	ldw	r4,-4(fp)
1010f284:	01104e40 	call	101104e4 <alt_busy_sleep>
}
1010f288:	e037883a 	mov	sp,fp
1010f28c:	dfc00117 	ldw	ra,4(sp)
1010f290:	df000017 	ldw	fp,0(sp)
1010f294:	dec00204 	addi	sp,sp,8
1010f298:	f800283a 	ret

1010f29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f29c:	defffe04 	addi	sp,sp,-8
1010f2a0:	dfc00115 	stw	ra,4(sp)
1010f2a4:	df000015 	stw	fp,0(sp)
1010f2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f2ac:	00840474 	movhi	r2,4113
1010f2b0:	108d1a04 	addi	r2,r2,13416
1010f2b4:	10800017 	ldw	r2,0(r2)
1010f2b8:	10000526 	beq	r2,zero,1010f2d0 <alt_get_errno+0x34>
1010f2bc:	00840474 	movhi	r2,4113
1010f2c0:	108d1a04 	addi	r2,r2,13416
1010f2c4:	10800017 	ldw	r2,0(r2)
1010f2c8:	103ee83a 	callr	r2
1010f2cc:	00000206 	br	1010f2d8 <alt_get_errno+0x3c>
1010f2d0:	00840474 	movhi	r2,4113
1010f2d4:	10940804 	addi	r2,r2,20512
}
1010f2d8:	e037883a 	mov	sp,fp
1010f2dc:	dfc00117 	ldw	ra,4(sp)
1010f2e0:	df000017 	ldw	fp,0(sp)
1010f2e4:	dec00204 	addi	sp,sp,8
1010f2e8:	f800283a 	ret

1010f2ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010f2ec:	defff904 	addi	sp,sp,-28
1010f2f0:	dfc00615 	stw	ra,24(sp)
1010f2f4:	df000515 	stw	fp,20(sp)
1010f2f8:	df000504 	addi	fp,sp,20
1010f2fc:	e13ffd15 	stw	r4,-12(fp)
1010f300:	e17ffe15 	stw	r5,-8(fp)
1010f304:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010f308:	e0bffd17 	ldw	r2,-12(fp)
1010f30c:	10000616 	blt	r2,zero,1010f328 <write+0x3c>
1010f310:	e0bffd17 	ldw	r2,-12(fp)
1010f314:	10c00324 	muli	r3,r2,12
1010f318:	00840474 	movhi	r2,4113
1010f31c:	10888d04 	addi	r2,r2,8756
1010f320:	1885883a 	add	r2,r3,r2
1010f324:	00000106 	br	1010f32c <write+0x40>
1010f328:	0005883a 	mov	r2,zero
1010f32c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010f330:	e0bffb17 	ldw	r2,-20(fp)
1010f334:	10002126 	beq	r2,zero,1010f3bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010f338:	e0bffb17 	ldw	r2,-20(fp)
1010f33c:	10800217 	ldw	r2,8(r2)
1010f340:	108000cc 	andi	r2,r2,3
1010f344:	10001826 	beq	r2,zero,1010f3a8 <write+0xbc>
1010f348:	e0bffb17 	ldw	r2,-20(fp)
1010f34c:	10800017 	ldw	r2,0(r2)
1010f350:	10800617 	ldw	r2,24(r2)
1010f354:	10001426 	beq	r2,zero,1010f3a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010f358:	e0bffb17 	ldw	r2,-20(fp)
1010f35c:	10800017 	ldw	r2,0(r2)
1010f360:	10800617 	ldw	r2,24(r2)
1010f364:	e0ffff17 	ldw	r3,-4(fp)
1010f368:	180d883a 	mov	r6,r3
1010f36c:	e17ffe17 	ldw	r5,-8(fp)
1010f370:	e13ffb17 	ldw	r4,-20(fp)
1010f374:	103ee83a 	callr	r2
1010f378:	e0bffc15 	stw	r2,-16(fp)
1010f37c:	e0bffc17 	ldw	r2,-16(fp)
1010f380:	1000070e 	bge	r2,zero,1010f3a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
1010f384:	010f29c0 	call	1010f29c <alt_get_errno>
1010f388:	1007883a 	mov	r3,r2
1010f38c:	e0bffc17 	ldw	r2,-16(fp)
1010f390:	0085c83a 	sub	r2,zero,r2
1010f394:	18800015 	stw	r2,0(r3)
        return -1;
1010f398:	00bfffc4 	movi	r2,-1
1010f39c:	00000c06 	br	1010f3d0 <write+0xe4>
      }
      return rval;
1010f3a0:	e0bffc17 	ldw	r2,-16(fp)
1010f3a4:	00000a06 	br	1010f3d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010f3a8:	010f29c0 	call	1010f29c <alt_get_errno>
1010f3ac:	1007883a 	mov	r3,r2
1010f3b0:	00800344 	movi	r2,13
1010f3b4:	18800015 	stw	r2,0(r3)
1010f3b8:	00000406 	br	1010f3cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010f3bc:	010f29c0 	call	1010f29c <alt_get_errno>
1010f3c0:	1007883a 	mov	r3,r2
1010f3c4:	00801444 	movi	r2,81
1010f3c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010f3cc:	00bfffc4 	movi	r2,-1
}
1010f3d0:	e037883a 	mov	sp,fp
1010f3d4:	dfc00117 	ldw	ra,4(sp)
1010f3d8:	df000017 	ldw	fp,0(sp)
1010f3dc:	dec00204 	addi	sp,sp,8
1010f3e0:	f800283a 	ret

1010f3e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010f3e4:	defffd04 	addi	sp,sp,-12
1010f3e8:	dfc00215 	stw	ra,8(sp)
1010f3ec:	df000115 	stw	fp,4(sp)
1010f3f0:	df000104 	addi	fp,sp,4
1010f3f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010f3f8:	01440474 	movhi	r5,4113
1010f3fc:	294d1704 	addi	r5,r5,13404
1010f400:	e13fff17 	ldw	r4,-4(fp)
1010f404:	01106d40 	call	101106d4 <alt_dev_llist_insert>
}
1010f408:	e037883a 	mov	sp,fp
1010f40c:	dfc00117 	ldw	ra,4(sp)
1010f410:	df000017 	ldw	fp,0(sp)
1010f414:	dec00204 	addi	sp,sp,8
1010f418:	f800283a 	ret

1010f41c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010f41c:	defffd04 	addi	sp,sp,-12
1010f420:	dfc00215 	stw	ra,8(sp)
1010f424:	df000115 	stw	fp,4(sp)
1010f428:	df000104 	addi	fp,sp,4
1010f42c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010f430:	01110fc0 	call	101110fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010f434:	00800044 	movi	r2,1
1010f438:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010f43c:	0001883a 	nop
1010f440:	e037883a 	mov	sp,fp
1010f444:	dfc00117 	ldw	ra,4(sp)
1010f448:	df000017 	ldw	fp,0(sp)
1010f44c:	dec00204 	addi	sp,sp,8
1010f450:	f800283a 	ret

1010f454 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010f454:	defffe04 	addi	sp,sp,-8
1010f458:	dfc00115 	stw	ra,4(sp)
1010f45c:	df000015 	stw	fp,0(sp)
1010f460:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010f464:	000d883a 	mov	r6,zero
1010f468:	000b883a 	mov	r5,zero
1010f46c:	01040474 	movhi	r4,4113
1010f470:	2108f704 	addi	r4,r4,9180
1010f474:	010f60c0 	call	1010f60c <altera_avalon_jtag_uart_init>
1010f478:	01040474 	movhi	r4,4113
1010f47c:	2108ed04 	addi	r4,r4,9140
1010f480:	010f3e40 	call	1010f3e4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010f484:	01040474 	movhi	r4,4113
1010f488:	210d0504 	addi	r4,r4,13332
1010f48c:	01109dc0 	call	101109dc <alt_fs_reg>
}
1010f490:	0001883a 	nop
1010f494:	e037883a 	mov	sp,fp
1010f498:	dfc00117 	ldw	ra,4(sp)
1010f49c:	df000017 	ldw	fp,0(sp)
1010f4a0:	dec00204 	addi	sp,sp,8
1010f4a4:	f800283a 	ret

1010f4a8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010f4a8:	defffa04 	addi	sp,sp,-24
1010f4ac:	dfc00515 	stw	ra,20(sp)
1010f4b0:	df000415 	stw	fp,16(sp)
1010f4b4:	df000404 	addi	fp,sp,16
1010f4b8:	e13ffd15 	stw	r4,-12(fp)
1010f4bc:	e17ffe15 	stw	r5,-8(fp)
1010f4c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f4c4:	e0bffd17 	ldw	r2,-12(fp)
1010f4c8:	10800017 	ldw	r2,0(r2)
1010f4cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010f4d0:	e0bffc17 	ldw	r2,-16(fp)
1010f4d4:	10c00a04 	addi	r3,r2,40
1010f4d8:	e0bffd17 	ldw	r2,-12(fp)
1010f4dc:	10800217 	ldw	r2,8(r2)
1010f4e0:	100f883a 	mov	r7,r2
1010f4e4:	e1bfff17 	ldw	r6,-4(fp)
1010f4e8:	e17ffe17 	ldw	r5,-8(fp)
1010f4ec:	1809883a 	mov	r4,r3
1010f4f0:	010fae00 	call	1010fae0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010f4f4:	e037883a 	mov	sp,fp
1010f4f8:	dfc00117 	ldw	ra,4(sp)
1010f4fc:	df000017 	ldw	fp,0(sp)
1010f500:	dec00204 	addi	sp,sp,8
1010f504:	f800283a 	ret

1010f508 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010f508:	defffa04 	addi	sp,sp,-24
1010f50c:	dfc00515 	stw	ra,20(sp)
1010f510:	df000415 	stw	fp,16(sp)
1010f514:	df000404 	addi	fp,sp,16
1010f518:	e13ffd15 	stw	r4,-12(fp)
1010f51c:	e17ffe15 	stw	r5,-8(fp)
1010f520:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f524:	e0bffd17 	ldw	r2,-12(fp)
1010f528:	10800017 	ldw	r2,0(r2)
1010f52c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010f530:	e0bffc17 	ldw	r2,-16(fp)
1010f534:	10c00a04 	addi	r3,r2,40
1010f538:	e0bffd17 	ldw	r2,-12(fp)
1010f53c:	10800217 	ldw	r2,8(r2)
1010f540:	100f883a 	mov	r7,r2
1010f544:	e1bfff17 	ldw	r6,-4(fp)
1010f548:	e17ffe17 	ldw	r5,-8(fp)
1010f54c:	1809883a 	mov	r4,r3
1010f550:	010fcfc0 	call	1010fcfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010f554:	e037883a 	mov	sp,fp
1010f558:	dfc00117 	ldw	ra,4(sp)
1010f55c:	df000017 	ldw	fp,0(sp)
1010f560:	dec00204 	addi	sp,sp,8
1010f564:	f800283a 	ret

1010f568 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010f568:	defffc04 	addi	sp,sp,-16
1010f56c:	dfc00315 	stw	ra,12(sp)
1010f570:	df000215 	stw	fp,8(sp)
1010f574:	df000204 	addi	fp,sp,8
1010f578:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010f57c:	e0bfff17 	ldw	r2,-4(fp)
1010f580:	10800017 	ldw	r2,0(r2)
1010f584:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010f588:	e0bffe17 	ldw	r2,-8(fp)
1010f58c:	10c00a04 	addi	r3,r2,40
1010f590:	e0bfff17 	ldw	r2,-4(fp)
1010f594:	10800217 	ldw	r2,8(r2)
1010f598:	100b883a 	mov	r5,r2
1010f59c:	1809883a 	mov	r4,r3
1010f5a0:	010f9880 	call	1010f988 <altera_avalon_jtag_uart_close>
}
1010f5a4:	e037883a 	mov	sp,fp
1010f5a8:	dfc00117 	ldw	ra,4(sp)
1010f5ac:	df000017 	ldw	fp,0(sp)
1010f5b0:	dec00204 	addi	sp,sp,8
1010f5b4:	f800283a 	ret

1010f5b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010f5b8:	defffa04 	addi	sp,sp,-24
1010f5bc:	dfc00515 	stw	ra,20(sp)
1010f5c0:	df000415 	stw	fp,16(sp)
1010f5c4:	df000404 	addi	fp,sp,16
1010f5c8:	e13ffd15 	stw	r4,-12(fp)
1010f5cc:	e17ffe15 	stw	r5,-8(fp)
1010f5d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010f5d4:	e0bffd17 	ldw	r2,-12(fp)
1010f5d8:	10800017 	ldw	r2,0(r2)
1010f5dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010f5e0:	e0bffc17 	ldw	r2,-16(fp)
1010f5e4:	10800a04 	addi	r2,r2,40
1010f5e8:	e1bfff17 	ldw	r6,-4(fp)
1010f5ec:	e17ffe17 	ldw	r5,-8(fp)
1010f5f0:	1009883a 	mov	r4,r2
1010f5f4:	010f9f00 	call	1010f9f0 <altera_avalon_jtag_uart_ioctl>
}
1010f5f8:	e037883a 	mov	sp,fp
1010f5fc:	dfc00117 	ldw	ra,4(sp)
1010f600:	df000017 	ldw	fp,0(sp)
1010f604:	dec00204 	addi	sp,sp,8
1010f608:	f800283a 	ret

1010f60c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010f60c:	defffa04 	addi	sp,sp,-24
1010f610:	dfc00515 	stw	ra,20(sp)
1010f614:	df000415 	stw	fp,16(sp)
1010f618:	df000404 	addi	fp,sp,16
1010f61c:	e13ffd15 	stw	r4,-12(fp)
1010f620:	e17ffe15 	stw	r5,-8(fp)
1010f624:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f628:	e0bffd17 	ldw	r2,-12(fp)
1010f62c:	00c00044 	movi	r3,1
1010f630:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010f634:	e0bffd17 	ldw	r2,-12(fp)
1010f638:	10800017 	ldw	r2,0(r2)
1010f63c:	10800104 	addi	r2,r2,4
1010f640:	1007883a 	mov	r3,r2
1010f644:	e0bffd17 	ldw	r2,-12(fp)
1010f648:	10800817 	ldw	r2,32(r2)
1010f64c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010f650:	e0bffe17 	ldw	r2,-8(fp)
1010f654:	e0ffff17 	ldw	r3,-4(fp)
1010f658:	d8000015 	stw	zero,0(sp)
1010f65c:	e1fffd17 	ldw	r7,-12(fp)
1010f660:	01840474 	movhi	r6,4113
1010f664:	31bdb504 	addi	r6,r6,-2348
1010f668:	180b883a 	mov	r5,r3
1010f66c:	1009883a 	mov	r4,r2
1010f670:	0110b480 	call	10110b48 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010f674:	e0bffd17 	ldw	r2,-12(fp)
1010f678:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010f67c:	e0bffd17 	ldw	r2,-12(fp)
1010f680:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010f684:	00840474 	movhi	r2,4113
1010f688:	10941304 	addi	r2,r2,20556
1010f68c:	10800017 	ldw	r2,0(r2)
1010f690:	e1fffd17 	ldw	r7,-12(fp)
1010f694:	01840474 	movhi	r6,4113
1010f698:	31be3804 	addi	r6,r6,-1824
1010f69c:	100b883a 	mov	r5,r2
1010f6a0:	1809883a 	mov	r4,r3
1010f6a4:	01103a40 	call	101103a4 <alt_alarm_start>
1010f6a8:	1000040e 	bge	r2,zero,1010f6bc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010f6ac:	e0fffd17 	ldw	r3,-12(fp)
1010f6b0:	00a00034 	movhi	r2,32768
1010f6b4:	10bfffc4 	addi	r2,r2,-1
1010f6b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010f6bc:	0001883a 	nop
1010f6c0:	e037883a 	mov	sp,fp
1010f6c4:	dfc00117 	ldw	ra,4(sp)
1010f6c8:	df000017 	ldw	fp,0(sp)
1010f6cc:	dec00204 	addi	sp,sp,8
1010f6d0:	f800283a 	ret

1010f6d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010f6d4:	defff804 	addi	sp,sp,-32
1010f6d8:	df000715 	stw	fp,28(sp)
1010f6dc:	df000704 	addi	fp,sp,28
1010f6e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010f6e4:	e0bfff17 	ldw	r2,-4(fp)
1010f6e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010f6ec:	e0bffb17 	ldw	r2,-20(fp)
1010f6f0:	10800017 	ldw	r2,0(r2)
1010f6f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f6f8:	e0bffc17 	ldw	r2,-16(fp)
1010f6fc:	10800104 	addi	r2,r2,4
1010f700:	10800037 	ldwio	r2,0(r2)
1010f704:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010f708:	e0bffd17 	ldw	r2,-12(fp)
1010f70c:	1080c00c 	andi	r2,r2,768
1010f710:	10006d26 	beq	r2,zero,1010f8c8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010f714:	e0bffd17 	ldw	r2,-12(fp)
1010f718:	1080400c 	andi	r2,r2,256
1010f71c:	10003526 	beq	r2,zero,1010f7f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010f720:	00800074 	movhi	r2,1
1010f724:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f728:	e0bffb17 	ldw	r2,-20(fp)
1010f72c:	10800a17 	ldw	r2,40(r2)
1010f730:	10800044 	addi	r2,r2,1
1010f734:	1081ffcc 	andi	r2,r2,2047
1010f738:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010f73c:	e0bffb17 	ldw	r2,-20(fp)
1010f740:	10c00b17 	ldw	r3,44(r2)
1010f744:	e0bffe17 	ldw	r2,-8(fp)
1010f748:	18801526 	beq	r3,r2,1010f7a0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010f74c:	e0bffc17 	ldw	r2,-16(fp)
1010f750:	10800037 	ldwio	r2,0(r2)
1010f754:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010f758:	e0bff917 	ldw	r2,-28(fp)
1010f75c:	10a0000c 	andi	r2,r2,32768
1010f760:	10001126 	beq	r2,zero,1010f7a8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010f764:	e0bffb17 	ldw	r2,-20(fp)
1010f768:	10800a17 	ldw	r2,40(r2)
1010f76c:	e0fff917 	ldw	r3,-28(fp)
1010f770:	1809883a 	mov	r4,r3
1010f774:	e0fffb17 	ldw	r3,-20(fp)
1010f778:	1885883a 	add	r2,r3,r2
1010f77c:	10800e04 	addi	r2,r2,56
1010f780:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f784:	e0bffb17 	ldw	r2,-20(fp)
1010f788:	10800a17 	ldw	r2,40(r2)
1010f78c:	10800044 	addi	r2,r2,1
1010f790:	10c1ffcc 	andi	r3,r2,2047
1010f794:	e0bffb17 	ldw	r2,-20(fp)
1010f798:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010f79c:	003fe206 	br	1010f728 <__alt_data_end+0xfffef728>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010f7a0:	0001883a 	nop
1010f7a4:	00000106 	br	1010f7ac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010f7a8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010f7ac:	e0bff917 	ldw	r2,-28(fp)
1010f7b0:	10bfffec 	andhi	r2,r2,65535
1010f7b4:	10000f26 	beq	r2,zero,1010f7f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010f7b8:	e0bffb17 	ldw	r2,-20(fp)
1010f7bc:	10c00817 	ldw	r3,32(r2)
1010f7c0:	00bfff84 	movi	r2,-2
1010f7c4:	1886703a 	and	r3,r3,r2
1010f7c8:	e0bffb17 	ldw	r2,-20(fp)
1010f7cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010f7d0:	e0bffc17 	ldw	r2,-16(fp)
1010f7d4:	10800104 	addi	r2,r2,4
1010f7d8:	1007883a 	mov	r3,r2
1010f7dc:	e0bffb17 	ldw	r2,-20(fp)
1010f7e0:	10800817 	ldw	r2,32(r2)
1010f7e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f7e8:	e0bffc17 	ldw	r2,-16(fp)
1010f7ec:	10800104 	addi	r2,r2,4
1010f7f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010f7f4:	e0bffd17 	ldw	r2,-12(fp)
1010f7f8:	1080800c 	andi	r2,r2,512
1010f7fc:	103fbe26 	beq	r2,zero,1010f6f8 <__alt_data_end+0xfffef6f8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010f800:	e0bffd17 	ldw	r2,-12(fp)
1010f804:	1004d43a 	srli	r2,r2,16
1010f808:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f80c:	00001406 	br	1010f860 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010f810:	e0bffc17 	ldw	r2,-16(fp)
1010f814:	e0fffb17 	ldw	r3,-20(fp)
1010f818:	18c00d17 	ldw	r3,52(r3)
1010f81c:	e13ffb17 	ldw	r4,-20(fp)
1010f820:	20c7883a 	add	r3,r4,r3
1010f824:	18c20e04 	addi	r3,r3,2104
1010f828:	18c00003 	ldbu	r3,0(r3)
1010f82c:	18c03fcc 	andi	r3,r3,255
1010f830:	18c0201c 	xori	r3,r3,128
1010f834:	18ffe004 	addi	r3,r3,-128
1010f838:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010f83c:	e0bffb17 	ldw	r2,-20(fp)
1010f840:	10800d17 	ldw	r2,52(r2)
1010f844:	10800044 	addi	r2,r2,1
1010f848:	10c1ffcc 	andi	r3,r2,2047
1010f84c:	e0bffb17 	ldw	r2,-20(fp)
1010f850:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010f854:	e0bffa17 	ldw	r2,-24(fp)
1010f858:	10bfffc4 	addi	r2,r2,-1
1010f85c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010f860:	e0bffa17 	ldw	r2,-24(fp)
1010f864:	10000526 	beq	r2,zero,1010f87c <altera_avalon_jtag_uart_irq+0x1a8>
1010f868:	e0bffb17 	ldw	r2,-20(fp)
1010f86c:	10c00d17 	ldw	r3,52(r2)
1010f870:	e0bffb17 	ldw	r2,-20(fp)
1010f874:	10800c17 	ldw	r2,48(r2)
1010f878:	18bfe51e 	bne	r3,r2,1010f810 <__alt_data_end+0xfffef810>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010f87c:	e0bffa17 	ldw	r2,-24(fp)
1010f880:	103f9d26 	beq	r2,zero,1010f6f8 <__alt_data_end+0xfffef6f8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010f884:	e0bffb17 	ldw	r2,-20(fp)
1010f888:	10c00817 	ldw	r3,32(r2)
1010f88c:	00bfff44 	movi	r2,-3
1010f890:	1886703a 	and	r3,r3,r2
1010f894:	e0bffb17 	ldw	r2,-20(fp)
1010f898:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010f89c:	e0bffb17 	ldw	r2,-20(fp)
1010f8a0:	10800017 	ldw	r2,0(r2)
1010f8a4:	10800104 	addi	r2,r2,4
1010f8a8:	1007883a 	mov	r3,r2
1010f8ac:	e0bffb17 	ldw	r2,-20(fp)
1010f8b0:	10800817 	ldw	r2,32(r2)
1010f8b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010f8b8:	e0bffc17 	ldw	r2,-16(fp)
1010f8bc:	10800104 	addi	r2,r2,4
1010f8c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010f8c4:	003f8c06 	br	1010f6f8 <__alt_data_end+0xfffef6f8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010f8c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010f8cc:	0001883a 	nop
1010f8d0:	e037883a 	mov	sp,fp
1010f8d4:	df000017 	ldw	fp,0(sp)
1010f8d8:	dec00104 	addi	sp,sp,4
1010f8dc:	f800283a 	ret

1010f8e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010f8e0:	defff804 	addi	sp,sp,-32
1010f8e4:	df000715 	stw	fp,28(sp)
1010f8e8:	df000704 	addi	fp,sp,28
1010f8ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010f8f0:	e0bffb17 	ldw	r2,-20(fp)
1010f8f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010f8f8:	e0bff917 	ldw	r2,-28(fp)
1010f8fc:	10800017 	ldw	r2,0(r2)
1010f900:	10800104 	addi	r2,r2,4
1010f904:	10800037 	ldwio	r2,0(r2)
1010f908:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010f90c:	e0bffa17 	ldw	r2,-24(fp)
1010f910:	1081000c 	andi	r2,r2,1024
1010f914:	10000b26 	beq	r2,zero,1010f944 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010f918:	e0bff917 	ldw	r2,-28(fp)
1010f91c:	10800017 	ldw	r2,0(r2)
1010f920:	10800104 	addi	r2,r2,4
1010f924:	1007883a 	mov	r3,r2
1010f928:	e0bff917 	ldw	r2,-28(fp)
1010f92c:	10800817 	ldw	r2,32(r2)
1010f930:	10810014 	ori	r2,r2,1024
1010f934:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010f938:	e0bff917 	ldw	r2,-28(fp)
1010f93c:	10000915 	stw	zero,36(r2)
1010f940:	00000a06 	br	1010f96c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010f944:	e0bff917 	ldw	r2,-28(fp)
1010f948:	10c00917 	ldw	r3,36(r2)
1010f94c:	00a00034 	movhi	r2,32768
1010f950:	10bfff04 	addi	r2,r2,-4
1010f954:	10c00536 	bltu	r2,r3,1010f96c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010f958:	e0bff917 	ldw	r2,-28(fp)
1010f95c:	10800917 	ldw	r2,36(r2)
1010f960:	10c00044 	addi	r3,r2,1
1010f964:	e0bff917 	ldw	r2,-28(fp)
1010f968:	10c00915 	stw	r3,36(r2)
1010f96c:	00840474 	movhi	r2,4113
1010f970:	10941304 	addi	r2,r2,20556
1010f974:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010f978:	e037883a 	mov	sp,fp
1010f97c:	df000017 	ldw	fp,0(sp)
1010f980:	dec00104 	addi	sp,sp,4
1010f984:	f800283a 	ret

1010f988 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010f988:	defffd04 	addi	sp,sp,-12
1010f98c:	df000215 	stw	fp,8(sp)
1010f990:	df000204 	addi	fp,sp,8
1010f994:	e13ffe15 	stw	r4,-8(fp)
1010f998:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f99c:	00000506 	br	1010f9b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010f9a0:	e0bfff17 	ldw	r2,-4(fp)
1010f9a4:	1090000c 	andi	r2,r2,16384
1010f9a8:	10000226 	beq	r2,zero,1010f9b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010f9ac:	00bffd44 	movi	r2,-11
1010f9b0:	00000b06 	br	1010f9e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010f9b4:	e0bffe17 	ldw	r2,-8(fp)
1010f9b8:	10c00d17 	ldw	r3,52(r2)
1010f9bc:	e0bffe17 	ldw	r2,-8(fp)
1010f9c0:	10800c17 	ldw	r2,48(r2)
1010f9c4:	18800526 	beq	r3,r2,1010f9dc <altera_avalon_jtag_uart_close+0x54>
1010f9c8:	e0bffe17 	ldw	r2,-8(fp)
1010f9cc:	10c00917 	ldw	r3,36(r2)
1010f9d0:	e0bffe17 	ldw	r2,-8(fp)
1010f9d4:	10800117 	ldw	r2,4(r2)
1010f9d8:	18bff136 	bltu	r3,r2,1010f9a0 <__alt_data_end+0xfffef9a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010f9dc:	0005883a 	mov	r2,zero
}
1010f9e0:	e037883a 	mov	sp,fp
1010f9e4:	df000017 	ldw	fp,0(sp)
1010f9e8:	dec00104 	addi	sp,sp,4
1010f9ec:	f800283a 	ret

1010f9f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010f9f0:	defffa04 	addi	sp,sp,-24
1010f9f4:	df000515 	stw	fp,20(sp)
1010f9f8:	df000504 	addi	fp,sp,20
1010f9fc:	e13ffd15 	stw	r4,-12(fp)
1010fa00:	e17ffe15 	stw	r5,-8(fp)
1010fa04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010fa08:	00bff9c4 	movi	r2,-25
1010fa0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010fa10:	e0bffe17 	ldw	r2,-8(fp)
1010fa14:	10da8060 	cmpeqi	r3,r2,27137
1010fa18:	1800031e 	bne	r3,zero,1010fa28 <altera_avalon_jtag_uart_ioctl+0x38>
1010fa1c:	109a80a0 	cmpeqi	r2,r2,27138
1010fa20:	1000181e 	bne	r2,zero,1010fa84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010fa24:	00002906 	br	1010facc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010fa28:	e0bffd17 	ldw	r2,-12(fp)
1010fa2c:	10c00117 	ldw	r3,4(r2)
1010fa30:	00a00034 	movhi	r2,32768
1010fa34:	10bfffc4 	addi	r2,r2,-1
1010fa38:	18802126 	beq	r3,r2,1010fac0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010fa3c:	e0bfff17 	ldw	r2,-4(fp)
1010fa40:	10800017 	ldw	r2,0(r2)
1010fa44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010fa48:	e0bffc17 	ldw	r2,-16(fp)
1010fa4c:	10800090 	cmplti	r2,r2,2
1010fa50:	1000061e 	bne	r2,zero,1010fa6c <altera_avalon_jtag_uart_ioctl+0x7c>
1010fa54:	e0fffc17 	ldw	r3,-16(fp)
1010fa58:	00a00034 	movhi	r2,32768
1010fa5c:	10bfffc4 	addi	r2,r2,-1
1010fa60:	18800226 	beq	r3,r2,1010fa6c <altera_avalon_jtag_uart_ioctl+0x7c>
1010fa64:	e0bffc17 	ldw	r2,-16(fp)
1010fa68:	00000206 	br	1010fa74 <altera_avalon_jtag_uart_ioctl+0x84>
1010fa6c:	00a00034 	movhi	r2,32768
1010fa70:	10bfff84 	addi	r2,r2,-2
1010fa74:	e0fffd17 	ldw	r3,-12(fp)
1010fa78:	18800115 	stw	r2,4(r3)
      rc = 0;
1010fa7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010fa80:	00000f06 	br	1010fac0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010fa84:	e0bffd17 	ldw	r2,-12(fp)
1010fa88:	10c00117 	ldw	r3,4(r2)
1010fa8c:	00a00034 	movhi	r2,32768
1010fa90:	10bfffc4 	addi	r2,r2,-1
1010fa94:	18800c26 	beq	r3,r2,1010fac8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010fa98:	e0bffd17 	ldw	r2,-12(fp)
1010fa9c:	10c00917 	ldw	r3,36(r2)
1010faa0:	e0bffd17 	ldw	r2,-12(fp)
1010faa4:	10800117 	ldw	r2,4(r2)
1010faa8:	1885803a 	cmpltu	r2,r3,r2
1010faac:	10c03fcc 	andi	r3,r2,255
1010fab0:	e0bfff17 	ldw	r2,-4(fp)
1010fab4:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010fab8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010fabc:	00000206 	br	1010fac8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010fac0:	0001883a 	nop
1010fac4:	00000106 	br	1010facc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010fac8:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010facc:	e0bffb17 	ldw	r2,-20(fp)
}
1010fad0:	e037883a 	mov	sp,fp
1010fad4:	df000017 	ldw	fp,0(sp)
1010fad8:	dec00104 	addi	sp,sp,4
1010fadc:	f800283a 	ret

1010fae0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010fae0:	defff304 	addi	sp,sp,-52
1010fae4:	dfc00c15 	stw	ra,48(sp)
1010fae8:	df000b15 	stw	fp,44(sp)
1010faec:	df000b04 	addi	fp,sp,44
1010faf0:	e13ffc15 	stw	r4,-16(fp)
1010faf4:	e17ffd15 	stw	r5,-12(fp)
1010faf8:	e1bffe15 	stw	r6,-8(fp)
1010fafc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010fb00:	e0bffd17 	ldw	r2,-12(fp)
1010fb04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010fb08:	00004706 	br	1010fc28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010fb0c:	e0bffc17 	ldw	r2,-16(fp)
1010fb10:	10800a17 	ldw	r2,40(r2)
1010fb14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010fb18:	e0bffc17 	ldw	r2,-16(fp)
1010fb1c:	10800b17 	ldw	r2,44(r2)
1010fb20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010fb24:	e0fff717 	ldw	r3,-36(fp)
1010fb28:	e0bff817 	ldw	r2,-32(fp)
1010fb2c:	18800536 	bltu	r3,r2,1010fb44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010fb30:	e0fff717 	ldw	r3,-36(fp)
1010fb34:	e0bff817 	ldw	r2,-32(fp)
1010fb38:	1885c83a 	sub	r2,r3,r2
1010fb3c:	e0bff615 	stw	r2,-40(fp)
1010fb40:	00000406 	br	1010fb54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010fb44:	00c20004 	movi	r3,2048
1010fb48:	e0bff817 	ldw	r2,-32(fp)
1010fb4c:	1885c83a 	sub	r2,r3,r2
1010fb50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010fb54:	e0bff617 	ldw	r2,-40(fp)
1010fb58:	10001e26 	beq	r2,zero,1010fbd4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010fb5c:	e0fffe17 	ldw	r3,-8(fp)
1010fb60:	e0bff617 	ldw	r2,-40(fp)
1010fb64:	1880022e 	bgeu	r3,r2,1010fb70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010fb68:	e0bffe17 	ldw	r2,-8(fp)
1010fb6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010fb70:	e0bffc17 	ldw	r2,-16(fp)
1010fb74:	10c00e04 	addi	r3,r2,56
1010fb78:	e0bff817 	ldw	r2,-32(fp)
1010fb7c:	1885883a 	add	r2,r3,r2
1010fb80:	e1bff617 	ldw	r6,-40(fp)
1010fb84:	100b883a 	mov	r5,r2
1010fb88:	e13ff517 	ldw	r4,-44(fp)
1010fb8c:	0107b100 	call	10107b10 <memcpy>
      ptr   += n;
1010fb90:	e0fff517 	ldw	r3,-44(fp)
1010fb94:	e0bff617 	ldw	r2,-40(fp)
1010fb98:	1885883a 	add	r2,r3,r2
1010fb9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010fba0:	e0fffe17 	ldw	r3,-8(fp)
1010fba4:	e0bff617 	ldw	r2,-40(fp)
1010fba8:	1885c83a 	sub	r2,r3,r2
1010fbac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fbb0:	e0fff817 	ldw	r3,-32(fp)
1010fbb4:	e0bff617 	ldw	r2,-40(fp)
1010fbb8:	1885883a 	add	r2,r3,r2
1010fbbc:	10c1ffcc 	andi	r3,r2,2047
1010fbc0:	e0bffc17 	ldw	r2,-16(fp)
1010fbc4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010fbc8:	e0bffe17 	ldw	r2,-8(fp)
1010fbcc:	00bfcf16 	blt	zero,r2,1010fb0c <__alt_data_end+0xfffefb0c>
1010fbd0:	00000106 	br	1010fbd8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010fbd4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010fbd8:	e0fff517 	ldw	r3,-44(fp)
1010fbdc:	e0bffd17 	ldw	r2,-12(fp)
1010fbe0:	1880141e 	bne	r3,r2,1010fc34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010fbe4:	e0bfff17 	ldw	r2,-4(fp)
1010fbe8:	1090000c 	andi	r2,r2,16384
1010fbec:	1000131e 	bne	r2,zero,1010fc3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010fbf0:	0001883a 	nop
1010fbf4:	e0bffc17 	ldw	r2,-16(fp)
1010fbf8:	10c00a17 	ldw	r3,40(r2)
1010fbfc:	e0bff717 	ldw	r2,-36(fp)
1010fc00:	1880051e 	bne	r3,r2,1010fc18 <altera_avalon_jtag_uart_read+0x138>
1010fc04:	e0bffc17 	ldw	r2,-16(fp)
1010fc08:	10c00917 	ldw	r3,36(r2)
1010fc0c:	e0bffc17 	ldw	r2,-16(fp)
1010fc10:	10800117 	ldw	r2,4(r2)
1010fc14:	18bff736 	bltu	r3,r2,1010fbf4 <__alt_data_end+0xfffefbf4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010fc18:	e0bffc17 	ldw	r2,-16(fp)
1010fc1c:	10c00a17 	ldw	r3,40(r2)
1010fc20:	e0bff717 	ldw	r2,-36(fp)
1010fc24:	18800726 	beq	r3,r2,1010fc44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010fc28:	e0bffe17 	ldw	r2,-8(fp)
1010fc2c:	00bfb716 	blt	zero,r2,1010fb0c <__alt_data_end+0xfffefb0c>
1010fc30:	00000506 	br	1010fc48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010fc34:	0001883a 	nop
1010fc38:	00000306 	br	1010fc48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010fc3c:	0001883a 	nop
1010fc40:	00000106 	br	1010fc48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010fc44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010fc48:	e0fff517 	ldw	r3,-44(fp)
1010fc4c:	e0bffd17 	ldw	r2,-12(fp)
1010fc50:	18801826 	beq	r3,r2,1010fcb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fc54:	0005303a 	rdctl	r2,status
1010fc58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fc5c:	e0fffb17 	ldw	r3,-20(fp)
1010fc60:	00bfff84 	movi	r2,-2
1010fc64:	1884703a 	and	r2,r3,r2
1010fc68:	1001703a 	wrctl	status,r2
  
  return context;
1010fc6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010fc70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010fc74:	e0bffc17 	ldw	r2,-16(fp)
1010fc78:	10800817 	ldw	r2,32(r2)
1010fc7c:	10c00054 	ori	r3,r2,1
1010fc80:	e0bffc17 	ldw	r2,-16(fp)
1010fc84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fc88:	e0bffc17 	ldw	r2,-16(fp)
1010fc8c:	10800017 	ldw	r2,0(r2)
1010fc90:	10800104 	addi	r2,r2,4
1010fc94:	1007883a 	mov	r3,r2
1010fc98:	e0bffc17 	ldw	r2,-16(fp)
1010fc9c:	10800817 	ldw	r2,32(r2)
1010fca0:	18800035 	stwio	r2,0(r3)
1010fca4:	e0bffa17 	ldw	r2,-24(fp)
1010fca8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fcac:	e0bff917 	ldw	r2,-28(fp)
1010fcb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010fcb4:	e0fff517 	ldw	r3,-44(fp)
1010fcb8:	e0bffd17 	ldw	r2,-12(fp)
1010fcbc:	18800426 	beq	r3,r2,1010fcd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010fcc0:	e0fff517 	ldw	r3,-44(fp)
1010fcc4:	e0bffd17 	ldw	r2,-12(fp)
1010fcc8:	1885c83a 	sub	r2,r3,r2
1010fccc:	00000606 	br	1010fce8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010fcd0:	e0bfff17 	ldw	r2,-4(fp)
1010fcd4:	1090000c 	andi	r2,r2,16384
1010fcd8:	10000226 	beq	r2,zero,1010fce4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010fcdc:	00bffd44 	movi	r2,-11
1010fce0:	00000106 	br	1010fce8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010fce4:	00bffec4 	movi	r2,-5
}
1010fce8:	e037883a 	mov	sp,fp
1010fcec:	dfc00117 	ldw	ra,4(sp)
1010fcf0:	df000017 	ldw	fp,0(sp)
1010fcf4:	dec00204 	addi	sp,sp,8
1010fcf8:	f800283a 	ret

1010fcfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010fcfc:	defff304 	addi	sp,sp,-52
1010fd00:	dfc00c15 	stw	ra,48(sp)
1010fd04:	df000b15 	stw	fp,44(sp)
1010fd08:	df000b04 	addi	fp,sp,44
1010fd0c:	e13ffc15 	stw	r4,-16(fp)
1010fd10:	e17ffd15 	stw	r5,-12(fp)
1010fd14:	e1bffe15 	stw	r6,-8(fp)
1010fd18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010fd1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010fd20:	e0bffd17 	ldw	r2,-12(fp)
1010fd24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010fd28:	00003706 	br	1010fe08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010fd2c:	e0bffc17 	ldw	r2,-16(fp)
1010fd30:	10800c17 	ldw	r2,48(r2)
1010fd34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010fd38:	e0bffc17 	ldw	r2,-16(fp)
1010fd3c:	10800d17 	ldw	r2,52(r2)
1010fd40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010fd44:	e0fff917 	ldw	r3,-28(fp)
1010fd48:	e0bff517 	ldw	r2,-44(fp)
1010fd4c:	1880062e 	bgeu	r3,r2,1010fd68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010fd50:	e0fff517 	ldw	r3,-44(fp)
1010fd54:	e0bff917 	ldw	r2,-28(fp)
1010fd58:	1885c83a 	sub	r2,r3,r2
1010fd5c:	10bfffc4 	addi	r2,r2,-1
1010fd60:	e0bff615 	stw	r2,-40(fp)
1010fd64:	00000b06 	br	1010fd94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010fd68:	e0bff517 	ldw	r2,-44(fp)
1010fd6c:	10000526 	beq	r2,zero,1010fd84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010fd70:	00c20004 	movi	r3,2048
1010fd74:	e0bff917 	ldw	r2,-28(fp)
1010fd78:	1885c83a 	sub	r2,r3,r2
1010fd7c:	e0bff615 	stw	r2,-40(fp)
1010fd80:	00000406 	br	1010fd94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010fd84:	00c1ffc4 	movi	r3,2047
1010fd88:	e0bff917 	ldw	r2,-28(fp)
1010fd8c:	1885c83a 	sub	r2,r3,r2
1010fd90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010fd94:	e0bff617 	ldw	r2,-40(fp)
1010fd98:	10001e26 	beq	r2,zero,1010fe14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010fd9c:	e0fffe17 	ldw	r3,-8(fp)
1010fda0:	e0bff617 	ldw	r2,-40(fp)
1010fda4:	1880022e 	bgeu	r3,r2,1010fdb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010fda8:	e0bffe17 	ldw	r2,-8(fp)
1010fdac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010fdb0:	e0bffc17 	ldw	r2,-16(fp)
1010fdb4:	10c20e04 	addi	r3,r2,2104
1010fdb8:	e0bff917 	ldw	r2,-28(fp)
1010fdbc:	1885883a 	add	r2,r3,r2
1010fdc0:	e1bff617 	ldw	r6,-40(fp)
1010fdc4:	e17ffd17 	ldw	r5,-12(fp)
1010fdc8:	1009883a 	mov	r4,r2
1010fdcc:	0107b100 	call	10107b10 <memcpy>
      ptr   += n;
1010fdd0:	e0fffd17 	ldw	r3,-12(fp)
1010fdd4:	e0bff617 	ldw	r2,-40(fp)
1010fdd8:	1885883a 	add	r2,r3,r2
1010fddc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010fde0:	e0fffe17 	ldw	r3,-8(fp)
1010fde4:	e0bff617 	ldw	r2,-40(fp)
1010fde8:	1885c83a 	sub	r2,r3,r2
1010fdec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010fdf0:	e0fff917 	ldw	r3,-28(fp)
1010fdf4:	e0bff617 	ldw	r2,-40(fp)
1010fdf8:	1885883a 	add	r2,r3,r2
1010fdfc:	10c1ffcc 	andi	r3,r2,2047
1010fe00:	e0bffc17 	ldw	r2,-16(fp)
1010fe04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010fe08:	e0bffe17 	ldw	r2,-8(fp)
1010fe0c:	00bfc716 	blt	zero,r2,1010fd2c <__alt_data_end+0xfffefd2c>
1010fe10:	00000106 	br	1010fe18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010fe14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fe18:	0005303a 	rdctl	r2,status
1010fe1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fe20:	e0fffb17 	ldw	r3,-20(fp)
1010fe24:	00bfff84 	movi	r2,-2
1010fe28:	1884703a 	and	r2,r3,r2
1010fe2c:	1001703a 	wrctl	status,r2
  
  return context;
1010fe30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010fe34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010fe38:	e0bffc17 	ldw	r2,-16(fp)
1010fe3c:	10800817 	ldw	r2,32(r2)
1010fe40:	10c00094 	ori	r3,r2,2
1010fe44:	e0bffc17 	ldw	r2,-16(fp)
1010fe48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010fe4c:	e0bffc17 	ldw	r2,-16(fp)
1010fe50:	10800017 	ldw	r2,0(r2)
1010fe54:	10800104 	addi	r2,r2,4
1010fe58:	1007883a 	mov	r3,r2
1010fe5c:	e0bffc17 	ldw	r2,-16(fp)
1010fe60:	10800817 	ldw	r2,32(r2)
1010fe64:	18800035 	stwio	r2,0(r3)
1010fe68:	e0bffa17 	ldw	r2,-24(fp)
1010fe6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fe70:	e0bff817 	ldw	r2,-32(fp)
1010fe74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010fe78:	e0bffe17 	ldw	r2,-8(fp)
1010fe7c:	0080100e 	bge	zero,r2,1010fec0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010fe80:	e0bfff17 	ldw	r2,-4(fp)
1010fe84:	1090000c 	andi	r2,r2,16384
1010fe88:	1000101e 	bne	r2,zero,1010fecc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010fe8c:	0001883a 	nop
1010fe90:	e0bffc17 	ldw	r2,-16(fp)
1010fe94:	10c00d17 	ldw	r3,52(r2)
1010fe98:	e0bff517 	ldw	r2,-44(fp)
1010fe9c:	1880051e 	bne	r3,r2,1010feb4 <altera_avalon_jtag_uart_write+0x1b8>
1010fea0:	e0bffc17 	ldw	r2,-16(fp)
1010fea4:	10c00917 	ldw	r3,36(r2)
1010fea8:	e0bffc17 	ldw	r2,-16(fp)
1010feac:	10800117 	ldw	r2,4(r2)
1010feb0:	18bff736 	bltu	r3,r2,1010fe90 <__alt_data_end+0xfffefe90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010feb4:	e0bffc17 	ldw	r2,-16(fp)
1010feb8:	10800917 	ldw	r2,36(r2)
1010febc:	1000051e 	bne	r2,zero,1010fed4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010fec0:	e0bffe17 	ldw	r2,-8(fp)
1010fec4:	00bfd016 	blt	zero,r2,1010fe08 <__alt_data_end+0xfffefe08>
1010fec8:	00000306 	br	1010fed8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010fecc:	0001883a 	nop
1010fed0:	00000106 	br	1010fed8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010fed4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010fed8:	e0fffd17 	ldw	r3,-12(fp)
1010fedc:	e0bff717 	ldw	r2,-36(fp)
1010fee0:	18800426 	beq	r3,r2,1010fef4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010fee4:	e0fffd17 	ldw	r3,-12(fp)
1010fee8:	e0bff717 	ldw	r2,-36(fp)
1010feec:	1885c83a 	sub	r2,r3,r2
1010fef0:	00000606 	br	1010ff0c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010fef4:	e0bfff17 	ldw	r2,-4(fp)
1010fef8:	1090000c 	andi	r2,r2,16384
1010fefc:	10000226 	beq	r2,zero,1010ff08 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010ff00:	00bffd44 	movi	r2,-11
1010ff04:	00000106 	br	1010ff0c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010ff08:	00bffec4 	movi	r2,-5
}
1010ff0c:	e037883a 	mov	sp,fp
1010ff10:	dfc00117 	ldw	ra,4(sp)
1010ff14:	df000017 	ldw	fp,0(sp)
1010ff18:	dec00204 	addi	sp,sp,8
1010ff1c:	f800283a 	ret

1010ff20 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010ff20:	defff404 	addi	sp,sp,-48
1010ff24:	df000b15 	stw	fp,44(sp)
1010ff28:	df000b04 	addi	fp,sp,44
1010ff2c:	e13ffc15 	stw	r4,-16(fp)
1010ff30:	e17ffd15 	stw	r5,-12(fp)
1010ff34:	e1bffe15 	stw	r6,-8(fp)
1010ff38:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010ff3c:	e0bffc17 	ldw	r2,-16(fp)
1010ff40:	10800017 	ldw	r2,0(r2)
1010ff44:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010ff48:	e0bff517 	ldw	r2,-44(fp)
1010ff4c:	10800217 	ldw	r2,8(r2)
1010ff50:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010ff54:	e0bff617 	ldw	r2,-40(fp)
1010ff58:	10bfffc4 	addi	r2,r2,-1
1010ff5c:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010ff60:	e0bffb17 	ldw	r2,-20(fp)
1010ff64:	10800044 	addi	r2,r2,1
1010ff68:	e0bffb15 	stw	r2,-20(fp)
1010ff6c:	e0bffb17 	ldw	r2,-20(fp)
1010ff70:	10800003 	ldbu	r2,0(r2)
1010ff74:	10803fcc 	andi	r2,r2,255
1010ff78:	1080201c 	xori	r2,r2,128
1010ff7c:	10bfe004 	addi	r2,r2,-128
1010ff80:	103ff71e 	bne	r2,zero,1010ff60 <__alt_data_end+0xfffeff60>
    ;

  return ptr - string;
1010ff84:	e0fffb17 	ldw	r3,-20(fp)
1010ff88:	e0bff617 	ldw	r2,-40(fp)
1010ff8c:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010ff90:	10800044 	addi	r2,r2,1
1010ff94:	1007883a 	mov	r3,r2
1010ff98:	e0bffd17 	ldw	r2,-12(fp)
1010ff9c:	10c5883a 	add	r2,r2,r3
1010ffa0:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010ffa4:	d0a00d04 	addi	r2,gp,-32716
1010ffa8:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010ffac:	e0bffd17 	ldw	r2,-12(fp)
1010ffb0:	1009883a 	mov	r4,r2
  r5 = flags;
1010ffb4:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010ffb8:	e1bfff17 	ldw	r6,-4(fp)
1010ffbc:	e0bffd17 	ldw	r2,-12(fp)
1010ffc0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010ffc4:	e0bff917 	ldw	r2,-28(fp)
1010ffc8:	10bfffc4 	addi	r2,r2,-1
1010ffcc:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010ffd0:	e0bffa17 	ldw	r2,-24(fp)
1010ffd4:	10800044 	addi	r2,r2,1
1010ffd8:	e0bffa15 	stw	r2,-24(fp)
1010ffdc:	e0bffa17 	ldw	r2,-24(fp)
1010ffe0:	10800003 	ldbu	r2,0(r2)
1010ffe4:	10803fcc 	andi	r2,r2,255
1010ffe8:	1080201c 	xori	r2,r2,128
1010ffec:	10bfe004 	addi	r2,r2,-128
1010fff0:	103ff71e 	bne	r2,zero,1010ffd0 <__alt_data_end+0xfffeffd0>
    ;

  return ptr - string;
1010fff4:	e1fffa17 	ldw	r7,-24(fp)
1010fff8:	e0bff917 	ldw	r2,-28(fp)
1010fffc:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10110000:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10110004:	003da07a 	break	1

  handle = (void *)r2;
10110008:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1011000c:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10110010:	e0bff817 	ldw	r2,-32(fp)
10110014:	1000031e 	bne	r2,zero,10110024 <alt_hostfs_open+0x104>
    fd->priv = handle;
10110018:	e0bffc17 	ldw	r2,-16(fp)
1011001c:	e0fff717 	ldw	r3,-36(fp)
10110020:	10c00115 	stw	r3,4(r2)

  return -error;
10110024:	e0bff817 	ldw	r2,-32(fp)
10110028:	0085c83a 	sub	r2,zero,r2
}
1011002c:	e037883a 	mov	sp,fp
10110030:	df000017 	ldw	fp,0(sp)
10110034:	dec00104 	addi	sp,sp,4
10110038:	f800283a 	ret

1011003c <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1011003c:	defffd04 	addi	sp,sp,-12
10110040:	df000215 	stw	fp,8(sp)
10110044:	df000204 	addi	fp,sp,8
10110048:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1011004c:	d0a01004 	addi	r2,gp,-32704
10110050:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10110054:	e0bfff17 	ldw	r2,-4(fp)
10110058:	10800117 	ldw	r2,4(r2)
1011005c:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10110060:	003da07a 	break	1

  error = r3;
10110064:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10110068:	e0bffe17 	ldw	r2,-8(fp)
1011006c:	0085c83a 	sub	r2,zero,r2
}
10110070:	e037883a 	mov	sp,fp
10110074:	df000017 	ldw	fp,0(sp)
10110078:	dec00104 	addi	sp,sp,4
1011007c:	f800283a 	ret

10110080 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10110080:	defffa04 	addi	sp,sp,-24
10110084:	df000515 	stw	fp,20(sp)
10110088:	df000504 	addi	fp,sp,20
1011008c:	e13ffd15 	stw	r4,-12(fp)
10110090:	e17ffe15 	stw	r5,-8(fp)
10110094:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10110098:	d0a01304 	addi	r2,gp,-32692
1011009c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101100a0:	e0bffd17 	ldw	r2,-12(fp)
101100a4:	10800117 	ldw	r2,4(r2)
101100a8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
101100ac:	e0bffe17 	ldw	r2,-8(fp)
101100b0:	100b883a 	mov	r5,r2
  r6 = len;
101100b4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
101100b8:	003da07a 	break	1

  rc = r2;
101100bc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
101100c0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
101100c4:	e0bffc17 	ldw	r2,-16(fp)
101100c8:	10000326 	beq	r2,zero,101100d8 <alt_hostfs_read+0x58>
101100cc:	e0bffc17 	ldw	r2,-16(fp)
101100d0:	0085c83a 	sub	r2,zero,r2
101100d4:	00000106 	br	101100dc <alt_hostfs_read+0x5c>
101100d8:	e0bffb17 	ldw	r2,-20(fp)
}
101100dc:	e037883a 	mov	sp,fp
101100e0:	df000017 	ldw	fp,0(sp)
101100e4:	dec00104 	addi	sp,sp,4
101100e8:	f800283a 	ret

101100ec <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
101100ec:	defffa04 	addi	sp,sp,-24
101100f0:	df000515 	stw	fp,20(sp)
101100f4:	df000504 	addi	fp,sp,20
101100f8:	e13ffd15 	stw	r4,-12(fp)
101100fc:	e17ffe15 	stw	r5,-8(fp)
10110100:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10110104:	d0a01604 	addi	r2,gp,-32680
10110108:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1011010c:	e0bffd17 	ldw	r2,-12(fp)
10110110:	10800117 	ldw	r2,4(r2)
10110114:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10110118:	e0bffe17 	ldw	r2,-8(fp)
1011011c:	100b883a 	mov	r5,r2
  r6 = len;
10110120:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10110124:	003da07a 	break	1

  rc = r2;
10110128:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1011012c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10110130:	e0bffc17 	ldw	r2,-16(fp)
10110134:	10000326 	beq	r2,zero,10110144 <alt_hostfs_write+0x58>
10110138:	e0bffc17 	ldw	r2,-16(fp)
1011013c:	0085c83a 	sub	r2,zero,r2
10110140:	00000106 	br	10110148 <alt_hostfs_write+0x5c>
10110144:	e0bffb17 	ldw	r2,-20(fp)
}
10110148:	e037883a 	mov	sp,fp
1011014c:	df000017 	ldw	fp,0(sp)
10110150:	dec00104 	addi	sp,sp,4
10110154:	f800283a 	ret

10110158 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10110158:	defffa04 	addi	sp,sp,-24
1011015c:	df000515 	stw	fp,20(sp)
10110160:	df000504 	addi	fp,sp,20
10110164:	e13ffd15 	stw	r4,-12(fp)
10110168:	e17ffe15 	stw	r5,-8(fp)
1011016c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10110170:	d0a01904 	addi	r2,gp,-32668
10110174:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10110178:	e0bffd17 	ldw	r2,-12(fp)
1011017c:	10800117 	ldw	r2,4(r2)
10110180:	1009883a 	mov	r4,r2
  r5 = ptr;
10110184:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10110188:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1011018c:	003da07a 	break	1

  rc = r2;
10110190:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10110194:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10110198:	e0bffc17 	ldw	r2,-16(fp)
1011019c:	10000326 	beq	r2,zero,101101ac <alt_hostfs_seek+0x54>
101101a0:	e0bffc17 	ldw	r2,-16(fp)
101101a4:	0085c83a 	sub	r2,zero,r2
101101a8:	00000106 	br	101101b0 <alt_hostfs_seek+0x58>
101101ac:	e0bffb17 	ldw	r2,-20(fp)
}
101101b0:	e037883a 	mov	sp,fp
101101b4:	df000017 	ldw	fp,0(sp)
101101b8:	dec00104 	addi	sp,sp,4
101101bc:	f800283a 	ret

101101c0 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
101101c0:	deffe904 	addi	sp,sp,-92
101101c4:	df001615 	stw	fp,88(sp)
101101c8:	df001604 	addi	fp,sp,88
101101cc:	e13ffe15 	stw	r4,-8(fp)
101101d0:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
101101d4:	d0a01c04 	addi	r2,gp,-32656
101101d8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
101101dc:	e0bffe17 	ldw	r2,-8(fp)
101101e0:	10800117 	ldw	r2,4(r2)
101101e4:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
101101e8:	e0bfee04 	addi	r2,fp,-72
101101ec:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
101101f0:	003da07a 	break	1

  rc = r2;
101101f4:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
101101f8:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
101101fc:	e0bfec17 	ldw	r2,-80(fp)
10110200:	1000621e 	bne	r2,zero,1011038c <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10110204:	e0bfee04 	addi	r2,fp,-72
10110208:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1011020c:	e0bfea17 	ldw	r2,-88(fp)
10110210:	10801004 	addi	r2,r2,64
10110214:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10110218:	00001606 	br	10110274 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1011021c:	e0bfea17 	ldw	r2,-88(fp)
10110220:	10800017 	ldw	r2,0(r2)
10110224:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10110228:	e0bfea17 	ldw	r2,-88(fp)
1011022c:	10800017 	ldw	r2,0(r2)
10110230:	10803fec 	andhi	r2,r2,255
10110234:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10110238:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1011023c:	e0bfea17 	ldw	r2,-88(fp)
10110240:	10800017 	ldw	r2,0(r2)
10110244:	10bfc00c 	andi	r2,r2,65280
10110248:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1011024c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10110250:	e0bfea17 	ldw	r2,-88(fp)
10110254:	10800017 	ldw	r2,0(r2)
10110258:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1011025c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10110260:	e0bfea17 	ldw	r2,-88(fp)
10110264:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10110268:	e0bfea17 	ldw	r2,-88(fp)
1011026c:	10800104 	addi	r2,r2,4
10110270:	e0bfea15 	stw	r2,-88(fp)
10110274:	e0ffea17 	ldw	r3,-88(fp)
10110278:	e0bfed17 	ldw	r2,-76(fp)
1011027c:	18bfe736 	bltu	r3,r2,1011021c <__alt_data_end+0xffff021c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
10110280:	e0bfff17 	ldw	r2,-4(fp)
10110284:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10110288:	e0bfea17 	ldw	r2,-88(fp)
1011028c:	10800f04 	addi	r2,r2,60
10110290:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10110294:	00000506 	br	101102ac <alt_hostfs_fstat+0xec>
      *ptr = 0;
10110298:	e0bfea17 	ldw	r2,-88(fp)
1011029c:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
101102a0:	e0bfea17 	ldw	r2,-88(fp)
101102a4:	10800104 	addi	r2,r2,4
101102a8:	e0bfea15 	stw	r2,-88(fp)
101102ac:	e0ffea17 	ldw	r3,-88(fp)
101102b0:	e0bfed17 	ldw	r2,-76(fp)
101102b4:	18bff836 	bltu	r3,r2,10110298 <__alt_data_end+0xffff0298>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
101102b8:	e0bfee17 	ldw	r2,-72(fp)
101102bc:	1007883a 	mov	r3,r2
101102c0:	e0bfff17 	ldw	r2,-4(fp)
101102c4:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101102c8:	e0bfef17 	ldw	r2,-68(fp)
101102cc:	1007883a 	mov	r3,r2
101102d0:	e0bfff17 	ldw	r2,-4(fp)
101102d4:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101102d8:	e0fff017 	ldw	r3,-64(fp)
101102dc:	e0bfff17 	ldw	r2,-4(fp)
101102e0:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101102e4:	e0bff117 	ldw	r2,-60(fp)
101102e8:	1007883a 	mov	r3,r2
101102ec:	e0bfff17 	ldw	r2,-4(fp)
101102f0:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
101102f4:	e0bff217 	ldw	r2,-56(fp)
101102f8:	1007883a 	mov	r3,r2
101102fc:	e0bfff17 	ldw	r2,-4(fp)
10110300:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10110304:	e0bff317 	ldw	r2,-52(fp)
10110308:	1007883a 	mov	r3,r2
1011030c:	e0bfff17 	ldw	r2,-4(fp)
10110310:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10110314:	e0bff417 	ldw	r2,-48(fp)
10110318:	1007883a 	mov	r3,r2
1011031c:	e0bfff17 	ldw	r2,-4(fp)
10110320:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10110324:	e0bff617 	ldw	r2,-40(fp)
10110328:	1007883a 	mov	r3,r2
1011032c:	e0bfff17 	ldw	r2,-4(fp)
10110330:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10110334:	e0bffb17 	ldw	r2,-20(fp)
10110338:	1007883a 	mov	r3,r2
1011033c:	e0bfff17 	ldw	r2,-4(fp)
10110340:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10110344:	e0bffc17 	ldw	r2,-16(fp)
10110348:	1007883a 	mov	r3,r2
1011034c:	e0bfff17 	ldw	r2,-4(fp)
10110350:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10110354:	e0bffd17 	ldw	r2,-12(fp)
10110358:	1007883a 	mov	r3,r2
1011035c:	e0bfff17 	ldw	r2,-4(fp)
10110360:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10110364:	e0bff817 	ldw	r2,-32(fp)
10110368:	1007883a 	mov	r3,r2
1011036c:	e0bfff17 	ldw	r2,-4(fp)
10110370:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10110374:	e0bffa17 	ldw	r2,-24(fp)
10110378:	1007883a 	mov	r3,r2
1011037c:	e0bfff17 	ldw	r2,-4(fp)
10110380:	10c00c15 	stw	r3,48(r2)

    return rc;
10110384:	e0bfeb17 	ldw	r2,-84(fp)
10110388:	00000206 	br	10110394 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1011038c:	e0bfec17 	ldw	r2,-80(fp)
10110390:	0085c83a 	sub	r2,zero,r2
}
10110394:	e037883a 	mov	sp,fp
10110398:	df000017 	ldw	fp,0(sp)
1011039c:	dec00104 	addi	sp,sp,4
101103a0:	f800283a 	ret

101103a4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
101103a4:	defff504 	addi	sp,sp,-44
101103a8:	df000a15 	stw	fp,40(sp)
101103ac:	df000a04 	addi	fp,sp,40
101103b0:	e13ffc15 	stw	r4,-16(fp)
101103b4:	e17ffd15 	stw	r5,-12(fp)
101103b8:	e1bffe15 	stw	r6,-8(fp)
101103bc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
101103c0:	e03ff615 	stw	zero,-40(fp)
101103c4:	00840474 	movhi	r2,4113
101103c8:	10941304 	addi	r2,r2,20556
101103cc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
101103d0:	10003f26 	beq	r2,zero,101104d0 <alt_alarm_start+0x12c>
  {
    if (alarm)
101103d4:	e0bffc17 	ldw	r2,-16(fp)
101103d8:	10003b26 	beq	r2,zero,101104c8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
101103dc:	e0bffc17 	ldw	r2,-16(fp)
101103e0:	e0fffe17 	ldw	r3,-8(fp)
101103e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101103e8:	e0bffc17 	ldw	r2,-16(fp)
101103ec:	e0ffff17 	ldw	r3,-4(fp)
101103f0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101103f4:	0005303a 	rdctl	r2,status
101103f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101103fc:	e0fff917 	ldw	r3,-28(fp)
10110400:	00bfff84 	movi	r2,-2
10110404:	1884703a 	and	r2,r3,r2
10110408:	1001703a 	wrctl	status,r2
  
  return context;
1011040c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10110410:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10110414:	00840474 	movhi	r2,4113
10110418:	10941404 	addi	r2,r2,20560
1011041c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10110420:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10110424:	e0fffd17 	ldw	r3,-12(fp)
10110428:	e0bff617 	ldw	r2,-40(fp)
1011042c:	1885883a 	add	r2,r3,r2
10110430:	10c00044 	addi	r3,r2,1
10110434:	e0bffc17 	ldw	r2,-16(fp)
10110438:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1011043c:	e0bffc17 	ldw	r2,-16(fp)
10110440:	10c00217 	ldw	r3,8(r2)
10110444:	e0bff617 	ldw	r2,-40(fp)
10110448:	1880042e 	bgeu	r3,r2,1011045c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1011044c:	e0bffc17 	ldw	r2,-16(fp)
10110450:	00c00044 	movi	r3,1
10110454:	10c00405 	stb	r3,16(r2)
10110458:	00000206 	br	10110464 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1011045c:	e0bffc17 	ldw	r2,-16(fp)
10110460:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10110464:	e0fffc17 	ldw	r3,-16(fp)
10110468:	00840474 	movhi	r2,4113
1011046c:	108d2f04 	addi	r2,r2,13500
10110470:	e0bffa15 	stw	r2,-24(fp)
10110474:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110478:	e0bffb17 	ldw	r2,-20(fp)
1011047c:	e0fffa17 	ldw	r3,-24(fp)
10110480:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110484:	e0bffa17 	ldw	r2,-24(fp)
10110488:	10c00017 	ldw	r3,0(r2)
1011048c:	e0bffb17 	ldw	r2,-20(fp)
10110490:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110494:	e0bffa17 	ldw	r2,-24(fp)
10110498:	10800017 	ldw	r2,0(r2)
1011049c:	e0fffb17 	ldw	r3,-20(fp)
101104a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101104a4:	e0bffa17 	ldw	r2,-24(fp)
101104a8:	e0fffb17 	ldw	r3,-20(fp)
101104ac:	10c00015 	stw	r3,0(r2)
101104b0:	e0bff817 	ldw	r2,-32(fp)
101104b4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101104b8:	e0bff717 	ldw	r2,-36(fp)
101104bc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
101104c0:	0005883a 	mov	r2,zero
101104c4:	00000306 	br	101104d4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
101104c8:	00bffa84 	movi	r2,-22
101104cc:	00000106 	br	101104d4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
101104d0:	00bfde84 	movi	r2,-134
  }
}
101104d4:	e037883a 	mov	sp,fp
101104d8:	df000017 	ldw	fp,0(sp)
101104dc:	dec00104 	addi	sp,sp,4
101104e0:	f800283a 	ret

101104e4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
101104e4:	defffa04 	addi	sp,sp,-24
101104e8:	dfc00515 	stw	ra,20(sp)
101104ec:	df000415 	stw	fp,16(sp)
101104f0:	df000404 	addi	fp,sp,16
101104f4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
101104f8:	008000c4 	movi	r2,3
101104fc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10110500:	e0fffd17 	ldw	r3,-12(fp)
10110504:	008003f4 	movhi	r2,15
10110508:	10909004 	addi	r2,r2,16960
1011050c:	1885383a 	mul	r2,r3,r2
10110510:	100b883a 	mov	r5,r2
10110514:	0100bef4 	movhi	r4,763
10110518:	213c2004 	addi	r4,r4,-3968
1011051c:	010175c0 	call	1010175c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10110520:	100b883a 	mov	r5,r2
10110524:	01200034 	movhi	r4,32768
10110528:	213fffc4 	addi	r4,r4,-1
1011052c:	010175c0 	call	1010175c <__udivsi3>
10110530:	100b883a 	mov	r5,r2
10110534:	e13fff17 	ldw	r4,-4(fp)
10110538:	010175c0 	call	1010175c <__udivsi3>
1011053c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10110540:	e0bffe17 	ldw	r2,-8(fp)
10110544:	10002a26 	beq	r2,zero,101105f0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10110548:	e03ffc15 	stw	zero,-16(fp)
1011054c:	00001706 	br	101105ac <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10110550:	00a00034 	movhi	r2,32768
10110554:	10bfffc4 	addi	r2,r2,-1
10110558:	10bfffc4 	addi	r2,r2,-1
1011055c:	103ffe1e 	bne	r2,zero,10110558 <__alt_data_end+0xffff0558>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10110560:	e0fffd17 	ldw	r3,-12(fp)
10110564:	008003f4 	movhi	r2,15
10110568:	10909004 	addi	r2,r2,16960
1011056c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10110570:	100b883a 	mov	r5,r2
10110574:	0100bef4 	movhi	r4,763
10110578:	213c2004 	addi	r4,r4,-3968
1011057c:	010175c0 	call	1010175c <__udivsi3>
10110580:	100b883a 	mov	r5,r2
10110584:	01200034 	movhi	r4,32768
10110588:	213fffc4 	addi	r4,r4,-1
1011058c:	010175c0 	call	1010175c <__udivsi3>
10110590:	1007883a 	mov	r3,r2
10110594:	e0bfff17 	ldw	r2,-4(fp)
10110598:	10c5c83a 	sub	r2,r2,r3
1011059c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
101105a0:	e0bffc17 	ldw	r2,-16(fp)
101105a4:	10800044 	addi	r2,r2,1
101105a8:	e0bffc15 	stw	r2,-16(fp)
101105ac:	e0fffc17 	ldw	r3,-16(fp)
101105b0:	e0bffe17 	ldw	r2,-8(fp)
101105b4:	18bfe616 	blt	r3,r2,10110550 <__alt_data_end+0xffff0550>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101105b8:	e0fffd17 	ldw	r3,-12(fp)
101105bc:	008003f4 	movhi	r2,15
101105c0:	10909004 	addi	r2,r2,16960
101105c4:	1885383a 	mul	r2,r3,r2
101105c8:	100b883a 	mov	r5,r2
101105cc:	0100bef4 	movhi	r4,763
101105d0:	213c2004 	addi	r4,r4,-3968
101105d4:	010175c0 	call	1010175c <__udivsi3>
101105d8:	1007883a 	mov	r3,r2
101105dc:	e0bfff17 	ldw	r2,-4(fp)
101105e0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
101105e4:	10bfffc4 	addi	r2,r2,-1
101105e8:	103ffe1e 	bne	r2,zero,101105e4 <__alt_data_end+0xffff05e4>
101105ec:	00000d06 	br	10110624 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
101105f0:	e0fffd17 	ldw	r3,-12(fp)
101105f4:	008003f4 	movhi	r2,15
101105f8:	10909004 	addi	r2,r2,16960
101105fc:	1885383a 	mul	r2,r3,r2
10110600:	100b883a 	mov	r5,r2
10110604:	0100bef4 	movhi	r4,763
10110608:	213c2004 	addi	r4,r4,-3968
1011060c:	010175c0 	call	1010175c <__udivsi3>
10110610:	1007883a 	mov	r3,r2
10110614:	e0bfff17 	ldw	r2,-4(fp)
10110618:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
1011061c:	10bfffc4 	addi	r2,r2,-1
10110620:	00bffe16 	blt	zero,r2,1011061c <__alt_data_end+0xffff061c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10110624:	0005883a 	mov	r2,zero
}
10110628:	e037883a 	mov	sp,fp
1011062c:	dfc00117 	ldw	ra,4(sp)
10110630:	df000017 	ldw	fp,0(sp)
10110634:	dec00204 	addi	sp,sp,8
10110638:	f800283a 	ret

1011063c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1011063c:	defffe04 	addi	sp,sp,-8
10110640:	df000115 	stw	fp,4(sp)
10110644:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110648:	e03fff15 	stw	zero,-4(fp)
1011064c:	00000506 	br	10110664 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10110650:	e0bfff17 	ldw	r2,-4(fp)
10110654:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10110658:	e0bfff17 	ldw	r2,-4(fp)
1011065c:	10800804 	addi	r2,r2,32
10110660:	e0bfff15 	stw	r2,-4(fp)
10110664:	e0bfff17 	ldw	r2,-4(fp)
10110668:	10820030 	cmpltui	r2,r2,2048
1011066c:	103ff81e 	bne	r2,zero,10110650 <__alt_data_end+0xffff0650>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10110670:	0001883a 	nop
10110674:	e037883a 	mov	sp,fp
10110678:	df000017 	ldw	fp,0(sp)
1011067c:	dec00104 	addi	sp,sp,4
10110680:	f800283a 	ret

10110684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10110684:	defffe04 	addi	sp,sp,-8
10110688:	dfc00115 	stw	ra,4(sp)
1011068c:	df000015 	stw	fp,0(sp)
10110690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10110694:	00840474 	movhi	r2,4113
10110698:	108d1a04 	addi	r2,r2,13416
1011069c:	10800017 	ldw	r2,0(r2)
101106a0:	10000526 	beq	r2,zero,101106b8 <alt_get_errno+0x34>
101106a4:	00840474 	movhi	r2,4113
101106a8:	108d1a04 	addi	r2,r2,13416
101106ac:	10800017 	ldw	r2,0(r2)
101106b0:	103ee83a 	callr	r2
101106b4:	00000206 	br	101106c0 <alt_get_errno+0x3c>
101106b8:	00840474 	movhi	r2,4113
101106bc:	10940804 	addi	r2,r2,20512
}
101106c0:	e037883a 	mov	sp,fp
101106c4:	dfc00117 	ldw	ra,4(sp)
101106c8:	df000017 	ldw	fp,0(sp)
101106cc:	dec00204 	addi	sp,sp,8
101106d0:	f800283a 	ret

101106d4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
101106d4:	defffa04 	addi	sp,sp,-24
101106d8:	dfc00515 	stw	ra,20(sp)
101106dc:	df000415 	stw	fp,16(sp)
101106e0:	df000404 	addi	fp,sp,16
101106e4:	e13ffe15 	stw	r4,-8(fp)
101106e8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
101106ec:	e0bffe17 	ldw	r2,-8(fp)
101106f0:	10000326 	beq	r2,zero,10110700 <alt_dev_llist_insert+0x2c>
101106f4:	e0bffe17 	ldw	r2,-8(fp)
101106f8:	10800217 	ldw	r2,8(r2)
101106fc:	1000061e 	bne	r2,zero,10110718 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10110700:	01106840 	call	10110684 <alt_get_errno>
10110704:	1007883a 	mov	r3,r2
10110708:	00800584 	movi	r2,22
1011070c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10110710:	00bffa84 	movi	r2,-22
10110714:	00001306 	br	10110764 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10110718:	e0bffe17 	ldw	r2,-8(fp)
1011071c:	e0ffff17 	ldw	r3,-4(fp)
10110720:	e0fffc15 	stw	r3,-16(fp)
10110724:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110728:	e0bffd17 	ldw	r2,-12(fp)
1011072c:	e0fffc17 	ldw	r3,-16(fp)
10110730:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110734:	e0bffc17 	ldw	r2,-16(fp)
10110738:	10c00017 	ldw	r3,0(r2)
1011073c:	e0bffd17 	ldw	r2,-12(fp)
10110740:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110744:	e0bffc17 	ldw	r2,-16(fp)
10110748:	10800017 	ldw	r2,0(r2)
1011074c:	e0fffd17 	ldw	r3,-12(fp)
10110750:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110754:	e0bffc17 	ldw	r2,-16(fp)
10110758:	e0fffd17 	ldw	r3,-12(fp)
1011075c:	10c00015 	stw	r3,0(r2)

  return 0;  
10110760:	0005883a 	mov	r2,zero
}
10110764:	e037883a 	mov	sp,fp
10110768:	dfc00117 	ldw	ra,4(sp)
1011076c:	df000017 	ldw	fp,0(sp)
10110770:	dec00204 	addi	sp,sp,8
10110774:	f800283a 	ret

10110778 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10110778:	defffd04 	addi	sp,sp,-12
1011077c:	dfc00215 	stw	ra,8(sp)
10110780:	df000115 	stw	fp,4(sp)
10110784:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10110788:	00840474 	movhi	r2,4113
1011078c:	10857704 	addi	r2,r2,5596
10110790:	e0bfff15 	stw	r2,-4(fp)
10110794:	00000606 	br	101107b0 <_do_ctors+0x38>
        (*ctor) (); 
10110798:	e0bfff17 	ldw	r2,-4(fp)
1011079c:	10800017 	ldw	r2,0(r2)
101107a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101107a4:	e0bfff17 	ldw	r2,-4(fp)
101107a8:	10bfff04 	addi	r2,r2,-4
101107ac:	e0bfff15 	stw	r2,-4(fp)
101107b0:	e0ffff17 	ldw	r3,-4(fp)
101107b4:	00840474 	movhi	r2,4113
101107b8:	10857804 	addi	r2,r2,5600
101107bc:	18bff62e 	bgeu	r3,r2,10110798 <__alt_data_end+0xffff0798>
        (*ctor) (); 
}
101107c0:	0001883a 	nop
101107c4:	e037883a 	mov	sp,fp
101107c8:	dfc00117 	ldw	ra,4(sp)
101107cc:	df000017 	ldw	fp,0(sp)
101107d0:	dec00204 	addi	sp,sp,8
101107d4:	f800283a 	ret

101107d8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
101107d8:	defffd04 	addi	sp,sp,-12
101107dc:	dfc00215 	stw	ra,8(sp)
101107e0:	df000115 	stw	fp,4(sp)
101107e4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
101107e8:	00840474 	movhi	r2,4113
101107ec:	10857704 	addi	r2,r2,5596
101107f0:	e0bfff15 	stw	r2,-4(fp)
101107f4:	00000606 	br	10110810 <_do_dtors+0x38>
        (*dtor) (); 
101107f8:	e0bfff17 	ldw	r2,-4(fp)
101107fc:	10800017 	ldw	r2,0(r2)
10110800:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10110804:	e0bfff17 	ldw	r2,-4(fp)
10110808:	10bfff04 	addi	r2,r2,-4
1011080c:	e0bfff15 	stw	r2,-4(fp)
10110810:	e0ffff17 	ldw	r3,-4(fp)
10110814:	00840474 	movhi	r2,4113
10110818:	10857804 	addi	r2,r2,5600
1011081c:	18bff62e 	bgeu	r3,r2,101107f8 <__alt_data_end+0xffff07f8>
        (*dtor) (); 
}
10110820:	0001883a 	nop
10110824:	e037883a 	mov	sp,fp
10110828:	dfc00117 	ldw	ra,4(sp)
1011082c:	df000017 	ldw	fp,0(sp)
10110830:	dec00204 	addi	sp,sp,8
10110834:	f800283a 	ret

10110838 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10110838:	defffa04 	addi	sp,sp,-24
1011083c:	dfc00515 	stw	ra,20(sp)
10110840:	df000415 	stw	fp,16(sp)
10110844:	df000404 	addi	fp,sp,16
10110848:	e13ffe15 	stw	r4,-8(fp)
1011084c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10110850:	e0bfff17 	ldw	r2,-4(fp)
10110854:	10800017 	ldw	r2,0(r2)
10110858:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1011085c:	e13ffe17 	ldw	r4,-8(fp)
10110860:	0108e040 	call	10108e04 <strlen>
10110864:	10800044 	addi	r2,r2,1
10110868:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1011086c:	00000d06 	br	101108a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10110870:	e0bffc17 	ldw	r2,-16(fp)
10110874:	10800217 	ldw	r2,8(r2)
10110878:	e0fffd17 	ldw	r3,-12(fp)
1011087c:	180d883a 	mov	r6,r3
10110880:	e17ffe17 	ldw	r5,-8(fp)
10110884:	1009883a 	mov	r4,r2
10110888:	01112980 	call	10111298 <memcmp>
1011088c:	1000021e 	bne	r2,zero,10110898 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10110890:	e0bffc17 	ldw	r2,-16(fp)
10110894:	00000706 	br	101108b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10110898:	e0bffc17 	ldw	r2,-16(fp)
1011089c:	10800017 	ldw	r2,0(r2)
101108a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
101108a4:	e0fffc17 	ldw	r3,-16(fp)
101108a8:	e0bfff17 	ldw	r2,-4(fp)
101108ac:	18bff01e 	bne	r3,r2,10110870 <__alt_data_end+0xffff0870>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
101108b0:	0005883a 	mov	r2,zero
}
101108b4:	e037883a 	mov	sp,fp
101108b8:	dfc00117 	ldw	ra,4(sp)
101108bc:	df000017 	ldw	fp,0(sp)
101108c0:	dec00204 	addi	sp,sp,8
101108c4:	f800283a 	ret

101108c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
101108c8:	defffb04 	addi	sp,sp,-20
101108cc:	dfc00415 	stw	ra,16(sp)
101108d0:	df000315 	stw	fp,12(sp)
101108d4:	df000304 	addi	fp,sp,12
101108d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
101108dc:	00840474 	movhi	r2,4113
101108e0:	108d1504 	addi	r2,r2,13396
101108e4:	10800017 	ldw	r2,0(r2)
101108e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101108ec:	00003106 	br	101109b4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
101108f0:	e0bffd17 	ldw	r2,-12(fp)
101108f4:	10800217 	ldw	r2,8(r2)
101108f8:	1009883a 	mov	r4,r2
101108fc:	0108e040 	call	10108e04 <strlen>
10110900:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10110904:	e0bffd17 	ldw	r2,-12(fp)
10110908:	10c00217 	ldw	r3,8(r2)
1011090c:	e0bffe17 	ldw	r2,-8(fp)
10110910:	10bfffc4 	addi	r2,r2,-1
10110914:	1885883a 	add	r2,r3,r2
10110918:	10800003 	ldbu	r2,0(r2)
1011091c:	10803fcc 	andi	r2,r2,255
10110920:	1080201c 	xori	r2,r2,128
10110924:	10bfe004 	addi	r2,r2,-128
10110928:	10800bd8 	cmpnei	r2,r2,47
1011092c:	1000031e 	bne	r2,zero,1011093c <alt_find_file+0x74>
    {
      len -= 1;
10110930:	e0bffe17 	ldw	r2,-8(fp)
10110934:	10bfffc4 	addi	r2,r2,-1
10110938:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1011093c:	e0bffe17 	ldw	r2,-8(fp)
10110940:	e0ffff17 	ldw	r3,-4(fp)
10110944:	1885883a 	add	r2,r3,r2
10110948:	10800003 	ldbu	r2,0(r2)
1011094c:	10803fcc 	andi	r2,r2,255
10110950:	1080201c 	xori	r2,r2,128
10110954:	10bfe004 	addi	r2,r2,-128
10110958:	10800be0 	cmpeqi	r2,r2,47
1011095c:	1000081e 	bne	r2,zero,10110980 <alt_find_file+0xb8>
10110960:	e0bffe17 	ldw	r2,-8(fp)
10110964:	e0ffff17 	ldw	r3,-4(fp)
10110968:	1885883a 	add	r2,r3,r2
1011096c:	10800003 	ldbu	r2,0(r2)
10110970:	10803fcc 	andi	r2,r2,255
10110974:	1080201c 	xori	r2,r2,128
10110978:	10bfe004 	addi	r2,r2,-128
1011097c:	10000a1e 	bne	r2,zero,101109a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10110980:	e0bffd17 	ldw	r2,-12(fp)
10110984:	10800217 	ldw	r2,8(r2)
10110988:	e0fffe17 	ldw	r3,-8(fp)
1011098c:	180d883a 	mov	r6,r3
10110990:	e17fff17 	ldw	r5,-4(fp)
10110994:	1009883a 	mov	r4,r2
10110998:	01112980 	call	10111298 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1011099c:	1000021e 	bne	r2,zero,101109a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
101109a0:	e0bffd17 	ldw	r2,-12(fp)
101109a4:	00000806 	br	101109c8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
101109a8:	e0bffd17 	ldw	r2,-12(fp)
101109ac:	10800017 	ldw	r2,0(r2)
101109b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
101109b4:	e0fffd17 	ldw	r3,-12(fp)
101109b8:	00840474 	movhi	r2,4113
101109bc:	108d1504 	addi	r2,r2,13396
101109c0:	18bfcb1e 	bne	r3,r2,101108f0 <__alt_data_end+0xffff08f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101109c4:	0005883a 	mov	r2,zero
}
101109c8:	e037883a 	mov	sp,fp
101109cc:	dfc00117 	ldw	ra,4(sp)
101109d0:	df000017 	ldw	fp,0(sp)
101109d4:	dec00204 	addi	sp,sp,8
101109d8:	f800283a 	ret

101109dc <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
101109dc:	defffc04 	addi	sp,sp,-16
101109e0:	df000315 	stw	fp,12(sp)
101109e4:	df000304 	addi	fp,sp,12
101109e8:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
101109ec:	e0bfff17 	ldw	r2,-4(fp)
101109f0:	10800217 	ldw	r2,8(r2)
101109f4:	1000021e 	bne	r2,zero,10110a00 <alt_fs_reg+0x24>
  {
    return -ENODEV;
101109f8:	00bffb44 	movi	r2,-19
101109fc:	00001406 	br	10110a50 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10110a00:	e0ffff17 	ldw	r3,-4(fp)
10110a04:	00840474 	movhi	r2,4113
10110a08:	108d1504 	addi	r2,r2,13396
10110a0c:	e0bffd15 	stw	r2,-12(fp)
10110a10:	e0fffe15 	stw	r3,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10110a14:	e0bffe17 	ldw	r2,-8(fp)
10110a18:	e0fffd17 	ldw	r3,-12(fp)
10110a1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10110a20:	e0bffd17 	ldw	r2,-12(fp)
10110a24:	10c00017 	ldw	r3,0(r2)
10110a28:	e0bffe17 	ldw	r2,-8(fp)
10110a2c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10110a30:	e0bffd17 	ldw	r2,-12(fp)
10110a34:	10800017 	ldw	r2,0(r2)
10110a38:	e0fffe17 	ldw	r3,-8(fp)
10110a3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10110a40:	e0bffd17 	ldw	r2,-12(fp)
10110a44:	e0fffe17 	ldw	r3,-8(fp)
10110a48:	10c00015 	stw	r3,0(r2)

  return 0;
10110a4c:	0005883a 	mov	r2,zero
} 
10110a50:	e037883a 	mov	sp,fp
10110a54:	df000017 	ldw	fp,0(sp)
10110a58:	dec00104 	addi	sp,sp,4
10110a5c:	f800283a 	ret

10110a60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10110a60:	defffc04 	addi	sp,sp,-16
10110a64:	df000315 	stw	fp,12(sp)
10110a68:	df000304 	addi	fp,sp,12
10110a6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10110a70:	00bffa04 	movi	r2,-24
10110a74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110a78:	e03ffd15 	stw	zero,-12(fp)
10110a7c:	00001d06 	br	10110af4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
10110a80:	00840474 	movhi	r2,4113
10110a84:	10888d04 	addi	r2,r2,8756
10110a88:	e0fffd17 	ldw	r3,-12(fp)
10110a8c:	18c00324 	muli	r3,r3,12
10110a90:	10c5883a 	add	r2,r2,r3
10110a94:	10800017 	ldw	r2,0(r2)
10110a98:	1000131e 	bne	r2,zero,10110ae8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
10110a9c:	00840474 	movhi	r2,4113
10110aa0:	10888d04 	addi	r2,r2,8756
10110aa4:	e0fffd17 	ldw	r3,-12(fp)
10110aa8:	18c00324 	muli	r3,r3,12
10110aac:	10c5883a 	add	r2,r2,r3
10110ab0:	e0ffff17 	ldw	r3,-4(fp)
10110ab4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110ab8:	00840474 	movhi	r2,4113
10110abc:	108d1904 	addi	r2,r2,13412
10110ac0:	10c00017 	ldw	r3,0(r2)
10110ac4:	e0bffd17 	ldw	r2,-12(fp)
10110ac8:	1880040e 	bge	r3,r2,10110adc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
10110acc:	00840474 	movhi	r2,4113
10110ad0:	108d1904 	addi	r2,r2,13412
10110ad4:	e0fffd17 	ldw	r3,-12(fp)
10110ad8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10110adc:	e0bffd17 	ldw	r2,-12(fp)
10110ae0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
10110ae4:	00000606 	br	10110b00 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110ae8:	e0bffd17 	ldw	r2,-12(fp)
10110aec:	10800044 	addi	r2,r2,1
10110af0:	e0bffd15 	stw	r2,-12(fp)
10110af4:	e0bffd17 	ldw	r2,-12(fp)
10110af8:	10800810 	cmplti	r2,r2,32
10110afc:	103fe01e 	bne	r2,zero,10110a80 <__alt_data_end+0xffff0a80>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110b00:	e0bffe17 	ldw	r2,-8(fp)
}
10110b04:	e037883a 	mov	sp,fp
10110b08:	df000017 	ldw	fp,0(sp)
10110b0c:	dec00104 	addi	sp,sp,4
10110b10:	f800283a 	ret

10110b14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10110b14:	defffe04 	addi	sp,sp,-8
10110b18:	dfc00115 	stw	ra,4(sp)
10110b1c:	df000015 	stw	fp,0(sp)
10110b20:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10110b24:	01440004 	movi	r5,4096
10110b28:	0009883a 	mov	r4,zero
10110b2c:	01111200 	call	10111120 <alt_icache_flush>
#endif
}
10110b30:	0001883a 	nop
10110b34:	e037883a 	mov	sp,fp
10110b38:	dfc00117 	ldw	ra,4(sp)
10110b3c:	df000017 	ldw	fp,0(sp)
10110b40:	dec00204 	addi	sp,sp,8
10110b44:	f800283a 	ret

10110b48 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110b48:	defff904 	addi	sp,sp,-28
10110b4c:	dfc00615 	stw	ra,24(sp)
10110b50:	df000515 	stw	fp,20(sp)
10110b54:	df000504 	addi	fp,sp,20
10110b58:	e13ffc15 	stw	r4,-16(fp)
10110b5c:	e17ffd15 	stw	r5,-12(fp)
10110b60:	e1bffe15 	stw	r6,-8(fp)
10110b64:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10110b68:	e0800217 	ldw	r2,8(fp)
10110b6c:	d8800015 	stw	r2,0(sp)
10110b70:	e1ffff17 	ldw	r7,-4(fp)
10110b74:	e1bffe17 	ldw	r6,-8(fp)
10110b78:	e17ffd17 	ldw	r5,-12(fp)
10110b7c:	e13ffc17 	ldw	r4,-16(fp)
10110b80:	0110d280 	call	10110d28 <alt_iic_isr_register>
}  
10110b84:	e037883a 	mov	sp,fp
10110b88:	dfc00117 	ldw	ra,4(sp)
10110b8c:	df000017 	ldw	fp,0(sp)
10110b90:	dec00204 	addi	sp,sp,8
10110b94:	f800283a 	ret

10110b98 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10110b98:	defff904 	addi	sp,sp,-28
10110b9c:	df000615 	stw	fp,24(sp)
10110ba0:	df000604 	addi	fp,sp,24
10110ba4:	e13ffe15 	stw	r4,-8(fp)
10110ba8:	e17fff15 	stw	r5,-4(fp)
10110bac:	e0bfff17 	ldw	r2,-4(fp)
10110bb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110bb4:	0005303a 	rdctl	r2,status
10110bb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110bbc:	e0fffb17 	ldw	r3,-20(fp)
10110bc0:	00bfff84 	movi	r2,-2
10110bc4:	1884703a 	and	r2,r3,r2
10110bc8:	1001703a 	wrctl	status,r2
  
  return context;
10110bcc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110bd0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10110bd4:	00c00044 	movi	r3,1
10110bd8:	e0bffa17 	ldw	r2,-24(fp)
10110bdc:	1884983a 	sll	r2,r3,r2
10110be0:	1007883a 	mov	r3,r2
10110be4:	00840474 	movhi	r2,4113
10110be8:	10941204 	addi	r2,r2,20552
10110bec:	10800017 	ldw	r2,0(r2)
10110bf0:	1886b03a 	or	r3,r3,r2
10110bf4:	00840474 	movhi	r2,4113
10110bf8:	10941204 	addi	r2,r2,20552
10110bfc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110c00:	00840474 	movhi	r2,4113
10110c04:	10941204 	addi	r2,r2,20552
10110c08:	10800017 	ldw	r2,0(r2)
10110c0c:	100170fa 	wrctl	ienable,r2
10110c10:	e0bffc17 	ldw	r2,-16(fp)
10110c14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110c18:	e0bffd17 	ldw	r2,-12(fp)
10110c1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110c20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10110c24:	0001883a 	nop
}
10110c28:	e037883a 	mov	sp,fp
10110c2c:	df000017 	ldw	fp,0(sp)
10110c30:	dec00104 	addi	sp,sp,4
10110c34:	f800283a 	ret

10110c38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10110c38:	defff904 	addi	sp,sp,-28
10110c3c:	df000615 	stw	fp,24(sp)
10110c40:	df000604 	addi	fp,sp,24
10110c44:	e13ffe15 	stw	r4,-8(fp)
10110c48:	e17fff15 	stw	r5,-4(fp)
10110c4c:	e0bfff17 	ldw	r2,-4(fp)
10110c50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110c54:	0005303a 	rdctl	r2,status
10110c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110c5c:	e0fffb17 	ldw	r3,-20(fp)
10110c60:	00bfff84 	movi	r2,-2
10110c64:	1884703a 	and	r2,r3,r2
10110c68:	1001703a 	wrctl	status,r2
  
  return context;
10110c6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10110c70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10110c74:	00c00044 	movi	r3,1
10110c78:	e0bffa17 	ldw	r2,-24(fp)
10110c7c:	1884983a 	sll	r2,r3,r2
10110c80:	0084303a 	nor	r2,zero,r2
10110c84:	1007883a 	mov	r3,r2
10110c88:	00840474 	movhi	r2,4113
10110c8c:	10941204 	addi	r2,r2,20552
10110c90:	10800017 	ldw	r2,0(r2)
10110c94:	1886703a 	and	r3,r3,r2
10110c98:	00840474 	movhi	r2,4113
10110c9c:	10941204 	addi	r2,r2,20552
10110ca0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10110ca4:	00840474 	movhi	r2,4113
10110ca8:	10941204 	addi	r2,r2,20552
10110cac:	10800017 	ldw	r2,0(r2)
10110cb0:	100170fa 	wrctl	ienable,r2
10110cb4:	e0bffc17 	ldw	r2,-16(fp)
10110cb8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110cbc:	e0bffd17 	ldw	r2,-12(fp)
10110cc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10110cc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10110cc8:	0001883a 	nop
}
10110ccc:	e037883a 	mov	sp,fp
10110cd0:	df000017 	ldw	fp,0(sp)
10110cd4:	dec00104 	addi	sp,sp,4
10110cd8:	f800283a 	ret

10110cdc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10110cdc:	defffc04 	addi	sp,sp,-16
10110ce0:	df000315 	stw	fp,12(sp)
10110ce4:	df000304 	addi	fp,sp,12
10110ce8:	e13ffe15 	stw	r4,-8(fp)
10110cec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10110cf0:	000530fa 	rdctl	r2,ienable
10110cf4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10110cf8:	00c00044 	movi	r3,1
10110cfc:	e0bfff17 	ldw	r2,-4(fp)
10110d00:	1884983a 	sll	r2,r3,r2
10110d04:	1007883a 	mov	r3,r2
10110d08:	e0bffd17 	ldw	r2,-12(fp)
10110d0c:	1884703a 	and	r2,r3,r2
10110d10:	1004c03a 	cmpne	r2,r2,zero
10110d14:	10803fcc 	andi	r2,r2,255
}
10110d18:	e037883a 	mov	sp,fp
10110d1c:	df000017 	ldw	fp,0(sp)
10110d20:	dec00104 	addi	sp,sp,4
10110d24:	f800283a 	ret

10110d28 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10110d28:	defff504 	addi	sp,sp,-44
10110d2c:	dfc00a15 	stw	ra,40(sp)
10110d30:	df000915 	stw	fp,36(sp)
10110d34:	df000904 	addi	fp,sp,36
10110d38:	e13ffc15 	stw	r4,-16(fp)
10110d3c:	e17ffd15 	stw	r5,-12(fp)
10110d40:	e1bffe15 	stw	r6,-8(fp)
10110d44:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10110d48:	00bffa84 	movi	r2,-22
10110d4c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10110d50:	e0bffd17 	ldw	r2,-12(fp)
10110d54:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10110d58:	e0bff817 	ldw	r2,-32(fp)
10110d5c:	10800808 	cmpgei	r2,r2,32
10110d60:	1000271e 	bne	r2,zero,10110e00 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110d64:	0005303a 	rdctl	r2,status
10110d68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110d6c:	e0fffb17 	ldw	r3,-20(fp)
10110d70:	00bfff84 	movi	r2,-2
10110d74:	1884703a 	and	r2,r3,r2
10110d78:	1001703a 	wrctl	status,r2
  
  return context;
10110d7c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10110d80:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10110d84:	00840474 	movhi	r2,4113
10110d88:	10942004 	addi	r2,r2,20608
10110d8c:	e0fff817 	ldw	r3,-32(fp)
10110d90:	180690fa 	slli	r3,r3,3
10110d94:	10c5883a 	add	r2,r2,r3
10110d98:	e0fffe17 	ldw	r3,-8(fp)
10110d9c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10110da0:	00840474 	movhi	r2,4113
10110da4:	10942004 	addi	r2,r2,20608
10110da8:	e0fff817 	ldw	r3,-32(fp)
10110dac:	180690fa 	slli	r3,r3,3
10110db0:	10c5883a 	add	r2,r2,r3
10110db4:	10800104 	addi	r2,r2,4
10110db8:	e0ffff17 	ldw	r3,-4(fp)
10110dbc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10110dc0:	e0bffe17 	ldw	r2,-8(fp)
10110dc4:	10000526 	beq	r2,zero,10110ddc <alt_iic_isr_register+0xb4>
10110dc8:	e0bff817 	ldw	r2,-32(fp)
10110dcc:	100b883a 	mov	r5,r2
10110dd0:	e13ffc17 	ldw	r4,-16(fp)
10110dd4:	0110b980 	call	10110b98 <alt_ic_irq_enable>
10110dd8:	00000406 	br	10110dec <alt_iic_isr_register+0xc4>
10110ddc:	e0bff817 	ldw	r2,-32(fp)
10110de0:	100b883a 	mov	r5,r2
10110de4:	e13ffc17 	ldw	r4,-16(fp)
10110de8:	0110c380 	call	10110c38 <alt_ic_irq_disable>
10110dec:	e0bff715 	stw	r2,-36(fp)
10110df0:	e0bffa17 	ldw	r2,-24(fp)
10110df4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110df8:	e0bff917 	ldw	r2,-28(fp)
10110dfc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10110e00:	e0bff717 	ldw	r2,-36(fp)
}
10110e04:	e037883a 	mov	sp,fp
10110e08:	dfc00117 	ldw	ra,4(sp)
10110e0c:	df000017 	ldw	fp,0(sp)
10110e10:	dec00204 	addi	sp,sp,8
10110e14:	f800283a 	ret

10110e18 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10110e18:	defff904 	addi	sp,sp,-28
10110e1c:	dfc00615 	stw	ra,24(sp)
10110e20:	df000515 	stw	fp,20(sp)
10110e24:	df000504 	addi	fp,sp,20
10110e28:	e13ffc15 	stw	r4,-16(fp)
10110e2c:	e17ffd15 	stw	r5,-12(fp)
10110e30:	e1bffe15 	stw	r6,-8(fp)
10110e34:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
10110e38:	e1bfff17 	ldw	r6,-4(fp)
10110e3c:	e17ffe17 	ldw	r5,-8(fp)
10110e40:	e13ffd17 	ldw	r4,-12(fp)
10110e44:	010eeb40 	call	1010eeb4 <open>
10110e48:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10110e4c:	e0bffb17 	ldw	r2,-20(fp)
10110e50:	10001c16 	blt	r2,zero,10110ec4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10110e54:	00840474 	movhi	r2,4113
10110e58:	10888d04 	addi	r2,r2,8756
10110e5c:	e0fffb17 	ldw	r3,-20(fp)
10110e60:	18c00324 	muli	r3,r3,12
10110e64:	10c5883a 	add	r2,r2,r3
10110e68:	10c00017 	ldw	r3,0(r2)
10110e6c:	e0bffc17 	ldw	r2,-16(fp)
10110e70:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10110e74:	00840474 	movhi	r2,4113
10110e78:	10888d04 	addi	r2,r2,8756
10110e7c:	e0fffb17 	ldw	r3,-20(fp)
10110e80:	18c00324 	muli	r3,r3,12
10110e84:	10c5883a 	add	r2,r2,r3
10110e88:	10800104 	addi	r2,r2,4
10110e8c:	10c00017 	ldw	r3,0(r2)
10110e90:	e0bffc17 	ldw	r2,-16(fp)
10110e94:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10110e98:	00840474 	movhi	r2,4113
10110e9c:	10888d04 	addi	r2,r2,8756
10110ea0:	e0fffb17 	ldw	r3,-20(fp)
10110ea4:	18c00324 	muli	r3,r3,12
10110ea8:	10c5883a 	add	r2,r2,r3
10110eac:	10800204 	addi	r2,r2,8
10110eb0:	10c00017 	ldw	r3,0(r2)
10110eb4:	e0bffc17 	ldw	r2,-16(fp)
10110eb8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10110ebc:	e13ffb17 	ldw	r4,-20(fp)
10110ec0:	010f1580 	call	1010f158 <alt_release_fd>
  }
} 
10110ec4:	0001883a 	nop
10110ec8:	e037883a 	mov	sp,fp
10110ecc:	dfc00117 	ldw	ra,4(sp)
10110ed0:	df000017 	ldw	fp,0(sp)
10110ed4:	dec00204 	addi	sp,sp,8
10110ed8:	f800283a 	ret

10110edc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10110edc:	defffb04 	addi	sp,sp,-20
10110ee0:	dfc00415 	stw	ra,16(sp)
10110ee4:	df000315 	stw	fp,12(sp)
10110ee8:	df000304 	addi	fp,sp,12
10110eec:	e13ffd15 	stw	r4,-12(fp)
10110ef0:	e17ffe15 	stw	r5,-8(fp)
10110ef4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10110ef8:	01c07fc4 	movi	r7,511
10110efc:	01800044 	movi	r6,1
10110f00:	e17ffd17 	ldw	r5,-12(fp)
10110f04:	01040474 	movhi	r4,4113
10110f08:	21089004 	addi	r4,r4,8768
10110f0c:	0110e180 	call	10110e18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10110f10:	01c07fc4 	movi	r7,511
10110f14:	000d883a 	mov	r6,zero
10110f18:	e17ffe17 	ldw	r5,-8(fp)
10110f1c:	01040474 	movhi	r4,4113
10110f20:	21088d04 	addi	r4,r4,8756
10110f24:	0110e180 	call	10110e18 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10110f28:	01c07fc4 	movi	r7,511
10110f2c:	01800044 	movi	r6,1
10110f30:	e17fff17 	ldw	r5,-4(fp)
10110f34:	01040474 	movhi	r4,4113
10110f38:	21089304 	addi	r4,r4,8780
10110f3c:	0110e180 	call	10110e18 <alt_open_fd>
}  
10110f40:	0001883a 	nop
10110f44:	e037883a 	mov	sp,fp
10110f48:	dfc00117 	ldw	ra,4(sp)
10110f4c:	df000017 	ldw	fp,0(sp)
10110f50:	dec00204 	addi	sp,sp,8
10110f54:	f800283a 	ret

10110f58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10110f58:	defffa04 	addi	sp,sp,-24
10110f5c:	df000515 	stw	fp,20(sp)
10110f60:	df000504 	addi	fp,sp,20
10110f64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10110f68:	0005303a 	rdctl	r2,status
10110f6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10110f70:	e0fffc17 	ldw	r3,-16(fp)
10110f74:	00bfff84 	movi	r2,-2
10110f78:	1884703a 	and	r2,r3,r2
10110f7c:	1001703a 	wrctl	status,r2
  
  return context;
10110f80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10110f84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10110f88:	e0bfff17 	ldw	r2,-4(fp)
10110f8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10110f90:	e0bffd17 	ldw	r2,-12(fp)
10110f94:	10800017 	ldw	r2,0(r2)
10110f98:	e0fffd17 	ldw	r3,-12(fp)
10110f9c:	18c00117 	ldw	r3,4(r3)
10110fa0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10110fa4:	e0bffd17 	ldw	r2,-12(fp)
10110fa8:	10800117 	ldw	r2,4(r2)
10110fac:	e0fffd17 	ldw	r3,-12(fp)
10110fb0:	18c00017 	ldw	r3,0(r3)
10110fb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10110fb8:	e0bffd17 	ldw	r2,-12(fp)
10110fbc:	e0fffd17 	ldw	r3,-12(fp)
10110fc0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10110fc4:	e0bffd17 	ldw	r2,-12(fp)
10110fc8:	e0fffd17 	ldw	r3,-12(fp)
10110fcc:	10c00015 	stw	r3,0(r2)
10110fd0:	e0bffb17 	ldw	r2,-20(fp)
10110fd4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10110fd8:	e0bffe17 	ldw	r2,-8(fp)
10110fdc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10110fe0:	0001883a 	nop
10110fe4:	e037883a 	mov	sp,fp
10110fe8:	df000017 	ldw	fp,0(sp)
10110fec:	dec00104 	addi	sp,sp,4
10110ff0:	f800283a 	ret

10110ff4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10110ff4:	defffb04 	addi	sp,sp,-20
10110ff8:	dfc00415 	stw	ra,16(sp)
10110ffc:	df000315 	stw	fp,12(sp)
10111000:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10111004:	d0a02017 	ldw	r2,-32640(gp)
10111008:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1011100c:	d0a70517 	ldw	r2,-25580(gp)
10111010:	10800044 	addi	r2,r2,1
10111014:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10111018:	00002e06 	br	101110d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1011101c:	e0bffd17 	ldw	r2,-12(fp)
10111020:	10800017 	ldw	r2,0(r2)
10111024:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10111028:	e0bffd17 	ldw	r2,-12(fp)
1011102c:	10800403 	ldbu	r2,16(r2)
10111030:	10803fcc 	andi	r2,r2,255
10111034:	10000426 	beq	r2,zero,10111048 <alt_tick+0x54>
10111038:	d0a70517 	ldw	r2,-25580(gp)
1011103c:	1000021e 	bne	r2,zero,10111048 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10111040:	e0bffd17 	ldw	r2,-12(fp)
10111044:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10111048:	e0bffd17 	ldw	r2,-12(fp)
1011104c:	10800217 	ldw	r2,8(r2)
10111050:	d0e70517 	ldw	r3,-25580(gp)
10111054:	18801d36 	bltu	r3,r2,101110cc <alt_tick+0xd8>
10111058:	e0bffd17 	ldw	r2,-12(fp)
1011105c:	10800403 	ldbu	r2,16(r2)
10111060:	10803fcc 	andi	r2,r2,255
10111064:	1000191e 	bne	r2,zero,101110cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10111068:	e0bffd17 	ldw	r2,-12(fp)
1011106c:	10800317 	ldw	r2,12(r2)
10111070:	e0fffd17 	ldw	r3,-12(fp)
10111074:	18c00517 	ldw	r3,20(r3)
10111078:	1809883a 	mov	r4,r3
1011107c:	103ee83a 	callr	r2
10111080:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10111084:	e0bfff17 	ldw	r2,-4(fp)
10111088:	1000031e 	bne	r2,zero,10111098 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1011108c:	e13ffd17 	ldw	r4,-12(fp)
10111090:	0110f580 	call	10110f58 <alt_alarm_stop>
10111094:	00000d06 	br	101110cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10111098:	e0bffd17 	ldw	r2,-12(fp)
1011109c:	10c00217 	ldw	r3,8(r2)
101110a0:	e0bfff17 	ldw	r2,-4(fp)
101110a4:	1887883a 	add	r3,r3,r2
101110a8:	e0bffd17 	ldw	r2,-12(fp)
101110ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
101110b0:	e0bffd17 	ldw	r2,-12(fp)
101110b4:	10c00217 	ldw	r3,8(r2)
101110b8:	d0a70517 	ldw	r2,-25580(gp)
101110bc:	1880032e 	bgeu	r3,r2,101110cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
101110c0:	e0bffd17 	ldw	r2,-12(fp)
101110c4:	00c00044 	movi	r3,1
101110c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
101110cc:	e0bffe17 	ldw	r2,-8(fp)
101110d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
101110d4:	e0fffd17 	ldw	r3,-12(fp)
101110d8:	d0a02004 	addi	r2,gp,-32640
101110dc:	18bfcf1e 	bne	r3,r2,1011101c <__alt_data_end+0xffff101c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
101110e0:	0001883a 	nop
}
101110e4:	0001883a 	nop
101110e8:	e037883a 	mov	sp,fp
101110ec:	dfc00117 	ldw	ra,4(sp)
101110f0:	df000017 	ldw	fp,0(sp)
101110f4:	dec00204 	addi	sp,sp,8
101110f8:	f800283a 	ret

101110fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
101110fc:	deffff04 	addi	sp,sp,-4
10111100:	df000015 	stw	fp,0(sp)
10111104:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10111108:	000170fa 	wrctl	ienable,zero
}
1011110c:	0001883a 	nop
10111110:	e037883a 	mov	sp,fp
10111114:	df000017 	ldw	fp,0(sp)
10111118:	dec00104 	addi	sp,sp,4
1011111c:	f800283a 	ret

10111120 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
10111120:	defffb04 	addi	sp,sp,-20
10111124:	df000415 	stw	fp,16(sp)
10111128:	df000404 	addi	fp,sp,16
1011112c:	e13ffe15 	stw	r4,-8(fp)
10111130:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10111134:	e0bfff17 	ldw	r2,-4(fp)
10111138:	10840070 	cmpltui	r2,r2,4097
1011113c:	1000021e 	bne	r2,zero,10111148 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
10111140:	00840004 	movi	r2,4096
10111144:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10111148:	e0fffe17 	ldw	r3,-8(fp)
1011114c:	e0bfff17 	ldw	r2,-4(fp)
10111150:	1885883a 	add	r2,r3,r2
10111154:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10111158:	e0bffe17 	ldw	r2,-8(fp)
1011115c:	e0bffc15 	stw	r2,-16(fp)
10111160:	00000506 	br	10111178 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10111164:	e0bffc17 	ldw	r2,-16(fp)
10111168:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
1011116c:	e0bffc17 	ldw	r2,-16(fp)
10111170:	10800804 	addi	r2,r2,32
10111174:	e0bffc15 	stw	r2,-16(fp)
10111178:	e0fffc17 	ldw	r3,-16(fp)
1011117c:	e0bffd17 	ldw	r2,-12(fp)
10111180:	18bff836 	bltu	r3,r2,10111164 <__alt_data_end+0xffff1164>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
10111184:	e0bffe17 	ldw	r2,-8(fp)
10111188:	108007cc 	andi	r2,r2,31
1011118c:	10000226 	beq	r2,zero,10111198 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
10111190:	e0bffc17 	ldw	r2,-16(fp)
10111194:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
10111198:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
1011119c:	0001883a 	nop
101111a0:	e037883a 	mov	sp,fp
101111a4:	df000017 	ldw	fp,0(sp)
101111a8:	dec00104 	addi	sp,sp,4
101111ac:	f800283a 	ret

101111b0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
101111b0:	defffe04 	addi	sp,sp,-8
101111b4:	df000115 	stw	fp,4(sp)
101111b8:	df000104 	addi	fp,sp,4
101111bc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
101111c0:	e0bfff17 	ldw	r2,-4(fp)
101111c4:	10bffe84 	addi	r2,r2,-6
101111c8:	10c00428 	cmpgeui	r3,r2,16
101111cc:	18001a1e 	bne	r3,zero,10111238 <alt_exception_cause_generated_bad_addr+0x88>
101111d0:	100690ba 	slli	r3,r2,2
101111d4:	00840474 	movhi	r2,4113
101111d8:	10847a04 	addi	r2,r2,4584
101111dc:	1885883a 	add	r2,r3,r2
101111e0:	10800017 	ldw	r2,0(r2)
101111e4:	1000683a 	jmp	r2
101111e8:	10111228 	cmpgeui	zero,r2,17480
101111ec:	10111228 	cmpgeui	zero,r2,17480
101111f0:	10111238 	rdprs	zero,r2,17480
101111f4:	10111238 	rdprs	zero,r2,17480
101111f8:	10111238 	rdprs	zero,r2,17480
101111fc:	10111228 	cmpgeui	zero,r2,17480
10111200:	10111230 	cmpltui	zero,r2,17480
10111204:	10111238 	rdprs	zero,r2,17480
10111208:	10111228 	cmpgeui	zero,r2,17480
1011120c:	10111228 	cmpgeui	zero,r2,17480
10111210:	10111238 	rdprs	zero,r2,17480
10111214:	10111228 	cmpgeui	zero,r2,17480
10111218:	10111230 	cmpltui	zero,r2,17480
1011121c:	10111238 	rdprs	zero,r2,17480
10111220:	10111238 	rdprs	zero,r2,17480
10111224:	10111228 	cmpgeui	zero,r2,17480
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10111228:	00800044 	movi	r2,1
1011122c:	00000306 	br	1011123c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10111230:	0005883a 	mov	r2,zero
10111234:	00000106 	br	1011123c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10111238:	0005883a 	mov	r2,zero
  }
}
1011123c:	e037883a 	mov	sp,fp
10111240:	df000017 	ldw	fp,0(sp)
10111244:	dec00104 	addi	sp,sp,4
10111248:	f800283a 	ret

1011124c <atexit>:
1011124c:	200b883a 	mov	r5,r4
10111250:	000f883a 	mov	r7,zero
10111254:	000d883a 	mov	r6,zero
10111258:	0009883a 	mov	r4,zero
1011125c:	01113141 	jmpi	10111314 <__register_exitproc>

10111260 <exit>:
10111260:	defffe04 	addi	sp,sp,-8
10111264:	000b883a 	mov	r5,zero
10111268:	dc000015 	stw	r16,0(sp)
1011126c:	dfc00115 	stw	ra,4(sp)
10111270:	2021883a 	mov	r16,r4
10111274:	011142c0 	call	1011142c <__call_exitprocs>
10111278:	00840474 	movhi	r2,4113
1011127c:	108d0f04 	addi	r2,r2,13372
10111280:	11000017 	ldw	r4,0(r2)
10111284:	20800f17 	ldw	r2,60(r4)
10111288:	10000126 	beq	r2,zero,10111290 <exit+0x30>
1011128c:	103ee83a 	callr	r2
10111290:	8009883a 	mov	r4,r16
10111294:	01115ac0 	call	101115ac <_exit>

10111298 <memcmp>:
10111298:	01c000c4 	movi	r7,3
1011129c:	3980192e 	bgeu	r7,r6,10111304 <memcmp+0x6c>
101112a0:	2144b03a 	or	r2,r4,r5
101112a4:	11c4703a 	and	r2,r2,r7
101112a8:	10000f26 	beq	r2,zero,101112e8 <memcmp+0x50>
101112ac:	20800003 	ldbu	r2,0(r4)
101112b0:	28c00003 	ldbu	r3,0(r5)
101112b4:	10c0151e 	bne	r2,r3,1011130c <memcmp+0x74>
101112b8:	31bfff84 	addi	r6,r6,-2
101112bc:	01ffffc4 	movi	r7,-1
101112c0:	00000406 	br	101112d4 <memcmp+0x3c>
101112c4:	20800003 	ldbu	r2,0(r4)
101112c8:	28c00003 	ldbu	r3,0(r5)
101112cc:	31bfffc4 	addi	r6,r6,-1
101112d0:	10c00e1e 	bne	r2,r3,1011130c <memcmp+0x74>
101112d4:	21000044 	addi	r4,r4,1
101112d8:	29400044 	addi	r5,r5,1
101112dc:	31fff91e 	bne	r6,r7,101112c4 <__alt_data_end+0xffff12c4>
101112e0:	0005883a 	mov	r2,zero
101112e4:	f800283a 	ret
101112e8:	20c00017 	ldw	r3,0(r4)
101112ec:	28800017 	ldw	r2,0(r5)
101112f0:	18bfee1e 	bne	r3,r2,101112ac <__alt_data_end+0xffff12ac>
101112f4:	31bfff04 	addi	r6,r6,-4
101112f8:	21000104 	addi	r4,r4,4
101112fc:	29400104 	addi	r5,r5,4
10111300:	39bff936 	bltu	r7,r6,101112e8 <__alt_data_end+0xffff12e8>
10111304:	303fe91e 	bne	r6,zero,101112ac <__alt_data_end+0xffff12ac>
10111308:	003ff506 	br	101112e0 <__alt_data_end+0xffff12e0>
1011130c:	10c5c83a 	sub	r2,r2,r3
10111310:	f800283a 	ret

10111314 <__register_exitproc>:
10111314:	defffa04 	addi	sp,sp,-24
10111318:	dc000315 	stw	r16,12(sp)
1011131c:	04040474 	movhi	r16,4113
10111320:	840d0f04 	addi	r16,r16,13372
10111324:	80c00017 	ldw	r3,0(r16)
10111328:	dc400415 	stw	r17,16(sp)
1011132c:	dfc00515 	stw	ra,20(sp)
10111330:	18805217 	ldw	r2,328(r3)
10111334:	2023883a 	mov	r17,r4
10111338:	10003726 	beq	r2,zero,10111418 <__register_exitproc+0x104>
1011133c:	10c00117 	ldw	r3,4(r2)
10111340:	010007c4 	movi	r4,31
10111344:	20c00e16 	blt	r4,r3,10111380 <__register_exitproc+0x6c>
10111348:	1a000044 	addi	r8,r3,1
1011134c:	8800221e 	bne	r17,zero,101113d8 <__register_exitproc+0xc4>
10111350:	18c00084 	addi	r3,r3,2
10111354:	18c7883a 	add	r3,r3,r3
10111358:	18c7883a 	add	r3,r3,r3
1011135c:	12000115 	stw	r8,4(r2)
10111360:	10c7883a 	add	r3,r2,r3
10111364:	19400015 	stw	r5,0(r3)
10111368:	0005883a 	mov	r2,zero
1011136c:	dfc00517 	ldw	ra,20(sp)
10111370:	dc400417 	ldw	r17,16(sp)
10111374:	dc000317 	ldw	r16,12(sp)
10111378:	dec00604 	addi	sp,sp,24
1011137c:	f800283a 	ret
10111380:	00800034 	movhi	r2,0
10111384:	10800004 	addi	r2,r2,0
10111388:	10002626 	beq	r2,zero,10111424 <__register_exitproc+0x110>
1011138c:	01006404 	movi	r4,400
10111390:	d9400015 	stw	r5,0(sp)
10111394:	d9800115 	stw	r6,4(sp)
10111398:	d9c00215 	stw	r7,8(sp)
1011139c:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101113a0:	d9400017 	ldw	r5,0(sp)
101113a4:	d9800117 	ldw	r6,4(sp)
101113a8:	d9c00217 	ldw	r7,8(sp)
101113ac:	10001d26 	beq	r2,zero,10111424 <__register_exitproc+0x110>
101113b0:	81000017 	ldw	r4,0(r16)
101113b4:	10000115 	stw	zero,4(r2)
101113b8:	02000044 	movi	r8,1
101113bc:	22405217 	ldw	r9,328(r4)
101113c0:	0007883a 	mov	r3,zero
101113c4:	12400015 	stw	r9,0(r2)
101113c8:	20805215 	stw	r2,328(r4)
101113cc:	10006215 	stw	zero,392(r2)
101113d0:	10006315 	stw	zero,396(r2)
101113d4:	883fde26 	beq	r17,zero,10111350 <__alt_data_end+0xffff1350>
101113d8:	18c9883a 	add	r4,r3,r3
101113dc:	2109883a 	add	r4,r4,r4
101113e0:	1109883a 	add	r4,r2,r4
101113e4:	21802215 	stw	r6,136(r4)
101113e8:	01800044 	movi	r6,1
101113ec:	12406217 	ldw	r9,392(r2)
101113f0:	30cc983a 	sll	r6,r6,r3
101113f4:	4992b03a 	or	r9,r9,r6
101113f8:	12406215 	stw	r9,392(r2)
101113fc:	21c04215 	stw	r7,264(r4)
10111400:	01000084 	movi	r4,2
10111404:	893fd21e 	bne	r17,r4,10111350 <__alt_data_end+0xffff1350>
10111408:	11006317 	ldw	r4,396(r2)
1011140c:	218cb03a 	or	r6,r4,r6
10111410:	11806315 	stw	r6,396(r2)
10111414:	003fce06 	br	10111350 <__alt_data_end+0xffff1350>
10111418:	18805304 	addi	r2,r3,332
1011141c:	18805215 	stw	r2,328(r3)
10111420:	003fc606 	br	1011133c <__alt_data_end+0xffff133c>
10111424:	00bfffc4 	movi	r2,-1
10111428:	003fd006 	br	1011136c <__alt_data_end+0xffff136c>

1011142c <__call_exitprocs>:
1011142c:	defff504 	addi	sp,sp,-44
10111430:	df000915 	stw	fp,36(sp)
10111434:	dd400615 	stw	r21,24(sp)
10111438:	dc800315 	stw	r18,12(sp)
1011143c:	dfc00a15 	stw	ra,40(sp)
10111440:	ddc00815 	stw	r23,32(sp)
10111444:	dd800715 	stw	r22,28(sp)
10111448:	dd000515 	stw	r20,20(sp)
1011144c:	dcc00415 	stw	r19,16(sp)
10111450:	dc400215 	stw	r17,8(sp)
10111454:	dc000115 	stw	r16,4(sp)
10111458:	d9000015 	stw	r4,0(sp)
1011145c:	2839883a 	mov	fp,r5
10111460:	04800044 	movi	r18,1
10111464:	057fffc4 	movi	r21,-1
10111468:	00840474 	movhi	r2,4113
1011146c:	108d0f04 	addi	r2,r2,13372
10111470:	12000017 	ldw	r8,0(r2)
10111474:	45005217 	ldw	r20,328(r8)
10111478:	44c05204 	addi	r19,r8,328
1011147c:	a0001c26 	beq	r20,zero,101114f0 <__call_exitprocs+0xc4>
10111480:	a0800117 	ldw	r2,4(r20)
10111484:	15ffffc4 	addi	r23,r2,-1
10111488:	b8000d16 	blt	r23,zero,101114c0 <__call_exitprocs+0x94>
1011148c:	14000044 	addi	r16,r2,1
10111490:	8421883a 	add	r16,r16,r16
10111494:	8421883a 	add	r16,r16,r16
10111498:	84402004 	addi	r17,r16,128
1011149c:	a463883a 	add	r17,r20,r17
101114a0:	a421883a 	add	r16,r20,r16
101114a4:	e0001e26 	beq	fp,zero,10111520 <__call_exitprocs+0xf4>
101114a8:	80804017 	ldw	r2,256(r16)
101114ac:	e0801c26 	beq	fp,r2,10111520 <__call_exitprocs+0xf4>
101114b0:	bdffffc4 	addi	r23,r23,-1
101114b4:	843fff04 	addi	r16,r16,-4
101114b8:	8c7fff04 	addi	r17,r17,-4
101114bc:	bd7ff91e 	bne	r23,r21,101114a4 <__alt_data_end+0xffff14a4>
101114c0:	00800034 	movhi	r2,0
101114c4:	10800004 	addi	r2,r2,0
101114c8:	10000926 	beq	r2,zero,101114f0 <__call_exitprocs+0xc4>
101114cc:	a0800117 	ldw	r2,4(r20)
101114d0:	1000301e 	bne	r2,zero,10111594 <__call_exitprocs+0x168>
101114d4:	a0800017 	ldw	r2,0(r20)
101114d8:	10003226 	beq	r2,zero,101115a4 <__call_exitprocs+0x178>
101114dc:	a009883a 	mov	r4,r20
101114e0:	98800015 	stw	r2,0(r19)
101114e4:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101114e8:	9d000017 	ldw	r20,0(r19)
101114ec:	a03fe41e 	bne	r20,zero,10111480 <__alt_data_end+0xffff1480>
101114f0:	dfc00a17 	ldw	ra,40(sp)
101114f4:	df000917 	ldw	fp,36(sp)
101114f8:	ddc00817 	ldw	r23,32(sp)
101114fc:	dd800717 	ldw	r22,28(sp)
10111500:	dd400617 	ldw	r21,24(sp)
10111504:	dd000517 	ldw	r20,20(sp)
10111508:	dcc00417 	ldw	r19,16(sp)
1011150c:	dc800317 	ldw	r18,12(sp)
10111510:	dc400217 	ldw	r17,8(sp)
10111514:	dc000117 	ldw	r16,4(sp)
10111518:	dec00b04 	addi	sp,sp,44
1011151c:	f800283a 	ret
10111520:	a0800117 	ldw	r2,4(r20)
10111524:	80c00017 	ldw	r3,0(r16)
10111528:	10bfffc4 	addi	r2,r2,-1
1011152c:	15c01426 	beq	r2,r23,10111580 <__call_exitprocs+0x154>
10111530:	80000015 	stw	zero,0(r16)
10111534:	183fde26 	beq	r3,zero,101114b0 <__alt_data_end+0xffff14b0>
10111538:	95c8983a 	sll	r4,r18,r23
1011153c:	a0806217 	ldw	r2,392(r20)
10111540:	a5800117 	ldw	r22,4(r20)
10111544:	2084703a 	and	r2,r4,r2
10111548:	10000b26 	beq	r2,zero,10111578 <__call_exitprocs+0x14c>
1011154c:	a0806317 	ldw	r2,396(r20)
10111550:	2088703a 	and	r4,r4,r2
10111554:	20000c1e 	bne	r4,zero,10111588 <__call_exitprocs+0x15c>
10111558:	89400017 	ldw	r5,0(r17)
1011155c:	d9000017 	ldw	r4,0(sp)
10111560:	183ee83a 	callr	r3
10111564:	a0800117 	ldw	r2,4(r20)
10111568:	15bfbf1e 	bne	r2,r22,10111468 <__alt_data_end+0xffff1468>
1011156c:	98800017 	ldw	r2,0(r19)
10111570:	153fcf26 	beq	r2,r20,101114b0 <__alt_data_end+0xffff14b0>
10111574:	003fbc06 	br	10111468 <__alt_data_end+0xffff1468>
10111578:	183ee83a 	callr	r3
1011157c:	003ff906 	br	10111564 <__alt_data_end+0xffff1564>
10111580:	a5c00115 	stw	r23,4(r20)
10111584:	003feb06 	br	10111534 <__alt_data_end+0xffff1534>
10111588:	89000017 	ldw	r4,0(r17)
1011158c:	183ee83a 	callr	r3
10111590:	003ff406 	br	10111564 <__alt_data_end+0xffff1564>
10111594:	a0800017 	ldw	r2,0(r20)
10111598:	a027883a 	mov	r19,r20
1011159c:	1029883a 	mov	r20,r2
101115a0:	003fb606 	br	1011147c <__alt_data_end+0xffff147c>
101115a4:	0005883a 	mov	r2,zero
101115a8:	003ffb06 	br	10111598 <__alt_data_end+0xffff1598>

101115ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101115ac:	defffd04 	addi	sp,sp,-12
101115b0:	df000215 	stw	fp,8(sp)
101115b4:	df000204 	addi	fp,sp,8
101115b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101115bc:	0001883a 	nop
101115c0:	e0bfff17 	ldw	r2,-4(fp)
101115c4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101115c8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101115cc:	10000226 	beq	r2,zero,101115d8 <_exit+0x2c>
    ALT_SIM_FAIL();
101115d0:	002af070 	cmpltui	zero,zero,43969
101115d4:	00000106 	br	101115dc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101115d8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101115dc:	003fff06 	br	101115dc <__alt_data_end+0xffff15dc>
